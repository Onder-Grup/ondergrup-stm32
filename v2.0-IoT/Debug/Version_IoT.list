
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cad8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001088  0800ccbc  0800ccbc  0001ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd44  0800dd44  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd44  0800dd44  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd44  0800dd44  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd44  0800dd44  0001dd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd48  0800dd48  0001dd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800dd4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000110  0800de5c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800de5c  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166d7  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c4  00000000  00000000  00036853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e68  00000000  00000000  0003afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf8e  00000000  00000000  000584bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee69  00000000  00000000  0007444b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005304  00000000  00000000  001132b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001185b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cca4 	.word	0x0800cca4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800cca4 	.word	0x0800cca4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 faf4 	bl	800983c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f96c 	bl	8008534 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	20000290 	.word	0x20000290
 80004c0:	200001d9 	.word	0x200001d9
 80004c4:	20000201 	.word	0x20000201
 80004c8:	20000204 	.word	0x20000204
 80004cc:	20000205 	.word	0x20000205
 80004d0:	20000206 	.word	0x20000206
 80004d4:	20000207 	.word	0x20000207
 80004d8:	20000208 	.word	0x20000208
 80004dc:	20000209 	.word	0x20000209
 80004e0:	20000219 	.word	0x20000219
 80004e4:	2000020a 	.word	0x2000020a
 80004e8:	2000021a 	.word	0x2000021a
 80004ec:	2000020b 	.word	0x2000020b
 80004f0:	2000021b 	.word	0x2000021b
 80004f4:	2000020e 	.word	0x2000020e
 80004f8:	2000020f 	.word	0x2000020f
 80004fc:	20000210 	.word	0x20000210
 8000500:	20000211 	.word	0x20000211
 8000504:	20000212 	.word	0x20000212
 8000508:	20000213 	.word	0x20000213
 800050c:	20000214 	.word	0x20000214
 8000510:	20000215 	.word	0x20000215
 8000514:	20000216 	.word	0x20000216
 8000518:	20000217 	.word	0x20000217
 800051c:	20000218 	.word	0x20000218
 8000520:	2000021c 	.word	0x2000021c
 8000524:	2000021e 	.word	0x2000021e
 8000528:	200001fc 	.word	0x200001fc
 800052c:	200001fd 	.word	0x200001fd
 8000530:	200001fe 	.word	0x200001fe
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001ff 	.word	0x200001ff
 8000540:	20000221 	.word	0x20000221
 8000544:	2000021f 	.word	0x2000021f
 8000548:	2000020d 	.word	0x2000020d
 800054c:	20000220 	.word	0x20000220
 8000550:	2000020c 	.word	0x2000020c
 8000554:	20000222 	.word	0x20000222
 8000558:	20000223 	.word	0x20000223
 800055c:	20000224 	.word	0x20000224
 8000560:	20000225 	.word	0x20000225
 8000564:	20000226 	.word	0x20000226
 8000568:	20000227 	.word	0x20000227
 800056c:	20000228 	.word	0x20000228
 8000570:	20000229 	.word	0x20000229
 8000574:	2000022a 	.word	0x2000022a
 8000578:	2000022b 	.word	0x2000022b
 800057c:	200001d8 	.word	0x200001d8
	}

	if(kapi1AcSure>5) {
 8000580:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <eepromKontrol+0x4b0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b56      	ldr	r3, [pc, #344]	; (80006e4 <eepromKontrol+0x4b0>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <eepromKontrol+0x4b4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <eepromKontrol+0x4b4>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b53      	ldr	r3, [pc, #332]	; (80006ec <eepromKontrol+0x4b8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b51      	ldr	r3, [pc, #324]	; (80006ec <eepromKontrol+0x4b8>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b51      	ldr	r3, [pc, #324]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <eepromKontrol+0x4bc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4c      	ldr	r3, [pc, #304]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b49      	ldr	r3, [pc, #292]	; (80006fc <eepromKontrol+0x4c8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <eepromKontrol+0x4c8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <eepromKontrol+0x4cc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <eepromKontrol+0x4cc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b44      	ldr	r3, [pc, #272]	; (8000704 <eepromKontrol+0x4d0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <eepromKontrol+0x4d0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b42      	ldr	r3, [pc, #264]	; (8000708 <eepromKontrol+0x4d4>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <eepromKontrol+0x4d4>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <eepromKontrol+0x4d8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <eepromKontrol+0x4d8>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <eepromKontrol+0x4dc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <eepromKontrol+0x4dc>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <eepromKontrol+0x4e0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b38      	ldr	r3, [pc, #224]	; (8000714 <eepromKontrol+0x4e0>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <eepromKontrol+0x4e4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <eepromKontrol+0x4e4>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <eepromKontrol+0x4e8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <eepromKontrol+0x4e8>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <eepromKontrol+0x4ec>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <eepromKontrol+0x4ec>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <eepromKontrol+0x4f0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <eepromKontrol+0x4f0>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <eepromKontrol+0x4f4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <eepromKontrol+0x4f4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <eepromKontrol+0x4f8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <eepromKontrol+0x4f8>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <eepromKontrol+0x4fc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <eepromKontrol+0x4fc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <eepromKontrol+0x500>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <eepromKontrol+0x500>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <eepromKontrol+0x504>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <eepromKontrol+0x504>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	readFromEEPROM(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f851 	bl	800075c <readFromEEPROM>
	HAL_Delay(500);
 80006ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006be:	f007 ff39 	bl	8008534 <HAL_Delay>
	readFromEEPROM(2);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 f84a 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f007 ff32 	bl	8008534 <HAL_Delay>
	readFromEEPROM(3);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f843 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f007 ff2b 	bl	8008534 <HAL_Delay>
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000219 	.word	0x20000219
 80006e8:	2000020a 	.word	0x2000020a
 80006ec:	2000021a 	.word	0x2000021a
 80006f0:	2000020b 	.word	0x2000020b
 80006f4:	2000020d 	.word	0x2000020d
 80006f8:	2000021b 	.word	0x2000021b
 80006fc:	2000020e 	.word	0x2000020e
 8000700:	2000020f 	.word	0x2000020f
 8000704:	20000210 	.word	0x20000210
 8000708:	20000211 	.word	0x20000211
 800070c:	20000212 	.word	0x20000212
 8000710:	20000213 	.word	0x20000213
 8000714:	20000214 	.word	0x20000214
 8000718:	20000215 	.word	0x20000215
 800071c:	20000216 	.word	0x20000216
 8000720:	20000217 	.word	0x20000217
 8000724:	20000218 	.word	0x20000218
 8000728:	2000021c 	.word	0x2000021c
 800072c:	2000021e 	.word	0x2000021e
 8000730:	20000220 	.word	0x20000220
 8000734:	20000221 	.word	0x20000221
 8000738:	2000021f 	.word	0x2000021f

0800073c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <getCharFromCursorPosition+0x1c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000030 	.word	0x20000030

0800075c <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d117      	bne.n	800079a <readFromEEPROM+0x3e>
		//MachineID Okuma
		uint8_t tempMachineIDStartPos = idStartPos;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <readFromEEPROM+0xc4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	e00d      	b.n	8000792 <readFromEEPROM+0x36>
			machineID[i] = eepromData[tempMachineIDStartPos];
 8000776:	7ffb      	ldrb	r3, [r7, #31]
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <readFromEEPROM+0xc8>)
 800077a:	5cd1      	ldrb	r1, [r2, r3]
 800077c:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <readFromEEPROM+0xcc>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	460a      	mov	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]

			tempMachineIDStartPos++;
 8000786:	7ffb      	ldrb	r3, [r7, #31]
 8000788:	3301      	adds	r3, #1
 800078a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	3301      	adds	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	2b0b      	cmp	r3, #11
 8000796:	ddee      	ble.n	8000776 <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 8000798:	e03e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 2) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d11c      	bne.n	80007da <readFromEEPROM+0x7e>
		uint8_t tempSSIDStartPos = ssidStartPos;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <readFromEEPROM+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e012      	b.n	80007d2 <readFromEEPROM+0x76>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <readFromEEPROM+0xc8>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffc2 	bl	800073c <getCharFromCursorPosition>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <readFromEEPROM+0xd4>)
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	460a      	mov	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	3301      	adds	r3, #1
 80007ca:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b13      	cmp	r3, #19
 80007d6:	dde9      	ble.n	80007ac <readFromEEPROM+0x50>
}
 80007d8:	e01e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 3) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d11b      	bne.n	8000818 <readFromEEPROM+0xbc>
		uint8_t tempPassStartPos = passStartPos;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <readFromEEPROM+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e012      	b.n	8000812 <readFromEEPROM+0xb6>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <readFromEEPROM+0xc8>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffa2 	bl	800073c <getCharFromCursorPosition>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <readFromEEPROM+0xdc>)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	3301      	adds	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b13      	cmp	r3, #19
 8000816:	dde9      	ble.n	80007ec <readFromEEPROM+0x90>
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000004 	.word	0x20000004
 8000824:	2000012c 	.word	0x2000012c
 8000828:	200001a4 	.word	0x200001a4
 800082c:	20000008 	.word	0x20000008
 8000830:	200001b0 	.word	0x200001b0
 8000834:	2000000c 	.word	0x2000000c
 8000838:	200001c4 	.word	0x200001c4

0800083c <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f7ff fcea 	bl	8000224 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f00a ff37 	bl	800b6cc <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	4618      	mov	r0, r3
 8000862:	f007 fe67 	bl	8008534 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a0      	sub	sp, #128	; 0x80
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 800087c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000880:	4915      	ldr	r1, [pc, #84]	; (80008d8 <ESP8266_Init+0x68>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ffda 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 8000888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088c:	4913      	ldr	r1, [pc, #76]	; (80008dc <ESP8266_Init+0x6c>)
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f7ff ffd4 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 8000894:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000898:	4911      	ldr	r1, [pc, #68]	; (80008e0 <ESP8266_Init+0x70>)
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff ffce 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 80008a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008a4:	490f      	ldr	r1, [pc, #60]	; (80008e4 <ESP8266_Init+0x74>)
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f7ff ffc8 	bl	800083c <sendATCommand>

    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 80008ac:	f107 0014 	add.w	r0, r7, #20
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <ESP8266_Init+0x78>)
 80008b8:	2164      	movs	r1, #100	; 0x64
 80008ba:	f00b fd3d 	bl	800c338 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c6:	4619      	mov	r1, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ffb7 	bl	800083c <sendATCommand>
}
 80008ce:	bf00      	nop
 80008d0:	3778      	adds	r7, #120	; 0x78
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	0800ccbc 	.word	0x0800ccbc
 80008dc:	0800cccc 	.word	0x0800cccc
 80008e0:	0800ccd8 	.word	0x0800ccd8
 80008e4:	0800cce0 	.word	0x0800cce0
 80008e8:	0800ccf0 	.word	0x0800ccf0

080008ec <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0c6      	sub	sp, #280	; 0x118
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008fa:	6018      	str	r0, [r3, #0]
 80008fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000904:	6019      	str	r1, [r3, #0]
 8000906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800090a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800090e:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000910:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <sendMachineData+0xb8>)
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <sendMachineData+0xbc>)
 8000918:	21c8      	movs	r1, #200	; 0xc8
 800091a:	f00b fd0d 	bl	800c338 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 800091e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800092a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	f7ff ff84 	bl	800083c <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 8000934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800093c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <sendMachineData+0xc0>)
 8000942:	9201      	str	r2, [sp, #4]
 8000944:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000948:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <sendMachineData+0xc4>)
 8000954:	21c8      	movs	r1, #200	; 0xc8
 8000956:	f00b fcef 	bl	800c338 <sniprintf>
 800095a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 800095e:	f107 0010 	add.w	r0, r7, #16
 8000962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000966:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <sendMachineData+0xc8>)
 8000968:	2132      	movs	r1, #50	; 0x32
 800096a:	f00b fce5 	bl	800c338 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 800096e:	f107 0110 	add.w	r1, r7, #16
 8000972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	f7ff ff5c 	bl	800083c <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000984:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000990:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f7ff ff51 	bl	800083c <sendATCommand>
}
 800099a:	bf00      	nop
 800099c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0800cd0c 	.word	0x0800cd0c
 80009a8:	0800cd1c 	.word	0x0800cd1c
 80009ac:	0800cd98 	.word	0x0800cd98
 80009b0:	0800cd3c 	.word	0x0800cd3c
 80009b4:	0800cdac 	.word	0x0800cdac

080009b8 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart, const char *machineID) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0f6      	sub	sp, #472	; 0x1d8
 80009bc:	af02      	add	r7, sp, #8
 80009be:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009c2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80009c6:	6018      	str	r0, [r3, #0]
 80009c8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80009d0:	6019      	str	r1, [r3, #0]
    char cmd[200], lenCmd[50];
    int len;

    // TCP bağlantısı
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009d2:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <checkMachineID+0xfc>)
 80009d8:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <checkMachineID+0x100>)
 80009da:	21c8      	movs	r1, #200	; 0xc8
 80009dc:	f00b fcac 	bl	800c338 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 80009e0:	f507 7182 	add.w	r1, r7, #260	; 0x104
 80009e4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009e8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80009ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	f7ff ff23 	bl	800083c <sendATCommand>

    // HTTP GET isteği
    len = snprintf(cmd, sizeof(cmd),
 80009f6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80009fe:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000a02:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <checkMachineID+0x104>)
 8000a04:	9200      	str	r2, [sp, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <checkMachineID+0x108>)
 8000a0a:	21c8      	movs	r1, #200	; 0xc8
 8000a0c:	f00b fc94 	bl	800c338 <sniprintf>
 8000a10:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
                   "GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
                   machineID, mainServerWithPort);
    if(len > sizeof(cmd) || len < 0) {
 8000a14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a18:	2bc8      	cmp	r3, #200	; 0xc8
 8000a1a:	d803      	bhi.n	8000a24 <checkMachineID+0x6c>
 8000a1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	da01      	bge.n	8000a28 <checkMachineID+0x70>
        return 0; // Hata durumu
 8000a24:	2300      	movs	r3, #0
 8000a26:	e040      	b.n	8000aaa <checkMachineID+0xf2>
    }

    // AT+CIPSEND komutu
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 8000a28:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000a2c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a30:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <checkMachineID+0x10c>)
 8000a32:	2132      	movs	r1, #50	; 0x32
 8000a34:	f00b fc80 	bl	800c338 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 8000a38:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000a3c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a40:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000a44:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	f7ff fef7 	bl	800083c <sendATCommand>

    // GET isteğini gönder
    sendATCommand(huart, cmd, 4000);
 8000a4e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000a52:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a56:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000a5a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	f7ff feec 	bl	800083c <sendATCommand>

    // Gelen yanıtı kontrol et
    char bufferRX[200];
    HAL_UART_Receive_IT(huart, (uint8_t*)bufferRX, sizeof(bufferRX));
 8000a64:	f107 0108 	add.w	r1, r7, #8
 8000a68:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a6c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000a70:	22c8      	movs	r2, #200	; 0xc8
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	f00a fe5f 	bl	800b736 <HAL_UART_Receive_IT>
    HAL_Delay(5000); // Yanıt için bekle
 8000a78:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a7c:	f007 fd5a 	bl	8008534 <HAL_Delay>

    if (strstr(bufferRX, "HTTP/1.1 200 OK") != NULL && strstr(bufferRX, "\"message\": \"Machine ID is available.\"") != NULL) {
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4910      	ldr	r1, [pc, #64]	; (8000ac8 <checkMachineID+0x110>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00b fd07 	bl	800c49a <strstr>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00a      	beq.n	8000aa8 <checkMachineID+0xf0>
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <checkMachineID+0x114>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00b fcfe 	bl	800c49a <strstr>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <checkMachineID+0xf0>
        return 1; // Başarılı
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <checkMachineID+0xf2>
    }

    return 0; // Yanıt başarısız
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0800cd0c 	.word	0x0800cd0c
 8000ab8:	0800cd1c 	.word	0x0800cd1c
 8000abc:	0800cd98 	.word	0x0800cd98
 8000ac0:	0800cdbc 	.word	0x0800cdbc
 8000ac4:	0800cdac 	.word	0x0800cdac
 8000ac8:	0800ce00 	.word	0x0800ce00
 8000acc:	0800ce10 	.word	0x0800ce10

08000ad0 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <hata2EEPROM+0xa4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <hata2EEPROM+0xa8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <hata2EEPROM+0xac>)
 8000ae8:	5cd3      	ldrb	r3, [r2, r3]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000aee:	f000 f92b 	bl	8000d48 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000af2:	e000      	b.n	8000af6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000af4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	e012      	b.n	8000b22 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <hata2EEPROM+0xa8>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <hata2EEPROM+0xac>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d107      	bne.n	8000b1c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <hata2EEPROM+0xa8>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	4919      	ldr	r1, [pc, #100]	; (8000b7c <hata2EEPROM+0xac>)
 8000b16:	79fa      	ldrb	r2, [r7, #7]
 8000b18:	54ca      	strb	r2, [r1, r3]
					break;
 8000b1a:	e007      	b.n	8000b2c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <hata2EEPROM+0xa4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbe7      	blt.n	8000afc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <hata2EEPROM+0xa8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	b299      	uxth	r1, r3
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <hata2EEPROM+0xa4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	b298      	uxth	r0, r3
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <hata2EEPROM+0xa8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <hata2EEPROM+0xac>)
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <hata2EEPROM+0xa4>)
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	b292      	uxth	r2, r2
 8000b46:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b4a:	9402      	str	r4, [sp, #8]
 8000b4c:	9201      	str	r2, [sp, #4]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4603      	mov	r3, r0
 8000b52:	460a      	mov	r2, r1
 8000b54:	21a0      	movs	r1, #160	; 0xa0
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <hata2EEPROM+0xb0>)
 8000b58:	f008 fd76 	bl	8009648 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b60:	f007 fce8 	bl	8008534 <HAL_Delay>
	eepromKontrol(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f7ff fb65 	bl	8000234 <eepromKontrol>
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000ac 	.word	0x200000ac
 8000b78:	200000b0 	.word	0x200000b0
 8000b7c:	2000012c 	.word	0x2000012c
 8000b80:	20000290 	.word	0x20000290

08000b84 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d11d      	bne.n	8000bd0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b94:	4b62      	ldr	r3, [pc, #392]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d105      	bne.n	8000ba8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b9c:	4a61      	ldr	r2, [pc, #388]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f006 ff71 	bl	8007a88 <lcd_print>
 8000ba6:	e008      	b.n	8000bba <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d104      	bne.n	8000bba <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000bb0:	4a5d      	ldr	r2, [pc, #372]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f006 ff67 	bl	8007a88 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000bba:	4a5c      	ldr	r2, [pc, #368]	; (8000d2c <hataKoduLcdGoster+0x1a8>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f006 ff62 	bl	8007a88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bc4:	4a5a      	ldr	r2, [pc, #360]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000bc6:	2107      	movs	r1, #7
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f006 ff5d 	bl	8007a88 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bce:	e0a3      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d11d      	bne.n	8000c12 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000bde:	4a51      	ldr	r2, [pc, #324]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	2001      	movs	r0, #1
 8000be4:	f006 ff50 	bl	8007a88 <lcd_print>
 8000be8:	e008      	b.n	8000bfc <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000bea:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d104      	bne.n	8000bfc <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bf2:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f006 ff46 	bl	8007a88 <lcd_print>
		lcd_print(2, 2, "2");
 8000bfc:	4a4d      	ldr	r2, [pc, #308]	; (8000d34 <hataKoduLcdGoster+0x1b0>)
 8000bfe:	2102      	movs	r1, #2
 8000c00:	2002      	movs	r0, #2
 8000c02:	f006 ff41 	bl	8007a88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c06:	4a4a      	ldr	r2, [pc, #296]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000c08:	2107      	movs	r1, #7
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f006 ff3c 	bl	8007a88 <lcd_print>
}
 8000c10:	e082      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d11d      	bne.n	8000c54 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000c18:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c20:	4a40      	ldr	r2, [pc, #256]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	2001      	movs	r0, #1
 8000c26:	f006 ff2f 	bl	8007a88 <lcd_print>
 8000c2a:	e008      	b.n	8000c3e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c2c:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d104      	bne.n	8000c3e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c34:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f006 ff25 	bl	8007a88 <lcd_print>
		lcd_print(2, 3, "3");
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	; (8000d38 <hataKoduLcdGoster+0x1b4>)
 8000c40:	2103      	movs	r1, #3
 8000c42:	2002      	movs	r0, #2
 8000c44:	f006 ff20 	bl	8007a88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c48:	4a39      	ldr	r2, [pc, #228]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000c4a:	2107      	movs	r1, #7
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f006 ff1b 	bl	8007a88 <lcd_print>
}
 8000c52:	e061      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d11d      	bne.n	8000c96 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d105      	bne.n	8000c6e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c62:	4a30      	ldr	r2, [pc, #192]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	2001      	movs	r0, #1
 8000c68:	f006 ff0e 	bl	8007a88 <lcd_print>
 8000c6c:	e008      	b.n	8000c80 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d104      	bne.n	8000c80 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c76:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f006 ff04 	bl	8007a88 <lcd_print>
		lcd_print(2, 4, "4");
 8000c80:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <hataKoduLcdGoster+0x1b8>)
 8000c82:	2104      	movs	r1, #4
 8000c84:	2002      	movs	r0, #2
 8000c86:	f006 feff 	bl	8007a88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c8a:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000c8c:	2107      	movs	r1, #7
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f006 fefa 	bl	8007a88 <lcd_print>
}
 8000c94:	e040      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d11d      	bne.n	8000cd8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f006 feed 	bl	8007a88 <lcd_print>
 8000cae:	e008      	b.n	8000cc2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d104      	bne.n	8000cc2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000cba:	2101      	movs	r1, #1
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f006 fee3 	bl	8007a88 <lcd_print>
		lcd_print(2, 5, "5");
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <hataKoduLcdGoster+0x1bc>)
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f006 fede 	bl	8007a88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ccc:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000cce:	2107      	movs	r1, #7
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f006 fed9 	bl	8007a88 <lcd_print>
}
 8000cd6:	e01f      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d11c      	bne.n	8000d18 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d105      	bne.n	8000cf2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	2001      	movs	r0, #1
 8000cec:	f006 fecc 	bl	8007a88 <lcd_print>
 8000cf0:	e008      	b.n	8000d04 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d104      	bne.n	8000d04 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f006 fec2 	bl	8007a88 <lcd_print>
		lcd_print(2, 6, "6");
 8000d04:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <hataKoduLcdGoster+0x1c0>)
 8000d06:	2106      	movs	r1, #6
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f006 febd 	bl	8007a88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000d10:	2107      	movs	r1, #7
 8000d12:	2002      	movs	r0, #2
 8000d14:	f006 feb8 	bl	8007a88 <lcd_print>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000221 	.word	0x20000221
 8000d24:	0800ce38 	.word	0x0800ce38
 8000d28:	0800ce48 	.word	0x0800ce48
 8000d2c:	0800ce58 	.word	0x0800ce58
 8000d30:	0800ce5c 	.word	0x0800ce5c
 8000d34:	0800ce68 	.word	0x0800ce68
 8000d38:	0800ce6c 	.word	0x0800ce6c
 8000d3c:	0800ce70 	.word	0x0800ce70
 8000d40:	0800ce74 	.word	0x0800ce74
 8000d44:	0800ce78 	.word	0x0800ce78

08000d48 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	e009      	b.n	8000d68 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <eepromDataFillWithEmpty+0x38>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <eepromDataFillWithEmpty+0x3c>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3301      	adds	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <eepromDataFillWithEmpty+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dbf0      	blt.n	8000d54 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000084 	.word	0x20000084
 8000d84:	2000012c 	.word	0x2000012c
 8000d88:	200000ac 	.word	0x200000ac

08000d8c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d9e:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <i2cTest+0x154>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b4e      	ldr	r3, [pc, #312]	; (8000ee0 <i2cTest+0x154>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0201 	bic.w	r2, r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000dae:	484c      	ldr	r0, [pc, #304]	; (8000ee0 <i2cTest+0x154>)
 8000db0:	f008 fb1c 	bl	80093ec <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db4:	23c0      	movs	r3, #192	; 0xc0
 8000db6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000db8:	2311      	movs	r3, #17
 8000dba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4846      	ldr	r0, [pc, #280]	; (8000ee4 <i2cTest+0x158>)
 8000dca:	f007 ff23 	bl	8008c14 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4844      	ldr	r0, [pc, #272]	; (8000ee4 <i2cTest+0x158>)
 8000dd4:	f008 f995 	bl	8009102 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	4841      	ldr	r0, [pc, #260]	; (8000ee4 <i2cTest+0x158>)
 8000dde:	f008 f990 	bl	8009102 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000de2:	200a      	movs	r0, #10
 8000de4:	f007 fba6 	bl	8008534 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000de8:	bf00      	nop
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	483d      	ldr	r0, [pc, #244]	; (8000ee4 <i2cTest+0x158>)
 8000dee:	f008 f971 	bl	80090d4 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d006      	beq.n	8000e06 <i2cTest+0x7a>
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	483a      	ldr	r0, [pc, #232]	; (8000ee4 <i2cTest+0x158>)
 8000dfc:	f008 f96a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1f1      	bne.n	8000dea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	4836      	ldr	r0, [pc, #216]	; (8000ee4 <i2cTest+0x158>)
 8000e0c:	f008 f979 	bl	8009102 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000e10:	200a      	movs	r0, #10
 8000e12:	f007 fb8f 	bl	8008534 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e16:	bf00      	nop
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	4832      	ldr	r0, [pc, #200]	; (8000ee4 <i2cTest+0x158>)
 8000e1c:	f008 f95a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d0f8      	beq.n	8000e18 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	482e      	ldr	r0, [pc, #184]	; (8000ee4 <i2cTest+0x158>)
 8000e2c:	f008 f969 	bl	8009102 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e30:	200a      	movs	r0, #10
 8000e32:	f007 fb7f 	bl	8008534 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e36:	bf00      	nop
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	482a      	ldr	r0, [pc, #168]	; (8000ee4 <i2cTest+0x158>)
 8000e3c:	f008 f94a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d0f8      	beq.n	8000e38 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <i2cTest+0x158>)
 8000e4c:	f008 f959 	bl	8009102 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e50:	200a      	movs	r0, #10
 8000e52:	f007 fb6f 	bl	8008534 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e56:	bf00      	nop
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	4822      	ldr	r0, [pc, #136]	; (8000ee4 <i2cTest+0x158>)
 8000e5c:	f008 f93a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d1f8      	bne.n	8000e58 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <i2cTest+0x158>)
 8000e6c:	f008 f949 	bl	8009102 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e70:	200a      	movs	r0, #10
 8000e72:	f007 fb5f 	bl	8008534 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e76:	bf00      	nop
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <i2cTest+0x158>)
 8000e7c:	f008 f92a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d1f8      	bne.n	8000e78 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23c0      	movs	r3, #192	; 0xc0
 8000e88:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <i2cTest+0x158>)
 8000e9c:	f007 feba 	bl	8008c14 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <i2cTest+0x154>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <i2cTest+0x154>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <i2cTest+0x154>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <i2cTest+0x154>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ebe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <i2cTest+0x154>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <i2cTest+0x154>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0201 	orr.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <i2cTest+0x154>)
 8000ed2:	f008 f947 	bl	8009164 <HAL_I2C_Init>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000290 	.word	0x20000290
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000ef2:	20c8      	movs	r0, #200	; 0xc8
 8000ef4:	f007 fb1e 	bl	8008534 <HAL_Delay>
	lcd_clear();
 8000ef8:	f006 fdf2 	bl	8007ae0 <lcd_clear>
	if(type == 1 && page == 0) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d143      	bne.n	8000f8a <printTemplate+0xa2>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d140      	bne.n	8000f8a <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000f08:	4a9d      	ldr	r2, [pc, #628]	; (8001180 <printTemplate+0x298>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f006 fdbb 	bl	8007a88 <lcd_print>
		lcd_print(2, 3, "0");
 8000f12:	4a9c      	ldr	r2, [pc, #624]	; (8001184 <printTemplate+0x29c>)
 8000f14:	2103      	movs	r1, #3
 8000f16:	2002      	movs	r0, #2
 8000f18:	f006 fdb6 	bl	8007a88 <lcd_print>
		lcd_print(2, 4, "1");
 8000f1c:	4a9a      	ldr	r2, [pc, #616]	; (8001188 <printTemplate+0x2a0>)
 8000f1e:	2104      	movs	r1, #4
 8000f20:	2002      	movs	r0, #2
 8000f22:	f006 fdb1 	bl	8007a88 <lcd_print>
		lcd_print(2, 5, "2");
 8000f26:	4a99      	ldr	r2, [pc, #612]	; (800118c <printTemplate+0x2a4>)
 8000f28:	2105      	movs	r1, #5
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f006 fdac 	bl	8007a88 <lcd_print>
		lcd_print(2, 6, "3");
 8000f30:	4a97      	ldr	r2, [pc, #604]	; (8001190 <printTemplate+0x2a8>)
 8000f32:	2106      	movs	r1, #6
 8000f34:	2002      	movs	r0, #2
 8000f36:	f006 fda7 	bl	8007a88 <lcd_print>
		lcd_print(2, 7, "4");
 8000f3a:	4a96      	ldr	r2, [pc, #600]	; (8001194 <printTemplate+0x2ac>)
 8000f3c:	2107      	movs	r1, #7
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f006 fda2 	bl	8007a88 <lcd_print>
		lcd_print(2, 10, "5");
 8000f44:	4a94      	ldr	r2, [pc, #592]	; (8001198 <printTemplate+0x2b0>)
 8000f46:	210a      	movs	r1, #10
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f006 fd9d 	bl	8007a88 <lcd_print>
		lcd_print(2, 11, "6");
 8000f4e:	4a93      	ldr	r2, [pc, #588]	; (800119c <printTemplate+0x2b4>)
 8000f50:	210b      	movs	r1, #11
 8000f52:	2002      	movs	r0, #2
 8000f54:	f006 fd98 	bl	8007a88 <lcd_print>
		lcd_print(2, 12, "7");
 8000f58:	4a91      	ldr	r2, [pc, #580]	; (80011a0 <printTemplate+0x2b8>)
 8000f5a:	210c      	movs	r1, #12
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 fd93 	bl	8007a88 <lcd_print>
		lcd_print(2, 13, "8");
 8000f62:	4a90      	ldr	r2, [pc, #576]	; (80011a4 <printTemplate+0x2bc>)
 8000f64:	210d      	movs	r1, #13
 8000f66:	2002      	movs	r0, #2
 8000f68:	f006 fd8e 	bl	8007a88 <lcd_print>
		lcd_print(2, 14, "9");
 8000f6c:	4a8e      	ldr	r2, [pc, #568]	; (80011a8 <printTemplate+0x2c0>)
 8000f6e:	210e      	movs	r1, #14
 8000f70:	2002      	movs	r0, #2
 8000f72:	f006 fd89 	bl	8007a88 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f76:	4a8d      	ldr	r2, [pc, #564]	; (80011ac <printTemplate+0x2c4>)
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 fd84 	bl	8007a88 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f80:	2103      	movs	r1, #3
 8000f82:	2002      	movs	r0, #2
 8000f84:	f006 fd61 	bl	8007a4a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f88:	e0f5      	b.n	8001176 <printTemplate+0x28e>
	} else if(type == 2) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d178      	bne.n	8001082 <printTemplate+0x19a>
		if(page == 1) {
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d114      	bne.n	8000fc0 <printTemplate+0xd8>
			lcd_clear();
 8000f96:	f006 fda3 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 8000f9a:	2064      	movs	r0, #100	; 0x64
 8000f9c:	f007 faca 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fa0:	4a83      	ldr	r2, [pc, #524]	; (80011b0 <printTemplate+0x2c8>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f006 fd6f 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000faa:	4a82      	ldr	r2, [pc, #520]	; (80011b4 <printTemplate+0x2cc>)
 8000fac:	2107      	movs	r1, #7
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f006 fd6a 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fb4:	4a80      	ldr	r2, [pc, #512]	; (80011b8 <printTemplate+0x2d0>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f006 fd65 	bl	8007a88 <lcd_print>
}
 8000fbe:	e0da      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 2) {
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d114      	bne.n	8000ff0 <printTemplate+0x108>
			lcd_clear();
 8000fc6:	f006 fd8b 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 8000fca:	2064      	movs	r0, #100	; 0x64
 8000fcc:	f007 fab2 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fd0:	4a77      	ldr	r2, [pc, #476]	; (80011b0 <printTemplate+0x2c8>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f006 fd57 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fda:	4a76      	ldr	r2, [pc, #472]	; (80011b4 <printTemplate+0x2cc>)
 8000fdc:	2107      	movs	r1, #7
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f006 fd52 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fe4:	4a75      	ldr	r2, [pc, #468]	; (80011bc <printTemplate+0x2d4>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f006 fd4d 	bl	8007a88 <lcd_print>
}
 8000fee:	e0c2      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 3) {
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d114      	bne.n	8001020 <printTemplate+0x138>
			lcd_clear();
 8000ff6:	f006 fd73 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f007 fa9a 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001000:	4a6b      	ldr	r2, [pc, #428]	; (80011b0 <printTemplate+0x2c8>)
 8001002:	2101      	movs	r1, #1
 8001004:	2001      	movs	r0, #1
 8001006:	f006 fd3f 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800100a:	4a6a      	ldr	r2, [pc, #424]	; (80011b4 <printTemplate+0x2cc>)
 800100c:	2107      	movs	r1, #7
 800100e:	2001      	movs	r0, #1
 8001010:	f006 fd3a 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001014:	4a6a      	ldr	r2, [pc, #424]	; (80011c0 <printTemplate+0x2d8>)
 8001016:	2101      	movs	r1, #1
 8001018:	2002      	movs	r0, #2
 800101a:	f006 fd35 	bl	8007a88 <lcd_print>
}
 800101e:	e0aa      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 4) {
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b04      	cmp	r3, #4
 8001024:	d114      	bne.n	8001050 <printTemplate+0x168>
			lcd_clear();
 8001026:	f006 fd5b 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f007 fa82 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001030:	4a5f      	ldr	r2, [pc, #380]	; (80011b0 <printTemplate+0x2c8>)
 8001032:	2101      	movs	r1, #1
 8001034:	2001      	movs	r0, #1
 8001036:	f006 fd27 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800103a:	4a5e      	ldr	r2, [pc, #376]	; (80011b4 <printTemplate+0x2cc>)
 800103c:	2107      	movs	r1, #7
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fd22 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001044:	4a5f      	ldr	r2, [pc, #380]	; (80011c4 <printTemplate+0x2dc>)
 8001046:	2101      	movs	r1, #1
 8001048:	2002      	movs	r0, #2
 800104a:	f006 fd1d 	bl	8007a88 <lcd_print>
}
 800104e:	e092      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 5) {
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b05      	cmp	r3, #5
 8001054:	f040 808f 	bne.w	8001176 <printTemplate+0x28e>
			lcd_clear();
 8001058:	f006 fd42 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f007 fa69 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001062:	4a53      	ldr	r2, [pc, #332]	; (80011b0 <printTemplate+0x2c8>)
 8001064:	2101      	movs	r1, #1
 8001066:	2001      	movs	r0, #1
 8001068:	f006 fd0e 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800106c:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <printTemplate+0x2cc>)
 800106e:	2107      	movs	r1, #7
 8001070:	2001      	movs	r0, #1
 8001072:	f006 fd09 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001076:	4a54      	ldr	r2, [pc, #336]	; (80011c8 <printTemplate+0x2e0>)
 8001078:	2101      	movs	r1, #1
 800107a:	2002      	movs	r0, #2
 800107c:	f006 fd04 	bl	8007a88 <lcd_print>
}
 8001080:	e079      	b.n	8001176 <printTemplate+0x28e>
	} else if(type == 3) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d176      	bne.n	8001176 <printTemplate+0x28e>
		if(page == 1) {
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d114      	bne.n	80010b8 <printTemplate+0x1d0>
			lcd_clear();
 800108e:	f006 fd27 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f007 fa4e 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001098:	4a4c      	ldr	r2, [pc, #304]	; (80011cc <printTemplate+0x2e4>)
 800109a:	2101      	movs	r1, #1
 800109c:	2001      	movs	r0, #1
 800109e:	f006 fcf3 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010a2:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <printTemplate+0x2e8>)
 80010a4:	2107      	movs	r1, #7
 80010a6:	2001      	movs	r0, #1
 80010a8:	f006 fcee 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010ac:	4a42      	ldr	r2, [pc, #264]	; (80011b8 <printTemplate+0x2d0>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	2002      	movs	r0, #2
 80010b2:	f006 fce9 	bl	8007a88 <lcd_print>
}
 80010b6:	e05e      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 2) {
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d114      	bne.n	80010e8 <printTemplate+0x200>
			lcd_clear();
 80010be:	f006 fd0f 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f007 fa36 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c8:	4a40      	ldr	r2, [pc, #256]	; (80011cc <printTemplate+0x2e4>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	2001      	movs	r0, #1
 80010ce:	f006 fcdb 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010d2:	4a3f      	ldr	r2, [pc, #252]	; (80011d0 <printTemplate+0x2e8>)
 80010d4:	2107      	movs	r1, #7
 80010d6:	2001      	movs	r0, #1
 80010d8:	f006 fcd6 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010dc:	4a37      	ldr	r2, [pc, #220]	; (80011bc <printTemplate+0x2d4>)
 80010de:	2101      	movs	r1, #1
 80010e0:	2002      	movs	r0, #2
 80010e2:	f006 fcd1 	bl	8007a88 <lcd_print>
}
 80010e6:	e046      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 3) {
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d114      	bne.n	8001118 <printTemplate+0x230>
			lcd_clear();
 80010ee:	f006 fcf7 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 80010f2:	2064      	movs	r0, #100	; 0x64
 80010f4:	f007 fa1e 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010f8:	4a34      	ldr	r2, [pc, #208]	; (80011cc <printTemplate+0x2e4>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	2001      	movs	r0, #1
 80010fe:	f006 fcc3 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001102:	4a33      	ldr	r2, [pc, #204]	; (80011d0 <printTemplate+0x2e8>)
 8001104:	2107      	movs	r1, #7
 8001106:	2001      	movs	r0, #1
 8001108:	f006 fcbe 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 800110c:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <printTemplate+0x2d8>)
 800110e:	2101      	movs	r1, #1
 8001110:	2002      	movs	r0, #2
 8001112:	f006 fcb9 	bl	8007a88 <lcd_print>
}
 8001116:	e02e      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 4) {
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d114      	bne.n	8001148 <printTemplate+0x260>
			lcd_clear();
 800111e:	f006 fcdf 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f007 fa06 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <printTemplate+0x2e4>)
 800112a:	2101      	movs	r1, #1
 800112c:	2001      	movs	r0, #1
 800112e:	f006 fcab 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <printTemplate+0x2e8>)
 8001134:	2107      	movs	r1, #7
 8001136:	2001      	movs	r0, #1
 8001138:	f006 fca6 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <printTemplate+0x2dc>)
 800113e:	2101      	movs	r1, #1
 8001140:	2002      	movs	r0, #2
 8001142:	f006 fca1 	bl	8007a88 <lcd_print>
}
 8001146:	e016      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 5) {
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d113      	bne.n	8001176 <printTemplate+0x28e>
			lcd_clear();
 800114e:	f006 fcc7 	bl	8007ae0 <lcd_clear>
			HAL_Delay(100);
 8001152:	2064      	movs	r0, #100	; 0x64
 8001154:	f007 f9ee 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <printTemplate+0x2e4>)
 800115a:	2101      	movs	r1, #1
 800115c:	2001      	movs	r0, #1
 800115e:	f006 fc93 	bl	8007a88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001162:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <printTemplate+0x2e8>)
 8001164:	2107      	movs	r1, #7
 8001166:	2001      	movs	r0, #1
 8001168:	f006 fc8e 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800116c:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <printTemplate+0x2e0>)
 800116e:	2101      	movs	r1, #1
 8001170:	2002      	movs	r0, #2
 8001172:	f006 fc89 	bl	8007a88 <lcd_print>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800ce7c 	.word	0x0800ce7c
 8001184:	0800ce84 	.word	0x0800ce84
 8001188:	0800ce88 	.word	0x0800ce88
 800118c:	0800ce8c 	.word	0x0800ce8c
 8001190:	0800ce90 	.word	0x0800ce90
 8001194:	0800ce94 	.word	0x0800ce94
 8001198:	0800ce98 	.word	0x0800ce98
 800119c:	0800ce9c 	.word	0x0800ce9c
 80011a0:	0800cea0 	.word	0x0800cea0
 80011a4:	0800cea4 	.word	0x0800cea4
 80011a8:	0800cea8 	.word	0x0800cea8
 80011ac:	200001a4 	.word	0x200001a4
 80011b0:	0800ceac 	.word	0x0800ceac
 80011b4:	200001b0 	.word	0x200001b0
 80011b8:	0800ceb4 	.word	0x0800ceb4
 80011bc:	0800cec8 	.word	0x0800cec8
 80011c0:	0800cedc 	.word	0x0800cedc
 80011c4:	0800cef0 	.word	0x0800cef0
 80011c8:	0800cf04 	.word	0x0800cf04
 80011cc:	0800cf18 	.word	0x0800cf18
 80011d0:	200001c4 	.word	0x200001c4

080011d4 <checkSlideVal>:

int checkSlideVal(int state) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d111      	bne.n	8001206 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011e2:	2101      	movs	r1, #1
 80011e4:	4813      	ldr	r0, [pc, #76]	; (8001234 <checkSlideVal+0x60>)
 80011e6:	f007 ff75 	bl	80090d4 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <checkSlideVal+0x20>
			return 34;
 80011f0:	2322      	movs	r3, #34	; 0x22
 80011f2:	e01b      	b.n	800122c <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011f4:	2108      	movs	r1, #8
 80011f6:	4810      	ldr	r0, [pc, #64]	; (8001238 <checkSlideVal+0x64>)
 80011f8:	f007 ff6c 	bl	80090d4 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d113      	bne.n	800122a <checkSlideVal+0x56>
			return 32;
 8001202:	2320      	movs	r3, #32
 8001204:	e012      	b.n	800122c <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001206:	2101      	movs	r1, #1
 8001208:	480a      	ldr	r0, [pc, #40]	; (8001234 <checkSlideVal+0x60>)
 800120a:	f007 ff63 	bl	80090d4 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <checkSlideVal+0x44>
			return 35;
 8001214:	2323      	movs	r3, #35	; 0x23
 8001216:	e009      	b.n	800122c <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001218:	2108      	movs	r1, #8
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <checkSlideVal+0x64>)
 800121c:	f007 ff5a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <checkSlideVal+0x56>
			return 33;
 8001226:	2321      	movs	r3, #33	; 0x21
 8001228:	e000      	b.n	800122c <checkSlideVal+0x58>
		}
	}
	return 0;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40010800 	.word	0x40010800
 8001238:	40011000 	.word	0x40011000

0800123c <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7fe ffea 	bl	8000224 <strlen>
 8001250:	4603      	mov	r3, r0
 8001252:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001258:	e08a      	b.n	8001370 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f7ff ffba 	bl	80011d4 <checkSlideVal>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	dd07      	ble.n	8001276 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001266:	6838      	ldr	r0, [r7, #0]
 8001268:	f7ff ffb4 	bl	80011d4 <checkSlideVal>
 800126c:	4603      	mov	r3, r0
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b44      	ldr	r3, [pc, #272]	; (8001384 <slideText+0x148>)
 8001272:	701a      	strb	r2, [r3, #0]
			break;
 8001274:	e081      	b.n	800137a <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	e075      	b.n	8001368 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f7ff ffa9 	bl	80011d4 <checkSlideVal>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	dd09      	ble.n	800129c <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001288:	6838      	ldr	r0, [r7, #0]
 800128a:	f7ff ffa3 	bl	80011d4 <checkSlideVal>
 800128e:	4603      	mov	r3, r0
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <slideText+0x148>)
 8001294:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800129a:	e069      	b.n	8001370 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	4413      	add	r3, r2
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	e029      	b.n	80012fa <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f7ff ff94 	bl	80011d4 <checkSlideVal>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd0b      	ble.n	80012ca <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f7ff ff8e 	bl	80011d4 <checkSlideVal>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <slideText+0x148>)
 80012be:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80012c8:	e01d      	b.n	8001306 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b2d9      	uxtb	r1, r3
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	f006 fbe2 	bl	8007ab2 <lcd_print_char>
				HAL_Delay(30);
 80012ee:	201e      	movs	r0, #30
 80012f0:	f007 f920 	bl	8008534 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	3301      	adds	r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	7dfa      	ldrb	r2, [r7, #23]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4413      	add	r3, r2
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	429a      	cmp	r2, r3
 8001304:	dbcf      	blt.n	80012a6 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	3b01      	subs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	e023      	b.n	8001356 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	f7ff ff60 	bl	80011d4 <checkSlideVal>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	dd0b      	ble.n	8001332 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800131a:	6838      	ldr	r0, [r7, #0]
 800131c:	f7ff ff5a 	bl	80011d4 <checkSlideVal>
 8001320:	4603      	mov	r3, r0
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <slideText+0x148>)
 8001326:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001330:	e017      	b.n	8001362 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	db0a      	blt.n	8001350 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	b2d1      	uxtb	r1, r2
 8001342:	2220      	movs	r2, #32
 8001344:	4618      	mov	r0, r3
 8001346:	f006 fbb4 	bl	8007ab2 <lcd_print_char>
			    	 HAL_Delay(30);
 800134a:	201e      	movs	r0, #30
 800134c:	f007 f8f2 	bl	8008534 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	3b01      	subs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	7dfa      	ldrb	r2, [r7, #23]
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	429a      	cmp	r2, r3
 8001360:	dad5      	bge.n	800130e <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	3301      	adds	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	6a3a      	ldr	r2, [r7, #32]
 800136c:	429a      	cmp	r2, r3
 800136e:	db85      	blt.n	800127c <slideText+0x40>
	while(mainLoopVal == 1) {
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	2b01      	cmp	r3, #1
 8001374:	f43f af71 	beq.w	800125a <slideText+0x1e>
			     }
			}
		}
	}
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000200 	.word	0x20000200

08001388 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800138c:	f3bf 8f4f 	dsb	sy
}
 8001390:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <__NVIC_SystemReset+0x24>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800139a:	4904      	ldr	r1, [pc, #16]	; (80013ac <__NVIC_SystemReset+0x24>)
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_SystemReset+0x28>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013a2:	f3bf 8f4f 	dsb	sy
}
 80013a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <__NVIC_SystemReset+0x20>
 80013ac:	e000ed00 	.word	0xe000ed00
 80013b0:	05fa0004 	.word	0x05fa0004

080013b4 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ba:	2101      	movs	r1, #1
 80013bc:	488e      	ldr	r0, [pc, #568]	; (80015f8 <menu+0x244>)
 80013be:	f007 fe89 	bl	80090d4 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	f040 808e 	bne.w	80014e6 <menu+0x132>
 80013ca:	4b8c      	ldr	r3, [pc, #560]	; (80015fc <menu+0x248>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	f083 0301 	eor.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8086 	beq.w	80014e6 <menu+0x132>
		menuSayac = menuSayac+1;
 80013da:	4b89      	ldr	r3, [pc, #548]	; (8001600 <menu+0x24c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b87      	ldr	r3, [pc, #540]	; (8001600 <menu+0x24c>)
 80013e4:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80013e6:	4b86      	ldr	r3, [pc, #536]	; (8001600 <menu+0x24c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b24      	cmp	r3, #36	; 0x24
 80013ec:	d102      	bne.n	80013f4 <menu+0x40>
			menuSayac = 1;
 80013ee:	4b84      	ldr	r3, [pc, #528]	; (8001600 <menu+0x24c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013f4:	4b82      	ldr	r3, [pc, #520]	; (8001600 <menu+0x24c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b12      	cmp	r3, #18
 80013fa:	d106      	bne.n	800140a <menu+0x56>
 80013fc:	4b81      	ldr	r3, [pc, #516]	; (8001604 <menu+0x250>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <menu+0x56>
			menuSayac = 21;
 8001404:	4b7e      	ldr	r3, [pc, #504]	; (8001600 <menu+0x24c>)
 8001406:	2215      	movs	r2, #21
 8001408:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800140a:	4b7d      	ldr	r3, [pc, #500]	; (8001600 <menu+0x24c>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d106      	bne.n	8001420 <menu+0x6c>
 8001412:	4b7d      	ldr	r3, [pc, #500]	; (8001608 <menu+0x254>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <menu+0x6c>
			menuSayac = 16;
 800141a:	4b79      	ldr	r3, [pc, #484]	; (8001600 <menu+0x24c>)
 800141c:	2210      	movs	r2, #16
 800141e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001420:	4b77      	ldr	r3, [pc, #476]	; (8001600 <menu+0x24c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b0d      	cmp	r3, #13
 8001426:	d106      	bne.n	8001436 <menu+0x82>
 8001428:	4b77      	ldr	r3, [pc, #476]	; (8001608 <menu+0x254>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <menu+0x82>
			menuSayac = 16;
 8001430:	4b73      	ldr	r3, [pc, #460]	; (8001600 <menu+0x24c>)
 8001432:	2210      	movs	r2, #16
 8001434:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001436:	4b72      	ldr	r3, [pc, #456]	; (8001600 <menu+0x24c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b09      	cmp	r3, #9
 800143c:	d106      	bne.n	800144c <menu+0x98>
 800143e:	4b72      	ldr	r3, [pc, #456]	; (8001608 <menu+0x254>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d102      	bne.n	800144c <menu+0x98>
			menuSayac = 13;
 8001446:	4b6e      	ldr	r3, [pc, #440]	; (8001600 <menu+0x24c>)
 8001448:	220d      	movs	r2, #13
 800144a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800144c:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <menu+0x24c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b0a      	cmp	r3, #10
 8001452:	d10a      	bne.n	800146a <menu+0xb6>
 8001454:	4b6d      	ldr	r3, [pc, #436]	; (800160c <menu+0x258>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d003      	beq.n	8001464 <menu+0xb0>
 800145c:	4b6b      	ldr	r3, [pc, #428]	; (800160c <menu+0x258>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d102      	bne.n	800146a <menu+0xb6>
			menuSayac = 11;
 8001464:	4b66      	ldr	r3, [pc, #408]	; (8001600 <menu+0x24c>)
 8001466:	220b      	movs	r2, #11
 8001468:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800146a:	4b65      	ldr	r3, [pc, #404]	; (8001600 <menu+0x24c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d10e      	bne.n	8001490 <menu+0xdc>
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <menu+0x25c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d003      	beq.n	8001482 <menu+0xce>
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <menu+0x25c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d106      	bne.n	8001490 <menu+0xdc>
 8001482:	4b61      	ldr	r3, [pc, #388]	; (8001608 <menu+0x254>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d102      	bne.n	8001490 <menu+0xdc>
			menuSayac = 16;
 800148a:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <menu+0x24c>)
 800148c:	2210      	movs	r2, #16
 800148e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001490:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <menu+0x24c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d10e      	bne.n	80014b6 <menu+0x102>
 8001498:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <menu+0x25c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d003      	beq.n	80014a8 <menu+0xf4>
 80014a0:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <menu+0x25c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d106      	bne.n	80014b6 <menu+0x102>
 80014a8:	4b57      	ldr	r3, [pc, #348]	; (8001608 <menu+0x254>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d102      	bne.n	80014b6 <menu+0x102>
			menuSayac = 13;
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <menu+0x24c>)
 80014b2:	220d      	movs	r2, #13
 80014b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014b6:	4b52      	ldr	r3, [pc, #328]	; (8001600 <menu+0x24c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	d106      	bne.n	80014cc <menu+0x118>
 80014be:	4b55      	ldr	r3, [pc, #340]	; (8001614 <menu+0x260>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d102      	bne.n	80014cc <menu+0x118>
			menuSayac = 16;
 80014c6:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <menu+0x24c>)
 80014c8:	2210      	movs	r2, #16
 80014ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <menu+0x24c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b18      	cmp	r3, #24
 80014d2:	d106      	bne.n	80014e2 <menu+0x12e>
 80014d4:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <menu+0x250>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <menu+0x12e>
			menuSayac = 26;
 80014dc:	4b48      	ldr	r3, [pc, #288]	; (8001600 <menu+0x24c>)
 80014de:	221a      	movs	r2, #26
 80014e0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014e2:	f003 fb31 	bl	8004b48 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014e6:	2108      	movs	r1, #8
 80014e8:	484b      	ldr	r0, [pc, #300]	; (8001618 <menu+0x264>)
 80014ea:	f007 fdf3 	bl	80090d4 <HAL_GPIO_ReadPin>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d175      	bne.n	80015e0 <menu+0x22c>
 80014f4:	4b41      	ldr	r3, [pc, #260]	; (80015fc <menu+0x248>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f083 0301 	eor.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d06e      	beq.n	80015e0 <menu+0x22c>
		if (menuSayac <= 1) {
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <menu+0x24c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d802      	bhi.n	8001510 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <menu+0x24c>)
 800150c:	2224      	movs	r2, #36	; 0x24
 800150e:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001510:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <menu+0x24c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	3b01      	subs	r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <menu+0x24c>)
 800151a:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <menu+0x24c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b14      	cmp	r3, #20
 8001522:	d106      	bne.n	8001532 <menu+0x17e>
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <menu+0x250>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <menu+0x17e>
			menuSayac = 17;
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <menu+0x24c>)
 800152e:	2211      	movs	r2, #17
 8001530:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <menu+0x24c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d106      	bne.n	8001548 <menu+0x194>
 800153a:	4b33      	ldr	r3, [pc, #204]	; (8001608 <menu+0x254>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <menu+0x194>
			menuSayac = 7;
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <menu+0x24c>)
 8001544:	2207      	movs	r2, #7
 8001546:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <menu+0x24c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d106      	bne.n	800155e <menu+0x1aa>
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <menu+0x254>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d102      	bne.n	800155e <menu+0x1aa>
			menuSayac = 12;
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <menu+0x24c>)
 800155a:	220c      	movs	r2, #12
 800155c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <menu+0x24c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b0c      	cmp	r3, #12
 8001564:	d106      	bne.n	8001574 <menu+0x1c0>
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <menu+0x254>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d102      	bne.n	8001574 <menu+0x1c0>
			menuSayac = 8;
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <menu+0x24c>)
 8001570:	2208      	movs	r2, #8
 8001572:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <menu+0x24c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b0a      	cmp	r3, #10
 800157a:	d10a      	bne.n	8001592 <menu+0x1de>
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <menu+0x258>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d003      	beq.n	800158c <menu+0x1d8>
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <menu+0x258>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d102      	bne.n	8001592 <menu+0x1de>
			menuSayac = 9;
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <menu+0x24c>)
 800158e:	2209      	movs	r2, #9
 8001590:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <menu+0x24c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d10a      	bne.n	80015b0 <menu+0x1fc>
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <menu+0x25c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d003      	beq.n	80015aa <menu+0x1f6>
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <menu+0x25c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d102      	bne.n	80015b0 <menu+0x1fc>
			menuSayac = 11;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <menu+0x24c>)
 80015ac:	220b      	movs	r2, #11
 80015ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <menu+0x24c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d106      	bne.n	80015c6 <menu+0x212>
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <menu+0x260>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d102      	bne.n	80015c6 <menu+0x212>
			menuSayac = 14;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <menu+0x24c>)
 80015c2:	220e      	movs	r2, #14
 80015c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <menu+0x24c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b19      	cmp	r3, #25
 80015cc:	d106      	bne.n	80015dc <menu+0x228>
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <menu+0x250>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <menu+0x228>
			menuSayac = 23;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <menu+0x24c>)
 80015d8:	2217      	movs	r2, #23
 80015da:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015dc:	f003 fab4 	bl	8004b48 <bekle>
	}

	if (menuSayac == 0) {
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <menu+0x24c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d133      	bne.n	8001650 <menu+0x29c>
		if(dilSecim == 0) {
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <menu+0x268>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d121      	bne.n	8001634 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80015f0:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <menu+0x26c>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	2001      	movs	r0, #1
 80015f6:	e015      	b.n	8001624 <menu+0x270>
 80015f8:	40010800 	.word	0x40010800
 80015fc:	2000022f 	.word	0x2000022f
 8001600:	20000200 	.word	0x20000200
 8001604:	2000020f 	.word	0x2000020f
 8001608:	20000208 	.word	0x20000208
 800160c:	20000209 	.word	0x20000209
 8001610:	2000020a 	.word	0x2000020a
 8001614:	2000020b 	.word	0x2000020b
 8001618:	40011000 	.word	0x40011000
 800161c:	20000221 	.word	0x20000221
 8001620:	0800cf20 	.word	0x0800cf20
 8001624:	f006 fa30 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001628:	4a94      	ldr	r2, [pc, #592]	; (800187c <menu+0x4c8>)
 800162a:	2101      	movs	r1, #1
 800162c:	2002      	movs	r0, #2
 800162e:	f006 fa2b 	bl	8007a88 <lcd_print>
 8001632:	e00d      	b.n	8001650 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001634:	4b92      	ldr	r3, [pc, #584]	; (8001880 <menu+0x4cc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d109      	bne.n	8001650 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800163c:	4a91      	ldr	r2, [pc, #580]	; (8001884 <menu+0x4d0>)
 800163e:	2101      	movs	r1, #1
 8001640:	2001      	movs	r0, #1
 8001642:	f006 fa21 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001646:	4a90      	ldr	r2, [pc, #576]	; (8001888 <menu+0x4d4>)
 8001648:	2101      	movs	r1, #1
 800164a:	2002      	movs	r0, #2
 800164c:	f006 fa1c 	bl	8007a88 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001650:	4b8e      	ldr	r3, [pc, #568]	; (800188c <menu+0x4d8>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	f040 82b5 	bne.w	8001bc4 <menu+0x810>
		if(dilSecim == 0) {
 800165a:	4b89      	ldr	r3, [pc, #548]	; (8001880 <menu+0x4cc>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001662:	4a8b      	ldr	r2, [pc, #556]	; (8001890 <menu+0x4dc>)
 8001664:	2101      	movs	r1, #1
 8001666:	2001      	movs	r0, #1
 8001668:	f006 fa0e 	bl	8007a88 <lcd_print>
 800166c:	e008      	b.n	8001680 <menu+0x2cc>
		} else if(dilSecim == 1) {
 800166e:	4b84      	ldr	r3, [pc, #528]	; (8001880 <menu+0x4cc>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d104      	bne.n	8001680 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001676:	4a87      	ldr	r2, [pc, #540]	; (8001894 <menu+0x4e0>)
 8001678:	2101      	movs	r1, #1
 800167a:	2001      	movs	r0, #1
 800167c:	f006 fa04 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001680:	4b85      	ldr	r3, [pc, #532]	; (8001898 <menu+0x4e4>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d123      	bne.n	80016d0 <menu+0x31c>
			if(dilSecim == 0) {
 8001688:	4b7d      	ldr	r3, [pc, #500]	; (8001880 <menu+0x4cc>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001690:	4a82      	ldr	r2, [pc, #520]	; (800189c <menu+0x4e8>)
 8001692:	2101      	movs	r1, #1
 8001694:	2002      	movs	r0, #2
 8001696:	f006 f9f7 	bl	8007a88 <lcd_print>
 800169a:	e008      	b.n	80016ae <menu+0x2fa>

			} else if(dilSecim == 1) {
 800169c:	4b78      	ldr	r3, [pc, #480]	; (8001880 <menu+0x4cc>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d104      	bne.n	80016ae <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80016a4:	4a7e      	ldr	r2, [pc, #504]	; (80018a0 <menu+0x4ec>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	2002      	movs	r0, #2
 80016aa:	f006 f9ed 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80016ae:	4a7d      	ldr	r2, [pc, #500]	; (80018a4 <menu+0x4f0>)
 80016b0:	210f      	movs	r1, #15
 80016b2:	2002      	movs	r0, #2
 80016b4:	f006 f9e8 	bl	8007a88 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <menu+0x4f4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	220a      	movs	r2, #10
 80016be:	497b      	ldr	r1, [pc, #492]	; (80018ac <menu+0x4f8>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00a fd8f 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 80016c6:	4a79      	ldr	r2, [pc, #484]	; (80018ac <menu+0x4f8>)
 80016c8:	210e      	movs	r1, #14
 80016ca:	2002      	movs	r0, #2
 80016cc:	f006 f9dc 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80016d0:	4b71      	ldr	r3, [pc, #452]	; (8001898 <menu+0x4e4>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d123      	bne.n	8001720 <menu+0x36c>
			if(dilSecim == 0) {
 80016d8:	4b69      	ldr	r3, [pc, #420]	; (8001880 <menu+0x4cc>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80016e0:	4a73      	ldr	r2, [pc, #460]	; (80018b0 <menu+0x4fc>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2002      	movs	r0, #2
 80016e6:	f006 f9cf 	bl	8007a88 <lcd_print>
 80016ea:	e008      	b.n	80016fe <menu+0x34a>
			} else if(dilSecim == 1) {
 80016ec:	4b64      	ldr	r3, [pc, #400]	; (8001880 <menu+0x4cc>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d104      	bne.n	80016fe <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80016f4:	4a6f      	ldr	r2, [pc, #444]	; (80018b4 <menu+0x500>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	2002      	movs	r0, #2
 80016fa:	f006 f9c5 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <menu+0x504>)
 8001700:	210f      	movs	r1, #15
 8001702:	2002      	movs	r0, #2
 8001704:	f006 f9c0 	bl	8007a88 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001708:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <menu+0x508>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	220a      	movs	r2, #10
 800170e:	4967      	ldr	r1, [pc, #412]	; (80018ac <menu+0x4f8>)
 8001710:	4618      	mov	r0, r3
 8001712:	f00a fd67 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 8001716:	4a65      	ldr	r2, [pc, #404]	; (80018ac <menu+0x4f8>)
 8001718:	210e      	movs	r1, #14
 800171a:	2002      	movs	r0, #2
 800171c:	f006 f9b4 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001720:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <menu+0x4e4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d123      	bne.n	8001770 <menu+0x3bc>
			if(dilSecim == 0) {
 8001728:	4b55      	ldr	r3, [pc, #340]	; (8001880 <menu+0x4cc>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001730:	4a63      	ldr	r2, [pc, #396]	; (80018c0 <menu+0x50c>)
 8001732:	2101      	movs	r1, #1
 8001734:	2002      	movs	r0, #2
 8001736:	f006 f9a7 	bl	8007a88 <lcd_print>
 800173a:	e008      	b.n	800174e <menu+0x39a>
			} else if(dilSecim == 1) {
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <menu+0x4cc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d104      	bne.n	800174e <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001744:	4a5f      	ldr	r2, [pc, #380]	; (80018c4 <menu+0x510>)
 8001746:	2101      	movs	r1, #1
 8001748:	2002      	movs	r0, #2
 800174a:	f006 f99d 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800174e:	4a5a      	ldr	r2, [pc, #360]	; (80018b8 <menu+0x504>)
 8001750:	210f      	movs	r1, #15
 8001752:	2002      	movs	r0, #2
 8001754:	f006 f998 	bl	8007a88 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <menu+0x514>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	220a      	movs	r2, #10
 800175e:	4953      	ldr	r1, [pc, #332]	; (80018ac <menu+0x4f8>)
 8001760:	4618      	mov	r0, r3
 8001762:	f00a fd3f 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 8001766:	4a51      	ldr	r2, [pc, #324]	; (80018ac <menu+0x4f8>)
 8001768:	210e      	movs	r1, #14
 800176a:	2002      	movs	r0, #2
 800176c:	f006 f98c 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001770:	4b49      	ldr	r3, [pc, #292]	; (8001898 <menu+0x4e4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d123      	bne.n	80017c0 <menu+0x40c>
			if(dilSecim == 0) {
 8001778:	4b41      	ldr	r3, [pc, #260]	; (8001880 <menu+0x4cc>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <menu+0x518>)
 8001782:	2101      	movs	r1, #1
 8001784:	2002      	movs	r0, #2
 8001786:	f006 f97f 	bl	8007a88 <lcd_print>
 800178a:	e008      	b.n	800179e <menu+0x3ea>
			} else if(dilSecim == 1) {
 800178c:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <menu+0x4cc>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d104      	bne.n	800179e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001794:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <menu+0x51c>)
 8001796:	2101      	movs	r1, #1
 8001798:	2002      	movs	r0, #2
 800179a:	f006 f975 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800179e:	4a46      	ldr	r2, [pc, #280]	; (80018b8 <menu+0x504>)
 80017a0:	210f      	movs	r1, #15
 80017a2:	2002      	movs	r0, #2
 80017a4:	f006 f970 	bl	8007a88 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <menu+0x520>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	220a      	movs	r2, #10
 80017ae:	493f      	ldr	r1, [pc, #252]	; (80018ac <menu+0x4f8>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00a fd17 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 80017b6:	4a3d      	ldr	r2, [pc, #244]	; (80018ac <menu+0x4f8>)
 80017b8:	210e      	movs	r1, #14
 80017ba:	2002      	movs	r0, #2
 80017bc:	f006 f964 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <menu+0x4e4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d123      	bne.n	8001810 <menu+0x45c>
			if(dilSecim == 0) {
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <menu+0x4cc>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80017d0:	4a41      	ldr	r2, [pc, #260]	; (80018d8 <menu+0x524>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	2002      	movs	r0, #2
 80017d6:	f006 f957 	bl	8007a88 <lcd_print>
 80017da:	e008      	b.n	80017ee <menu+0x43a>
			} else if(dilSecim == 1) {
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <menu+0x4cc>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d104      	bne.n	80017ee <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80017e4:	4a3d      	ldr	r2, [pc, #244]	; (80018dc <menu+0x528>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2002      	movs	r0, #2
 80017ea:	f006 f94d 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ee:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <menu+0x504>)
 80017f0:	210f      	movs	r1, #15
 80017f2:	2002      	movs	r0, #2
 80017f4:	f006 f948 	bl	8007a88 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <menu+0x52c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	220a      	movs	r2, #10
 80017fe:	492b      	ldr	r1, [pc, #172]	; (80018ac <menu+0x4f8>)
 8001800:	4618      	mov	r0, r3
 8001802:	f00a fcef 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 8001806:	4a29      	ldr	r2, [pc, #164]	; (80018ac <menu+0x4f8>)
 8001808:	210e      	movs	r1, #14
 800180a:	2002      	movs	r0, #2
 800180c:	f006 f93c 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <menu+0x4e4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d123      	bne.n	8001860 <menu+0x4ac>
			if(dilSecim == 0) {
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <menu+0x4cc>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001820:	4a30      	ldr	r2, [pc, #192]	; (80018e4 <menu+0x530>)
 8001822:	2101      	movs	r1, #1
 8001824:	2002      	movs	r0, #2
 8001826:	f006 f92f 	bl	8007a88 <lcd_print>
 800182a:	e008      	b.n	800183e <menu+0x48a>
			} else if(dilSecim == 1) {
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <menu+0x4cc>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d104      	bne.n	800183e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001834:	4a2c      	ldr	r2, [pc, #176]	; (80018e8 <menu+0x534>)
 8001836:	2101      	movs	r1, #1
 8001838:	2002      	movs	r0, #2
 800183a:	f006 f925 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <menu+0x504>)
 8001840:	210f      	movs	r1, #15
 8001842:	2002      	movs	r0, #2
 8001844:	f006 f920 	bl	8007a88 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <menu+0x538>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	220a      	movs	r2, #10
 800184e:	4917      	ldr	r1, [pc, #92]	; (80018ac <menu+0x4f8>)
 8001850:	4618      	mov	r0, r3
 8001852:	f00a fcc7 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <menu+0x4f8>)
 8001858:	210e      	movs	r1, #14
 800185a:	2002      	movs	r0, #2
 800185c:	f006 f914 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <menu+0x4e4>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b06      	cmp	r3, #6
 8001866:	d15f      	bne.n	8001928 <menu+0x574>
			if(dilSecim == 0) {
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <menu+0x4cc>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d141      	bne.n	80018f4 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <menu+0x53c>)
 8001872:	2101      	movs	r1, #1
 8001874:	2002      	movs	r0, #2
 8001876:	f006 f907 	bl	8007a88 <lcd_print>
 800187a:	e044      	b.n	8001906 <menu+0x552>
 800187c:	0800cf34 	.word	0x0800cf34
 8001880:	20000221 	.word	0x20000221
 8001884:	0800cf48 	.word	0x0800cf48
 8001888:	0800cf5c 	.word	0x0800cf5c
 800188c:	20000200 	.word	0x20000200
 8001890:	0800cf70 	.word	0x0800cf70
 8001894:	0800cf84 	.word	0x0800cf84
 8001898:	20000202 	.word	0x20000202
 800189c:	0800cf98 	.word	0x0800cf98
 80018a0:	0800cfa8 	.word	0x0800cfa8
 80018a4:	0800cfb8 	.word	0x0800cfb8
 80018a8:	20000222 	.word	0x20000222
 80018ac:	2000019c 	.word	0x2000019c
 80018b0:	0800cfbc 	.word	0x0800cfbc
 80018b4:	0800cfcc 	.word	0x0800cfcc
 80018b8:	0800cfdc 	.word	0x0800cfdc
 80018bc:	20000223 	.word	0x20000223
 80018c0:	0800cfe0 	.word	0x0800cfe0
 80018c4:	0800cff0 	.word	0x0800cff0
 80018c8:	20000224 	.word	0x20000224
 80018cc:	0800d000 	.word	0x0800d000
 80018d0:	0800d010 	.word	0x0800d010
 80018d4:	20000225 	.word	0x20000225
 80018d8:	0800d020 	.word	0x0800d020
 80018dc:	0800d030 	.word	0x0800d030
 80018e0:	20000226 	.word	0x20000226
 80018e4:	0800d040 	.word	0x0800d040
 80018e8:	0800d050 	.word	0x0800d050
 80018ec:	20000227 	.word	0x20000227
 80018f0:	0800d060 	.word	0x0800d060
			} else if(dilSecim == 1) {
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <menu+0x680>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d104      	bne.n	8001906 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80018fc:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <menu+0x684>)
 80018fe:	2101      	movs	r1, #1
 8001900:	2002      	movs	r0, #2
 8001902:	f006 f8c1 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001906:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <menu+0x688>)
 8001908:	210f      	movs	r1, #15
 800190a:	2002      	movs	r0, #2
 800190c:	f006 f8bc 	bl	8007a88 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001910:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <menu+0x68c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	220a      	movs	r2, #10
 8001916:	494b      	ldr	r1, [pc, #300]	; (8001a44 <menu+0x690>)
 8001918:	4618      	mov	r0, r3
 800191a:	f00a fc63 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 800191e:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <menu+0x690>)
 8001920:	210e      	movs	r1, #14
 8001922:	2002      	movs	r0, #2
 8001924:	f006 f8b0 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <menu+0x694>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b07      	cmp	r3, #7
 800192e:	d123      	bne.n	8001978 <menu+0x5c4>
			if(dilSecim == 0) {
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <menu+0x680>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001938:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <menu+0x698>)
 800193a:	2101      	movs	r1, #1
 800193c:	2002      	movs	r0, #2
 800193e:	f006 f8a3 	bl	8007a88 <lcd_print>
 8001942:	e008      	b.n	8001956 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001944:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <menu+0x680>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d104      	bne.n	8001956 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 800194c:	4a40      	ldr	r2, [pc, #256]	; (8001a50 <menu+0x69c>)
 800194e:	2101      	movs	r1, #1
 8001950:	2002      	movs	r0, #2
 8001952:	f006 f899 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001956:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <menu+0x688>)
 8001958:	210f      	movs	r1, #15
 800195a:	2002      	movs	r0, #2
 800195c:	f006 f894 	bl	8007a88 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001960:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <menu+0x6a0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	220a      	movs	r2, #10
 8001966:	4937      	ldr	r1, [pc, #220]	; (8001a44 <menu+0x690>)
 8001968:	4618      	mov	r0, r3
 800196a:	f00a fc3b 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 800196e:	4a35      	ldr	r2, [pc, #212]	; (8001a44 <menu+0x690>)
 8001970:	210e      	movs	r1, #14
 8001972:	2002      	movs	r0, #2
 8001974:	f006 f888 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <menu+0x694>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d123      	bne.n	80019c8 <menu+0x614>
			if(dilSecim == 0) {
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <menu+0x680>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001988:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <menu+0x6a4>)
 800198a:	2101      	movs	r1, #1
 800198c:	2002      	movs	r0, #2
 800198e:	f006 f87b 	bl	8007a88 <lcd_print>
 8001992:	e008      	b.n	80019a6 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <menu+0x680>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d104      	bne.n	80019a6 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 800199c:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <menu+0x6a8>)
 800199e:	2101      	movs	r1, #1
 80019a0:	2002      	movs	r0, #2
 80019a2:	f006 f871 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <menu+0x688>)
 80019a8:	210f      	movs	r1, #15
 80019aa:	2002      	movs	r0, #2
 80019ac:	f006 f86c 	bl	8007a88 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <menu+0x6ac>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	220a      	movs	r2, #10
 80019b6:	4923      	ldr	r1, [pc, #140]	; (8001a44 <menu+0x690>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00a fc13 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 80019be:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <menu+0x690>)
 80019c0:	210e      	movs	r1, #14
 80019c2:	2002      	movs	r0, #2
 80019c4:	f006 f860 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <menu+0x694>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d123      	bne.n	8001a18 <menu+0x664>
			if(dilSecim == 0) {
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <menu+0x680>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <menu+0x6b0>)
 80019da:	2101      	movs	r1, #1
 80019dc:	2002      	movs	r0, #2
 80019de:	f006 f853 	bl	8007a88 <lcd_print>
 80019e2:	e008      	b.n	80019f6 <menu+0x642>
			} else if(dilSecim == 1) {
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <menu+0x680>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d104      	bne.n	80019f6 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <menu+0x6b4>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	2002      	movs	r0, #2
 80019f2:	f006 f849 	bl	8007a88 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80019f6:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <menu+0x6b8>)
 80019f8:	2110      	movs	r1, #16
 80019fa:	2002      	movs	r0, #2
 80019fc:	f006 f844 	bl	8007a88 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <menu+0x6bc>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	220a      	movs	r2, #10
 8001a06:	490f      	ldr	r1, [pc, #60]	; (8001a44 <menu+0x690>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00a fbeb 	bl	800c1e4 <itoa>
			lcd_print(2, 15, snum);
 8001a0e:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <menu+0x690>)
 8001a10:	210f      	movs	r1, #15
 8001a12:	2002      	movs	r0, #2
 8001a14:	f006 f838 	bl	8007a88 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <menu+0x694>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b0a      	cmp	r3, #10
 8001a1e:	d134      	bne.n	8001a8a <menu+0x6d6>
			if(dilSecim == 0) {
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <menu+0x680>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d127      	bne.n	8001a78 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <menu+0x6c0>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f006 f82b 	bl	8007a88 <lcd_print>
 8001a32:	e02a      	b.n	8001a8a <menu+0x6d6>
 8001a34:	20000221 	.word	0x20000221
 8001a38:	0800d070 	.word	0x0800d070
 8001a3c:	0800cfdc 	.word	0x0800cfdc
 8001a40:	20000228 	.word	0x20000228
 8001a44:	2000019c 	.word	0x2000019c
 8001a48:	20000202 	.word	0x20000202
 8001a4c:	0800d080 	.word	0x0800d080
 8001a50:	0800d090 	.word	0x0800d090
 8001a54:	20000229 	.word	0x20000229
 8001a58:	0800d0a0 	.word	0x0800d0a0
 8001a5c:	0800d0b0 	.word	0x0800d0b0
 8001a60:	2000022a 	.word	0x2000022a
 8001a64:	0800d0c0 	.word	0x0800d0c0
 8001a68:	0800d0d0 	.word	0x0800d0d0
 8001a6c:	0800d0e0 	.word	0x0800d0e0
 8001a70:	2000022b 	.word	0x2000022b
 8001a74:	0800d0e4 	.word	0x0800d0e4
			} else if(dilSecim == 1) {
 8001a78:	4b82      	ldr	r3, [pc, #520]	; (8001c84 <menu+0x8d0>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d104      	bne.n	8001a8a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001a80:	4a81      	ldr	r2, [pc, #516]	; (8001c88 <menu+0x8d4>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	2002      	movs	r0, #2
 8001a86:	f005 ffff 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	487f      	ldr	r0, [pc, #508]	; (8001c8c <menu+0x8d8>)
 8001a8e:	f007 fb21 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d119      	bne.n	8001acc <menu+0x718>
 8001a98:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <menu+0x8dc>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <menu+0x718>
 8001aa6:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <menu+0x8e0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10e      	bne.n	8001acc <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001aae:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <menu+0x8e4>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b78      	ldr	r3, [pc, #480]	; (8001c98 <menu+0x8e4>)
 8001ab8:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001aba:	4b77      	ldr	r3, [pc, #476]	; (8001c98 <menu+0x8e4>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b0a      	cmp	r3, #10
 8001ac0:	d902      	bls.n	8001ac8 <menu+0x714>
				hataGostermeSirasi = 0;
 8001ac2:	4b75      	ldr	r3, [pc, #468]	; (8001c98 <menu+0x8e4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ac8:	f003 f83e 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001acc:	2104      	movs	r1, #4
 8001ace:	486f      	ldr	r0, [pc, #444]	; (8001c8c <menu+0x8d8>)
 8001ad0:	f007 fb00 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d119      	bne.n	8001b0e <menu+0x75a>
 8001ada:	4b6d      	ldr	r3, [pc, #436]	; (8001c90 <menu+0x8dc>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f083 0301 	eor.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <menu+0x75a>
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <menu+0x8e0>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10e      	bne.n	8001b0e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001af0:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <menu+0x8e4>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <menu+0x8e4>)
 8001afa:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001afc:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <menu+0x8e4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b0b      	cmp	r3, #11
 8001b02:	d902      	bls.n	8001b0a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001b04:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <menu+0x8e4>)
 8001b06:	220a      	movs	r2, #10
 8001b08:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b0a:	f003 f81d 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b0e:	2108      	movs	r1, #8
 8001b10:	485e      	ldr	r0, [pc, #376]	; (8001c8c <menu+0x8d8>)
 8001b12:	f007 fadf 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d153      	bne.n	8001bc4 <menu+0x810>
 8001b1c:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <menu+0x8dc>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f083 0301 	eor.w	r3, r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d04c      	beq.n	8001bc4 <menu+0x810>
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <menu+0x8e4>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d148      	bne.n	8001bc4 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b32:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <menu+0x8e8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <menu+0x8ec>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <menu+0x8f0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <menu+0x8ec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b4e:	4b56      	ldr	r3, [pc, #344]	; (8001ca8 <menu+0x8f4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	4b52      	ldr	r3, [pc, #328]	; (8001ca0 <menu+0x8ec>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <menu+0x8f8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <menu+0x8ec>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b6a:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <menu+0x8fc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <menu+0x8ec>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001b78:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <menu+0x900>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <menu+0x8ec>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001b86:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <menu+0x904>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <menu+0x8ec>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b94:	4b49      	ldr	r3, [pc, #292]	; (8001cbc <menu+0x908>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <menu+0x8ec>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <menu+0x90c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <menu+0x8ec>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001bb0:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <menu+0x910>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <menu+0x8ec>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001bbe:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <menu+0x914>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <menu+0x918>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	f040 80fc 	bne.w	8001dc6 <menu+0xa12>
		if(dilSecim == 0) {
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <menu+0x8d0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001bd6:	4a3e      	ldr	r2, [pc, #248]	; (8001cd0 <menu+0x91c>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f005 ff54 	bl	8007a88 <lcd_print>
 8001be0:	e008      	b.n	8001bf4 <menu+0x840>
		} else if(dilSecim == 1) {
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <menu+0x8d0>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d104      	bne.n	8001bf4 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001bea:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <menu+0x920>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f005 ff4a 	bl	8007a88 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <menu+0x8e0>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d003      	beq.n	8001c04 <menu+0x850>
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <menu+0x8e0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d112      	bne.n	8001c2a <menu+0x876>
			if(dilSecim == 0) {
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <menu+0x8d0>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001c0c:	4a32      	ldr	r2, [pc, #200]	; (8001cd8 <menu+0x924>)
 8001c0e:	2101      	movs	r1, #1
 8001c10:	2002      	movs	r0, #2
 8001c12:	f005 ff39 	bl	8007a88 <lcd_print>
 8001c16:	e008      	b.n	8001c2a <menu+0x876>
			} else if(dilSecim == 1) {
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <menu+0x8d0>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d104      	bne.n	8001c2a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001c20:	4a2e      	ldr	r2, [pc, #184]	; (8001cdc <menu+0x928>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	2002      	movs	r0, #2
 8001c26:	f005 ff2f 	bl	8007a88 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <menu+0x92c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d116      	bne.n	8001c60 <menu+0x8ac>
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <menu+0x8e0>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d112      	bne.n	8001c60 <menu+0x8ac>
			if(dilSecim == 0) {
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <menu+0x8d0>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d105      	bne.n	8001c4e <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001c42:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <menu+0x930>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	2002      	movs	r0, #2
 8001c48:	f005 ff1e 	bl	8007a88 <lcd_print>
 8001c4c:	e008      	b.n	8001c60 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <menu+0x8d0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d104      	bne.n	8001c60 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001c56:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <menu+0x934>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f005 ff14 	bl	8007a88 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <menu+0x92c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d14c      	bne.n	8001d02 <menu+0x94e>
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <menu+0x8e0>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d148      	bne.n	8001d02 <menu+0x94e>
			if(dilSecim == 0) {
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <menu+0x8d0>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d13b      	bne.n	8001cf0 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001c78:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <menu+0x938>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f005 ff03 	bl	8007a88 <lcd_print>
 8001c82:	e03e      	b.n	8001d02 <menu+0x94e>
 8001c84:	20000221 	.word	0x20000221
 8001c88:	0800d0f8 	.word	0x0800d0f8
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	2000022f 	.word	0x2000022f
 8001c94:	2000020f 	.word	0x2000020f
 8001c98:	20000202 	.word	0x20000202
 8001c9c:	20000222 	.word	0x20000222
 8001ca0:	2000012c 	.word	0x2000012c
 8001ca4:	20000223 	.word	0x20000223
 8001ca8:	20000224 	.word	0x20000224
 8001cac:	20000225 	.word	0x20000225
 8001cb0:	20000226 	.word	0x20000226
 8001cb4:	20000227 	.word	0x20000227
 8001cb8:	20000228 	.word	0x20000228
 8001cbc:	20000229 	.word	0x20000229
 8001cc0:	2000022a 	.word	0x2000022a
 8001cc4:	2000022b 	.word	0x2000022b
 8001cc8:	2000022c 	.word	0x2000022c
 8001ccc:	20000200 	.word	0x20000200
 8001cd0:	0800d10c 	.word	0x0800d10c
 8001cd4:	0800d120 	.word	0x0800d120
 8001cd8:	0800d134 	.word	0x0800d134
 8001cdc:	0800d148 	.word	0x0800d148
 8001ce0:	20000201 	.word	0x20000201
 8001ce4:	0800d15c 	.word	0x0800d15c
 8001ce8:	0800d16c 	.word	0x0800d16c
 8001cec:	0800d17c 	.word	0x0800d17c
			} else if(dilSecim == 1) {
 8001cf0:	4b98      	ldr	r3, [pc, #608]	; (8001f54 <menu+0xba0>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d104      	bne.n	8001d02 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001cf8:	4a97      	ldr	r2, [pc, #604]	; (8001f58 <menu+0xba4>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f005 fec3 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d02:	2102      	movs	r1, #2
 8001d04:	4895      	ldr	r0, [pc, #596]	; (8001f5c <menu+0xba8>)
 8001d06:	f007 f9e5 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d119      	bne.n	8001d44 <menu+0x990>
 8001d10:	4b93      	ldr	r3, [pc, #588]	; (8001f60 <menu+0xbac>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <menu+0x990>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <menu+0xbb0>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10e      	bne.n	8001d44 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001d26:	4b90      	ldr	r3, [pc, #576]	; (8001f68 <menu+0xbb4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b8e      	ldr	r3, [pc, #568]	; (8001f68 <menu+0xbb4>)
 8001d30:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001d32:	4b8d      	ldr	r3, [pc, #564]	; (8001f68 <menu+0xbb4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d902      	bls.n	8001d40 <menu+0x98c>
				calismaSekli = 0;
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	; (8001f68 <menu+0xbb4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d40:	f002 ff02 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d44:	2104      	movs	r1, #4
 8001d46:	4885      	ldr	r0, [pc, #532]	; (8001f5c <menu+0xba8>)
 8001d48:	f007 f9c4 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d119      	bne.n	8001d86 <menu+0x9d2>
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <menu+0xbac>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d012      	beq.n	8001d86 <menu+0x9d2>
 8001d60:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <menu+0xbb0>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10e      	bne.n	8001d86 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d68:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <menu+0xbb4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b7d      	ldr	r3, [pc, #500]	; (8001f68 <menu+0xbb4>)
 8001d72:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d74:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <menu+0xbb4>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <menu+0x9ce>
	    		calismaSekli = 1;
 8001d7c:	4b7a      	ldr	r3, [pc, #488]	; (8001f68 <menu+0xbb4>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d82:	f002 fee1 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d86:	2108      	movs	r1, #8
 8001d88:	4874      	ldr	r0, [pc, #464]	; (8001f5c <menu+0xba8>)
 8001d8a:	f007 f9a3 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d118      	bne.n	8001dc6 <menu+0xa12>
 8001d94:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <menu+0xbac>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f083 0301 	eor.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d011      	beq.n	8001dc6 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001da2:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <menu+0xbb4>)
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b71      	ldr	r3, [pc, #452]	; (8001f6c <menu+0xbb8>)
 8001da8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001daa:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <menu+0xbb4>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d106      	bne.n	8001dc0 <menu+0xa0c>
				altLimit = 1;
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <menu+0xbbc>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001db8:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <menu+0xbbc>)
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b6b      	ldr	r3, [pc, #428]	; (8001f6c <menu+0xbb8>)
 8001dbe:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001dc0:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <menu+0xbc0>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001dc6:	4b6c      	ldr	r3, [pc, #432]	; (8001f78 <menu+0xbc4>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	f040 8083 	bne.w	8001ed6 <menu+0xb22>
		if(dilSecim == 0) {
 8001dd0:	4b60      	ldr	r3, [pc, #384]	; (8001f54 <menu+0xba0>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001dd8:	4a68      	ldr	r2, [pc, #416]	; (8001f7c <menu+0xbc8>)
 8001dda:	2101      	movs	r1, #1
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f005 fe53 	bl	8007a88 <lcd_print>
 8001de2:	e008      	b.n	8001df6 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001de4:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <menu+0xba0>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d104      	bne.n	8001df6 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001dec:	4a64      	ldr	r2, [pc, #400]	; (8001f80 <menu+0xbcc>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	2001      	movs	r0, #1
 8001df2:	f005 fe49 	bl	8007a88 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <menu+0xbd0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d113      	bne.n	8001e26 <menu+0xa72>
			if(dilSecim == 0) {
 8001dfe:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <menu+0xba0>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001e06:	4a60      	ldr	r2, [pc, #384]	; (8001f88 <menu+0xbd4>)
 8001e08:	2101      	movs	r1, #1
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	f005 fe3c 	bl	8007a88 <lcd_print>
 8001e10:	e012      	b.n	8001e38 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <menu+0xba0>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10e      	bne.n	8001e38 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <menu+0xbd8>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	2002      	movs	r0, #2
 8001e20:	f005 fe32 	bl	8007a88 <lcd_print>
 8001e24:	e008      	b.n	8001e38 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001e26:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <menu+0xbd0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d104      	bne.n	8001e38 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001e2e:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <menu+0xbdc>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	2002      	movs	r0, #2
 8001e34:	f005 fe28 	bl	8007a88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4848      	ldr	r0, [pc, #288]	; (8001f5c <menu+0xba8>)
 8001e3c:	f007 f94a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d115      	bne.n	8001e72 <menu+0xabe>
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <menu+0xbac>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f083 0301 	eor.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00e      	beq.n	8001e72 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <menu+0xbd0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <menu+0xbd0>)
 8001e5e:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <menu+0xbd0>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d902      	bls.n	8001e6e <menu+0xaba>
				emniyetCercevesi = 0;
 8001e68:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <menu+0xbd0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e6e:	f002 fe6b 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e72:	2104      	movs	r1, #4
 8001e74:	4839      	ldr	r0, [pc, #228]	; (8001f5c <menu+0xba8>)
 8001e76:	f007 f92d 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d115      	bne.n	8001eac <menu+0xaf8>
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <menu+0xbac>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f083 0301 	eor.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00e      	beq.n	8001eac <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <menu+0xbd0>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <menu+0xbd0>)
 8001e98:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <menu+0xbd0>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <menu+0xbd0>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ea8:	f002 fe4e 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001eac:	2108      	movs	r1, #8
 8001eae:	482b      	ldr	r0, [pc, #172]	; (8001f5c <menu+0xba8>)
 8001eb0:	f007 f910 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10d      	bne.n	8001ed6 <menu+0xb22>
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <menu+0xbac>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <menu+0xbd0>)
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <menu+0xbb8>)
 8001ece:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <menu+0xbc0>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <menu+0xbc4>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	f040 80ba 	bne.w	8002054 <menu+0xca0>
		if(dilSecim == 0) {
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <menu+0xba0>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <menu+0xbe0>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	2001      	movs	r0, #1
 8001eee:	f005 fdcb 	bl	8007a88 <lcd_print>
 8001ef2:	e008      	b.n	8001f06 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <menu+0xba0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d104      	bne.n	8001f06 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <menu+0xbe4>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	2001      	movs	r0, #1
 8001f02:	f005 fdc1 	bl	8007a88 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <menu+0xbe8>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d113      	bne.n	8001f36 <menu+0xb82>
			if(dilSecim == 0) {
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <menu+0xba0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d105      	bne.n	8001f22 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <menu+0xbd4>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f005 fdb4 	bl	8007a88 <lcd_print>
 8001f20:	e049      	b.n	8001fb6 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <menu+0xba0>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d145      	bne.n	8001fb6 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <menu+0xbd8>)
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f005 fdaa 	bl	8007a88 <lcd_print>
 8001f34:	e03f      	b.n	8001fb6 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <menu+0xbe8>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d13b      	bne.n	8001fb6 <menu+0xc02>
			if(dilSecim == 0) {
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <menu+0xba0>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d12e      	bne.n	8001fa4 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001f46:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <menu+0xbec>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f005 fd9c 	bl	8007a88 <lcd_print>
 8001f50:	e031      	b.n	8001fb6 <menu+0xc02>
 8001f52:	bf00      	nop
 8001f54:	20000221 	.word	0x20000221
 8001f58:	0800d18c 	.word	0x0800d18c
 8001f5c:	40010800 	.word	0x40010800
 8001f60:	2000022f 	.word	0x2000022f
 8001f64:	2000020f 	.word	0x2000020f
 8001f68:	20000201 	.word	0x20000201
 8001f6c:	2000012c 	.word	0x2000012c
 8001f70:	20000206 	.word	0x20000206
 8001f74:	2000022c 	.word	0x2000022c
 8001f78:	20000200 	.word	0x20000200
 8001f7c:	0800d19c 	.word	0x0800d19c
 8001f80:	0800d1b0 	.word	0x0800d1b0
 8001f84:	20000204 	.word	0x20000204
 8001f88:	0800d1c4 	.word	0x0800d1c4
 8001f8c:	0800d1d8 	.word	0x0800d1d8
 8001f90:	0800d1ec 	.word	0x0800d1ec
 8001f94:	0800d1fc 	.word	0x0800d1fc
 8001f98:	0800d210 	.word	0x0800d210
 8001f9c:	20000205 	.word	0x20000205
 8001fa0:	0800d224 	.word	0x0800d224
			} else if(dilSecim == 1) {
 8001fa4:	4b92      	ldr	r3, [pc, #584]	; (80021f0 <menu+0xe3c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d104      	bne.n	8001fb6 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001fac:	4a91      	ldr	r2, [pc, #580]	; (80021f4 <menu+0xe40>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f005 fd69 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	488f      	ldr	r0, [pc, #572]	; (80021f8 <menu+0xe44>)
 8001fba:	f007 f88b 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d115      	bne.n	8001ff0 <menu+0xc3c>
 8001fc4:	4b8d      	ldr	r3, [pc, #564]	; (80021fc <menu+0xe48>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f083 0301 	eor.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00e      	beq.n	8001ff0 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001fd2:	4b8b      	ldr	r3, [pc, #556]	; (8002200 <menu+0xe4c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <menu+0xe4c>)
 8001fdc:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <menu+0xe4c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d902      	bls.n	8001fec <menu+0xc38>
				yavaslamaLimit = 0;
 8001fe6:	4b86      	ldr	r3, [pc, #536]	; (8002200 <menu+0xe4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fec:	f002 fdac 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	4881      	ldr	r0, [pc, #516]	; (80021f8 <menu+0xe44>)
 8001ff4:	f007 f86e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d115      	bne.n	800202a <menu+0xc76>
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <menu+0xe48>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00e      	beq.n	800202a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 800200c:	4b7c      	ldr	r3, [pc, #496]	; (8002200 <menu+0xe4c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	3b01      	subs	r3, #1
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b7a      	ldr	r3, [pc, #488]	; (8002200 <menu+0xe4c>)
 8002016:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002018:	4b79      	ldr	r3, [pc, #484]	; (8002200 <menu+0xe4c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002020:	4b77      	ldr	r3, [pc, #476]	; (8002200 <menu+0xe4c>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002026:	f002 fd8f 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800202a:	2108      	movs	r1, #8
 800202c:	4872      	ldr	r0, [pc, #456]	; (80021f8 <menu+0xe44>)
 800202e:	f007 f851 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002032:	4603      	mov	r3, r0
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10d      	bne.n	8002054 <menu+0xca0>
 8002038:	4b70      	ldr	r3, [pc, #448]	; (80021fc <menu+0xe48>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f083 0301 	eor.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002046:	4b6e      	ldr	r3, [pc, #440]	; (8002200 <menu+0xe4c>)
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <menu+0xe50>)
 800204c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800204e:	4b6e      	ldr	r3, [pc, #440]	; (8002208 <menu+0xe54>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002054:	4b6d      	ldr	r3, [pc, #436]	; (800220c <menu+0xe58>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b05      	cmp	r3, #5
 800205a:	f040 80b9 	bne.w	80021d0 <menu+0xe1c>
		if(dilSecim == 0) {
 800205e:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <menu+0xe3c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002066:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <menu+0xe5c>)
 8002068:	2101      	movs	r1, #1
 800206a:	2001      	movs	r0, #1
 800206c:	f005 fd0c 	bl	8007a88 <lcd_print>
 8002070:	e008      	b.n	8002084 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <menu+0xe3c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d104      	bne.n	8002084 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800207a:	4a66      	ldr	r2, [pc, #408]	; (8002214 <menu+0xe60>)
 800207c:	2101      	movs	r1, #1
 800207e:	2001      	movs	r0, #1
 8002080:	f005 fd02 	bl	8007a88 <lcd_print>
		}

		if(altLimit == 0) {
 8002084:	4b64      	ldr	r3, [pc, #400]	; (8002218 <menu+0xe64>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d113      	bne.n	80020b4 <menu+0xd00>
			if(dilSecim == 0) {
 800208c:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <menu+0xe3c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002094:	4a61      	ldr	r2, [pc, #388]	; (800221c <menu+0xe68>)
 8002096:	2101      	movs	r1, #1
 8002098:	2002      	movs	r0, #2
 800209a:	f005 fcf5 	bl	8007a88 <lcd_print>
 800209e:	e020      	b.n	80020e2 <menu+0xd2e>
			} else if(dilSecim == 1) {
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <menu+0xe3c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d11c      	bne.n	80020e2 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80020a8:	4a5d      	ldr	r2, [pc, #372]	; (8002220 <menu+0xe6c>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	2002      	movs	r0, #2
 80020ae:	f005 fceb 	bl	8007a88 <lcd_print>
 80020b2:	e016      	b.n	80020e2 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <menu+0xe64>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d112      	bne.n	80020e2 <menu+0xd2e>
			if(dilSecim == 0){
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <menu+0xe3c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80020c4:	4a57      	ldr	r2, [pc, #348]	; (8002224 <menu+0xe70>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	2002      	movs	r0, #2
 80020ca:	f005 fcdd 	bl	8007a88 <lcd_print>
 80020ce:	e008      	b.n	80020e2 <menu+0xd2e>
			} else if(dilSecim == 1){
 80020d0:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <menu+0xe3c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d104      	bne.n	80020e2 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80020d8:	4a46      	ldr	r2, [pc, #280]	; (80021f4 <menu+0xe40>)
 80020da:	2101      	movs	r1, #1
 80020dc:	2002      	movs	r0, #2
 80020de:	f005 fcd3 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80020e2:	2102      	movs	r1, #2
 80020e4:	4844      	ldr	r0, [pc, #272]	; (80021f8 <menu+0xe44>)
 80020e6:	f006 fff5 	bl	80090d4 <HAL_GPIO_ReadPin>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d119      	bne.n	8002124 <menu+0xd70>
 80020f0:	4b42      	ldr	r3, [pc, #264]	; (80021fc <menu+0xe48>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <menu+0xd70>
 80020fe:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <menu+0xe74>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10e      	bne.n	8002124 <menu+0xd70>
			altLimit = altLimit + 1;
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <menu+0xe64>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b42      	ldr	r3, [pc, #264]	; (8002218 <menu+0xe64>)
 8002110:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <menu+0xe64>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d902      	bls.n	8002120 <menu+0xd6c>
				altLimit = 0;
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <menu+0xe64>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002120:	f002 fd12 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002124:	2104      	movs	r1, #4
 8002126:	4834      	ldr	r0, [pc, #208]	; (80021f8 <menu+0xe44>)
 8002128:	f006 ffd4 	bl	80090d4 <HAL_GPIO_ReadPin>
 800212c:	4603      	mov	r3, r0
 800212e:	2b01      	cmp	r3, #1
 8002130:	d119      	bne.n	8002166 <menu+0xdb2>
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <menu+0xe48>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d012      	beq.n	8002166 <menu+0xdb2>
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <menu+0xe74>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10e      	bne.n	8002166 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002148:	4b33      	ldr	r3, [pc, #204]	; (8002218 <menu+0xe64>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	3b01      	subs	r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <menu+0xe64>)
 8002152:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <menu+0xe64>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <menu+0xdae>
		   		altLimit = 1;
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <menu+0xe64>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002162:	f002 fcf1 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002166:	2108      	movs	r1, #8
 8002168:	4823      	ldr	r0, [pc, #140]	; (80021f8 <menu+0xe44>)
 800216a:	f006 ffb3 	bl	80090d4 <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d12d      	bne.n	80021d0 <menu+0xe1c>
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <menu+0xe48>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f083 0301 	eor.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d026      	beq.n	80021d0 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <menu+0xe64>)
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <menu+0xe50>)
 8002188:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <menu+0xe64>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d110      	bne.n	80021b4 <menu+0xe00>
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <menu+0xe78>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <menu+0xdee>
 800219a:	4b24      	ldr	r3, [pc, #144]	; (800222c <menu+0xe78>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d108      	bne.n	80021b4 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <menu+0xe78>)
 80021a4:	2203      	movs	r2, #3
 80021a6:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <menu+0xe78>)
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <menu+0xe50>)
 80021ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80021b2:	e00a      	b.n	80021ca <menu+0xe16>
			} else if(altLimit == 0) {
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <menu+0xe64>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <menu+0xe16>
				platformSilindirTipi = 0;
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <menu+0xe7c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <menu+0xe7c>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <menu+0xe50>)
 80021c8:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <menu+0xe54>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <menu+0xe58>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b06      	cmp	r3, #6
 80021d6:	f040 80b6 	bne.w	8002346 <menu+0xf92>
		if(dilSecim == 0) {
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <menu+0xe3c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d12a      	bne.n	8002238 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80021e2:	4a14      	ldr	r2, [pc, #80]	; (8002234 <menu+0xe80>)
 80021e4:	2101      	movs	r1, #1
 80021e6:	2001      	movs	r0, #1
 80021e8:	f005 fc4e 	bl	8007a88 <lcd_print>
 80021ec:	e02d      	b.n	800224a <menu+0xe96>
 80021ee:	bf00      	nop
 80021f0:	20000221 	.word	0x20000221
 80021f4:	0800d238 	.word	0x0800d238
 80021f8:	40010800 	.word	0x40010800
 80021fc:	2000022f 	.word	0x2000022f
 8002200:	20000205 	.word	0x20000205
 8002204:	2000012c 	.word	0x2000012c
 8002208:	2000022c 	.word	0x2000022c
 800220c:	20000200 	.word	0x20000200
 8002210:	0800d24c 	.word	0x0800d24c
 8002214:	0800d260 	.word	0x0800d260
 8002218:	20000206 	.word	0x20000206
 800221c:	0800d1c4 	.word	0x0800d1c4
 8002220:	0800d1d8 	.word	0x0800d1d8
 8002224:	0800d224 	.word	0x0800d224
 8002228:	20000201 	.word	0x20000201
 800222c:	2000020d 	.word	0x2000020d
 8002230:	20000213 	.word	0x20000213
 8002234:	0800d274 	.word	0x0800d274
		} else if(dilSecim == 1){
 8002238:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <menu+0x1070>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d104      	bne.n	800224a <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002240:	4a79      	ldr	r2, [pc, #484]	; (8002428 <menu+0x1074>)
 8002242:	2101      	movs	r1, #1
 8002244:	2001      	movs	r0, #1
 8002246:	f005 fc1f 	bl	8007a88 <lcd_print>
		}
		if(basincSalteri == 0){
 800224a:	4b78      	ldr	r3, [pc, #480]	; (800242c <menu+0x1078>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d113      	bne.n	800227a <menu+0xec6>
			if(dilSecim == 0) {
 8002252:	4b74      	ldr	r3, [pc, #464]	; (8002424 <menu+0x1070>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800225a:	4a75      	ldr	r2, [pc, #468]	; (8002430 <menu+0x107c>)
 800225c:	2101      	movs	r1, #1
 800225e:	2002      	movs	r0, #2
 8002260:	f005 fc12 	bl	8007a88 <lcd_print>
 8002264:	e020      	b.n	80022a8 <menu+0xef4>
			} else if(dilSecim == 1){
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <menu+0x1070>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d11c      	bne.n	80022a8 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800226e:	4a71      	ldr	r2, [pc, #452]	; (8002434 <menu+0x1080>)
 8002270:	2101      	movs	r1, #1
 8002272:	2002      	movs	r0, #2
 8002274:	f005 fc08 	bl	8007a88 <lcd_print>
 8002278:	e016      	b.n	80022a8 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800227a:	4b6c      	ldr	r3, [pc, #432]	; (800242c <menu+0x1078>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d112      	bne.n	80022a8 <menu+0xef4>
			if(dilSecim == 0) {
 8002282:	4b68      	ldr	r3, [pc, #416]	; (8002424 <menu+0x1070>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800228a:	4a6b      	ldr	r2, [pc, #428]	; (8002438 <menu+0x1084>)
 800228c:	2101      	movs	r1, #1
 800228e:	2002      	movs	r0, #2
 8002290:	f005 fbfa 	bl	8007a88 <lcd_print>
 8002294:	e008      	b.n	80022a8 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002296:	4b63      	ldr	r3, [pc, #396]	; (8002424 <menu+0x1070>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d104      	bne.n	80022a8 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800229e:	4a67      	ldr	r2, [pc, #412]	; (800243c <menu+0x1088>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	2002      	movs	r0, #2
 80022a4:	f005 fbf0 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a8:	2102      	movs	r1, #2
 80022aa:	4865      	ldr	r0, [pc, #404]	; (8002440 <menu+0x108c>)
 80022ac:	f006 ff12 	bl	80090d4 <HAL_GPIO_ReadPin>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d115      	bne.n	80022e2 <menu+0xf2e>
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <menu+0x1090>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	f083 0301 	eor.w	r3, r3, #1
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <menu+0x1078>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b57      	ldr	r3, [pc, #348]	; (800242c <menu+0x1078>)
 80022ce:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80022d0:	4b56      	ldr	r3, [pc, #344]	; (800242c <menu+0x1078>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d902      	bls.n	80022de <menu+0xf2a>
				basincSalteri = 0;
 80022d8:	4b54      	ldr	r3, [pc, #336]	; (800242c <menu+0x1078>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022de:	f002 fc33 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022e2:	2104      	movs	r1, #4
 80022e4:	4856      	ldr	r0, [pc, #344]	; (8002440 <menu+0x108c>)
 80022e6:	f006 fef5 	bl	80090d4 <HAL_GPIO_ReadPin>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d115      	bne.n	800231c <menu+0xf68>
 80022f0:	4b54      	ldr	r3, [pc, #336]	; (8002444 <menu+0x1090>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f083 0301 	eor.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80022fe:	4b4b      	ldr	r3, [pc, #300]	; (800242c <menu+0x1078>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	3b01      	subs	r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <menu+0x1078>)
 8002308:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800230a:	4b48      	ldr	r3, [pc, #288]	; (800242c <menu+0x1078>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <menu+0xf64>
		   		basincSalteri = 1;
 8002312:	4b46      	ldr	r3, [pc, #280]	; (800242c <menu+0x1078>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002318:	f002 fc16 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800231c:	2108      	movs	r1, #8
 800231e:	4848      	ldr	r0, [pc, #288]	; (8002440 <menu+0x108c>)
 8002320:	f006 fed8 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002324:	4603      	mov	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10d      	bne.n	8002346 <menu+0xf92>
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <menu+0x1090>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002338:	4b3c      	ldr	r3, [pc, #240]	; (800242c <menu+0x1078>)
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <menu+0x1094>)
 800233e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002340:	4b42      	ldr	r3, [pc, #264]	; (800244c <menu+0x1098>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002346:	4b42      	ldr	r3, [pc, #264]	; (8002450 <menu+0x109c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b07      	cmp	r3, #7
 800234c:	f040 80f5 	bne.w	800253a <menu+0x1186>
		if(dilSecim == 0) {
 8002350:	4b34      	ldr	r3, [pc, #208]	; (8002424 <menu+0x1070>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002358:	4a3e      	ldr	r2, [pc, #248]	; (8002454 <menu+0x10a0>)
 800235a:	2101      	movs	r1, #1
 800235c:	2001      	movs	r0, #1
 800235e:	f005 fb93 	bl	8007a88 <lcd_print>
 8002362:	e008      	b.n	8002376 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002364:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <menu+0x1070>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d104      	bne.n	8002376 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800236c:	4a3a      	ldr	r2, [pc, #232]	; (8002458 <menu+0x10a4>)
 800236e:	2101      	movs	r1, #1
 8002370:	2001      	movs	r0, #1
 8002372:	f005 fb89 	bl	8007a88 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <menu+0x10a8>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d113      	bne.n	80023a6 <menu+0xff2>
			if(dilSecim == 0) {
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <menu+0x1070>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002386:	4a2a      	ldr	r2, [pc, #168]	; (8002430 <menu+0x107c>)
 8002388:	2101      	movs	r1, #1
 800238a:	2002      	movs	r0, #2
 800238c:	f005 fb7c 	bl	8007a88 <lcd_print>
 8002390:	e079      	b.n	8002486 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <menu+0x1070>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d175      	bne.n	8002486 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800239a:	4a26      	ldr	r2, [pc, #152]	; (8002434 <menu+0x1080>)
 800239c:	2101      	movs	r1, #1
 800239e:	2002      	movs	r0, #2
 80023a0:	f005 fb72 	bl	8007a88 <lcd_print>
 80023a4:	e06f      	b.n	8002486 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80023a6:	4b2d      	ldr	r3, [pc, #180]	; (800245c <menu+0x10a8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d113      	bne.n	80023d6 <menu+0x1022>
			if(dilSecim == 0) {
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <menu+0x1070>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80023b6:	4a2a      	ldr	r2, [pc, #168]	; (8002460 <menu+0x10ac>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	2002      	movs	r0, #2
 80023bc:	f005 fb64 	bl	8007a88 <lcd_print>
 80023c0:	e061      	b.n	8002486 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <menu+0x1070>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d15d      	bne.n	8002486 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80023ca:	4a26      	ldr	r2, [pc, #152]	; (8002464 <menu+0x10b0>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	2002      	movs	r0, #2
 80023d0:	f005 fb5a 	bl	8007a88 <lcd_print>
 80023d4:	e057      	b.n	8002486 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <menu+0x10a8>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d113      	bne.n	8002406 <menu+0x1052>
			if(dilSecim == 0) {
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <menu+0x1070>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80023e6:	4a20      	ldr	r2, [pc, #128]	; (8002468 <menu+0x10b4>)
 80023e8:	2101      	movs	r1, #1
 80023ea:	2002      	movs	r0, #2
 80023ec:	f005 fb4c 	bl	8007a88 <lcd_print>
 80023f0:	e049      	b.n	8002486 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <menu+0x1070>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d145      	bne.n	8002486 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80023fa:	4a1c      	ldr	r2, [pc, #112]	; (800246c <menu+0x10b8>)
 80023fc:	2101      	movs	r1, #1
 80023fe:	2002      	movs	r0, #2
 8002400:	f005 fb42 	bl	8007a88 <lcd_print>
 8002404:	e03f      	b.n	8002486 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <menu+0x10a8>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d13b      	bne.n	8002486 <menu+0x10d2>
			if(dilSecim == 0) {
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <menu+0x1070>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d12e      	bne.n	8002474 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002416:	4a16      	ldr	r2, [pc, #88]	; (8002470 <menu+0x10bc>)
 8002418:	2101      	movs	r1, #1
 800241a:	2002      	movs	r0, #2
 800241c:	f005 fb34 	bl	8007a88 <lcd_print>
 8002420:	e031      	b.n	8002486 <menu+0x10d2>
 8002422:	bf00      	nop
 8002424:	20000221 	.word	0x20000221
 8002428:	0800d284 	.word	0x0800d284
 800242c:	20000207 	.word	0x20000207
 8002430:	0800d1c4 	.word	0x0800d1c4
 8002434:	0800d1d8 	.word	0x0800d1d8
 8002438:	0800d224 	.word	0x0800d224
 800243c:	0800d238 	.word	0x0800d238
 8002440:	40010800 	.word	0x40010800
 8002444:	2000022f 	.word	0x2000022f
 8002448:	2000012c 	.word	0x2000012c
 800244c:	2000022c 	.word	0x2000022c
 8002450:	20000200 	.word	0x20000200
 8002454:	0800d294 	.word	0x0800d294
 8002458:	0800d2a8 	.word	0x0800d2a8
 800245c:	20000208 	.word	0x20000208
 8002460:	0800d2bc 	.word	0x0800d2bc
 8002464:	0800d2d0 	.word	0x0800d2d0
 8002468:	0800d2e4 	.word	0x0800d2e4
 800246c:	0800d2f8 	.word	0x0800d2f8
 8002470:	0800d30c 	.word	0x0800d30c
			} else if(dilSecim == 1){
 8002474:	4b99      	ldr	r3, [pc, #612]	; (80026dc <menu+0x1328>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d104      	bne.n	8002486 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800247c:	4a98      	ldr	r2, [pc, #608]	; (80026e0 <menu+0x132c>)
 800247e:	2101      	movs	r1, #1
 8002480:	2002      	movs	r0, #2
 8002482:	f005 fb01 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002486:	2102      	movs	r1, #2
 8002488:	4896      	ldr	r0, [pc, #600]	; (80026e4 <menu+0x1330>)
 800248a:	f006 fe23 	bl	80090d4 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d115      	bne.n	80024c0 <menu+0x110c>
 8002494:	4b94      	ldr	r3, [pc, #592]	; (80026e8 <menu+0x1334>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00e      	beq.n	80024c0 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80024a2:	4b92      	ldr	r3, [pc, #584]	; (80026ec <menu+0x1338>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b90      	ldr	r3, [pc, #576]	; (80026ec <menu+0x1338>)
 80024ac:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80024ae:	4b8f      	ldr	r3, [pc, #572]	; (80026ec <menu+0x1338>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d902      	bls.n	80024bc <menu+0x1108>
				kapiSecimleri = 0;
 80024b6:	4b8d      	ldr	r3, [pc, #564]	; (80026ec <menu+0x1338>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024bc:	f002 fb44 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024c0:	2104      	movs	r1, #4
 80024c2:	4888      	ldr	r0, [pc, #544]	; (80026e4 <menu+0x1330>)
 80024c4:	f006 fe06 	bl	80090d4 <HAL_GPIO_ReadPin>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d115      	bne.n	80024fa <menu+0x1146>
 80024ce:	4b86      	ldr	r3, [pc, #536]	; (80026e8 <menu+0x1334>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	f083 0301 	eor.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00e      	beq.n	80024fa <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80024dc:	4b83      	ldr	r3, [pc, #524]	; (80026ec <menu+0x1338>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b81      	ldr	r3, [pc, #516]	; (80026ec <menu+0x1338>)
 80024e6:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80024e8:	4b80      	ldr	r3, [pc, #512]	; (80026ec <menu+0x1338>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d902      	bls.n	80024f6 <menu+0x1142>
		   		kapiSecimleri = 3;
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <menu+0x1338>)
 80024f2:	2203      	movs	r2, #3
 80024f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024f6:	f002 fb27 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024fa:	2108      	movs	r1, #8
 80024fc:	4879      	ldr	r0, [pc, #484]	; (80026e4 <menu+0x1330>)
 80024fe:	f006 fde9 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d118      	bne.n	800253a <menu+0x1186>
 8002508:	4b77      	ldr	r3, [pc, #476]	; (80026e8 <menu+0x1334>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f083 0301 	eor.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d011      	beq.n	800253a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <menu+0x1338>)
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <menu+0x133c>)
 800251c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800251e:	4b73      	ldr	r3, [pc, #460]	; (80026ec <menu+0x1338>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <menu+0x1180>
				altLimit = 1;
 8002526:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <menu+0x1340>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800252c:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <menu+0x1340>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <menu+0x133c>)
 8002532:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002534:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <menu+0x1344>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <menu+0x1348>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b08      	cmp	r3, #8
 8002540:	f040 8092 	bne.w	8002668 <menu+0x12b4>
		if(dilSecim == 0) {
 8002544:	4b65      	ldr	r3, [pc, #404]	; (80026dc <menu+0x1328>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800254c:	4a6c      	ldr	r2, [pc, #432]	; (8002700 <menu+0x134c>)
 800254e:	2101      	movs	r1, #1
 8002550:	2001      	movs	r0, #1
 8002552:	f005 fa99 	bl	8007a88 <lcd_print>
 8002556:	e008      	b.n	800256a <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002558:	4b60      	ldr	r3, [pc, #384]	; (80026dc <menu+0x1328>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d104      	bne.n	800256a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002560:	4a68      	ldr	r2, [pc, #416]	; (8002704 <menu+0x1350>)
 8002562:	2101      	movs	r1, #1
 8002564:	2001      	movs	r0, #1
 8002566:	f005 fa8f 	bl	8007a88 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800256a:	4b67      	ldr	r3, [pc, #412]	; (8002708 <menu+0x1354>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d113      	bne.n	800259a <menu+0x11e6>
			if(dilSecim == 0) {
 8002572:	4b5a      	ldr	r3, [pc, #360]	; (80026dc <menu+0x1328>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800257a:	4a64      	ldr	r2, [pc, #400]	; (800270c <menu+0x1358>)
 800257c:	2101      	movs	r1, #1
 800257e:	2002      	movs	r0, #2
 8002580:	f005 fa82 	bl	8007a88 <lcd_print>
 8002584:	e020      	b.n	80025c8 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002586:	4b55      	ldr	r3, [pc, #340]	; (80026dc <menu+0x1328>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d11c      	bne.n	80025c8 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800258e:	4a60      	ldr	r2, [pc, #384]	; (8002710 <menu+0x135c>)
 8002590:	2101      	movs	r1, #1
 8002592:	2002      	movs	r0, #2
 8002594:	f005 fa78 	bl	8007a88 <lcd_print>
 8002598:	e016      	b.n	80025c8 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <menu+0x1354>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d112      	bne.n	80025c8 <menu+0x1214>
			if(dilSecim == 0){
 80025a2:	4b4e      	ldr	r3, [pc, #312]	; (80026dc <menu+0x1328>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80025aa:	4a5a      	ldr	r2, [pc, #360]	; (8002714 <menu+0x1360>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	2002      	movs	r0, #2
 80025b0:	f005 fa6a 	bl	8007a88 <lcd_print>
 80025b4:	e008      	b.n	80025c8 <menu+0x1214>
			} else if(dilSecim == 1){
 80025b6:	4b49      	ldr	r3, [pc, #292]	; (80026dc <menu+0x1328>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d104      	bne.n	80025c8 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80025be:	4a56      	ldr	r2, [pc, #344]	; (8002718 <menu+0x1364>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	2002      	movs	r0, #2
 80025c4:	f005 fa60 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c8:	2102      	movs	r1, #2
 80025ca:	4846      	ldr	r0, [pc, #280]	; (80026e4 <menu+0x1330>)
 80025cc:	f006 fd82 	bl	80090d4 <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d115      	bne.n	8002602 <menu+0x124e>
 80025d6:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <menu+0x1334>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80025e4:	4b48      	ldr	r3, [pc, #288]	; (8002708 <menu+0x1354>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	3301      	adds	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <menu+0x1354>)
 80025ee:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80025f0:	4b45      	ldr	r3, [pc, #276]	; (8002708 <menu+0x1354>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d902      	bls.n	80025fe <menu+0x124a>
				kapiAcTipi = 0;
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <menu+0x1354>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025fe:	f002 faa3 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002602:	2104      	movs	r1, #4
 8002604:	4837      	ldr	r0, [pc, #220]	; (80026e4 <menu+0x1330>)
 8002606:	f006 fd65 	bl	80090d4 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d115      	bne.n	800263c <menu+0x1288>
 8002610:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <menu+0x1334>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00e      	beq.n	800263c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800261e:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <menu+0x1354>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	3b01      	subs	r3, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <menu+0x1354>)
 8002628:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <menu+0x1354>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002632:	4b35      	ldr	r3, [pc, #212]	; (8002708 <menu+0x1354>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002638:	f002 fa86 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800263c:	2108      	movs	r1, #8
 800263e:	4829      	ldr	r0, [pc, #164]	; (80026e4 <menu+0x1330>)
 8002640:	f006 fd48 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002644:	4603      	mov	r3, r0
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10e      	bne.n	8002668 <menu+0x12b4>
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <menu+0x1334>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <menu+0x1354>)
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <menu+0x133c>)
 800265e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <menu+0x1344>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <menu+0x1348>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b09      	cmp	r3, #9
 800266e:	f040 80b9 	bne.w	80027e4 <menu+0x1430>
		if(dilSecim == 0){
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <menu+0x1328>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800267a:	4a28      	ldr	r2, [pc, #160]	; (800271c <menu+0x1368>)
 800267c:	2101      	movs	r1, #1
 800267e:	2001      	movs	r0, #1
 8002680:	f005 fa02 	bl	8007a88 <lcd_print>
 8002684:	e008      	b.n	8002698 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <menu+0x1328>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d104      	bne.n	8002698 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800268e:	4a24      	ldr	r2, [pc, #144]	; (8002720 <menu+0x136c>)
 8002690:	2101      	movs	r1, #1
 8002692:	2001      	movs	r0, #1
 8002694:	f005 f9f8 	bl	8007a88 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <menu+0x1370>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80026a0:	4a21      	ldr	r2, [pc, #132]	; (8002728 <menu+0x1374>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	2002      	movs	r0, #2
 80026a6:	f005 f9ef 	bl	8007a88 <lcd_print>
 80026aa:	e04c      	b.n	8002746 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <menu+0x1370>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d13f      	bne.n	8002734 <menu+0x1380>
			if(dilSecim == 0){
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <menu+0x1328>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <menu+0x1378>)
 80026be:	2101      	movs	r1, #1
 80026c0:	2002      	movs	r0, #2
 80026c2:	f005 f9e1 	bl	8007a88 <lcd_print>
 80026c6:	e03e      	b.n	8002746 <menu+0x1392>
			} else if(dilSecim == 1) {
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <menu+0x1328>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d13a      	bne.n	8002746 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <menu+0x137c>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	2002      	movs	r0, #2
 80026d6:	f005 f9d7 	bl	8007a88 <lcd_print>
 80026da:	e034      	b.n	8002746 <menu+0x1392>
 80026dc:	20000221 	.word	0x20000221
 80026e0:	0800d320 	.word	0x0800d320
 80026e4:	40010800 	.word	0x40010800
 80026e8:	2000022f 	.word	0x2000022f
 80026ec:	20000208 	.word	0x20000208
 80026f0:	2000012c 	.word	0x2000012c
 80026f4:	20000206 	.word	0x20000206
 80026f8:	2000022c 	.word	0x2000022c
 80026fc:	20000200 	.word	0x20000200
 8002700:	0800d334 	.word	0x0800d334
 8002704:	0800d348 	.word	0x0800d348
 8002708:	2000020c 	.word	0x2000020c
 800270c:	0800d35c 	.word	0x0800d35c
 8002710:	0800d36c 	.word	0x0800d36c
 8002714:	0800d37c 	.word	0x0800d37c
 8002718:	0800d390 	.word	0x0800d390
 800271c:	0800d3a4 	.word	0x0800d3a4
 8002720:	0800d3b8 	.word	0x0800d3b8
 8002724:	20000209 	.word	0x20000209
 8002728:	0800d3cc 	.word	0x0800d3cc
 800272c:	0800d3e0 	.word	0x0800d3e0
 8002730:	0800d3f0 	.word	0x0800d3f0
			}
		} else if(kapi1Tip == 2) {
 8002734:	4b8a      	ldr	r3, [pc, #552]	; (8002960 <menu+0x15ac>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d104      	bne.n	8002746 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 800273c:	4a89      	ldr	r2, [pc, #548]	; (8002964 <menu+0x15b0>)
 800273e:	2101      	movs	r1, #1
 8002740:	2002      	movs	r0, #2
 8002742:	f005 f9a1 	bl	8007a88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002746:	2102      	movs	r1, #2
 8002748:	4887      	ldr	r0, [pc, #540]	; (8002968 <menu+0x15b4>)
 800274a:	f006 fcc3 	bl	80090d4 <HAL_GPIO_ReadPin>
 800274e:	4603      	mov	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d115      	bne.n	8002780 <menu+0x13cc>
 8002754:	4b85      	ldr	r3, [pc, #532]	; (800296c <menu+0x15b8>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00e      	beq.n	8002780 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002762:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <menu+0x15ac>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <menu+0x15ac>)
 800276c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800276e:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <menu+0x15ac>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d902      	bls.n	800277c <menu+0x13c8>
				kapi1Tip = 0;
 8002776:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <menu+0x15ac>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800277c:	f002 f9e4 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002780:	2104      	movs	r1, #4
 8002782:	4879      	ldr	r0, [pc, #484]	; (8002968 <menu+0x15b4>)
 8002784:	f006 fca6 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d115      	bne.n	80027ba <menu+0x1406>
 800278e:	4b77      	ldr	r3, [pc, #476]	; (800296c <menu+0x15b8>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	f083 0301 	eor.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <menu+0x15ac>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b6e      	ldr	r3, [pc, #440]	; (8002960 <menu+0x15ac>)
 80027a6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80027a8:	4b6d      	ldr	r3, [pc, #436]	; (8002960 <menu+0x15ac>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d902      	bls.n	80027b6 <menu+0x1402>
		   		kapi1Tip = 2;
 80027b0:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <menu+0x15ac>)
 80027b2:	2202      	movs	r2, #2
 80027b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027b6:	f002 f9c7 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ba:	2108      	movs	r1, #8
 80027bc:	486a      	ldr	r0, [pc, #424]	; (8002968 <menu+0x15b4>)
 80027be:	f006 fc89 	bl	80090d4 <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10d      	bne.n	80027e4 <menu+0x1430>
 80027c8:	4b68      	ldr	r3, [pc, #416]	; (800296c <menu+0x15b8>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80027d6:	4b62      	ldr	r3, [pc, #392]	; (8002960 <menu+0x15ac>)
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <menu+0x15bc>)
 80027dc:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <menu+0x15c0>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80027e4:	4b64      	ldr	r3, [pc, #400]	; (8002978 <menu+0x15c4>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b0a      	cmp	r3, #10
 80027ea:	d17f      	bne.n	80028ec <menu+0x1538>
		if(dilSecim == 0) {
 80027ec:	4b63      	ldr	r3, [pc, #396]	; (800297c <menu+0x15c8>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80027f4:	4a62      	ldr	r2, [pc, #392]	; (8002980 <menu+0x15cc>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	2001      	movs	r0, #1
 80027fa:	f005 f945 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027fe:	4a61      	ldr	r2, [pc, #388]	; (8002984 <menu+0x15d0>)
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f005 f940 	bl	8007a88 <lcd_print>
 8002808:	e00d      	b.n	8002826 <menu+0x1472>
		} else if(dilSecim == 1) {
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <menu+0x15c8>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d109      	bne.n	8002826 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002812:	4a5d      	ldr	r2, [pc, #372]	; (8002988 <menu+0x15d4>)
 8002814:	2101      	movs	r1, #1
 8002816:	2001      	movs	r0, #1
 8002818:	f005 f936 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800281c:	4a5b      	ldr	r2, [pc, #364]	; (800298c <menu+0x15d8>)
 800281e:	2101      	movs	r1, #1
 8002820:	2002      	movs	r0, #2
 8002822:	f005 f931 	bl	8007a88 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <menu+0x15dc>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	220a      	movs	r2, #10
 800282c:	4959      	ldr	r1, [pc, #356]	; (8002994 <menu+0x15e0>)
 800282e:	4618      	mov	r0, r3
 8002830:	f009 fcd8 	bl	800c1e4 <itoa>
		lcd_print(2,16,snum);
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <menu+0x15e0>)
 8002836:	2110      	movs	r1, #16
 8002838:	2002      	movs	r0, #2
 800283a:	f005 f925 	bl	8007a88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800283e:	2102      	movs	r1, #2
 8002840:	4849      	ldr	r0, [pc, #292]	; (8002968 <menu+0x15b4>)
 8002842:	f006 fc47 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	d119      	bne.n	8002880 <menu+0x14cc>
 800284c:	4b47      	ldr	r3, [pc, #284]	; (800296c <menu+0x15b8>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d012      	beq.n	8002880 <menu+0x14cc>
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <menu+0x15ac>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10e      	bne.n	8002880 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002862:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <menu+0x15dc>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <menu+0x15dc>)
 800286c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800286e:	4b48      	ldr	r3, [pc, #288]	; (8002990 <menu+0x15dc>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d902      	bls.n	800287c <menu+0x14c8>
				kapi1AcSure = 0;
 8002876:	4b46      	ldr	r3, [pc, #280]	; (8002990 <menu+0x15dc>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800287c:	f002 f964 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002880:	2104      	movs	r1, #4
 8002882:	4839      	ldr	r0, [pc, #228]	; (8002968 <menu+0x15b4>)
 8002884:	f006 fc26 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d119      	bne.n	80028c2 <menu+0x150e>
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <menu+0x15b8>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f083 0301 	eor.w	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <menu+0x150e>
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <menu+0x15ac>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10e      	bne.n	80028c2 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <menu+0x15dc>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b38      	ldr	r3, [pc, #224]	; (8002990 <menu+0x15dc>)
 80028ae:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <menu+0x15dc>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d902      	bls.n	80028be <menu+0x150a>
		   		kapi1AcSure = 5;
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <menu+0x15dc>)
 80028ba:	2205      	movs	r2, #5
 80028bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028be:	f002 f943 	bl	8004b48 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c2:	2108      	movs	r1, #8
 80028c4:	4828      	ldr	r0, [pc, #160]	; (8002968 <menu+0x15b4>)
 80028c6:	f006 fc05 	bl	80090d4 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <menu+0x1538>
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <menu+0x15b8>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <menu+0x15dc>)
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <menu+0x15bc>)
 80028e4:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <menu+0x15c0>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <menu+0x15c4>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b0b      	cmp	r3, #11
 80028f2:	f040 80b5 	bne.w	8002a60 <menu+0x16ac>
		if(dilSecim == 0) {
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <menu+0x15c8>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80028fe:	4a26      	ldr	r2, [pc, #152]	; (8002998 <menu+0x15e4>)
 8002900:	2101      	movs	r1, #1
 8002902:	2001      	movs	r0, #1
 8002904:	f005 f8c0 	bl	8007a88 <lcd_print>
 8002908:	e008      	b.n	800291c <menu+0x1568>
		} else if(dilSecim == 1) {
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <menu+0x15c8>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d104      	bne.n	800291c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <menu+0x15e8>)
 8002914:	2101      	movs	r1, #1
 8002916:	2001      	movs	r0, #1
 8002918:	f005 f8b6 	bl	8007a88 <lcd_print>
		}

		if(kapi2Tip == 0) {
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <menu+0x15ec>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002924:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <menu+0x15f0>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f005 f8ad 	bl	8007a88 <lcd_print>
 800292e:	e048      	b.n	80029c2 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <menu+0x15ec>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d13b      	bne.n	80029b0 <menu+0x15fc>
			if(dilSecim == 0) {
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <menu+0x15c8>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <menu+0x15f4>)
 8002942:	2101      	movs	r1, #1
 8002944:	2002      	movs	r0, #2
 8002946:	f005 f89f 	bl	8007a88 <lcd_print>
 800294a:	e03a      	b.n	80029c2 <menu+0x160e>
			} else if(dilSecim == 1) {
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <menu+0x15c8>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d136      	bne.n	80029c2 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <menu+0x15f8>)
 8002956:	2101      	movs	r1, #1
 8002958:	2002      	movs	r0, #2
 800295a:	f005 f895 	bl	8007a88 <lcd_print>
 800295e:	e030      	b.n	80029c2 <menu+0x160e>
 8002960:	20000209 	.word	0x20000209
 8002964:	0800d404 	.word	0x0800d404
 8002968:	40010800 	.word	0x40010800
 800296c:	2000022f 	.word	0x2000022f
 8002970:	2000012c 	.word	0x2000012c
 8002974:	2000022c 	.word	0x2000022c
 8002978:	20000200 	.word	0x20000200
 800297c:	20000221 	.word	0x20000221
 8002980:	0800d414 	.word	0x0800d414
 8002984:	0800d428 	.word	0x0800d428
 8002988:	0800d438 	.word	0x0800d438
 800298c:	0800d44c 	.word	0x0800d44c
 8002990:	20000219 	.word	0x20000219
 8002994:	2000019c 	.word	0x2000019c
 8002998:	0800d45c 	.word	0x0800d45c
 800299c:	0800d470 	.word	0x0800d470
 80029a0:	2000020a 	.word	0x2000020a
 80029a4:	0800d3cc 	.word	0x0800d3cc
 80029a8:	0800d3e0 	.word	0x0800d3e0
 80029ac:	0800d3f0 	.word	0x0800d3f0
			}
		} else if(kapi2Tip == 2) {
 80029b0:	4b8a      	ldr	r3, [pc, #552]	; (8002bdc <menu+0x1828>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d104      	bne.n	80029c2 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80029b8:	4a89      	ldr	r2, [pc, #548]	; (8002be0 <menu+0x182c>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	2002      	movs	r0, #2
 80029be:	f005 f863 	bl	8007a88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c2:	2102      	movs	r1, #2
 80029c4:	4887      	ldr	r0, [pc, #540]	; (8002be4 <menu+0x1830>)
 80029c6:	f006 fb85 	bl	80090d4 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d115      	bne.n	80029fc <menu+0x1648>
 80029d0:	4b85      	ldr	r3, [pc, #532]	; (8002be8 <menu+0x1834>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00e      	beq.n	80029fc <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80029de:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <menu+0x1828>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4b7d      	ldr	r3, [pc, #500]	; (8002bdc <menu+0x1828>)
 80029e8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80029ea:	4b7c      	ldr	r3, [pc, #496]	; (8002bdc <menu+0x1828>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <menu+0x1644>
				kapi2Tip = 0;
 80029f2:	4b7a      	ldr	r3, [pc, #488]	; (8002bdc <menu+0x1828>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f8:	f002 f8a6 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fc:	2104      	movs	r1, #4
 80029fe:	4879      	ldr	r0, [pc, #484]	; (8002be4 <menu+0x1830>)
 8002a00:	f006 fb68 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d115      	bne.n	8002a36 <menu+0x1682>
 8002a0a:	4b77      	ldr	r3, [pc, #476]	; (8002be8 <menu+0x1834>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	f083 0301 	eor.w	r3, r3, #1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002a18:	4b70      	ldr	r3, [pc, #448]	; (8002bdc <menu+0x1828>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b6e      	ldr	r3, [pc, #440]	; (8002bdc <menu+0x1828>)
 8002a22:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002a24:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <menu+0x1828>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d902      	bls.n	8002a32 <menu+0x167e>
		   		kapi2Tip = 2;
 8002a2c:	4b6b      	ldr	r3, [pc, #428]	; (8002bdc <menu+0x1828>)
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a32:	f002 f889 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a36:	2108      	movs	r1, #8
 8002a38:	486a      	ldr	r0, [pc, #424]	; (8002be4 <menu+0x1830>)
 8002a3a:	f006 fb4b 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10d      	bne.n	8002a60 <menu+0x16ac>
 8002a44:	4b68      	ldr	r3, [pc, #416]	; (8002be8 <menu+0x1834>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f083 0301 	eor.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002a52:	4b62      	ldr	r3, [pc, #392]	; (8002bdc <menu+0x1828>)
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <menu+0x1838>)
 8002a58:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002a5a:	4b65      	ldr	r3, [pc, #404]	; (8002bf0 <menu+0x183c>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002a60:	4b64      	ldr	r3, [pc, #400]	; (8002bf4 <menu+0x1840>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d17f      	bne.n	8002b68 <menu+0x17b4>
		if(dilSecim == 0) {
 8002a68:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <menu+0x1844>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a70:	4a62      	ldr	r2, [pc, #392]	; (8002bfc <menu+0x1848>)
 8002a72:	2101      	movs	r1, #1
 8002a74:	2001      	movs	r0, #1
 8002a76:	f005 f807 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a7a:	4a61      	ldr	r2, [pc, #388]	; (8002c00 <menu+0x184c>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f005 f802 	bl	8007a88 <lcd_print>
 8002a84:	e00d      	b.n	8002aa2 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002a86:	4b5c      	ldr	r3, [pc, #368]	; (8002bf8 <menu+0x1844>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d109      	bne.n	8002aa2 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002a8e:	4a5d      	ldr	r2, [pc, #372]	; (8002c04 <menu+0x1850>)
 8002a90:	2101      	movs	r1, #1
 8002a92:	2001      	movs	r0, #1
 8002a94:	f004 fff8 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a98:	4a5b      	ldr	r2, [pc, #364]	; (8002c08 <menu+0x1854>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f004 fff3 	bl	8007a88 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <menu+0x1858>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	220a      	movs	r2, #10
 8002aa8:	4959      	ldr	r1, [pc, #356]	; (8002c10 <menu+0x185c>)
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f009 fb9a 	bl	800c1e4 <itoa>
		lcd_print(2,16,snum);
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <menu+0x185c>)
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	2002      	movs	r0, #2
 8002ab6:	f004 ffe7 	bl	8007a88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002aba:	2102      	movs	r1, #2
 8002abc:	4849      	ldr	r0, [pc, #292]	; (8002be4 <menu+0x1830>)
 8002abe:	f006 fb09 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d119      	bne.n	8002afc <menu+0x1748>
 8002ac8:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <menu+0x1834>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f083 0301 	eor.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <menu+0x1748>
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <menu+0x1828>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10e      	bne.n	8002afc <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002ade:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <menu+0x1858>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <menu+0x1858>)
 8002ae8:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002aea:	4b48      	ldr	r3, [pc, #288]	; (8002c0c <menu+0x1858>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d902      	bls.n	8002af8 <menu+0x1744>
				kapi2AcSure = 0;
 8002af2:	4b46      	ldr	r3, [pc, #280]	; (8002c0c <menu+0x1858>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002af8:	f002 f826 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002afc:	2104      	movs	r1, #4
 8002afe:	4839      	ldr	r0, [pc, #228]	; (8002be4 <menu+0x1830>)
 8002b00:	f006 fae8 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d119      	bne.n	8002b3e <menu+0x178a>
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <menu+0x1834>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f083 0301 	eor.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d012      	beq.n	8002b3e <menu+0x178a>
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <menu+0x1828>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10e      	bne.n	8002b3e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002b20:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <menu+0x1858>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <menu+0x1858>)
 8002b2a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002b2c:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <menu+0x1858>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b06      	cmp	r3, #6
 8002b32:	d902      	bls.n	8002b3a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002b34:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <menu+0x1858>)
 8002b36:	2205      	movs	r2, #5
 8002b38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b3a:	f002 f805 	bl	8004b48 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3e:	2108      	movs	r1, #8
 8002b40:	4828      	ldr	r0, [pc, #160]	; (8002be4 <menu+0x1830>)
 8002b42:	f006 fac7 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10d      	bne.n	8002b68 <menu+0x17b4>
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <menu+0x1834>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	; (8002c0c <menu+0x1858>)
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <menu+0x1838>)
 8002b60:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <menu+0x183c>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <menu+0x1840>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b0d      	cmp	r3, #13
 8002b6e:	f040 80b5 	bne.w	8002cdc <menu+0x1928>
		if(dilSecim == 0) {
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <menu+0x1844>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002b7a:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <menu+0x1860>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f004 ff82 	bl	8007a88 <lcd_print>
 8002b84:	e008      	b.n	8002b98 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <menu+0x1844>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d104      	bne.n	8002b98 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002b8e:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <menu+0x1864>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	2001      	movs	r0, #1
 8002b94:	f004 ff78 	bl	8007a88 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <menu+0x1868>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <menu+0x186c>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f004 ff6f 	bl	8007a88 <lcd_print>
 8002baa:	e048      	b.n	8002c3e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <menu+0x1868>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d13b      	bne.n	8002c2c <menu+0x1878>
			if(dilSecim == 0) {
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <menu+0x1844>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <menu+0x1870>)
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f004 ff61 	bl	8007a88 <lcd_print>
 8002bc6:	e03a      	b.n	8002c3e <menu+0x188a>
			} else if(dilSecim == 1) {
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <menu+0x1844>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d136      	bne.n	8002c3e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <menu+0x1874>)
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	f004 ff57 	bl	8007a88 <lcd_print>
 8002bda:	e030      	b.n	8002c3e <menu+0x188a>
 8002bdc:	2000020a 	.word	0x2000020a
 8002be0:	0800d404 	.word	0x0800d404
 8002be4:	40010800 	.word	0x40010800
 8002be8:	2000022f 	.word	0x2000022f
 8002bec:	2000012c 	.word	0x2000012c
 8002bf0:	2000022c 	.word	0x2000022c
 8002bf4:	20000200 	.word	0x20000200
 8002bf8:	20000221 	.word	0x20000221
 8002bfc:	0800d484 	.word	0x0800d484
 8002c00:	0800d428 	.word	0x0800d428
 8002c04:	0800d498 	.word	0x0800d498
 8002c08:	0800d44c 	.word	0x0800d44c
 8002c0c:	2000021a 	.word	0x2000021a
 8002c10:	2000019c 	.word	0x2000019c
 8002c14:	0800d4ac 	.word	0x0800d4ac
 8002c18:	0800d4c0 	.word	0x0800d4c0
 8002c1c:	2000020b 	.word	0x2000020b
 8002c20:	0800d3cc 	.word	0x0800d3cc
 8002c24:	0800d3e0 	.word	0x0800d3e0
 8002c28:	0800d3f0 	.word	0x0800d3f0
			}
		} else if(kapitablaTip == 2) {
 8002c2c:	4b5b      	ldr	r3, [pc, #364]	; (8002d9c <menu+0x19e8>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d104      	bne.n	8002c3e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002c34:	4a5a      	ldr	r2, [pc, #360]	; (8002da0 <menu+0x19ec>)
 8002c36:	2101      	movs	r1, #1
 8002c38:	2002      	movs	r0, #2
 8002c3a:	f004 ff25 	bl	8007a88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3e:	2102      	movs	r1, #2
 8002c40:	4858      	ldr	r0, [pc, #352]	; (8002da4 <menu+0x19f0>)
 8002c42:	f006 fa47 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d115      	bne.n	8002c78 <menu+0x18c4>
 8002c4c:	4b56      	ldr	r3, [pc, #344]	; (8002da8 <menu+0x19f4>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00e      	beq.n	8002c78 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002c5a:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <menu+0x19e8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <menu+0x19e8>)
 8002c64:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <menu+0x19e8>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d902      	bls.n	8002c74 <menu+0x18c0>
				kapitablaTip = 0;
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <menu+0x19e8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c74:	f001 ff68 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c78:	2104      	movs	r1, #4
 8002c7a:	484a      	ldr	r0, [pc, #296]	; (8002da4 <menu+0x19f0>)
 8002c7c:	f006 fa2a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d115      	bne.n	8002cb2 <menu+0x18fe>
 8002c86:	4b48      	ldr	r3, [pc, #288]	; (8002da8 <menu+0x19f4>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	f083 0301 	eor.w	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00e      	beq.n	8002cb2 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c94:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <menu+0x19e8>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b3f      	ldr	r3, [pc, #252]	; (8002d9c <menu+0x19e8>)
 8002c9e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002ca0:	4b3e      	ldr	r3, [pc, #248]	; (8002d9c <menu+0x19e8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d902      	bls.n	8002cae <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ca8:	4b3c      	ldr	r3, [pc, #240]	; (8002d9c <menu+0x19e8>)
 8002caa:	2202      	movs	r2, #2
 8002cac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cae:	f001 ff4b 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb2:	2108      	movs	r1, #8
 8002cb4:	483b      	ldr	r0, [pc, #236]	; (8002da4 <menu+0x19f0>)
 8002cb6:	f006 fa0d 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10d      	bne.n	8002cdc <menu+0x1928>
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <menu+0x19f4>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002cce:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <menu+0x19e8>)
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <menu+0x19f8>)
 8002cd4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <menu+0x19fc>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002cdc:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <menu+0x1a00>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b0e      	cmp	r3, #14
 8002ce2:	f040 80f2 	bne.w	8002eca <menu+0x1b16>
		if(dilSecim == 0) {
 8002ce6:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <menu+0x1a04>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002cee:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <menu+0x1a08>)
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f004 fec8 	bl	8007a88 <lcd_print>
 8002cf8:	e008      	b.n	8002d0c <menu+0x1958>
		} else if(dilSecim == 1) {
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <menu+0x1a04>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d104      	bne.n	8002d0c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002d02:	4a2f      	ldr	r2, [pc, #188]	; (8002dc0 <menu+0x1a0c>)
 8002d04:	2101      	movs	r1, #1
 8002d06:	2001      	movs	r0, #1
 8002d08:	f004 febe 	bl	8007a88 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <menu+0x1a10>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d113      	bne.n	8002d3c <menu+0x1988>
			if(dilSecim == 0){
 8002d14:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <menu+0x1a04>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002d1c:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <menu+0x1a14>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	2002      	movs	r0, #2
 8002d22:	f004 feb1 	bl	8007a88 <lcd_print>
 8002d26:	e071      	b.n	8002e0c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <menu+0x1a04>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d16d      	bne.n	8002e0c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002d30:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <menu+0x1a18>)
 8002d32:	2101      	movs	r1, #1
 8002d34:	2002      	movs	r0, #2
 8002d36:	f004 fea7 	bl	8007a88 <lcd_print>
 8002d3a:	e067      	b.n	8002e0c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <menu+0x1a10>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d112      	bne.n	8002d6a <menu+0x19b6>
			if(dilSecim == 0){
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <menu+0x1a04>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002d4c:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <menu+0x1a1c>)
 8002d4e:	2101      	movs	r1, #1
 8002d50:	2002      	movs	r0, #2
 8002d52:	f004 fe99 	bl	8007a88 <lcd_print>
			}
			if(dilSecim == 1){
 8002d56:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <menu+0x1a04>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d156      	bne.n	8002e0c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <menu+0x1a20>)
 8002d60:	2101      	movs	r1, #1
 8002d62:	2002      	movs	r0, #2
 8002d64:	f004 fe90 	bl	8007a88 <lcd_print>
 8002d68:	e050      	b.n	8002e0c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d6a:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <menu+0x1a10>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d136      	bne.n	8002de0 <menu+0x1a2c>
			if(dilSecim == 0){
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <menu+0x1a04>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <menu+0x1a24>)
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	2002      	movs	r0, #2
 8002d80:	f004 fe82 	bl	8007a88 <lcd_print>
 8002d84:	e042      	b.n	8002e0c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <menu+0x1a04>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d13e      	bne.n	8002e0c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002d8e:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <menu+0x1a28>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	2002      	movs	r0, #2
 8002d94:	f004 fe78 	bl	8007a88 <lcd_print>
 8002d98:	e038      	b.n	8002e0c <menu+0x1a58>
 8002d9a:	bf00      	nop
 8002d9c:	2000020b 	.word	0x2000020b
 8002da0:	0800d404 	.word	0x0800d404
 8002da4:	40010800 	.word	0x40010800
 8002da8:	2000022f 	.word	0x2000022f
 8002dac:	2000012c 	.word	0x2000012c
 8002db0:	2000022c 	.word	0x2000022c
 8002db4:	20000200 	.word	0x20000200
 8002db8:	20000221 	.word	0x20000221
 8002dbc:	0800d4d4 	.word	0x0800d4d4
 8002dc0:	0800d4e8 	.word	0x0800d4e8
 8002dc4:	2000020d 	.word	0x2000020d
 8002dc8:	0800d4fc 	.word	0x0800d4fc
 8002dcc:	0800d50c 	.word	0x0800d50c
 8002dd0:	0800d51c 	.word	0x0800d51c
 8002dd4:	0800d52c 	.word	0x0800d52c
 8002dd8:	0800d53c 	.word	0x0800d53c
 8002ddc:	0800d550 	.word	0x0800d550
			}
		} else if(kapiTablaAcKonum == 3) {
 8002de0:	4b9b      	ldr	r3, [pc, #620]	; (8003050 <menu+0x1c9c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d111      	bne.n	8002e0c <menu+0x1a58>
			if(dilSecim == 0) {
 8002de8:	4b9a      	ldr	r3, [pc, #616]	; (8003054 <menu+0x1ca0>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002df0:	4a99      	ldr	r2, [pc, #612]	; (8003058 <menu+0x1ca4>)
 8002df2:	2101      	movs	r1, #1
 8002df4:	2002      	movs	r0, #2
 8002df6:	f004 fe47 	bl	8007a88 <lcd_print>
			}
			if(dilSecim == 1) {
 8002dfa:	4b96      	ldr	r3, [pc, #600]	; (8003054 <menu+0x1ca0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d104      	bne.n	8002e0c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002e02:	4a96      	ldr	r2, [pc, #600]	; (800305c <menu+0x1ca8>)
 8002e04:	2101      	movs	r1, #1
 8002e06:	2002      	movs	r0, #2
 8002e08:	f004 fe3e 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4894      	ldr	r0, [pc, #592]	; (8003060 <menu+0x1cac>)
 8002e10:	f006 f960 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d115      	bne.n	8002e46 <menu+0x1a92>
 8002e1a:	4b92      	ldr	r3, [pc, #584]	; (8003064 <menu+0x1cb0>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00e      	beq.n	8002e46 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002e28:	4b89      	ldr	r3, [pc, #548]	; (8003050 <menu+0x1c9c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b87      	ldr	r3, [pc, #540]	; (8003050 <menu+0x1c9c>)
 8002e32:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002e34:	4b86      	ldr	r3, [pc, #536]	; (8003050 <menu+0x1c9c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d902      	bls.n	8002e42 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002e3c:	4b84      	ldr	r3, [pc, #528]	; (8003050 <menu+0x1c9c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e42:	f001 fe81 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e46:	2104      	movs	r1, #4
 8002e48:	4885      	ldr	r0, [pc, #532]	; (8003060 <menu+0x1cac>)
 8002e4a:	f006 f943 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d115      	bne.n	8002e80 <menu+0x1acc>
 8002e54:	4b83      	ldr	r3, [pc, #524]	; (8003064 <menu+0x1cb0>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	f083 0301 	eor.w	r3, r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00e      	beq.n	8002e80 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002e62:	4b7b      	ldr	r3, [pc, #492]	; (8003050 <menu+0x1c9c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b79      	ldr	r3, [pc, #484]	; (8003050 <menu+0x1c9c>)
 8002e6c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e6e:	4b78      	ldr	r3, [pc, #480]	; (8003050 <menu+0x1c9c>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d902      	bls.n	8002e7c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <menu+0x1c9c>)
 8002e78:	2202      	movs	r2, #2
 8002e7a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e7c:	f001 fe64 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e80:	2108      	movs	r1, #8
 8002e82:	4877      	ldr	r0, [pc, #476]	; (8003060 <menu+0x1cac>)
 8002e84:	f006 f926 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d11d      	bne.n	8002eca <menu+0x1b16>
 8002e8e:	4b75      	ldr	r3, [pc, #468]	; (8003064 <menu+0x1cb0>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f083 0301 	eor.w	r3, r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d016      	beq.n	8002eca <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <menu+0x1c9c>)
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	4b71      	ldr	r3, [pc, #452]	; (8003068 <menu+0x1cb4>)
 8002ea2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <menu+0x1c9c>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <menu+0x1b02>
 8002eae:	4b68      	ldr	r3, [pc, #416]	; (8003050 <menu+0x1c9c>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d106      	bne.n	8002ec4 <menu+0x1b10>
				altLimit = 1;
 8002eb6:	4b6d      	ldr	r3, [pc, #436]	; (800306c <menu+0x1cb8>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	; (800306c <menu+0x1cb8>)
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	4b69      	ldr	r3, [pc, #420]	; (8003068 <menu+0x1cb4>)
 8002ec2:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <menu+0x1cbc>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002eca:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <menu+0x1cc0>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	d17f      	bne.n	8002fd2 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <menu+0x1ca0>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002eda:	4a67      	ldr	r2, [pc, #412]	; (8003078 <menu+0x1cc4>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f004 fdd2 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ee4:	4a65      	ldr	r2, [pc, #404]	; (800307c <menu+0x1cc8>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f004 fdcd 	bl	8007a88 <lcd_print>
 8002eee:	e00d      	b.n	8002f0c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002ef0:	4b58      	ldr	r3, [pc, #352]	; (8003054 <menu+0x1ca0>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d109      	bne.n	8002f0c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ef8:	4a61      	ldr	r2, [pc, #388]	; (8003080 <menu+0x1ccc>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2001      	movs	r0, #1
 8002efe:	f004 fdc3 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002f02:	4a60      	ldr	r2, [pc, #384]	; (8003084 <menu+0x1cd0>)
 8002f04:	2101      	movs	r1, #1
 8002f06:	2002      	movs	r0, #2
 8002f08:	f004 fdbe 	bl	8007a88 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	; (8003088 <menu+0x1cd4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	220a      	movs	r2, #10
 8002f12:	495e      	ldr	r1, [pc, #376]	; (800308c <menu+0x1cd8>)
 8002f14:	4618      	mov	r0, r3
 8002f16:	f009 f965 	bl	800c1e4 <itoa>
		lcd_print(2,16,snum);
 8002f1a:	4a5c      	ldr	r2, [pc, #368]	; (800308c <menu+0x1cd8>)
 8002f1c:	2110      	movs	r1, #16
 8002f1e:	2002      	movs	r0, #2
 8002f20:	f004 fdb2 	bl	8007a88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f24:	2102      	movs	r1, #2
 8002f26:	484e      	ldr	r0, [pc, #312]	; (8003060 <menu+0x1cac>)
 8002f28:	f006 f8d4 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d119      	bne.n	8002f66 <menu+0x1bb2>
 8002f32:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <menu+0x1cb0>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	f083 0301 	eor.w	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d012      	beq.n	8002f66 <menu+0x1bb2>
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <menu+0x1cdc>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10e      	bne.n	8002f66 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002f48:	4b4f      	ldr	r3, [pc, #316]	; (8003088 <menu+0x1cd4>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	4b4d      	ldr	r3, [pc, #308]	; (8003088 <menu+0x1cd4>)
 8002f52:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002f54:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <menu+0x1cd4>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d902      	bls.n	8002f62 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <menu+0x1cd4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f62:	f001 fdf1 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f66:	2104      	movs	r1, #4
 8002f68:	483d      	ldr	r0, [pc, #244]	; (8003060 <menu+0x1cac>)
 8002f6a:	f006 f8b3 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d119      	bne.n	8002fa8 <menu+0x1bf4>
 8002f74:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <menu+0x1cb0>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	f083 0301 	eor.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d012      	beq.n	8002fa8 <menu+0x1bf4>
 8002f82:	4b43      	ldr	r3, [pc, #268]	; (8003090 <menu+0x1cdc>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10e      	bne.n	8002fa8 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002f8a:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <menu+0x1cd4>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <menu+0x1cd4>)
 8002f94:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f96:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <menu+0x1cd4>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d902      	bls.n	8002fa4 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <menu+0x1cd4>)
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002fa4:	f001 fdd0 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fa8:	2108      	movs	r1, #8
 8002faa:	482d      	ldr	r0, [pc, #180]	; (8003060 <menu+0x1cac>)
 8002fac:	f006 f892 	bl	80090d4 <HAL_GPIO_ReadPin>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d10d      	bne.n	8002fd2 <menu+0x1c1e>
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <menu+0x1cb0>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d006      	beq.n	8002fd2 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <menu+0x1cd4>)
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <menu+0x1cb4>)
 8002fca:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <menu+0x1cbc>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <menu+0x1cc0>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	f040 80bc 	bne.w	8003154 <menu+0x1da0>
		if(dilSecim == 0) {
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <menu+0x1ca0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	; (8003094 <menu+0x1ce0>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f004 fd4d 	bl	8007a88 <lcd_print>
 8002fee:	e008      	b.n	8003002 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002ff0:	4b18      	ldr	r3, [pc, #96]	; (8003054 <menu+0x1ca0>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d104      	bne.n	8003002 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ff8:	4a27      	ldr	r2, [pc, #156]	; (8003098 <menu+0x1ce4>)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f004 fd43 	bl	8007a88 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003002:	4b26      	ldr	r3, [pc, #152]	; (800309c <menu+0x1ce8>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d113      	bne.n	8003032 <menu+0x1c7e>
			if(dilSecim == 0) {
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <menu+0x1ca0>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <menu+0x1ca4>)
 8003014:	2101      	movs	r1, #1
 8003016:	2002      	movs	r0, #2
 8003018:	f004 fd36 	bl	8007a88 <lcd_print>
 800301c:	e04b      	b.n	80030b6 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <menu+0x1ca0>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d147      	bne.n	80030b6 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003026:	4a0d      	ldr	r2, [pc, #52]	; (800305c <menu+0x1ca8>)
 8003028:	2101      	movs	r1, #1
 800302a:	2002      	movs	r0, #2
 800302c:	f004 fd2c 	bl	8007a88 <lcd_print>
 8003030:	e041      	b.n	80030b6 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <menu+0x1ce8>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d13d      	bne.n	80030b6 <menu+0x1d02>
			if(dilSecim == 0) {
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <menu+0x1ca0>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d130      	bne.n	80030a4 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8003042:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <menu+0x1cec>)
 8003044:	2101      	movs	r1, #1
 8003046:	2002      	movs	r0, #2
 8003048:	f004 fd1e 	bl	8007a88 <lcd_print>
 800304c:	e033      	b.n	80030b6 <menu+0x1d02>
 800304e:	bf00      	nop
 8003050:	2000020d 	.word	0x2000020d
 8003054:	20000221 	.word	0x20000221
 8003058:	0800d1c4 	.word	0x0800d1c4
 800305c:	0800d1d8 	.word	0x0800d1d8
 8003060:	40010800 	.word	0x40010800
 8003064:	2000022f 	.word	0x2000022f
 8003068:	2000012c 	.word	0x2000012c
 800306c:	20000206 	.word	0x20000206
 8003070:	2000022c 	.word	0x2000022c
 8003074:	20000200 	.word	0x20000200
 8003078:	0800d564 	.word	0x0800d564
 800307c:	0800d428 	.word	0x0800d428
 8003080:	0800d578 	.word	0x0800d578
 8003084:	0800d44c 	.word	0x0800d44c
 8003088:	2000021b 	.word	0x2000021b
 800308c:	2000019c 	.word	0x2000019c
 8003090:	2000020b 	.word	0x2000020b
 8003094:	0800d58c 	.word	0x0800d58c
 8003098:	0800d5a0 	.word	0x0800d5a0
 800309c:	2000020e 	.word	0x2000020e
 80030a0:	0800d224 	.word	0x0800d224
			} else if(dilSecim == 1) {
 80030a4:	4b99      	ldr	r3, [pc, #612]	; (800330c <menu+0x1f58>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d104      	bne.n	80030b6 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80030ac:	4a98      	ldr	r2, [pc, #608]	; (8003310 <menu+0x1f5c>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	2002      	movs	r0, #2
 80030b2:	f004 fce9 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b6:	2102      	movs	r1, #2
 80030b8:	4896      	ldr	r0, [pc, #600]	; (8003314 <menu+0x1f60>)
 80030ba:	f006 f80b 	bl	80090d4 <HAL_GPIO_ReadPin>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d115      	bne.n	80030f0 <menu+0x1d3c>
 80030c4:	4b94      	ldr	r3, [pc, #592]	; (8003318 <menu+0x1f64>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	f083 0301 	eor.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80030d2:	4b92      	ldr	r3, [pc, #584]	; (800331c <menu+0x1f68>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b90      	ldr	r3, [pc, #576]	; (800331c <menu+0x1f68>)
 80030dc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80030de:	4b8f      	ldr	r3, [pc, #572]	; (800331c <menu+0x1f68>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d902      	bls.n	80030ec <menu+0x1d38>
				yukariYavasLimit = 0;
 80030e6:	4b8d      	ldr	r3, [pc, #564]	; (800331c <menu+0x1f68>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030ec:	f001 fd2c 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f0:	2104      	movs	r1, #4
 80030f2:	4888      	ldr	r0, [pc, #544]	; (8003314 <menu+0x1f60>)
 80030f4:	f005 ffee 	bl	80090d4 <HAL_GPIO_ReadPin>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d115      	bne.n	800312a <menu+0x1d76>
 80030fe:	4b86      	ldr	r3, [pc, #536]	; (8003318 <menu+0x1f64>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	f083 0301 	eor.w	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00e      	beq.n	800312a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 800310c:	4b83      	ldr	r3, [pc, #524]	; (800331c <menu+0x1f68>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	3b01      	subs	r3, #1
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b81      	ldr	r3, [pc, #516]	; (800331c <menu+0x1f68>)
 8003116:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003118:	4b80      	ldr	r3, [pc, #512]	; (800331c <menu+0x1f68>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003120:	4b7e      	ldr	r3, [pc, #504]	; (800331c <menu+0x1f68>)
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003126:	f001 fd0f 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800312a:	2108      	movs	r1, #8
 800312c:	4879      	ldr	r0, [pc, #484]	; (8003314 <menu+0x1f60>)
 800312e:	f005 ffd1 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003132:	4603      	mov	r3, r0
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10d      	bne.n	8003154 <menu+0x1da0>
 8003138:	4b77      	ldr	r3, [pc, #476]	; (8003318 <menu+0x1f64>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f083 0301 	eor.w	r3, r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003146:	4b75      	ldr	r3, [pc, #468]	; (800331c <menu+0x1f68>)
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	4b75      	ldr	r3, [pc, #468]	; (8003320 <menu+0x1f6c>)
 800314c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800314e:	4b75      	ldr	r3, [pc, #468]	; (8003324 <menu+0x1f70>)
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003154:	4b74      	ldr	r3, [pc, #464]	; (8003328 <menu+0x1f74>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b11      	cmp	r3, #17
 800315a:	f040 80c3 	bne.w	80032e4 <menu+0x1f30>
		if(dilSecim == 0) {
 800315e:	4b6b      	ldr	r3, [pc, #428]	; (800330c <menu+0x1f58>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d105      	bne.n	8003172 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003166:	4a71      	ldr	r2, [pc, #452]	; (800332c <menu+0x1f78>)
 8003168:	2101      	movs	r1, #1
 800316a:	2001      	movs	r0, #1
 800316c:	f004 fc8c 	bl	8007a88 <lcd_print>
 8003170:	e008      	b.n	8003184 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003172:	4b66      	ldr	r3, [pc, #408]	; (800330c <menu+0x1f58>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d104      	bne.n	8003184 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800317a:	4a6d      	ldr	r2, [pc, #436]	; (8003330 <menu+0x1f7c>)
 800317c:	2101      	movs	r1, #1
 800317e:	2001      	movs	r0, #1
 8003180:	f004 fc82 	bl	8007a88 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003184:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <menu+0x1f80>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d113      	bne.n	80031b4 <menu+0x1e00>
			if(dilSecim == 0){
 800318c:	4b5f      	ldr	r3, [pc, #380]	; (800330c <menu+0x1f58>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003194:	4a68      	ldr	r2, [pc, #416]	; (8003338 <menu+0x1f84>)
 8003196:	2101      	movs	r1, #1
 8003198:	2002      	movs	r0, #2
 800319a:	f004 fc75 	bl	8007a88 <lcd_print>
 800319e:	e038      	b.n	8003212 <menu+0x1e5e>
			} else if(dilSecim == 1){
 80031a0:	4b5a      	ldr	r3, [pc, #360]	; (800330c <menu+0x1f58>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d134      	bne.n	8003212 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80031a8:	4a64      	ldr	r2, [pc, #400]	; (800333c <menu+0x1f88>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	2002      	movs	r0, #2
 80031ae:	f004 fc6b 	bl	8007a88 <lcd_print>
 80031b2:	e02e      	b.n	8003212 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <menu+0x1f80>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d113      	bne.n	80031e4 <menu+0x1e30>
			if(dilSecim == 0){
 80031bc:	4b53      	ldr	r3, [pc, #332]	; (800330c <menu+0x1f58>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80031c4:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <menu+0x1f8c>)
 80031c6:	2101      	movs	r1, #1
 80031c8:	2002      	movs	r0, #2
 80031ca:	f004 fc5d 	bl	8007a88 <lcd_print>
 80031ce:	e020      	b.n	8003212 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031d0:	4b4e      	ldr	r3, [pc, #312]	; (800330c <menu+0x1f58>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d11c      	bne.n	8003212 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80031d8:	4a5a      	ldr	r2, [pc, #360]	; (8003344 <menu+0x1f90>)
 80031da:	2101      	movs	r1, #1
 80031dc:	2002      	movs	r0, #2
 80031de:	f004 fc53 	bl	8007a88 <lcd_print>
 80031e2:	e016      	b.n	8003212 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <menu+0x1f80>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d112      	bne.n	8003212 <menu+0x1e5e>
			if(dilSecim == 0) {
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <menu+0x1f58>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80031f4:	4a54      	ldr	r2, [pc, #336]	; (8003348 <menu+0x1f94>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	2002      	movs	r0, #2
 80031fa:	f004 fc45 	bl	8007a88 <lcd_print>
 80031fe:	e008      	b.n	8003212 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <menu+0x1f58>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d104      	bne.n	8003212 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003208:	4a50      	ldr	r2, [pc, #320]	; (800334c <menu+0x1f98>)
 800320a:	2101      	movs	r1, #1
 800320c:	2002      	movs	r0, #2
 800320e:	f004 fc3b 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003212:	2102      	movs	r1, #2
 8003214:	483f      	ldr	r0, [pc, #252]	; (8003314 <menu+0x1f60>)
 8003216:	f005 ff5d 	bl	80090d4 <HAL_GPIO_ReadPin>
 800321a:	4603      	mov	r3, r0
 800321c:	2b01      	cmp	r3, #1
 800321e:	d115      	bne.n	800324c <menu+0x1e98>
 8003220:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <menu+0x1f64>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	f083 0301 	eor.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00e      	beq.n	800324c <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800322e:	4b41      	ldr	r3, [pc, #260]	; (8003334 <menu+0x1f80>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <menu+0x1f80>)
 8003238:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800323a:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <menu+0x1f80>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d902      	bls.n	8003248 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003242:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <menu+0x1f80>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003248:	f001 fc7e 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800324c:	2104      	movs	r1, #4
 800324e:	4831      	ldr	r0, [pc, #196]	; (8003314 <menu+0x1f60>)
 8003250:	f005 ff40 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003254:	4603      	mov	r3, r0
 8003256:	2b01      	cmp	r3, #1
 8003258:	d115      	bne.n	8003286 <menu+0x1ed2>
 800325a:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <menu+0x1f64>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	f083 0301 	eor.w	r3, r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00e      	beq.n	8003286 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <menu+0x1f80>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	3b01      	subs	r3, #1
 800326e:	b2da      	uxtb	r2, r3
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <menu+0x1f80>)
 8003272:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003274:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <menu+0x1f80>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d902      	bls.n	8003282 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <menu+0x1f80>)
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003282:	f001 fc61 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003286:	2108      	movs	r1, #8
 8003288:	4822      	ldr	r0, [pc, #136]	; (8003314 <menu+0x1f60>)
 800328a:	f005 ff23 	bl	80090d4 <HAL_GPIO_ReadPin>
 800328e:	4603      	mov	r3, r0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d127      	bne.n	80032e4 <menu+0x1f30>
 8003294:	4b20      	ldr	r3, [pc, #128]	; (8003318 <menu+0x1f64>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	f083 0301 	eor.w	r3, r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d020      	beq.n	80032e4 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <menu+0x1f80>)
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <menu+0x1f6c>)
 80032a8:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <menu+0x1f80>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d003      	beq.n	80032ba <menu+0x1f06>
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <menu+0x1f80>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d106      	bne.n	80032c8 <menu+0x1f14>
				calismaSekli = 0;
 80032ba:	4b25      	ldr	r3, [pc, #148]	; (8003350 <menu+0x1f9c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <menu+0x1f9c>)
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <menu+0x1f6c>)
 80032c6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <menu+0x1f80>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <menu+0x1fa0>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80032d6:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <menu+0x1fa0>)
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <menu+0x1f6c>)
 80032dc:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <menu+0x1f70>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <menu+0x1f74>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b12      	cmp	r3, #18
 80032ea:	f040 80d5 	bne.w	8003498 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <menu+0x1f80>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d13c      	bne.n	8003370 <menu+0x1fbc>
			if(dilSecim == 0) {
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <menu+0x1f58>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d12e      	bne.n	800335c <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80032fe:	4a16      	ldr	r2, [pc, #88]	; (8003358 <menu+0x1fa4>)
 8003300:	2101      	movs	r1, #1
 8003302:	2001      	movs	r0, #1
 8003304:	f004 fbc0 	bl	8007a88 <lcd_print>
 8003308:	e048      	b.n	800339c <menu+0x1fe8>
 800330a:	bf00      	nop
 800330c:	20000221 	.word	0x20000221
 8003310:	0800d238 	.word	0x0800d238
 8003314:	40010800 	.word	0x40010800
 8003318:	2000022f 	.word	0x2000022f
 800331c:	2000020e 	.word	0x2000020e
 8003320:	2000012c 	.word	0x2000012c
 8003324:	2000022c 	.word	0x2000022c
 8003328:	20000200 	.word	0x20000200
 800332c:	0800d5b4 	.word	0x0800d5b4
 8003330:	0800d5c8 	.word	0x0800d5c8
 8003334:	2000020f 	.word	0x2000020f
 8003338:	0800d5dc 	.word	0x0800d5dc
 800333c:	0800d5ec 	.word	0x0800d5ec
 8003340:	0800d5fc 	.word	0x0800d5fc
 8003344:	0800d60c 	.word	0x0800d60c
 8003348:	0800d1c4 	.word	0x0800d1c4
 800334c:	0800d1d8 	.word	0x0800d1d8
 8003350:	20000201 	.word	0x20000201
 8003354:	20000212 	.word	0x20000212
 8003358:	0800d61c 	.word	0x0800d61c
			} else if(dilSecim == 1) {
 800335c:	4b7b      	ldr	r3, [pc, #492]	; (800354c <menu+0x2198>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d11b      	bne.n	800339c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003364:	4a7a      	ldr	r2, [pc, #488]	; (8003550 <menu+0x219c>)
 8003366:	2101      	movs	r1, #1
 8003368:	2001      	movs	r0, #1
 800336a:	f004 fb8d 	bl	8007a88 <lcd_print>
 800336e:	e015      	b.n	800339c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003370:	4b78      	ldr	r3, [pc, #480]	; (8003554 <menu+0x21a0>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d111      	bne.n	800339c <menu+0x1fe8>
			if(dilSecim == 0){
 8003378:	4b74      	ldr	r3, [pc, #464]	; (800354c <menu+0x2198>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003380:	4a75      	ldr	r2, [pc, #468]	; (8003558 <menu+0x21a4>)
 8003382:	2101      	movs	r1, #1
 8003384:	2001      	movs	r0, #1
 8003386:	f004 fb7f 	bl	8007a88 <lcd_print>
			}
			if(dilSecim == 1){
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <menu+0x2198>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d104      	bne.n	800339c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003392:	4a72      	ldr	r2, [pc, #456]	; (800355c <menu+0x21a8>)
 8003394:	2101      	movs	r1, #1
 8003396:	2001      	movs	r0, #1
 8003398:	f004 fb76 	bl	8007a88 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800339c:	4b70      	ldr	r3, [pc, #448]	; (8003560 <menu+0x21ac>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d113      	bne.n	80033cc <menu+0x2018>
			if(dilSecim == 0) {
 80033a4:	4b69      	ldr	r3, [pc, #420]	; (800354c <menu+0x2198>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80033ac:	4a6d      	ldr	r2, [pc, #436]	; (8003564 <menu+0x21b0>)
 80033ae:	2101      	movs	r1, #1
 80033b0:	2002      	movs	r0, #2
 80033b2:	f004 fb69 	bl	8007a88 <lcd_print>
 80033b6:	e020      	b.n	80033fa <menu+0x2046>
			} else if(dilSecim == 1){
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <menu+0x2198>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d11c      	bne.n	80033fa <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80033c0:	4a69      	ldr	r2, [pc, #420]	; (8003568 <menu+0x21b4>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	2002      	movs	r0, #2
 80033c6:	f004 fb5f 	bl	8007a88 <lcd_print>
 80033ca:	e016      	b.n	80033fa <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80033cc:	4b64      	ldr	r3, [pc, #400]	; (8003560 <menu+0x21ac>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d112      	bne.n	80033fa <menu+0x2046>
			if(dilSecim == 0){
 80033d4:	4b5d      	ldr	r3, [pc, #372]	; (800354c <menu+0x2198>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80033dc:	4a63      	ldr	r2, [pc, #396]	; (800356c <menu+0x21b8>)
 80033de:	2101      	movs	r1, #1
 80033e0:	2002      	movs	r0, #2
 80033e2:	f004 fb51 	bl	8007a88 <lcd_print>
 80033e6:	e008      	b.n	80033fa <menu+0x2046>
			} else if(dilSecim == 1){
 80033e8:	4b58      	ldr	r3, [pc, #352]	; (800354c <menu+0x2198>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d104      	bne.n	80033fa <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80033f0:	4a5f      	ldr	r2, [pc, #380]	; (8003570 <menu+0x21bc>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	2002      	movs	r0, #2
 80033f6:	f004 fb47 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fa:	2102      	movs	r1, #2
 80033fc:	485d      	ldr	r0, [pc, #372]	; (8003574 <menu+0x21c0>)
 80033fe:	f005 fe69 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d115      	bne.n	8003434 <menu+0x2080>
 8003408:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <menu+0x21c4>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00e      	beq.n	8003434 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003416:	4b52      	ldr	r3, [pc, #328]	; (8003560 <menu+0x21ac>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b50      	ldr	r3, [pc, #320]	; (8003560 <menu+0x21ac>)
 8003420:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003422:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <menu+0x21ac>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d902      	bls.n	8003430 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800342a:	4b4d      	ldr	r3, [pc, #308]	; (8003560 <menu+0x21ac>)
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003430:	f001 fb8a 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003434:	2104      	movs	r1, #4
 8003436:	484f      	ldr	r0, [pc, #316]	; (8003574 <menu+0x21c0>)
 8003438:	f005 fe4c 	bl	80090d4 <HAL_GPIO_ReadPin>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d115      	bne.n	800346e <menu+0x20ba>
 8003442:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <menu+0x21c4>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f083 0301 	eor.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003450:	4b43      	ldr	r3, [pc, #268]	; (8003560 <menu+0x21ac>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	3b01      	subs	r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4b41      	ldr	r3, [pc, #260]	; (8003560 <menu+0x21ac>)
 800345a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <menu+0x21ac>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003464:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <menu+0x21ac>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800346a:	f001 fb6d 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800346e:	2108      	movs	r1, #8
 8003470:	4840      	ldr	r0, [pc, #256]	; (8003574 <menu+0x21c0>)
 8003472:	f005 fe2f 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10d      	bne.n	8003498 <menu+0x20e4>
 800347c:	4b3e      	ldr	r3, [pc, #248]	; (8003578 <menu+0x21c4>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800348a:	4b35      	ldr	r3, [pc, #212]	; (8003560 <menu+0x21ac>)
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <menu+0x21c8>)
 8003490:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003492:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <menu+0x21cc>)
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <menu+0x21d0>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b13      	cmp	r3, #19
 800349e:	f040 80d5 	bne.w	800364c <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80034a2:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <menu+0x21a0>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d113      	bne.n	80034d2 <menu+0x211e>
			if(dilSecim == 0) {
 80034aa:	4b28      	ldr	r3, [pc, #160]	; (800354c <menu+0x2198>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80034b2:	4a35      	ldr	r2, [pc, #212]	; (8003588 <menu+0x21d4>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	2001      	movs	r0, #1
 80034b8:	f004 fae6 	bl	8007a88 <lcd_print>
 80034bc:	e01f      	b.n	80034fe <menu+0x214a>
			} else if(dilSecim == 1) {
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <menu+0x2198>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d11b      	bne.n	80034fe <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80034c6:	4a31      	ldr	r2, [pc, #196]	; (800358c <menu+0x21d8>)
 80034c8:	2101      	movs	r1, #1
 80034ca:	2001      	movs	r0, #1
 80034cc:	f004 fadc 	bl	8007a88 <lcd_print>
 80034d0:	e015      	b.n	80034fe <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <menu+0x21a0>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d111      	bne.n	80034fe <menu+0x214a>
			if(dilSecim == 0) {
 80034da:	4b1c      	ldr	r3, [pc, #112]	; (800354c <menu+0x2198>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80034e2:	4a2b      	ldr	r2, [pc, #172]	; (8003590 <menu+0x21dc>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	2001      	movs	r0, #1
 80034e8:	f004 face 	bl	8007a88 <lcd_print>
			}
			if(dilSecim == 1) {
 80034ec:	4b17      	ldr	r3, [pc, #92]	; (800354c <menu+0x2198>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d104      	bne.n	80034fe <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80034f4:	4a27      	ldr	r2, [pc, #156]	; (8003594 <menu+0x21e0>)
 80034f6:	2101      	movs	r1, #1
 80034f8:	2001      	movs	r0, #1
 80034fa:	f004 fac5 	bl	8007a88 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <menu+0x21e4>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <menu+0x217a>
			if(dilSecim == 0) {
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <menu+0x2198>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <menu+0x21b0>)
 8003510:	2101      	movs	r1, #1
 8003512:	2002      	movs	r0, #2
 8003514:	f004 fab8 	bl	8007a88 <lcd_print>
 8003518:	e049      	b.n	80035ae <menu+0x21fa>
			} else if(dilSecim == 1) {
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <menu+0x2198>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d145      	bne.n	80035ae <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003522:	4a11      	ldr	r2, [pc, #68]	; (8003568 <menu+0x21b4>)
 8003524:	2101      	movs	r1, #1
 8003526:	2002      	movs	r0, #2
 8003528:	f004 faae 	bl	8007a88 <lcd_print>
 800352c:	e03f      	b.n	80035ae <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <menu+0x21e4>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d13b      	bne.n	80035ae <menu+0x21fa>
			if(dilSecim == 0) {
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <menu+0x2198>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d12e      	bne.n	800359c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800353e:	4a0b      	ldr	r2, [pc, #44]	; (800356c <menu+0x21b8>)
 8003540:	2101      	movs	r1, #1
 8003542:	2002      	movs	r0, #2
 8003544:	f004 faa0 	bl	8007a88 <lcd_print>
 8003548:	e031      	b.n	80035ae <menu+0x21fa>
 800354a:	bf00      	nop
 800354c:	20000221 	.word	0x20000221
 8003550:	0800d630 	.word	0x0800d630
 8003554:	2000020f 	.word	0x2000020f
 8003558:	0800d640 	.word	0x0800d640
 800355c:	0800d654 	.word	0x0800d654
 8003560:	20000210 	.word	0x20000210
 8003564:	0800d1c4 	.word	0x0800d1c4
 8003568:	0800d1d8 	.word	0x0800d1d8
 800356c:	0800d224 	.word	0x0800d224
 8003570:	0800d238 	.word	0x0800d238
 8003574:	40010800 	.word	0x40010800
 8003578:	2000022f 	.word	0x2000022f
 800357c:	2000012c 	.word	0x2000012c
 8003580:	2000022c 	.word	0x2000022c
 8003584:	20000200 	.word	0x20000200
 8003588:	0800d668 	.word	0x0800d668
 800358c:	0800d67c 	.word	0x0800d67c
 8003590:	0800d690 	.word	0x0800d690
 8003594:	0800d6a4 	.word	0x0800d6a4
 8003598:	20000211 	.word	0x20000211
			} else if(dilSecim == 1) {
 800359c:	4b90      	ldr	r3, [pc, #576]	; (80037e0 <menu+0x242c>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d104      	bne.n	80035ae <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80035a4:	4a8f      	ldr	r2, [pc, #572]	; (80037e4 <menu+0x2430>)
 80035a6:	2101      	movs	r1, #1
 80035a8:	2002      	movs	r0, #2
 80035aa:	f004 fa6d 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ae:	2102      	movs	r1, #2
 80035b0:	488d      	ldr	r0, [pc, #564]	; (80037e8 <menu+0x2434>)
 80035b2:	f005 fd8f 	bl	80090d4 <HAL_GPIO_ReadPin>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d115      	bne.n	80035e8 <menu+0x2234>
 80035bc:	4b8b      	ldr	r3, [pc, #556]	; (80037ec <menu+0x2438>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00e      	beq.n	80035e8 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80035ca:	4b89      	ldr	r3, [pc, #548]	; (80037f0 <menu+0x243c>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b87      	ldr	r3, [pc, #540]	; (80037f0 <menu+0x243c>)
 80035d4:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80035d6:	4b86      	ldr	r3, [pc, #536]	; (80037f0 <menu+0x243c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d902      	bls.n	80035e4 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80035de:	4b84      	ldr	r3, [pc, #528]	; (80037f0 <menu+0x243c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035e4:	f001 fab0 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e8:	2104      	movs	r1, #4
 80035ea:	487f      	ldr	r0, [pc, #508]	; (80037e8 <menu+0x2434>)
 80035ec:	f005 fd72 	bl	80090d4 <HAL_GPIO_ReadPin>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d115      	bne.n	8003622 <menu+0x226e>
 80035f6:	4b7d      	ldr	r3, [pc, #500]	; (80037ec <menu+0x2438>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	f083 0301 	eor.w	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003604:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <menu+0x243c>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	3b01      	subs	r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	4b78      	ldr	r3, [pc, #480]	; (80037f0 <menu+0x243c>)
 800360e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003610:	4b77      	ldr	r3, [pc, #476]	; (80037f0 <menu+0x243c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003618:	4b75      	ldr	r3, [pc, #468]	; (80037f0 <menu+0x243c>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800361e:	f001 fa93 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003622:	2108      	movs	r1, #8
 8003624:	4870      	ldr	r0, [pc, #448]	; (80037e8 <menu+0x2434>)
 8003626:	f005 fd55 	bl	80090d4 <HAL_GPIO_ReadPin>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10d      	bne.n	800364c <menu+0x2298>
 8003630:	4b6e      	ldr	r3, [pc, #440]	; (80037ec <menu+0x2438>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	f083 0301 	eor.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800363e:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <menu+0x243c>)
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <menu+0x2440>)
 8003644:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003646:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <menu+0x2444>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800364c:	4b6b      	ldr	r3, [pc, #428]	; (80037fc <menu+0x2448>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b14      	cmp	r3, #20
 8003652:	f040 80b5 	bne.w	80037c0 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003656:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <menu+0x244c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d113      	bne.n	8003686 <menu+0x22d2>
			if(dilSecim == 0) {
 800365e:	4b60      	ldr	r3, [pc, #384]	; (80037e0 <menu+0x242c>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003666:	4a67      	ldr	r2, [pc, #412]	; (8003804 <menu+0x2450>)
 8003668:	2101      	movs	r1, #1
 800366a:	2001      	movs	r0, #1
 800366c:	f004 fa0c 	bl	8007a88 <lcd_print>
 8003670:	e020      	b.n	80036b4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <menu+0x242c>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d11c      	bne.n	80036b4 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800367a:	4a63      	ldr	r2, [pc, #396]	; (8003808 <menu+0x2454>)
 800367c:	2101      	movs	r1, #1
 800367e:	2001      	movs	r0, #1
 8003680:	f004 fa02 	bl	8007a88 <lcd_print>
 8003684:	e016      	b.n	80036b4 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003686:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <menu+0x244c>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d112      	bne.n	80036b4 <menu+0x2300>
			if(dilSecim == 0) {
 800368e:	4b54      	ldr	r3, [pc, #336]	; (80037e0 <menu+0x242c>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003696:	4a5d      	ldr	r2, [pc, #372]	; (800380c <menu+0x2458>)
 8003698:	2101      	movs	r1, #1
 800369a:	2001      	movs	r0, #1
 800369c:	f004 f9f4 	bl	8007a88 <lcd_print>
 80036a0:	e008      	b.n	80036b4 <menu+0x2300>
			} else if(dilSecim == 1) {
 80036a2:	4b4f      	ldr	r3, [pc, #316]	; (80037e0 <menu+0x242c>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d104      	bne.n	80036b4 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80036aa:	4a59      	ldr	r2, [pc, #356]	; (8003810 <menu+0x245c>)
 80036ac:	2101      	movs	r1, #1
 80036ae:	2001      	movs	r0, #1
 80036b0:	f004 f9ea 	bl	8007a88 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80036b4:	4b57      	ldr	r3, [pc, #348]	; (8003814 <menu+0x2460>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d113      	bne.n	80036e4 <menu+0x2330>
			if(dilSecim == 0) {
 80036bc:	4b48      	ldr	r3, [pc, #288]	; (80037e0 <menu+0x242c>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <menu+0x2464>)
 80036c6:	2101      	movs	r1, #1
 80036c8:	2002      	movs	r0, #2
 80036ca:	f004 f9dd 	bl	8007a88 <lcd_print>
 80036ce:	e020      	b.n	8003712 <menu+0x235e>
			} else if(dilSecim == 1) {
 80036d0:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <menu+0x242c>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d11c      	bne.n	8003712 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80036d8:	4a50      	ldr	r2, [pc, #320]	; (800381c <menu+0x2468>)
 80036da:	2101      	movs	r1, #1
 80036dc:	2002      	movs	r0, #2
 80036de:	f004 f9d3 	bl	8007a88 <lcd_print>
 80036e2:	e016      	b.n	8003712 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80036e4:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <menu+0x2460>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d112      	bne.n	8003712 <menu+0x235e>
			if(dilSecim == 0) {
 80036ec:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <menu+0x242c>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d105      	bne.n	8003700 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80036f4:	4a4a      	ldr	r2, [pc, #296]	; (8003820 <menu+0x246c>)
 80036f6:	2101      	movs	r1, #1
 80036f8:	2002      	movs	r0, #2
 80036fa:	f004 f9c5 	bl	8007a88 <lcd_print>
 80036fe:	e008      	b.n	8003712 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003700:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <menu+0x242c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d104      	bne.n	8003712 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003708:	4a46      	ldr	r2, [pc, #280]	; (8003824 <menu+0x2470>)
 800370a:	2101      	movs	r1, #1
 800370c:	2002      	movs	r0, #2
 800370e:	f004 f9bb 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003712:	2102      	movs	r1, #2
 8003714:	4834      	ldr	r0, [pc, #208]	; (80037e8 <menu+0x2434>)
 8003716:	f005 fcdd 	bl	80090d4 <HAL_GPIO_ReadPin>
 800371a:	4603      	mov	r3, r0
 800371c:	2b01      	cmp	r3, #1
 800371e:	d119      	bne.n	8003754 <menu+0x23a0>
 8003720:	4b32      	ldr	r3, [pc, #200]	; (80037ec <menu+0x2438>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d012      	beq.n	8003754 <menu+0x23a0>
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <menu+0x244c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d10e      	bne.n	8003754 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003736:	4b37      	ldr	r3, [pc, #220]	; (8003814 <menu+0x2460>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b35      	ldr	r3, [pc, #212]	; (8003814 <menu+0x2460>)
 8003740:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003742:	4b34      	ldr	r3, [pc, #208]	; (8003814 <menu+0x2460>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d902      	bls.n	8003750 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800374a:	4b32      	ldr	r3, [pc, #200]	; (8003814 <menu+0x2460>)
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003750:	f001 f9fa 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003754:	2104      	movs	r1, #4
 8003756:	4824      	ldr	r0, [pc, #144]	; (80037e8 <menu+0x2434>)
 8003758:	f005 fcbc 	bl	80090d4 <HAL_GPIO_ReadPin>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d119      	bne.n	8003796 <menu+0x23e2>
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <menu+0x2438>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	f083 0301 	eor.w	r3, r3, #1
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d012      	beq.n	8003796 <menu+0x23e2>
 8003770:	4b23      	ldr	r3, [pc, #140]	; (8003800 <menu+0x244c>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d10e      	bne.n	8003796 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003778:	4b26      	ldr	r3, [pc, #152]	; (8003814 <menu+0x2460>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	3b01      	subs	r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <menu+0x2460>)
 8003782:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003784:	4b23      	ldr	r3, [pc, #140]	; (8003814 <menu+0x2460>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <menu+0x2460>)
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003792:	f001 f9d9 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003796:	2108      	movs	r1, #8
 8003798:	4813      	ldr	r0, [pc, #76]	; (80037e8 <menu+0x2434>)
 800379a:	f005 fc9b 	bl	80090d4 <HAL_GPIO_ReadPin>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10d      	bne.n	80037c0 <menu+0x240c>
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <menu+0x2438>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d006      	beq.n	80037c0 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <menu+0x2460>)
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <menu+0x2440>)
 80037b8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <menu+0x2444>)
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <menu+0x2448>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b15      	cmp	r3, #21
 80037c6:	f040 80c2 	bne.w	800394e <menu+0x259a>
		if(dilSecim == 0) {
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <menu+0x242c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d12c      	bne.n	800382c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <menu+0x2474>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	2001      	movs	r0, #1
 80037d8:	f004 f956 	bl	8007a88 <lcd_print>
 80037dc:	e02f      	b.n	800383e <menu+0x248a>
 80037de:	bf00      	nop
 80037e0:	20000221 	.word	0x20000221
 80037e4:	0800d238 	.word	0x0800d238
 80037e8:	40010800 	.word	0x40010800
 80037ec:	2000022f 	.word	0x2000022f
 80037f0:	20000211 	.word	0x20000211
 80037f4:	2000012c 	.word	0x2000012c
 80037f8:	2000022c 	.word	0x2000022c
 80037fc:	20000200 	.word	0x20000200
 8003800:	2000020f 	.word	0x2000020f
 8003804:	0800d6b8 	.word	0x0800d6b8
 8003808:	0800d6cc 	.word	0x0800d6cc
 800380c:	0800d6e0 	.word	0x0800d6e0
 8003810:	0800d6f4 	.word	0x0800d6f4
 8003814:	20000212 	.word	0x20000212
 8003818:	0800d708 	.word	0x0800d708
 800381c:	0800d71c 	.word	0x0800d71c
 8003820:	0800d72c 	.word	0x0800d72c
 8003824:	0800d740 	.word	0x0800d740
 8003828:	0800d750 	.word	0x0800d750
		} else if(dilSecim == 1) {
 800382c:	4b9c      	ldr	r3, [pc, #624]	; (8003aa0 <menu+0x26ec>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d104      	bne.n	800383e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003834:	4a9b      	ldr	r2, [pc, #620]	; (8003aa4 <menu+0x26f0>)
 8003836:	2101      	movs	r1, #1
 8003838:	2001      	movs	r0, #1
 800383a:	f004 f925 	bl	8007a88 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800383e:	4b9a      	ldr	r3, [pc, #616]	; (8003aa8 <menu+0x26f4>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d112      	bne.n	800386c <menu+0x24b8>
			if(dilSecim == 0) {
 8003846:	4b96      	ldr	r3, [pc, #600]	; (8003aa0 <menu+0x26ec>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800384e:	4a97      	ldr	r2, [pc, #604]	; (8003aac <menu+0x26f8>)
 8003850:	2101      	movs	r1, #1
 8003852:	2002      	movs	r0, #2
 8003854:	f004 f918 	bl	8007a88 <lcd_print>
			}
			if(dilSecim == 1) {
 8003858:	4b91      	ldr	r3, [pc, #580]	; (8003aa0 <menu+0x26ec>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d11c      	bne.n	800389a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003860:	4a93      	ldr	r2, [pc, #588]	; (8003ab0 <menu+0x26fc>)
 8003862:	2101      	movs	r1, #1
 8003864:	2002      	movs	r0, #2
 8003866:	f004 f90f 	bl	8007a88 <lcd_print>
 800386a:	e016      	b.n	800389a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 800386c:	4b8e      	ldr	r3, [pc, #568]	; (8003aa8 <menu+0x26f4>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d112      	bne.n	800389a <menu+0x24e6>
			if(dilSecim == 0) {
 8003874:	4b8a      	ldr	r3, [pc, #552]	; (8003aa0 <menu+0x26ec>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 800387c:	4a8d      	ldr	r2, [pc, #564]	; (8003ab4 <menu+0x2700>)
 800387e:	2101      	movs	r1, #1
 8003880:	2002      	movs	r0, #2
 8003882:	f004 f901 	bl	8007a88 <lcd_print>
 8003886:	e008      	b.n	800389a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003888:	4b85      	ldr	r3, [pc, #532]	; (8003aa0 <menu+0x26ec>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d104      	bne.n	800389a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003890:	4a89      	ldr	r2, [pc, #548]	; (8003ab8 <menu+0x2704>)
 8003892:	2101      	movs	r1, #1
 8003894:	2002      	movs	r0, #2
 8003896:	f004 f8f7 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800389a:	2102      	movs	r1, #2
 800389c:	4887      	ldr	r0, [pc, #540]	; (8003abc <menu+0x2708>)
 800389e:	f005 fc19 	bl	80090d4 <HAL_GPIO_ReadPin>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d115      	bne.n	80038d4 <menu+0x2520>
 80038a8:	4b85      	ldr	r3, [pc, #532]	; (8003ac0 <menu+0x270c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00e      	beq.n	80038d4 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80038b6:	4b7c      	ldr	r3, [pc, #496]	; (8003aa8 <menu+0x26f4>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4b7a      	ldr	r3, [pc, #488]	; (8003aa8 <menu+0x26f4>)
 80038c0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80038c2:	4b79      	ldr	r3, [pc, #484]	; (8003aa8 <menu+0x26f4>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d902      	bls.n	80038d0 <menu+0x251c>
				platformSilindirTipi = 0;
 80038ca:	4b77      	ldr	r3, [pc, #476]	; (8003aa8 <menu+0x26f4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038d0:	f001 f93a 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d4:	2104      	movs	r1, #4
 80038d6:	4879      	ldr	r0, [pc, #484]	; (8003abc <menu+0x2708>)
 80038d8:	f005 fbfc 	bl	80090d4 <HAL_GPIO_ReadPin>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d115      	bne.n	800390e <menu+0x255a>
 80038e2:	4b77      	ldr	r3, [pc, #476]	; (8003ac0 <menu+0x270c>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	f083 0301 	eor.w	r3, r3, #1
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80038f0:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <menu+0x26f4>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	4b6b      	ldr	r3, [pc, #428]	; (8003aa8 <menu+0x26f4>)
 80038fa:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80038fc:	4b6a      	ldr	r3, [pc, #424]	; (8003aa8 <menu+0x26f4>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <menu+0x26f4>)
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800390a:	f001 f91d 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800390e:	2108      	movs	r1, #8
 8003910:	486a      	ldr	r0, [pc, #424]	; (8003abc <menu+0x2708>)
 8003912:	f005 fbdf 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d118      	bne.n	800394e <menu+0x259a>
 800391c:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <menu+0x270c>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d011      	beq.n	800394e <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800392a:	4b5f      	ldr	r3, [pc, #380]	; (8003aa8 <menu+0x26f4>)
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <menu+0x2710>)
 8003930:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003932:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <menu+0x26f4>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d106      	bne.n	8003948 <menu+0x2594>
				altLimit = 1;
 800393a:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <menu+0x2714>)
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003940:	4b61      	ldr	r3, [pc, #388]	; (8003ac8 <menu+0x2714>)
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <menu+0x2710>)
 8003946:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003948:	4b60      	ldr	r3, [pc, #384]	; (8003acc <menu+0x2718>)
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800394e:	4b60      	ldr	r3, [pc, #384]	; (8003ad0 <menu+0x271c>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b16      	cmp	r3, #22
 8003954:	f040 8081 	bne.w	8003a5a <menu+0x26a6>
		if(dilSecim == 0) {
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <menu+0x26ec>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003960:	4a5c      	ldr	r2, [pc, #368]	; (8003ad4 <menu+0x2720>)
 8003962:	2101      	movs	r1, #1
 8003964:	2001      	movs	r0, #1
 8003966:	f004 f88f 	bl	8007a88 <lcd_print>
 800396a:	e008      	b.n	800397e <menu+0x25ca>
		} else if(dilSecim == 1) {
 800396c:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <menu+0x26ec>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d104      	bne.n	800397e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <menu+0x2724>)
 8003976:	2101      	movs	r1, #1
 8003978:	2001      	movs	r0, #1
 800397a:	f004 f885 	bl	8007a88 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800397e:	4b48      	ldr	r3, [pc, #288]	; (8003aa0 <menu+0x26ec>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003986:	4a55      	ldr	r2, [pc, #340]	; (8003adc <menu+0x2728>)
 8003988:	2101      	movs	r1, #1
 800398a:	2002      	movs	r0, #2
 800398c:	f004 f87c 	bl	8007a88 <lcd_print>
 8003990:	e008      	b.n	80039a4 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003992:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <menu+0x26ec>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d104      	bne.n	80039a4 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800399a:	4a51      	ldr	r2, [pc, #324]	; (8003ae0 <menu+0x272c>)
 800399c:	2101      	movs	r1, #1
 800399e:	2002      	movs	r0, #2
 80039a0:	f004 f872 	bl	8007a88 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80039a4:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <menu+0x2730>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	220a      	movs	r2, #10
 80039aa:	494f      	ldr	r1, [pc, #316]	; (8003ae8 <menu+0x2734>)
 80039ac:	4618      	mov	r0, r3
 80039ae:	f008 fc19 	bl	800c1e4 <itoa>
		lcd_print(2,16,snum);
 80039b2:	4a4d      	ldr	r2, [pc, #308]	; (8003ae8 <menu+0x2734>)
 80039b4:	2110      	movs	r1, #16
 80039b6:	2002      	movs	r0, #2
 80039b8:	f004 f866 	bl	8007a88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039bc:	2102      	movs	r1, #2
 80039be:	483f      	ldr	r0, [pc, #252]	; (8003abc <menu+0x2708>)
 80039c0:	f005 fb88 	bl	80090d4 <HAL_GPIO_ReadPin>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d115      	bne.n	80039f6 <menu+0x2642>
 80039ca:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <menu+0x270c>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	f083 0301 	eor.w	r3, r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80039d8:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <menu+0x2730>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	4b40      	ldr	r3, [pc, #256]	; (8003ae4 <menu+0x2730>)
 80039e2:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80039e4:	4b3f      	ldr	r3, [pc, #252]	; (8003ae4 <menu+0x2730>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d902      	bls.n	80039f2 <menu+0x263e>
				yukariValfTmr = 0;
 80039ec:	4b3d      	ldr	r3, [pc, #244]	; (8003ae4 <menu+0x2730>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039f2:	f001 f8a9 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f6:	2104      	movs	r1, #4
 80039f8:	4830      	ldr	r0, [pc, #192]	; (8003abc <menu+0x2708>)
 80039fa:	f005 fb6b 	bl	80090d4 <HAL_GPIO_ReadPin>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d115      	bne.n	8003a30 <menu+0x267c>
 8003a04:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <menu+0x270c>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	f083 0301 	eor.w	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003a12:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <menu+0x2730>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <menu+0x2730>)
 8003a1c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003a1e:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <menu+0x2730>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003a26:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <menu+0x2730>)
 8003a28:	2205      	movs	r2, #5
 8003a2a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a2c:	f001 f88c 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a30:	2108      	movs	r1, #8
 8003a32:	4822      	ldr	r0, [pc, #136]	; (8003abc <menu+0x2708>)
 8003a34:	f005 fb4e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10d      	bne.n	8003a5a <menu+0x26a6>
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <menu+0x270c>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	f083 0301 	eor.w	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d006      	beq.n	8003a5a <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <menu+0x2730>)
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <menu+0x2710>)
 8003a52:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <menu+0x2718>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <menu+0x271c>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b17      	cmp	r3, #23
 8003a60:	f040 80ac 	bne.w	8003bbc <menu+0x2808>
		if(dilSecim == 0) {
 8003a64:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <menu+0x26ec>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <menu+0x2738>)
 8003a6e:	2101      	movs	r1, #1
 8003a70:	2001      	movs	r0, #1
 8003a72:	f004 f809 	bl	8007a88 <lcd_print>
 8003a76:	e008      	b.n	8003a8a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <menu+0x26ec>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d104      	bne.n	8003a8a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003a80:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <menu+0x273c>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	2001      	movs	r0, #1
 8003a86:	f003 ffff 	bl	8007a88 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <menu+0x26ec>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d130      	bne.n	8003af4 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <menu+0x2728>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	2002      	movs	r0, #2
 8003a98:	f003 fff6 	bl	8007a88 <lcd_print>
 8003a9c:	e033      	b.n	8003b06 <menu+0x2752>
 8003a9e:	bf00      	nop
 8003aa0:	20000221 	.word	0x20000221
 8003aa4:	0800d764 	.word	0x0800d764
 8003aa8:	20000213 	.word	0x20000213
 8003aac:	0800d708 	.word	0x0800d708
 8003ab0:	0800d71c 	.word	0x0800d71c
 8003ab4:	0800d72c 	.word	0x0800d72c
 8003ab8:	0800d740 	.word	0x0800d740
 8003abc:	40010800 	.word	0x40010800
 8003ac0:	2000022f 	.word	0x2000022f
 8003ac4:	2000012c 	.word	0x2000012c
 8003ac8:	20000206 	.word	0x20000206
 8003acc:	2000022c 	.word	0x2000022c
 8003ad0:	20000200 	.word	0x20000200
 8003ad4:	0800d774 	.word	0x0800d774
 8003ad8:	0800d788 	.word	0x0800d788
 8003adc:	0800d428 	.word	0x0800d428
 8003ae0:	0800d79c 	.word	0x0800d79c
 8003ae4:	20000214 	.word	0x20000214
 8003ae8:	2000019c 	.word	0x2000019c
 8003aec:	0800d7ac 	.word	0x0800d7ac
 8003af0:	0800d7c0 	.word	0x0800d7c0
			} else if(dilSecim == 1) {
 8003af4:	4b98      	ldr	r3, [pc, #608]	; (8003d58 <menu+0x29a4>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d104      	bne.n	8003b06 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003afc:	4a97      	ldr	r2, [pc, #604]	; (8003d5c <menu+0x29a8>)
 8003afe:	2101      	movs	r1, #1
 8003b00:	2002      	movs	r0, #2
 8003b02:	f003 ffc1 	bl	8007a88 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003b06:	4b96      	ldr	r3, [pc, #600]	; (8003d60 <menu+0x29ac>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	220a      	movs	r2, #10
 8003b0c:	4995      	ldr	r1, [pc, #596]	; (8003d64 <menu+0x29b0>)
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f008 fb68 	bl	800c1e4 <itoa>
		lcd_print(2,16,snum);
 8003b14:	4a93      	ldr	r2, [pc, #588]	; (8003d64 <menu+0x29b0>)
 8003b16:	2110      	movs	r1, #16
 8003b18:	2002      	movs	r0, #2
 8003b1a:	f003 ffb5 	bl	8007a88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4891      	ldr	r0, [pc, #580]	; (8003d68 <menu+0x29b4>)
 8003b22:	f005 fad7 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d115      	bne.n	8003b58 <menu+0x27a4>
 8003b2c:	4b8f      	ldr	r3, [pc, #572]	; (8003d6c <menu+0x29b8>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	f083 0301 	eor.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00e      	beq.n	8003b58 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003b3a:	4b89      	ldr	r3, [pc, #548]	; (8003d60 <menu+0x29ac>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4b87      	ldr	r3, [pc, #540]	; (8003d60 <menu+0x29ac>)
 8003b44:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003b46:	4b86      	ldr	r3, [pc, #536]	; (8003d60 <menu+0x29ac>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	d902      	bls.n	8003b54 <menu+0x27a0>
				asagiValfTmr = 0;
 8003b4e:	4b84      	ldr	r3, [pc, #528]	; (8003d60 <menu+0x29ac>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b54:	f000 fff8 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b58:	2104      	movs	r1, #4
 8003b5a:	4883      	ldr	r0, [pc, #524]	; (8003d68 <menu+0x29b4>)
 8003b5c:	f005 faba 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d115      	bne.n	8003b92 <menu+0x27de>
 8003b66:	4b81      	ldr	r3, [pc, #516]	; (8003d6c <menu+0x29b8>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	f083 0301 	eor.w	r3, r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b74:	4b7a      	ldr	r3, [pc, #488]	; (8003d60 <menu+0x29ac>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <menu+0x29ac>)
 8003b7e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003b80:	4b77      	ldr	r3, [pc, #476]	; (8003d60 <menu+0x29ac>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b06      	cmp	r3, #6
 8003b86:	d902      	bls.n	8003b8e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003b88:	4b75      	ldr	r3, [pc, #468]	; (8003d60 <menu+0x29ac>)
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b8e:	f000 ffdb 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b92:	2108      	movs	r1, #8
 8003b94:	4874      	ldr	r0, [pc, #464]	; (8003d68 <menu+0x29b4>)
 8003b96:	f005 fa9d 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10d      	bne.n	8003bbc <menu+0x2808>
 8003ba0:	4b72      	ldr	r3, [pc, #456]	; (8003d6c <menu+0x29b8>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	f083 0301 	eor.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003bae:	4b6c      	ldr	r3, [pc, #432]	; (8003d60 <menu+0x29ac>)
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <menu+0x29bc>)
 8003bb4:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003bb6:	4b6f      	ldr	r3, [pc, #444]	; (8003d74 <menu+0x29c0>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003bbc:	4b6e      	ldr	r3, [pc, #440]	; (8003d78 <menu+0x29c4>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b18      	cmp	r3, #24
 8003bc2:	f040 809d 	bne.w	8003d00 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <menu+0x29c8>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d113      	bne.n	8003bf6 <menu+0x2842>
			if(dilSecim == 0) {
 8003bce:	4b62      	ldr	r3, [pc, #392]	; (8003d58 <menu+0x29a4>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d105      	bne.n	8003be2 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003bd6:	4a6a      	ldr	r2, [pc, #424]	; (8003d80 <menu+0x29cc>)
 8003bd8:	2101      	movs	r1, #1
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f003 ff54 	bl	8007a88 <lcd_print>
 8003be0:	e020      	b.n	8003c24 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003be2:	4b5d      	ldr	r3, [pc, #372]	; (8003d58 <menu+0x29a4>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d11c      	bne.n	8003c24 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003bea:	4a66      	ldr	r2, [pc, #408]	; (8003d84 <menu+0x29d0>)
 8003bec:	2101      	movs	r1, #1
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f003 ff4a 	bl	8007a88 <lcd_print>
 8003bf4:	e016      	b.n	8003c24 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003bf6:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <menu+0x29c8>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d112      	bne.n	8003c24 <menu+0x2870>
			if(dilSecim == 0) {
 8003bfe:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <menu+0x29a4>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003c06:	4a60      	ldr	r2, [pc, #384]	; (8003d88 <menu+0x29d4>)
 8003c08:	2101      	movs	r1, #1
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f003 ff3c 	bl	8007a88 <lcd_print>
 8003c10:	e008      	b.n	8003c24 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c12:	4b51      	ldr	r3, [pc, #324]	; (8003d58 <menu+0x29a4>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d104      	bne.n	8003c24 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003c1a:	4a5c      	ldr	r2, [pc, #368]	; (8003d8c <menu+0x29d8>)
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f003 ff32 	bl	8007a88 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003c24:	4b4c      	ldr	r3, [pc, #304]	; (8003d58 <menu+0x29a4>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <menu+0x29dc>)
 8003c2e:	2101      	movs	r1, #1
 8003c30:	2002      	movs	r0, #2
 8003c32:	f003 ff29 	bl	8007a88 <lcd_print>
 8003c36:	e008      	b.n	8003c4a <menu+0x2896>
			} else if(dilSecim == 1) {
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <menu+0x29a4>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d104      	bne.n	8003c4a <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003c40:	4a46      	ldr	r2, [pc, #280]	; (8003d5c <menu+0x29a8>)
 8003c42:	2101      	movs	r1, #1
 8003c44:	2002      	movs	r0, #2
 8003c46:	f003 ff1f 	bl	8007a88 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003c4a:	4b52      	ldr	r3, [pc, #328]	; (8003d94 <menu+0x29e0>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	220a      	movs	r2, #10
 8003c50:	4944      	ldr	r1, [pc, #272]	; (8003d64 <menu+0x29b0>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	f008 fac6 	bl	800c1e4 <itoa>
		lcd_print(2, 16, snum);
 8003c58:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <menu+0x29b0>)
 8003c5a:	2110      	movs	r1, #16
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f003 ff13 	bl	8007a88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c62:	2102      	movs	r1, #2
 8003c64:	4840      	ldr	r0, [pc, #256]	; (8003d68 <menu+0x29b4>)
 8003c66:	f005 fa35 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d115      	bne.n	8003c9c <menu+0x28e8>
 8003c70:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <menu+0x29b8>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f083 0301 	eor.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00e      	beq.n	8003c9c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003c7e:	4b45      	ldr	r3, [pc, #276]	; (8003d94 <menu+0x29e0>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b43      	ldr	r3, [pc, #268]	; (8003d94 <menu+0x29e0>)
 8003c88:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003c8a:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <menu+0x29e0>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d902      	bls.n	8003c98 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003c92:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <menu+0x29e0>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c98:	f000 ff56 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c9c:	2104      	movs	r1, #4
 8003c9e:	4832      	ldr	r0, [pc, #200]	; (8003d68 <menu+0x29b4>)
 8003ca0:	f005 fa18 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d115      	bne.n	8003cd6 <menu+0x2922>
 8003caa:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <menu+0x29b8>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	f083 0301 	eor.w	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <menu+0x29e0>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <menu+0x29e0>)
 8003cc2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003cc4:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <menu+0x29e0>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	d902      	bls.n	8003cd2 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <menu+0x29e0>)
 8003cce:	2205      	movs	r2, #5
 8003cd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cd2:	f000 ff39 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd6:	2108      	movs	r1, #8
 8003cd8:	4823      	ldr	r0, [pc, #140]	; (8003d68 <menu+0x29b4>)
 8003cda:	f005 f9fb 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d10d      	bne.n	8003d00 <menu+0x294c>
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <menu+0x29b8>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f083 0301 	eor.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003cf2:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <menu+0x29e0>)
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <menu+0x29bc>)
 8003cf8:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <menu+0x29c0>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <menu+0x29c4>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b19      	cmp	r3, #25
 8003d06:	f040 80c4 	bne.w	8003e92 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003d0a:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <menu+0x29c8>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d113      	bne.n	8003d3a <menu+0x2986>
			if(dilSecim == 0) {
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <menu+0x29a4>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d105      	bne.n	8003d26 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003d1a:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <menu+0x29e4>)
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	2001      	movs	r0, #1
 8003d20:	f003 feb2 	bl	8007a88 <lcd_print>
 8003d24:	e047      	b.n	8003db6 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <menu+0x29a4>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d143      	bne.n	8003db6 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003d2e:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <menu+0x29e8>)
 8003d30:	2101      	movs	r1, #1
 8003d32:	2001      	movs	r0, #1
 8003d34:	f003 fea8 	bl	8007a88 <lcd_print>
 8003d38:	e03d      	b.n	8003db6 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <menu+0x29c8>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d139      	bne.n	8003db6 <menu+0x2a02>
			if(dilSecim == 0) {
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <menu+0x29a4>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d12c      	bne.n	8003da4 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <menu+0x29ec>)
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f003 fe9a 	bl	8007a88 <lcd_print>
 8003d54:	e02f      	b.n	8003db6 <menu+0x2a02>
 8003d56:	bf00      	nop
 8003d58:	20000221 	.word	0x20000221
 8003d5c:	0800d79c 	.word	0x0800d79c
 8003d60:	20000215 	.word	0x20000215
 8003d64:	2000019c 	.word	0x2000019c
 8003d68:	40010800 	.word	0x40010800
 8003d6c:	2000022f 	.word	0x2000022f
 8003d70:	2000012c 	.word	0x2000012c
 8003d74:	2000022c 	.word	0x2000022c
 8003d78:	20000200 	.word	0x20000200
 8003d7c:	2000020f 	.word	0x2000020f
 8003d80:	0800d7d4 	.word	0x0800d7d4
 8003d84:	0800d7e8 	.word	0x0800d7e8
 8003d88:	0800d7fc 	.word	0x0800d7fc
 8003d8c:	0800d810 	.word	0x0800d810
 8003d90:	0800d428 	.word	0x0800d428
 8003d94:	20000216 	.word	0x20000216
 8003d98:	0800d824 	.word	0x0800d824
 8003d9c:	0800d838 	.word	0x0800d838
 8003da0:	0800d84c 	.word	0x0800d84c
			} else if(dilSecim == 1) {
 8003da4:	4b73      	ldr	r3, [pc, #460]	; (8003f74 <menu+0x2bc0>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d104      	bne.n	8003db6 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003dac:	4a72      	ldr	r2, [pc, #456]	; (8003f78 <menu+0x2bc4>)
 8003dae:	2101      	movs	r1, #1
 8003db0:	2001      	movs	r0, #1
 8003db2:	f003 fe69 	bl	8007a88 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003db6:	4b6f      	ldr	r3, [pc, #444]	; (8003f74 <menu+0x2bc0>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dbe:	4a6f      	ldr	r2, [pc, #444]	; (8003f7c <menu+0x2bc8>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	2002      	movs	r0, #2
 8003dc4:	f003 fe60 	bl	8007a88 <lcd_print>
 8003dc8:	e008      	b.n	8003ddc <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003dca:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <menu+0x2bc0>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d104      	bne.n	8003ddc <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003dd2:	4a6b      	ldr	r2, [pc, #428]	; (8003f80 <menu+0x2bcc>)
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	2002      	movs	r0, #2
 8003dd8:	f003 fe56 	bl	8007a88 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003ddc:	4b69      	ldr	r3, [pc, #420]	; (8003f84 <menu+0x2bd0>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	220a      	movs	r2, #10
 8003de2:	4969      	ldr	r1, [pc, #420]	; (8003f88 <menu+0x2bd4>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f008 f9fd 	bl	800c1e4 <itoa>
		lcd_print(2,16,snum);
 8003dea:	4a67      	ldr	r2, [pc, #412]	; (8003f88 <menu+0x2bd4>)
 8003dec:	2110      	movs	r1, #16
 8003dee:	2002      	movs	r0, #2
 8003df0:	f003 fe4a 	bl	8007a88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df4:	2102      	movs	r1, #2
 8003df6:	4865      	ldr	r0, [pc, #404]	; (8003f8c <menu+0x2bd8>)
 8003df8:	f005 f96c 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d115      	bne.n	8003e2e <menu+0x2a7a>
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <menu+0x2bdc>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f083 0301 	eor.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003e10:	4b5c      	ldr	r3, [pc, #368]	; (8003f84 <menu+0x2bd0>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b5a      	ldr	r3, [pc, #360]	; (8003f84 <menu+0x2bd0>)
 8003e1a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003e1c:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <menu+0x2bd0>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d902      	bls.n	8003e2a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003e24:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <menu+0x2bd0>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e2a:	f000 fe8d 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2e:	2104      	movs	r1, #4
 8003e30:	4856      	ldr	r0, [pc, #344]	; (8003f8c <menu+0x2bd8>)
 8003e32:	f005 f94f 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d115      	bne.n	8003e68 <menu+0x2ab4>
 8003e3c:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <menu+0x2bdc>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	f083 0301 	eor.w	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00e      	beq.n	8003e68 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003e4a:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <menu+0x2bd0>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <menu+0x2bd0>)
 8003e54:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003e56:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <menu+0x2bd0>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d902      	bls.n	8003e64 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003e5e:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <menu+0x2bd0>)
 8003e60:	2205      	movs	r2, #5
 8003e62:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e64:	f000 fe70 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e68:	2108      	movs	r1, #8
 8003e6a:	4848      	ldr	r0, [pc, #288]	; (8003f8c <menu+0x2bd8>)
 8003e6c:	f005 f932 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10d      	bne.n	8003e92 <menu+0x2ade>
 8003e76:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <menu+0x2bdc>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f083 0301 	eor.w	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003e84:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <menu+0x2bd0>)
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <menu+0x2be0>)
 8003e8a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003e8c:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <menu+0x2be4>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003e92:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <menu+0x2be8>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b1a      	cmp	r3, #26
 8003e98:	f040 80ec 	bne.w	8004074 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <menu+0x2bc0>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003ea4:	4a3e      	ldr	r2, [pc, #248]	; (8003fa0 <menu+0x2bec>)
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	f003 fded 	bl	8007a88 <lcd_print>
 8003eae:	e008      	b.n	8003ec2 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003eb0:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <menu+0x2bc0>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d104      	bne.n	8003ec2 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003eb8:	4a3a      	ldr	r2, [pc, #232]	; (8003fa4 <menu+0x2bf0>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f003 fde3 	bl	8007a88 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003ec2:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <menu+0x2bf4>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b63      	cmp	r3, #99	; 0x63
 8003ec8:	d91e      	bls.n	8003f08 <menu+0x2b54>
			if(dilSecim == 0) {
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <menu+0x2bc0>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ed2:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <menu+0x2bc8>)
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	2002      	movs	r0, #2
 8003ed8:	f003 fdd6 	bl	8007a88 <lcd_print>
			}
			if(dilSecim == 1) {
 8003edc:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <menu+0x2bc0>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d104      	bne.n	8003eee <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003ee4:	4a26      	ldr	r2, [pc, #152]	; (8003f80 <menu+0x2bcc>)
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	2002      	movs	r0, #2
 8003eea:	f003 fdcd 	bl	8007a88 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <menu+0x2bf4>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	220a      	movs	r2, #10
 8003ef4:	4924      	ldr	r1, [pc, #144]	; (8003f88 <menu+0x2bd4>)
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f008 f974 	bl	800c1e4 <itoa>
			lcd_print(2,14,snum);
 8003efc:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <menu+0x2bd4>)
 8003efe:	210e      	movs	r1, #14
 8003f00:	2002      	movs	r0, #2
 8003f02:	f003 fdc1 	bl	8007a88 <lcd_print>
 8003f06:	e066      	b.n	8003fd6 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f08:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <menu+0x2bf4>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d923      	bls.n	8003f58 <menu+0x2ba4>
 8003f10:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <menu+0x2bf4>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b63      	cmp	r3, #99	; 0x63
 8003f16:	d81f      	bhi.n	8003f58 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <menu+0x2bc0>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f20:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <menu+0x2bc8>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	2002      	movs	r0, #2
 8003f26:	f003 fdaf 	bl	8007a88 <lcd_print>
 8003f2a:	e008      	b.n	8003f3e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <menu+0x2bc0>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d104      	bne.n	8003f3e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <menu+0x2bcc>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	2002      	movs	r0, #2
 8003f3a:	f003 fda5 	bl	8007a88 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <menu+0x2bf4>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	220a      	movs	r2, #10
 8003f44:	4910      	ldr	r1, [pc, #64]	; (8003f88 <menu+0x2bd4>)
 8003f46:	4618      	mov	r0, r3
 8003f48:	f008 f94c 	bl	800c1e4 <itoa>
			lcd_print(2, 15, snum);
 8003f4c:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <menu+0x2bd4>)
 8003f4e:	210f      	movs	r1, #15
 8003f50:	2002      	movs	r0, #2
 8003f52:	f003 fd99 	bl	8007a88 <lcd_print>
 8003f56:	e03e      	b.n	8003fd6 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <menu+0x2bf4>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b09      	cmp	r3, #9
 8003f5e:	d83a      	bhi.n	8003fd6 <menu+0x2c22>
			if(dilSecim == 0) {
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <menu+0x2bc0>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d121      	bne.n	8003fac <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <menu+0x2bc8>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f003 fd8b 	bl	8007a88 <lcd_print>
 8003f72:	e024      	b.n	8003fbe <menu+0x2c0a>
 8003f74:	20000221 	.word	0x20000221
 8003f78:	0800d860 	.word	0x0800d860
 8003f7c:	0800d428 	.word	0x0800d428
 8003f80:	0800d79c 	.word	0x0800d79c
 8003f84:	20000217 	.word	0x20000217
 8003f88:	2000019c 	.word	0x2000019c
 8003f8c:	40010800 	.word	0x40010800
 8003f90:	2000022f 	.word	0x2000022f
 8003f94:	2000012c 	.word	0x2000012c
 8003f98:	2000022c 	.word	0x2000022c
 8003f9c:	20000200 	.word	0x20000200
 8003fa0:	0800d874 	.word	0x0800d874
 8003fa4:	0800d888 	.word	0x0800d888
 8003fa8:	20000218 	.word	0x20000218
			} else if(dilSecim == 1) {
 8003fac:	4b8f      	ldr	r3, [pc, #572]	; (80041ec <menu+0x2e38>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d104      	bne.n	8003fbe <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003fb4:	4a8e      	ldr	r2, [pc, #568]	; (80041f0 <menu+0x2e3c>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	2002      	movs	r0, #2
 8003fba:	f003 fd65 	bl	8007a88 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fbe:	4b8d      	ldr	r3, [pc, #564]	; (80041f4 <menu+0x2e40>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	220a      	movs	r2, #10
 8003fc4:	498c      	ldr	r1, [pc, #560]	; (80041f8 <menu+0x2e44>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f008 f90c 	bl	800c1e4 <itoa>
			lcd_print(2, 16, snum);
 8003fcc:	4a8a      	ldr	r2, [pc, #552]	; (80041f8 <menu+0x2e44>)
 8003fce:	2110      	movs	r1, #16
 8003fd0:	2002      	movs	r0, #2
 8003fd2:	f003 fd59 	bl	8007a88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	4888      	ldr	r0, [pc, #544]	; (80041fc <menu+0x2e48>)
 8003fda:	f005 f87b 	bl	80090d4 <HAL_GPIO_ReadPin>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d115      	bne.n	8004010 <menu+0x2c5c>
 8003fe4:	4b86      	ldr	r3, [pc, #536]	; (8004200 <menu+0x2e4c>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	f083 0301 	eor.w	r3, r3, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003ff2:	4b80      	ldr	r3, [pc, #512]	; (80041f4 <menu+0x2e40>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4b7e      	ldr	r3, [pc, #504]	; (80041f4 <menu+0x2e40>)
 8003ffc:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003ffe:	4b7d      	ldr	r3, [pc, #500]	; (80041f4 <menu+0x2e40>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2bb4      	cmp	r3, #180	; 0xb4
 8004004:	d902      	bls.n	800400c <menu+0x2c58>
				makineCalismaTmr = 0;
 8004006:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <menu+0x2e40>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800400c:	f000 fd9c 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004010:	2104      	movs	r1, #4
 8004012:	487a      	ldr	r0, [pc, #488]	; (80041fc <menu+0x2e48>)
 8004014:	f005 f85e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004018:	4603      	mov	r3, r0
 800401a:	2b01      	cmp	r3, #1
 800401c:	d115      	bne.n	800404a <menu+0x2c96>
 800401e:	4b78      	ldr	r3, [pc, #480]	; (8004200 <menu+0x2e4c>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	f083 0301 	eor.w	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 800402c:	4b71      	ldr	r3, [pc, #452]	; (80041f4 <menu+0x2e40>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	4b6f      	ldr	r3, [pc, #444]	; (80041f4 <menu+0x2e40>)
 8004036:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004038:	4b6e      	ldr	r3, [pc, #440]	; (80041f4 <menu+0x2e40>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2bb5      	cmp	r3, #181	; 0xb5
 800403e:	d902      	bls.n	8004046 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004040:	4b6c      	ldr	r3, [pc, #432]	; (80041f4 <menu+0x2e40>)
 8004042:	22b4      	movs	r2, #180	; 0xb4
 8004044:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004046:	f000 fd7f 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800404a:	2108      	movs	r1, #8
 800404c:	486b      	ldr	r0, [pc, #428]	; (80041fc <menu+0x2e48>)
 800404e:	f005 f841 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d10d      	bne.n	8004074 <menu+0x2cc0>
 8004058:	4b69      	ldr	r3, [pc, #420]	; (8004200 <menu+0x2e4c>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	f083 0301 	eor.w	r3, r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d006      	beq.n	8004074 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004066:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <menu+0x2e40>)
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	4b66      	ldr	r3, [pc, #408]	; (8004204 <menu+0x2e50>)
 800406c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800406e:	4b66      	ldr	r3, [pc, #408]	; (8004208 <menu+0x2e54>)
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004074:	4b65      	ldr	r3, [pc, #404]	; (800420c <menu+0x2e58>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b1b      	cmp	r3, #27
 800407a:	f040 8083 	bne.w	8004184 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800407e:	4a64      	ldr	r2, [pc, #400]	; (8004210 <menu+0x2e5c>)
 8004080:	2101      	movs	r1, #1
 8004082:	2001      	movs	r0, #1
 8004084:	f003 fd00 	bl	8007a88 <lcd_print>

		if(buzzer == 0) {
 8004088:	4b62      	ldr	r3, [pc, #392]	; (8004214 <menu+0x2e60>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d113      	bne.n	80040b8 <menu+0x2d04>
			if(dilSecim == 0) {
 8004090:	4b56      	ldr	r3, [pc, #344]	; (80041ec <menu+0x2e38>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004098:	4a5f      	ldr	r2, [pc, #380]	; (8004218 <menu+0x2e64>)
 800409a:	2101      	movs	r1, #1
 800409c:	2002      	movs	r0, #2
 800409e:	f003 fcf3 	bl	8007a88 <lcd_print>
 80040a2:	e020      	b.n	80040e6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040a4:	4b51      	ldr	r3, [pc, #324]	; (80041ec <menu+0x2e38>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d11c      	bne.n	80040e6 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80040ac:	4a5b      	ldr	r2, [pc, #364]	; (800421c <menu+0x2e68>)
 80040ae:	2101      	movs	r1, #1
 80040b0:	2002      	movs	r0, #2
 80040b2:	f003 fce9 	bl	8007a88 <lcd_print>
 80040b6:	e016      	b.n	80040e6 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80040b8:	4b56      	ldr	r3, [pc, #344]	; (8004214 <menu+0x2e60>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d112      	bne.n	80040e6 <menu+0x2d32>
			if(dilSecim == 0) {
 80040c0:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <menu+0x2e38>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80040c8:	4a55      	ldr	r2, [pc, #340]	; (8004220 <menu+0x2e6c>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	2002      	movs	r0, #2
 80040ce:	f003 fcdb 	bl	8007a88 <lcd_print>
 80040d2:	e008      	b.n	80040e6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040d4:	4b45      	ldr	r3, [pc, #276]	; (80041ec <menu+0x2e38>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d104      	bne.n	80040e6 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80040dc:	4a51      	ldr	r2, [pc, #324]	; (8004224 <menu+0x2e70>)
 80040de:	2101      	movs	r1, #1
 80040e0:	2002      	movs	r0, #2
 80040e2:	f003 fcd1 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e6:	2102      	movs	r1, #2
 80040e8:	4844      	ldr	r0, [pc, #272]	; (80041fc <menu+0x2e48>)
 80040ea:	f004 fff3 	bl	80090d4 <HAL_GPIO_ReadPin>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d115      	bne.n	8004120 <menu+0x2d6c>
 80040f4:	4b42      	ldr	r3, [pc, #264]	; (8004200 <menu+0x2e4c>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	f083 0301 	eor.w	r3, r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00e      	beq.n	8004120 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8004102:	4b44      	ldr	r3, [pc, #272]	; (8004214 <menu+0x2e60>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b42      	ldr	r3, [pc, #264]	; (8004214 <menu+0x2e60>)
 800410c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800410e:	4b41      	ldr	r3, [pc, #260]	; (8004214 <menu+0x2e60>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d902      	bls.n	800411c <menu+0x2d68>
				buzzer = 0;
 8004116:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <menu+0x2e60>)
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800411c:	f000 fd14 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004120:	2104      	movs	r1, #4
 8004122:	4836      	ldr	r0, [pc, #216]	; (80041fc <menu+0x2e48>)
 8004124:	f004 ffd6 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d115      	bne.n	800415a <menu+0x2da6>
 800412e:	4b34      	ldr	r3, [pc, #208]	; (8004200 <menu+0x2e4c>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	f083 0301 	eor.w	r3, r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00e      	beq.n	800415a <menu+0x2da6>
			buzzer = buzzer - 1;
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <menu+0x2e60>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	3b01      	subs	r3, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	4b33      	ldr	r3, [pc, #204]	; (8004214 <menu+0x2e60>)
 8004146:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004148:	4b32      	ldr	r3, [pc, #200]	; (8004214 <menu+0x2e60>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <menu+0x2da2>
		   		buzzer = 1;
 8004150:	4b30      	ldr	r3, [pc, #192]	; (8004214 <menu+0x2e60>)
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004156:	f000 fcf7 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800415a:	2108      	movs	r1, #8
 800415c:	4827      	ldr	r0, [pc, #156]	; (80041fc <menu+0x2e48>)
 800415e:	f004 ffb9 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004162:	4603      	mov	r3, r0
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10d      	bne.n	8004184 <menu+0x2dd0>
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <menu+0x2e4c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f083 0301 	eor.w	r3, r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004176:	4b27      	ldr	r3, [pc, #156]	; (8004214 <menu+0x2e60>)
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <menu+0x2e50>)
 800417c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800417e:	4b22      	ldr	r3, [pc, #136]	; (8004208 <menu+0x2e54>)
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004184:	4b21      	ldr	r3, [pc, #132]	; (800420c <menu+0x2e58>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b1c      	cmp	r3, #28
 800418a:	f040 80ab 	bne.w	80042e4 <menu+0x2f30>
		calismaSayModu = 0;
 800418e:	4b26      	ldr	r3, [pc, #152]	; (8004228 <menu+0x2e74>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004194:	4a25      	ldr	r2, [pc, #148]	; (800422c <menu+0x2e78>)
 8004196:	2101      	movs	r1, #1
 8004198:	2001      	movs	r0, #1
 800419a:	f003 fc75 	bl	8007a88 <lcd_print>

		if(demoMode == 0) {
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <menu+0x2e7c>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d113      	bne.n	80041ce <menu+0x2e1a>
			if(dilSecim == 0) {
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <menu+0x2e38>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d105      	bne.n	80041ba <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <menu+0x2e64>)
 80041b0:	2101      	movs	r1, #1
 80041b2:	2002      	movs	r0, #2
 80041b4:	f003 fc68 	bl	8007a88 <lcd_print>
 80041b8:	e045      	b.n	8004246 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <menu+0x2e38>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d141      	bne.n	8004246 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <menu+0x2e68>)
 80041c4:	2101      	movs	r1, #1
 80041c6:	2002      	movs	r0, #2
 80041c8:	f003 fc5e 	bl	8007a88 <lcd_print>
 80041cc:	e03b      	b.n	8004246 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80041ce:	4b18      	ldr	r3, [pc, #96]	; (8004230 <menu+0x2e7c>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d137      	bne.n	8004246 <menu+0x2e92>
			if(dilSecim == 0){
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <menu+0x2e38>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d12a      	bne.n	8004234 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <menu+0x2e6c>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	2002      	movs	r0, #2
 80041e4:	f003 fc50 	bl	8007a88 <lcd_print>
 80041e8:	e02d      	b.n	8004246 <menu+0x2e92>
 80041ea:	bf00      	nop
 80041ec:	20000221 	.word	0x20000221
 80041f0:	0800d79c 	.word	0x0800d79c
 80041f4:	20000218 	.word	0x20000218
 80041f8:	2000019c 	.word	0x2000019c
 80041fc:	40010800 	.word	0x40010800
 8004200:	2000022f 	.word	0x2000022f
 8004204:	2000012c 	.word	0x2000012c
 8004208:	2000022c 	.word	0x2000022c
 800420c:	20000200 	.word	0x20000200
 8004210:	0800d89c 	.word	0x0800d89c
 8004214:	2000021c 	.word	0x2000021c
 8004218:	0800d1c4 	.word	0x0800d1c4
 800421c:	0800d1d8 	.word	0x0800d1d8
 8004220:	0800d224 	.word	0x0800d224
 8004224:	0800d238 	.word	0x0800d238
 8004228:	20000220 	.word	0x20000220
 800422c:	0800d8b0 	.word	0x0800d8b0
 8004230:	2000021e 	.word	0x2000021e
			} else if(dilSecim == 1) {
 8004234:	4b71      	ldr	r3, [pc, #452]	; (80043fc <menu+0x3048>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d104      	bne.n	8004246 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 800423c:	4a70      	ldr	r2, [pc, #448]	; (8004400 <menu+0x304c>)
 800423e:	2101      	movs	r1, #1
 8004240:	2002      	movs	r0, #2
 8004242:	f003 fc21 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004246:	2102      	movs	r1, #2
 8004248:	486e      	ldr	r0, [pc, #440]	; (8004404 <menu+0x3050>)
 800424a:	f004 ff43 	bl	80090d4 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b01      	cmp	r3, #1
 8004252:	d115      	bne.n	8004280 <menu+0x2ecc>
 8004254:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <menu+0x3054>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00e      	beq.n	8004280 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004262:	4b6a      	ldr	r3, [pc, #424]	; (800440c <menu+0x3058>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b68      	ldr	r3, [pc, #416]	; (800440c <menu+0x3058>)
 800426c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800426e:	4b67      	ldr	r3, [pc, #412]	; (800440c <menu+0x3058>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d902      	bls.n	800427c <menu+0x2ec8>
				demoMode = 0;
 8004276:	4b65      	ldr	r3, [pc, #404]	; (800440c <menu+0x3058>)
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800427c:	f000 fc64 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004280:	2104      	movs	r1, #4
 8004282:	4860      	ldr	r0, [pc, #384]	; (8004404 <menu+0x3050>)
 8004284:	f004 ff26 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004288:	4603      	mov	r3, r0
 800428a:	2b01      	cmp	r3, #1
 800428c:	d115      	bne.n	80042ba <menu+0x2f06>
 800428e:	4b5e      	ldr	r3, [pc, #376]	; (8004408 <menu+0x3054>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00e      	beq.n	80042ba <menu+0x2f06>
			demoMode = demoMode - 1;
 800429c:	4b5b      	ldr	r3, [pc, #364]	; (800440c <menu+0x3058>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	4b59      	ldr	r3, [pc, #356]	; (800440c <menu+0x3058>)
 80042a6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80042a8:	4b58      	ldr	r3, [pc, #352]	; (800440c <menu+0x3058>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <menu+0x2f02>
		   		demoMode = 1;
 80042b0:	4b56      	ldr	r3, [pc, #344]	; (800440c <menu+0x3058>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042b6:	f000 fc47 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042ba:	2108      	movs	r1, #8
 80042bc:	4851      	ldr	r0, [pc, #324]	; (8004404 <menu+0x3050>)
 80042be:	f004 ff09 	bl	80090d4 <HAL_GPIO_ReadPin>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10d      	bne.n	80042e4 <menu+0x2f30>
 80042c8:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <menu+0x3054>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f083 0301 	eor.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <menu+0x2f30>
			eepromData[26] = demoMode;
 80042d6:	4b4d      	ldr	r3, [pc, #308]	; (800440c <menu+0x3058>)
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <menu+0x305c>)
 80042dc:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80042de:	4b4d      	ldr	r3, [pc, #308]	; (8004414 <menu+0x3060>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80042e4:	4b4c      	ldr	r3, [pc, #304]	; (8004418 <menu+0x3064>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b1d      	cmp	r3, #29
 80042ea:	f040 8132 	bne.w	8004552 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80042ee:	4b4b      	ldr	r3, [pc, #300]	; (800441c <menu+0x3068>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d113      	bne.n	800431e <menu+0x2f6a>
 80042f6:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <menu+0x306c>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10f      	bne.n	800431e <menu+0x2f6a>
 80042fe:	4b49      	ldr	r3, [pc, #292]	; (8004424 <menu+0x3070>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <menu+0x2f6a>
 8004306:	4b48      	ldr	r3, [pc, #288]	; (8004428 <menu+0x3074>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d107      	bne.n	800431e <menu+0x2f6a>
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <menu+0x3078>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004316:	4b46      	ldr	r3, [pc, #280]	; (8004430 <menu+0x307c>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e002      	b.n	8004324 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800431e:	4b44      	ldr	r3, [pc, #272]	; (8004430 <menu+0x307c>)
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004324:	4b43      	ldr	r3, [pc, #268]	; (8004434 <menu+0x3080>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d154      	bne.n	80043d6 <menu+0x3022>
			if(dilSecim == 0) {
 800432c:	4b33      	ldr	r3, [pc, #204]	; (80043fc <menu+0x3048>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004334:	4a40      	ldr	r2, [pc, #256]	; (8004438 <menu+0x3084>)
 8004336:	2101      	movs	r1, #1
 8004338:	2001      	movs	r0, #1
 800433a:	f003 fba5 	bl	8007a88 <lcd_print>
 800433e:	e008      	b.n	8004352 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <menu+0x3048>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d104      	bne.n	8004352 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004348:	4a3c      	ldr	r2, [pc, #240]	; (800443c <menu+0x3088>)
 800434a:	2101      	movs	r1, #1
 800434c:	2001      	movs	r0, #1
 800434e:	f003 fb9b 	bl	8007a88 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <menu+0x3078>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	220a      	movs	r2, #10
 8004358:	4939      	ldr	r1, [pc, #228]	; (8004440 <menu+0x308c>)
 800435a:	4618      	mov	r0, r3
 800435c:	f007 ff42 	bl	800c1e4 <itoa>
			lcd_print(2, 12, snum);
 8004360:	4a37      	ldr	r2, [pc, #220]	; (8004440 <menu+0x308c>)
 8004362:	210c      	movs	r1, #12
 8004364:	2002      	movs	r0, #2
 8004366:	f003 fb8f 	bl	8007a88 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <menu+0x3074>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	220a      	movs	r2, #10
 8004370:	4933      	ldr	r1, [pc, #204]	; (8004440 <menu+0x308c>)
 8004372:	4618      	mov	r0, r3
 8004374:	f007 ff36 	bl	800c1e4 <itoa>
			lcd_print(2, 13, snum);
 8004378:	4a31      	ldr	r2, [pc, #196]	; (8004440 <menu+0x308c>)
 800437a:	210d      	movs	r1, #13
 800437c:	2002      	movs	r0, #2
 800437e:	f003 fb83 	bl	8007a88 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <menu+0x3070>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	220a      	movs	r2, #10
 8004388:	492d      	ldr	r1, [pc, #180]	; (8004440 <menu+0x308c>)
 800438a:	4618      	mov	r0, r3
 800438c:	f007 ff2a 	bl	800c1e4 <itoa>
			lcd_print(2, 14, snum);
 8004390:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <menu+0x308c>)
 8004392:	210e      	movs	r1, #14
 8004394:	2002      	movs	r0, #2
 8004396:	f003 fb77 	bl	8007a88 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <menu+0x306c>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	220a      	movs	r2, #10
 80043a0:	4927      	ldr	r1, [pc, #156]	; (8004440 <menu+0x308c>)
 80043a2:	4618      	mov	r0, r3
 80043a4:	f007 ff1e 	bl	800c1e4 <itoa>
			lcd_print(2, 15, snum);
 80043a8:	4a25      	ldr	r2, [pc, #148]	; (8004440 <menu+0x308c>)
 80043aa:	210f      	movs	r1, #15
 80043ac:	2002      	movs	r0, #2
 80043ae:	f003 fb6b 	bl	8007a88 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <menu+0x3068>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	220a      	movs	r2, #10
 80043b8:	4921      	ldr	r1, [pc, #132]	; (8004440 <menu+0x308c>)
 80043ba:	4618      	mov	r0, r3
 80043bc:	f007 ff12 	bl	800c1e4 <itoa>
			lcd_print(2, 16, snum);
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <menu+0x308c>)
 80043c2:	2110      	movs	r1, #16
 80043c4:	2002      	movs	r0, #2
 80043c6:	f003 fb5f 	bl	8007a88 <lcd_print>

			lcd_print(2, 1, "           ");
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <menu+0x3090>)
 80043cc:	2101      	movs	r1, #1
 80043ce:	2002      	movs	r0, #2
 80043d0:	f003 fb5a 	bl	8007a88 <lcd_print>
 80043d4:	e048      	b.n	8004468 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80043d6:	4b17      	ldr	r3, [pc, #92]	; (8004434 <menu+0x3080>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d144      	bne.n	8004468 <menu+0x30b4>
			if(dilSecim == 0) {
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <menu+0x3048>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d132      	bne.n	800444c <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043e6:	4a14      	ldr	r2, [pc, #80]	; (8004438 <menu+0x3084>)
 80043e8:	2101      	movs	r1, #1
 80043ea:	2001      	movs	r0, #1
 80043ec:	f003 fb4c 	bl	8007a88 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <menu+0x3094>)
 80043f2:	2101      	movs	r1, #1
 80043f4:	2002      	movs	r0, #2
 80043f6:	f003 fb47 	bl	8007a88 <lcd_print>
 80043fa:	e035      	b.n	8004468 <menu+0x30b4>
 80043fc:	20000221 	.word	0x20000221
 8004400:	0800d238 	.word	0x0800d238
 8004404:	40010800 	.word	0x40010800
 8004408:	2000022f 	.word	0x2000022f
 800440c:	2000021e 	.word	0x2000021e
 8004410:	2000012c 	.word	0x2000012c
 8004414:	2000022c 	.word	0x2000022c
 8004418:	20000200 	.word	0x20000200
 800441c:	200001fd 	.word	0x200001fd
 8004420:	200001fe 	.word	0x200001fe
 8004424:	20000000 	.word	0x20000000
 8004428:	20000001 	.word	0x20000001
 800442c:	200001ff 	.word	0x200001ff
 8004430:	20000241 	.word	0x20000241
 8004434:	20000220 	.word	0x20000220
 8004438:	0800d8c0 	.word	0x0800d8c0
 800443c:	0800d8d4 	.word	0x0800d8d4
 8004440:	2000019c 	.word	0x2000019c
 8004444:	0800d8e8 	.word	0x0800d8e8
 8004448:	0800d8f4 	.word	0x0800d8f4
			} else if(dilSecim == 1) {
 800444c:	4b94      	ldr	r3, [pc, #592]	; (80046a0 <menu+0x32ec>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d109      	bne.n	8004468 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004454:	4a93      	ldr	r2, [pc, #588]	; (80046a4 <menu+0x32f0>)
 8004456:	2101      	movs	r1, #1
 8004458:	2001      	movs	r0, #1
 800445a:	f003 fb15 	bl	8007a88 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800445e:	4a92      	ldr	r2, [pc, #584]	; (80046a8 <menu+0x32f4>)
 8004460:	2101      	movs	r1, #1
 8004462:	2002      	movs	r0, #2
 8004464:	f003 fb10 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004468:	2102      	movs	r1, #2
 800446a:	4890      	ldr	r0, [pc, #576]	; (80046ac <menu+0x32f8>)
 800446c:	f004 fe32 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d119      	bne.n	80044aa <menu+0x30f6>
 8004476:	4b8e      	ldr	r3, [pc, #568]	; (80046b0 <menu+0x32fc>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f083 0301 	eor.w	r3, r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d012      	beq.n	80044aa <menu+0x30f6>
 8004484:	4b8b      	ldr	r3, [pc, #556]	; (80046b4 <menu+0x3300>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00e      	beq.n	80044aa <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800448c:	4b8a      	ldr	r3, [pc, #552]	; (80046b8 <menu+0x3304>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	4b88      	ldr	r3, [pc, #544]	; (80046b8 <menu+0x3304>)
 8004496:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004498:	4b87      	ldr	r3, [pc, #540]	; (80046b8 <menu+0x3304>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d902      	bls.n	80044a6 <menu+0x30f2>
				calismaSayModu = 0;
 80044a0:	4b85      	ldr	r3, [pc, #532]	; (80046b8 <menu+0x3304>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044a6:	f000 fb4f 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80044aa:	2104      	movs	r1, #4
 80044ac:	487f      	ldr	r0, [pc, #508]	; (80046ac <menu+0x32f8>)
 80044ae:	f004 fe11 	bl	80090d4 <HAL_GPIO_ReadPin>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d119      	bne.n	80044ec <menu+0x3138>
 80044b8:	4b7d      	ldr	r3, [pc, #500]	; (80046b0 <menu+0x32fc>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f083 0301 	eor.w	r3, r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d012      	beq.n	80044ec <menu+0x3138>
 80044c6:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <menu+0x3300>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80044ce:	4b7a      	ldr	r3, [pc, #488]	; (80046b8 <menu+0x3304>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4b78      	ldr	r3, [pc, #480]	; (80046b8 <menu+0x3304>)
 80044d8:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80044da:	4b77      	ldr	r3, [pc, #476]	; (80046b8 <menu+0x3304>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <menu+0x3134>
		   		calismaSayModu = 1;
 80044e2:	4b75      	ldr	r3, [pc, #468]	; (80046b8 <menu+0x3304>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044e8:	f000 fb2e 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ec:	2108      	movs	r1, #8
 80044ee:	486f      	ldr	r0, [pc, #444]	; (80046ac <menu+0x32f8>)
 80044f0:	f004 fdf0 	bl	80090d4 <HAL_GPIO_ReadPin>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d12b      	bne.n	8004552 <menu+0x319e>
 80044fa:	4b6d      	ldr	r3, [pc, #436]	; (80046b0 <menu+0x32fc>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	f083 0301 	eor.w	r3, r3, #1
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d024      	beq.n	8004552 <menu+0x319e>
			eepromData[32] = 0;
 8004508:	4b6c      	ldr	r3, [pc, #432]	; (80046bc <menu+0x3308>)
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004510:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <menu+0x3308>)
 8004512:	2200      	movs	r2, #0
 8004514:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004516:	4b69      	ldr	r3, [pc, #420]	; (80046bc <menu+0x3308>)
 8004518:	2200      	movs	r2, #0
 800451a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800451c:	4b67      	ldr	r3, [pc, #412]	; (80046bc <menu+0x3308>)
 800451e:	2200      	movs	r2, #0
 8004520:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004522:	4b66      	ldr	r3, [pc, #408]	; (80046bc <menu+0x3308>)
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004528:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <menu+0x330c>)
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800452e:	4b65      	ldr	r3, [pc, #404]	; (80046c4 <menu+0x3310>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004534:	4b64      	ldr	r3, [pc, #400]	; (80046c8 <menu+0x3314>)
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800453a:	4b64      	ldr	r3, [pc, #400]	; (80046cc <menu+0x3318>)
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004540:	4b63      	ldr	r3, [pc, #396]	; (80046d0 <menu+0x331c>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004546:	4b5c      	ldr	r3, [pc, #368]	; (80046b8 <menu+0x3304>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800454c:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <menu+0x3320>)
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004552:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <menu+0x3324>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b1e      	cmp	r3, #30
 8004558:	d16f      	bne.n	800463a <menu+0x3286>
		calismaSayModu = 0;
 800455a:	4b57      	ldr	r3, [pc, #348]	; (80046b8 <menu+0x3304>)
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004560:	4b4f      	ldr	r3, [pc, #316]	; (80046a0 <menu+0x32ec>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004568:	4a5c      	ldr	r2, [pc, #368]	; (80046dc <menu+0x3328>)
 800456a:	2101      	movs	r1, #1
 800456c:	2001      	movs	r0, #1
 800456e:	f003 fa8b 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004572:	4a5b      	ldr	r2, [pc, #364]	; (80046e0 <menu+0x332c>)
 8004574:	2101      	movs	r1, #1
 8004576:	2002      	movs	r0, #2
 8004578:	f003 fa86 	bl	8007a88 <lcd_print>
 800457c:	e00d      	b.n	800459a <menu+0x31e6>
		} else if(dilSecim == 1) {
 800457e:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <menu+0x32ec>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d109      	bne.n	800459a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004586:	4a57      	ldr	r2, [pc, #348]	; (80046e4 <menu+0x3330>)
 8004588:	2101      	movs	r1, #1
 800458a:	2001      	movs	r0, #1
 800458c:	f003 fa7c 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004590:	4a55      	ldr	r2, [pc, #340]	; (80046e8 <menu+0x3334>)
 8004592:	2101      	movs	r1, #1
 8004594:	2002      	movs	r0, #2
 8004596:	f003 fa77 	bl	8007a88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800459a:	2102      	movs	r1, #2
 800459c:	4843      	ldr	r0, [pc, #268]	; (80046ac <menu+0x32f8>)
 800459e:	f004 fd99 	bl	80090d4 <HAL_GPIO_ReadPin>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d115      	bne.n	80045d4 <menu+0x3220>
 80045a8:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <menu+0x32fc>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f083 0301 	eor.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80045b6:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <menu+0x32ec>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	3301      	adds	r3, #1
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <menu+0x32ec>)
 80045c0:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80045c2:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <menu+0x32ec>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d902      	bls.n	80045d0 <menu+0x321c>
				dilSecim = 0;
 80045ca:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <menu+0x32ec>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80045d0:	f000 faba 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d4:	2104      	movs	r1, #4
 80045d6:	4835      	ldr	r0, [pc, #212]	; (80046ac <menu+0x32f8>)
 80045d8:	f004 fd7c 	bl	80090d4 <HAL_GPIO_ReadPin>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d115      	bne.n	800460e <menu+0x325a>
 80045e2:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <menu+0x32fc>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	f083 0301 	eor.w	r3, r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <menu+0x325a>
			dilSecim = dilSecim - 1;
 80045f0:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <menu+0x32ec>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <menu+0x32ec>)
 80045fa:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80045fc:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <menu+0x32ec>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <menu+0x3256>
		   		dilSecim = 1;
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <menu+0x32ec>)
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800460a:	f000 fa9d 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800460e:	2108      	movs	r1, #8
 8004610:	4826      	ldr	r0, [pc, #152]	; (80046ac <menu+0x32f8>)
 8004612:	f004 fd5f 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004616:	4603      	mov	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	d10e      	bne.n	800463a <menu+0x3286>
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <menu+0x32fc>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f083 0301 	eor.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <menu+0x3286>
			eepromData[33] = dilSecim;
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <menu+0x32ec>)
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	4b23      	ldr	r3, [pc, #140]	; (80046bc <menu+0x3308>)
 8004630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004634:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <menu+0x3320>)
 8004636:	2201      	movs	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800463a:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <menu+0x3324>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b1f      	cmp	r3, #31
 8004640:	f040 80b7 	bne.w	80047b2 <menu+0x33fe>
		calismaSayModu = 0;
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <menu+0x3304>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800464a:	4a28      	ldr	r2, [pc, #160]	; (80046ec <menu+0x3338>)
 800464c:	2101      	movs	r1, #1
 800464e:	2001      	movs	r0, #1
 8004650:	f003 fa1a 	bl	8007a88 <lcd_print>

		if(iotMode == 0) {
 8004654:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <menu+0x333c>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d113      	bne.n	8004684 <menu+0x32d0>
			if(dilSecim == 0) {
 800465c:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <menu+0x32ec>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004664:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <menu+0x3340>)
 8004666:	2101      	movs	r1, #1
 8004668:	2002      	movs	r0, #2
 800466a:	f003 fa0d 	bl	8007a88 <lcd_print>
 800466e:	e050      	b.n	8004712 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <menu+0x32ec>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d14c      	bne.n	8004712 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004678:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <menu+0x3344>)
 800467a:	2101      	movs	r1, #1
 800467c:	2002      	movs	r0, #2
 800467e:	f003 fa03 	bl	8007a88 <lcd_print>
 8004682:	e046      	b.n	8004712 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <menu+0x333c>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d142      	bne.n	8004712 <menu+0x335e>
			if(dilSecim == 0) {
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <menu+0x32ec>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d135      	bne.n	8004700 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004694:	4a19      	ldr	r2, [pc, #100]	; (80046fc <menu+0x3348>)
 8004696:	2101      	movs	r1, #1
 8004698:	2002      	movs	r0, #2
 800469a:	f003 f9f5 	bl	8007a88 <lcd_print>
 800469e:	e038      	b.n	8004712 <menu+0x335e>
 80046a0:	20000221 	.word	0x20000221
 80046a4:	0800d8d4 	.word	0x0800d8d4
 80046a8:	0800d908 	.word	0x0800d908
 80046ac:	40010800 	.word	0x40010800
 80046b0:	2000022f 	.word	0x2000022f
 80046b4:	20000241 	.word	0x20000241
 80046b8:	20000220 	.word	0x20000220
 80046bc:	2000012c 	.word	0x2000012c
 80046c0:	200001ff 	.word	0x200001ff
 80046c4:	20000001 	.word	0x20000001
 80046c8:	20000000 	.word	0x20000000
 80046cc:	200001fe 	.word	0x200001fe
 80046d0:	200001fd 	.word	0x200001fd
 80046d4:	2000022c 	.word	0x2000022c
 80046d8:	20000200 	.word	0x20000200
 80046dc:	0800d91c 	.word	0x0800d91c
 80046e0:	0800d930 	.word	0x0800d930
 80046e4:	0800d944 	.word	0x0800d944
 80046e8:	0800d958 	.word	0x0800d958
 80046ec:	0800d96c 	.word	0x0800d96c
 80046f0:	2000021f 	.word	0x2000021f
 80046f4:	0800d1c4 	.word	0x0800d1c4
 80046f8:	0800d1d8 	.word	0x0800d1d8
 80046fc:	0800d224 	.word	0x0800d224
			} else if(dilSecim == 1) {
 8004700:	4baa      	ldr	r3, [pc, #680]	; (80049ac <menu+0x35f8>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d104      	bne.n	8004712 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004708:	4aa9      	ldr	r2, [pc, #676]	; (80049b0 <menu+0x35fc>)
 800470a:	2101      	movs	r1, #1
 800470c:	2002      	movs	r0, #2
 800470e:	f003 f9bb 	bl	8007a88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004712:	2102      	movs	r1, #2
 8004714:	48a7      	ldr	r0, [pc, #668]	; (80049b4 <menu+0x3600>)
 8004716:	f004 fcdd 	bl	80090d4 <HAL_GPIO_ReadPin>
 800471a:	4603      	mov	r3, r0
 800471c:	2b01      	cmp	r3, #1
 800471e:	d115      	bne.n	800474c <menu+0x3398>
 8004720:	4ba5      	ldr	r3, [pc, #660]	; (80049b8 <menu+0x3604>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	f083 0301 	eor.w	r3, r3, #1
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00e      	beq.n	800474c <menu+0x3398>
			iotMode = iotMode + 1;
 800472e:	4ba3      	ldr	r3, [pc, #652]	; (80049bc <menu+0x3608>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4ba1      	ldr	r3, [pc, #644]	; (80049bc <menu+0x3608>)
 8004738:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800473a:	4ba0      	ldr	r3, [pc, #640]	; (80049bc <menu+0x3608>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d902      	bls.n	8004748 <menu+0x3394>
				iotMode = 0;
 8004742:	4b9e      	ldr	r3, [pc, #632]	; (80049bc <menu+0x3608>)
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004748:	f000 f9fe 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800474c:	2104      	movs	r1, #4
 800474e:	4899      	ldr	r0, [pc, #612]	; (80049b4 <menu+0x3600>)
 8004750:	f004 fcc0 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004754:	4603      	mov	r3, r0
 8004756:	2b01      	cmp	r3, #1
 8004758:	d115      	bne.n	8004786 <menu+0x33d2>
 800475a:	4b97      	ldr	r3, [pc, #604]	; (80049b8 <menu+0x3604>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00e      	beq.n	8004786 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004768:	4b94      	ldr	r3, [pc, #592]	; (80049bc <menu+0x3608>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	3b01      	subs	r3, #1
 800476e:	b2da      	uxtb	r2, r3
 8004770:	4b92      	ldr	r3, [pc, #584]	; (80049bc <menu+0x3608>)
 8004772:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004774:	4b91      	ldr	r3, [pc, #580]	; (80049bc <menu+0x3608>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <menu+0x33ce>
		   		iotMode = 1;
 800477c:	4b8f      	ldr	r3, [pc, #572]	; (80049bc <menu+0x3608>)
 800477e:	2201      	movs	r2, #1
 8004780:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004782:	f000 f9e1 	bl	8004b48 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004786:	2108      	movs	r1, #8
 8004788:	488a      	ldr	r0, [pc, #552]	; (80049b4 <menu+0x3600>)
 800478a:	f004 fca3 	bl	80090d4 <HAL_GPIO_ReadPin>
 800478e:	4603      	mov	r3, r0
 8004790:	2b01      	cmp	r3, #1
 8004792:	d10e      	bne.n	80047b2 <menu+0x33fe>
 8004794:	4b88      	ldr	r3, [pc, #544]	; (80049b8 <menu+0x3604>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <menu+0x33fe>
			eepromData[48] = iotMode;
 80047a2:	4b86      	ldr	r3, [pc, #536]	; (80049bc <menu+0x3608>)
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	4b86      	ldr	r3, [pc, #536]	; (80049c0 <menu+0x360c>)
 80047a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80047ac:	4b85      	ldr	r3, [pc, #532]	; (80049c4 <menu+0x3610>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80047b2:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <menu+0x3614>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d13e      	bne.n	8004838 <menu+0x3484>
		calismaSayModu = 0;
 80047ba:	4b84      	ldr	r3, [pc, #528]	; (80049cc <menu+0x3618>)
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80047c0:	4b7a      	ldr	r3, [pc, #488]	; (80049ac <menu+0x35f8>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80047c8:	4a81      	ldr	r2, [pc, #516]	; (80049d0 <menu+0x361c>)
 80047ca:	2101      	movs	r1, #1
 80047cc:	2001      	movs	r0, #1
 80047ce:	f003 f95b 	bl	8007a88 <lcd_print>
 80047d2:	e004      	b.n	80047de <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80047d4:	4a7f      	ldr	r2, [pc, #508]	; (80049d4 <menu+0x3620>)
 80047d6:	2101      	movs	r1, #1
 80047d8:	2001      	movs	r0, #1
 80047da:	f003 f955 	bl	8007a88 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80047de:	4a7e      	ldr	r2, [pc, #504]	; (80049d8 <menu+0x3624>)
 80047e0:	2101      	movs	r1, #1
 80047e2:	2002      	movs	r0, #2
 80047e4:	f003 f950 	bl	8007a88 <lcd_print>
		lcd_print(2, 13, "    ");
 80047e8:	4a7c      	ldr	r2, [pc, #496]	; (80049dc <menu+0x3628>)
 80047ea:	210d      	movs	r1, #13
 80047ec:	2002      	movs	r0, #2
 80047ee:	f003 f94b 	bl	8007a88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047f2:	2102      	movs	r1, #2
 80047f4:	486f      	ldr	r0, [pc, #444]	; (80049b4 <menu+0x3600>)
 80047f6:	f004 fc6d 	bl	80090d4 <HAL_GPIO_ReadPin>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d11b      	bne.n	8004838 <menu+0x3484>
 8004800:	2104      	movs	r1, #4
 8004802:	486c      	ldr	r0, [pc, #432]	; (80049b4 <menu+0x3600>)
 8004804:	f004 fc66 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004808:	4603      	mov	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d114      	bne.n	8004838 <menu+0x3484>
 800480e:	4b6a      	ldr	r3, [pc, #424]	; (80049b8 <menu+0x3604>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f083 0301 	eor.w	r3, r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <menu+0x3484>
			takeMachineID();
 800481c:	f002 faa0 	bl	8006d60 <takeMachineID>

			lcd_print(2, 1, machineID);
 8004820:	4a6d      	ldr	r2, [pc, #436]	; (80049d8 <menu+0x3624>)
 8004822:	2101      	movs	r1, #1
 8004824:	2002      	movs	r0, #2
 8004826:	f003 f92f 	bl	8007a88 <lcd_print>
			lcd_print(2, 13, "    ");
 800482a:	4a6c      	ldr	r2, [pc, #432]	; (80049dc <menu+0x3628>)
 800482c:	210d      	movs	r1, #13
 800482e:	2002      	movs	r0, #2
 8004830:	f003 f92a 	bl	8007a88 <lcd_print>

			bekle();
 8004834:	f000 f988 	bl	8004b48 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004838:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <menu+0x3614>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b21      	cmp	r3, #33	; 0x21
 800483e:	d14e      	bne.n	80048de <menu+0x352a>
		calismaSayModu = 0;
 8004840:	4b62      	ldr	r3, [pc, #392]	; (80049cc <menu+0x3618>)
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 8004846:	4866      	ldr	r0, [pc, #408]	; (80049e0 <menu+0x362c>)
 8004848:	f7fb fcec 	bl	8000224 <strlen>
 800484c:	4603      	mov	r3, r0
 800484e:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 8004850:	4a64      	ldr	r2, [pc, #400]	; (80049e4 <menu+0x3630>)
 8004852:	2101      	movs	r1, #1
 8004854:	2001      	movs	r0, #1
 8004856:	f003 f917 	bl	8007a88 <lcd_print>
		if(ssidLength <=16) {
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b10      	cmp	r3, #16
 800485e:	dc0e      	bgt.n	800487e <menu+0x34ca>
			lcd_print(2, 1, wifiSSID);
 8004860:	4a5f      	ldr	r2, [pc, #380]	; (80049e0 <menu+0x362c>)
 8004862:	2101      	movs	r1, #1
 8004864:	2002      	movs	r0, #2
 8004866:	f003 f90f 	bl	8007a88 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3301      	adds	r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	4a5d      	ldr	r2, [pc, #372]	; (80049e8 <menu+0x3634>)
 8004874:	4619      	mov	r1, r3
 8004876:	2002      	movs	r0, #2
 8004878:	f003 f906 	bl	8007a88 <lcd_print>
 800487c:	e005      	b.n	800488a <menu+0x34d6>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 800487e:	2300      	movs	r3, #0
 8004880:	2202      	movs	r2, #2
 8004882:	2101      	movs	r1, #1
 8004884:	4856      	ldr	r0, [pc, #344]	; (80049e0 <menu+0x362c>)
 8004886:	f7fc fcd9 	bl	800123c <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800488a:	2102      	movs	r1, #2
 800488c:	4849      	ldr	r0, [pc, #292]	; (80049b4 <menu+0x3600>)
 800488e:	f004 fc21 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004892:	4603      	mov	r3, r0
 8004894:	2b01      	cmp	r3, #1
 8004896:	d122      	bne.n	80048de <menu+0x352a>
 8004898:	2104      	movs	r1, #4
 800489a:	4846      	ldr	r0, [pc, #280]	; (80049b4 <menu+0x3600>)
 800489c:	f004 fc1a 	bl	80090d4 <HAL_GPIO_ReadPin>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d11b      	bne.n	80048de <menu+0x352a>
 80048a6:	4b44      	ldr	r3, [pc, #272]	; (80049b8 <menu+0x3604>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	f083 0301 	eor.w	r3, r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d014      	beq.n	80048de <menu+0x352a>
			takeWifiSSID();
 80048b4:	f002 fb10 	bl	8006ed8 <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 80048b8:	4a49      	ldr	r2, [pc, #292]	; (80049e0 <menu+0x362c>)
 80048ba:	2101      	movs	r1, #1
 80048bc:	2002      	movs	r0, #2
 80048be:	f003 f8e3 	bl	8007a88 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80048c2:	4847      	ldr	r0, [pc, #284]	; (80049e0 <menu+0x362c>)
 80048c4:	f7fb fcae 	bl	8000224 <strlen>
 80048c8:	4603      	mov	r3, r0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	3301      	adds	r3, #1
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	4a45      	ldr	r2, [pc, #276]	; (80049e8 <menu+0x3634>)
 80048d2:	4619      	mov	r1, r3
 80048d4:	2002      	movs	r0, #2
 80048d6:	f003 f8d7 	bl	8007a88 <lcd_print>

			bekle();
 80048da:	f000 f935 	bl	8004b48 <bekle>
		}
	}

	if (menuSayac == 34) {
 80048de:	4b3a      	ldr	r3, [pc, #232]	; (80049c8 <menu+0x3614>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b22      	cmp	r3, #34	; 0x22
 80048e4:	d14e      	bne.n	8004984 <menu+0x35d0>
		calismaSayModu = 0;
 80048e6:	4b39      	ldr	r3, [pc, #228]	; (80049cc <menu+0x3618>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80048ec:	483f      	ldr	r0, [pc, #252]	; (80049ec <menu+0x3638>)
 80048ee:	f7fb fc99 	bl	8000224 <strlen>
 80048f2:	4603      	mov	r3, r0
 80048f4:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80048f6:	4a3e      	ldr	r2, [pc, #248]	; (80049f0 <menu+0x363c>)
 80048f8:	2101      	movs	r1, #1
 80048fa:	2001      	movs	r0, #1
 80048fc:	f003 f8c4 	bl	8007a88 <lcd_print>

		if(passLength <= 16) {
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b10      	cmp	r3, #16
 8004904:	dc0e      	bgt.n	8004924 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004906:	4a39      	ldr	r2, [pc, #228]	; (80049ec <menu+0x3638>)
 8004908:	2101      	movs	r1, #1
 800490a:	2002      	movs	r0, #2
 800490c:	f003 f8bc 	bl	8007a88 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	3301      	adds	r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4a33      	ldr	r2, [pc, #204]	; (80049e8 <menu+0x3634>)
 800491a:	4619      	mov	r1, r3
 800491c:	2002      	movs	r0, #2
 800491e:	f003 f8b3 	bl	8007a88 <lcd_print>
 8004922:	e005      	b.n	8004930 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004924:	2301      	movs	r3, #1
 8004926:	2202      	movs	r2, #2
 8004928:	2101      	movs	r1, #1
 800492a:	4830      	ldr	r0, [pc, #192]	; (80049ec <menu+0x3638>)
 800492c:	f7fc fc86 	bl	800123c <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004930:	2102      	movs	r1, #2
 8004932:	4820      	ldr	r0, [pc, #128]	; (80049b4 <menu+0x3600>)
 8004934:	f004 fbce 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d122      	bne.n	8004984 <menu+0x35d0>
 800493e:	2104      	movs	r1, #4
 8004940:	481c      	ldr	r0, [pc, #112]	; (80049b4 <menu+0x3600>)
 8004942:	f004 fbc7 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d11b      	bne.n	8004984 <menu+0x35d0>
 800494c:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <menu+0x3604>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	f083 0301 	eor.w	r3, r3, #1
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d014      	beq.n	8004984 <menu+0x35d0>
			takeWifiPass();
 800495a:	f002 fb37 	bl	8006fcc <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 800495e:	4a23      	ldr	r2, [pc, #140]	; (80049ec <menu+0x3638>)
 8004960:	2101      	movs	r1, #1
 8004962:	2002      	movs	r0, #2
 8004964:	f003 f890 	bl	8007a88 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004968:	4820      	ldr	r0, [pc, #128]	; (80049ec <menu+0x3638>)
 800496a:	f7fb fc5b 	bl	8000224 <strlen>
 800496e:	4603      	mov	r3, r0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	3301      	adds	r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <menu+0x3634>)
 8004978:	4619      	mov	r1, r3
 800497a:	2002      	movs	r0, #2
 800497c:	f003 f884 	bl	8007a88 <lcd_print>

			bekle();
 8004980:	f000 f8e2 	bl	8004b48 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004984:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <menu+0x3614>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b23      	cmp	r3, #35	; 0x23
 800498a:	d176      	bne.n	8004a7a <menu+0x36c6>
		if(dilSecim == 0) {
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <menu+0x35f8>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d133      	bne.n	80049fc <menu+0x3648>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <menu+0x3640>)
 8004996:	2101      	movs	r1, #1
 8004998:	2001      	movs	r0, #1
 800499a:	f003 f875 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800499e:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <menu+0x3644>)
 80049a0:	2101      	movs	r1, #1
 80049a2:	2002      	movs	r0, #2
 80049a4:	f003 f870 	bl	8007a88 <lcd_print>
 80049a8:	e036      	b.n	8004a18 <menu+0x3664>
 80049aa:	bf00      	nop
 80049ac:	20000221 	.word	0x20000221
 80049b0:	0800d238 	.word	0x0800d238
 80049b4:	40010800 	.word	0x40010800
 80049b8:	2000022f 	.word	0x2000022f
 80049bc:	2000021f 	.word	0x2000021f
 80049c0:	2000012c 	.word	0x2000012c
 80049c4:	2000022c 	.word	0x2000022c
 80049c8:	20000200 	.word	0x20000200
 80049cc:	20000220 	.word	0x20000220
 80049d0:	0800d980 	.word	0x0800d980
 80049d4:	0800d994 	.word	0x0800d994
 80049d8:	200001a4 	.word	0x200001a4
 80049dc:	0800d9a8 	.word	0x0800d9a8
 80049e0:	200001b0 	.word	0x200001b0
 80049e4:	0800d9b0 	.word	0x0800d9b0
 80049e8:	20000010 	.word	0x20000010
 80049ec:	200001c4 	.word	0x200001c4
 80049f0:	0800d9c4 	.word	0x0800d9c4
 80049f4:	0800d9d8 	.word	0x0800d9d8
 80049f8:	0800d9ec 	.word	0x0800d9ec
		} else if(dilSecim == 1) {
 80049fc:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <menu+0x36d0>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d109      	bne.n	8004a18 <menu+0x3664>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <menu+0x36d4>)
 8004a06:	2101      	movs	r1, #1
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f003 f83d 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <menu+0x36d8>)
 8004a10:	2101      	movs	r1, #1
 8004a12:	2002      	movs	r0, #2
 8004a14:	f003 f838 	bl	8007a88 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004a18:	2108      	movs	r1, #8
 8004a1a:	481d      	ldr	r0, [pc, #116]	; (8004a90 <menu+0x36dc>)
 8004a1c:	f004 fb5a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d129      	bne.n	8004a7a <menu+0x36c6>
			menuGiris = 0;
 8004a26:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <menu+0x36e0>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004a2c:	bf00      	nop
 8004a2e:	481a      	ldr	r0, [pc, #104]	; (8004a98 <menu+0x36e4>)
 8004a30:	f005 f979 	bl	8009d26 <HAL_I2C_GetError>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d0f9      	beq.n	8004a2e <menu+0x367a>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004a3a:	bf00      	nop
 8004a3c:	4816      	ldr	r0, [pc, #88]	; (8004a98 <menu+0x36e4>)
 8004a3e:	f005 f965 	bl	8009d0c <HAL_I2C_GetState>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d1f9      	bne.n	8004a3c <menu+0x3688>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004a48:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a4c:	9302      	str	r3, [sp, #8]
 8004a4e:	236e      	movs	r3, #110	; 0x6e
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <menu+0x36e8>)
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	236e      	movs	r3, #110	; 0x6e
 8004a58:	2200      	movs	r2, #0
 8004a5a:	21a0      	movs	r1, #160	; 0xa0
 8004a5c:	480e      	ldr	r0, [pc, #56]	; (8004a98 <menu+0x36e4>)
 8004a5e:	f004 fdf3 	bl	8009648 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004a62:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004a66:	f003 fd65 	bl	8008534 <HAL_Delay>

			lcd_clear();
 8004a6a:	f003 f839 	bl	8007ae0 <lcd_clear>
			HAL_Delay(500);
 8004a6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a72:	f003 fd5f 	bl	8008534 <HAL_Delay>
			NVIC_SystemReset();
 8004a76:	f7fc fc87 	bl	8001388 <__NVIC_SystemReset>
		}
	}
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000221 	.word	0x20000221
 8004a88:	0800da00 	.word	0x0800da00
 8004a8c:	0800da14 	.word	0x0800da14
 8004a90:	40010800 	.word	0x40010800
 8004a94:	2000021d 	.word	0x2000021d
 8004a98:	20000290 	.word	0x20000290
 8004a9c:	2000012c 	.word	0x2000012c

08004aa0 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <lcdUpdate+0x9c>)
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	2002      	movs	r0, #2
 8004ab6:	f002 ffe7 	bl	8007a88 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004aba:	e03b      	b.n	8004b34 <lcdUpdate+0x94>
	} else if(y==2) {
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d105      	bne.n	8004ace <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <lcdUpdate+0x9c>)
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	2002      	movs	r0, #2
 8004ac8:	f002 ffde 	bl	8007a88 <lcd_print>
}
 8004acc:	e032      	b.n	8004b34 <lcdUpdate+0x94>
	} else if(y==3) {
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d105      	bne.n	8004ae0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <lcdUpdate+0x9c>)
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	2002      	movs	r0, #2
 8004ada:	f002 ffd5 	bl	8007a88 <lcd_print>
}
 8004ade:	e029      	b.n	8004b34 <lcdUpdate+0x94>
	} else if(y==4) {
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d105      	bne.n	8004af2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <lcdUpdate+0x9c>)
 8004ae8:	2104      	movs	r1, #4
 8004aea:	2002      	movs	r0, #2
 8004aec:	f002 ffcc 	bl	8007a88 <lcd_print>
}
 8004af0:	e020      	b.n	8004b34 <lcdUpdate+0x94>
	} else if(y==5) {
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	2b05      	cmp	r3, #5
 8004af6:	d105      	bne.n	8004b04 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004af8:	4a10      	ldr	r2, [pc, #64]	; (8004b3c <lcdUpdate+0x9c>)
 8004afa:	2105      	movs	r1, #5
 8004afc:	2002      	movs	r0, #2
 8004afe:	f002 ffc3 	bl	8007a88 <lcd_print>
}
 8004b02:	e017      	b.n	8004b34 <lcdUpdate+0x94>
	} else if(y==6) {
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d105      	bne.n	8004b16 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004b0a:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <lcdUpdate+0x9c>)
 8004b0c:	2106      	movs	r1, #6
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f002 ffba 	bl	8007a88 <lcd_print>
}
 8004b14:	e00e      	b.n	8004b34 <lcdUpdate+0x94>
	} else if (y==7) {
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	2b07      	cmp	r3, #7
 8004b1a:	d10b      	bne.n	8004b34 <lcdUpdate+0x94>
		lcd_clear();
 8004b1c:	f002 ffe0 	bl	8007ae0 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004b20:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <lcdUpdate+0xa0>)
 8004b22:	2104      	movs	r1, #4
 8004b24:	2001      	movs	r0, #1
 8004b26:	f002 ffaf 	bl	8007a88 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004b2a:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <lcdUpdate+0xa4>)
 8004b2c:	2106      	movs	r1, #6
 8004b2e:	2002      	movs	r0, #2
 8004b30:	f002 ffaa 	bl	8007a88 <lcd_print>
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	0800da28 	.word	0x0800da28
 8004b40:	0800da2c 	.word	0x0800da2c
 8004b44:	0800da34 	.word	0x0800da34

08004b48 <bekle>:

void bekle() {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
	timer1=millis;
 8004b4c:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <bekle+0x124>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a47      	ldr	r2, [pc, #284]	; (8004c70 <bekle+0x128>)
 8004b52:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b54:	e002      	b.n	8004b5c <bekle+0x14>
    	butonKontrol = 1;
 8004b56:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <bekle+0x12c>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4846      	ldr	r0, [pc, #280]	; (8004c78 <bekle+0x130>)
 8004b60:	f004 fab8 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d109      	bne.n	8004b7e <bekle+0x36>
 8004b6a:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <bekle+0x124>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b40      	ldr	r3, [pc, #256]	; (8004c70 <bekle+0x128>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d0ef      	beq.n	8004b56 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b76:	e002      	b.n	8004b7e <bekle+0x36>
    	butonKontrol = 1;
 8004b78:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <bekle+0x12c>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b7e:	2108      	movs	r1, #8
 8004b80:	483e      	ldr	r0, [pc, #248]	; (8004c7c <bekle+0x134>)
 8004b82:	f004 faa7 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d109      	bne.n	8004ba0 <bekle+0x58>
 8004b8c:	4b37      	ldr	r3, [pc, #220]	; (8004c6c <bekle+0x124>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <bekle+0x128>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d0ef      	beq.n	8004b78 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b98:	e002      	b.n	8004ba0 <bekle+0x58>
    	butonKontrol = 1;
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <bekle+0x12c>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4835      	ldr	r0, [pc, #212]	; (8004c78 <bekle+0x130>)
 8004ba4:	f004 fa96 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d109      	bne.n	8004bc2 <bekle+0x7a>
 8004bae:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <bekle+0x124>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b2f      	ldr	r3, [pc, #188]	; (8004c70 <bekle+0x128>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d0ef      	beq.n	8004b9a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bba:	e002      	b.n	8004bc2 <bekle+0x7a>
    	butonKontrol = 1;
 8004bbc:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <bekle+0x12c>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	482c      	ldr	r0, [pc, #176]	; (8004c78 <bekle+0x130>)
 8004bc6:	f004 fa85 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d109      	bne.n	8004be4 <bekle+0x9c>
 8004bd0:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <bekle+0x124>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <bekle+0x128>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0ef      	beq.n	8004bbc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bdc:	e002      	b.n	8004be4 <bekle+0x9c>
    	butonKontrol = 1;
 8004bde:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <bekle+0x12c>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004be4:	2108      	movs	r1, #8
 8004be6:	4824      	ldr	r0, [pc, #144]	; (8004c78 <bekle+0x130>)
 8004be8:	f004 fa74 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d109      	bne.n	8004c06 <bekle+0xbe>
 8004bf2:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <bekle+0x124>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <bekle+0x128>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d0ef      	beq.n	8004bde <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bfe:	e002      	b.n	8004c06 <bekle+0xbe>
    	butonKontrol = 1;
 8004c00:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <bekle+0x12c>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	481c      	ldr	r0, [pc, #112]	; (8004c7c <bekle+0x134>)
 8004c0a:	f004 fa63 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <bekle+0xe0>
 8004c14:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <bekle+0x124>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <bekle+0x128>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d0ef      	beq.n	8004c00 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c20:	e002      	b.n	8004c28 <bekle+0xe0>
    	butonKontrol = 1;
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <bekle+0x12c>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c2c:	4813      	ldr	r0, [pc, #76]	; (8004c7c <bekle+0x134>)
 8004c2e:	f004 fa51 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <bekle+0x104>
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <bekle+0x124>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <bekle+0x128>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d0ee      	beq.n	8004c22 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c44:	e002      	b.n	8004c4c <bekle+0x104>
    	butonKontrol = 1;
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <bekle+0x12c>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c50:	480a      	ldr	r0, [pc, #40]	; (8004c7c <bekle+0x134>)
 8004c52:	f004 fa3f 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <bekle+0x120>
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <bekle+0x124>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <bekle+0x128>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d0ee      	beq.n	8004c46 <bekle+0xfe>
    }

}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200001dc 	.word	0x200001dc
 8004c70:	200001e4 	.word	0x200001e4
 8004c74:	2000022f 	.word	0x2000022f
 8004c78:	40010800 	.word	0x40010800
 8004c7c:	40011000 	.word	0x40011000

08004c80 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <checkLCDBacklight+0x24>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <checkLCDBacklight+0x28>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b3b      	cmp	r3, #59	; 0x3b
 8004c90:	d903      	bls.n	8004c9a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f002 ff44 	bl	8007b20 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c98:	e002      	b.n	8004ca0 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	f002 ff40 	bl	8007b20 <lcd_backlight>
}
 8004ca0:	bf00      	nop
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200001dc 	.word	0x200001dc
 8004ca8:	200001f8 	.word	0x200001f8

08004cac <checkBasincSalteri>:

void checkBasincSalteri() {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <checkBasincSalteri+0x54>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <checkBasincSalteri+0x12>
		basincVar=1;
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <checkBasincSalteri+0x58>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <checkBasincSalteri+0x54>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d119      	bne.n	8004cfa <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cca:	480f      	ldr	r0, [pc, #60]	; (8004d08 <checkBasincSalteri+0x5c>)
 8004ccc:	f004 fa02 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <checkBasincSalteri+0x60>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <checkBasincSalteri+0x64>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d90a      	bls.n	8004cfa <checkBasincSalteri+0x4e>
				basincVar=1;
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <checkBasincSalteri+0x58>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004cea:	e006      	b.n	8004cfa <checkBasincSalteri+0x4e>
			timer5=millis;
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <checkBasincSalteri+0x60>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a07      	ldr	r2, [pc, #28]	; (8004d10 <checkBasincSalteri+0x64>)
 8004cf2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004cf4:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <checkBasincSalteri+0x58>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000207 	.word	0x20000207
 8004d04:	20000203 	.word	0x20000203
 8004d08:	40011000 	.word	0x40011000
 8004d0c:	200001dc 	.word	0x200001dc
 8004d10:	200001f4 	.word	0x200001f4

08004d14 <checkBasGonder>:

void checkBasGonder() {
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <checkBasGonder+0x74>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10b      	bne.n	8004d38 <checkBasGonder+0x24>
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <checkBasGonder+0x78>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <checkBasGonder+0x24>
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <checkBasGonder+0x7c>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004d30:	4b18      	ldr	r3, [pc, #96]	; (8004d94 <checkBasGonder+0x80>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e009      	b.n	8004d4c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004d38:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <checkBasGonder+0x78>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	f083 0301 	eor.w	r3, r3, #1
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <checkBasGonder+0x80>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <checkBasGonder+0x74>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10b      	bne.n	8004d6c <checkBasGonder+0x58>
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <checkBasGonder+0x84>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <checkBasGonder+0x58>
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <checkBasGonder+0x7c>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <checkBasGonder+0x88>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004d6a:	e009      	b.n	8004d80 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <checkBasGonder+0x84>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f083 0301 	eor.w	r3, r3, #1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004d7a:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <checkBasGonder+0x88>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr
 8004d88:	20000201 	.word	0x20000201
 8004d8c:	20000235 	.word	0x20000235
 8004d90:	2000020f 	.word	0x2000020f
 8004d94:	2000023c 	.word	0x2000023c
 8004d98:	20000238 	.word	0x20000238
 8004d9c:	2000023d 	.word	0x2000023d

08004da0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <checkKapiSecimleri+0x98>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004dac:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <checkKapiSecimleri+0x9c>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004db2:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <checkKapiSecimleri+0x98>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d10e      	bne.n	8004dd8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dbe:	4820      	ldr	r0, [pc, #128]	; (8004e40 <checkKapiSecimleri+0xa0>)
 8004dc0:	f004 f988 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <checkKapiSecimleri+0x9c>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	e002      	b.n	8004dd8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <checkKapiSecimleri+0x9c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <checkKapiSecimleri+0x98>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d10e      	bne.n	8004dfe <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004de4:	4816      	ldr	r0, [pc, #88]	; (8004e40 <checkKapiSecimleri+0xa0>)
 8004de6:	f004 f975 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004df0:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <checkKapiSecimleri+0x9c>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e002      	b.n	8004dfe <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004df8:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <checkKapiSecimleri+0x9c>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <checkKapiSecimleri+0x98>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d116      	bne.n	8004e34 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e0a:	480d      	ldr	r0, [pc, #52]	; (8004e40 <checkKapiSecimleri+0xa0>)
 8004e0c:	f004 f962 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <checkKapiSecimleri+0x8e>
 8004e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e1a:	4809      	ldr	r0, [pc, #36]	; (8004e40 <checkKapiSecimleri+0xa0>)
 8004e1c:	f004 f95a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <checkKapiSecimleri+0x9c>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004e2c:	e002      	b.n	8004e34 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004e2e:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <checkKapiSecimleri+0x9c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000208 	.word	0x20000208
 8004e3c:	20000253 	.word	0x20000253
 8004e40:	40010800 	.word	0x40010800

08004e44 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004e48:	4b62      	ldr	r3, [pc, #392]	; (8004fd4 <checkAktifCalisma+0x190>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f041 833e 	bne.w	80064ce <checkAktifCalisma+0x168a>
 8004e52:	4b61      	ldr	r3, [pc, #388]	; (8004fd8 <checkAktifCalisma+0x194>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f041 8339 	bne.w	80064ce <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004e5c:	4b5f      	ldr	r3, [pc, #380]	; (8004fdc <checkAktifCalisma+0x198>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11a      	bne.n	8004e9a <checkAktifCalisma+0x56>
 8004e64:	4b5e      	ldr	r3, [pc, #376]	; (8004fe0 <checkAktifCalisma+0x19c>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d116      	bne.n	8004e9a <checkAktifCalisma+0x56>
 8004e6c:	4b5d      	ldr	r3, [pc, #372]	; (8004fe4 <checkAktifCalisma+0x1a0>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <checkAktifCalisma+0x46>
 8004e74:	4b5c      	ldr	r3, [pc, #368]	; (8004fe8 <checkAktifCalisma+0x1a4>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f083 0301 	eor.w	r3, r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <checkAktifCalisma+0x46>
 8004e82:	4b5a      	ldr	r3, [pc, #360]	; (8004fec <checkAktifCalisma+0x1a8>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d007      	beq.n	8004e9a <checkAktifCalisma+0x56>
 8004e8a:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <checkAktifCalisma+0x1ac>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d018      	beq.n	8004ec4 <checkAktifCalisma+0x80>
 8004e92:	4b58      	ldr	r3, [pc, #352]	; (8004ff4 <checkAktifCalisma+0x1b0>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d114      	bne.n	8004ec4 <checkAktifCalisma+0x80>
 8004e9a:	4b57      	ldr	r3, [pc, #348]	; (8004ff8 <checkAktifCalisma+0x1b4>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d010      	beq.n	8004ec4 <checkAktifCalisma+0x80>
 8004ea2:	4b56      	ldr	r3, [pc, #344]	; (8004ffc <checkAktifCalisma+0x1b8>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eb0:	4853      	ldr	r0, [pc, #332]	; (8005000 <checkAktifCalisma+0x1bc>)
 8004eb2:	f004 f926 	bl	8009102 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004eb6:	4b53      	ldr	r3, [pc, #332]	; (8005004 <checkAktifCalisma+0x1c0>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004ebc:	4b52      	ldr	r3, [pc, #328]	; (8005008 <checkAktifCalisma+0x1c4>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e008      	b.n	8004ed6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eca:	484d      	ldr	r0, [pc, #308]	; (8005000 <checkAktifCalisma+0x1bc>)
 8004ecc:	f004 f919 	bl	8009102 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004ed0:	4b4c      	ldr	r3, [pc, #304]	; (8005004 <checkAktifCalisma+0x1c0>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004ed6:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <checkAktifCalisma+0x194>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d160      	bne.n	8004fa0 <checkAktifCalisma+0x15c>
 8004ede:	4b46      	ldr	r3, [pc, #280]	; (8004ff8 <checkAktifCalisma+0x1b4>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d05c      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
 8004ee6:	4b45      	ldr	r3, [pc, #276]	; (8004ffc <checkAktifCalisma+0x1b8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d058      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004eee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ef2:	4843      	ldr	r0, [pc, #268]	; (8005000 <checkAktifCalisma+0x1bc>)
 8004ef4:	f004 f8ee 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <checkAktifCalisma+0xc2>
 8004efe:	4b43      	ldr	r3, [pc, #268]	; (800500c <checkAktifCalisma+0x1c8>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d04c      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f06:	2102      	movs	r1, #2
 8004f08:	4841      	ldr	r0, [pc, #260]	; (8005010 <checkAktifCalisma+0x1cc>)
 8004f0a:	f004 f8e3 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d145      	bne.n	8004fa0 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004f14:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <checkAktifCalisma+0x1d0>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d041      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f20:	4837      	ldr	r0, [pc, #220]	; (8005000 <checkAktifCalisma+0x1bc>)
 8004f22:	f004 f8d7 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10e      	bne.n	8004f4a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f30:	4833      	ldr	r0, [pc, #204]	; (8005000 <checkAktifCalisma+0x1bc>)
 8004f32:	f004 f8cf 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d106      	bne.n	8004f4a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004f3c:	2140      	movs	r1, #64	; 0x40
 8004f3e:	4834      	ldr	r0, [pc, #208]	; (8005010 <checkAktifCalisma+0x1cc>)
 8004f40:	f004 f8c8 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d003      	beq.n	8004f52 <checkAktifCalisma+0x10e>
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <checkAktifCalisma+0x198>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d026      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <checkAktifCalisma+0x1a0>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f083 0301 	eor.w	r3, r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01f      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004f60:	4b1f      	ldr	r3, [pc, #124]	; (8004fe0 <checkAktifCalisma+0x19c>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	f083 0301 	eor.w	r3, r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004f6e:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <checkAktifCalisma+0x1ac>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	f083 0301 	eor.w	r3, r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d011      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004f7c:	4b26      	ldr	r3, [pc, #152]	; (8005018 <checkAktifCalisma+0x1d4>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f083 0301 	eor.w	r3, r3, #1
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <checkAktifCalisma+0x1d8>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	f083 0301 	eor.w	r3, r3, #1
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <checkAktifCalisma+0x198>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e002      	b.n	8004fa6 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004fa0:	4b0e      	ldr	r3, [pc, #56]	; (8004fdc <checkAktifCalisma+0x198>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <checkAktifCalisma+0x198>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d03a      	beq.n	8005024 <checkAktifCalisma+0x1e0>
 8004fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fb2:	4817      	ldr	r0, [pc, #92]	; (8005010 <checkAktifCalisma+0x1cc>)
 8004fb4:	f004 f88e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d132      	bne.n	8005024 <checkAktifCalisma+0x1e0>
 8004fbe:	4b18      	ldr	r3, [pc, #96]	; (8005020 <checkAktifCalisma+0x1dc>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02e      	beq.n	8005024 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fcc:	480c      	ldr	r0, [pc, #48]	; (8005000 <checkAktifCalisma+0x1bc>)
 8004fce:	f004 f898 	bl	8009102 <HAL_GPIO_WritePin>
 8004fd2:	e02d      	b.n	8005030 <checkAktifCalisma+0x1ec>
 8004fd4:	2000021e 	.word	0x2000021e
 8004fd8:	2000021d 	.word	0x2000021d
 8004fdc:	20000235 	.word	0x20000235
 8004fe0:	20000236 	.word	0x20000236
 8004fe4:	20000238 	.word	0x20000238
 8004fe8:	20000230 	.word	0x20000230
 8004fec:	20000213 	.word	0x20000213
 8004ff0:	20000237 	.word	0x20000237
 8004ff4:	20000212 	.word	0x20000212
 8004ff8:	20000252 	.word	0x20000252
 8004ffc:	20000253 	.word	0x20000253
 8005000:	40010c00 	.word	0x40010c00
 8005004:	20000254 	.word	0x20000254
 8005008:	2000023f 	.word	0x2000023f
 800500c:	2000023c 	.word	0x2000023c
 8005010:	40011000 	.word	0x40011000
 8005014:	20000203 	.word	0x20000203
 8005018:	2000023a 	.word	0x2000023a
 800501c:	2000023b 	.word	0x2000023b
 8005020:	2000020e 	.word	0x2000020e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800502a:	4860      	ldr	r0, [pc, #384]	; (80051ac <checkAktifCalisma+0x368>)
 800502c:	f004 f869 	bl	8009102 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005030:	4b5f      	ldr	r3, [pc, #380]	; (80051b0 <checkAktifCalisma+0x36c>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d013      	beq.n	8005060 <checkAktifCalisma+0x21c>
 8005038:	4b5e      	ldr	r3, [pc, #376]	; (80051b4 <checkAktifCalisma+0x370>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d007      	beq.n	8005050 <checkAktifCalisma+0x20c>
 8005040:	4b5c      	ldr	r3, [pc, #368]	; (80051b4 <checkAktifCalisma+0x370>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d003      	beq.n	8005050 <checkAktifCalisma+0x20c>
 8005048:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <checkAktifCalisma+0x374>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d107      	bne.n	8005060 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005050:	2201      	movs	r2, #1
 8005052:	2104      	movs	r1, #4
 8005054:	4855      	ldr	r0, [pc, #340]	; (80051ac <checkAktifCalisma+0x368>)
 8005056:	f004 f854 	bl	8009102 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800505a:	4b58      	ldr	r3, [pc, #352]	; (80051bc <checkAktifCalisma+0x378>)
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005060:	4b56      	ldr	r3, [pc, #344]	; (80051bc <checkAktifCalisma+0x378>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d02f      	beq.n	80050c8 <checkAktifCalisma+0x284>
 8005068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800506c:	484f      	ldr	r0, [pc, #316]	; (80051ac <checkAktifCalisma+0x368>)
 800506e:	f004 f831 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <checkAktifCalisma+0x242>
 8005078:	4b51      	ldr	r3, [pc, #324]	; (80051c0 <checkAktifCalisma+0x37c>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f083 0301 	eor.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <checkAktifCalisma+0x250>
 8005086:	2102      	movs	r1, #2
 8005088:	484e      	ldr	r0, [pc, #312]	; (80051c4 <checkAktifCalisma+0x380>)
 800508a:	f004 f823 	bl	80090d4 <HAL_GPIO_ReadPin>
 800508e:	4603      	mov	r3, r0
 8005090:	2b01      	cmp	r3, #1
 8005092:	d119      	bne.n	80050c8 <checkAktifCalisma+0x284>
 8005094:	4b4c      	ldr	r3, [pc, #304]	; (80051c8 <checkAktifCalisma+0x384>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d015      	beq.n	80050c8 <checkAktifCalisma+0x284>
 800509c:	4b4b      	ldr	r3, [pc, #300]	; (80051cc <checkAktifCalisma+0x388>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d011      	beq.n	80050c8 <checkAktifCalisma+0x284>
 80050a4:	4b4a      	ldr	r3, [pc, #296]	; (80051d0 <checkAktifCalisma+0x38c>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <checkAktifCalisma+0x284>
 80050ac:	4b49      	ldr	r3, [pc, #292]	; (80051d4 <checkAktifCalisma+0x390>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	f083 0301 	eor.w	r3, r3, #1
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d006      	beq.n	80050c8 <checkAktifCalisma+0x284>
			timer2=millis;
 80050ba:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <checkAktifCalisma+0x394>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a47      	ldr	r2, [pc, #284]	; (80051dc <checkAktifCalisma+0x398>)
 80050c0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80050c2:	4b44      	ldr	r3, [pc, #272]	; (80051d4 <checkAktifCalisma+0x390>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80050c8:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <checkAktifCalisma+0x394>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b43      	ldr	r3, [pc, #268]	; (80051dc <checkAktifCalisma+0x398>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	4a43      	ldr	r2, [pc, #268]	; (80051e0 <checkAktifCalisma+0x39c>)
 80050d4:	7812      	ldrb	r2, [r2, #0]
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d303      	bcc.n	80050e2 <checkAktifCalisma+0x29e>
 80050da:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <checkAktifCalisma+0x390>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d111      	bne.n	8005106 <checkAktifCalisma+0x2c2>
 80050e2:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <checkAktifCalisma+0x384>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	f083 0301 	eor.w	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <checkAktifCalisma+0x2c2>
 80050f0:	4b36      	ldr	r3, [pc, #216]	; (80051cc <checkAktifCalisma+0x388>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f083 0301 	eor.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <checkAktifCalisma+0x2c2>
 80050fe:	4b34      	ldr	r3, [pc, #208]	; (80051d0 <checkAktifCalisma+0x38c>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005106:	2200      	movs	r2, #0
 8005108:	2104      	movs	r1, #4
 800510a:	4828      	ldr	r0, [pc, #160]	; (80051ac <checkAktifCalisma+0x368>)
 800510c:	f003 fff9 	bl	8009102 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005110:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <checkAktifCalisma+0x378>)
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005116:	4b2f      	ldr	r3, [pc, #188]	; (80051d4 <checkAktifCalisma+0x390>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800511c:	4b31      	ldr	r3, [pc, #196]	; (80051e4 <checkAktifCalisma+0x3a0>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005124:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <checkAktifCalisma+0x3a4>)
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800512a:	4b2e      	ldr	r3, [pc, #184]	; (80051e4 <checkAktifCalisma+0x3a0>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d116      	bne.n	8005160 <checkAktifCalisma+0x31c>
 8005132:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <checkAktifCalisma+0x3a8>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d112      	bne.n	8005160 <checkAktifCalisma+0x31c>
 800513a:	2101      	movs	r1, #1
 800513c:	4821      	ldr	r0, [pc, #132]	; (80051c4 <checkAktifCalisma+0x380>)
 800513e:	f003 ffc9 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <checkAktifCalisma+0x31c>
 8005148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800514c:	4817      	ldr	r0, [pc, #92]	; (80051ac <checkAktifCalisma+0x368>)
 800514e:	f003 ffc1 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005158:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <checkAktifCalisma+0x3a4>)
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e011      	b.n	8005184 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005160:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <checkAktifCalisma+0x3a0>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d10d      	bne.n	8005184 <checkAktifCalisma+0x340>
 8005168:	2101      	movs	r1, #1
 800516a:	4816      	ldr	r0, [pc, #88]	; (80051c4 <checkAktifCalisma+0x380>)
 800516c:	f003 ffb2 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d106      	bne.n	8005184 <checkAktifCalisma+0x340>
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <checkAktifCalisma+0x3a8>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800517e:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <checkAktifCalisma+0x3a4>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005184:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <checkAktifCalisma+0x3a0>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d134      	bne.n	80051f6 <checkAktifCalisma+0x3b2>
 800518c:	4b17      	ldr	r3, [pc, #92]	; (80051ec <checkAktifCalisma+0x3a8>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d130      	bne.n	80051f6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005194:	2101      	movs	r1, #1
 8005196:	480b      	ldr	r0, [pc, #44]	; (80051c4 <checkAktifCalisma+0x380>)
 8005198:	f003 ff9c 	bl	80090d4 <HAL_GPIO_ReadPin>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d126      	bne.n	80051f0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <checkAktifCalisma+0x3a4>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	e025      	b.n	80051f6 <checkAktifCalisma+0x3b2>
 80051aa:	bf00      	nop
 80051ac:	40010c00 	.word	0x40010c00
 80051b0:	20000235 	.word	0x20000235
 80051b4:	2000020f 	.word	0x2000020f
 80051b8:	20000213 	.word	0x20000213
 80051bc:	20000239 	.word	0x20000239
 80051c0:	2000023c 	.word	0x2000023c
 80051c4:	40011000 	.word	0x40011000
 80051c8:	20000252 	.word	0x20000252
 80051cc:	20000253 	.word	0x20000253
 80051d0:	20000203 	.word	0x20000203
 80051d4:	20000231 	.word	0x20000231
 80051d8:	200001dc 	.word	0x200001dc
 80051dc:	200001e8 	.word	0x200001e8
 80051e0:	20000214 	.word	0x20000214
 80051e4:	20000204 	.word	0x20000204
 80051e8:	20000257 	.word	0x20000257
 80051ec:	20000201 	.word	0x20000201
			} else {
				cerceveVar=0;
 80051f0:	4b7f      	ldr	r3, [pc, #508]	; (80053f0 <checkAktifCalisma+0x5ac>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80051f6:	4b7f      	ldr	r3, [pc, #508]	; (80053f4 <checkAktifCalisma+0x5b0>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d17c      	bne.n	80052f8 <checkAktifCalisma+0x4b4>
 80051fe:	4b7e      	ldr	r3, [pc, #504]	; (80053f8 <checkAktifCalisma+0x5b4>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d078      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
 8005206:	4b7d      	ldr	r3, [pc, #500]	; (80053fc <checkAktifCalisma+0x5b8>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d074      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800520e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005212:	487b      	ldr	r0, [pc, #492]	; (8005400 <checkAktifCalisma+0x5bc>)
 8005214:	f003 ff5e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <checkAktifCalisma+0x3e2>
 800521e:	4b79      	ldr	r3, [pc, #484]	; (8005404 <checkAktifCalisma+0x5c0>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d068      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005226:	4b72      	ldr	r3, [pc, #456]	; (80053f0 <checkAktifCalisma+0x5ac>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d064      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
 800522e:	4b76      	ldr	r3, [pc, #472]	; (8005408 <checkAktifCalisma+0x5c4>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f083 0301 	eor.w	r3, r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d05d      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800523c:	2104      	movs	r1, #4
 800523e:	4873      	ldr	r0, [pc, #460]	; (800540c <checkAktifCalisma+0x5c8>)
 8005240:	f003 ff48 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <checkAktifCalisma+0x40e>
 800524a:	4b71      	ldr	r3, [pc, #452]	; (8005410 <checkAktifCalisma+0x5cc>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d152      	bne.n	80052f8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005256:	486a      	ldr	r0, [pc, #424]	; (8005400 <checkAktifCalisma+0x5bc>)
 8005258:	f003 ff3c 	bl	80090d4 <HAL_GPIO_ReadPin>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10e      	bne.n	8005280 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005266:	4866      	ldr	r0, [pc, #408]	; (8005400 <checkAktifCalisma+0x5bc>)
 8005268:	f003 ff34 	bl	80090d4 <HAL_GPIO_ReadPin>
 800526c:	4603      	mov	r3, r0
 800526e:	2b01      	cmp	r3, #1
 8005270:	d106      	bne.n	8005280 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005272:	2140      	movs	r1, #64	; 0x40
 8005274:	4865      	ldr	r0, [pc, #404]	; (800540c <checkAktifCalisma+0x5c8>)
 8005276:	f003 ff2d 	bl	80090d4 <HAL_GPIO_ReadPin>
 800527a:	4603      	mov	r3, r0
 800527c:	2b01      	cmp	r3, #1
 800527e:	d003      	beq.n	8005288 <checkAktifCalisma+0x444>
 8005280:	4b64      	ldr	r3, [pc, #400]	; (8005414 <checkAktifCalisma+0x5d0>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d037      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005288:	4b63      	ldr	r3, [pc, #396]	; (8005418 <checkAktifCalisma+0x5d4>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f083 0301 	eor.w	r3, r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d030      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005296:	4b61      	ldr	r3, [pc, #388]	; (800541c <checkAktifCalisma+0x5d8>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	f083 0301 	eor.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d029      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80052a4:	4b5e      	ldr	r3, [pc, #376]	; (8005420 <checkAktifCalisma+0x5dc>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	f083 0301 	eor.w	r3, r3, #1
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d022      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80052b2:	4b5c      	ldr	r3, [pc, #368]	; (8005424 <checkAktifCalisma+0x5e0>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f083 0301 	eor.w	r3, r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01b      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80052c0:	4b59      	ldr	r3, [pc, #356]	; (8005428 <checkAktifCalisma+0x5e4>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f083 0301 	eor.w	r3, r3, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d014      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80052ce:	4b57      	ldr	r3, [pc, #348]	; (800542c <checkAktifCalisma+0x5e8>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	f083 0301 	eor.w	r3, r3, #1
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80052dc:	2201      	movs	r2, #1
 80052de:	2102      	movs	r1, #2
 80052e0:	4847      	ldr	r0, [pc, #284]	; (8005400 <checkAktifCalisma+0x5bc>)
 80052e2:	f003 ff0e 	bl	8009102 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80052e6:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <checkAktifCalisma+0x5d0>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80052ec:	4b50      	ldr	r3, [pc, #320]	; (8005430 <checkAktifCalisma+0x5ec>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80052f2:	4b50      	ldr	r3, [pc, #320]	; (8005434 <checkAktifCalisma+0x5f0>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80052f8:	4b46      	ldr	r3, [pc, #280]	; (8005414 <checkAktifCalisma+0x5d0>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d033      	beq.n	8005368 <checkAktifCalisma+0x524>
 8005300:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005304:	483e      	ldr	r0, [pc, #248]	; (8005400 <checkAktifCalisma+0x5bc>)
 8005306:	f003 fee5 	bl	80090d4 <HAL_GPIO_ReadPin>
 800530a:	4603      	mov	r3, r0
 800530c:	2b01      	cmp	r3, #1
 800530e:	d106      	bne.n	800531e <checkAktifCalisma+0x4da>
 8005310:	4b3c      	ldr	r3, [pc, #240]	; (8005404 <checkAktifCalisma+0x5c0>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f083 0301 	eor.w	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <checkAktifCalisma+0x4f0>
 800531e:	2104      	movs	r1, #4
 8005320:	483a      	ldr	r0, [pc, #232]	; (800540c <checkAktifCalisma+0x5c8>)
 8005322:	f003 fed7 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005326:	4603      	mov	r3, r0
 8005328:	2b01      	cmp	r3, #1
 800532a:	d11d      	bne.n	8005368 <checkAktifCalisma+0x524>
 800532c:	4b38      	ldr	r3, [pc, #224]	; (8005410 <checkAktifCalisma+0x5cc>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d019      	beq.n	8005368 <checkAktifCalisma+0x524>
 8005334:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <checkAktifCalisma+0x5b4>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d015      	beq.n	8005368 <checkAktifCalisma+0x524>
 800533c:	4b2f      	ldr	r3, [pc, #188]	; (80053fc <checkAktifCalisma+0x5b8>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d011      	beq.n	8005368 <checkAktifCalisma+0x524>
 8005344:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <checkAktifCalisma+0x5ac>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <checkAktifCalisma+0x524>
 800534c:	4b3a      	ldr	r3, [pc, #232]	; (8005438 <checkAktifCalisma+0x5f4>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f083 0301 	eor.w	r3, r3, #1
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <checkAktifCalisma+0x524>
			timer2=millis;
 800535a:	4b38      	ldr	r3, [pc, #224]	; (800543c <checkAktifCalisma+0x5f8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a38      	ldr	r2, [pc, #224]	; (8005440 <checkAktifCalisma+0x5fc>)
 8005360:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005362:	4b35      	ldr	r3, [pc, #212]	; (8005438 <checkAktifCalisma+0x5f4>)
 8005364:	2201      	movs	r2, #1
 8005366:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005368:	4b34      	ldr	r3, [pc, #208]	; (800543c <checkAktifCalisma+0x5f8>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4b34      	ldr	r3, [pc, #208]	; (8005440 <checkAktifCalisma+0x5fc>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	4a34      	ldr	r2, [pc, #208]	; (8005444 <checkAktifCalisma+0x600>)
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	4293      	cmp	r3, r2
 8005378:	d303      	bcc.n	8005382 <checkAktifCalisma+0x53e>
 800537a:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <checkAktifCalisma+0x5f4>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d114      	bne.n	80053ac <checkAktifCalisma+0x568>
 8005382:	4b1d      	ldr	r3, [pc, #116]	; (80053f8 <checkAktifCalisma+0x5b4>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f083 0301 	eor.w	r3, r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10d      	bne.n	80053ac <checkAktifCalisma+0x568>
 8005390:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <checkAktifCalisma+0x5b8>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f083 0301 	eor.w	r3, r3, #1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <checkAktifCalisma+0x568>
 800539e:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <checkAktifCalisma+0x5ac>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	f083 0301 	eor.w	r3, r3, #1
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80053ac:	2200      	movs	r2, #0
 80053ae:	2102      	movs	r1, #2
 80053b0:	4813      	ldr	r0, [pc, #76]	; (8005400 <checkAktifCalisma+0x5bc>)
 80053b2:	f003 fea6 	bl	8009102 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80053b6:	4b17      	ldr	r3, [pc, #92]	; (8005414 <checkAktifCalisma+0x5d0>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80053bc:	4b1e      	ldr	r3, [pc, #120]	; (8005438 <checkAktifCalisma+0x5f4>)
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <checkAktifCalisma+0x5d0>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d040      	beq.n	800544c <checkAktifCalisma+0x608>
 80053ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053ce:	480f      	ldr	r0, [pc, #60]	; (800540c <checkAktifCalisma+0x5c8>)
 80053d0:	f003 fe80 	bl	80090d4 <HAL_GPIO_ReadPin>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d138      	bne.n	800544c <checkAktifCalisma+0x608>
 80053da:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <checkAktifCalisma+0x604>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d034      	beq.n	800544c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80053e2:	2201      	movs	r2, #1
 80053e4:	2101      	movs	r1, #1
 80053e6:	4806      	ldr	r0, [pc, #24]	; (8005400 <checkAktifCalisma+0x5bc>)
 80053e8:	f003 fe8b 	bl	8009102 <HAL_GPIO_WritePin>
 80053ec:	e033      	b.n	8005456 <checkAktifCalisma+0x612>
 80053ee:	bf00      	nop
 80053f0:	20000257 	.word	0x20000257
 80053f4:	2000021d 	.word	0x2000021d
 80053f8:	20000252 	.word	0x20000252
 80053fc:	20000253 	.word	0x20000253
 8005400:	40010c00 	.word	0x40010c00
 8005404:	2000023d 	.word	0x2000023d
 8005408:	20000251 	.word	0x20000251
 800540c:	40011000 	.word	0x40011000
 8005410:	20000206 	.word	0x20000206
 8005414:	20000238 	.word	0x20000238
 8005418:	20000235 	.word	0x20000235
 800541c:	20000239 	.word	0x20000239
 8005420:	20000236 	.word	0x20000236
 8005424:	20000237 	.word	0x20000237
 8005428:	2000023a 	.word	0x2000023a
 800542c:	2000023b 	.word	0x2000023b
 8005430:	20000240 	.word	0x20000240
 8005434:	20000261 	.word	0x20000261
 8005438:	20000230 	.word	0x20000230
 800543c:	200001dc 	.word	0x200001dc
 8005440:	200001e8 	.word	0x200001e8
 8005444:	20000215 	.word	0x20000215
 8005448:	20000205 	.word	0x20000205
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800544c:	2200      	movs	r2, #0
 800544e:	2101      	movs	r1, #1
 8005450:	4836      	ldr	r0, [pc, #216]	; (800552c <checkAktifCalisma+0x6e8>)
 8005452:	f003 fe56 	bl	8009102 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005456:	4b36      	ldr	r3, [pc, #216]	; (8005530 <checkAktifCalisma+0x6ec>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 8080 	bne.w	8005560 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005460:	4b34      	ldr	r3, [pc, #208]	; (8005534 <checkAktifCalisma+0x6f0>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d003      	beq.n	8005470 <checkAktifCalisma+0x62c>
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <checkAktifCalisma+0x6f0>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d177      	bne.n	8005560 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005470:	4b31      	ldr	r3, [pc, #196]	; (8005538 <checkAktifCalisma+0x6f4>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d073      	beq.n	8005560 <checkAktifCalisma+0x71c>
 8005478:	4b30      	ldr	r3, [pc, #192]	; (800553c <checkAktifCalisma+0x6f8>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d06f      	beq.n	8005560 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005484:	4829      	ldr	r0, [pc, #164]	; (800552c <checkAktifCalisma+0x6e8>)
 8005486:	f003 fe25 	bl	80090d4 <HAL_GPIO_ReadPin>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d167      	bne.n	8005560 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005494:	482a      	ldr	r0, [pc, #168]	; (8005540 <checkAktifCalisma+0x6fc>)
 8005496:	f003 fe1d 	bl	80090d4 <HAL_GPIO_ReadPin>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <checkAktifCalisma+0x664>
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <checkAktifCalisma+0x700>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d15b      	bne.n	8005560 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	4825      	ldr	r0, [pc, #148]	; (8005540 <checkAktifCalisma+0x6fc>)
 80054ac:	f003 fe12 	bl	80090d4 <HAL_GPIO_ReadPin>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d10f      	bne.n	80054d6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80054b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054ba:	481c      	ldr	r0, [pc, #112]	; (800552c <checkAktifCalisma+0x6e8>)
 80054bc:	f003 fe0a 	bl	80090d4 <HAL_GPIO_ReadPin>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d107      	bne.n	80054d6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80054c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054ca:	4818      	ldr	r0, [pc, #96]	; (800552c <checkAktifCalisma+0x6e8>)
 80054cc:	f003 fe02 	bl	80090d4 <HAL_GPIO_ReadPin>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d003      	beq.n	80054de <checkAktifCalisma+0x69a>
 80054d6:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <checkAktifCalisma+0x704>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d040      	beq.n	8005560 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <checkAktifCalisma+0x708>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f083 0301 	eor.w	r3, r3, #1
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d039      	beq.n	8005560 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80054ec:	4b18      	ldr	r3, [pc, #96]	; (8005550 <checkAktifCalisma+0x70c>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	f083 0301 	eor.w	r3, r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d032      	beq.n	8005560 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80054fa:	4b16      	ldr	r3, [pc, #88]	; (8005554 <checkAktifCalisma+0x710>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f083 0301 	eor.w	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d02b      	beq.n	8005560 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005508:	4b13      	ldr	r3, [pc, #76]	; (8005558 <checkAktifCalisma+0x714>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f083 0301 	eor.w	r3, r3, #1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d024      	beq.n	8005560 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005516:	4b11      	ldr	r3, [pc, #68]	; (800555c <checkAktifCalisma+0x718>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	f083 0301 	eor.w	r3, r3, #1
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01d      	beq.n	8005560 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005524:	4b08      	ldr	r3, [pc, #32]	; (8005548 <checkAktifCalisma+0x704>)
 8005526:	2201      	movs	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e01c      	b.n	8005566 <checkAktifCalisma+0x722>
 800552c:	40010c00 	.word	0x40010c00
 8005530:	2000021d 	.word	0x2000021d
 8005534:	2000020f 	.word	0x2000020f
 8005538:	20000252 	.word	0x20000252
 800553c:	20000253 	.word	0x20000253
 8005540:	40011000 	.word	0x40011000
 8005544:	20000210 	.word	0x20000210
 8005548:	20000236 	.word	0x20000236
 800554c:	20000235 	.word	0x20000235
 8005550:	20000239 	.word	0x20000239
 8005554:	20000238 	.word	0x20000238
 8005558:	20000237 	.word	0x20000237
 800555c:	2000023b 	.word	0x2000023b
		} else {
			devmotoryukaricalisiyor=0;
 8005560:	4b64      	ldr	r3, [pc, #400]	; (80056f4 <checkAktifCalisma+0x8b0>)
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005566:	4b63      	ldr	r3, [pc, #396]	; (80056f4 <checkAktifCalisma+0x8b0>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800556e:	2201      	movs	r2, #1
 8005570:	2120      	movs	r1, #32
 8005572:	4861      	ldr	r0, [pc, #388]	; (80056f8 <checkAktifCalisma+0x8b4>)
 8005574:	f003 fdc5 	bl	8009102 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005578:	4b60      	ldr	r3, [pc, #384]	; (80056fc <checkAktifCalisma+0x8b8>)
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800557e:	4b5f      	ldr	r3, [pc, #380]	; (80056fc <checkAktifCalisma+0x8b8>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d025      	beq.n	80055d2 <checkAktifCalisma+0x78e>
 8005586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800558a:	485d      	ldr	r0, [pc, #372]	; (8005700 <checkAktifCalisma+0x8bc>)
 800558c:	f003 fda2 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005590:	4603      	mov	r3, r0
 8005592:	2b01      	cmp	r3, #1
 8005594:	d007      	beq.n	80055a6 <checkAktifCalisma+0x762>
 8005596:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800559a:	4857      	ldr	r0, [pc, #348]	; (80056f8 <checkAktifCalisma+0x8b4>)
 800559c:	f003 fd9a 	bl	80090d4 <HAL_GPIO_ReadPin>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d115      	bne.n	80055d2 <checkAktifCalisma+0x78e>
 80055a6:	4b57      	ldr	r3, [pc, #348]	; (8005704 <checkAktifCalisma+0x8c0>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d011      	beq.n	80055d2 <checkAktifCalisma+0x78e>
 80055ae:	4b56      	ldr	r3, [pc, #344]	; (8005708 <checkAktifCalisma+0x8c4>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <checkAktifCalisma+0x78e>
 80055b6:	4b55      	ldr	r3, [pc, #340]	; (800570c <checkAktifCalisma+0x8c8>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f083 0301 	eor.w	r3, r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d006      	beq.n	80055d2 <checkAktifCalisma+0x78e>
			timer2=millis;
 80055c4:	4b52      	ldr	r3, [pc, #328]	; (8005710 <checkAktifCalisma+0x8cc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a52      	ldr	r2, [pc, #328]	; (8005714 <checkAktifCalisma+0x8d0>)
 80055ca:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80055cc:	4b4f      	ldr	r3, [pc, #316]	; (800570c <checkAktifCalisma+0x8c8>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055d2:	4b4f      	ldr	r3, [pc, #316]	; (8005710 <checkAktifCalisma+0x8cc>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <checkAktifCalisma+0x8d0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	4a4e      	ldr	r2, [pc, #312]	; (8005718 <checkAktifCalisma+0x8d4>)
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d303      	bcc.n	80055ec <checkAktifCalisma+0x7a8>
 80055e4:	4b49      	ldr	r3, [pc, #292]	; (800570c <checkAktifCalisma+0x8c8>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10d      	bne.n	8005608 <checkAktifCalisma+0x7c4>
 80055ec:	4b45      	ldr	r3, [pc, #276]	; (8005704 <checkAktifCalisma+0x8c0>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f083 0301 	eor.w	r3, r3, #1
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <checkAktifCalisma+0x7c4>
 80055fa:	4b43      	ldr	r3, [pc, #268]	; (8005708 <checkAktifCalisma+0x8c4>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	f083 0301 	eor.w	r3, r3, #1
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005608:	2200      	movs	r2, #0
 800560a:	2120      	movs	r1, #32
 800560c:	483a      	ldr	r0, [pc, #232]	; (80056f8 <checkAktifCalisma+0x8b4>)
 800560e:	f003 fd78 	bl	8009102 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005612:	4b3a      	ldr	r3, [pc, #232]	; (80056fc <checkAktifCalisma+0x8b8>)
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005618:	4b3c      	ldr	r3, [pc, #240]	; (800570c <checkAktifCalisma+0x8c8>)
 800561a:	2200      	movs	r2, #0
 800561c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800561e:	4b3f      	ldr	r3, [pc, #252]	; (800571c <checkAktifCalisma+0x8d8>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 8088 	bne.w	8005738 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005628:	4b3d      	ldr	r3, [pc, #244]	; (8005720 <checkAktifCalisma+0x8dc>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d003      	beq.n	8005638 <checkAktifCalisma+0x7f4>
 8005630:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <checkAktifCalisma+0x8dc>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d17f      	bne.n	8005738 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005638:	4b32      	ldr	r3, [pc, #200]	; (8005704 <checkAktifCalisma+0x8c0>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d07b      	beq.n	8005738 <checkAktifCalisma+0x8f4>
 8005640:	4b31      	ldr	r3, [pc, #196]	; (8005708 <checkAktifCalisma+0x8c4>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d077      	beq.n	8005738 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005648:	2140      	movs	r1, #64	; 0x40
 800564a:	482b      	ldr	r0, [pc, #172]	; (80056f8 <checkAktifCalisma+0x8b4>)
 800564c:	f003 fd42 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d170      	bne.n	8005738 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800565a:	4827      	ldr	r0, [pc, #156]	; (80056f8 <checkAktifCalisma+0x8b4>)
 800565c:	f003 fd3a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <checkAktifCalisma+0x82a>
 8005666:	4b2f      	ldr	r3, [pc, #188]	; (8005724 <checkAktifCalisma+0x8e0>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d164      	bne.n	8005738 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800566e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005672:	4823      	ldr	r0, [pc, #140]	; (8005700 <checkAktifCalisma+0x8bc>)
 8005674:	f003 fd2e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10f      	bne.n	800569e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800567e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005682:	481f      	ldr	r0, [pc, #124]	; (8005700 <checkAktifCalisma+0x8bc>)
 8005684:	f003 fd26 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d107      	bne.n	800569e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800568e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005692:	481b      	ldr	r0, [pc, #108]	; (8005700 <checkAktifCalisma+0x8bc>)
 8005694:	f003 fd1e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005698:	4603      	mov	r3, r0
 800569a:	2b01      	cmp	r3, #1
 800569c:	d003      	beq.n	80056a6 <checkAktifCalisma+0x862>
 800569e:	4b22      	ldr	r3, [pc, #136]	; (8005728 <checkAktifCalisma+0x8e4>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d048      	beq.n	8005738 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80056a6:	4b21      	ldr	r3, [pc, #132]	; (800572c <checkAktifCalisma+0x8e8>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f083 0301 	eor.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d041      	beq.n	8005738 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80056b4:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <checkAktifCalisma+0x8ec>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f083 0301 	eor.w	r3, r3, #1
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d03a      	beq.n	8005738 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80056c2:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <checkAktifCalisma+0x8f0>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f083 0301 	eor.w	r3, r3, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d033      	beq.n	8005738 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <checkAktifCalisma+0x8b8>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d02c      	beq.n	8005738 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <checkAktifCalisma+0x8b0>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d025      	beq.n	8005738 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <checkAktifCalisma+0x8e4>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e024      	b.n	800573e <checkAktifCalisma+0x8fa>
 80056f4:	20000236 	.word	0x20000236
 80056f8:	40011000 	.word	0x40011000
 80056fc:	2000023a 	.word	0x2000023a
 8005700:	40010c00 	.word	0x40010c00
 8005704:	20000252 	.word	0x20000252
 8005708:	20000253 	.word	0x20000253
 800570c:	20000232 	.word	0x20000232
 8005710:	200001dc 	.word	0x200001dc
 8005714:	200001e8 	.word	0x200001e8
 8005718:	20000216 	.word	0x20000216
 800571c:	2000021d 	.word	0x2000021d
 8005720:	2000020f 	.word	0x2000020f
 8005724:	20000211 	.word	0x20000211
 8005728:	20000237 	.word	0x20000237
 800572c:	20000235 	.word	0x20000235
 8005730:	20000239 	.word	0x20000239
 8005734:	20000238 	.word	0x20000238
		} else {
			devmotorasagicalisiyor=0;
 8005738:	4b96      	ldr	r3, [pc, #600]	; (8005994 <checkAktifCalisma+0xb50>)
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800573e:	4b95      	ldr	r3, [pc, #596]	; (8005994 <checkAktifCalisma+0xb50>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005746:	2201      	movs	r2, #1
 8005748:	2110      	movs	r1, #16
 800574a:	4893      	ldr	r0, [pc, #588]	; (8005998 <checkAktifCalisma+0xb54>)
 800574c:	f003 fcd9 	bl	8009102 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005750:	4b92      	ldr	r3, [pc, #584]	; (800599c <checkAktifCalisma+0xb58>)
 8005752:	2201      	movs	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005756:	4b91      	ldr	r3, [pc, #580]	; (800599c <checkAktifCalisma+0xb58>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d024      	beq.n	80057a8 <checkAktifCalisma+0x964>
 800575e:	2140      	movs	r1, #64	; 0x40
 8005760:	488d      	ldr	r0, [pc, #564]	; (8005998 <checkAktifCalisma+0xb54>)
 8005762:	f003 fcb7 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d007      	beq.n	800577c <checkAktifCalisma+0x938>
 800576c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005770:	4889      	ldr	r0, [pc, #548]	; (8005998 <checkAktifCalisma+0xb54>)
 8005772:	f003 fcaf 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005776:	4603      	mov	r3, r0
 8005778:	2b01      	cmp	r3, #1
 800577a:	d115      	bne.n	80057a8 <checkAktifCalisma+0x964>
 800577c:	4b88      	ldr	r3, [pc, #544]	; (80059a0 <checkAktifCalisma+0xb5c>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d011      	beq.n	80057a8 <checkAktifCalisma+0x964>
 8005784:	4b87      	ldr	r3, [pc, #540]	; (80059a4 <checkAktifCalisma+0xb60>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <checkAktifCalisma+0x964>
 800578c:	4b86      	ldr	r3, [pc, #536]	; (80059a8 <checkAktifCalisma+0xb64>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f083 0301 	eor.w	r3, r3, #1
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <checkAktifCalisma+0x964>
			timer2=millis;
 800579a:	4b84      	ldr	r3, [pc, #528]	; (80059ac <checkAktifCalisma+0xb68>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a84      	ldr	r2, [pc, #528]	; (80059b0 <checkAktifCalisma+0xb6c>)
 80057a0:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80057a2:	4b81      	ldr	r3, [pc, #516]	; (80059a8 <checkAktifCalisma+0xb64>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80057a8:	4b80      	ldr	r3, [pc, #512]	; (80059ac <checkAktifCalisma+0xb68>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b80      	ldr	r3, [pc, #512]	; (80059b0 <checkAktifCalisma+0xb6c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	4a80      	ldr	r2, [pc, #512]	; (80059b4 <checkAktifCalisma+0xb70>)
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d303      	bcc.n	80057c2 <checkAktifCalisma+0x97e>
 80057ba:	4b7b      	ldr	r3, [pc, #492]	; (80059a8 <checkAktifCalisma+0xb64>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <checkAktifCalisma+0x99a>
 80057c2:	4b77      	ldr	r3, [pc, #476]	; (80059a0 <checkAktifCalisma+0xb5c>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f083 0301 	eor.w	r3, r3, #1
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <checkAktifCalisma+0x99a>
 80057d0:	4b74      	ldr	r3, [pc, #464]	; (80059a4 <checkAktifCalisma+0xb60>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f083 0301 	eor.w	r3, r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80057de:	2200      	movs	r2, #0
 80057e0:	2110      	movs	r1, #16
 80057e2:	486d      	ldr	r0, [pc, #436]	; (8005998 <checkAktifCalisma+0xb54>)
 80057e4:	f003 fc8d 	bl	8009102 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80057e8:	4b6c      	ldr	r3, [pc, #432]	; (800599c <checkAktifCalisma+0xb58>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80057ee:	4b6e      	ldr	r3, [pc, #440]	; (80059a8 <checkAktifCalisma+0xb64>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80057f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057f8:	486f      	ldr	r0, [pc, #444]	; (80059b8 <checkAktifCalisma+0xb74>)
 80057fa:	f003 fc6b 	bl	80090d4 <HAL_GPIO_ReadPin>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d120      	bne.n	8005846 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005808:	486b      	ldr	r0, [pc, #428]	; (80059b8 <checkAktifCalisma+0xb74>)
 800580a:	f003 fc63 	bl	80090d4 <HAL_GPIO_ReadPin>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d118      	bne.n	8005846 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005814:	2104      	movs	r1, #4
 8005816:	4868      	ldr	r0, [pc, #416]	; (80059b8 <checkAktifCalisma+0xb74>)
 8005818:	f003 fc5c 	bl	80090d4 <HAL_GPIO_ReadPin>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d111      	bne.n	8005846 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005822:	2102      	movs	r1, #2
 8005824:	4864      	ldr	r0, [pc, #400]	; (80059b8 <checkAktifCalisma+0xb74>)
 8005826:	f003 fc55 	bl	80090d4 <HAL_GPIO_ReadPin>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005830:	2101      	movs	r1, #1
 8005832:	4861      	ldr	r0, [pc, #388]	; (80059b8 <checkAktifCalisma+0xb74>)
 8005834:	f003 fc4e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <checkAktifCalisma+0xa02>
			makineStop=1;
 800583e:	4b5f      	ldr	r3, [pc, #380]	; (80059bc <checkAktifCalisma+0xb78>)
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	e002      	b.n	800584c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005846:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <checkAktifCalisma+0xb78>)
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800584c:	4b5c      	ldr	r3, [pc, #368]	; (80059c0 <checkAktifCalisma+0xb7c>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d144      	bne.n	80058de <checkAktifCalisma+0xa9a>
 8005854:	4b5b      	ldr	r3, [pc, #364]	; (80059c4 <checkAktifCalisma+0xb80>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d003      	beq.n	8005864 <checkAktifCalisma+0xa20>
 800585c:	4b59      	ldr	r3, [pc, #356]	; (80059c4 <checkAktifCalisma+0xb80>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d13c      	bne.n	80058de <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005864:	2180      	movs	r1, #128	; 0x80
 8005866:	484c      	ldr	r0, [pc, #304]	; (8005998 <checkAktifCalisma+0xb54>)
 8005868:	f003 fc34 	bl	80090d4 <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <checkAktifCalisma+0xa36>
 8005872:	4b55      	ldr	r3, [pc, #340]	; (80059c8 <checkAktifCalisma+0xb84>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <checkAktifCalisma+0xa4e>
 800587a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800587e:	484e      	ldr	r0, [pc, #312]	; (80059b8 <checkAktifCalisma+0xb74>)
 8005880:	f003 fc28 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d129      	bne.n	80058de <checkAktifCalisma+0xa9a>
 800588a:	4b4f      	ldr	r3, [pc, #316]	; (80059c8 <checkAktifCalisma+0xb84>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d125      	bne.n	80058de <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005892:	2104      	movs	r1, #4
 8005894:	4840      	ldr	r0, [pc, #256]	; (8005998 <checkAktifCalisma+0xb54>)
 8005896:	f003 fc1d 	bl	80090d4 <HAL_GPIO_ReadPin>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d003      	beq.n	80058a8 <checkAktifCalisma+0xa64>
 80058a0:	4b4a      	ldr	r3, [pc, #296]	; (80059cc <checkAktifCalisma+0xb88>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d11a      	bne.n	80058de <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058a8:	2102      	movs	r1, #2
 80058aa:	483b      	ldr	r0, [pc, #236]	; (8005998 <checkAktifCalisma+0xb54>)
 80058ac:	f003 fc12 	bl	80090d4 <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d113      	bne.n	80058de <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80058b6:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <checkAktifCalisma+0xb8c>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f083 0301 	eor.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80058c4:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <checkAktifCalisma+0xb78>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80058cc:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <checkAktifCalisma+0xb90>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058d2:	4b36      	ldr	r3, [pc, #216]	; (80059ac <checkAktifCalisma+0xb68>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a40      	ldr	r2, [pc, #256]	; (80059d8 <checkAktifCalisma+0xb94>)
 80058d8:	6013      	str	r3, [r2, #0]
			bekle();
 80058da:	f7ff f935 	bl	8004b48 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80058de:	4b33      	ldr	r3, [pc, #204]	; (80059ac <checkAktifCalisma+0xb68>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b3d      	ldr	r3, [pc, #244]	; (80059d8 <checkAktifCalisma+0xb94>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	4a3c      	ldr	r2, [pc, #240]	; (80059dc <checkAktifCalisma+0xb98>)
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d211      	bcs.n	8005914 <checkAktifCalisma+0xad0>
 80058f0:	2104      	movs	r1, #4
 80058f2:	4829      	ldr	r0, [pc, #164]	; (8005998 <checkAktifCalisma+0xb54>)
 80058f4:	f003 fbee 	bl	80090d4 <HAL_GPIO_ReadPin>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <checkAktifCalisma+0xad0>
 80058fe:	4b33      	ldr	r3, [pc, #204]	; (80059cc <checkAktifCalisma+0xb88>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d006      	beq.n	8005914 <checkAktifCalisma+0xad0>
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <checkAktifCalisma+0xb78>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f083 0301 	eor.w	r3, r3, #1
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005914:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <checkAktifCalisma+0xb90>)
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <checkAktifCalisma+0xb7c>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d160      	bne.n	80059e4 <checkAktifCalisma+0xba0>
 8005922:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <checkAktifCalisma+0xb80>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d003      	beq.n	8005932 <checkAktifCalisma+0xaee>
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <checkAktifCalisma+0xb80>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b03      	cmp	r3, #3
 8005930:	d158      	bne.n	80059e4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005932:	2104      	movs	r1, #4
 8005934:	4818      	ldr	r0, [pc, #96]	; (8005998 <checkAktifCalisma+0xb54>)
 8005936:	f003 fbcd 	bl	80090d4 <HAL_GPIO_ReadPin>
 800593a:	4603      	mov	r3, r0
 800593c:	2b01      	cmp	r3, #1
 800593e:	d003      	beq.n	8005948 <checkAktifCalisma+0xb04>
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <checkAktifCalisma+0xb88>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d14d      	bne.n	80059e4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005948:	2102      	movs	r1, #2
 800594a:	4813      	ldr	r0, [pc, #76]	; (8005998 <checkAktifCalisma+0xb54>)
 800594c:	f003 fbc2 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d146      	bne.n	80059e4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005956:	2180      	movs	r1, #128	; 0x80
 8005958:	480f      	ldr	r0, [pc, #60]	; (8005998 <checkAktifCalisma+0xb54>)
 800595a:	f003 fbbb 	bl	80090d4 <HAL_GPIO_ReadPin>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d103      	bne.n	800596c <checkAktifCalisma+0xb28>
 8005964:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <checkAktifCalisma+0xb84>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <checkAktifCalisma+0xb40>
 800596c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005970:	4811      	ldr	r0, [pc, #68]	; (80059b8 <checkAktifCalisma+0xb74>)
 8005972:	f003 fbaf 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d133      	bne.n	80059e4 <checkAktifCalisma+0xba0>
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <checkAktifCalisma+0xb84>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d12f      	bne.n	80059e4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <checkAktifCalisma+0xb78>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d02b      	beq.n	80059e4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800598c:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <checkAktifCalisma+0xb9c>)
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e02a      	b.n	80059ea <checkAktifCalisma+0xba6>
 8005994:	20000237 	.word	0x20000237
 8005998:	40011000 	.word	0x40011000
 800599c:	2000023b 	.word	0x2000023b
 80059a0:	20000252 	.word	0x20000252
 80059a4:	20000253 	.word	0x20000253
 80059a8:	20000233 	.word	0x20000233
 80059ac:	200001dc 	.word	0x200001dc
 80059b0:	200001e8 	.word	0x200001e8
 80059b4:	20000216 	.word	0x20000216
 80059b8:	40010c00 	.word	0x40010c00
 80059bc:	20000242 	.word	0x20000242
 80059c0:	20000209 	.word	0x20000209
 80059c4:	20000208 	.word	0x20000208
 80059c8:	2000020c 	.word	0x2000020c
 80059cc:	20000206 	.word	0x20000206
 80059d0:	2000022f 	.word	0x2000022f
 80059d4:	20000243 	.word	0x20000243
 80059d8:	200001e0 	.word	0x200001e0
 80059dc:	20000219 	.word	0x20000219
 80059e0:	20000244 	.word	0x20000244
		} else {
			kapi1butonkontrol=0;
 80059e4:	4b8b      	ldr	r3, [pc, #556]	; (8005c14 <checkAktifCalisma+0xdd0>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059ea:	4b8b      	ldr	r3, [pc, #556]	; (8005c18 <checkAktifCalisma+0xdd4>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d121      	bne.n	8005a36 <checkAktifCalisma+0xbf2>
 80059f2:	4b8a      	ldr	r3, [pc, #552]	; (8005c1c <checkAktifCalisma+0xdd8>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d003      	beq.n	8005a02 <checkAktifCalisma+0xbbe>
 80059fa:	4b88      	ldr	r3, [pc, #544]	; (8005c1c <checkAktifCalisma+0xdd8>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d119      	bne.n	8005a36 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a02:	2104      	movs	r1, #4
 8005a04:	4886      	ldr	r0, [pc, #536]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005a06:	f003 fb65 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <checkAktifCalisma+0xbd4>
 8005a10:	4b84      	ldr	r3, [pc, #528]	; (8005c24 <checkAktifCalisma+0xde0>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10e      	bne.n	8005a36 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a18:	2102      	movs	r1, #2
 8005a1a:	4881      	ldr	r0, [pc, #516]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005a1c:	f003 fb5a 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005a26:	4b80      	ldr	r3, [pc, #512]	; (8005c28 <checkAktifCalisma+0xde4>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005a2e:	4b7f      	ldr	r3, [pc, #508]	; (8005c2c <checkAktifCalisma+0xde8>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e002      	b.n	8005a3c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005a36:	4b7d      	ldr	r3, [pc, #500]	; (8005c2c <checkAktifCalisma+0xde8>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005a3c:	4b75      	ldr	r3, [pc, #468]	; (8005c14 <checkAktifCalisma+0xdd0>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <checkAktifCalisma+0xc10>
 8005a44:	4b79      	ldr	r3, [pc, #484]	; (8005c2c <checkAktifCalisma+0xde8>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <checkAktifCalisma+0xc10>
 8005a4c:	4b78      	ldr	r3, [pc, #480]	; (8005c30 <checkAktifCalisma+0xdec>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a54:	2201      	movs	r2, #1
 8005a56:	2180      	movs	r1, #128	; 0x80
 8005a58:	4876      	ldr	r0, [pc, #472]	; (8005c34 <checkAktifCalisma+0xdf0>)
 8005a5a:	f003 fb52 	bl	8009102 <HAL_GPIO_WritePin>
 8005a5e:	e004      	b.n	8005a6a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a60:	2200      	movs	r2, #0
 8005a62:	2180      	movs	r1, #128	; 0x80
 8005a64:	4873      	ldr	r0, [pc, #460]	; (8005c34 <checkAktifCalisma+0xdf0>)
 8005a66:	f003 fb4c 	bl	8009102 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a6a:	4b73      	ldr	r3, [pc, #460]	; (8005c38 <checkAktifCalisma+0xdf4>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d141      	bne.n	8005af6 <checkAktifCalisma+0xcb2>
 8005a72:	4b6a      	ldr	r3, [pc, #424]	; (8005c1c <checkAktifCalisma+0xdd8>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d003      	beq.n	8005a82 <checkAktifCalisma+0xc3e>
 8005a7a:	4b68      	ldr	r3, [pc, #416]	; (8005c1c <checkAktifCalisma+0xdd8>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d139      	bne.n	8005af6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a86:	4866      	ldr	r0, [pc, #408]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005a88:	f003 fb24 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <checkAktifCalisma+0xc56>
 8005a92:	4b6a      	ldr	r3, [pc, #424]	; (8005c3c <checkAktifCalisma+0xdf8>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <checkAktifCalisma+0xc6e>
 8005a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a9e:	4868      	ldr	r0, [pc, #416]	; (8005c40 <checkAktifCalisma+0xdfc>)
 8005aa0:	f003 fb18 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d125      	bne.n	8005af6 <checkAktifCalisma+0xcb2>
 8005aaa:	4b64      	ldr	r3, [pc, #400]	; (8005c3c <checkAktifCalisma+0xdf8>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d121      	bne.n	8005af6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	485a      	ldr	r0, [pc, #360]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005ab6:	f003 fb0d 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d11a      	bne.n	8005af6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ac0:	2104      	movs	r1, #4
 8005ac2:	4857      	ldr	r0, [pc, #348]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005ac4:	f003 fb06 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d113      	bne.n	8005af6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005ace:	4b56      	ldr	r3, [pc, #344]	; (8005c28 <checkAktifCalisma+0xde4>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00f      	beq.n	8005af6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005ad6:	4b5b      	ldr	r3, [pc, #364]	; (8005c44 <checkAktifCalisma+0xe00>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	f083 0301 	eor.w	r3, r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005ae4:	4b58      	ldr	r3, [pc, #352]	; (8005c48 <checkAktifCalisma+0xe04>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005aea:	4b58      	ldr	r3, [pc, #352]	; (8005c4c <checkAktifCalisma+0xe08>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a58      	ldr	r2, [pc, #352]	; (8005c50 <checkAktifCalisma+0xe0c>)
 8005af0:	6013      	str	r3, [r2, #0]
			bekle();
 8005af2:	f7ff f829 	bl	8004b48 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005af6:	4b55      	ldr	r3, [pc, #340]	; (8005c4c <checkAktifCalisma+0xe08>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b55      	ldr	r3, [pc, #340]	; (8005c50 <checkAktifCalisma+0xe0c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	4a54      	ldr	r2, [pc, #336]	; (8005c54 <checkAktifCalisma+0xe10>)
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d20d      	bcs.n	8005b24 <checkAktifCalisma+0xce0>
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4845      	ldr	r0, [pc, #276]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005b0c:	f003 fae2 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d006      	beq.n	8005b24 <checkAktifCalisma+0xce0>
 8005b16:	4b44      	ldr	r3, [pc, #272]	; (8005c28 <checkAktifCalisma+0xde4>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f083 0301 	eor.w	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005b24:	4b48      	ldr	r3, [pc, #288]	; (8005c48 <checkAktifCalisma+0xe04>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b2a:	4b43      	ldr	r3, [pc, #268]	; (8005c38 <checkAktifCalisma+0xdf4>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d135      	bne.n	8005b9e <checkAktifCalisma+0xd5a>
 8005b32:	4b3a      	ldr	r3, [pc, #232]	; (8005c1c <checkAktifCalisma+0xdd8>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d003      	beq.n	8005b42 <checkAktifCalisma+0xcfe>
 8005b3a:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <checkAktifCalisma+0xdd8>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d12d      	bne.n	8005b9e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b46:	4836      	ldr	r0, [pc, #216]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005b48:	f003 fac4 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <checkAktifCalisma+0xd16>
 8005b52:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <checkAktifCalisma+0xdf8>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00b      	beq.n	8005b72 <checkAktifCalisma+0xd2e>
 8005b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b5e:	4838      	ldr	r0, [pc, #224]	; (8005c40 <checkAktifCalisma+0xdfc>)
 8005b60:	f003 fab8 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d119      	bne.n	8005b9e <checkAktifCalisma+0xd5a>
 8005b6a:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <checkAktifCalisma+0xdf8>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d115      	bne.n	8005b9e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b72:	2102      	movs	r1, #2
 8005b74:	482a      	ldr	r0, [pc, #168]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005b76:	f003 faad 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d10e      	bne.n	8005b9e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b80:	2104      	movs	r1, #4
 8005b82:	4827      	ldr	r0, [pc, #156]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005b84:	f003 faa6 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b8e:	4b26      	ldr	r3, [pc, #152]	; (8005c28 <checkAktifCalisma+0xde4>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b96:	4b30      	ldr	r3, [pc, #192]	; (8005c58 <checkAktifCalisma+0xe14>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e002      	b.n	8005ba4 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b9e:	4b2e      	ldr	r3, [pc, #184]	; (8005c58 <checkAktifCalisma+0xe14>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ba4:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <checkAktifCalisma+0xdf4>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d11d      	bne.n	8005be8 <checkAktifCalisma+0xda4>
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <checkAktifCalisma+0xdd8>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d003      	beq.n	8005bbc <checkAktifCalisma+0xd78>
 8005bb4:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <checkAktifCalisma+0xdd8>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d115      	bne.n	8005be8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	4818      	ldr	r0, [pc, #96]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005bc0:	f003 fa88 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d10e      	bne.n	8005be8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bca:	2104      	movs	r1, #4
 8005bcc:	4814      	ldr	r0, [pc, #80]	; (8005c20 <checkAktifCalisma+0xddc>)
 8005bce:	f003 fa81 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d107      	bne.n	8005be8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005bd8:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <checkAktifCalisma+0xde4>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005be0:	4b1e      	ldr	r3, [pc, #120]	; (8005c5c <checkAktifCalisma+0xe18>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e002      	b.n	8005bee <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005be8:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <checkAktifCalisma+0xe18>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005bee:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <checkAktifCalisma+0xe14>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d107      	bne.n	8005c06 <checkAktifCalisma+0xdc2>
 8005bf6:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <checkAktifCalisma+0xe18>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <checkAktifCalisma+0xdc2>
 8005bfe:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <checkAktifCalisma+0xe04>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d02c      	beq.n	8005c60 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005c06:	2201      	movs	r2, #1
 8005c08:	2140      	movs	r1, #64	; 0x40
 8005c0a:	480a      	ldr	r0, [pc, #40]	; (8005c34 <checkAktifCalisma+0xdf0>)
 8005c0c:	f003 fa79 	bl	8009102 <HAL_GPIO_WritePin>
 8005c10:	e02b      	b.n	8005c6a <checkAktifCalisma+0xe26>
 8005c12:	bf00      	nop
 8005c14:	20000244 	.word	0x20000244
 8005c18:	20000209 	.word	0x20000209
 8005c1c:	20000208 	.word	0x20000208
 8005c20:	40011000 	.word	0x40011000
 8005c24:	20000206 	.word	0x20000206
 8005c28:	20000242 	.word	0x20000242
 8005c2c:	20000245 	.word	0x20000245
 8005c30:	20000243 	.word	0x20000243
 8005c34:	40010800 	.word	0x40010800
 8005c38:	2000020a 	.word	0x2000020a
 8005c3c:	2000020c 	.word	0x2000020c
 8005c40:	40010c00 	.word	0x40010c00
 8005c44:	2000022f 	.word	0x2000022f
 8005c48:	20000246 	.word	0x20000246
 8005c4c:	200001dc 	.word	0x200001dc
 8005c50:	200001e0 	.word	0x200001e0
 8005c54:	2000021a 	.word	0x2000021a
 8005c58:	20000247 	.word	0x20000247
 8005c5c:	20000248 	.word	0x20000248
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c60:	2200      	movs	r2, #0
 8005c62:	2140      	movs	r1, #64	; 0x40
 8005c64:	488d      	ldr	r0, [pc, #564]	; (8005e9c <checkAktifCalisma+0x1058>)
 8005c66:	f003 fa4c 	bl	8009102 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005c6a:	4b8d      	ldr	r3, [pc, #564]	; (8005ea0 <checkAktifCalisma+0x105c>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <checkAktifCalisma+0xe36>
 8005c72:	4b8b      	ldr	r3, [pc, #556]	; (8005ea0 <checkAktifCalisma+0x105c>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d115      	bne.n	8005ca6 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c7a:	2104      	movs	r1, #4
 8005c7c:	4889      	ldr	r0, [pc, #548]	; (8005ea4 <checkAktifCalisma+0x1060>)
 8005c7e:	f003 fa29 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d003      	beq.n	8005c90 <checkAktifCalisma+0xe4c>
 8005c88:	4b87      	ldr	r3, [pc, #540]	; (8005ea8 <checkAktifCalisma+0x1064>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c90:	2102      	movs	r1, #2
 8005c92:	4884      	ldr	r0, [pc, #528]	; (8005ea4 <checkAktifCalisma+0x1060>)
 8005c94:	f003 fa1e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c9e:	4b83      	ldr	r3, [pc, #524]	; (8005eac <checkAktifCalisma+0x1068>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e002      	b.n	8005cac <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005ca6:	4b81      	ldr	r3, [pc, #516]	; (8005eac <checkAktifCalisma+0x1068>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005cac:	4b7c      	ldr	r3, [pc, #496]	; (8005ea0 <checkAktifCalisma+0x105c>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d003      	beq.n	8005cbc <checkAktifCalisma+0xe78>
 8005cb4:	4b7a      	ldr	r3, [pc, #488]	; (8005ea0 <checkAktifCalisma+0x105c>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d111      	bne.n	8005ce0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4879      	ldr	r0, [pc, #484]	; (8005ea4 <checkAktifCalisma+0x1060>)
 8005cc0:	f003 fa08 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d10a      	bne.n	8005ce0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005cca:	2104      	movs	r1, #4
 8005ccc:	4875      	ldr	r0, [pc, #468]	; (8005ea4 <checkAktifCalisma+0x1060>)
 8005cce:	f003 fa01 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d103      	bne.n	8005ce0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005cd8:	4b75      	ldr	r3, [pc, #468]	; (8005eb0 <checkAktifCalisma+0x106c>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005ce0:	4b73      	ldr	r3, [pc, #460]	; (8005eb0 <checkAktifCalisma+0x106c>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005ce6:	4b71      	ldr	r3, [pc, #452]	; (8005eac <checkAktifCalisma+0x1068>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00f      	beq.n	8005d0e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005cee:	4b71      	ldr	r3, [pc, #452]	; (8005eb4 <checkAktifCalisma+0x1070>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d10b      	bne.n	8005d0e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cfa:	486f      	ldr	r0, [pc, #444]	; (8005eb8 <checkAktifCalisma+0x1074>)
 8005cfc:	f003 f9ea 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005d06:	4b6d      	ldr	r3, [pc, #436]	; (8005ebc <checkAktifCalisma+0x1078>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	e002      	b.n	8005d14 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005d0e:	4b6b      	ldr	r3, [pc, #428]	; (8005ebc <checkAktifCalisma+0x1078>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005d14:	4b66      	ldr	r3, [pc, #408]	; (8005eb0 <checkAktifCalisma+0x106c>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00f      	beq.n	8005d3c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005d1c:	4b65      	ldr	r3, [pc, #404]	; (8005eb4 <checkAktifCalisma+0x1070>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10b      	bne.n	8005d3c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d28:	4863      	ldr	r0, [pc, #396]	; (8005eb8 <checkAktifCalisma+0x1074>)
 8005d2a:	f003 f9d3 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005d34:	4b62      	ldr	r3, [pc, #392]	; (8005ec0 <checkAktifCalisma+0x107c>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	e002      	b.n	8005d42 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005d3c:	4b60      	ldr	r3, [pc, #384]	; (8005ec0 <checkAktifCalisma+0x107c>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d42:	4b60      	ldr	r3, [pc, #384]	; (8005ec4 <checkAktifCalisma+0x1080>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d137      	bne.n	8005dba <checkAktifCalisma+0xf76>
 8005d4a:	4b5f      	ldr	r3, [pc, #380]	; (8005ec8 <checkAktifCalisma+0x1084>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d003      	beq.n	8005d5a <checkAktifCalisma+0xf16>
 8005d52:	4b5d      	ldr	r3, [pc, #372]	; (8005ec8 <checkAktifCalisma+0x1084>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d12f      	bne.n	8005dba <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d5a:	4b54      	ldr	r3, [pc, #336]	; (8005eac <checkAktifCalisma+0x1068>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <checkAktifCalisma+0xf26>
 8005d62:	4b53      	ldr	r3, [pc, #332]	; (8005eb0 <checkAktifCalisma+0x106c>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d027      	beq.n	8005dba <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d6e:	484d      	ldr	r0, [pc, #308]	; (8005ea4 <checkAktifCalisma+0x1060>)
 8005d70:	f003 f9b0 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <checkAktifCalisma+0xf3e>
 8005d7a:	4b4e      	ldr	r3, [pc, #312]	; (8005eb4 <checkAktifCalisma+0x1070>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d82:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <checkAktifCalisma+0x1078>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <checkAktifCalisma+0xf4e>
 8005d8a:	4b4d      	ldr	r3, [pc, #308]	; (8005ec0 <checkAktifCalisma+0x107c>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d013      	beq.n	8005dba <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d92:	4b4e      	ldr	r3, [pc, #312]	; (8005ecc <checkAktifCalisma+0x1088>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00f      	beq.n	8005dba <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d9a:	4b4d      	ldr	r3, [pc, #308]	; (8005ed0 <checkAktifCalisma+0x108c>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	f083 0301 	eor.w	r3, r3, #1
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005da8:	4b4a      	ldr	r3, [pc, #296]	; (8005ed4 <checkAktifCalisma+0x1090>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005dae:	4b4a      	ldr	r3, [pc, #296]	; (8005ed8 <checkAktifCalisma+0x1094>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a4a      	ldr	r2, [pc, #296]	; (8005edc <checkAktifCalisma+0x1098>)
 8005db4:	6013      	str	r3, [r2, #0]
			bekle();
 8005db6:	f7fe fec7 	bl	8004b48 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005dba:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <checkAktifCalisma+0x1094>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b47      	ldr	r3, [pc, #284]	; (8005edc <checkAktifCalisma+0x1098>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	4a46      	ldr	r2, [pc, #280]	; (8005ee0 <checkAktifCalisma+0x109c>)
 8005dc6:	7812      	ldrb	r2, [r2, #0]
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d214      	bcs.n	8005df6 <checkAktifCalisma+0xfb2>
 8005dcc:	4b37      	ldr	r3, [pc, #220]	; (8005eac <checkAktifCalisma+0x1068>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f083 0301 	eor.w	r3, r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <checkAktifCalisma+0xfa4>
 8005dda:	4b35      	ldr	r3, [pc, #212]	; (8005eb0 <checkAktifCalisma+0x106c>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f083 0301 	eor.w	r3, r3, #1
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <checkAktifCalisma+0xfb2>
 8005de8:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <checkAktifCalisma+0x1088>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f083 0301 	eor.w	r3, r3, #1
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005df6:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <checkAktifCalisma+0x1090>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005dfc:	4b31      	ldr	r3, [pc, #196]	; (8005ec4 <checkAktifCalisma+0x1080>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d12b      	bne.n	8005e5c <checkAktifCalisma+0x1018>
 8005e04:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <checkAktifCalisma+0x1084>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d003      	beq.n	8005e14 <checkAktifCalisma+0xfd0>
 8005e0c:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <checkAktifCalisma+0x1084>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d123      	bne.n	8005e5c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e14:	4b25      	ldr	r3, [pc, #148]	; (8005eac <checkAktifCalisma+0x1068>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d103      	bne.n	8005e24 <checkAktifCalisma+0xfe0>
 8005e1c:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <checkAktifCalisma+0x106c>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01b      	beq.n	8005e5c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e28:	481e      	ldr	r0, [pc, #120]	; (8005ea4 <checkAktifCalisma+0x1060>)
 8005e2a:	f003 f953 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d103      	bne.n	8005e3c <checkAktifCalisma+0xff8>
 8005e34:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <checkAktifCalisma+0x1070>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <checkAktifCalisma+0x1078>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <checkAktifCalisma+0x1008>
 8005e44:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <checkAktifCalisma+0x107c>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005e4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <checkAktifCalisma+0x1088>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005e54:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <checkAktifCalisma+0x10a0>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e002      	b.n	8005e62 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005e5c:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <checkAktifCalisma+0x10a0>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e62:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <checkAktifCalisma+0x1080>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d140      	bne.n	8005eec <checkAktifCalisma+0x10a8>
 8005e6a:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <checkAktifCalisma+0x1084>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d003      	beq.n	8005e7a <checkAktifCalisma+0x1036>
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <checkAktifCalisma+0x1084>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d138      	bne.n	8005eec <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <checkAktifCalisma+0x1068>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <checkAktifCalisma+0x1046>
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <checkAktifCalisma+0x106c>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d030      	beq.n	8005eec <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <checkAktifCalisma+0x1088>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d02c      	beq.n	8005eec <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <checkAktifCalisma+0x10a4>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e02b      	b.n	8005ef2 <checkAktifCalisma+0x10ae>
 8005e9a:	bf00      	nop
 8005e9c:	40010800 	.word	0x40010800
 8005ea0:	2000020d 	.word	0x2000020d
 8005ea4:	40011000 	.word	0x40011000
 8005ea8:	20000206 	.word	0x20000206
 8005eac:	2000024c 	.word	0x2000024c
 8005eb0:	2000024d 	.word	0x2000024d
 8005eb4:	2000020c 	.word	0x2000020c
 8005eb8:	40010c00 	.word	0x40010c00
 8005ebc:	2000025c 	.word	0x2000025c
 8005ec0:	2000025d 	.word	0x2000025d
 8005ec4:	2000020b 	.word	0x2000020b
 8005ec8:	20000208 	.word	0x20000208
 8005ecc:	20000242 	.word	0x20000242
 8005ed0:	2000022f 	.word	0x2000022f
 8005ed4:	20000249 	.word	0x20000249
 8005ed8:	200001dc 	.word	0x200001dc
 8005edc:	200001e0 	.word	0x200001e0
 8005ee0:	2000021b 	.word	0x2000021b
 8005ee4:	2000024a 	.word	0x2000024a
 8005ee8:	2000024b 	.word	0x2000024b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005eec:	4b8b      	ldr	r3, [pc, #556]	; (800611c <checkAktifCalisma+0x12d8>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005ef2:	4b8b      	ldr	r3, [pc, #556]	; (8006120 <checkAktifCalisma+0x12dc>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d107      	bne.n	8005f0a <checkAktifCalisma+0x10c6>
 8005efa:	4b8a      	ldr	r3, [pc, #552]	; (8006124 <checkAktifCalisma+0x12e0>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <checkAktifCalisma+0x10c6>
 8005f02:	4b86      	ldr	r3, [pc, #536]	; (800611c <checkAktifCalisma+0x12d8>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	2120      	movs	r1, #32
 8005f0e:	4886      	ldr	r0, [pc, #536]	; (8006128 <checkAktifCalisma+0x12e4>)
 8005f10:	f003 f8f7 	bl	8009102 <HAL_GPIO_WritePin>
 8005f14:	e004      	b.n	8005f20 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f16:	2200      	movs	r2, #0
 8005f18:	2120      	movs	r1, #32
 8005f1a:	4883      	ldr	r0, [pc, #524]	; (8006128 <checkAktifCalisma+0x12e4>)
 8005f1c:	f003 f8f1 	bl	8009102 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005f20:	4b82      	ldr	r3, [pc, #520]	; (800612c <checkAktifCalisma+0x12e8>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <checkAktifCalisma+0x1102>
 8005f28:	2102      	movs	r1, #2
 8005f2a:	4881      	ldr	r0, [pc, #516]	; (8006130 <checkAktifCalisma+0x12ec>)
 8005f2c:	f003 f8d2 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d107      	bne.n	8005f46 <checkAktifCalisma+0x1102>
 8005f36:	4b7f      	ldr	r3, [pc, #508]	; (8006134 <checkAktifCalisma+0x12f0>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <checkAktifCalisma+0x1102>
 8005f3e:	4b7e      	ldr	r3, [pc, #504]	; (8006138 <checkAktifCalisma+0x12f4>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d112      	bne.n	8005f6c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005f46:	4b7d      	ldr	r3, [pc, #500]	; (800613c <checkAktifCalisma+0x12f8>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d066      	beq.n	800601c <checkAktifCalisma+0x11d8>
 8005f4e:	2104      	movs	r1, #4
 8005f50:	4877      	ldr	r0, [pc, #476]	; (8006130 <checkAktifCalisma+0x12ec>)
 8005f52:	f003 f8bf 	bl	80090d4 <HAL_GPIO_ReadPin>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d15f      	bne.n	800601c <checkAktifCalisma+0x11d8>
 8005f5c:	4b75      	ldr	r3, [pc, #468]	; (8006134 <checkAktifCalisma+0x12f0>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d05b      	beq.n	800601c <checkAktifCalisma+0x11d8>
 8005f64:	4b74      	ldr	r3, [pc, #464]	; (8006138 <checkAktifCalisma+0x12f4>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d057      	beq.n	800601c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005f6c:	4b74      	ldr	r3, [pc, #464]	; (8006140 <checkAktifCalisma+0x12fc>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	4b72      	ldr	r3, [pc, #456]	; (8006140 <checkAktifCalisma+0x12fc>)
 8005f76:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005f78:	4b71      	ldr	r3, [pc, #452]	; (8006140 <checkAktifCalisma+0x12fc>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b09      	cmp	r3, #9
 8005f7e:	d908      	bls.n	8005f92 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f80:	4b6f      	ldr	r3, [pc, #444]	; (8006140 <checkAktifCalisma+0x12fc>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f86:	4b6f      	ldr	r3, [pc, #444]	; (8006144 <checkAktifCalisma+0x1300>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4b6d      	ldr	r3, [pc, #436]	; (8006144 <checkAktifCalisma+0x1300>)
 8005f90:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f92:	4b6c      	ldr	r3, [pc, #432]	; (8006144 <checkAktifCalisma+0x1300>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b09      	cmp	r3, #9
 8005f98:	d908      	bls.n	8005fac <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f9a:	4b6a      	ldr	r3, [pc, #424]	; (8006144 <checkAktifCalisma+0x1300>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005fa0:	4b69      	ldr	r3, [pc, #420]	; (8006148 <checkAktifCalisma+0x1304>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	4b67      	ldr	r3, [pc, #412]	; (8006148 <checkAktifCalisma+0x1304>)
 8005faa:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005fac:	4b66      	ldr	r3, [pc, #408]	; (8006148 <checkAktifCalisma+0x1304>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b09      	cmp	r3, #9
 8005fb2:	d908      	bls.n	8005fc6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005fb4:	4b64      	ldr	r3, [pc, #400]	; (8006148 <checkAktifCalisma+0x1304>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005fba:	4b64      	ldr	r3, [pc, #400]	; (800614c <checkAktifCalisma+0x1308>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	4b62      	ldr	r3, [pc, #392]	; (800614c <checkAktifCalisma+0x1308>)
 8005fc4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005fc6:	4b61      	ldr	r3, [pc, #388]	; (800614c <checkAktifCalisma+0x1308>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b09      	cmp	r3, #9
 8005fcc:	d908      	bls.n	8005fe0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005fce:	4b5f      	ldr	r3, [pc, #380]	; (800614c <checkAktifCalisma+0x1308>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005fd4:	4b5e      	ldr	r3, [pc, #376]	; (8006150 <checkAktifCalisma+0x130c>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	4b5c      	ldr	r3, [pc, #368]	; (8006150 <checkAktifCalisma+0x130c>)
 8005fde:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005fe0:	4b5b      	ldr	r3, [pc, #364]	; (8006150 <checkAktifCalisma+0x130c>)
 8005fe2:	781a      	ldrb	r2, [r3, #0]
 8005fe4:	4b5b      	ldr	r3, [pc, #364]	; (8006154 <checkAktifCalisma+0x1310>)
 8005fe6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005fea:	4b58      	ldr	r3, [pc, #352]	; (800614c <checkAktifCalisma+0x1308>)
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	4b59      	ldr	r3, [pc, #356]	; (8006154 <checkAktifCalisma+0x1310>)
 8005ff0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005ff2:	4b55      	ldr	r3, [pc, #340]	; (8006148 <checkAktifCalisma+0x1304>)
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	4b57      	ldr	r3, [pc, #348]	; (8006154 <checkAktifCalisma+0x1310>)
 8005ff8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005ffa:	4b52      	ldr	r3, [pc, #328]	; (8006144 <checkAktifCalisma+0x1300>)
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	4b55      	ldr	r3, [pc, #340]	; (8006154 <checkAktifCalisma+0x1310>)
 8006000:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006002:	4b4f      	ldr	r3, [pc, #316]	; (8006140 <checkAktifCalisma+0x12fc>)
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	4b53      	ldr	r3, [pc, #332]	; (8006154 <checkAktifCalisma+0x1310>)
 8006008:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800600a:	4b53      	ldr	r3, [pc, #332]	; (8006158 <checkAktifCalisma+0x1314>)
 800600c:	2201      	movs	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006010:	4b46      	ldr	r3, [pc, #280]	; (800612c <checkAktifCalisma+0x12e8>)
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006016:	4b49      	ldr	r3, [pc, #292]	; (800613c <checkAktifCalisma+0x12f8>)
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800601c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006020:	484e      	ldr	r0, [pc, #312]	; (800615c <checkAktifCalisma+0x1318>)
 8006022:	f003 f857 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d016      	beq.n	800605a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800602c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006030:	484a      	ldr	r0, [pc, #296]	; (800615c <checkAktifCalisma+0x1318>)
 8006032:	f003 f84f 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00e      	beq.n	800605a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800603c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006040:	4846      	ldr	r0, [pc, #280]	; (800615c <checkAktifCalisma+0x1318>)
 8006042:	f003 f847 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d006      	beq.n	800605a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800604c:	2140      	movs	r1, #64	; 0x40
 800604e:	4838      	ldr	r0, [pc, #224]	; (8006130 <checkAktifCalisma+0x12ec>)
 8006050:	f003 f840 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <checkAktifCalisma+0x121e>
			startBasili=1;
 800605a:	4b41      	ldr	r3, [pc, #260]	; (8006160 <checkAktifCalisma+0x131c>)
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	e002      	b.n	8006068 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006062:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <checkAktifCalisma+0x131c>)
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006068:	4b3d      	ldr	r3, [pc, #244]	; (8006160 <checkAktifCalisma+0x131c>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d016      	beq.n	800609e <checkAktifCalisma+0x125a>
 8006070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006074:	4839      	ldr	r0, [pc, #228]	; (800615c <checkAktifCalisma+0x1318>)
 8006076:	f003 f82d 	bl	80090d4 <HAL_GPIO_ReadPin>
 800607a:	4603      	mov	r3, r0
 800607c:	2b01      	cmp	r3, #1
 800607e:	d10e      	bne.n	800609e <checkAktifCalisma+0x125a>
			hataVar=1;
 8006080:	4b38      	ldr	r3, [pc, #224]	; (8006164 <checkAktifCalisma+0x1320>)
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006086:	2001      	movs	r0, #1
 8006088:	f7fa fd7c 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(1);
 800608c:	2001      	movs	r0, #1
 800608e:	f7fa fd1f 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 8006092:	f001 f937 	bl	8007304 <convertAndSendData>
			acilstophatasi=1;
 8006096:	4b34      	ldr	r3, [pc, #208]	; (8006168 <checkAktifCalisma+0x1324>)
 8006098:	2201      	movs	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	e018      	b.n	80060d0 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800609e:	4b32      	ldr	r3, [pc, #200]	; (8006168 <checkAktifCalisma+0x1324>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d014      	beq.n	80060d0 <checkAktifCalisma+0x128c>
 80060a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060aa:	482c      	ldr	r0, [pc, #176]	; (800615c <checkAktifCalisma+0x1318>)
 80060ac:	f003 f812 	bl	80090d4 <HAL_GPIO_ReadPin>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10c      	bne.n	80060d0 <checkAktifCalisma+0x128c>
 80060b6:	4b2a      	ldr	r3, [pc, #168]	; (8006160 <checkAktifCalisma+0x131c>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f083 0301 	eor.w	r3, r3, #1
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80060c4:	4b28      	ldr	r3, [pc, #160]	; (8006168 <checkAktifCalisma+0x1324>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80060ca:	2001      	movs	r0, #1
 80060cc:	f7fe fce8 	bl	8004aa0 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80060d0:	4b26      	ldr	r3, [pc, #152]	; (800616c <checkAktifCalisma+0x1328>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f083 0301 	eor.w	r3, r3, #1
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d04e      	beq.n	800617c <checkAktifCalisma+0x1338>
 80060de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060e2:	481e      	ldr	r0, [pc, #120]	; (800615c <checkAktifCalisma+0x1318>)
 80060e4:	f002 fff6 	bl	80090d4 <HAL_GPIO_ReadPin>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <checkAktifCalisma+0x12b2>
 80060ee:	4b20      	ldr	r3, [pc, #128]	; (8006170 <checkAktifCalisma+0x132c>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d042      	beq.n	800617c <checkAktifCalisma+0x1338>
 80060f6:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <checkAktifCalisma+0x1330>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d13e      	bne.n	800617c <checkAktifCalisma+0x1338>
			hataVar=1;
 80060fe:	4b19      	ldr	r3, [pc, #100]	; (8006164 <checkAktifCalisma+0x1320>)
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006104:	2002      	movs	r0, #2
 8006106:	f7fa fd3d 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(2);
 800610a:	2002      	movs	r0, #2
 800610c:	f7fa fce0 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 8006110:	f001 f8f8 	bl	8007304 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006114:	4b18      	ldr	r3, [pc, #96]	; (8006178 <checkAktifCalisma+0x1334>)
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	e047      	b.n	80061ac <checkAktifCalisma+0x1368>
 800611c:	2000024b 	.word	0x2000024b
 8006120:	2000024a 	.word	0x2000024a
 8006124:	20000249 	.word	0x20000249
 8006128:	40010800 	.word	0x40010800
 800612c:	2000023f 	.word	0x2000023f
 8006130:	40011000 	.word	0x40011000
 8006134:	20000206 	.word	0x20000206
 8006138:	20000242 	.word	0x20000242
 800613c:	20000240 	.word	0x20000240
 8006140:	200001fd 	.word	0x200001fd
 8006144:	200001fe 	.word	0x200001fe
 8006148:	20000000 	.word	0x20000000
 800614c:	20000001 	.word	0x20000001
 8006150:	200001ff 	.word	0x200001ff
 8006154:	2000012c 	.word	0x2000012c
 8006158:	2000022c 	.word	0x2000022c
 800615c:	40010c00 	.word	0x40010c00
 8006160:	2000024e 	.word	0x2000024e
 8006164:	20000255 	.word	0x20000255
 8006168:	20000250 	.word	0x20000250
 800616c:	20000257 	.word	0x20000257
 8006170:	20000261 	.word	0x20000261
 8006174:	20000204 	.word	0x20000204
 8006178:	20000251 	.word	0x20000251
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800617c:	4b9b      	ldr	r3, [pc, #620]	; (80063ec <checkAktifCalisma+0x15a8>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d013      	beq.n	80061ac <checkAktifCalisma+0x1368>
 8006184:	4b9a      	ldr	r3, [pc, #616]	; (80063f0 <checkAktifCalisma+0x15ac>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00f      	beq.n	80061ac <checkAktifCalisma+0x1368>
 800618c:	4b99      	ldr	r3, [pc, #612]	; (80063f4 <checkAktifCalisma+0x15b0>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f083 0301 	eor.w	r3, r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800619a:	4b94      	ldr	r3, [pc, #592]	; (80063ec <checkAktifCalisma+0x15a8>)
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80061a0:	4b95      	ldr	r3, [pc, #596]	; (80063f8 <checkAktifCalisma+0x15b4>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80061a6:	2002      	movs	r0, #2
 80061a8:	f7fe fc7a 	bl	8004aa0 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80061ac:	4b93      	ldr	r3, [pc, #588]	; (80063fc <checkAktifCalisma+0x15b8>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d11e      	bne.n	80061f2 <checkAktifCalisma+0x13ae>
 80061b4:	4b92      	ldr	r3, [pc, #584]	; (8006400 <checkAktifCalisma+0x15bc>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d11a      	bne.n	80061f2 <checkAktifCalisma+0x13ae>
 80061bc:	4b91      	ldr	r3, [pc, #580]	; (8006404 <checkAktifCalisma+0x15c0>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d016      	beq.n	80061f2 <checkAktifCalisma+0x13ae>
 80061c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061c8:	488f      	ldr	r0, [pc, #572]	; (8006408 <checkAktifCalisma+0x15c4>)
 80061ca:	f002 ff83 	bl	80090d4 <HAL_GPIO_ReadPin>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d10e      	bne.n	80061f2 <checkAktifCalisma+0x13ae>
			hataVar=1;
 80061d4:	4b8d      	ldr	r3, [pc, #564]	; (800640c <checkAktifCalisma+0x15c8>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80061da:	2003      	movs	r0, #3
 80061dc:	f7fa fcd2 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80061e0:	2003      	movs	r0, #3
 80061e2:	f7fa fc75 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 80061e6:	f001 f88d 	bl	8007304 <convertAndSendData>
			basinchatasi=1;
 80061ea:	4b89      	ldr	r3, [pc, #548]	; (8006410 <checkAktifCalisma+0x15cc>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	e015      	b.n	800621e <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80061f2:	4b87      	ldr	r3, [pc, #540]	; (8006410 <checkAktifCalisma+0x15cc>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d011      	beq.n	800621e <checkAktifCalisma+0x13da>
 80061fa:	4b80      	ldr	r3, [pc, #512]	; (80063fc <checkAktifCalisma+0x15b8>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d10d      	bne.n	800621e <checkAktifCalisma+0x13da>
 8006202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006206:	4883      	ldr	r0, [pc, #524]	; (8006414 <checkAktifCalisma+0x15d0>)
 8006208:	f002 ff64 	bl	80090d4 <HAL_GPIO_ReadPin>
 800620c:	4603      	mov	r3, r0
 800620e:	2b01      	cmp	r3, #1
 8006210:	d105      	bne.n	800621e <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006212:	4b7f      	ldr	r3, [pc, #508]	; (8006410 <checkAktifCalisma+0x15cc>)
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006218:	2003      	movs	r0, #3
 800621a:	f7fe fc41 	bl	8004aa0 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800621e:	4b7e      	ldr	r3, [pc, #504]	; (8006418 <checkAktifCalisma+0x15d4>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d103      	bne.n	800622e <checkAktifCalisma+0x13ea>
 8006226:	4b7d      	ldr	r3, [pc, #500]	; (800641c <checkAktifCalisma+0x15d8>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01e      	beq.n	800626c <checkAktifCalisma+0x1428>
 800622e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006232:	487b      	ldr	r0, [pc, #492]	; (8006420 <checkAktifCalisma+0x15dc>)
 8006234:	f002 ff4e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006238:	4603      	mov	r3, r0
 800623a:	2b01      	cmp	r3, #1
 800623c:	d116      	bne.n	800626c <checkAktifCalisma+0x1428>
 800623e:	4b79      	ldr	r3, [pc, #484]	; (8006424 <checkAktifCalisma+0x15e0>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d003      	beq.n	800624e <checkAktifCalisma+0x140a>
 8006246:	4b77      	ldr	r3, [pc, #476]	; (8006424 <checkAktifCalisma+0x15e0>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d10e      	bne.n	800626c <checkAktifCalisma+0x1428>
			hataVar=1;
 800624e:	4b6f      	ldr	r3, [pc, #444]	; (800640c <checkAktifCalisma+0x15c8>)
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006254:	2004      	movs	r0, #4
 8006256:	f7fa fc95 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800625a:	2004      	movs	r0, #4
 800625c:	f7fa fc38 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 8006260:	f001 f850 	bl	8007304 <convertAndSendData>
			katkapisivicihatasi=1;
 8006264:	4b70      	ldr	r3, [pc, #448]	; (8006428 <checkAktifCalisma+0x15e4>)
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e01f      	b.n	80062ac <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800626c:	4b6e      	ldr	r3, [pc, #440]	; (8006428 <checkAktifCalisma+0x15e4>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01b      	beq.n	80062ac <checkAktifCalisma+0x1468>
 8006274:	4b6d      	ldr	r3, [pc, #436]	; (800642c <checkAktifCalisma+0x15e8>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d017      	beq.n	80062ac <checkAktifCalisma+0x1468>
 800627c:	4b66      	ldr	r3, [pc, #408]	; (8006418 <checkAktifCalisma+0x15d4>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f083 0301 	eor.w	r3, r3, #1
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d010      	beq.n	80062ac <checkAktifCalisma+0x1468>
 800628a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800628e:	4864      	ldr	r0, [pc, #400]	; (8006420 <checkAktifCalisma+0x15dc>)
 8006290:	f002 ff20 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d108      	bne.n	80062ac <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800629a:	4b63      	ldr	r3, [pc, #396]	; (8006428 <checkAktifCalisma+0x15e4>)
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80062a0:	4b5e      	ldr	r3, [pc, #376]	; (800641c <checkAktifCalisma+0x15d8>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80062a6:	2004      	movs	r0, #4
 80062a8:	f7fe fbfa 	bl	8004aa0 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062ac:	4b5a      	ldr	r3, [pc, #360]	; (8006418 <checkAktifCalisma+0x15d4>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d103      	bne.n	80062bc <checkAktifCalisma+0x1478>
 80062b4:	4b5e      	ldr	r3, [pc, #376]	; (8006430 <checkAktifCalisma+0x15ec>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01e      	beq.n	80062fa <checkAktifCalisma+0x14b6>
 80062bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062c0:	4857      	ldr	r0, [pc, #348]	; (8006420 <checkAktifCalisma+0x15dc>)
 80062c2:	f002 ff07 	bl	80090d4 <HAL_GPIO_ReadPin>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d116      	bne.n	80062fa <checkAktifCalisma+0x14b6>
 80062cc:	4b55      	ldr	r3, [pc, #340]	; (8006424 <checkAktifCalisma+0x15e0>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d003      	beq.n	80062dc <checkAktifCalisma+0x1498>
 80062d4:	4b53      	ldr	r3, [pc, #332]	; (8006424 <checkAktifCalisma+0x15e0>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d10e      	bne.n	80062fa <checkAktifCalisma+0x14b6>
			hataVar=1;
 80062dc:	4b4b      	ldr	r3, [pc, #300]	; (800640c <checkAktifCalisma+0x15c8>)
 80062de:	2201      	movs	r2, #1
 80062e0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80062e2:	2005      	movs	r0, #5
 80062e4:	f7fa fc4e 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80062e8:	2005      	movs	r0, #5
 80062ea:	f7fa fbf1 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 80062ee:	f001 f809 	bl	8007304 <convertAndSendData>
			tablakapisivicihatasi=1;
 80062f2:	4b50      	ldr	r3, [pc, #320]	; (8006434 <checkAktifCalisma+0x15f0>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	e023      	b.n	8006342 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80062fa:	4b4e      	ldr	r3, [pc, #312]	; (8006434 <checkAktifCalisma+0x15f0>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d01f      	beq.n	8006342 <checkAktifCalisma+0x14fe>
 8006302:	4b4a      	ldr	r3, [pc, #296]	; (800642c <checkAktifCalisma+0x15e8>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <checkAktifCalisma+0x14fe>
 800630a:	4b43      	ldr	r3, [pc, #268]	; (8006418 <checkAktifCalisma+0x15d4>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d014      	beq.n	8006342 <checkAktifCalisma+0x14fe>
 8006318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800631c:	4840      	ldr	r0, [pc, #256]	; (8006420 <checkAktifCalisma+0x15dc>)
 800631e:	f002 fed9 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10c      	bne.n	8006342 <checkAktifCalisma+0x14fe>
 8006328:	4b40      	ldr	r3, [pc, #256]	; (800642c <checkAktifCalisma+0x15e8>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006330:	4b40      	ldr	r3, [pc, #256]	; (8006434 <checkAktifCalisma+0x15f0>)
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006336:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <checkAktifCalisma+0x15ec>)
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 800633c:	2005      	movs	r0, #5
 800633e:	f7fe fbaf 	bl	8004aa0 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <checkAktifCalisma+0x15c0>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d107      	bne.n	800635a <checkAktifCalisma+0x1516>
 800634a:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <checkAktifCalisma+0x15b0>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <checkAktifCalisma+0x1516>
 8006352:	4b39      	ldr	r3, [pc, #228]	; (8006438 <checkAktifCalisma+0x15f4>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d016      	beq.n	8006388 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800635a:	4b38      	ldr	r3, [pc, #224]	; (800643c <checkAktifCalisma+0x15f8>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	4b38      	ldr	r3, [pc, #224]	; (8006440 <checkAktifCalisma+0x15fc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	4a37      	ldr	r2, [pc, #220]	; (8006444 <checkAktifCalisma+0x1600>)
 8006366:	7812      	ldrb	r2, [r2, #0]
 8006368:	4293      	cmp	r3, r2
 800636a:	d30d      	bcc.n	8006388 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 800636c:	4b27      	ldr	r3, [pc, #156]	; (800640c <checkAktifCalisma+0x15c8>)
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006372:	2006      	movs	r0, #6
 8006374:	f7fa fc06 	bl	8000b84 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006378:	2006      	movs	r0, #6
 800637a:	f7fa fba9 	bl	8000ad0 <hata2EEPROM>
			  	convertAndSendData();
 800637e:	f000 ffc1 	bl	8007304 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006382:	4b31      	ldr	r3, [pc, #196]	; (8006448 <checkAktifCalisma+0x1604>)
 8006384:	2201      	movs	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006388:	4b2f      	ldr	r3, [pc, #188]	; (8006448 <checkAktifCalisma+0x1604>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d013      	beq.n	80063b8 <checkAktifCalisma+0x1574>
 8006390:	2108      	movs	r1, #8
 8006392:	4823      	ldr	r0, [pc, #140]	; (8006420 <checkAktifCalisma+0x15dc>)
 8006394:	f002 fe9e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <checkAktifCalisma+0x1574>
 800639e:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <checkAktifCalisma+0x15d4>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	f083 0301 	eor.w	r3, r3, #1
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80063ac:	4b26      	ldr	r3, [pc, #152]	; (8006448 <checkAktifCalisma+0x1604>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80063b2:	2006      	movs	r0, #6
 80063b4:	f7fe fb74 	bl	8004aa0 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80063b8:	4b24      	ldr	r3, [pc, #144]	; (800644c <checkAktifCalisma+0x1608>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <checkAktifCalisma+0x1594>
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <checkAktifCalisma+0x15b0>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d107      	bne.n	80063d8 <checkAktifCalisma+0x1594>
 80063c8:	4b21      	ldr	r3, [pc, #132]	; (8006450 <checkAktifCalisma+0x160c>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <checkAktifCalisma+0x1594>
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <checkAktifCalisma+0x15f4>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d03f      	beq.n	8006458 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80063d8:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <checkAktifCalisma+0x1610>)
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80063de:	4b0f      	ldr	r3, [pc, #60]	; (800641c <checkAktifCalisma+0x15d8>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80063e4:	4b12      	ldr	r3, [pc, #72]	; (8006430 <checkAktifCalisma+0x15ec>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e03c      	b.n	8006466 <checkAktifCalisma+0x1622>
 80063ec:	20000251 	.word	0x20000251
 80063f0:	20000257 	.word	0x20000257
 80063f4:	20000238 	.word	0x20000238
 80063f8:	20000261 	.word	0x20000261
 80063fc:	20000203 	.word	0x20000203
 8006400:	20000207 	.word	0x20000207
 8006404:	20000254 	.word	0x20000254
 8006408:	40011000 	.word	0x40011000
 800640c:	20000255 	.word	0x20000255
 8006410:	2000025e 	.word	0x2000025e
 8006414:	40010c00 	.word	0x40010c00
 8006418:	2000024e 	.word	0x2000024e
 800641c:	20000262 	.word	0x20000262
 8006420:	40010800 	.word	0x40010800
 8006424:	20000208 	.word	0x20000208
 8006428:	2000025f 	.word	0x2000025f
 800642c:	20000242 	.word	0x20000242
 8006430:	20000263 	.word	0x20000263
 8006434:	20000260 	.word	0x20000260
 8006438:	20000237 	.word	0x20000237
 800643c:	200001dc 	.word	0x200001dc
 8006440:	200001f0 	.word	0x200001f0
 8006444:	20000218 	.word	0x20000218
 8006448:	2000024f 	.word	0x2000024f
 800644c:	20000235 	.word	0x20000235
 8006450:	20000236 	.word	0x20000236
 8006454:	20000256 	.word	0x20000256
		} else {
			makineCalisiyor=1;
 8006458:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <checkAktifCalisma+0x1690>)
 800645a:	2201      	movs	r2, #1
 800645c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800645e:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <checkAktifCalisma+0x1694>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <checkAktifCalisma+0x1698>)
 8006464:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006466:	4b1e      	ldr	r3, [pc, #120]	; (80064e0 <checkAktifCalisma+0x169c>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02f      	beq.n	80064ce <checkAktifCalisma+0x168a>
 800646e:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <checkAktifCalisma+0x16a0>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f083 0301 	eor.w	r3, r3, #1
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d028      	beq.n	80064ce <checkAktifCalisma+0x168a>
 800647c:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <checkAktifCalisma+0x16a4>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f083 0301 	eor.w	r3, r3, #1
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d021      	beq.n	80064ce <checkAktifCalisma+0x168a>
 800648a:	4b18      	ldr	r3, [pc, #96]	; (80064ec <checkAktifCalisma+0x16a8>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f083 0301 	eor.w	r3, r3, #1
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01a      	beq.n	80064ce <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006498:	4b15      	ldr	r3, [pc, #84]	; (80064f0 <checkAktifCalisma+0x16ac>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f083 0301 	eor.w	r3, r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d013      	beq.n	80064ce <checkAktifCalisma+0x168a>
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <checkAktifCalisma+0x16b0>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f083 0301 	eor.w	r3, r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <checkAktifCalisma+0x168a>
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <checkAktifCalisma+0x16b4>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f083 0301 	eor.w	r3, r3, #1
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <checkAktifCalisma+0x168a>
			hataVar=0;
 80064c2:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <checkAktifCalisma+0x169c>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80064c8:	2007      	movs	r0, #7
 80064ca:	f7fe fae9 	bl	8004aa0 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80064ce:	bf00      	nop
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000256 	.word	0x20000256
 80064d8:	200001dc 	.word	0x200001dc
 80064dc:	200001f0 	.word	0x200001f0
 80064e0:	20000255 	.word	0x20000255
 80064e4:	20000250 	.word	0x20000250
 80064e8:	20000251 	.word	0x20000251
 80064ec:	2000025e 	.word	0x2000025e
 80064f0:	2000025f 	.word	0x2000025f
 80064f4:	20000260 	.word	0x20000260
 80064f8:	2000024f 	.word	0x2000024f

080064fc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006500:	4b8b      	ldr	r3, [pc, #556]	; (8006730 <checkDemoModCalisma+0x234>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	f040 8229 	bne.w	800695c <checkDemoModCalisma+0x460>
 800650a:	4b8a      	ldr	r3, [pc, #552]	; (8006734 <checkDemoModCalisma+0x238>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 8224 	beq.w	800695c <checkDemoModCalisma+0x460>
 8006514:	4b88      	ldr	r3, [pc, #544]	; (8006738 <checkDemoModCalisma+0x23c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f040 821f 	bne.w	800695c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800651e:	2102      	movs	r1, #2
 8006520:	4886      	ldr	r0, [pc, #536]	; (800673c <checkDemoModCalisma+0x240>)
 8006522:	f002 fdd7 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d11d      	bne.n	8006568 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 800652c:	4b84      	ldr	r3, [pc, #528]	; (8006740 <checkDemoModCalisma+0x244>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f083 0301 	eor.w	r3, r3, #1
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800653a:	4b82      	ldr	r3, [pc, #520]	; (8006744 <checkDemoModCalisma+0x248>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	f083 0301 	eor.w	r3, r3, #1
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00f      	beq.n	8006568 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006548:	4b7f      	ldr	r3, [pc, #508]	; (8006748 <checkDemoModCalisma+0x24c>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f083 0301 	eor.w	r3, r3, #1
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006556:	2201      	movs	r2, #1
 8006558:	2104      	movs	r1, #4
 800655a:	487c      	ldr	r0, [pc, #496]	; (800674c <checkDemoModCalisma+0x250>)
 800655c:	f002 fdd1 	bl	8009102 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006560:	4b7b      	ldr	r3, [pc, #492]	; (8006750 <checkDemoModCalisma+0x254>)
 8006562:	2201      	movs	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e00e      	b.n	8006586 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006568:	2102      	movs	r1, #2
 800656a:	4874      	ldr	r0, [pc, #464]	; (800673c <checkDemoModCalisma+0x240>)
 800656c:	f002 fdb2 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006576:	2200      	movs	r2, #0
 8006578:	2104      	movs	r1, #4
 800657a:	4874      	ldr	r0, [pc, #464]	; (800674c <checkDemoModCalisma+0x250>)
 800657c:	f002 fdc1 	bl	8009102 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006580:	4b73      	ldr	r3, [pc, #460]	; (8006750 <checkDemoModCalisma+0x254>)
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006586:	4b72      	ldr	r3, [pc, #456]	; (8006750 <checkDemoModCalisma+0x254>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <checkDemoModCalisma+0xaa>
 800658e:	4b6d      	ldr	r3, [pc, #436]	; (8006744 <checkDemoModCalisma+0x248>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d107      	bne.n	80065a6 <checkDemoModCalisma+0xaa>
 8006596:	4b6c      	ldr	r3, [pc, #432]	; (8006748 <checkDemoModCalisma+0x24c>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <checkDemoModCalisma+0xaa>
 800659e:	4b68      	ldr	r3, [pc, #416]	; (8006740 <checkDemoModCalisma+0x244>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00c      	beq.n	80065c0 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80065a6:	2201      	movs	r2, #1
 80065a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065ac:	4867      	ldr	r0, [pc, #412]	; (800674c <checkDemoModCalisma+0x250>)
 80065ae:	f002 fda8 	bl	8009102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065b2:	2201      	movs	r2, #1
 80065b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065b8:	4864      	ldr	r0, [pc, #400]	; (800674c <checkDemoModCalisma+0x250>)
 80065ba:	f002 fda2 	bl	8009102 <HAL_GPIO_WritePin>
 80065be:	e00b      	b.n	80065d8 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80065c0:	2200      	movs	r2, #0
 80065c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065c6:	4861      	ldr	r0, [pc, #388]	; (800674c <checkDemoModCalisma+0x250>)
 80065c8:	f002 fd9b 	bl	8009102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065d2:	485e      	ldr	r0, [pc, #376]	; (800674c <checkDemoModCalisma+0x250>)
 80065d4:	f002 fd95 	bl	8009102 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065d8:	2102      	movs	r1, #2
 80065da:	4858      	ldr	r0, [pc, #352]	; (800673c <checkDemoModCalisma+0x240>)
 80065dc:	f002 fd7a 	bl	80090d4 <HAL_GPIO_ReadPin>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10d      	bne.n	8006602 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065ea:	4854      	ldr	r0, [pc, #336]	; (800673c <checkDemoModCalisma+0x240>)
 80065ec:	f002 fd72 	bl	80090d4 <HAL_GPIO_ReadPin>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d105      	bne.n	8006602 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80065f6:	4b56      	ldr	r3, [pc, #344]	; (8006750 <checkDemoModCalisma+0x254>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f083 0301 	eor.w	r3, r3, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006602:	2102      	movs	r1, #2
 8006604:	484d      	ldr	r0, [pc, #308]	; (800673c <checkDemoModCalisma+0x240>)
 8006606:	f002 fd65 	bl	80090d4 <HAL_GPIO_ReadPin>
 800660a:	4603      	mov	r3, r0
 800660c:	2b01      	cmp	r3, #1
 800660e:	d125      	bne.n	800665c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006614:	4849      	ldr	r0, [pc, #292]	; (800673c <checkDemoModCalisma+0x240>)
 8006616:	f002 fd5d 	bl	80090d4 <HAL_GPIO_ReadPin>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11d      	bne.n	800665c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006620:	4b4b      	ldr	r3, [pc, #300]	; (8006750 <checkDemoModCalisma+0x254>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	f083 0301 	eor.w	r3, r3, #1
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800662e:	4b44      	ldr	r3, [pc, #272]	; (8006740 <checkDemoModCalisma+0x244>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f083 0301 	eor.w	r3, r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00f      	beq.n	800665c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 800663c:	4b42      	ldr	r3, [pc, #264]	; (8006748 <checkDemoModCalisma+0x24c>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f083 0301 	eor.w	r3, r3, #1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800664a:	2201      	movs	r2, #1
 800664c:	2120      	movs	r1, #32
 800664e:	483b      	ldr	r0, [pc, #236]	; (800673c <checkDemoModCalisma+0x240>)
 8006650:	f002 fd57 	bl	8009102 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006654:	4b3b      	ldr	r3, [pc, #236]	; (8006744 <checkDemoModCalisma+0x248>)
 8006656:	2201      	movs	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e007      	b.n	800666c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800665c:	2200      	movs	r2, #0
 800665e:	2120      	movs	r1, #32
 8006660:	4836      	ldr	r0, [pc, #216]	; (800673c <checkDemoModCalisma+0x240>)
 8006662:	f002 fd4e 	bl	8009102 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006666:	4b37      	ldr	r3, [pc, #220]	; (8006744 <checkDemoModCalisma+0x248>)
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800666c:	2102      	movs	r1, #2
 800666e:	4833      	ldr	r0, [pc, #204]	; (800673c <checkDemoModCalisma+0x240>)
 8006670:	f002 fd30 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006674:	4603      	mov	r3, r0
 8006676:	2b01      	cmp	r3, #1
 8006678:	d125      	bne.n	80066c6 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800667a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800667e:	482f      	ldr	r0, [pc, #188]	; (800673c <checkDemoModCalisma+0x240>)
 8006680:	f002 fd28 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11d      	bne.n	80066c6 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800668a:	4b31      	ldr	r3, [pc, #196]	; (8006750 <checkDemoModCalisma+0x254>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f083 0301 	eor.w	r3, r3, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d016      	beq.n	80066c6 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006698:	4b2a      	ldr	r3, [pc, #168]	; (8006744 <checkDemoModCalisma+0x248>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f083 0301 	eor.w	r3, r3, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00f      	beq.n	80066c6 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80066a6:	4b26      	ldr	r3, [pc, #152]	; (8006740 <checkDemoModCalisma+0x244>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f083 0301 	eor.w	r3, r3, #1
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80066b4:	2201      	movs	r2, #1
 80066b6:	2110      	movs	r1, #16
 80066b8:	4820      	ldr	r0, [pc, #128]	; (800673c <checkDemoModCalisma+0x240>)
 80066ba:	f002 fd22 	bl	8009102 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80066be:	4b22      	ldr	r3, [pc, #136]	; (8006748 <checkDemoModCalisma+0x24c>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e007      	b.n	80066d6 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066c6:	2200      	movs	r2, #0
 80066c8:	2110      	movs	r1, #16
 80066ca:	481c      	ldr	r0, [pc, #112]	; (800673c <checkDemoModCalisma+0x240>)
 80066cc:	f002 fd19 	bl	8009102 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80066d0:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <checkDemoModCalisma+0x24c>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80066d6:	2104      	movs	r1, #4
 80066d8:	4818      	ldr	r0, [pc, #96]	; (800673c <checkDemoModCalisma+0x240>)
 80066da:	f002 fcfb 	bl	80090d4 <HAL_GPIO_ReadPin>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d139      	bne.n	8006758 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80066e4:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <checkDemoModCalisma+0x254>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f083 0301 	eor.w	r3, r3, #1
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d032      	beq.n	8006758 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80066f2:	4b15      	ldr	r3, [pc, #84]	; (8006748 <checkDemoModCalisma+0x24c>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f083 0301 	eor.w	r3, r3, #1
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d02b      	beq.n	8006758 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <checkDemoModCalisma+0x248>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f083 0301 	eor.w	r3, r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d024      	beq.n	8006758 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800670e:	2201      	movs	r2, #1
 8006710:	2102      	movs	r1, #2
 8006712:	480e      	ldr	r0, [pc, #56]	; (800674c <checkDemoModCalisma+0x250>)
 8006714:	f002 fcf5 	bl	8009102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006718:	2201      	movs	r2, #1
 800671a:	2101      	movs	r1, #1
 800671c:	480b      	ldr	r0, [pc, #44]	; (800674c <checkDemoModCalisma+0x250>)
 800671e:	f002 fcf0 	bl	8009102 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <checkDemoModCalisma+0x244>)
 8006724:	2201      	movs	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <checkDemoModCalisma+0x258>)
 800672a:	2201      	movs	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	e027      	b.n	8006780 <checkDemoModCalisma+0x284>
 8006730:	2000021e 	.word	0x2000021e
 8006734:	20000252 	.word	0x20000252
 8006738:	2000021d 	.word	0x2000021d
 800673c:	40011000 	.word	0x40011000
 8006740:	20000259 	.word	0x20000259
 8006744:	2000025a 	.word	0x2000025a
 8006748:	2000025b 	.word	0x2000025b
 800674c:	40010c00 	.word	0x40010c00
 8006750:	20000258 	.word	0x20000258
 8006754:	2000023e 	.word	0x2000023e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006758:	2104      	movs	r1, #4
 800675a:	48a0      	ldr	r0, [pc, #640]	; (80069dc <checkDemoModCalisma+0x4e0>)
 800675c:	f002 fcba 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006760:	4603      	mov	r3, r0
 8006762:	2b01      	cmp	r3, #1
 8006764:	d10c      	bne.n	8006780 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006766:	2200      	movs	r2, #0
 8006768:	2102      	movs	r1, #2
 800676a:	489d      	ldr	r0, [pc, #628]	; (80069e0 <checkDemoModCalisma+0x4e4>)
 800676c:	f002 fcc9 	bl	8009102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006770:	2200      	movs	r2, #0
 8006772:	2101      	movs	r1, #1
 8006774:	489a      	ldr	r0, [pc, #616]	; (80069e0 <checkDemoModCalisma+0x4e4>)
 8006776:	f002 fcc4 	bl	8009102 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800677a:	4b9a      	ldr	r3, [pc, #616]	; (80069e4 <checkDemoModCalisma+0x4e8>)
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006780:	2104      	movs	r1, #4
 8006782:	4896      	ldr	r0, [pc, #600]	; (80069dc <checkDemoModCalisma+0x4e0>)
 8006784:	f002 fca6 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006788:	4603      	mov	r3, r0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d10d      	bne.n	80067aa <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800678e:	2201      	movs	r2, #1
 8006790:	2180      	movs	r1, #128	; 0x80
 8006792:	4895      	ldr	r0, [pc, #596]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 8006794:	f002 fcb5 	bl	8009102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006798:	2201      	movs	r2, #1
 800679a:	2120      	movs	r1, #32
 800679c:	4892      	ldr	r0, [pc, #584]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 800679e:	f002 fcb0 	bl	8009102 <HAL_GPIO_WritePin>
			timer3 = millis;
 80067a2:	4b92      	ldr	r3, [pc, #584]	; (80069ec <checkDemoModCalisma+0x4f0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a92      	ldr	r2, [pc, #584]	; (80069f0 <checkDemoModCalisma+0x4f4>)
 80067a8:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067aa:	4b90      	ldr	r3, [pc, #576]	; (80069ec <checkDemoModCalisma+0x4f0>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b90      	ldr	r3, [pc, #576]	; (80069f0 <checkDemoModCalisma+0x4f4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d909      	bls.n	80067cc <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067b8:	2200      	movs	r2, #0
 80067ba:	2180      	movs	r1, #128	; 0x80
 80067bc:	488a      	ldr	r0, [pc, #552]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 80067be:	f002 fca0 	bl	8009102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067c2:	2200      	movs	r2, #0
 80067c4:	2120      	movs	r1, #32
 80067c6:	4888      	ldr	r0, [pc, #544]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 80067c8:	f002 fc9b 	bl	8009102 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80067cc:	2102      	movs	r1, #2
 80067ce:	4883      	ldr	r0, [pc, #524]	; (80069dc <checkDemoModCalisma+0x4e0>)
 80067d0:	f002 fc80 	bl	80090d4 <HAL_GPIO_ReadPin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d108      	bne.n	80067ec <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80067da:	2201      	movs	r2, #1
 80067dc:	2140      	movs	r1, #64	; 0x40
 80067de:	4882      	ldr	r0, [pc, #520]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 80067e0:	f002 fc8f 	bl	8009102 <HAL_GPIO_WritePin>
			timer3 = millis;
 80067e4:	4b81      	ldr	r3, [pc, #516]	; (80069ec <checkDemoModCalisma+0x4f0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a81      	ldr	r2, [pc, #516]	; (80069f0 <checkDemoModCalisma+0x4f4>)
 80067ea:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067ec:	4b7f      	ldr	r3, [pc, #508]	; (80069ec <checkDemoModCalisma+0x4f0>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4b7f      	ldr	r3, [pc, #508]	; (80069f0 <checkDemoModCalisma+0x4f4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d904      	bls.n	8006804 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80067fa:	2200      	movs	r2, #0
 80067fc:	2140      	movs	r1, #64	; 0x40
 80067fe:	487a      	ldr	r0, [pc, #488]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 8006800:	f002 fc7f 	bl	8009102 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006804:	4b7b      	ldr	r3, [pc, #492]	; (80069f4 <checkDemoModCalisma+0x4f8>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d058      	beq.n	80068be <checkDemoModCalisma+0x3c2>
 800680c:	4b7a      	ldr	r3, [pc, #488]	; (80069f8 <checkDemoModCalisma+0x4fc>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d054      	beq.n	80068be <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006814:	4b79      	ldr	r3, [pc, #484]	; (80069fc <checkDemoModCalisma+0x500>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	4b77      	ldr	r3, [pc, #476]	; (80069fc <checkDemoModCalisma+0x500>)
 800681e:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006820:	4b76      	ldr	r3, [pc, #472]	; (80069fc <checkDemoModCalisma+0x500>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b09      	cmp	r3, #9
 8006826:	d908      	bls.n	800683a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006828:	4b74      	ldr	r3, [pc, #464]	; (80069fc <checkDemoModCalisma+0x500>)
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800682e:	4b74      	ldr	r3, [pc, #464]	; (8006a00 <checkDemoModCalisma+0x504>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	b2da      	uxtb	r2, r3
 8006836:	4b72      	ldr	r3, [pc, #456]	; (8006a00 <checkDemoModCalisma+0x504>)
 8006838:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800683a:	4b71      	ldr	r3, [pc, #452]	; (8006a00 <checkDemoModCalisma+0x504>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b09      	cmp	r3, #9
 8006840:	d908      	bls.n	8006854 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006842:	4b6f      	ldr	r3, [pc, #444]	; (8006a00 <checkDemoModCalisma+0x504>)
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006848:	4b6e      	ldr	r3, [pc, #440]	; (8006a04 <checkDemoModCalisma+0x508>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	b2da      	uxtb	r2, r3
 8006850:	4b6c      	ldr	r3, [pc, #432]	; (8006a04 <checkDemoModCalisma+0x508>)
 8006852:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006854:	4b6b      	ldr	r3, [pc, #428]	; (8006a04 <checkDemoModCalisma+0x508>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b09      	cmp	r3, #9
 800685a:	d908      	bls.n	800686e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 800685c:	4b69      	ldr	r3, [pc, #420]	; (8006a04 <checkDemoModCalisma+0x508>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006862:	4b69      	ldr	r3, [pc, #420]	; (8006a08 <checkDemoModCalisma+0x50c>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b67      	ldr	r3, [pc, #412]	; (8006a08 <checkDemoModCalisma+0x50c>)
 800686c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800686e:	4b66      	ldr	r3, [pc, #408]	; (8006a08 <checkDemoModCalisma+0x50c>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b09      	cmp	r3, #9
 8006874:	d908      	bls.n	8006888 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006876:	4b64      	ldr	r3, [pc, #400]	; (8006a08 <checkDemoModCalisma+0x50c>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 800687c:	4b63      	ldr	r3, [pc, #396]	; (8006a0c <checkDemoModCalisma+0x510>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	b2da      	uxtb	r2, r3
 8006884:	4b61      	ldr	r3, [pc, #388]	; (8006a0c <checkDemoModCalisma+0x510>)
 8006886:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006888:	4b60      	ldr	r3, [pc, #384]	; (8006a0c <checkDemoModCalisma+0x510>)
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	4b60      	ldr	r3, [pc, #384]	; (8006a10 <checkDemoModCalisma+0x514>)
 800688e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006892:	4b5d      	ldr	r3, [pc, #372]	; (8006a08 <checkDemoModCalisma+0x50c>)
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	4b5e      	ldr	r3, [pc, #376]	; (8006a10 <checkDemoModCalisma+0x514>)
 8006898:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800689a:	4b5a      	ldr	r3, [pc, #360]	; (8006a04 <checkDemoModCalisma+0x508>)
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	4b5c      	ldr	r3, [pc, #368]	; (8006a10 <checkDemoModCalisma+0x514>)
 80068a0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80068a2:	4b57      	ldr	r3, [pc, #348]	; (8006a00 <checkDemoModCalisma+0x504>)
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	4b5a      	ldr	r3, [pc, #360]	; (8006a10 <checkDemoModCalisma+0x514>)
 80068a8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80068aa:	4b54      	ldr	r3, [pc, #336]	; (80069fc <checkDemoModCalisma+0x500>)
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	4b58      	ldr	r3, [pc, #352]	; (8006a10 <checkDemoModCalisma+0x514>)
 80068b0:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80068b2:	4b58      	ldr	r3, [pc, #352]	; (8006a14 <checkDemoModCalisma+0x518>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80068b8:	4b4f      	ldr	r3, [pc, #316]	; (80069f8 <checkDemoModCalisma+0x4fc>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80068be:	4b56      	ldr	r3, [pc, #344]	; (8006a18 <checkDemoModCalisma+0x51c>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f040 8087 	bne.w	80069d6 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80068c8:	4a54      	ldr	r2, [pc, #336]	; (8006a1c <checkDemoModCalisma+0x520>)
 80068ca:	2101      	movs	r1, #1
 80068cc:	2002      	movs	r0, #2
 80068ce:	f001 f8db 	bl	8007a88 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80068d2:	4a53      	ldr	r2, [pc, #332]	; (8006a20 <checkDemoModCalisma+0x524>)
 80068d4:	2101      	movs	r1, #1
 80068d6:	2001      	movs	r0, #1
 80068d8:	f001 f8d6 	bl	8007a88 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80068dc:	4b4b      	ldr	r3, [pc, #300]	; (8006a0c <checkDemoModCalisma+0x510>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	220a      	movs	r2, #10
 80068e2:	4950      	ldr	r1, [pc, #320]	; (8006a24 <checkDemoModCalisma+0x528>)
 80068e4:	4618      	mov	r0, r3
 80068e6:	f005 fc7d 	bl	800c1e4 <itoa>
			lcd_print(2,12,snum);
 80068ea:	4a4e      	ldr	r2, [pc, #312]	; (8006a24 <checkDemoModCalisma+0x528>)
 80068ec:	210c      	movs	r1, #12
 80068ee:	2002      	movs	r0, #2
 80068f0:	f001 f8ca 	bl	8007a88 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80068f4:	4b44      	ldr	r3, [pc, #272]	; (8006a08 <checkDemoModCalisma+0x50c>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	220a      	movs	r2, #10
 80068fa:	494a      	ldr	r1, [pc, #296]	; (8006a24 <checkDemoModCalisma+0x528>)
 80068fc:	4618      	mov	r0, r3
 80068fe:	f005 fc71 	bl	800c1e4 <itoa>
			lcd_print(2,13,snum);
 8006902:	4a48      	ldr	r2, [pc, #288]	; (8006a24 <checkDemoModCalisma+0x528>)
 8006904:	210d      	movs	r1, #13
 8006906:	2002      	movs	r0, #2
 8006908:	f001 f8be 	bl	8007a88 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 800690c:	4b3d      	ldr	r3, [pc, #244]	; (8006a04 <checkDemoModCalisma+0x508>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	220a      	movs	r2, #10
 8006912:	4944      	ldr	r1, [pc, #272]	; (8006a24 <checkDemoModCalisma+0x528>)
 8006914:	4618      	mov	r0, r3
 8006916:	f005 fc65 	bl	800c1e4 <itoa>
			lcd_print(2,14,snum);
 800691a:	4a42      	ldr	r2, [pc, #264]	; (8006a24 <checkDemoModCalisma+0x528>)
 800691c:	210e      	movs	r1, #14
 800691e:	2002      	movs	r0, #2
 8006920:	f001 f8b2 	bl	8007a88 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006924:	4b36      	ldr	r3, [pc, #216]	; (8006a00 <checkDemoModCalisma+0x504>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	220a      	movs	r2, #10
 800692a:	493e      	ldr	r1, [pc, #248]	; (8006a24 <checkDemoModCalisma+0x528>)
 800692c:	4618      	mov	r0, r3
 800692e:	f005 fc59 	bl	800c1e4 <itoa>
			lcd_print(2,15,snum);
 8006932:	4a3c      	ldr	r2, [pc, #240]	; (8006a24 <checkDemoModCalisma+0x528>)
 8006934:	210f      	movs	r1, #15
 8006936:	2002      	movs	r0, #2
 8006938:	f001 f8a6 	bl	8007a88 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 800693c:	4b2f      	ldr	r3, [pc, #188]	; (80069fc <checkDemoModCalisma+0x500>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	220a      	movs	r2, #10
 8006942:	4938      	ldr	r1, [pc, #224]	; (8006a24 <checkDemoModCalisma+0x528>)
 8006944:	4618      	mov	r0, r3
 8006946:	f005 fc4d 	bl	800c1e4 <itoa>
			lcd_print(2,16,snum);
 800694a:	4a36      	ldr	r2, [pc, #216]	; (8006a24 <checkDemoModCalisma+0x528>)
 800694c:	2110      	movs	r1, #16
 800694e:	2002      	movs	r0, #2
 8006950:	f001 f89a 	bl	8007a88 <lcd_print>
			mesajYazildi=1;
 8006954:	4b34      	ldr	r3, [pc, #208]	; (8006a28 <checkDemoModCalisma+0x52c>)
 8006956:	2201      	movs	r2, #1
 8006958:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800695a:	e03c      	b.n	80069d6 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 800695c:	4b33      	ldr	r3, [pc, #204]	; (8006a2c <checkDemoModCalisma+0x530>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d003      	beq.n	800696c <checkDemoModCalisma+0x470>
 8006964:	4b2c      	ldr	r3, [pc, #176]	; (8006a18 <checkDemoModCalisma+0x51c>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d134      	bne.n	80069d6 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800696c:	2200      	movs	r2, #0
 800696e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006972:	481b      	ldr	r0, [pc, #108]	; (80069e0 <checkDemoModCalisma+0x4e4>)
 8006974:	f002 fbc5 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006978:	2200      	movs	r2, #0
 800697a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800697e:	4818      	ldr	r0, [pc, #96]	; (80069e0 <checkDemoModCalisma+0x4e4>)
 8006980:	f002 fbbf 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006984:	2200      	movs	r2, #0
 8006986:	2104      	movs	r1, #4
 8006988:	4815      	ldr	r0, [pc, #84]	; (80069e0 <checkDemoModCalisma+0x4e4>)
 800698a:	f002 fbba 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800698e:	2200      	movs	r2, #0
 8006990:	2102      	movs	r1, #2
 8006992:	4813      	ldr	r0, [pc, #76]	; (80069e0 <checkDemoModCalisma+0x4e4>)
 8006994:	f002 fbb5 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006998:	2200      	movs	r2, #0
 800699a:	2101      	movs	r1, #1
 800699c:	4810      	ldr	r0, [pc, #64]	; (80069e0 <checkDemoModCalisma+0x4e4>)
 800699e:	f002 fbb0 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80069a2:	2200      	movs	r2, #0
 80069a4:	2120      	movs	r1, #32
 80069a6:	480d      	ldr	r0, [pc, #52]	; (80069dc <checkDemoModCalisma+0x4e0>)
 80069a8:	f002 fbab 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80069ac:	2200      	movs	r2, #0
 80069ae:	2110      	movs	r1, #16
 80069b0:	480a      	ldr	r0, [pc, #40]	; (80069dc <checkDemoModCalisma+0x4e0>)
 80069b2:	f002 fba6 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80069b6:	2200      	movs	r2, #0
 80069b8:	2180      	movs	r1, #128	; 0x80
 80069ba:	480b      	ldr	r0, [pc, #44]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 80069bc:	f002 fba1 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80069c0:	2200      	movs	r2, #0
 80069c2:	2140      	movs	r1, #64	; 0x40
 80069c4:	4808      	ldr	r0, [pc, #32]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 80069c6:	f002 fb9c 	bl	8009102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069ca:	2200      	movs	r2, #0
 80069cc:	2120      	movs	r1, #32
 80069ce:	4806      	ldr	r0, [pc, #24]	; (80069e8 <checkDemoModCalisma+0x4ec>)
 80069d0:	f002 fb97 	bl	8009102 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80069d4:	e7ff      	b.n	80069d6 <checkDemoModCalisma+0x4da>
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40011000 	.word	0x40011000
 80069e0:	40010c00 	.word	0x40010c00
 80069e4:	20000259 	.word	0x20000259
 80069e8:	40010800 	.word	0x40010800
 80069ec:	200001dc 	.word	0x200001dc
 80069f0:	200001ec 	.word	0x200001ec
 80069f4:	20000258 	.word	0x20000258
 80069f8:	2000023e 	.word	0x2000023e
 80069fc:	200001fd 	.word	0x200001fd
 8006a00:	200001fe 	.word	0x200001fe
 8006a04:	20000000 	.word	0x20000000
 8006a08:	20000001 	.word	0x20000001
 8006a0c:	200001ff 	.word	0x200001ff
 8006a10:	2000012c 	.word	0x2000012c
 8006a14:	2000022c 	.word	0x2000022c
 8006a18:	2000021d 	.word	0x2000021d
 8006a1c:	0800da38 	.word	0x0800da38
 8006a20:	0800da44 	.word	0x0800da44
 8006a24:	2000019c 	.word	0x2000019c
 8006a28:	20000234 	.word	0x20000234
 8006a2c:	2000021e 	.word	0x2000021e

08006a30 <mainLoop>:

void mainLoop() {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006a36:	f7fe f923 	bl	8004c80 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	48ac      	ldr	r0, [pc, #688]	; (8006cf0 <mainLoop+0x2c0>)
 8006a3e:	f002 fb49 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d136      	bne.n	8006ab6 <mainLoop+0x86>
 8006a48:	2108      	movs	r1, #8
 8006a4a:	48aa      	ldr	r0, [pc, #680]	; (8006cf4 <mainLoop+0x2c4>)
 8006a4c:	f002 fb42 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d12f      	bne.n	8006ab6 <mainLoop+0x86>
 8006a56:	2102      	movs	r1, #2
 8006a58:	48a5      	ldr	r0, [pc, #660]	; (8006cf0 <mainLoop+0x2c0>)
 8006a5a:	f002 fb3b 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d128      	bne.n	8006ab6 <mainLoop+0x86>
 8006a64:	2104      	movs	r1, #4
 8006a66:	48a2      	ldr	r0, [pc, #648]	; (8006cf0 <mainLoop+0x2c0>)
 8006a68:	f002 fb34 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d121      	bne.n	8006ab6 <mainLoop+0x86>
 8006a72:	2108      	movs	r1, #8
 8006a74:	489e      	ldr	r0, [pc, #632]	; (8006cf0 <mainLoop+0x2c0>)
 8006a76:	f002 fb2d 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11a      	bne.n	8006ab6 <mainLoop+0x86>
 8006a80:	2180      	movs	r1, #128	; 0x80
 8006a82:	489c      	ldr	r0, [pc, #624]	; (8006cf4 <mainLoop+0x2c4>)
 8006a84:	f002 fb26 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d113      	bne.n	8006ab6 <mainLoop+0x86>
 8006a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a92:	4898      	ldr	r0, [pc, #608]	; (8006cf4 <mainLoop+0x2c4>)
 8006a94:	f002 fb1e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10b      	bne.n	8006ab6 <mainLoop+0x86>
 8006a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006aa2:	4894      	ldr	r0, [pc, #592]	; (8006cf4 <mainLoop+0x2c4>)
 8006aa4:	f002 fb16 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d103      	bne.n	8006ab6 <mainLoop+0x86>
			butonKontrol=0;
 8006aae:	4b92      	ldr	r3, [pc, #584]	; (8006cf8 <mainLoop+0x2c8>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e003      	b.n	8006abe <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006ab6:	4b91      	ldr	r3, [pc, #580]	; (8006cfc <mainLoop+0x2cc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a91      	ldr	r2, [pc, #580]	; (8006d00 <mainLoop+0x2d0>)
 8006abc:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006abe:	4b91      	ldr	r3, [pc, #580]	; (8006d04 <mainLoop+0x2d4>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d03a      	beq.n	8006b3c <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006ac6:	bf00      	nop
 8006ac8:	488f      	ldr	r0, [pc, #572]	; (8006d08 <mainLoop+0x2d8>)
 8006aca:	f003 f92c 	bl	8009d26 <HAL_I2C_GetError>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d0f9      	beq.n	8006ac8 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006ad4:	bf00      	nop
 8006ad6:	488c      	ldr	r0, [pc, #560]	; (8006d08 <mainLoop+0x2d8>)
 8006ad8:	f003 f918 	bl	8009d0c <HAL_I2C_GetState>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d1f9      	bne.n	8006ad6 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ae2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	236e      	movs	r3, #110	; 0x6e
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	4b87      	ldr	r3, [pc, #540]	; (8006d0c <mainLoop+0x2dc>)
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	236e      	movs	r3, #110	; 0x6e
 8006af2:	2200      	movs	r2, #0
 8006af4:	21a0      	movs	r1, #160	; 0xa0
 8006af6:	4884      	ldr	r0, [pc, #528]	; (8006d08 <mainLoop+0x2d8>)
 8006af8:	f002 fda6 	bl	8009648 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b00:	f001 fd18 	bl	8008534 <HAL_Delay>

		  hafizaYaz=0;
 8006b04:	4b7f      	ldr	r3, [pc, #508]	; (8006d04 <mainLoop+0x2d4>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006b0a:	4b81      	ldr	r3, [pc, #516]	; (8006d10 <mainLoop+0x2e0>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006b12:	4a80      	ldr	r2, [pc, #512]	; (8006d14 <mainLoop+0x2e4>)
 8006b14:	2101      	movs	r1, #1
 8006b16:	2002      	movs	r0, #2
 8006b18:	f000 ffb6 	bl	8007a88 <lcd_print>
 8006b1c:	e008      	b.n	8006b30 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006b1e:	4b7c      	ldr	r3, [pc, #496]	; (8006d10 <mainLoop+0x2e0>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d104      	bne.n	8006b30 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006b26:	4a7c      	ldr	r2, [pc, #496]	; (8006d18 <mainLoop+0x2e8>)
 8006b28:	2101      	movs	r1, #1
 8006b2a:	2002      	movs	r0, #2
 8006b2c:	f000 ffac 	bl	8007a88 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b34:	f001 fcfe 	bl	8008534 <HAL_Delay>
		  lcd_clear();
 8006b38:	f000 ffd2 	bl	8007ae0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006b3c:	4b77      	ldr	r3, [pc, #476]	; (8006d1c <mainLoop+0x2ec>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f083 0301 	eor.w	r3, r3, #1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d06d      	beq.n	8006c26 <mainLoop+0x1f6>
 8006b4a:	486f      	ldr	r0, [pc, #444]	; (8006d08 <mainLoop+0x2d8>)
 8006b4c:	f003 f8de 	bl	8009d0c <HAL_I2C_GetState>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d167      	bne.n	8006c26 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006b56:	4b72      	ldr	r3, [pc, #456]	; (8006d20 <mainLoop+0x2f0>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f083 0301 	eor.w	r3, r3, #1
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d044      	beq.n	8006bee <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006b64:	4a6f      	ldr	r2, [pc, #444]	; (8006d24 <mainLoop+0x2f4>)
 8006b66:	2101      	movs	r1, #1
 8006b68:	2001      	movs	r0, #1
 8006b6a:	f000 ff8d 	bl	8007a88 <lcd_print>
			  if(dilSecim==0) {
 8006b6e:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <mainLoop+0x2e0>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006b76:	4a6c      	ldr	r2, [pc, #432]	; (8006d28 <mainLoop+0x2f8>)
 8006b78:	2101      	movs	r1, #1
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f000 ff84 	bl	8007a88 <lcd_print>
 8006b80:	e008      	b.n	8006b94 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006b82:	4b63      	ldr	r3, [pc, #396]	; (8006d10 <mainLoop+0x2e0>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d104      	bne.n	8006b94 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006b8a:	4a68      	ldr	r2, [pc, #416]	; (8006d2c <mainLoop+0x2fc>)
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	2002      	movs	r0, #2
 8006b90:	f000 ff7a 	bl	8007a88 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b98:	f001 fccc 	bl	8008534 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b9c:	bf00      	nop
 8006b9e:	485a      	ldr	r0, [pc, #360]	; (8006d08 <mainLoop+0x2d8>)
 8006ba0:	f003 f8c1 	bl	8009d26 <HAL_I2C_GetError>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d0f9      	beq.n	8006b9e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006baa:	e003      	b.n	8006bb4 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bb0:	f001 fcc0 	bl	8008534 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006bb4:	4854      	ldr	r0, [pc, #336]	; (8006d08 <mainLoop+0x2d8>)
 8006bb6:	f003 f8a9 	bl	8009d0c <HAL_I2C_GetState>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d1f5      	bne.n	8006bac <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006bc0:	4b53      	ldr	r3, [pc, #332]	; (8006d10 <mainLoop+0x2e0>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006bc8:	4a59      	ldr	r2, [pc, #356]	; (8006d30 <mainLoop+0x300>)
 8006bca:	2101      	movs	r1, #1
 8006bcc:	2002      	movs	r0, #2
 8006bce:	f000 ff5b 	bl	8007a88 <lcd_print>
 8006bd2:	e008      	b.n	8006be6 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006bd4:	4b4e      	ldr	r3, [pc, #312]	; (8006d10 <mainLoop+0x2e0>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d104      	bne.n	8006be6 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006bdc:	4a55      	ldr	r2, [pc, #340]	; (8006d34 <mainLoop+0x304>)
 8006bde:	2101      	movs	r1, #1
 8006be0:	2002      	movs	r0, #2
 8006be2:	f000 ff51 	bl	8007a88 <lcd_print>
			  }

			  ilkOkuma=1;
 8006be6:	4b4e      	ldr	r3, [pc, #312]	; (8006d20 <mainLoop+0x2f0>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e014      	b.n	8006c18 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006bee:	4b48      	ldr	r3, [pc, #288]	; (8006d10 <mainLoop+0x2e0>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d105      	bne.n	8006c02 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006bf6:	4a50      	ldr	r2, [pc, #320]	; (8006d38 <mainLoop+0x308>)
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	2002      	movs	r0, #2
 8006bfc:	f000 ff44 	bl	8007a88 <lcd_print>
 8006c00:	e008      	b.n	8006c14 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006c02:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <mainLoop+0x2e0>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d104      	bne.n	8006c14 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006c0a:	4a4c      	ldr	r2, [pc, #304]	; (8006d3c <mainLoop+0x30c>)
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	2002      	movs	r0, #2
 8006c10:	f000 ff3a 	bl	8007a88 <lcd_print>
			  }
			  lcd_clear();
 8006c14:	f000 ff64 	bl	8007ae0 <lcd_clear>
		  }

		  lcd_clear();
 8006c18:	f000 ff62 	bl	8007ae0 <lcd_clear>

		  eepromKontrol();
 8006c1c:	f7f9 fb0a 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006c20:	4b3e      	ldr	r3, [pc, #248]	; (8006d1c <mainLoop+0x2ec>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006c26:	4b46      	ldr	r3, [pc, #280]	; (8006d40 <mainLoop+0x310>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d11c      	bne.n	8006c68 <mainLoop+0x238>
 8006c2e:	4b45      	ldr	r3, [pc, #276]	; (8006d44 <mainLoop+0x314>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	f083 0301 	eor.w	r3, r3, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d015      	beq.n	8006c68 <mainLoop+0x238>
 8006c3c:	4b42      	ldr	r3, [pc, #264]	; (8006d48 <mainLoop+0x318>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d111      	bne.n	8006c68 <mainLoop+0x238>
			lcd_clear();
 8006c44:	f000 ff4c 	bl	8007ae0 <lcd_clear>
			HAL_Delay(10);
 8006c48:	200a      	movs	r0, #10
 8006c4a:	f001 fc73 	bl	8008534 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006c4e:	4a3f      	ldr	r2, [pc, #252]	; (8006d4c <mainLoop+0x31c>)
 8006c50:	2101      	movs	r1, #1
 8006c52:	2001      	movs	r0, #1
 8006c54:	f000 ff18 	bl	8007a88 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006c58:	4a3d      	ldr	r2, [pc, #244]	; (8006d50 <mainLoop+0x320>)
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	2002      	movs	r0, #2
 8006c5e:	f000 ff13 	bl	8007a88 <lcd_print>
			mesajYazildi=1;
 8006c62:	4b38      	ldr	r3, [pc, #224]	; (8006d44 <mainLoop+0x314>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006c68:	4b35      	ldr	r3, [pc, #212]	; (8006d40 <mainLoop+0x310>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d112      	bne.n	8006c96 <mainLoop+0x266>
 8006c70:	2102      	movs	r1, #2
 8006c72:	481f      	ldr	r0, [pc, #124]	; (8006cf0 <mainLoop+0x2c0>)
 8006c74:	f002 fa2e 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d10b      	bne.n	8006c96 <mainLoop+0x266>
 8006c7e:	2104      	movs	r1, #4
 8006c80:	481b      	ldr	r0, [pc, #108]	; (8006cf0 <mainLoop+0x2c0>)
 8006c82:	f002 fa27 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d104      	bne.n	8006c96 <mainLoop+0x266>
			menuGiris=1;
 8006c8c:	4b2c      	ldr	r3, [pc, #176]	; (8006d40 <mainLoop+0x310>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c92:	f000 ff25 	bl	8007ae0 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c96:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <mainLoop+0x310>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <mainLoop+0x272>
			menu();
 8006c9e:	f7fa fb89 	bl	80013b4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ca6:	4813      	ldr	r0, [pc, #76]	; (8006cf4 <mainLoop+0x2c4>)
 8006ca8:	f002 fa43 	bl	8009132 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006cac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cb0:	4828      	ldr	r0, [pc, #160]	; (8006d54 <mainLoop+0x324>)
 8006cb2:	f002 fa0f 	bl	80090d4 <HAL_GPIO_ReadPin>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <mainLoop+0x2a2>
 8006cbc:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <mainLoop+0x328>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f083 0301 	eor.w	r3, r3, #1
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <mainLoop+0x2a2>
			stopVar=1;
 8006cca:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <mainLoop+0x32c>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	e002      	b.n	8006cd8 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006cd2:	4b22      	ldr	r3, [pc, #136]	; (8006d5c <mainLoop+0x32c>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006cd8:	f7fd ffe8 	bl	8004cac <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006cdc:	f7fe f81a 	bl	8004d14 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006ce0:	f7fe f85e 	bl	8004da0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006ce4:	f7fe f8ae 	bl	8004e44 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006ce8:	f7ff fc08 	bl	80064fc <checkDemoModCalisma>
		checkLCDBacklight();
 8006cec:	e6a3      	b.n	8006a36 <mainLoop+0x6>
 8006cee:	bf00      	nop
 8006cf0:	40010800 	.word	0x40010800
 8006cf4:	40011000 	.word	0x40011000
 8006cf8:	2000022f 	.word	0x2000022f
 8006cfc:	200001dc 	.word	0x200001dc
 8006d00:	200001f8 	.word	0x200001f8
 8006d04:	2000022c 	.word	0x2000022c
 8006d08:	20000290 	.word	0x20000290
 8006d0c:	2000012c 	.word	0x2000012c
 8006d10:	20000221 	.word	0x20000221
 8006d14:	0800da58 	.word	0x0800da58
 8006d18:	0800da6c 	.word	0x0800da6c
 8006d1c:	2000022d 	.word	0x2000022d
 8006d20:	2000022e 	.word	0x2000022e
 8006d24:	0800da80 	.word	0x0800da80
 8006d28:	0800da94 	.word	0x0800da94
 8006d2c:	0800daa8 	.word	0x0800daa8
 8006d30:	0800dabc 	.word	0x0800dabc
 8006d34:	0800dad0 	.word	0x0800dad0
 8006d38:	0800dae4 	.word	0x0800dae4
 8006d3c:	0800daf8 	.word	0x0800daf8
 8006d40:	2000021d 	.word	0x2000021d
 8006d44:	20000234 	.word	0x20000234
 8006d48:	2000021e 	.word	0x2000021e
 8006d4c:	0800db0c 	.word	0x0800db0c
 8006d50:	0800db20 	.word	0x0800db20
 8006d54:	40010c00 	.word	0x40010c00
 8006d58:	20000255 	.word	0x20000255
 8006d5c:	20000252 	.word	0x20000252

08006d60 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af04      	add	r7, sp, #16
	bool validInput = false;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]

	int loc = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
	int writeLoc = 5;
 8006d6e:	2305      	movs	r3, #5
 8006d70:	607b      	str	r3, [r7, #4]

	memset(machineID, 0, sizeof(machineID));
 8006d72:	220c      	movs	r2, #12
 8006d74:	2100      	movs	r1, #0
 8006d76:	4849      	ldr	r0, [pc, #292]	; (8006e9c <takeMachineID+0x13c>)
 8006d78:	f005 fba5 	bl	800c4c6 <memset>

	while(!validInput) {
 8006d7c:	e072      	b.n	8006e64 <takeMachineID+0x104>
		lcd_clear();
 8006d7e:	f000 feaf 	bl	8007ae0 <lcd_clear>

		saveCharacter(&loc, &writeLoc, machineID, idStartPos, 'M');
 8006d82:	4b47      	ldr	r3, [pc, #284]	; (8006ea0 <takeMachineID+0x140>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	1d39      	adds	r1, r7, #4
 8006d88:	f107 0008 	add.w	r0, r7, #8
 8006d8c:	224d      	movs	r2, #77	; 0x4d
 8006d8e:	9200      	str	r2, [sp, #0]
 8006d90:	4a42      	ldr	r2, [pc, #264]	; (8006e9c <takeMachineID+0x13c>)
 8006d92:	f000 fb39 	bl	8007408 <saveCharacter>

		if (strlen(machineID) == 12) {
 8006d96:	4841      	ldr	r0, [pc, #260]	; (8006e9c <takeMachineID+0x13c>)
 8006d98:	f7f9 fa44 	bl	8000224 <strlen>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d138      	bne.n	8006e14 <takeMachineID+0xb4>
		    if(checkMachineID(&huart1, machineID) == 1) {
 8006da2:	493e      	ldr	r1, [pc, #248]	; (8006e9c <takeMachineID+0x13c>)
 8006da4:	483f      	ldr	r0, [pc, #252]	; (8006ea4 <takeMachineID+0x144>)
 8006da6:	f7f9 fe07 	bl	80009b8 <checkMachineID>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d105      	bne.n	8006dbc <takeMachineID+0x5c>
		    	validInput = true; // Doğru uzunlukta veri girildi
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]
		    	setupCompleted = 1;
 8006db4:	4b3c      	ldr	r3, [pc, #240]	; (8006ea8 <takeMachineID+0x148>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	e053      	b.n	8006e64 <takeMachineID+0x104>
		    } else {
		    	lcd_clear();
 8006dbc:	f000 fe90 	bl	8007ae0 <lcd_clear>
		    	HAL_Delay(50);
 8006dc0:	2032      	movs	r0, #50	; 0x32
 8006dc2:	f001 fbb7 	bl	8008534 <HAL_Delay>
		    	if(dilSecim == 0) {
 8006dc6:	4b39      	ldr	r3, [pc, #228]	; (8006eac <takeMachineID+0x14c>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <takeMachineID+0x84>
		    		lcd_print(1, 1, "BU ID FARKLI BIR");
 8006dce:	4a38      	ldr	r2, [pc, #224]	; (8006eb0 <takeMachineID+0x150>)
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	f000 fe58 	bl	8007a88 <lcd_print>
		    		lcd_print(2, 1, " MAKINEDE AKTIF ");
 8006dd8:	4a36      	ldr	r2, [pc, #216]	; (8006eb4 <takeMachineID+0x154>)
 8006dda:	2101      	movs	r1, #1
 8006ddc:	2002      	movs	r0, #2
 8006dde:	f000 fe53 	bl	8007a88 <lcd_print>
 8006de2:	e009      	b.n	8006df8 <takeMachineID+0x98>
		    	} else {
		    		lcd_print(1, 1, "THIS  ID CAN NOT");
 8006de4:	4a34      	ldr	r2, [pc, #208]	; (8006eb8 <takeMachineID+0x158>)
 8006de6:	2101      	movs	r1, #1
 8006de8:	2001      	movs	r0, #1
 8006dea:	f000 fe4d 	bl	8007a88 <lcd_print>
		    		lcd_print(2, 1, "    BE  USED    ");
 8006dee:	4a33      	ldr	r2, [pc, #204]	; (8006ebc <takeMachineID+0x15c>)
 8006df0:	2101      	movs	r1, #1
 8006df2:	2002      	movs	r0, #2
 8006df4:	f000 fe48 	bl	8007a88 <lcd_print>
		    	}
		    	HAL_Delay(2000);
 8006df8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006dfc:	f001 fb9a 	bl	8008534 <HAL_Delay>
		    	loc = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60bb      	str	r3, [r7, #8]
		    	writeLoc = 1;
 8006e04:	2301      	movs	r3, #1
 8006e06:	607b      	str	r3, [r7, #4]
		    	memset(machineID, 0, sizeof(machineID));
 8006e08:	220c      	movs	r2, #12
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4823      	ldr	r0, [pc, #140]	; (8006e9c <takeMachineID+0x13c>)
 8006e0e:	f005 fb5a 	bl	800c4c6 <memset>
 8006e12:	e027      	b.n	8006e64 <takeMachineID+0x104>
		    }
		} else {
		    lcd_clear();
 8006e14:	f000 fe64 	bl	8007ae0 <lcd_clear>
		    if(dilSecim == 0) {
 8006e18:	4b24      	ldr	r3, [pc, #144]	; (8006eac <takeMachineID+0x14c>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <takeMachineID+0xd6>
		    	lcd_print(1, 1, " ID 12 KARAKTER ");
 8006e20:	4a27      	ldr	r2, [pc, #156]	; (8006ec0 <takeMachineID+0x160>)
 8006e22:	2101      	movs	r1, #1
 8006e24:	2001      	movs	r0, #1
 8006e26:	f000 fe2f 	bl	8007a88 <lcd_print>
		    	lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006e2a:	4a26      	ldr	r2, [pc, #152]	; (8006ec4 <takeMachineID+0x164>)
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	2002      	movs	r0, #2
 8006e30:	f000 fe2a 	bl	8007a88 <lcd_print>
 8006e34:	e009      	b.n	8006e4a <takeMachineID+0xea>
		    } else {
		    	lcd_print(1, 1, "MACHINE ID MUST");
 8006e36:	4a24      	ldr	r2, [pc, #144]	; (8006ec8 <takeMachineID+0x168>)
 8006e38:	2101      	movs	r1, #1
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	f000 fe24 	bl	8007a88 <lcd_print>
		    	lcd_print(2, 1, "BE 12 CHARACTERS");
 8006e40:	4a22      	ldr	r2, [pc, #136]	; (8006ecc <takeMachineID+0x16c>)
 8006e42:	2101      	movs	r1, #1
 8006e44:	2002      	movs	r0, #2
 8006e46:	f000 fe1f 	bl	8007a88 <lcd_print>
		    }
		    HAL_Delay(2000); // Kullanıcıya mesajı göster
 8006e4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006e4e:	f001 fb71 	bl	8008534 <HAL_Delay>
		    loc = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]
		    writeLoc = 1;
 8006e56:	2301      	movs	r3, #1
 8006e58:	607b      	str	r3, [r7, #4]
		    memset(machineID, 0, sizeof(machineID));
 8006e5a:	220c      	movs	r2, #12
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	480f      	ldr	r0, [pc, #60]	; (8006e9c <takeMachineID+0x13c>)
 8006e60:	f005 fb31 	bl	800c4c6 <memset>
	while(!validInput) {
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	f083 0301 	eor.w	r3, r3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d186      	bne.n	8006d7e <takeMachineID+0x1e>
		}
	}

	//EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e70:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e74:	9302      	str	r3, [sp, #8]
 8006e76:	236e      	movs	r3, #110	; 0x6e
 8006e78:	9301      	str	r3, [sp, #4]
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <takeMachineID+0x170>)
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	236e      	movs	r3, #110	; 0x6e
 8006e80:	2200      	movs	r2, #0
 8006e82:	21a0      	movs	r1, #160	; 0xa0
 8006e84:	4813      	ldr	r0, [pc, #76]	; (8006ed4 <takeMachineID+0x174>)
 8006e86:	f002 fbdf 	bl	8009648 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 8006e8a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e8e:	f001 fb51 	bl	8008534 <HAL_Delay>
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200001a4 	.word	0x200001a4
 8006ea0:	20000004 	.word	0x20000004
 8006ea4:	2000032c 	.word	0x2000032c
 8006ea8:	200001d8 	.word	0x200001d8
 8006eac:	20000221 	.word	0x20000221
 8006eb0:	0800db34 	.word	0x0800db34
 8006eb4:	0800db48 	.word	0x0800db48
 8006eb8:	0800db5c 	.word	0x0800db5c
 8006ebc:	0800db70 	.word	0x0800db70
 8006ec0:	0800db84 	.word	0x0800db84
 8006ec4:	0800db98 	.word	0x0800db98
 8006ec8:	0800dbac 	.word	0x0800dbac
 8006ecc:	0800dbbc 	.word	0x0800dbbc
 8006ed0:	2000012c 	.word	0x2000012c
 8006ed4:	20000290 	.word	0x20000290

08006ed8 <takeWifiSSID>:

void takeWifiSSID() {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af04      	add	r7, sp, #16
    bool validInput = false;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]

    int loc = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006ee6:	2307      	movs	r3, #7
 8006ee8:	607b      	str	r3, [r7, #4]

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006eea:	2214      	movs	r2, #20
 8006eec:	2100      	movs	r1, #0
 8006eee:	482e      	ldr	r0, [pc, #184]	; (8006fa8 <takeWifiSSID+0xd0>)
 8006ef0:	f005 fae9 	bl	800c4c6 <memset>

    while(!validInput) {
 8006ef4:	e03c      	b.n	8006f70 <takeWifiSSID+0x98>
        lcd_clear();
 8006ef6:	f000 fdf3 	bl	8007ae0 <lcd_clear>

        saveCharacter(&loc, &writeLoc, wifiSSID, ssidStartPos, 'S');
 8006efa:	4b2c      	ldr	r3, [pc, #176]	; (8006fac <takeWifiSSID+0xd4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	1d39      	adds	r1, r7, #4
 8006f00:	f107 0008 	add.w	r0, r7, #8
 8006f04:	2253      	movs	r2, #83	; 0x53
 8006f06:	9200      	str	r2, [sp, #0]
 8006f08:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <takeWifiSSID+0xd0>)
 8006f0a:	f000 fa7d 	bl	8007408 <saveCharacter>

        if (strlen(wifiSSID) <= 20) {
 8006f0e:	4826      	ldr	r0, [pc, #152]	; (8006fa8 <takeWifiSSID+0xd0>)
 8006f10:	f7f9 f988 	bl	8000224 <strlen>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b14      	cmp	r3, #20
 8006f18:	d802      	bhi.n	8006f20 <takeWifiSSID+0x48>
            validInput = true; // Uygun uzunlukta veri girildi
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
 8006f1e:	e027      	b.n	8006f70 <takeWifiSSID+0x98>
        } else {
            lcd_clear();
 8006f20:	f000 fdde 	bl	8007ae0 <lcd_clear>
            if(dilSecim == 0) {
 8006f24:	4b22      	ldr	r3, [pc, #136]	; (8006fb0 <takeWifiSSID+0xd8>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <takeWifiSSID+0x6a>
            	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006f2c:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <takeWifiSSID+0xdc>)
 8006f2e:	2101      	movs	r1, #1
 8006f30:	2001      	movs	r0, #1
 8006f32:	f000 fda9 	bl	8007a88 <lcd_print>
            	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006f36:	4a20      	ldr	r2, [pc, #128]	; (8006fb8 <takeWifiSSID+0xe0>)
 8006f38:	2101      	movs	r1, #1
 8006f3a:	2002      	movs	r0, #2
 8006f3c:	f000 fda4 	bl	8007a88 <lcd_print>
 8006f40:	e009      	b.n	8006f56 <takeWifiSSID+0x7e>
            } else {
            	lcd_print(1, 1, "SSID CANT EXCEED");
 8006f42:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <takeWifiSSID+0xe4>)
 8006f44:	2101      	movs	r1, #1
 8006f46:	2001      	movs	r0, #1
 8006f48:	f000 fd9e 	bl	8007a88 <lcd_print>
            	lcd_print(2, 1, " 20 CHARACTERS ");
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	; (8006fc0 <takeWifiSSID+0xe8>)
 8006f4e:	2101      	movs	r1, #1
 8006f50:	2002      	movs	r0, #2
 8006f52:	f000 fd99 	bl	8007a88 <lcd_print>
            }
            HAL_Delay(2000); // Kullanıcıya mesajı göster
 8006f56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006f5a:	f001 faeb 	bl	8008534 <HAL_Delay>
            // Uzunluğu sıfırla ve yeniden dene
            loc = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
            writeLoc = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	607b      	str	r3, [r7, #4]
            memset(wifiSSID, 0, sizeof(wifiSSID));
 8006f66:	2214      	movs	r2, #20
 8006f68:	2100      	movs	r1, #0
 8006f6a:	480f      	ldr	r0, [pc, #60]	; (8006fa8 <takeWifiSSID+0xd0>)
 8006f6c:	f005 faab 	bl	800c4c6 <memset>
    while(!validInput) {
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	f083 0301 	eor.w	r3, r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1bc      	bne.n	8006ef6 <takeWifiSSID+0x1e>
        }
    }

    // EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006f7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f80:	9302      	str	r3, [sp, #8]
 8006f82:	236e      	movs	r3, #110	; 0x6e
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <takeWifiSSID+0xec>)
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	236e      	movs	r3, #110	; 0x6e
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	21a0      	movs	r1, #160	; 0xa0
 8006f90:	480d      	ldr	r0, [pc, #52]	; (8006fc8 <takeWifiSSID+0xf0>)
 8006f92:	f002 fb59 	bl	8009648 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 8006f96:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006f9a:	f001 facb 	bl	8008534 <HAL_Delay>
}
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200001b0 	.word	0x200001b0
 8006fac:	20000008 	.word	0x20000008
 8006fb0:	20000221 	.word	0x20000221
 8006fb4:	0800dbd0 	.word	0x0800dbd0
 8006fb8:	0800dbe4 	.word	0x0800dbe4
 8006fbc:	0800dbf8 	.word	0x0800dbf8
 8006fc0:	0800dc0c 	.word	0x0800dc0c
 8006fc4:	2000012c 	.word	0x2000012c
 8006fc8:	20000290 	.word	0x20000290

08006fcc <takeWifiPass>:

void takeWifiPass() {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af04      	add	r7, sp, #16
    bool validInput = false;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]

    int loc = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006fda:	2307      	movs	r3, #7
 8006fdc:	607b      	str	r3, [r7, #4]

    memset(wifiPass, 0, sizeof(wifiPass));
 8006fde:	2214      	movs	r2, #20
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	482e      	ldr	r0, [pc, #184]	; (800709c <takeWifiPass+0xd0>)
 8006fe4:	f005 fa6f 	bl	800c4c6 <memset>

    while(!validInput) {
 8006fe8:	e03c      	b.n	8007064 <takeWifiPass+0x98>
        lcd_clear();
 8006fea:	f000 fd79 	bl	8007ae0 <lcd_clear>

        saveCharacter(&loc, &writeLoc, wifiPass, passStartPos, 'P');
 8006fee:	4b2c      	ldr	r3, [pc, #176]	; (80070a0 <takeWifiPass+0xd4>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	1d39      	adds	r1, r7, #4
 8006ff4:	f107 0008 	add.w	r0, r7, #8
 8006ff8:	2250      	movs	r2, #80	; 0x50
 8006ffa:	9200      	str	r2, [sp, #0]
 8006ffc:	4a27      	ldr	r2, [pc, #156]	; (800709c <takeWifiPass+0xd0>)
 8006ffe:	f000 fa03 	bl	8007408 <saveCharacter>

        if (strlen(wifiPass) <= 20) {
 8007002:	4826      	ldr	r0, [pc, #152]	; (800709c <takeWifiPass+0xd0>)
 8007004:	f7f9 f90e 	bl	8000224 <strlen>
 8007008:	4603      	mov	r3, r0
 800700a:	2b14      	cmp	r3, #20
 800700c:	d802      	bhi.n	8007014 <takeWifiPass+0x48>
            validInput = true; // Uygun uzunlukta veri girildi
 800700e:	2301      	movs	r3, #1
 8007010:	73fb      	strb	r3, [r7, #15]
 8007012:	e027      	b.n	8007064 <takeWifiPass+0x98>
        } else {
            lcd_clear();
 8007014:	f000 fd64 	bl	8007ae0 <lcd_clear>
            if(dilSecim == 0) {
 8007018:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <takeWifiPass+0xd8>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <takeWifiPass+0x6a>
            	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007020:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <takeWifiPass+0xdc>)
 8007022:	2101      	movs	r1, #1
 8007024:	2001      	movs	r0, #1
 8007026:	f000 fd2f 	bl	8007a88 <lcd_print>
            	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800702a:	4a20      	ldr	r2, [pc, #128]	; (80070ac <takeWifiPass+0xe0>)
 800702c:	2101      	movs	r1, #1
 800702e:	2002      	movs	r0, #2
 8007030:	f000 fd2a 	bl	8007a88 <lcd_print>
 8007034:	e009      	b.n	800704a <takeWifiPass+0x7e>
            } else {
            	lcd_print(1, 1, "PASS CANT EXCEED");
 8007036:	4a1e      	ldr	r2, [pc, #120]	; (80070b0 <takeWifiPass+0xe4>)
 8007038:	2101      	movs	r1, #1
 800703a:	2001      	movs	r0, #1
 800703c:	f000 fd24 	bl	8007a88 <lcd_print>
            	lcd_print(2, 1, " 20 CHARACTERS ");
 8007040:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <takeWifiPass+0xe8>)
 8007042:	2101      	movs	r1, #1
 8007044:	2002      	movs	r0, #2
 8007046:	f000 fd1f 	bl	8007a88 <lcd_print>
            }
            HAL_Delay(2000); // Kullanıcıya mesajı göster
 800704a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800704e:	f001 fa71 	bl	8008534 <HAL_Delay>
            // Uzunluğu sıfırla ve yeniden dene
            loc = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]
            writeLoc = 1;
 8007056:	2301      	movs	r3, #1
 8007058:	607b      	str	r3, [r7, #4]
            memset(wifiPass, 0, sizeof(wifiPass));
 800705a:	2214      	movs	r2, #20
 800705c:	2100      	movs	r1, #0
 800705e:	480f      	ldr	r0, [pc, #60]	; (800709c <takeWifiPass+0xd0>)
 8007060:	f005 fa31 	bl	800c4c6 <memset>
    while(!validInput) {
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	f083 0301 	eor.w	r3, r3, #1
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1bc      	bne.n	8006fea <takeWifiPass+0x1e>
        }
    }

    // EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007070:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007074:	9302      	str	r3, [sp, #8]
 8007076:	236e      	movs	r3, #110	; 0x6e
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <takeWifiPass+0xec>)
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	236e      	movs	r3, #110	; 0x6e
 8007080:	2200      	movs	r2, #0
 8007082:	21a0      	movs	r1, #160	; 0xa0
 8007084:	480d      	ldr	r0, [pc, #52]	; (80070bc <takeWifiPass+0xf0>)
 8007086:	f002 fadf 	bl	8009648 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 800708a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800708e:	f001 fa51 	bl	8008534 <HAL_Delay>
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200001c4 	.word	0x200001c4
 80070a0:	2000000c 	.word	0x2000000c
 80070a4:	20000221 	.word	0x20000221
 80070a8:	0800dbd0 	.word	0x0800dbd0
 80070ac:	0800dc1c 	.word	0x0800dc1c
 80070b0:	0800dc30 	.word	0x0800dc30
 80070b4:	0800dc0c 	.word	0x0800dc0c
 80070b8:	2000012c 	.word	0x2000012c
 80070bc:	20000290 	.word	0x20000290

080070c0 <mergeData>:

char* mergeData() {
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b09c      	sub	sp, #112	; 0x70
 80070c4:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070ce:	2228      	movs	r2, #40	; 0x28
 80070d0:	2100      	movs	r1, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f005 f9f7 	bl	800c4c6 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80070d8:	4b67      	ldr	r3, [pc, #412]	; (8007278 <mergeData+0x1b8>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	713b      	strb	r3, [r7, #4]
 80070de:	4b67      	ldr	r3, [pc, #412]	; (800727c <mergeData+0x1bc>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	717b      	strb	r3, [r7, #5]
 80070e4:	4b66      	ldr	r3, [pc, #408]	; (8007280 <mergeData+0x1c0>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	71bb      	strb	r3, [r7, #6]
 80070ea:	4b66      	ldr	r3, [pc, #408]	; (8007284 <mergeData+0x1c4>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
 80070f0:	4b65      	ldr	r3, [pc, #404]	; (8007288 <mergeData+0x1c8>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	723b      	strb	r3, [r7, #8]
 80070f6:	4b65      	ldr	r3, [pc, #404]	; (800728c <mergeData+0x1cc>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	727b      	strb	r3, [r7, #9]
 80070fc:	4b64      	ldr	r3, [pc, #400]	; (8007290 <mergeData+0x1d0>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	72bb      	strb	r3, [r7, #10]
 8007102:	4b64      	ldr	r3, [pc, #400]	; (8007294 <mergeData+0x1d4>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	72fb      	strb	r3, [r7, #11]
 8007108:	4b63      	ldr	r3, [pc, #396]	; (8007298 <mergeData+0x1d8>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	733b      	strb	r3, [r7, #12]
 800710e:	4b63      	ldr	r3, [pc, #396]	; (800729c <mergeData+0x1dc>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	737b      	strb	r3, [r7, #13]
 8007114:	4b62      	ldr	r3, [pc, #392]	; (80072a0 <mergeData+0x1e0>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	73bb      	strb	r3, [r7, #14]
 800711a:	4b62      	ldr	r3, [pc, #392]	; (80072a4 <mergeData+0x1e4>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	73fb      	strb	r3, [r7, #15]
 8007120:	4b61      	ldr	r3, [pc, #388]	; (80072a8 <mergeData+0x1e8>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	743b      	strb	r3, [r7, #16]
 8007126:	4b61      	ldr	r3, [pc, #388]	; (80072ac <mergeData+0x1ec>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	747b      	strb	r3, [r7, #17]
 800712c:	4b60      	ldr	r3, [pc, #384]	; (80072b0 <mergeData+0x1f0>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	74bb      	strb	r3, [r7, #18]
 8007132:	4b60      	ldr	r3, [pc, #384]	; (80072b4 <mergeData+0x1f4>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	74fb      	strb	r3, [r7, #19]
 8007138:	4b5f      	ldr	r3, [pc, #380]	; (80072b8 <mergeData+0x1f8>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	753b      	strb	r3, [r7, #20]
 800713e:	4b5f      	ldr	r3, [pc, #380]	; (80072bc <mergeData+0x1fc>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	757b      	strb	r3, [r7, #21]
 8007144:	4b5e      	ldr	r3, [pc, #376]	; (80072c0 <mergeData+0x200>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	75bb      	strb	r3, [r7, #22]
 800714a:	4b5e      	ldr	r3, [pc, #376]	; (80072c4 <mergeData+0x204>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	75fb      	strb	r3, [r7, #23]
 8007150:	4b5d      	ldr	r3, [pc, #372]	; (80072c8 <mergeData+0x208>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	763b      	strb	r3, [r7, #24]
 8007156:	4b5d      	ldr	r3, [pc, #372]	; (80072cc <mergeData+0x20c>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	767b      	strb	r3, [r7, #25]
 800715c:	4b5c      	ldr	r3, [pc, #368]	; (80072d0 <mergeData+0x210>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	76bb      	strb	r3, [r7, #26]
 8007162:	4b5c      	ldr	r3, [pc, #368]	; (80072d4 <mergeData+0x214>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	76fb      	strb	r3, [r7, #27]
 8007168:	4b5b      	ldr	r3, [pc, #364]	; (80072d8 <mergeData+0x218>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	773b      	strb	r3, [r7, #28]
 800716e:	4b5b      	ldr	r3, [pc, #364]	; (80072dc <mergeData+0x21c>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	777b      	strb	r3, [r7, #29]
 8007174:	4b5a      	ldr	r3, [pc, #360]	; (80072e0 <mergeData+0x220>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	77bb      	strb	r3, [r7, #30]
 800717a:	4b5a      	ldr	r3, [pc, #360]	; (80072e4 <mergeData+0x224>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	4b59      	ldr	r3, [pc, #356]	; (80072e8 <mergeData+0x228>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f887 3020 	strb.w	r3, [r7, #32]
 8007188:	4b58      	ldr	r3, [pc, #352]	; (80072ec <mergeData+0x22c>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007190:	4b57      	ldr	r3, [pc, #348]	; (80072f0 <mergeData+0x230>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007198:	4b56      	ldr	r3, [pc, #344]	; (80072f4 <mergeData+0x234>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a0:	4b55      	ldr	r3, [pc, #340]	; (80072f8 <mergeData+0x238>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80071a8:	4b54      	ldr	r3, [pc, #336]	; (80072fc <mergeData+0x23c>)
 80071aa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80071ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80071b2:	4b52      	ldr	r3, [pc, #328]	; (80072fc <mergeData+0x23c>)
 80071b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80071b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80071bc:	4b4f      	ldr	r3, [pc, #316]	; (80072fc <mergeData+0x23c>)
 80071be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80071c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80071c6:	4b4d      	ldr	r3, [pc, #308]	; (80072fc <mergeData+0x23c>)
 80071c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80071cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80071d0:	4b4a      	ldr	r3, [pc, #296]	; (80072fc <mergeData+0x23c>)
 80071d2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80071d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80071da:	4b48      	ldr	r3, [pc, #288]	; (80072fc <mergeData+0x23c>)
 80071dc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80071e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80071e4:	4b45      	ldr	r3, [pc, #276]	; (80072fc <mergeData+0x23c>)
 80071e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80071ee:	4b43      	ldr	r3, [pc, #268]	; (80072fc <mergeData+0x23c>)
 80071f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80071f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80071f8:	4b40      	ldr	r3, [pc, #256]	; (80072fc <mergeData+0x23c>)
 80071fa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80071fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007202:	4b3e      	ldr	r3, [pc, #248]	; (80072fc <mergeData+0x23c>)
 8007204:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007208:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800720c:	2306      	movs	r3, #6
 800720e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007212:	2300      	movs	r3, #0
 8007214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007216:	e015      	b.n	8007244 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007218:	1d3a      	adds	r2, r7, #4
 800721a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721c:	4413      	add	r3, r2
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007226:	4936      	ldr	r1, [pc, #216]	; (8007300 <mergeData+0x240>)
 8007228:	4618      	mov	r0, r3
 800722a:	f005 f8c5 	bl	800c3b8 <siprintf>
	    strcat(combinedString, temp);
 800722e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007232:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007236:	4611      	mov	r1, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f005 f91f 	bl	800c47c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800723e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007240:	3301      	adds	r3, #1
 8007242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007246:	2b2b      	cmp	r3, #43	; 0x2b
 8007248:	d9e6      	bls.n	8007218 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800724a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800724e:	4618      	mov	r0, r3
 8007250:	f7f8 ffe8 	bl	8000224 <strlen>
 8007254:	4603      	mov	r3, r0
 8007256:	3301      	adds	r3, #1
 8007258:	4618      	mov	r0, r3
 800725a:	f004 ffc5 	bl	800c1e8 <malloc>
 800725e:	4603      	mov	r3, r0
 8007260:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007266:	4619      	mov	r1, r3
 8007268:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800726a:	f005 f971 	bl	800c550 <strcpy>
	return result;
 800726e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007270:	4618      	mov	r0, r3
 8007272:	3770      	adds	r7, #112	; 0x70
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	2000020f 	.word	0x2000020f
 800727c:	20000201 	.word	0x20000201
 8007280:	20000204 	.word	0x20000204
 8007284:	20000205 	.word	0x20000205
 8007288:	20000206 	.word	0x20000206
 800728c:	2000020d 	.word	0x2000020d
 8007290:	20000207 	.word	0x20000207
 8007294:	20000208 	.word	0x20000208
 8007298:	2000020c 	.word	0x2000020c
 800729c:	20000209 	.word	0x20000209
 80072a0:	20000219 	.word	0x20000219
 80072a4:	2000020a 	.word	0x2000020a
 80072a8:	2000021a 	.word	0x2000021a
 80072ac:	2000020b 	.word	0x2000020b
 80072b0:	2000021b 	.word	0x2000021b
 80072b4:	2000020e 	.word	0x2000020e
 80072b8:	20000210 	.word	0x20000210
 80072bc:	20000211 	.word	0x20000211
 80072c0:	20000212 	.word	0x20000212
 80072c4:	20000213 	.word	0x20000213
 80072c8:	20000214 	.word	0x20000214
 80072cc:	20000215 	.word	0x20000215
 80072d0:	20000216 	.word	0x20000216
 80072d4:	20000217 	.word	0x20000217
 80072d8:	20000218 	.word	0x20000218
 80072dc:	2000021c 	.word	0x2000021c
 80072e0:	2000021e 	.word	0x2000021e
 80072e4:	200001fd 	.word	0x200001fd
 80072e8:	200001fe 	.word	0x200001fe
 80072ec:	20000000 	.word	0x20000000
 80072f0:	20000001 	.word	0x20000001
 80072f4:	200001ff 	.word	0x200001ff
 80072f8:	20000221 	.word	0x20000221
 80072fc:	2000012c 	.word	0x2000012c
 8007300:	0800dc44 	.word	0x0800dc44

08007304 <convertAndSendData>:

void convertAndSendData() {
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800730a:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <convertAndSendData+0x70>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10a      	bne.n	8007328 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007312:	4a19      	ldr	r2, [pc, #100]	; (8007378 <convertAndSendData+0x74>)
 8007314:	2101      	movs	r1, #1
 8007316:	2001      	movs	r0, #1
 8007318:	f000 fbb6 	bl	8007a88 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800731c:	4a17      	ldr	r2, [pc, #92]	; (800737c <convertAndSendData+0x78>)
 800731e:	2101      	movs	r1, #1
 8007320:	2002      	movs	r0, #2
 8007322:	f000 fbb1 	bl	8007a88 <lcd_print>
 8007326:	e009      	b.n	800733c <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007328:	4a15      	ldr	r2, [pc, #84]	; (8007380 <convertAndSendData+0x7c>)
 800732a:	2101      	movs	r1, #1
 800732c:	2001      	movs	r0, #1
 800732e:	f000 fbab 	bl	8007a88 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007332:	4a14      	ldr	r2, [pc, #80]	; (8007384 <convertAndSendData+0x80>)
 8007334:	2101      	movs	r1, #1
 8007336:	2002      	movs	r0, #2
 8007338:	f000 fba6 	bl	8007a88 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 800733c:	2300      	movs	r3, #0
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	e00a      	b.n	8007358 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 8007342:	f7ff febd 	bl	80070c0 <mergeData>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	490f      	ldr	r1, [pc, #60]	; (8007388 <convertAndSendData+0x84>)
 800734c:	480f      	ldr	r0, [pc, #60]	; (800738c <convertAndSendData+0x88>)
 800734e:	f7f9 facd 	bl	80008ec <sendMachineData>
	for(int i=0; i<2; i++) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3301      	adds	r3, #1
 8007356:	607b      	str	r3, [r7, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b01      	cmp	r3, #1
 800735c:	ddf1      	ble.n	8007342 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 800735e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007362:	f001 f8e7 	bl	8008534 <HAL_Delay>
	lcd_clear();
 8007366:	f000 fbbb 	bl	8007ae0 <lcd_clear>
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000221 	.word	0x20000221
 8007378:	0800dc48 	.word	0x0800dc48
 800737c:	0800dc5c 	.word	0x0800dc5c
 8007380:	0800dc70 	.word	0x0800dc70
 8007384:	0800dc84 	.word	0x0800dc84
 8007388:	200001a4 	.word	0x200001a4
 800738c:	2000032c 	.word	0x2000032c

08007390 <iotSetup>:

void iotSetup() {
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007394:	4b17      	ldr	r3, [pc, #92]	; (80073f4 <iotSetup+0x64>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01d      	beq.n	80073d8 <iotSetup+0x48>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <iotSetup+0x68>)
 800739e:	7adb      	ldrb	r3, [r3, #11]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <iotSetup+0x18>
			takeMachineID();
 80073a4:	f7ff fcdc 	bl	8006d60 <takeMachineID>
		}
		HAL_Delay(500);
 80073a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073ac:	f001 f8c2 	bl	8008534 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 80073b0:	4b12      	ldr	r3, [pc, #72]	; (80073fc <iotSetup+0x6c>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <iotSetup+0x2c>
			takeWifiSSID();
 80073b8:	f7ff fd8e 	bl	8006ed8 <takeWifiSSID>
		}
		HAL_Delay(500);
 80073bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073c0:	f001 f8b8 	bl	8008534 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 80073c4:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <iotSetup+0x70>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <iotSetup+0x40>
			takeWifiPass();
 80073cc:	f7ff fdfe 	bl	8006fcc <takeWifiPass>
		}
		HAL_Delay(500);
 80073d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073d4:	f001 f8ae 	bl	8008534 <HAL_Delay>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <iotSetup+0x70>)
 80073da:	4908      	ldr	r1, [pc, #32]	; (80073fc <iotSetup+0x6c>)
 80073dc:	4809      	ldr	r0, [pc, #36]	; (8007404 <iotSetup+0x74>)
 80073de:	f7f9 fa47 	bl	8000870 <ESP8266_Init>
	HAL_Delay(500);
 80073e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073e6:	f001 f8a5 	bl	8008534 <HAL_Delay>
	convertAndSendData();
 80073ea:	f7ff ff8b 	bl	8007304 <convertAndSendData>
}
 80073ee:	bf00      	nop
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	2000021f 	.word	0x2000021f
 80073f8:	200001a4 	.word	0x200001a4
 80073fc:	200001b0 	.word	0x200001b0
 8007400:	200001c4 	.word	0x200001c4
 8007404:	2000032c 	.word	0x2000032c

08007408 <saveCharacter>:

void saveCharacter(int *loc, int *writeLoc, char *data, int startPos, char type) {
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
    int characterPos = 0; // Kullanıcının LCD üzerinde seçtiği karakterin pozisyonu
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
    char selectedChar;

    int cursorLoc = 1;
 800741a:	2301      	movs	r3, #1
 800741c:	617b      	str	r3, [r7, #20]

    int page = 1; // SSID ve password için sayfa kontrolü
 800741e:	2301      	movs	r3, #1
 8007420:	613b      	str	r3, [r7, #16]

    lcd_clear();
 8007422:	f000 fb5d 	bl	8007ae0 <lcd_clear>
    HAL_Delay(50);
 8007426:	2032      	movs	r0, #50	; 0x32
 8007428:	f001 f884 	bl	8008534 <HAL_Delay>
    lcd_cursor(1);
 800742c:	2001      	movs	r0, #1
 800742e:	f000 fb89 	bl	8007b44 <lcd_cursor>
    if (type == 'M') {
 8007432:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007436:	2b4d      	cmp	r3, #77	; 0x4d
 8007438:	d104      	bne.n	8007444 <saveCharacter+0x3c>
    	//charactersArrayLength = strlen(idCharactersArray);

    	printTemplate(1, 0);
 800743a:	2100      	movs	r1, #0
 800743c:	2001      	movs	r0, #1
 800743e:	f7f9 fd53 	bl	8000ee8 <printTemplate>
 8007442:	e00a      	b.n	800745a <saveCharacter+0x52>
    } else {
    	//charactersArrayLength = strlen(charactersArray);

    	printTemplate(type == 'S' ? 2 : 3, page);
 8007444:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007448:	2b53      	cmp	r3, #83	; 0x53
 800744a:	d101      	bne.n	8007450 <saveCharacter+0x48>
 800744c:	2302      	movs	r3, #2
 800744e:	e000      	b.n	8007452 <saveCharacter+0x4a>
 8007450:	2303      	movs	r3, #3
 8007452:	6939      	ldr	r1, [r7, #16]
 8007454:	4618      	mov	r0, r3
 8007456:	f7f9 fd47 	bl	8000ee8 <printTemplate>
    }

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800745a:	2108      	movs	r1, #8
 800745c:	4888      	ldr	r0, [pc, #544]	; (8007680 <saveCharacter+0x278>)
 800745e:	f001 fe39 	bl	80090d4 <HAL_GPIO_ReadPin>
 8007462:	4603      	mov	r3, r0
 8007464:	2b01      	cmp	r3, #1
 8007466:	f000 816b 	beq.w	8007740 <saveCharacter+0x338>
            // Kaydetme işlemini bitir
            break;
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800746a:	2101      	movs	r1, #1
 800746c:	4884      	ldr	r0, [pc, #528]	; (8007680 <saveCharacter+0x278>)
 800746e:	f001 fe31 	bl	80090d4 <HAL_GPIO_ReadPin>
 8007472:	4603      	mov	r3, r0
 8007474:	2b01      	cmp	r3, #1
 8007476:	d174      	bne.n	8007562 <saveCharacter+0x15a>
        	characterPos++;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
        	cursorLoc++;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	3301      	adds	r3, #1
 8007482:	617b      	str	r3, [r7, #20]

        	if(type == 'M') {
 8007484:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007488:	2b4d      	cmp	r3, #77	; 0x4d
 800748a:	d10b      	bne.n	80074a4 <saveCharacter+0x9c>
        		if(cursorLoc == 10) {
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b0a      	cmp	r3, #10
 8007490:	d102      	bne.n	8007498 <saveCharacter+0x90>
        			cursorLoc = 7;
 8007492:	2307      	movs	r3, #7
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e05b      	b.n	8007550 <saveCharacter+0x148>
        		} else if(cursorLoc == 3) {
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2b03      	cmp	r3, #3
 800749c:	d158      	bne.n	8007550 <saveCharacter+0x148>
        			cursorLoc = 14;
 800749e:	230e      	movs	r3, #14
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	e055      	b.n	8007550 <saveCharacter+0x148>
        		}
        	} else {
        		if(cursorLoc == 16) {
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b10      	cmp	r3, #16
 80074a8:	d10d      	bne.n	80074c6 <saveCharacter+0xbe>
        		    if(type == 'S') {
 80074aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074ae:	2b53      	cmp	r3, #83	; 0x53
 80074b0:	d104      	bne.n	80074bc <saveCharacter+0xb4>
        		    	printTemplate(2, 2);
 80074b2:	2102      	movs	r1, #2
 80074b4:	2002      	movs	r0, #2
 80074b6:	f7f9 fd17 	bl	8000ee8 <printTemplate>
 80074ba:	e049      	b.n	8007550 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 2);
 80074bc:	2102      	movs	r1, #2
 80074be:	2003      	movs	r0, #3
 80074c0:	f7f9 fd12 	bl	8000ee8 <printTemplate>
 80074c4:	e044      	b.n	8007550 <saveCharacter+0x148>
        		    }
        		} else if(cursorLoc == 32) {
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d10d      	bne.n	80074e8 <saveCharacter+0xe0>
        		    if(type == 'S') {
 80074cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074d0:	2b53      	cmp	r3, #83	; 0x53
 80074d2:	d104      	bne.n	80074de <saveCharacter+0xd6>
        		    	printTemplate(2, 3);
 80074d4:	2103      	movs	r1, #3
 80074d6:	2002      	movs	r0, #2
 80074d8:	f7f9 fd06 	bl	8000ee8 <printTemplate>
 80074dc:	e038      	b.n	8007550 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 3);
 80074de:	2103      	movs	r1, #3
 80074e0:	2003      	movs	r0, #3
 80074e2:	f7f9 fd01 	bl	8000ee8 <printTemplate>
 80074e6:	e033      	b.n	8007550 <saveCharacter+0x148>
        		    }
        		} else if(cursorLoc == 48) {
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b30      	cmp	r3, #48	; 0x30
 80074ec:	d10d      	bne.n	800750a <saveCharacter+0x102>
        		    if(type == 'S') {
 80074ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074f2:	2b53      	cmp	r3, #83	; 0x53
 80074f4:	d104      	bne.n	8007500 <saveCharacter+0xf8>
        		    	printTemplate(2, 4);
 80074f6:	2104      	movs	r1, #4
 80074f8:	2002      	movs	r0, #2
 80074fa:	f7f9 fcf5 	bl	8000ee8 <printTemplate>
 80074fe:	e027      	b.n	8007550 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 4);
 8007500:	2104      	movs	r1, #4
 8007502:	2003      	movs	r0, #3
 8007504:	f7f9 fcf0 	bl	8000ee8 <printTemplate>
 8007508:	e022      	b.n	8007550 <saveCharacter+0x148>
        		    }
        		} else if(cursorLoc == 64) {
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d10d      	bne.n	800752c <saveCharacter+0x124>
        		    if(type == 'S') {
 8007510:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007514:	2b53      	cmp	r3, #83	; 0x53
 8007516:	d104      	bne.n	8007522 <saveCharacter+0x11a>
        		    	printTemplate(2, 5);
 8007518:	2105      	movs	r1, #5
 800751a:	2002      	movs	r0, #2
 800751c:	f7f9 fce4 	bl	8000ee8 <printTemplate>
 8007520:	e016      	b.n	8007550 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 5);
 8007522:	2105      	movs	r1, #5
 8007524:	2003      	movs	r0, #3
 8007526:	f7f9 fcdf 	bl	8000ee8 <printTemplate>
 800752a:	e011      	b.n	8007550 <saveCharacter+0x148>
        		    }
        		} else if(cursorLoc == 80) {
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2b50      	cmp	r3, #80	; 0x50
 8007530:	d10e      	bne.n	8007550 <saveCharacter+0x148>
        		    cursorLoc = 1;
 8007532:	2301      	movs	r3, #1
 8007534:	617b      	str	r3, [r7, #20]

        		    if(type == 'S') {
 8007536:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800753a:	2b53      	cmp	r3, #83	; 0x53
 800753c:	d104      	bne.n	8007548 <saveCharacter+0x140>
        		    	printTemplate(2, 1);
 800753e:	2101      	movs	r1, #1
 8007540:	2002      	movs	r0, #2
 8007542:	f7f9 fcd1 	bl	8000ee8 <printTemplate>
 8007546:	e003      	b.n	8007550 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 1);
 8007548:	2101      	movs	r1, #1
 800754a:	2003      	movs	r0, #3
 800754c:	f7f9 fccc 	bl	8000ee8 <printTemplate>
        		    }
        		}
        	}

        	lcd_gotoxy(2, cursorLoc);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	4619      	mov	r1, r3
 8007556:	2002      	movs	r0, #2
 8007558:	f000 fa77 	bl	8007a4a <lcd_gotoxy>
        	HAL_Delay(250); //Debouncing delay
 800755c:	20fa      	movs	r0, #250	; 0xfa
 800755e:	f000 ffe9 	bl	8008534 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007562:	2108      	movs	r1, #8
 8007564:	4847      	ldr	r0, [pc, #284]	; (8007684 <saveCharacter+0x27c>)
 8007566:	f001 fdb5 	bl	80090d4 <HAL_GPIO_ReadPin>
 800756a:	4603      	mov	r3, r0
 800756c:	2b01      	cmp	r3, #1
 800756e:	d176      	bne.n	800765e <saveCharacter+0x256>
        	characterPos--;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	3b01      	subs	r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
        	cursorLoc--;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	3b01      	subs	r3, #1
 800757a:	617b      	str	r3, [r7, #20]

        	if(type == 'M') {
 800757c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007580:	2b4d      	cmp	r3, #77	; 0x4d
 8007582:	d10b      	bne.n	800759c <saveCharacter+0x194>
        	    if(cursorLoc == 7) {
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b07      	cmp	r3, #7
 8007588:	d102      	bne.n	8007590 <saveCharacter+0x188>
        	    	cursorLoc = 10;
 800758a:	230a      	movs	r3, #10
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e05d      	b.n	800764c <saveCharacter+0x244>
        	    } else if(cursorLoc == 14) {
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b0e      	cmp	r3, #14
 8007594:	d15a      	bne.n	800764c <saveCharacter+0x244>
        	    	cursorLoc = 3;
 8007596:	2303      	movs	r3, #3
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	e057      	b.n	800764c <saveCharacter+0x244>
        	    }
        	} else {
        		if(cursorLoc == 1) {
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10f      	bne.n	80075c2 <saveCharacter+0x1ba>
        			cursorLoc = 80;
 80075a2:	2350      	movs	r3, #80	; 0x50
 80075a4:	617b      	str	r3, [r7, #20]

        			if(type == 'S') {
 80075a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075aa:	2b53      	cmp	r3, #83	; 0x53
 80075ac:	d104      	bne.n	80075b8 <saveCharacter+0x1b0>
        				printTemplate(2, 5);
 80075ae:	2105      	movs	r1, #5
 80075b0:	2002      	movs	r0, #2
 80075b2:	f7f9 fc99 	bl	8000ee8 <printTemplate>
 80075b6:	e049      	b.n	800764c <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 5);
 80075b8:	2105      	movs	r1, #5
 80075ba:	2003      	movs	r0, #3
 80075bc:	f7f9 fc94 	bl	8000ee8 <printTemplate>
 80075c0:	e044      	b.n	800764c <saveCharacter+0x244>
        			}
        		} else if(cursorLoc == 17) {
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b11      	cmp	r3, #17
 80075c6:	d10d      	bne.n	80075e4 <saveCharacter+0x1dc>
        			if(type == 'S') {
 80075c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075cc:	2b53      	cmp	r3, #83	; 0x53
 80075ce:	d104      	bne.n	80075da <saveCharacter+0x1d2>
        				printTemplate(2, 1);
 80075d0:	2101      	movs	r1, #1
 80075d2:	2002      	movs	r0, #2
 80075d4:	f7f9 fc88 	bl	8000ee8 <printTemplate>
 80075d8:	e038      	b.n	800764c <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 1);
 80075da:	2101      	movs	r1, #1
 80075dc:	2003      	movs	r0, #3
 80075de:	f7f9 fc83 	bl	8000ee8 <printTemplate>
 80075e2:	e033      	b.n	800764c <saveCharacter+0x244>
        			}
        		} else if(cursorLoc == 33) {
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2b21      	cmp	r3, #33	; 0x21
 80075e8:	d10d      	bne.n	8007606 <saveCharacter+0x1fe>
        			if(type == 'S') {
 80075ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075ee:	2b53      	cmp	r3, #83	; 0x53
 80075f0:	d104      	bne.n	80075fc <saveCharacter+0x1f4>
        				printTemplate(2, 2);
 80075f2:	2102      	movs	r1, #2
 80075f4:	2002      	movs	r0, #2
 80075f6:	f7f9 fc77 	bl	8000ee8 <printTemplate>
 80075fa:	e027      	b.n	800764c <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 2);
 80075fc:	2102      	movs	r1, #2
 80075fe:	2003      	movs	r0, #3
 8007600:	f7f9 fc72 	bl	8000ee8 <printTemplate>
 8007604:	e022      	b.n	800764c <saveCharacter+0x244>
        			}
        		} else if(cursorLoc == 49) {
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b31      	cmp	r3, #49	; 0x31
 800760a:	d10d      	bne.n	8007628 <saveCharacter+0x220>
        			if(type == 'S') {
 800760c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007610:	2b53      	cmp	r3, #83	; 0x53
 8007612:	d104      	bne.n	800761e <saveCharacter+0x216>
        				printTemplate(2, 3);
 8007614:	2103      	movs	r1, #3
 8007616:	2002      	movs	r0, #2
 8007618:	f7f9 fc66 	bl	8000ee8 <printTemplate>
 800761c:	e016      	b.n	800764c <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 3);
 800761e:	2103      	movs	r1, #3
 8007620:	2003      	movs	r0, #3
 8007622:	f7f9 fc61 	bl	8000ee8 <printTemplate>
 8007626:	e011      	b.n	800764c <saveCharacter+0x244>
        			}
        		} else if(cursorLoc == 65) {
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2b41      	cmp	r3, #65	; 0x41
 800762c:	d10e      	bne.n	800764c <saveCharacter+0x244>
        			cursorLoc = 1;
 800762e:	2301      	movs	r3, #1
 8007630:	617b      	str	r3, [r7, #20]
        			if(type == 'S') {
 8007632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007636:	2b53      	cmp	r3, #83	; 0x53
 8007638:	d104      	bne.n	8007644 <saveCharacter+0x23c>
        				printTemplate(2, 4);
 800763a:	2104      	movs	r1, #4
 800763c:	2002      	movs	r0, #2
 800763e:	f7f9 fc53 	bl	8000ee8 <printTemplate>
 8007642:	e003      	b.n	800764c <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 4);
 8007644:	2104      	movs	r1, #4
 8007646:	2003      	movs	r0, #3
 8007648:	f7f9 fc4e 	bl	8000ee8 <printTemplate>
        			}
        		}
        	}

        	lcd_gotoxy(2, cursorLoc);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	4619      	mov	r1, r3
 8007652:	2002      	movs	r0, #2
 8007654:	f000 f9f9 	bl	8007a4a <lcd_gotoxy>
        	HAL_Delay(250); //Debouncing delay
 8007658:	20fa      	movs	r0, #250	; 0xfa
 800765a:	f000 ff6b 	bl	8008534 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800765e:	2102      	movs	r1, #2
 8007660:	4807      	ldr	r0, [pc, #28]	; (8007680 <saveCharacter+0x278>)
 8007662:	f001 fd37 	bl	80090d4 <HAL_GPIO_ReadPin>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d138      	bne.n	80076de <saveCharacter+0x2d6>
            // Karakteri seç ve kaydet
        	if(type == 'M') {
 800766c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007670:	2b4d      	cmp	r3, #77	; 0x4d
 8007672:	d10b      	bne.n	800768c <saveCharacter+0x284>
        		selectedChar = idCharactersArray[characterPos];
 8007674:	4a04      	ldr	r2, [pc, #16]	; (8007688 <saveCharacter+0x280>)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	76fb      	strb	r3, [r7, #27]
 800767e:	e00a      	b.n	8007696 <saveCharacter+0x28e>
 8007680:	40010800 	.word	0x40010800
 8007684:	40011000 	.word	0x40011000
 8007688:	20000024 	.word	0x20000024
        	} else {
        		selectedChar = charactersArray[characterPos];
 800768c:	4a2f      	ldr	r2, [pc, #188]	; (800774c <saveCharacter+0x344>)
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	76fb      	strb	r3, [r7, #27]
        	}
            data[*loc] = selectedChar; //machineID, SSID ya da PASS dizisine karakteri kaydet
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	7efa      	ldrb	r2, [r7, #27]
 80076a2:	701a      	strb	r2, [r3, #0]
            eepromData[startPos + *loc] = characterPos; //eepromData'ya karakteri kaydet
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	4413      	add	r3, r2
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	b2d1      	uxtb	r1, r2
 80076b0:	4a27      	ldr	r2, [pc, #156]	; (8007750 <saveCharacter+0x348>)
 80076b2:	54d1      	strb	r1, [r2, r3]

            (*loc)++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]
            (*writeLoc)++;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	601a      	str	r2, [r3, #0]
            lcd_print_char(2, *writeLoc, selectedChar);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	7efa      	ldrb	r2, [r7, #27]
 80076d0:	4619      	mov	r1, r3
 80076d2:	2002      	movs	r0, #2
 80076d4:	f000 f9ed 	bl	8007ab2 <lcd_print_char>
            HAL_Delay(250); // Debouncing için gecikme
 80076d8:	20fa      	movs	r0, #250	; 0xfa
 80076da:	f000 ff2b 	bl	8008534 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80076de:	2104      	movs	r1, #4
 80076e0:	481c      	ldr	r0, [pc, #112]	; (8007754 <saveCharacter+0x34c>)
 80076e2:	f001 fcf7 	bl	80090d4 <HAL_GPIO_ReadPin>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f47f aeb6 	bne.w	800745a <saveCharacter+0x52>
            // Son karakteri sil
            if (*loc > 0) {
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dd20      	ble.n	8007738 <saveCharacter+0x330>
                (*loc)--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	1e5a      	subs	r2, r3, #1
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]
                (*writeLoc)--;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	1e5a      	subs	r2, r3, #1
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	601a      	str	r2, [r3, #0]
                lcd_delete_char(2, *writeLoc + 1);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	3301      	adds	r3, #1
 8007712:	b2db      	uxtb	r3, r3
 8007714:	4619      	mov	r1, r3
 8007716:	2002      	movs	r0, #2
 8007718:	f000 f9ec 	bl	8007af4 <lcd_delete_char>
                data[*loc] = '\0';
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4413      	add	r3, r2
 8007726:	2200      	movs	r2, #0
 8007728:	701a      	strb	r2, [r3, #0]
                eepromData[startPos + *loc] = '\0';
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	4413      	add	r3, r2
 8007732:	4a07      	ldr	r2, [pc, #28]	; (8007750 <saveCharacter+0x348>)
 8007734:	2100      	movs	r1, #0
 8007736:	54d1      	strb	r1, [r2, r3]
            }
            HAL_Delay(250); // Debouncing için gecikme
 8007738:	20fa      	movs	r0, #250	; 0xfa
 800773a:	f000 fefb 	bl	8008534 <HAL_Delay>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800773e:	e68c      	b.n	800745a <saveCharacter+0x52>
            break;
 8007740:	bf00      	nop
        }
    }
}
 8007742:	bf00      	nop
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000030 	.word	0x20000030
 8007750:	2000012c 	.word	0x2000012c
 8007754:	40010800 	.word	0x40010800

08007758 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af02      	add	r7, sp, #8
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	f023 030f 	bic.w	r3, r3, #15
 8007768:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007770:	7b7b      	ldrb	r3, [r7, #13]
 8007772:	f043 030c 	orr.w	r3, r3, #12
 8007776:	b2db      	uxtb	r3, r3
 8007778:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800777a:	7b7b      	ldrb	r3, [r7, #13]
 800777c:	f043 0308 	orr.w	r3, r3, #8
 8007780:	b2db      	uxtb	r3, r3
 8007782:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007784:	7b3b      	ldrb	r3, [r7, #12]
 8007786:	f043 030c 	orr.w	r3, r3, #12
 800778a:	b2db      	uxtb	r3, r3
 800778c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800778e:	7b3b      	ldrb	r3, [r7, #12]
 8007790:	f043 0308 	orr.w	r3, r3, #8
 8007794:	b2db      	uxtb	r3, r3
 8007796:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007798:	bf00      	nop
 800779a:	4825      	ldr	r0, [pc, #148]	; (8007830 <lcd_send_cmd+0xd8>)
 800779c:	f002 fac3 	bl	8009d26 <HAL_I2C_GetError>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d0f9      	beq.n	800779a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80077a6:	bf00      	nop
 80077a8:	4821      	ldr	r0, [pc, #132]	; (8007830 <lcd_send_cmd+0xd8>)
 80077aa:	f002 faaf 	bl	8009d0c <HAL_I2C_GetState>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d1f9      	bne.n	80077a8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80077b4:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <lcd_send_cmd+0xdc>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d116      	bne.n	80077ea <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
 80077c0:	e00f      	b.n	80077e2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	3310      	adds	r3, #16
 80077c6:	443b      	add	r3, r7
 80077c8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	f022 0208 	bic.w	r2, r2, #8
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	3310      	adds	r3, #16
 80077d6:	443b      	add	r3, r7
 80077d8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	3301      	adds	r3, #1
 80077e0:	73fb      	strb	r3, [r7, #15]
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d9ec      	bls.n	80077c2 <lcd_send_cmd+0x6a>
 80077e8:	e015      	b.n	8007816 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80077ea:	2300      	movs	r3, #0
 80077ec:	73bb      	strb	r3, [r7, #14]
 80077ee:	e00f      	b.n	8007810 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	3310      	adds	r3, #16
 80077f4:	443b      	add	r3, r7
 80077f6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	f042 0208 	orr.w	r2, r2, #8
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	3310      	adds	r3, #16
 8007804:	443b      	add	r3, r7
 8007806:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	3301      	adds	r3, #1
 800780e:	73bb      	strb	r3, [r7, #14]
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b03      	cmp	r3, #3
 8007814:	d9ec      	bls.n	80077f0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007816:	f107 0208 	add.w	r2, r7, #8
 800781a:	2364      	movs	r3, #100	; 0x64
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	2304      	movs	r3, #4
 8007820:	214e      	movs	r1, #78	; 0x4e
 8007822:	4803      	ldr	r0, [pc, #12]	; (8007830 <lcd_send_cmd+0xd8>)
 8007824:	f001 fe12 	bl	800944c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000290 	.word	0x20000290
 8007834:	20000264 	.word	0x20000264

08007838 <lcd_send_data>:

void lcd_send_data (char data) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af02      	add	r7, sp, #8
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	f023 030f 	bic.w	r3, r3, #15
 8007848:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007850:	7b7b      	ldrb	r3, [r7, #13]
 8007852:	f043 030d 	orr.w	r3, r3, #13
 8007856:	b2db      	uxtb	r3, r3
 8007858:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800785a:	7b7b      	ldrb	r3, [r7, #13]
 800785c:	f043 0309 	orr.w	r3, r3, #9
 8007860:	b2db      	uxtb	r3, r3
 8007862:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007864:	7b3b      	ldrb	r3, [r7, #12]
 8007866:	f043 030d 	orr.w	r3, r3, #13
 800786a:	b2db      	uxtb	r3, r3
 800786c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800786e:	7b3b      	ldrb	r3, [r7, #12]
 8007870:	f043 0309 	orr.w	r3, r3, #9
 8007874:	b2db      	uxtb	r3, r3
 8007876:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007878:	bf00      	nop
 800787a:	4825      	ldr	r0, [pc, #148]	; (8007910 <lcd_send_data+0xd8>)
 800787c:	f002 fa53 	bl	8009d26 <HAL_I2C_GetError>
 8007880:	4603      	mov	r3, r0
 8007882:	2b04      	cmp	r3, #4
 8007884:	d0f9      	beq.n	800787a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007886:	bf00      	nop
 8007888:	4821      	ldr	r0, [pc, #132]	; (8007910 <lcd_send_data+0xd8>)
 800788a:	f002 fa3f 	bl	8009d0c <HAL_I2C_GetState>
 800788e:	4603      	mov	r3, r0
 8007890:	2b20      	cmp	r3, #32
 8007892:	d1f9      	bne.n	8007888 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007894:	4b1f      	ldr	r3, [pc, #124]	; (8007914 <lcd_send_data+0xdc>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d116      	bne.n	80078ca <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
 80078a0:	e00f      	b.n	80078c2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	3310      	adds	r3, #16
 80078a6:	443b      	add	r3, r7
 80078a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	f022 0208 	bic.w	r2, r2, #8
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	3310      	adds	r3, #16
 80078b6:	443b      	add	r3, r7
 80078b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	3301      	adds	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d9ec      	bls.n	80078a2 <lcd_send_data+0x6a>
 80078c8:	e015      	b.n	80078f6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80078ca:	2300      	movs	r3, #0
 80078cc:	73bb      	strb	r3, [r7, #14]
 80078ce:	e00f      	b.n	80078f0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	3310      	adds	r3, #16
 80078d4:	443b      	add	r3, r7
 80078d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	f042 0208 	orr.w	r2, r2, #8
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	3310      	adds	r3, #16
 80078e4:	443b      	add	r3, r7
 80078e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	3301      	adds	r3, #1
 80078ee:	73bb      	strb	r3, [r7, #14]
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d9ec      	bls.n	80078d0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80078f6:	f107 0208 	add.w	r2, r7, #8
 80078fa:	2364      	movs	r3, #100	; 0x64
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	2304      	movs	r3, #4
 8007900:	214e      	movs	r1, #78	; 0x4e
 8007902:	4803      	ldr	r0, [pc, #12]	; (8007910 <lcd_send_data+0xd8>)
 8007904:	f001 fda2 	bl	800944c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007908:	bf00      	nop
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000290 	.word	0x20000290
 8007914:	20000264 	.word	0x20000264

08007918 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007920:	e006      	b.n	8007930 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff ff84 	bl	8007838 <lcd_send_data>
	while (*str) {
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1f4      	bne.n	8007922 <lcd_send_string+0xa>
	}
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af02      	add	r7, sp, #8
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	f023 030f 	bic.w	r3, r3, #15
 8007954:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800795c:	7b7b      	ldrb	r3, [r7, #13]
 800795e:	f043 030d 	orr.w	r3, r3, #13
 8007962:	b2db      	uxtb	r3, r3
 8007964:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007966:	7b7b      	ldrb	r3, [r7, #13]
 8007968:	f043 0309 	orr.w	r3, r3, #9
 800796c:	b2db      	uxtb	r3, r3
 800796e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007970:	7b3b      	ldrb	r3, [r7, #12]
 8007972:	f043 030d 	orr.w	r3, r3, #13
 8007976:	b2db      	uxtb	r3, r3
 8007978:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800797a:	7b3b      	ldrb	r3, [r7, #12]
 800797c:	f043 0309 	orr.w	r3, r3, #9
 8007980:	b2db      	uxtb	r3, r3
 8007982:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007984:	bf00      	nop
 8007986:	4825      	ldr	r0, [pc, #148]	; (8007a1c <lcd_send_char+0xd8>)
 8007988:	f002 f9cd 	bl	8009d26 <HAL_I2C_GetError>
 800798c:	4603      	mov	r3, r0
 800798e:	2b04      	cmp	r3, #4
 8007990:	d0f9      	beq.n	8007986 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007992:	bf00      	nop
 8007994:	4821      	ldr	r0, [pc, #132]	; (8007a1c <lcd_send_char+0xd8>)
 8007996:	f002 f9b9 	bl	8009d0c <HAL_I2C_GetState>
 800799a:	4603      	mov	r3, r0
 800799c:	2b20      	cmp	r3, #32
 800799e:	d1f9      	bne.n	8007994 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80079a0:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <lcd_send_char+0xdc>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d116      	bne.n	80079d6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
 80079ac:	e00f      	b.n	80079ce <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	3310      	adds	r3, #16
 80079b2:	443b      	add	r3, r7
 80079b4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	f022 0208 	bic.w	r2, r2, #8
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	3310      	adds	r3, #16
 80079c2:	443b      	add	r3, r7
 80079c4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	3301      	adds	r3, #1
 80079cc:	73fb      	strb	r3, [r7, #15]
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d9ec      	bls.n	80079ae <lcd_send_char+0x6a>
 80079d4:	e015      	b.n	8007a02 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80079d6:	2300      	movs	r3, #0
 80079d8:	73bb      	strb	r3, [r7, #14]
 80079da:	e00f      	b.n	80079fc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	3310      	adds	r3, #16
 80079e0:	443b      	add	r3, r7
 80079e2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	f042 0208 	orr.w	r2, r2, #8
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	3310      	adds	r3, #16
 80079f0:	443b      	add	r3, r7
 80079f2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	3301      	adds	r3, #1
 80079fa:	73bb      	strb	r3, [r7, #14]
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d9ec      	bls.n	80079dc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007a02:	f107 0208 	add.w	r2, r7, #8
 8007a06:	2364      	movs	r3, #100	; 0x64
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2304      	movs	r3, #4
 8007a0c:	214e      	movs	r1, #78	; 0x4e
 8007a0e:	4803      	ldr	r0, [pc, #12]	; (8007a1c <lcd_send_char+0xd8>)
 8007a10:	f001 fd1c 	bl	800944c <HAL_I2C_Master_Transmit>
}
 8007a14:	bf00      	nop
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000290 	.word	0x20000290
 8007a20:	20000264 	.word	0x20000264

08007a24 <lcd_init>:

void lcd_init (void) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007a28:	2002      	movs	r0, #2
 8007a2a:	f7ff fe95 	bl	8007758 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007a2e:	2028      	movs	r0, #40	; 0x28
 8007a30:	f7ff fe92 	bl	8007758 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007a34:	200c      	movs	r0, #12
 8007a36:	f7ff fe8f 	bl	8007758 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007a3a:	2080      	movs	r0, #128	; 0x80
 8007a3c:	f7ff fe8c 	bl	8007758 <lcd_send_cmd>
	lcd_backlight(1);
 8007a40:	2001      	movs	r0, #1
 8007a42:	f000 f86d 	bl	8007b20 <lcd_backlight>
}
 8007a46:	bf00      	nop
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	4603      	mov	r3, r0
 8007a52:	460a      	mov	r2, r1
 8007a54:	71fb      	strb	r3, [r7, #7]
 8007a56:	4613      	mov	r3, r2
 8007a58:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d106      	bne.n	8007a6e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007a60:	79bb      	ldrb	r3, [r7, #6]
 8007a62:	337f      	adds	r3, #127	; 0x7f
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fe76 	bl	8007758 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007a6c:	e008      	b.n	8007a80 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d105      	bne.n	8007a80 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007a74:	79bb      	ldrb	r3, [r7, #6]
 8007a76:	3b41      	subs	r3, #65	; 0x41
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fe6c 	bl	8007758 <lcd_send_cmd>
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	603a      	str	r2, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
 8007a94:	460b      	mov	r3, r1
 8007a96:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007a98:	79ba      	ldrb	r2, [r7, #6]
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff ffd3 	bl	8007a4a <lcd_gotoxy>
	lcd_send_string(str);
 8007aa4:	6838      	ldr	r0, [r7, #0]
 8007aa6:	f7ff ff37 	bl	8007918 <lcd_send_string>
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	4603      	mov	r3, r0
 8007aba:	71fb      	strb	r3, [r7, #7]
 8007abc:	460b      	mov	r3, r1
 8007abe:	71bb      	strb	r3, [r7, #6]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007ac4:	79ba      	ldrb	r2, [r7, #6]
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff ffbd 	bl	8007a4a <lcd_gotoxy>
    lcd_send_char(ch);
 8007ad0:	797b      	ldrb	r3, [r7, #5]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff ff36 	bl	8007944 <lcd_send_char>
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <lcd_clear>:

void lcd_clear(void) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	f7ff fe37 	bl	8007758 <lcd_send_cmd>
    HAL_Delay(2);
 8007aea:	2002      	movs	r0, #2
 8007aec:	f000 fd22 	bl	8008534 <HAL_Delay>
}
 8007af0:	bf00      	nop
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	460a      	mov	r2, r1
 8007afe:	71fb      	strb	r3, [r7, #7]
 8007b00:	4613      	mov	r3, r2
 8007b02:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007b04:	79ba      	ldrb	r2, [r7, #6]
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff ff9d 	bl	8007a4a <lcd_gotoxy>

    lcd_send_char(' ');
 8007b10:	2020      	movs	r0, #32
 8007b12:	f7ff ff17 	bl	8007944 <lcd_send_char>
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007b2a:	4a05      	ldr	r2, [pc, #20]	; (8007b40 <lcd_backlight+0x20>)
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007b30:	2000      	movs	r0, #0
 8007b32:	f7ff fe11 	bl	8007758 <lcd_send_cmd>
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000264 	.word	0x20000264

08007b44 <lcd_cursor>:

void lcd_cursor(int state) {
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d106      	bne.n	8007b60 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007b52:	200e      	movs	r0, #14
 8007b54:	f7ff fe00 	bl	8007758 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007b58:	200f      	movs	r0, #15
 8007b5a:	f7ff fdfd 	bl	8007758 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007b5e:	e002      	b.n	8007b66 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007b60:	200c      	movs	r0, #12
 8007b62:	f7ff fdf9 	bl	8007758 <lcd_send_cmd>
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	4a03      	ldr	r2, [pc, #12]	; (8007b8c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007b80:	6013      	str	r3, [r2, #0]
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr
 8007b8c:	200001dc 	.word	0x200001dc

08007b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b94:	f000 fc6c 	bl	8008470 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b9c:	f000 fcca 	bl	8008534 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ba0:	f000 f89c 	bl	8007cdc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ba4:	f000 f9be 	bl	8007f24 <MX_GPIO_Init>
  MX_CAN_Init();
 8007ba8:	f000 f8de 	bl	8007d68 <MX_CAN_Init>
  MX_I2C1_Init();
 8007bac:	f000 f910 	bl	8007dd0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007bb0:	f000 f93c 	bl	8007e2c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007bb4:	f000 f98c 	bl	8007ed0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007bb8:	2201      	movs	r2, #1
 8007bba:	2140      	movs	r1, #64	; 0x40
 8007bbc:	483e      	ldr	r0, [pc, #248]	; (8007cb8 <main+0x128>)
 8007bbe:	f001 faa0 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	2180      	movs	r1, #128	; 0x80
 8007bc6:	483c      	ldr	r0, [pc, #240]	; (8007cb8 <main+0x128>)
 8007bc8:	f001 fa9b 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007bcc:	200a      	movs	r0, #10
 8007bce:	f000 fcb1 	bl	8008534 <HAL_Delay>
  lcd_init();
 8007bd2:	f7ff ff27 	bl	8007a24 <lcd_init>
  HAL_Delay(10);
 8007bd6:	200a      	movs	r0, #10
 8007bd8:	f000 fcac 	bl	8008534 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007bdc:	4837      	ldr	r0, [pc, #220]	; (8007cbc <main+0x12c>)
 8007bde:	f003 f943 	bl	800ae68 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007be2:	bf00      	nop
 8007be4:	4836      	ldr	r0, [pc, #216]	; (8007cc0 <main+0x130>)
 8007be6:	f002 f89e 	bl	8009d26 <HAL_I2C_GetError>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d0f9      	beq.n	8007be4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bf0:	bf00      	nop
 8007bf2:	4833      	ldr	r0, [pc, #204]	; (8007cc0 <main+0x130>)
 8007bf4:	f002 f88a 	bl	8009d0c <HAL_I2C_GetState>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d1f9      	bne.n	8007bf2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c04:	482c      	ldr	r0, [pc, #176]	; (8007cb8 <main+0x128>)
 8007c06:	f001 fa7c 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c10:	4829      	ldr	r0, [pc, #164]	; (8007cb8 <main+0x128>)
 8007c12:	f001 fa76 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c16:	2200      	movs	r2, #0
 8007c18:	2104      	movs	r1, #4
 8007c1a:	4827      	ldr	r0, [pc, #156]	; (8007cb8 <main+0x128>)
 8007c1c:	f001 fa71 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007c20:	2200      	movs	r2, #0
 8007c22:	2102      	movs	r1, #2
 8007c24:	4824      	ldr	r0, [pc, #144]	; (8007cb8 <main+0x128>)
 8007c26:	f001 fa6c 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4822      	ldr	r0, [pc, #136]	; (8007cb8 <main+0x128>)
 8007c30:	f001 fa67 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c34:	2200      	movs	r2, #0
 8007c36:	2120      	movs	r1, #32
 8007c38:	4822      	ldr	r0, [pc, #136]	; (8007cc4 <main+0x134>)
 8007c3a:	f001 fa62 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2110      	movs	r1, #16
 8007c42:	4820      	ldr	r0, [pc, #128]	; (8007cc4 <main+0x134>)
 8007c44:	f001 fa5d 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	481e      	ldr	r0, [pc, #120]	; (8007cc8 <main+0x138>)
 8007c4e:	f001 fa58 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007c52:	2200      	movs	r2, #0
 8007c54:	2140      	movs	r1, #64	; 0x40
 8007c56:	481c      	ldr	r0, [pc, #112]	; (8007cc8 <main+0x138>)
 8007c58:	f001 fa53 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2120      	movs	r1, #32
 8007c60:	4819      	ldr	r0, [pc, #100]	; (8007cc8 <main+0x138>)
 8007c62:	f001 fa4e 	bl	8009102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007c66:	2200      	movs	r2, #0
 8007c68:	2110      	movs	r1, #16
 8007c6a:	4817      	ldr	r0, [pc, #92]	; (8007cc8 <main+0x138>)
 8007c6c:	f001 fa49 	bl	8009102 <HAL_GPIO_WritePin>

  i2cTest();
 8007c70:	f7f9 f88c 	bl	8000d8c <i2cTest>
  HAL_Delay(100);
 8007c74:	2064      	movs	r0, #100	; 0x64
 8007c76:	f000 fc5d 	bl	8008534 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007c7a:	4a14      	ldr	r2, [pc, #80]	; (8007ccc <main+0x13c>)
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	2001      	movs	r0, #1
 8007c80:	f7ff ff02 	bl	8007a88 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007c84:	4a12      	ldr	r2, [pc, #72]	; (8007cd0 <main+0x140>)
 8007c86:	2101      	movs	r1, #1
 8007c88:	2002      	movs	r0, #2
 8007c8a:	f7ff fefd 	bl	8007a88 <lcd_print>
  HAL_Delay(1000);
 8007c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c92:	f000 fc4f 	bl	8008534 <HAL_Delay>
  lcd_clear();
 8007c96:	f7ff ff23 	bl	8007ae0 <lcd_clear>

  eepromKontrol();
 8007c9a:	f7f8 facb 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ca2:	f000 fc47 	bl	8008534 <HAL_Delay>

  backLightTimer = millis;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <main+0x144>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a0b      	ldr	r2, [pc, #44]	; (8007cd8 <main+0x148>)
 8007cac:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007cae:	f7ff fb6f 	bl	8007390 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007cb2:	f7fe febd 	bl	8006a30 <mainLoop>
 8007cb6:	e7fc      	b.n	8007cb2 <main+0x122>
 8007cb8:	40010c00 	.word	0x40010c00
 8007cbc:	200002e4 	.word	0x200002e4
 8007cc0:	20000290 	.word	0x20000290
 8007cc4:	40011000 	.word	0x40011000
 8007cc8:	40010800 	.word	0x40010800
 8007ccc:	0800dc98 	.word	0x0800dc98
 8007cd0:	0800dcac 	.word	0x0800dcac
 8007cd4:	200001dc 	.word	0x200001dc
 8007cd8:	200001f8 	.word	0x200001f8

08007cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b090      	sub	sp, #64	; 0x40
 8007ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ce2:	f107 0318 	add.w	r3, r7, #24
 8007ce6:	2228      	movs	r2, #40	; 0x28
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f004 fbeb 	bl	800c4c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007cf0:	1d3b      	adds	r3, r7, #4
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	605a      	str	r2, [r3, #4]
 8007cf8:	609a      	str	r2, [r3, #8]
 8007cfa:	60da      	str	r2, [r3, #12]
 8007cfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d10:	2302      	movs	r3, #2
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007d1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d20:	f107 0318 	add.w	r3, r7, #24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 fc3f 	bl	800a5a8 <HAL_RCC_OscConfig>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007d30:	f000 f9a2 	bl	8008078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d34:	230f      	movs	r3, #15
 8007d36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007d4a:	1d3b      	adds	r3, r7, #4
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f002 feac 	bl	800aaac <HAL_RCC_ClockConfig>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007d5a:	f000 f98d 	bl	8008078 <Error_Handler>
  }
}
 8007d5e:	bf00      	nop
 8007d60:	3740      	adds	r7, #64	; 0x40
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007d6c:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d6e:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <MX_CAN_Init+0x64>)
 8007d70:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007d72:	4b15      	ldr	r3, [pc, #84]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d74:	2210      	movs	r2, #16
 8007d76:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007d78:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007d7e:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007d84:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007d8a:	4b0f      	ldr	r3, [pc, #60]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007d90:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007da2:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007da8:	4b07      	ldr	r3, [pc, #28]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007dae:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007db4:	4804      	ldr	r0, [pc, #16]	; (8007dc8 <MX_CAN_Init+0x60>)
 8007db6:	f000 fbe1 	bl	800857c <HAL_CAN_Init>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007dc0:	f000 f95a 	bl	8008078 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007dc4:	bf00      	nop
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20000268 	.word	0x20000268
 8007dcc:	40006400 	.word	0x40006400

08007dd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007dd4:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007dd6:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <MX_I2C1_Init+0x54>)
 8007dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007ddc:	4a12      	ldr	r2, [pc, #72]	; (8007e28 <MX_I2C1_Init+0x58>)
 8007dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007de0:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007de6:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007dec:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007df2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007df4:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e00:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e0c:	4804      	ldr	r0, [pc, #16]	; (8007e20 <MX_I2C1_Init+0x50>)
 8007e0e:	f001 f9a9 	bl	8009164 <HAL_I2C_Init>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e18:	f000 f92e 	bl	8008078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007e1c:	bf00      	nop
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000290 	.word	0x20000290
 8007e24:	40005400 	.word	0x40005400
 8007e28:	00061a80 	.word	0x00061a80

08007e2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e32:	f107 0308 	add.w	r3, r7, #8
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	605a      	str	r2, [r3, #4]
 8007e3c:	609a      	str	r2, [r3, #8]
 8007e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e40:	463b      	mov	r3, r7
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007e48:	4b1f      	ldr	r3, [pc, #124]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e4a:	4a20      	ldr	r2, [pc, #128]	; (8007ecc <MX_TIM1_Init+0xa0>)
 8007e4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007e4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e50:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007e54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e56:	4b1c      	ldr	r3, [pc, #112]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007e5c:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e5e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007e62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e64:	4b18      	ldr	r3, [pc, #96]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007e6a:	4b17      	ldr	r3, [pc, #92]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e70:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007e76:	4814      	ldr	r0, [pc, #80]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e78:	f002 ffa6 	bl	800adc8 <HAL_TIM_Base_Init>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007e82:	f000 f8f9 	bl	8008078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4619      	mov	r1, r3
 8007e92:	480d      	ldr	r0, [pc, #52]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007e94:	f003 f950 	bl	800b138 <HAL_TIM_ConfigClockSource>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007e9e:	f000 f8eb 	bl	8008078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007eaa:	463b      	mov	r3, r7
 8007eac:	4619      	mov	r1, r3
 8007eae:	4806      	ldr	r0, [pc, #24]	; (8007ec8 <MX_TIM1_Init+0x9c>)
 8007eb0:	f003 fb3e 	bl	800b530 <HAL_TIMEx_MasterConfigSynchronization>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007eba:	f000 f8dd 	bl	8008078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007ebe:	bf00      	nop
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	200002e4 	.word	0x200002e4
 8007ecc:	40012c00 	.word	0x40012c00

08007ed0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007ed6:	4a12      	ldr	r2, [pc, #72]	; (8007f20 <MX_USART1_UART_Init+0x50>)
 8007ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007eda:	4b10      	ldr	r3, [pc, #64]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007ee2:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ef4:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007ef6:	220c      	movs	r2, #12
 8007ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007efa:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f00:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f06:	4805      	ldr	r0, [pc, #20]	; (8007f1c <MX_USART1_UART_Init+0x4c>)
 8007f08:	f003 fb90 	bl	800b62c <HAL_UART_Init>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007f12:	f000 f8b1 	bl	8008078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f16:	bf00      	nop
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	2000032c 	.word	0x2000032c
 8007f20:	40013800 	.word	0x40013800

08007f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f2a:	f107 0310 	add.w	r3, r7, #16
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	605a      	str	r2, [r3, #4]
 8007f34:	609a      	str	r2, [r3, #8]
 8007f36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f38:	4b4b      	ldr	r3, [pc, #300]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	4a4a      	ldr	r2, [pc, #296]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f3e:	f043 0310 	orr.w	r3, r3, #16
 8007f42:	6193      	str	r3, [r2, #24]
 8007f44:	4b48      	ldr	r3, [pc, #288]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	f003 0310 	and.w	r3, r3, #16
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f50:	4b45      	ldr	r3, [pc, #276]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	4a44      	ldr	r2, [pc, #272]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f56:	f043 0320 	orr.w	r3, r3, #32
 8007f5a:	6193      	str	r3, [r2, #24]
 8007f5c:	4b42      	ldr	r3, [pc, #264]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	f003 0320 	and.w	r3, r3, #32
 8007f64:	60bb      	str	r3, [r7, #8]
 8007f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f68:	4b3f      	ldr	r3, [pc, #252]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	4a3e      	ldr	r2, [pc, #248]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f6e:	f043 0304 	orr.w	r3, r3, #4
 8007f72:	6193      	str	r3, [r2, #24]
 8007f74:	4b3c      	ldr	r3, [pc, #240]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	607b      	str	r3, [r7, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f80:	4b39      	ldr	r3, [pc, #228]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	4a38      	ldr	r2, [pc, #224]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f86:	f043 0308 	orr.w	r3, r3, #8
 8007f8a:	6193      	str	r3, [r2, #24]
 8007f8c:	4b36      	ldr	r3, [pc, #216]	; (8008068 <MX_GPIO_Init+0x144>)
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	603b      	str	r3, [r7, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007f98:	2200      	movs	r2, #0
 8007f9a:	21f0      	movs	r1, #240	; 0xf0
 8007f9c:	4833      	ldr	r0, [pc, #204]	; (800806c <MX_GPIO_Init+0x148>)
 8007f9e:	f001 f8b0 	bl	8009102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f241 0130 	movw	r1, #4144	; 0x1030
 8007fa8:	4831      	ldr	r0, [pc, #196]	; (8008070 <MX_GPIO_Init+0x14c>)
 8007faa:	f001 f8aa 	bl	8009102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f640 4107 	movw	r1, #3079	; 0xc07
 8007fb4:	482f      	ldr	r0, [pc, #188]	; (8008074 <MX_GPIO_Init+0x150>)
 8007fb6:	f001 f8a4 	bl	8009102 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007fba:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007fbe:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fc8:	f107 0310 	add.w	r3, r7, #16
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4828      	ldr	r0, [pc, #160]	; (8008070 <MX_GPIO_Init+0x14c>)
 8007fd0:	f000 fe20 	bl	8008c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007fd4:	f248 130f 	movw	r3, #33039	; 0x810f
 8007fd8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fe2:	f107 0310 	add.w	r3, r7, #16
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4820      	ldr	r0, [pc, #128]	; (800806c <MX_GPIO_Init+0x148>)
 8007fea:	f000 fe13 	bl	8008c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007fee:	23f0      	movs	r3, #240	; 0xf0
 8007ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ffe:	f107 0310 	add.w	r3, r7, #16
 8008002:	4619      	mov	r1, r3
 8008004:	4819      	ldr	r0, [pc, #100]	; (800806c <MX_GPIO_Init+0x148>)
 8008006:	f000 fe05 	bl	8008c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800800a:	f241 0330 	movw	r3, #4144	; 0x1030
 800800e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008010:	2301      	movs	r3, #1
 8008012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008014:	2300      	movs	r3, #0
 8008016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008018:	2302      	movs	r3, #2
 800801a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800801c:	f107 0310 	add.w	r3, r7, #16
 8008020:	4619      	mov	r1, r3
 8008022:	4813      	ldr	r0, [pc, #76]	; (8008070 <MX_GPIO_Init+0x14c>)
 8008024:	f000 fdf6 	bl	8008c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008028:	f640 4307 	movw	r3, #3079	; 0xc07
 800802c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800802e:	2301      	movs	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008032:	2300      	movs	r3, #0
 8008034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008036:	2302      	movs	r3, #2
 8008038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800803a:	f107 0310 	add.w	r3, r7, #16
 800803e:	4619      	mov	r1, r3
 8008040:	480c      	ldr	r0, [pc, #48]	; (8008074 <MX_GPIO_Init+0x150>)
 8008042:	f000 fde7 	bl	8008c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008046:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800804a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008050:	2300      	movs	r3, #0
 8008052:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008054:	f107 0310 	add.w	r3, r7, #16
 8008058:	4619      	mov	r1, r3
 800805a:	4806      	ldr	r0, [pc, #24]	; (8008074 <MX_GPIO_Init+0x150>)
 800805c:	f000 fdda 	bl	8008c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008060:	bf00      	nop
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40021000 	.word	0x40021000
 800806c:	40010800 	.word	0x40010800
 8008070:	40011000 	.word	0x40011000
 8008074:	40010c00 	.word	0x40010c00

08008078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800807c:	bf00      	nop
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800808a:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <HAL_MspInit+0x5c>)
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	4a14      	ldr	r2, [pc, #80]	; (80080e0 <HAL_MspInit+0x5c>)
 8008090:	f043 0301 	orr.w	r3, r3, #1
 8008094:	6193      	str	r3, [r2, #24]
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <HAL_MspInit+0x5c>)
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	60bb      	str	r3, [r7, #8]
 80080a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080a2:	4b0f      	ldr	r3, [pc, #60]	; (80080e0 <HAL_MspInit+0x5c>)
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	4a0e      	ldr	r2, [pc, #56]	; (80080e0 <HAL_MspInit+0x5c>)
 80080a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ac:	61d3      	str	r3, [r2, #28]
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <HAL_MspInit+0x5c>)
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080b6:	607b      	str	r3, [r7, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80080ba:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <HAL_MspInit+0x60>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	4a04      	ldr	r2, [pc, #16]	; (80080e4 <HAL_MspInit+0x60>)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080d6:	bf00      	nop
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	bc80      	pop	{r7}
 80080de:	4770      	bx	lr
 80080e0:	40021000 	.word	0x40021000
 80080e4:	40010000 	.word	0x40010000

080080e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f0:	f107 0310 	add.w	r3, r7, #16
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	605a      	str	r2, [r3, #4]
 80080fa:	609a      	str	r2, [r3, #8]
 80080fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <HAL_CAN_MspInit+0x8c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d131      	bne.n	800816c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008108:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <HAL_CAN_MspInit+0x90>)
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	4a1a      	ldr	r2, [pc, #104]	; (8008178 <HAL_CAN_MspInit+0x90>)
 800810e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008112:	61d3      	str	r3, [r2, #28]
 8008114:	4b18      	ldr	r3, [pc, #96]	; (8008178 <HAL_CAN_MspInit+0x90>)
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008120:	4b15      	ldr	r3, [pc, #84]	; (8008178 <HAL_CAN_MspInit+0x90>)
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	4a14      	ldr	r2, [pc, #80]	; (8008178 <HAL_CAN_MspInit+0x90>)
 8008126:	f043 0304 	orr.w	r3, r3, #4
 800812a:	6193      	str	r3, [r2, #24]
 800812c:	4b12      	ldr	r3, [pc, #72]	; (8008178 <HAL_CAN_MspInit+0x90>)
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	60bb      	str	r3, [r7, #8]
 8008136:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008138:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800813c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008142:	2300      	movs	r3, #0
 8008144:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008146:	f107 0310 	add.w	r3, r7, #16
 800814a:	4619      	mov	r1, r3
 800814c:	480b      	ldr	r0, [pc, #44]	; (800817c <HAL_CAN_MspInit+0x94>)
 800814e:	f000 fd61 	bl	8008c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008158:	2302      	movs	r3, #2
 800815a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800815c:	2303      	movs	r3, #3
 800815e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008160:	f107 0310 	add.w	r3, r7, #16
 8008164:	4619      	mov	r1, r3
 8008166:	4805      	ldr	r0, [pc, #20]	; (800817c <HAL_CAN_MspInit+0x94>)
 8008168:	f000 fd54 	bl	8008c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800816c:	bf00      	nop
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40006400 	.word	0x40006400
 8008178:	40021000 	.word	0x40021000
 800817c:	40010800 	.word	0x40010800

08008180 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008188:	f107 0310 	add.w	r3, r7, #16
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	605a      	str	r2, [r3, #4]
 8008192:	609a      	str	r2, [r3, #8]
 8008194:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <HAL_I2C_MspInit+0x70>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d123      	bne.n	80081e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081a0:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <HAL_I2C_MspInit+0x74>)
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4a13      	ldr	r2, [pc, #76]	; (80081f4 <HAL_I2C_MspInit+0x74>)
 80081a6:	f043 0308 	orr.w	r3, r3, #8
 80081aa:	6193      	str	r3, [r2, #24]
 80081ac:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <HAL_I2C_MspInit+0x74>)
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80081b8:	23c0      	movs	r3, #192	; 0xc0
 80081ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081bc:	2312      	movs	r3, #18
 80081be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081c0:	2303      	movs	r3, #3
 80081c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081c4:	f107 0310 	add.w	r3, r7, #16
 80081c8:	4619      	mov	r1, r3
 80081ca:	480b      	ldr	r0, [pc, #44]	; (80081f8 <HAL_I2C_MspInit+0x78>)
 80081cc:	f000 fd22 	bl	8008c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80081d0:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <HAL_I2C_MspInit+0x74>)
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	4a07      	ldr	r2, [pc, #28]	; (80081f4 <HAL_I2C_MspInit+0x74>)
 80081d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081da:	61d3      	str	r3, [r2, #28]
 80081dc:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <HAL_I2C_MspInit+0x74>)
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e4:	60bb      	str	r3, [r7, #8]
 80081e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80081e8:	bf00      	nop
 80081ea:	3720      	adds	r7, #32
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40005400 	.word	0x40005400
 80081f4:	40021000 	.word	0x40021000
 80081f8:	40010c00 	.word	0x40010c00

080081fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a0a      	ldr	r2, [pc, #40]	; (8008234 <HAL_I2C_MspDeInit+0x38>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d10d      	bne.n	800822a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800820e:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <HAL_I2C_MspDeInit+0x3c>)
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	4a09      	ldr	r2, [pc, #36]	; (8008238 <HAL_I2C_MspDeInit+0x3c>)
 8008214:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008218:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800821a:	2140      	movs	r1, #64	; 0x40
 800821c:	4807      	ldr	r0, [pc, #28]	; (800823c <HAL_I2C_MspDeInit+0x40>)
 800821e:	f000 fe8d 	bl	8008f3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008222:	2180      	movs	r1, #128	; 0x80
 8008224:	4805      	ldr	r0, [pc, #20]	; (800823c <HAL_I2C_MspDeInit+0x40>)
 8008226:	f000 fe89 	bl	8008f3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800822a:	bf00      	nop
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	40005400 	.word	0x40005400
 8008238:	40021000 	.word	0x40021000
 800823c:	40010c00 	.word	0x40010c00

08008240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a0d      	ldr	r2, [pc, #52]	; (8008284 <HAL_TIM_Base_MspInit+0x44>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d113      	bne.n	800827a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008252:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <HAL_TIM_Base_MspInit+0x48>)
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	4a0c      	ldr	r2, [pc, #48]	; (8008288 <HAL_TIM_Base_MspInit+0x48>)
 8008258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800825c:	6193      	str	r3, [r2, #24]
 800825e:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <HAL_TIM_Base_MspInit+0x48>)
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800826a:	2200      	movs	r2, #0
 800826c:	2100      	movs	r1, #0
 800826e:	2019      	movs	r0, #25
 8008270:	f000 fb57 	bl	8008922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008274:	2019      	movs	r0, #25
 8008276:	f000 fb70 	bl	800895a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	40012c00 	.word	0x40012c00
 8008288:	40021000 	.word	0x40021000

0800828c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008294:	f107 0310 	add.w	r3, r7, #16
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a20      	ldr	r2, [pc, #128]	; (8008328 <HAL_UART_MspInit+0x9c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d139      	bne.n	8008320 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80082ac:	4b1f      	ldr	r3, [pc, #124]	; (800832c <HAL_UART_MspInit+0xa0>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	4a1e      	ldr	r2, [pc, #120]	; (800832c <HAL_UART_MspInit+0xa0>)
 80082b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082b6:	6193      	str	r3, [r2, #24]
 80082b8:	4b1c      	ldr	r3, [pc, #112]	; (800832c <HAL_UART_MspInit+0xa0>)
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082c4:	4b19      	ldr	r3, [pc, #100]	; (800832c <HAL_UART_MspInit+0xa0>)
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	4a18      	ldr	r2, [pc, #96]	; (800832c <HAL_UART_MspInit+0xa0>)
 80082ca:	f043 0304 	orr.w	r3, r3, #4
 80082ce:	6193      	str	r3, [r2, #24]
 80082d0:	4b16      	ldr	r3, [pc, #88]	; (800832c <HAL_UART_MspInit+0xa0>)
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	60bb      	str	r3, [r7, #8]
 80082da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80082dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e2:	2302      	movs	r3, #2
 80082e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082e6:	2303      	movs	r3, #3
 80082e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ea:	f107 0310 	add.w	r3, r7, #16
 80082ee:	4619      	mov	r1, r3
 80082f0:	480f      	ldr	r0, [pc, #60]	; (8008330 <HAL_UART_MspInit+0xa4>)
 80082f2:	f000 fc8f 	bl	8008c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80082f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008300:	2300      	movs	r3, #0
 8008302:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008304:	f107 0310 	add.w	r3, r7, #16
 8008308:	4619      	mov	r1, r3
 800830a:	4809      	ldr	r0, [pc, #36]	; (8008330 <HAL_UART_MspInit+0xa4>)
 800830c:	f000 fc82 	bl	8008c14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008310:	2200      	movs	r2, #0
 8008312:	2100      	movs	r1, #0
 8008314:	2025      	movs	r0, #37	; 0x25
 8008316:	f000 fb04 	bl	8008922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800831a:	2025      	movs	r0, #37	; 0x25
 800831c:	f000 fb1d 	bl	800895a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008320:	bf00      	nop
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	40013800 	.word	0x40013800
 800832c:	40021000 	.word	0x40021000
 8008330:	40010800 	.word	0x40010800

08008334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008338:	e7fe      	b.n	8008338 <NMI_Handler+0x4>

0800833a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800833a:	b480      	push	{r7}
 800833c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800833e:	e7fe      	b.n	800833e <HardFault_Handler+0x4>

08008340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008344:	e7fe      	b.n	8008344 <MemManage_Handler+0x4>

08008346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008346:	b480      	push	{r7}
 8008348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800834a:	e7fe      	b.n	800834a <BusFault_Handler+0x4>

0800834c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008350:	e7fe      	b.n	8008350 <UsageFault_Handler+0x4>

08008352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008352:	b480      	push	{r7}
 8008354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008356:	bf00      	nop
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr

0800835e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800835e:	b480      	push	{r7}
 8008360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008362:	bf00      	nop
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr

0800836a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800836a:	b480      	push	{r7}
 800836c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800836e:	bf00      	nop
 8008370:	46bd      	mov	sp, r7
 8008372:	bc80      	pop	{r7}
 8008374:	4770      	bx	lr

08008376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800837a:	f000 f8bf 	bl	80084fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800837e:	bf00      	nop
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008388:	4802      	ldr	r0, [pc, #8]	; (8008394 <TIM1_UP_IRQHandler+0x10>)
 800838a:	f002 fdcd 	bl	800af28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800838e:	bf00      	nop
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	200002e4 	.word	0x200002e4

08008398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800839c:	4802      	ldr	r0, [pc, #8]	; (80083a8 <USART1_IRQHandler+0x10>)
 800839e:	f003 f9ef 	bl	800b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80083a2:	bf00      	nop
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	2000032c 	.word	0x2000032c

080083ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083b4:	4a14      	ldr	r2, [pc, #80]	; (8008408 <_sbrk+0x5c>)
 80083b6:	4b15      	ldr	r3, [pc, #84]	; (800840c <_sbrk+0x60>)
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083c0:	4b13      	ldr	r3, [pc, #76]	; (8008410 <_sbrk+0x64>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083c8:	4b11      	ldr	r3, [pc, #68]	; (8008410 <_sbrk+0x64>)
 80083ca:	4a12      	ldr	r2, [pc, #72]	; (8008414 <_sbrk+0x68>)
 80083cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083ce:	4b10      	ldr	r3, [pc, #64]	; (8008410 <_sbrk+0x64>)
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d207      	bcs.n	80083ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083dc:	f004 f88c 	bl	800c4f8 <__errno>
 80083e0:	4603      	mov	r3, r0
 80083e2:	220c      	movs	r2, #12
 80083e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ea:	e009      	b.n	8008400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083ec:	4b08      	ldr	r3, [pc, #32]	; (8008410 <_sbrk+0x64>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083f2:	4b07      	ldr	r3, [pc, #28]	; (8008410 <_sbrk+0x64>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	4a05      	ldr	r2, [pc, #20]	; (8008410 <_sbrk+0x64>)
 80083fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083fe:	68fb      	ldr	r3, [r7, #12]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	2000c000 	.word	0x2000c000
 800840c:	00000400 	.word	0x00000400
 8008410:	20000374 	.word	0x20000374
 8008414:	200004c8 	.word	0x200004c8

08008418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800841c:	bf00      	nop
 800841e:	46bd      	mov	sp, r7
 8008420:	bc80      	pop	{r7}
 8008422:	4770      	bx	lr

08008424 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008424:	480c      	ldr	r0, [pc, #48]	; (8008458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008426:	490d      	ldr	r1, [pc, #52]	; (800845c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008428:	4a0d      	ldr	r2, [pc, #52]	; (8008460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800842a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800842c:	e002      	b.n	8008434 <LoopCopyDataInit>

0800842e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800842e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008432:	3304      	adds	r3, #4

08008434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008438:	d3f9      	bcc.n	800842e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800843a:	4a0a      	ldr	r2, [pc, #40]	; (8008464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800843c:	4c0a      	ldr	r4, [pc, #40]	; (8008468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800843e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008440:	e001      	b.n	8008446 <LoopFillZerobss>

08008442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008444:	3204      	adds	r2, #4

08008446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008448:	d3fb      	bcc.n	8008442 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800844a:	f7ff ffe5 	bl	8008418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800844e:	f004 f859 	bl	800c504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008452:	f7ff fb9d 	bl	8007b90 <main>
  bx lr
 8008456:	4770      	bx	lr
  ldr r0, =_sdata
 8008458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800845c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8008460:	0800dd4c 	.word	0x0800dd4c
  ldr r2, =_sbss
 8008464:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8008468:	200004c4 	.word	0x200004c4

0800846c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800846c:	e7fe      	b.n	800846c <ADC1_2_IRQHandler>
	...

08008470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008474:	4b08      	ldr	r3, [pc, #32]	; (8008498 <HAL_Init+0x28>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a07      	ldr	r2, [pc, #28]	; (8008498 <HAL_Init+0x28>)
 800847a:	f043 0310 	orr.w	r3, r3, #16
 800847e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008480:	2003      	movs	r0, #3
 8008482:	f000 fa43 	bl	800890c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008486:	200f      	movs	r0, #15
 8008488:	f000 f808 	bl	800849c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800848c:	f7ff fdfa 	bl	8008084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	40022000 	.word	0x40022000

0800849c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084a4:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <HAL_InitTick+0x54>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <HAL_InitTick+0x58>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	4619      	mov	r1, r3
 80084ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80084b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fa5b 	bl	8008976 <HAL_SYSTICK_Config>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e00e      	b.n	80084e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b0f      	cmp	r3, #15
 80084ce:	d80a      	bhi.n	80084e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084d0:	2200      	movs	r2, #0
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084d8:	f000 fa23 	bl	8008922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084dc:	4a06      	ldr	r2, [pc, #24]	; (80084f8 <HAL_InitTick+0x5c>)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e000      	b.n	80084e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	200000b4 	.word	0x200000b4
 80084f4:	200000bc 	.word	0x200000bc
 80084f8:	200000b8 	.word	0x200000b8

080084fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HAL_IncTick+0x1c>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <HAL_IncTick+0x20>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4413      	add	r3, r2
 800850c:	4a03      	ldr	r2, [pc, #12]	; (800851c <HAL_IncTick+0x20>)
 800850e:	6013      	str	r3, [r2, #0]
}
 8008510:	bf00      	nop
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr
 8008518:	200000bc 	.word	0x200000bc
 800851c:	20000378 	.word	0x20000378

08008520 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
  return uwTick;
 8008524:	4b02      	ldr	r3, [pc, #8]	; (8008530 <HAL_GetTick+0x10>)
 8008526:	681b      	ldr	r3, [r3, #0]
}
 8008528:	4618      	mov	r0, r3
 800852a:	46bd      	mov	sp, r7
 800852c:	bc80      	pop	{r7}
 800852e:	4770      	bx	lr
 8008530:	20000378 	.word	0x20000378

08008534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800853c:	f7ff fff0 	bl	8008520 <HAL_GetTick>
 8008540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800854c:	d005      	beq.n	800855a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800854e:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <HAL_Delay+0x44>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800855a:	bf00      	nop
 800855c:	f7ff ffe0 	bl	8008520 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	429a      	cmp	r2, r3
 800856a:	d8f7      	bhi.n	800855c <HAL_Delay+0x28>
  {
  }
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	200000bc 	.word	0x200000bc

0800857c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e0ed      	b.n	800876a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff fda4 	bl	80080e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0201 	orr.w	r2, r2, #1
 80085ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085b0:	f7ff ffb6 	bl	8008520 <HAL_GetTick>
 80085b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085b6:	e012      	b.n	80085de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085b8:	f7ff ffb2 	bl	8008520 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b0a      	cmp	r3, #10
 80085c4:	d90b      	bls.n	80085de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2205      	movs	r2, #5
 80085d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e0c5      	b.n	800876a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0e5      	beq.n	80085b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0202 	bic.w	r2, r2, #2
 80085fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085fc:	f7ff ff90 	bl	8008520 <HAL_GetTick>
 8008600:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008602:	e012      	b.n	800862a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008604:	f7ff ff8c 	bl	8008520 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b0a      	cmp	r3, #10
 8008610:	d90b      	bls.n	800862a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2205      	movs	r2, #5
 8008622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e09f      	b.n	800876a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e5      	bne.n	8008604 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7e1b      	ldrb	r3, [r3, #24]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d108      	bne.n	8008652 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	e007      	b.n	8008662 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	7e5b      	ldrb	r3, [r3, #25]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d108      	bne.n	800867c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e007      	b.n	800868c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800868a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7e9b      	ldrb	r3, [r3, #26]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d108      	bne.n	80086a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0220 	orr.w	r2, r2, #32
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e007      	b.n	80086b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 0220 	bic.w	r2, r2, #32
 80086b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	7edb      	ldrb	r3, [r3, #27]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d108      	bne.n	80086d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0210 	bic.w	r2, r2, #16
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e007      	b.n	80086e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f042 0210 	orr.w	r2, r2, #16
 80086de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	7f1b      	ldrb	r3, [r3, #28]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d108      	bne.n	80086fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 0208 	orr.w	r2, r2, #8
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	e007      	b.n	800870a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0208 	bic.w	r2, r2, #8
 8008708:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7f5b      	ldrb	r3, [r3, #29]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d108      	bne.n	8008724 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f042 0204 	orr.w	r2, r2, #4
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	e007      	b.n	8008734 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0204 	bic.w	r2, r2, #4
 8008732:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	ea42 0103 	orr.w	r1, r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	1e5a      	subs	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <__NVIC_SetPriorityGrouping>:
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <__NVIC_SetPriorityGrouping+0x44>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008790:	4013      	ands	r3, r2
 8008792:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800879c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087a6:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <__NVIC_SetPriorityGrouping+0x44>)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	60d3      	str	r3, [r2, #12]
}
 80087ac:	bf00      	nop
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	e000ed00 	.word	0xe000ed00

080087bc <__NVIC_GetPriorityGrouping>:
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087c0:	4b04      	ldr	r3, [pc, #16]	; (80087d4 <__NVIC_GetPriorityGrouping+0x18>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	0a1b      	lsrs	r3, r3, #8
 80087c6:	f003 0307 	and.w	r3, r3, #7
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bc80      	pop	{r7}
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	e000ed00 	.word	0xe000ed00

080087d8 <__NVIC_EnableIRQ>:
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	db0b      	blt.n	8008802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	f003 021f 	and.w	r2, r3, #31
 80087f0:	4906      	ldr	r1, [pc, #24]	; (800880c <__NVIC_EnableIRQ+0x34>)
 80087f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087f6:	095b      	lsrs	r3, r3, #5
 80087f8:	2001      	movs	r0, #1
 80087fa:	fa00 f202 	lsl.w	r2, r0, r2
 80087fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr
 800880c:	e000e100 	.word	0xe000e100

08008810 <__NVIC_SetPriority>:
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800881c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008820:	2b00      	cmp	r3, #0
 8008822:	db0a      	blt.n	800883a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	490c      	ldr	r1, [pc, #48]	; (800885c <__NVIC_SetPriority+0x4c>)
 800882a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882e:	0112      	lsls	r2, r2, #4
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	440b      	add	r3, r1
 8008834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008838:	e00a      	b.n	8008850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	b2da      	uxtb	r2, r3
 800883e:	4908      	ldr	r1, [pc, #32]	; (8008860 <__NVIC_SetPriority+0x50>)
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	f003 030f 	and.w	r3, r3, #15
 8008846:	3b04      	subs	r3, #4
 8008848:	0112      	lsls	r2, r2, #4
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	440b      	add	r3, r1
 800884e:	761a      	strb	r2, [r3, #24]
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	bc80      	pop	{r7}
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	e000e100 	.word	0xe000e100
 8008860:	e000ed00 	.word	0xe000ed00

08008864 <NVIC_EncodePriority>:
{
 8008864:	b480      	push	{r7}
 8008866:	b089      	sub	sp, #36	; 0x24
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	f1c3 0307 	rsb	r3, r3, #7
 800887e:	2b04      	cmp	r3, #4
 8008880:	bf28      	it	cs
 8008882:	2304      	movcs	r3, #4
 8008884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	3304      	adds	r3, #4
 800888a:	2b06      	cmp	r3, #6
 800888c:	d902      	bls.n	8008894 <NVIC_EncodePriority+0x30>
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	3b03      	subs	r3, #3
 8008892:	e000      	b.n	8008896 <NVIC_EncodePriority+0x32>
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	fa02 f303 	lsl.w	r3, r2, r3
 80088a2:	43da      	mvns	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	401a      	ands	r2, r3
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	fa01 f303 	lsl.w	r3, r1, r3
 80088b6:	43d9      	mvns	r1, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088bc:	4313      	orrs	r3, r2
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3724      	adds	r7, #36	; 0x24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr

080088c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088d8:	d301      	bcc.n	80088de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088da:	2301      	movs	r3, #1
 80088dc:	e00f      	b.n	80088fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088de:	4a0a      	ldr	r2, [pc, #40]	; (8008908 <SysTick_Config+0x40>)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088e6:	210f      	movs	r1, #15
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ec:	f7ff ff90 	bl	8008810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <SysTick_Config+0x40>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088f6:	4b04      	ldr	r3, [pc, #16]	; (8008908 <SysTick_Config+0x40>)
 80088f8:	2207      	movs	r2, #7
 80088fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	e000e010 	.word	0xe000e010

0800890c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff ff2d 	bl	8008774 <__NVIC_SetPriorityGrouping>
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008922:	b580      	push	{r7, lr}
 8008924:	b086      	sub	sp, #24
 8008926:	af00      	add	r7, sp, #0
 8008928:	4603      	mov	r3, r0
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
 800892e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008934:	f7ff ff42 	bl	80087bc <__NVIC_GetPriorityGrouping>
 8008938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	68b9      	ldr	r1, [r7, #8]
 800893e:	6978      	ldr	r0, [r7, #20]
 8008940:	f7ff ff90 	bl	8008864 <NVIC_EncodePriority>
 8008944:	4602      	mov	r2, r0
 8008946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff ff5f 	bl	8008810 <__NVIC_SetPriority>
}
 8008952:	bf00      	nop
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	4603      	mov	r3, r0
 8008962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff ff35 	bl	80087d8 <__NVIC_EnableIRQ>
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff ffa2 	bl	80088c8 <SysTick_Config>
 8008984:	4603      	mov	r3, r0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800898e:	b480      	push	{r7}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d008      	beq.n	80089b8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2204      	movs	r2, #4
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e020      	b.n	80089fa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 020e 	bic.w	r2, r2, #14
 80089c6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0201 	bic.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e0:	2101      	movs	r1, #1
 80089e2:	fa01 f202 	lsl.w	r2, r1, r2
 80089e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bc80      	pop	{r7}
 8008a02:	4770      	bx	lr

08008a04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d005      	beq.n	8008a28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2204      	movs	r2, #4
 8008a20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	73fb      	strb	r3, [r7, #15]
 8008a26:	e0d6      	b.n	8008bd6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 020e 	bic.w	r2, r2, #14
 8008a36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0201 	bic.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4b64      	ldr	r3, [pc, #400]	; (8008be0 <HAL_DMA_Abort_IT+0x1dc>)
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d958      	bls.n	8008b06 <HAL_DMA_Abort_IT+0x102>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a62      	ldr	r2, [pc, #392]	; (8008be4 <HAL_DMA_Abort_IT+0x1e0>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d04f      	beq.n	8008afe <HAL_DMA_Abort_IT+0xfa>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a61      	ldr	r2, [pc, #388]	; (8008be8 <HAL_DMA_Abort_IT+0x1e4>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d048      	beq.n	8008afa <HAL_DMA_Abort_IT+0xf6>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a5f      	ldr	r2, [pc, #380]	; (8008bec <HAL_DMA_Abort_IT+0x1e8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d040      	beq.n	8008af4 <HAL_DMA_Abort_IT+0xf0>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a5e      	ldr	r2, [pc, #376]	; (8008bf0 <HAL_DMA_Abort_IT+0x1ec>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d038      	beq.n	8008aee <HAL_DMA_Abort_IT+0xea>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a5c      	ldr	r2, [pc, #368]	; (8008bf4 <HAL_DMA_Abort_IT+0x1f0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d030      	beq.n	8008ae8 <HAL_DMA_Abort_IT+0xe4>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a5b      	ldr	r2, [pc, #364]	; (8008bf8 <HAL_DMA_Abort_IT+0x1f4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d028      	beq.n	8008ae2 <HAL_DMA_Abort_IT+0xde>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a52      	ldr	r2, [pc, #328]	; (8008be0 <HAL_DMA_Abort_IT+0x1dc>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d020      	beq.n	8008adc <HAL_DMA_Abort_IT+0xd8>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a57      	ldr	r2, [pc, #348]	; (8008bfc <HAL_DMA_Abort_IT+0x1f8>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d019      	beq.n	8008ad8 <HAL_DMA_Abort_IT+0xd4>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a55      	ldr	r2, [pc, #340]	; (8008c00 <HAL_DMA_Abort_IT+0x1fc>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d012      	beq.n	8008ad4 <HAL_DMA_Abort_IT+0xd0>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a54      	ldr	r2, [pc, #336]	; (8008c04 <HAL_DMA_Abort_IT+0x200>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00a      	beq.n	8008ace <HAL_DMA_Abort_IT+0xca>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a52      	ldr	r2, [pc, #328]	; (8008c08 <HAL_DMA_Abort_IT+0x204>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d102      	bne.n	8008ac8 <HAL_DMA_Abort_IT+0xc4>
 8008ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ac6:	e01b      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008acc:	e018      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ad2:	e015      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	e013      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e011      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ae0:	e00e      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008ae2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ae6:	e00b      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008aec:	e008      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008af2:	e005      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008af8:	e002      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008afa:	2310      	movs	r3, #16
 8008afc:	e000      	b.n	8008b00 <HAL_DMA_Abort_IT+0xfc>
 8008afe:	2301      	movs	r3, #1
 8008b00:	4a42      	ldr	r2, [pc, #264]	; (8008c0c <HAL_DMA_Abort_IT+0x208>)
 8008b02:	6053      	str	r3, [r2, #4]
 8008b04:	e057      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x1b2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a36      	ldr	r2, [pc, #216]	; (8008be4 <HAL_DMA_Abort_IT+0x1e0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d04f      	beq.n	8008bb0 <HAL_DMA_Abort_IT+0x1ac>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a34      	ldr	r2, [pc, #208]	; (8008be8 <HAL_DMA_Abort_IT+0x1e4>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d048      	beq.n	8008bac <HAL_DMA_Abort_IT+0x1a8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a33      	ldr	r2, [pc, #204]	; (8008bec <HAL_DMA_Abort_IT+0x1e8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d040      	beq.n	8008ba6 <HAL_DMA_Abort_IT+0x1a2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a31      	ldr	r2, [pc, #196]	; (8008bf0 <HAL_DMA_Abort_IT+0x1ec>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d038      	beq.n	8008ba0 <HAL_DMA_Abort_IT+0x19c>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a30      	ldr	r2, [pc, #192]	; (8008bf4 <HAL_DMA_Abort_IT+0x1f0>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d030      	beq.n	8008b9a <HAL_DMA_Abort_IT+0x196>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a2e      	ldr	r2, [pc, #184]	; (8008bf8 <HAL_DMA_Abort_IT+0x1f4>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d028      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x190>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a26      	ldr	r2, [pc, #152]	; (8008be0 <HAL_DMA_Abort_IT+0x1dc>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d020      	beq.n	8008b8e <HAL_DMA_Abort_IT+0x18a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a2a      	ldr	r2, [pc, #168]	; (8008bfc <HAL_DMA_Abort_IT+0x1f8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d019      	beq.n	8008b8a <HAL_DMA_Abort_IT+0x186>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <HAL_DMA_Abort_IT+0x1fc>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d012      	beq.n	8008b86 <HAL_DMA_Abort_IT+0x182>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a27      	ldr	r2, [pc, #156]	; (8008c04 <HAL_DMA_Abort_IT+0x200>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00a      	beq.n	8008b80 <HAL_DMA_Abort_IT+0x17c>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a26      	ldr	r2, [pc, #152]	; (8008c08 <HAL_DMA_Abort_IT+0x204>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d102      	bne.n	8008b7a <HAL_DMA_Abort_IT+0x176>
 8008b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b78:	e01b      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b7e:	e018      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b84:	e015      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008b86:	2310      	movs	r3, #16
 8008b88:	e013      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e011      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b92:	e00e      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008b94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b98:	e00b      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b9e:	e008      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ba4:	e005      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008baa:	e002      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008bac:	2310      	movs	r3, #16
 8008bae:	e000      	b.n	8008bb2 <HAL_DMA_Abort_IT+0x1ae>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	4a17      	ldr	r2, [pc, #92]	; (8008c10 <HAL_DMA_Abort_IT+0x20c>)
 8008bb4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
    } 
  }
  return status;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	40020080 	.word	0x40020080
 8008be4:	40020008 	.word	0x40020008
 8008be8:	4002001c 	.word	0x4002001c
 8008bec:	40020030 	.word	0x40020030
 8008bf0:	40020044 	.word	0x40020044
 8008bf4:	40020058 	.word	0x40020058
 8008bf8:	4002006c 	.word	0x4002006c
 8008bfc:	40020408 	.word	0x40020408
 8008c00:	4002041c 	.word	0x4002041c
 8008c04:	40020430 	.word	0x40020430
 8008c08:	40020444 	.word	0x40020444
 8008c0c:	40020400 	.word	0x40020400
 8008c10:	40020000 	.word	0x40020000

08008c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b08b      	sub	sp, #44	; 0x2c
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008c22:	2300      	movs	r3, #0
 8008c24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c26:	e179      	b.n	8008f1c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008c28:	2201      	movs	r2, #1
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	f040 8168 	bne.w	8008f16 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	4a96      	ldr	r2, [pc, #600]	; (8008ea4 <HAL_GPIO_Init+0x290>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d05e      	beq.n	8008d0e <HAL_GPIO_Init+0xfa>
 8008c50:	4a94      	ldr	r2, [pc, #592]	; (8008ea4 <HAL_GPIO_Init+0x290>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d875      	bhi.n	8008d42 <HAL_GPIO_Init+0x12e>
 8008c56:	4a94      	ldr	r2, [pc, #592]	; (8008ea8 <HAL_GPIO_Init+0x294>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d058      	beq.n	8008d0e <HAL_GPIO_Init+0xfa>
 8008c5c:	4a92      	ldr	r2, [pc, #584]	; (8008ea8 <HAL_GPIO_Init+0x294>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d86f      	bhi.n	8008d42 <HAL_GPIO_Init+0x12e>
 8008c62:	4a92      	ldr	r2, [pc, #584]	; (8008eac <HAL_GPIO_Init+0x298>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d052      	beq.n	8008d0e <HAL_GPIO_Init+0xfa>
 8008c68:	4a90      	ldr	r2, [pc, #576]	; (8008eac <HAL_GPIO_Init+0x298>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d869      	bhi.n	8008d42 <HAL_GPIO_Init+0x12e>
 8008c6e:	4a90      	ldr	r2, [pc, #576]	; (8008eb0 <HAL_GPIO_Init+0x29c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d04c      	beq.n	8008d0e <HAL_GPIO_Init+0xfa>
 8008c74:	4a8e      	ldr	r2, [pc, #568]	; (8008eb0 <HAL_GPIO_Init+0x29c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d863      	bhi.n	8008d42 <HAL_GPIO_Init+0x12e>
 8008c7a:	4a8e      	ldr	r2, [pc, #568]	; (8008eb4 <HAL_GPIO_Init+0x2a0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d046      	beq.n	8008d0e <HAL_GPIO_Init+0xfa>
 8008c80:	4a8c      	ldr	r2, [pc, #560]	; (8008eb4 <HAL_GPIO_Init+0x2a0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d85d      	bhi.n	8008d42 <HAL_GPIO_Init+0x12e>
 8008c86:	2b12      	cmp	r3, #18
 8008c88:	d82a      	bhi.n	8008ce0 <HAL_GPIO_Init+0xcc>
 8008c8a:	2b12      	cmp	r3, #18
 8008c8c:	d859      	bhi.n	8008d42 <HAL_GPIO_Init+0x12e>
 8008c8e:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <HAL_GPIO_Init+0x80>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008d0f 	.word	0x08008d0f
 8008c98:	08008ce9 	.word	0x08008ce9
 8008c9c:	08008cfb 	.word	0x08008cfb
 8008ca0:	08008d3d 	.word	0x08008d3d
 8008ca4:	08008d43 	.word	0x08008d43
 8008ca8:	08008d43 	.word	0x08008d43
 8008cac:	08008d43 	.word	0x08008d43
 8008cb0:	08008d43 	.word	0x08008d43
 8008cb4:	08008d43 	.word	0x08008d43
 8008cb8:	08008d43 	.word	0x08008d43
 8008cbc:	08008d43 	.word	0x08008d43
 8008cc0:	08008d43 	.word	0x08008d43
 8008cc4:	08008d43 	.word	0x08008d43
 8008cc8:	08008d43 	.word	0x08008d43
 8008ccc:	08008d43 	.word	0x08008d43
 8008cd0:	08008d43 	.word	0x08008d43
 8008cd4:	08008d43 	.word	0x08008d43
 8008cd8:	08008cf1 	.word	0x08008cf1
 8008cdc:	08008d05 	.word	0x08008d05
 8008ce0:	4a75      	ldr	r2, [pc, #468]	; (8008eb8 <HAL_GPIO_Init+0x2a4>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d013      	beq.n	8008d0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008ce6:	e02c      	b.n	8008d42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	623b      	str	r3, [r7, #32]
          break;
 8008cee:	e029      	b.n	8008d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	623b      	str	r3, [r7, #32]
          break;
 8008cf8:	e024      	b.n	8008d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	3308      	adds	r3, #8
 8008d00:	623b      	str	r3, [r7, #32]
          break;
 8008d02:	e01f      	b.n	8008d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	330c      	adds	r3, #12
 8008d0a:	623b      	str	r3, [r7, #32]
          break;
 8008d0c:	e01a      	b.n	8008d44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d102      	bne.n	8008d1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008d16:	2304      	movs	r3, #4
 8008d18:	623b      	str	r3, [r7, #32]
          break;
 8008d1a:	e013      	b.n	8008d44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d105      	bne.n	8008d30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d24:	2308      	movs	r3, #8
 8008d26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	611a      	str	r2, [r3, #16]
          break;
 8008d2e:	e009      	b.n	8008d44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d30:	2308      	movs	r3, #8
 8008d32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	615a      	str	r2, [r3, #20]
          break;
 8008d3a:	e003      	b.n	8008d44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	623b      	str	r3, [r7, #32]
          break;
 8008d40:	e000      	b.n	8008d44 <HAL_GPIO_Init+0x130>
          break;
 8008d42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2bff      	cmp	r3, #255	; 0xff
 8008d48:	d801      	bhi.n	8008d4e <HAL_GPIO_Init+0x13a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	e001      	b.n	8008d52 <HAL_GPIO_Init+0x13e>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2bff      	cmp	r3, #255	; 0xff
 8008d58:	d802      	bhi.n	8008d60 <HAL_GPIO_Init+0x14c>
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	e002      	b.n	8008d66 <HAL_GPIO_Init+0x152>
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	3b08      	subs	r3, #8
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	210f      	movs	r1, #15
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	fa01 f303 	lsl.w	r3, r1, r3
 8008d74:	43db      	mvns	r3, r3
 8008d76:	401a      	ands	r2, r3
 8008d78:	6a39      	ldr	r1, [r7, #32]
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d80:	431a      	orrs	r2, r3
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 80c1 	beq.w	8008f16 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008d94:	4b49      	ldr	r3, [pc, #292]	; (8008ebc <HAL_GPIO_Init+0x2a8>)
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	4a48      	ldr	r2, [pc, #288]	; (8008ebc <HAL_GPIO_Init+0x2a8>)
 8008d9a:	f043 0301 	orr.w	r3, r3, #1
 8008d9e:	6193      	str	r3, [r2, #24]
 8008da0:	4b46      	ldr	r3, [pc, #280]	; (8008ebc <HAL_GPIO_Init+0x2a8>)
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	60bb      	str	r3, [r7, #8]
 8008daa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008dac:	4a44      	ldr	r2, [pc, #272]	; (8008ec0 <HAL_GPIO_Init+0x2ac>)
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	089b      	lsrs	r3, r3, #2
 8008db2:	3302      	adds	r3, #2
 8008db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008db8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	220f      	movs	r2, #15
 8008dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc8:	43db      	mvns	r3, r3
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a3c      	ldr	r2, [pc, #240]	; (8008ec4 <HAL_GPIO_Init+0x2b0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d01f      	beq.n	8008e18 <HAL_GPIO_Init+0x204>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a3b      	ldr	r2, [pc, #236]	; (8008ec8 <HAL_GPIO_Init+0x2b4>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d019      	beq.n	8008e14 <HAL_GPIO_Init+0x200>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a3a      	ldr	r2, [pc, #232]	; (8008ecc <HAL_GPIO_Init+0x2b8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d013      	beq.n	8008e10 <HAL_GPIO_Init+0x1fc>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a39      	ldr	r2, [pc, #228]	; (8008ed0 <HAL_GPIO_Init+0x2bc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00d      	beq.n	8008e0c <HAL_GPIO_Init+0x1f8>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a38      	ldr	r2, [pc, #224]	; (8008ed4 <HAL_GPIO_Init+0x2c0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d007      	beq.n	8008e08 <HAL_GPIO_Init+0x1f4>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a37      	ldr	r2, [pc, #220]	; (8008ed8 <HAL_GPIO_Init+0x2c4>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d101      	bne.n	8008e04 <HAL_GPIO_Init+0x1f0>
 8008e00:	2305      	movs	r3, #5
 8008e02:	e00a      	b.n	8008e1a <HAL_GPIO_Init+0x206>
 8008e04:	2306      	movs	r3, #6
 8008e06:	e008      	b.n	8008e1a <HAL_GPIO_Init+0x206>
 8008e08:	2304      	movs	r3, #4
 8008e0a:	e006      	b.n	8008e1a <HAL_GPIO_Init+0x206>
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e004      	b.n	8008e1a <HAL_GPIO_Init+0x206>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e002      	b.n	8008e1a <HAL_GPIO_Init+0x206>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e000      	b.n	8008e1a <HAL_GPIO_Init+0x206>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1c:	f002 0203 	and.w	r2, r2, #3
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	4093      	lsls	r3, r2
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008e2a:	4925      	ldr	r1, [pc, #148]	; (8008ec0 <HAL_GPIO_Init+0x2ac>)
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	089b      	lsrs	r3, r3, #2
 8008e30:	3302      	adds	r3, #2
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d006      	beq.n	8008e52 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008e44:	4b25      	ldr	r3, [pc, #148]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	4924      	ldr	r1, [pc, #144]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	608b      	str	r3, [r1, #8]
 8008e50:	e006      	b.n	8008e60 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008e52:	4b22      	ldr	r3, [pc, #136]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	43db      	mvns	r3, r3
 8008e5a:	4920      	ldr	r1, [pc, #128]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008e6c:	4b1b      	ldr	r3, [pc, #108]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e6e:	68da      	ldr	r2, [r3, #12]
 8008e70:	491a      	ldr	r1, [pc, #104]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60cb      	str	r3, [r1, #12]
 8008e78:	e006      	b.n	8008e88 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008e7a:	4b18      	ldr	r3, [pc, #96]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	43db      	mvns	r3, r3
 8008e82:	4916      	ldr	r1, [pc, #88]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e84:	4013      	ands	r3, r2
 8008e86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d025      	beq.n	8008ee0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008e94:	4b11      	ldr	r3, [pc, #68]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	4910      	ldr	r1, [pc, #64]	; (8008edc <HAL_GPIO_Init+0x2c8>)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	604b      	str	r3, [r1, #4]
 8008ea0:	e025      	b.n	8008eee <HAL_GPIO_Init+0x2da>
 8008ea2:	bf00      	nop
 8008ea4:	10320000 	.word	0x10320000
 8008ea8:	10310000 	.word	0x10310000
 8008eac:	10220000 	.word	0x10220000
 8008eb0:	10210000 	.word	0x10210000
 8008eb4:	10120000 	.word	0x10120000
 8008eb8:	10110000 	.word	0x10110000
 8008ebc:	40021000 	.word	0x40021000
 8008ec0:	40010000 	.word	0x40010000
 8008ec4:	40010800 	.word	0x40010800
 8008ec8:	40010c00 	.word	0x40010c00
 8008ecc:	40011000 	.word	0x40011000
 8008ed0:	40011400 	.word	0x40011400
 8008ed4:	40011800 	.word	0x40011800
 8008ed8:	40011c00 	.word	0x40011c00
 8008edc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008ee0:	4b15      	ldr	r3, [pc, #84]	; (8008f38 <HAL_GPIO_Init+0x324>)
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	43db      	mvns	r3, r3
 8008ee8:	4913      	ldr	r1, [pc, #76]	; (8008f38 <HAL_GPIO_Init+0x324>)
 8008eea:	4013      	ands	r3, r2
 8008eec:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d006      	beq.n	8008f08 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <HAL_GPIO_Init+0x324>)
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	490e      	ldr	r1, [pc, #56]	; (8008f38 <HAL_GPIO_Init+0x324>)
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	600b      	str	r3, [r1, #0]
 8008f06:	e006      	b.n	8008f16 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f08:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <HAL_GPIO_Init+0x324>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	43db      	mvns	r3, r3
 8008f10:	4909      	ldr	r1, [pc, #36]	; (8008f38 <HAL_GPIO_Init+0x324>)
 8008f12:	4013      	ands	r3, r2
 8008f14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	3301      	adds	r3, #1
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	fa22 f303 	lsr.w	r3, r2, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f47f ae7e 	bne.w	8008c28 <HAL_GPIO_Init+0x14>
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	372c      	adds	r7, #44	; 0x2c
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr
 8008f38:	40010400 	.word	0x40010400

08008f3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b089      	sub	sp, #36	; 0x24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008f4a:	e0a6      	b.n	800909a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	fa02 f303 	lsl.w	r3, r2, r3
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	4013      	ands	r3, r2
 8008f58:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8099 	beq.w	8009094 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008f62:	4a54      	ldr	r2, [pc, #336]	; (80090b4 <HAL_GPIO_DeInit+0x178>)
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	089b      	lsrs	r3, r3, #2
 8008f68:	3302      	adds	r3, #2
 8008f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	220f      	movs	r2, #15
 8008f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4013      	ands	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a4c      	ldr	r2, [pc, #304]	; (80090b8 <HAL_GPIO_DeInit+0x17c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d01f      	beq.n	8008fcc <HAL_GPIO_DeInit+0x90>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a4b      	ldr	r2, [pc, #300]	; (80090bc <HAL_GPIO_DeInit+0x180>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d019      	beq.n	8008fc8 <HAL_GPIO_DeInit+0x8c>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a4a      	ldr	r2, [pc, #296]	; (80090c0 <HAL_GPIO_DeInit+0x184>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d013      	beq.n	8008fc4 <HAL_GPIO_DeInit+0x88>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a49      	ldr	r2, [pc, #292]	; (80090c4 <HAL_GPIO_DeInit+0x188>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d00d      	beq.n	8008fc0 <HAL_GPIO_DeInit+0x84>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a48      	ldr	r2, [pc, #288]	; (80090c8 <HAL_GPIO_DeInit+0x18c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d007      	beq.n	8008fbc <HAL_GPIO_DeInit+0x80>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a47      	ldr	r2, [pc, #284]	; (80090cc <HAL_GPIO_DeInit+0x190>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d101      	bne.n	8008fb8 <HAL_GPIO_DeInit+0x7c>
 8008fb4:	2305      	movs	r3, #5
 8008fb6:	e00a      	b.n	8008fce <HAL_GPIO_DeInit+0x92>
 8008fb8:	2306      	movs	r3, #6
 8008fba:	e008      	b.n	8008fce <HAL_GPIO_DeInit+0x92>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	e006      	b.n	8008fce <HAL_GPIO_DeInit+0x92>
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e004      	b.n	8008fce <HAL_GPIO_DeInit+0x92>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e002      	b.n	8008fce <HAL_GPIO_DeInit+0x92>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e000      	b.n	8008fce <HAL_GPIO_DeInit+0x92>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	f002 0203 	and.w	r2, r2, #3
 8008fd4:	0092      	lsls	r2, r2, #2
 8008fd6:	4093      	lsls	r3, r2
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d132      	bne.n	8009044 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008fde:	4b3c      	ldr	r3, [pc, #240]	; (80090d0 <HAL_GPIO_DeInit+0x194>)
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	493a      	ldr	r1, [pc, #232]	; (80090d0 <HAL_GPIO_DeInit+0x194>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008fec:	4b38      	ldr	r3, [pc, #224]	; (80090d0 <HAL_GPIO_DeInit+0x194>)
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	43db      	mvns	r3, r3
 8008ff4:	4936      	ldr	r1, [pc, #216]	; (80090d0 <HAL_GPIO_DeInit+0x194>)
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008ffa:	4b35      	ldr	r3, [pc, #212]	; (80090d0 <HAL_GPIO_DeInit+0x194>)
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	43db      	mvns	r3, r3
 8009002:	4933      	ldr	r1, [pc, #204]	; (80090d0 <HAL_GPIO_DeInit+0x194>)
 8009004:	4013      	ands	r3, r2
 8009006:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009008:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <HAL_GPIO_DeInit+0x194>)
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	43db      	mvns	r3, r3
 8009010:	492f      	ldr	r1, [pc, #188]	; (80090d0 <HAL_GPIO_DeInit+0x194>)
 8009012:	4013      	ands	r3, r2
 8009014:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	220f      	movs	r2, #15
 8009020:	fa02 f303 	lsl.w	r3, r2, r3
 8009024:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009026:	4a23      	ldr	r2, [pc, #140]	; (80090b4 <HAL_GPIO_DeInit+0x178>)
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	089b      	lsrs	r3, r3, #2
 800902c:	3302      	adds	r3, #2
 800902e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	43da      	mvns	r2, r3
 8009036:	481f      	ldr	r0, [pc, #124]	; (80090b4 <HAL_GPIO_DeInit+0x178>)
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	089b      	lsrs	r3, r3, #2
 800903c:	400a      	ands	r2, r1
 800903e:	3302      	adds	r3, #2
 8009040:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	2bff      	cmp	r3, #255	; 0xff
 8009048:	d801      	bhi.n	800904e <HAL_GPIO_DeInit+0x112>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	e001      	b.n	8009052 <HAL_GPIO_DeInit+0x116>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3304      	adds	r3, #4
 8009052:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	2bff      	cmp	r3, #255	; 0xff
 8009058:	d802      	bhi.n	8009060 <HAL_GPIO_DeInit+0x124>
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	e002      	b.n	8009066 <HAL_GPIO_DeInit+0x12a>
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	3b08      	subs	r3, #8
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	210f      	movs	r1, #15
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	fa01 f303 	lsl.w	r3, r1, r3
 8009074:	43db      	mvns	r3, r3
 8009076:	401a      	ands	r2, r3
 8009078:	2104      	movs	r1, #4
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	fa01 f303 	lsl.w	r3, r1, r3
 8009080:	431a      	orrs	r2, r3
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	43db      	mvns	r3, r3
 800908e:	401a      	ands	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	3301      	adds	r3, #1
 8009098:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	fa22 f303 	lsr.w	r3, r2, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f47f af52 	bne.w	8008f4c <HAL_GPIO_DeInit+0x10>
  }
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	3724      	adds	r7, #36	; 0x24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bc80      	pop	{r7}
 80090b2:	4770      	bx	lr
 80090b4:	40010000 	.word	0x40010000
 80090b8:	40010800 	.word	0x40010800
 80090bc:	40010c00 	.word	0x40010c00
 80090c0:	40011000 	.word	0x40011000
 80090c4:	40011400 	.word	0x40011400
 80090c8:	40011800 	.word	0x40011800
 80090cc:	40011c00 	.word	0x40011c00
 80090d0:	40010400 	.word	0x40010400

080090d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	4013      	ands	r3, r2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090ec:	2301      	movs	r3, #1
 80090ee:	73fb      	strb	r3, [r7, #15]
 80090f0:	e001      	b.n	80090f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr

08009102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	807b      	strh	r3, [r7, #2]
 800910e:	4613      	mov	r3, r2
 8009110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009112:	787b      	ldrb	r3, [r7, #1]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009118:	887a      	ldrh	r2, [r7, #2]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800911e:	e003      	b.n	8009128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009120:	887b      	ldrh	r3, [r7, #2]
 8009122:	041a      	lsls	r2, r3, #16
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	611a      	str	r2, [r3, #16]
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr

08009132 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009132:	b480      	push	{r7}
 8009134:	b085      	sub	sp, #20
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	460b      	mov	r3, r1
 800913c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009144:	887a      	ldrh	r2, [r7, #2]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4013      	ands	r3, r2
 800914a:	041a      	lsls	r2, r3, #16
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	43d9      	mvns	r1, r3
 8009150:	887b      	ldrh	r3, [r7, #2]
 8009152:	400b      	ands	r3, r1
 8009154:	431a      	orrs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	611a      	str	r2, [r3, #16]
}
 800915a:	bf00      	nop
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	bc80      	pop	{r7}
 8009162:	4770      	bx	lr

08009164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e12b      	b.n	80093ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7fe fff8 	bl	8008180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2224      	movs	r2, #36	; 0x24
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0201 	bic.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80091c8:	f001 fdb8 	bl	800ad3c <HAL_RCC_GetPCLK1Freq>
 80091cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	4a81      	ldr	r2, [pc, #516]	; (80093d8 <HAL_I2C_Init+0x274>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d807      	bhi.n	80091e8 <HAL_I2C_Init+0x84>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4a80      	ldr	r2, [pc, #512]	; (80093dc <HAL_I2C_Init+0x278>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	bf94      	ite	ls
 80091e0:	2301      	movls	r3, #1
 80091e2:	2300      	movhi	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	e006      	b.n	80091f6 <HAL_I2C_Init+0x92>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4a7d      	ldr	r2, [pc, #500]	; (80093e0 <HAL_I2C_Init+0x27c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	bf94      	ite	ls
 80091f0:	2301      	movls	r3, #1
 80091f2:	2300      	movhi	r3, #0
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e0e7      	b.n	80093ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4a78      	ldr	r2, [pc, #480]	; (80093e4 <HAL_I2C_Init+0x280>)
 8009202:	fba2 2303 	umull	r2, r3, r2, r3
 8009206:	0c9b      	lsrs	r3, r3, #18
 8009208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	430a      	orrs	r2, r1
 800921c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	4a6a      	ldr	r2, [pc, #424]	; (80093d8 <HAL_I2C_Init+0x274>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d802      	bhi.n	8009238 <HAL_I2C_Init+0xd4>
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3301      	adds	r3, #1
 8009236:	e009      	b.n	800924c <HAL_I2C_Init+0xe8>
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800923e:	fb02 f303 	mul.w	r3, r2, r3
 8009242:	4a69      	ldr	r2, [pc, #420]	; (80093e8 <HAL_I2C_Init+0x284>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	099b      	lsrs	r3, r3, #6
 800924a:	3301      	adds	r3, #1
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6812      	ldr	r2, [r2, #0]
 8009250:	430b      	orrs	r3, r1
 8009252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800925e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	495c      	ldr	r1, [pc, #368]	; (80093d8 <HAL_I2C_Init+0x274>)
 8009268:	428b      	cmp	r3, r1
 800926a:	d819      	bhi.n	80092a0 <HAL_I2C_Init+0x13c>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	1e59      	subs	r1, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	fbb1 f3f3 	udiv	r3, r1, r3
 800927a:	1c59      	adds	r1, r3, #1
 800927c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009280:	400b      	ands	r3, r1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <HAL_I2C_Init+0x138>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	1e59      	subs	r1, r3, #1
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	fbb1 f3f3 	udiv	r3, r1, r3
 8009294:	3301      	adds	r3, #1
 8009296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800929a:	e051      	b.n	8009340 <HAL_I2C_Init+0x1dc>
 800929c:	2304      	movs	r3, #4
 800929e:	e04f      	b.n	8009340 <HAL_I2C_Init+0x1dc>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d111      	bne.n	80092cc <HAL_I2C_Init+0x168>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	1e58      	subs	r0, r3, #1
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6859      	ldr	r1, [r3, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	440b      	add	r3, r1
 80092b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80092ba:	3301      	adds	r3, #1
 80092bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bf0c      	ite	eq
 80092c4:	2301      	moveq	r3, #1
 80092c6:	2300      	movne	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	e012      	b.n	80092f2 <HAL_I2C_Init+0x18e>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	1e58      	subs	r0, r3, #1
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6859      	ldr	r1, [r3, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	0099      	lsls	r1, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	fbb0 f3f3 	udiv	r3, r0, r3
 80092e2:	3301      	adds	r3, #1
 80092e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	bf0c      	ite	eq
 80092ec:	2301      	moveq	r3, #1
 80092ee:	2300      	movne	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <HAL_I2C_Init+0x196>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e022      	b.n	8009340 <HAL_I2C_Init+0x1dc>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10e      	bne.n	8009320 <HAL_I2C_Init+0x1bc>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	1e58      	subs	r0, r3, #1
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6859      	ldr	r1, [r3, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	440b      	add	r3, r1
 8009310:	fbb0 f3f3 	udiv	r3, r0, r3
 8009314:	3301      	adds	r3, #1
 8009316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800931a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800931e:	e00f      	b.n	8009340 <HAL_I2C_Init+0x1dc>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	1e58      	subs	r0, r3, #1
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6859      	ldr	r1, [r3, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	440b      	add	r3, r1
 800932e:	0099      	lsls	r1, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	fbb0 f3f3 	udiv	r3, r0, r3
 8009336:	3301      	adds	r3, #1
 8009338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800933c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	6809      	ldr	r1, [r1, #0]
 8009344:	4313      	orrs	r3, r2
 8009346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69da      	ldr	r2, [r3, #28]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	431a      	orrs	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800936e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6911      	ldr	r1, [r2, #16]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	68d2      	ldr	r2, [r2, #12]
 800937a:	4311      	orrs	r1, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	430b      	orrs	r3, r1
 8009382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	695a      	ldr	r2, [r3, #20]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	431a      	orrs	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0201 	orr.w	r2, r2, #1
 80093ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	000186a0 	.word	0x000186a0
 80093dc:	001e847f 	.word	0x001e847f
 80093e0:	003d08ff 	.word	0x003d08ff
 80093e4:	431bde83 	.word	0x431bde83
 80093e8:	10624dd3 	.word	0x10624dd3

080093ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e021      	b.n	8009442 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2224      	movs	r2, #36	; 0x24
 8009402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0201 	bic.w	r2, r2, #1
 8009414:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7fe fef0 	bl	80081fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af02      	add	r7, sp, #8
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	607a      	str	r2, [r7, #4]
 8009456:	461a      	mov	r2, r3
 8009458:	460b      	mov	r3, r1
 800945a:	817b      	strh	r3, [r7, #10]
 800945c:	4613      	mov	r3, r2
 800945e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009460:	f7ff f85e 	bl	8008520 <HAL_GetTick>
 8009464:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b20      	cmp	r3, #32
 8009470:	f040 80e0 	bne.w	8009634 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2319      	movs	r3, #25
 800947a:	2201      	movs	r2, #1
 800947c:	4970      	ldr	r1, [pc, #448]	; (8009640 <HAL_I2C_Master_Transmit+0x1f4>)
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fe5c 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800948a:	2302      	movs	r3, #2
 800948c:	e0d3      	b.n	8009636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009494:	2b01      	cmp	r3, #1
 8009496:	d101      	bne.n	800949c <HAL_I2C_Master_Transmit+0x50>
 8009498:	2302      	movs	r3, #2
 800949a:	e0cc      	b.n	8009636 <HAL_I2C_Master_Transmit+0x1ea>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d007      	beq.n	80094c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0201 	orr.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2221      	movs	r2, #33	; 0x21
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2210      	movs	r2, #16
 80094de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	893a      	ldrh	r2, [r7, #8]
 80094f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4a50      	ldr	r2, [pc, #320]	; (8009644 <HAL_I2C_Master_Transmit+0x1f8>)
 8009502:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009504:	8979      	ldrh	r1, [r7, #10]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	6a3a      	ldr	r2, [r7, #32]
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fc16 	bl	8009d3c <I2C_MasterRequestWrite>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e08d      	b.n	8009636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800951a:	2300      	movs	r3, #0
 800951c:	613b      	str	r3, [r7, #16]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	613b      	str	r3, [r7, #16]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009530:	e066      	b.n	8009600 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	6a39      	ldr	r1, [r7, #32]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 ff1a 	bl	800a370 <I2C_WaitOnTXEFlagUntilTimeout>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00d      	beq.n	800955e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	2b04      	cmp	r3, #4
 8009548:	d107      	bne.n	800955a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009558:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e06b      	b.n	8009636 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	781a      	ldrb	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b04      	cmp	r3, #4
 800959a:	d11b      	bne.n	80095d4 <HAL_I2C_Master_Transmit+0x188>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d017      	beq.n	80095d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	781a      	ldrb	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095be:	b29b      	uxth	r3, r3
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095cc:	3b01      	subs	r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	6a39      	ldr	r1, [r7, #32]
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 ff11 	bl	800a400 <I2C_WaitOnBTFFlagUntilTimeout>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00d      	beq.n	8009600 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d107      	bne.n	80095fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e01a      	b.n	8009636 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009604:	2b00      	cmp	r3, #0
 8009606:	d194      	bne.n	8009532 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	e000      	b.n	8009636 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009634:	2302      	movs	r3, #2
  }
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	00100002 	.word	0x00100002
 8009644:	ffff0000 	.word	0xffff0000

08009648 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	4608      	mov	r0, r1
 8009652:	4611      	mov	r1, r2
 8009654:	461a      	mov	r2, r3
 8009656:	4603      	mov	r3, r0
 8009658:	817b      	strh	r3, [r7, #10]
 800965a:	460b      	mov	r3, r1
 800965c:	813b      	strh	r3, [r7, #8]
 800965e:	4613      	mov	r3, r2
 8009660:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009662:	f7fe ff5d 	bl	8008520 <HAL_GetTick>
 8009666:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b20      	cmp	r3, #32
 8009672:	f040 80d9 	bne.w	8009828 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	2319      	movs	r3, #25
 800967c:	2201      	movs	r2, #1
 800967e:	496d      	ldr	r1, [pc, #436]	; (8009834 <HAL_I2C_Mem_Write+0x1ec>)
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 fd5b 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800968c:	2302      	movs	r3, #2
 800968e:	e0cc      	b.n	800982a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009696:	2b01      	cmp	r3, #1
 8009698:	d101      	bne.n	800969e <HAL_I2C_Mem_Write+0x56>
 800969a:	2302      	movs	r3, #2
 800969c:	e0c5      	b.n	800982a <HAL_I2C_Mem_Write+0x1e2>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d007      	beq.n	80096c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0201 	orr.w	r2, r2, #1
 80096c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2221      	movs	r2, #33	; 0x21
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2240      	movs	r2, #64	; 0x40
 80096e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6a3a      	ldr	r2, [r7, #32]
 80096ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4a4d      	ldr	r2, [pc, #308]	; (8009838 <HAL_I2C_Mem_Write+0x1f0>)
 8009704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009706:	88f8      	ldrh	r0, [r7, #6]
 8009708:	893a      	ldrh	r2, [r7, #8]
 800970a:	8979      	ldrh	r1, [r7, #10]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	4603      	mov	r3, r0
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 fb92 	bl	8009e40 <I2C_RequestMemoryWrite>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d052      	beq.n	80097c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e081      	b.n	800982a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 fe20 	bl	800a370 <I2C_WaitOnTXEFlagUntilTimeout>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00d      	beq.n	8009752 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	2b04      	cmp	r3, #4
 800973c:	d107      	bne.n	800974e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800974c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e06b      	b.n	800982a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	781a      	ldrb	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800976c:	3b01      	subs	r3, #1
 800976e:	b29a      	uxth	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b04      	cmp	r3, #4
 800978e:	d11b      	bne.n	80097c8 <HAL_I2C_Mem_Write+0x180>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009794:	2b00      	cmp	r3, #0
 8009796:	d017      	beq.n	80097c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097be:	b29b      	uxth	r3, r3
 80097c0:	3b01      	subs	r3, #1
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1aa      	bne.n	8009726 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 fe13 	bl	800a400 <I2C_WaitOnBTFFlagUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00d      	beq.n	80097fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d107      	bne.n	80097f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e016      	b.n	800982a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800980a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	e000      	b.n	800982a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009828:	2302      	movs	r3, #2
  }
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	00100002 	.word	0x00100002
 8009838:	ffff0000 	.word	0xffff0000

0800983c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08c      	sub	sp, #48	; 0x30
 8009840:	af02      	add	r7, sp, #8
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	4608      	mov	r0, r1
 8009846:	4611      	mov	r1, r2
 8009848:	461a      	mov	r2, r3
 800984a:	4603      	mov	r3, r0
 800984c:	817b      	strh	r3, [r7, #10]
 800984e:	460b      	mov	r3, r1
 8009850:	813b      	strh	r3, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800985a:	f7fe fe61 	bl	8008520 <HAL_GetTick>
 800985e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b20      	cmp	r3, #32
 800986a:	f040 8244 	bne.w	8009cf6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	2319      	movs	r3, #25
 8009874:	2201      	movs	r2, #1
 8009876:	4982      	ldr	r1, [pc, #520]	; (8009a80 <HAL_I2C_Mem_Read+0x244>)
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 fc5f 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009884:	2302      	movs	r3, #2
 8009886:	e237      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800988e:	2b01      	cmp	r3, #1
 8009890:	d101      	bne.n	8009896 <HAL_I2C_Mem_Read+0x5a>
 8009892:	2302      	movs	r3, #2
 8009894:	e230      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d007      	beq.n	80098bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f042 0201 	orr.w	r2, r2, #1
 80098ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2222      	movs	r2, #34	; 0x22
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2240      	movs	r2, #64	; 0x40
 80098d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80098ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4a62      	ldr	r2, [pc, #392]	; (8009a84 <HAL_I2C_Mem_Read+0x248>)
 80098fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098fe:	88f8      	ldrh	r0, [r7, #6]
 8009900:	893a      	ldrh	r2, [r7, #8]
 8009902:	8979      	ldrh	r1, [r7, #10]
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	4603      	mov	r3, r0
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 fb2c 	bl	8009f6c <I2C_RequestMemoryRead>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e1ec      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009922:	2b00      	cmp	r3, #0
 8009924:	d113      	bne.n	800994e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009926:	2300      	movs	r3, #0
 8009928:	61fb      	str	r3, [r7, #28]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	61fb      	str	r3, [r7, #28]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	61fb      	str	r3, [r7, #28]
 800993a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	e1c0      	b.n	8009cd0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009952:	2b01      	cmp	r3, #1
 8009954:	d11e      	bne.n	8009994 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009964:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009966:	b672      	cpsid	i
}
 8009968:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800996a:	2300      	movs	r3, #0
 800996c:	61bb      	str	r3, [r7, #24]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	61bb      	str	r3, [r7, #24]
 800997e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800998e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009990:	b662      	cpsie	i
}
 8009992:	e035      	b.n	8009a00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009998:	2b02      	cmp	r3, #2
 800999a:	d11e      	bne.n	80099da <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099ac:	b672      	cpsid	i
}
 80099ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80099d6:	b662      	cpsie	i
}
 80099d8:	e012      	b.n	8009a00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099e8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	613b      	str	r3, [r7, #16]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	613b      	str	r3, [r7, #16]
 80099fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009a00:	e166      	b.n	8009cd0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	f200 811f 	bhi.w	8009c4a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d123      	bne.n	8009a5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 fd39 	bl	800a490 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e167      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	691a      	ldr	r2, [r3, #16]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a44:	3b01      	subs	r3, #1
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a5a:	e139      	b.n	8009cd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d152      	bne.n	8009b0a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	4906      	ldr	r1, [pc, #24]	; (8009a88 <HAL_I2C_Mem_Read+0x24c>)
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fb64 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d008      	beq.n	8009a8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e13c      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
 8009a7e:	bf00      	nop
 8009a80:	00100002 	.word	0x00100002
 8009a84:	ffff0000 	.word	0xffff0000
 8009a88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009a8c:	b672      	cpsid	i
}
 8009a8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691a      	ldr	r2, [r3, #16]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	1c5a      	adds	r2, r3, #1
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abc:	3b01      	subs	r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009ad2:	b662      	cpsie	i
}
 8009ad4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af2:	3b01      	subs	r3, #1
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b08:	e0e2      	b.n	8009cd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b10:	2200      	movs	r2, #0
 8009b12:	497b      	ldr	r1, [pc, #492]	; (8009d00 <HAL_I2C_Mem_Read+0x4c4>)
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fb11 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e0e9      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b34:	b672      	cpsid	i
}
 8009b36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	691a      	ldr	r2, [r3, #16]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	b2d2      	uxtb	r2, r2
 8009b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b54:	3b01      	subs	r3, #1
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b6a:	4b66      	ldr	r3, [pc, #408]	; (8009d04 <HAL_I2C_Mem_Read+0x4c8>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	08db      	lsrs	r3, r3, #3
 8009b70:	4a65      	ldr	r2, [pc, #404]	; (8009d08 <HAL_I2C_Mem_Read+0x4cc>)
 8009b72:	fba2 2303 	umull	r2, r3, r2, r3
 8009b76:	0a1a      	lsrs	r2, r3, #8
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	00da      	lsls	r2, r3, #3
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d118      	bne.n	8009bc2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	f043 0220 	orr.w	r2, r3, #32
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009bb2:	b662      	cpsie	i
}
 8009bb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e09a      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d1d9      	bne.n	8009b84 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c12:	b662      	cpsie	i
}
 8009c14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691a      	ldr	r2, [r3, #16]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	b2d2      	uxtb	r2, r2
 8009c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c32:	3b01      	subs	r3, #1
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c48:	e042      	b.n	8009cd0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 fc1e 	bl	800a490 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e04c      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	b2d2      	uxtb	r2, r2
 8009c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d118      	bne.n	8009cd0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f47f ae94 	bne.w	8009a02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e000      	b.n	8009cf8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009cf6:	2302      	movs	r3, #2
  }
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3728      	adds	r7, #40	; 0x28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	00010004 	.word	0x00010004
 8009d04:	200000b4 	.word	0x200000b4
 8009d08:	14f8b589 	.word	0x14f8b589

08009d0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d1a:	b2db      	uxtb	r3, r3
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bc80      	pop	{r7}
 8009d24:	4770      	bx	lr

08009d26 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bc80      	pop	{r7}
 8009d3a:	4770      	bx	lr

08009d3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d006      	beq.n	8009d66 <I2C_MasterRequestWrite+0x2a>
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d003      	beq.n	8009d66 <I2C_MasterRequestWrite+0x2a>
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d64:	d108      	bne.n	8009d78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	e00b      	b.n	8009d90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7c:	2b12      	cmp	r3, #18
 8009d7e:	d107      	bne.n	8009d90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f9cd 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00d      	beq.n	8009dc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009db6:	d103      	bne.n	8009dc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e035      	b.n	8009e30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dcc:	d108      	bne.n	8009de0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009dce:	897b      	ldrh	r3, [r7, #10]
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ddc:	611a      	str	r2, [r3, #16]
 8009dde:	e01b      	b.n	8009e18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009de0:	897b      	ldrh	r3, [r7, #10]
 8009de2:	11db      	asrs	r3, r3, #7
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f003 0306 	and.w	r3, r3, #6
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	f063 030f 	orn	r3, r3, #15
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	490e      	ldr	r1, [pc, #56]	; (8009e38 <I2C_MasterRequestWrite+0xfc>)
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 fa16 	bl	800a230 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e010      	b.n	8009e30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009e0e:	897b      	ldrh	r3, [r7, #10]
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	4907      	ldr	r1, [pc, #28]	; (8009e3c <I2C_MasterRequestWrite+0x100>)
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f000 fa06 	bl	800a230 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e000      	b.n	8009e30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	00010008 	.word	0x00010008
 8009e3c:	00010002 	.word	0x00010002

08009e40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af02      	add	r7, sp, #8
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	4603      	mov	r3, r0
 8009e50:	817b      	strh	r3, [r7, #10]
 8009e52:	460b      	mov	r3, r1
 8009e54:	813b      	strh	r3, [r7, #8]
 8009e56:	4613      	mov	r3, r2
 8009e58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 f960 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00d      	beq.n	8009e9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e90:	d103      	bne.n	8009e9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e05f      	b.n	8009f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e9e:	897b      	ldrh	r3, [r7, #10]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	6a3a      	ldr	r2, [r7, #32]
 8009eb2:	492d      	ldr	r1, [pc, #180]	; (8009f68 <I2C_RequestMemoryWrite+0x128>)
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 f9bb 	bl	800a230 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e04c      	b.n	8009f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	617b      	str	r3, [r7, #20]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009edc:	6a39      	ldr	r1, [r7, #32]
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 fa46 	bl	800a370 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00d      	beq.n	8009f06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d107      	bne.n	8009f02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e02b      	b.n	8009f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d105      	bne.n	8009f18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f0c:	893b      	ldrh	r3, [r7, #8]
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	611a      	str	r2, [r3, #16]
 8009f16:	e021      	b.n	8009f5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f18:	893b      	ldrh	r3, [r7, #8]
 8009f1a:	0a1b      	lsrs	r3, r3, #8
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f28:	6a39      	ldr	r1, [r7, #32]
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 fa20 	bl	800a370 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00d      	beq.n	8009f52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	2b04      	cmp	r3, #4
 8009f3c:	d107      	bne.n	8009f4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e005      	b.n	8009f5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f52:	893b      	ldrh	r3, [r7, #8]
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	00010002 	.word	0x00010002

08009f6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	4608      	mov	r0, r1
 8009f76:	4611      	mov	r1, r2
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	817b      	strh	r3, [r7, #10]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	813b      	strh	r3, [r7, #8]
 8009f82:	4613      	mov	r3, r2
 8009f84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 f8c2 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00d      	beq.n	8009fda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fcc:	d103      	bne.n	8009fd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e0aa      	b.n	800a130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fda:	897b      	ldrh	r3, [r7, #10]
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	6a3a      	ldr	r2, [r7, #32]
 8009fee:	4952      	ldr	r1, [pc, #328]	; (800a138 <I2C_RequestMemoryRead+0x1cc>)
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f91d 	bl	800a230 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e097      	b.n	800a130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	617b      	str	r3, [r7, #20]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a018:	6a39      	ldr	r1, [r7, #32]
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 f9a8 	bl	800a370 <I2C_WaitOnTXEFlagUntilTimeout>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00d      	beq.n	800a042 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d107      	bne.n	800a03e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a03c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e076      	b.n	800a130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d105      	bne.n	800a054 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a048:	893b      	ldrh	r3, [r7, #8]
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	611a      	str	r2, [r3, #16]
 800a052:	e021      	b.n	800a098 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a054:	893b      	ldrh	r3, [r7, #8]
 800a056:	0a1b      	lsrs	r3, r3, #8
 800a058:	b29b      	uxth	r3, r3
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a064:	6a39      	ldr	r1, [r7, #32]
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 f982 	bl	800a370 <I2C_WaitOnTXEFlagUntilTimeout>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00d      	beq.n	800a08e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a076:	2b04      	cmp	r3, #4
 800a078:	d107      	bne.n	800a08a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e050      	b.n	800a130 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a08e:	893b      	ldrh	r3, [r7, #8]
 800a090:	b2da      	uxtb	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09a:	6a39      	ldr	r1, [r7, #32]
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f967 	bl	800a370 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00d      	beq.n	800a0c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d107      	bne.n	800a0c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e035      	b.n	800a130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f82b 	bl	800a13c <I2C_WaitOnFlagUntilTimeout>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00d      	beq.n	800a108 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fa:	d103      	bne.n	800a104 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a102:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e013      	b.n	800a130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a108:	897b      	ldrh	r3, [r7, #10]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	f043 0301 	orr.w	r3, r3, #1
 800a110:	b2da      	uxtb	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	6a3a      	ldr	r2, [r7, #32]
 800a11c:	4906      	ldr	r1, [pc, #24]	; (800a138 <I2C_RequestMemoryRead+0x1cc>)
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 f886 	bl	800a230 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	00010002 	.word	0x00010002

0800a13c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	603b      	str	r3, [r7, #0]
 800a148:	4613      	mov	r3, r2
 800a14a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a14c:	e048      	b.n	800a1e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a154:	d044      	beq.n	800a1e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a156:	f7fe f9e3 	bl	8008520 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	429a      	cmp	r2, r3
 800a164:	d302      	bcc.n	800a16c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d139      	bne.n	800a1e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	0c1b      	lsrs	r3, r3, #16
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b01      	cmp	r3, #1
 800a174:	d10d      	bne.n	800a192 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	43da      	mvns	r2, r3
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4013      	ands	r3, r2
 800a182:	b29b      	uxth	r3, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	bf0c      	ite	eq
 800a188:	2301      	moveq	r3, #1
 800a18a:	2300      	movne	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	461a      	mov	r2, r3
 800a190:	e00c      	b.n	800a1ac <I2C_WaitOnFlagUntilTimeout+0x70>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	43da      	mvns	r2, r3
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	4013      	ands	r3, r2
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bf0c      	ite	eq
 800a1a4:	2301      	moveq	r3, #1
 800a1a6:	2300      	movne	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d116      	bne.n	800a1e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1cc:	f043 0220 	orr.w	r2, r3, #32
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e023      	b.n	800a228 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	0c1b      	lsrs	r3, r3, #16
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d10d      	bne.n	800a206 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	43da      	mvns	r2, r3
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	bf0c      	ite	eq
 800a1fc:	2301      	moveq	r3, #1
 800a1fe:	2300      	movne	r3, #0
 800a200:	b2db      	uxtb	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	e00c      	b.n	800a220 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	43da      	mvns	r2, r3
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4013      	ands	r3, r2
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	bf0c      	ite	eq
 800a218:	2301      	moveq	r3, #1
 800a21a:	2300      	movne	r3, #0
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	461a      	mov	r2, r3
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	429a      	cmp	r2, r3
 800a224:	d093      	beq.n	800a14e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a23e:	e071      	b.n	800a324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a24a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a24e:	d123      	bne.n	800a298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a25e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a268:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a284:	f043 0204 	orr.w	r2, r3, #4
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e067      	b.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a29e:	d041      	beq.n	800a324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2a0:	f7fe f93e 	bl	8008520 <HAL_GetTick>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d302      	bcc.n	800a2b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d136      	bne.n	800a324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	0c1b      	lsrs	r3, r3, #16
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d10c      	bne.n	800a2da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	43da      	mvns	r2, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	bf14      	ite	ne
 800a2d2:	2301      	movne	r3, #1
 800a2d4:	2300      	moveq	r3, #0
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	e00b      	b.n	800a2f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	43da      	mvns	r2, r3
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bf14      	ite	ne
 800a2ec:	2301      	movne	r3, #1
 800a2ee:	2300      	moveq	r3, #0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d016      	beq.n	800a324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a310:	f043 0220 	orr.w	r2, r3, #32
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e021      	b.n	800a368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	0c1b      	lsrs	r3, r3, #16
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d10c      	bne.n	800a348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	43da      	mvns	r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	4013      	ands	r3, r2
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	bf14      	ite	ne
 800a340:	2301      	movne	r3, #1
 800a342:	2300      	moveq	r3, #0
 800a344:	b2db      	uxtb	r3, r3
 800a346:	e00b      	b.n	800a360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	43da      	mvns	r2, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	4013      	ands	r3, r2
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	bf14      	ite	ne
 800a35a:	2301      	movne	r3, #1
 800a35c:	2300      	moveq	r3, #0
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47f af6d 	bne.w	800a240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a37c:	e034      	b.n	800a3e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 f8e3 	bl	800a54a <I2C_IsAcknowledgeFailed>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e034      	b.n	800a3f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a394:	d028      	beq.n	800a3e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a396:	f7fe f8c3 	bl	8008520 <HAL_GetTick>
 800a39a:	4602      	mov	r2, r0
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d302      	bcc.n	800a3ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d11d      	bne.n	800a3e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b6:	2b80      	cmp	r3, #128	; 0x80
 800a3b8:	d016      	beq.n	800a3e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	f043 0220 	orr.w	r2, r3, #32
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e007      	b.n	800a3f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f2:	2b80      	cmp	r3, #128	; 0x80
 800a3f4:	d1c3      	bne.n	800a37e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a40c:	e034      	b.n	800a478 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 f89b 	bl	800a54a <I2C_IsAcknowledgeFailed>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e034      	b.n	800a488 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a424:	d028      	beq.n	800a478 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a426:	f7fe f87b 	bl	8008520 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	429a      	cmp	r2, r3
 800a434:	d302      	bcc.n	800a43c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d11d      	bne.n	800a478 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b04      	cmp	r3, #4
 800a448:	d016      	beq.n	800a478 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2220      	movs	r2, #32
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a464:	f043 0220 	orr.w	r2, r3, #32
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e007      	b.n	800a488 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	f003 0304 	and.w	r3, r3, #4
 800a482:	2b04      	cmp	r3, #4
 800a484:	d1c3      	bne.n	800a40e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a49c:	e049      	b.n	800a532 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	f003 0310 	and.w	r3, r3, #16
 800a4a8:	2b10      	cmp	r3, #16
 800a4aa:	d119      	bne.n	800a4e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f06f 0210 	mvn.w	r2, #16
 800a4b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e030      	b.n	800a542 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4e0:	f7fe f81e 	bl	8008520 <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d302      	bcc.n	800a4f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d11d      	bne.n	800a532 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a500:	2b40      	cmp	r3, #64	; 0x40
 800a502:	d016      	beq.n	800a532 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2220      	movs	r2, #32
 800a50e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	f043 0220 	orr.w	r2, r3, #32
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e007      	b.n	800a542 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53c:	2b40      	cmp	r3, #64	; 0x40
 800a53e:	d1ae      	bne.n	800a49e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	695b      	ldr	r3, [r3, #20]
 800a558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a55c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a560:	d11b      	bne.n	800a59a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a56a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	f043 0204 	orr.w	r2, r3, #4
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e000      	b.n	800a59c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bc80      	pop	{r7}
 800a5a4:	4770      	bx	lr
	...

0800a5a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e272      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 8087 	beq.w	800a6d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5c8:	4b92      	ldr	r3, [pc, #584]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f003 030c 	and.w	r3, r3, #12
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d00c      	beq.n	800a5ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a5d4:	4b8f      	ldr	r3, [pc, #572]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	f003 030c 	and.w	r3, r3, #12
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d112      	bne.n	800a606 <HAL_RCC_OscConfig+0x5e>
 800a5e0:	4b8c      	ldr	r3, [pc, #560]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ec:	d10b      	bne.n	800a606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5ee:	4b89      	ldr	r3, [pc, #548]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d06c      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x12c>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d168      	bne.n	800a6d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e24c      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a60e:	d106      	bne.n	800a61e <HAL_RCC_OscConfig+0x76>
 800a610:	4b80      	ldr	r3, [pc, #512]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a7f      	ldr	r2, [pc, #508]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	e02e      	b.n	800a67c <HAL_RCC_OscConfig+0xd4>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10c      	bne.n	800a640 <HAL_RCC_OscConfig+0x98>
 800a626:	4b7b      	ldr	r3, [pc, #492]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a7a      	ldr	r2, [pc, #488]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a62c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a630:	6013      	str	r3, [r2, #0]
 800a632:	4b78      	ldr	r3, [pc, #480]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a77      	ldr	r2, [pc, #476]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	e01d      	b.n	800a67c <HAL_RCC_OscConfig+0xd4>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a648:	d10c      	bne.n	800a664 <HAL_RCC_OscConfig+0xbc>
 800a64a:	4b72      	ldr	r3, [pc, #456]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a71      	ldr	r2, [pc, #452]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	4b6f      	ldr	r3, [pc, #444]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a6e      	ldr	r2, [pc, #440]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a65c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	e00b      	b.n	800a67c <HAL_RCC_OscConfig+0xd4>
 800a664:	4b6b      	ldr	r3, [pc, #428]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a6a      	ldr	r2, [pc, #424]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a66a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	4b68      	ldr	r3, [pc, #416]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a67      	ldr	r2, [pc, #412]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a67a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d013      	beq.n	800a6ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a684:	f7fd ff4c 	bl	8008520 <HAL_GetTick>
 800a688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a68a:	e008      	b.n	800a69e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a68c:	f7fd ff48 	bl	8008520 <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	2b64      	cmp	r3, #100	; 0x64
 800a698:	d901      	bls.n	800a69e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e200      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a69e:	4b5d      	ldr	r3, [pc, #372]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d0f0      	beq.n	800a68c <HAL_RCC_OscConfig+0xe4>
 800a6aa:	e014      	b.n	800a6d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6ac:	f7fd ff38 	bl	8008520 <HAL_GetTick>
 800a6b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6b2:	e008      	b.n	800a6c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6b4:	f7fd ff34 	bl	8008520 <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	2b64      	cmp	r3, #100	; 0x64
 800a6c0:	d901      	bls.n	800a6c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e1ec      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6c6:	4b53      	ldr	r3, [pc, #332]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1f0      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x10c>
 800a6d2:	e000      	b.n	800a6d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d063      	beq.n	800a7aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a6e2:	4b4c      	ldr	r3, [pc, #304]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f003 030c 	and.w	r3, r3, #12
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00b      	beq.n	800a706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a6ee:	4b49      	ldr	r3, [pc, #292]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	f003 030c 	and.w	r3, r3, #12
 800a6f6:	2b08      	cmp	r3, #8
 800a6f8:	d11c      	bne.n	800a734 <HAL_RCC_OscConfig+0x18c>
 800a6fa:	4b46      	ldr	r3, [pc, #280]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d116      	bne.n	800a734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a706:	4b43      	ldr	r3, [pc, #268]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d005      	beq.n	800a71e <HAL_RCC_OscConfig+0x176>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d001      	beq.n	800a71e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e1c0      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a71e:	4b3d      	ldr	r3, [pc, #244]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	4939      	ldr	r1, [pc, #228]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a732:	e03a      	b.n	800a7aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d020      	beq.n	800a77e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a73c:	4b36      	ldr	r3, [pc, #216]	; (800a818 <HAL_RCC_OscConfig+0x270>)
 800a73e:	2201      	movs	r2, #1
 800a740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a742:	f7fd feed 	bl	8008520 <HAL_GetTick>
 800a746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a748:	e008      	b.n	800a75c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a74a:	f7fd fee9 	bl	8008520 <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	2b02      	cmp	r3, #2
 800a756:	d901      	bls.n	800a75c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e1a1      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a75c:	4b2d      	ldr	r3, [pc, #180]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0302 	and.w	r3, r3, #2
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0f0      	beq.n	800a74a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a768:	4b2a      	ldr	r3, [pc, #168]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	00db      	lsls	r3, r3, #3
 800a776:	4927      	ldr	r1, [pc, #156]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a778:	4313      	orrs	r3, r2
 800a77a:	600b      	str	r3, [r1, #0]
 800a77c:	e015      	b.n	800a7aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a77e:	4b26      	ldr	r3, [pc, #152]	; (800a818 <HAL_RCC_OscConfig+0x270>)
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a784:	f7fd fecc 	bl	8008520 <HAL_GetTick>
 800a788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a78a:	e008      	b.n	800a79e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a78c:	f7fd fec8 	bl	8008520 <HAL_GetTick>
 800a790:	4602      	mov	r2, r0
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	2b02      	cmp	r3, #2
 800a798:	d901      	bls.n	800a79e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e180      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a79e:	4b1d      	ldr	r3, [pc, #116]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0302 	and.w	r3, r3, #2
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1f0      	bne.n	800a78c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0308 	and.w	r3, r3, #8
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d03a      	beq.n	800a82c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d019      	beq.n	800a7f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7be:	4b17      	ldr	r3, [pc, #92]	; (800a81c <HAL_RCC_OscConfig+0x274>)
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7c4:	f7fd feac 	bl	8008520 <HAL_GetTick>
 800a7c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7ca:	e008      	b.n	800a7de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7cc:	f7fd fea8 	bl	8008520 <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e160      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7de:	4b0d      	ldr	r3, [pc, #52]	; (800a814 <HAL_RCC_OscConfig+0x26c>)
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e2:	f003 0302 	and.w	r3, r3, #2
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0f0      	beq.n	800a7cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	f000 face 	bl	800ad8c <RCC_Delay>
 800a7f0:	e01c      	b.n	800a82c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a7f2:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <HAL_RCC_OscConfig+0x274>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7f8:	f7fd fe92 	bl	8008520 <HAL_GetTick>
 800a7fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7fe:	e00f      	b.n	800a820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a800:	f7fd fe8e 	bl	8008520 <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d908      	bls.n	800a820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e146      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
 800a812:	bf00      	nop
 800a814:	40021000 	.word	0x40021000
 800a818:	42420000 	.word	0x42420000
 800a81c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a820:	4b92      	ldr	r3, [pc, #584]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e9      	bne.n	800a800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0304 	and.w	r3, r3, #4
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80a6 	beq.w	800a986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a83e:	4b8b      	ldr	r3, [pc, #556]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10d      	bne.n	800a866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a84a:	4b88      	ldr	r3, [pc, #544]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	4a87      	ldr	r2, [pc, #540]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a854:	61d3      	str	r3, [r2, #28]
 800a856:	4b85      	ldr	r3, [pc, #532]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a85e:	60bb      	str	r3, [r7, #8]
 800a860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a862:	2301      	movs	r3, #1
 800a864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a866:	4b82      	ldr	r3, [pc, #520]	; (800aa70 <HAL_RCC_OscConfig+0x4c8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d118      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a872:	4b7f      	ldr	r3, [pc, #508]	; (800aa70 <HAL_RCC_OscConfig+0x4c8>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a7e      	ldr	r2, [pc, #504]	; (800aa70 <HAL_RCC_OscConfig+0x4c8>)
 800a878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a87c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a87e:	f7fd fe4f 	bl	8008520 <HAL_GetTick>
 800a882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a884:	e008      	b.n	800a898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a886:	f7fd fe4b 	bl	8008520 <HAL_GetTick>
 800a88a:	4602      	mov	r2, r0
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	2b64      	cmp	r3, #100	; 0x64
 800a892:	d901      	bls.n	800a898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a894:	2303      	movs	r3, #3
 800a896:	e103      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a898:	4b75      	ldr	r3, [pc, #468]	; (800aa70 <HAL_RCC_OscConfig+0x4c8>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0f0      	beq.n	800a886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d106      	bne.n	800a8ba <HAL_RCC_OscConfig+0x312>
 800a8ac:	4b6f      	ldr	r3, [pc, #444]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	4a6e      	ldr	r2, [pc, #440]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8b2:	f043 0301 	orr.w	r3, r3, #1
 800a8b6:	6213      	str	r3, [r2, #32]
 800a8b8:	e02d      	b.n	800a916 <HAL_RCC_OscConfig+0x36e>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10c      	bne.n	800a8dc <HAL_RCC_OscConfig+0x334>
 800a8c2:	4b6a      	ldr	r3, [pc, #424]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	4a69      	ldr	r2, [pc, #420]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8c8:	f023 0301 	bic.w	r3, r3, #1
 800a8cc:	6213      	str	r3, [r2, #32]
 800a8ce:	4b67      	ldr	r3, [pc, #412]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	4a66      	ldr	r2, [pc, #408]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8d4:	f023 0304 	bic.w	r3, r3, #4
 800a8d8:	6213      	str	r3, [r2, #32]
 800a8da:	e01c      	b.n	800a916 <HAL_RCC_OscConfig+0x36e>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	2b05      	cmp	r3, #5
 800a8e2:	d10c      	bne.n	800a8fe <HAL_RCC_OscConfig+0x356>
 800a8e4:	4b61      	ldr	r3, [pc, #388]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8e6:	6a1b      	ldr	r3, [r3, #32]
 800a8e8:	4a60      	ldr	r2, [pc, #384]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8ea:	f043 0304 	orr.w	r3, r3, #4
 800a8ee:	6213      	str	r3, [r2, #32]
 800a8f0:	4b5e      	ldr	r3, [pc, #376]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	4a5d      	ldr	r2, [pc, #372]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	6213      	str	r3, [r2, #32]
 800a8fc:	e00b      	b.n	800a916 <HAL_RCC_OscConfig+0x36e>
 800a8fe:	4b5b      	ldr	r3, [pc, #364]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	4a5a      	ldr	r2, [pc, #360]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a904:	f023 0301 	bic.w	r3, r3, #1
 800a908:	6213      	str	r3, [r2, #32]
 800a90a:	4b58      	ldr	r3, [pc, #352]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	4a57      	ldr	r2, [pc, #348]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a910:	f023 0304 	bic.w	r3, r3, #4
 800a914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d015      	beq.n	800a94a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a91e:	f7fd fdff 	bl	8008520 <HAL_GetTick>
 800a922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a924:	e00a      	b.n	800a93c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a926:	f7fd fdfb 	bl	8008520 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	f241 3288 	movw	r2, #5000	; 0x1388
 800a934:	4293      	cmp	r3, r2
 800a936:	d901      	bls.n	800a93c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e0b1      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a93c:	4b4b      	ldr	r3, [pc, #300]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a93e:	6a1b      	ldr	r3, [r3, #32]
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d0ee      	beq.n	800a926 <HAL_RCC_OscConfig+0x37e>
 800a948:	e014      	b.n	800a974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a94a:	f7fd fde9 	bl	8008520 <HAL_GetTick>
 800a94e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a950:	e00a      	b.n	800a968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a952:	f7fd fde5 	bl	8008520 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a960:	4293      	cmp	r3, r2
 800a962:	d901      	bls.n	800a968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e09b      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a968:	4b40      	ldr	r3, [pc, #256]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1ee      	bne.n	800a952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d105      	bne.n	800a986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a97a:	4b3c      	ldr	r3, [pc, #240]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	4a3b      	ldr	r2, [pc, #236]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 8087 	beq.w	800aa9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a990:	4b36      	ldr	r3, [pc, #216]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f003 030c 	and.w	r3, r3, #12
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d061      	beq.n	800aa60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	69db      	ldr	r3, [r3, #28]
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d146      	bne.n	800aa32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9a4:	4b33      	ldr	r3, [pc, #204]	; (800aa74 <HAL_RCC_OscConfig+0x4cc>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9aa:	f7fd fdb9 	bl	8008520 <HAL_GetTick>
 800a9ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9b0:	e008      	b.n	800a9c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9b2:	f7fd fdb5 	bl	8008520 <HAL_GetTick>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d901      	bls.n	800a9c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e06d      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9c4:	4b29      	ldr	r3, [pc, #164]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1f0      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9d8:	d108      	bne.n	800a9ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a9da:	4b24      	ldr	r3, [pc, #144]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	4921      	ldr	r1, [pc, #132]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9ec:	4b1f      	ldr	r3, [pc, #124]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a19      	ldr	r1, [r3, #32]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	430b      	orrs	r3, r1
 800a9fe:	491b      	ldr	r1, [pc, #108]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800aa00:	4313      	orrs	r3, r2
 800aa02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa04:	4b1b      	ldr	r3, [pc, #108]	; (800aa74 <HAL_RCC_OscConfig+0x4cc>)
 800aa06:	2201      	movs	r2, #1
 800aa08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa0a:	f7fd fd89 	bl	8008520 <HAL_GetTick>
 800aa0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa10:	e008      	b.n	800aa24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa12:	f7fd fd85 	bl	8008520 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d901      	bls.n	800aa24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e03d      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa24:	4b11      	ldr	r3, [pc, #68]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0f0      	beq.n	800aa12 <HAL_RCC_OscConfig+0x46a>
 800aa30:	e035      	b.n	800aa9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa32:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <HAL_RCC_OscConfig+0x4cc>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa38:	f7fd fd72 	bl	8008520 <HAL_GetTick>
 800aa3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa3e:	e008      	b.n	800aa52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa40:	f7fd fd6e 	bl	8008520 <HAL_GetTick>
 800aa44:	4602      	mov	r2, r0
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d901      	bls.n	800aa52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	e026      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa52:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <HAL_RCC_OscConfig+0x4c4>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1f0      	bne.n	800aa40 <HAL_RCC_OscConfig+0x498>
 800aa5e:	e01e      	b.n	800aa9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	69db      	ldr	r3, [r3, #28]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d107      	bne.n	800aa78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e019      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
 800aa6c:	40021000 	.word	0x40021000
 800aa70:	40007000 	.word	0x40007000
 800aa74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aa78:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <HAL_RCC_OscConfig+0x500>)
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a1b      	ldr	r3, [r3, #32]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d106      	bne.n	800aa9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d001      	beq.n	800aa9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	40021000 	.word	0x40021000

0800aaac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e0d0      	b.n	800ac62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aac0:	4b6a      	ldr	r3, [pc, #424]	; (800ac6c <HAL_RCC_ClockConfig+0x1c0>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0307 	and.w	r3, r3, #7
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d910      	bls.n	800aaf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aace:	4b67      	ldr	r3, [pc, #412]	; (800ac6c <HAL_RCC_ClockConfig+0x1c0>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f023 0207 	bic.w	r2, r3, #7
 800aad6:	4965      	ldr	r1, [pc, #404]	; (800ac6c <HAL_RCC_ClockConfig+0x1c0>)
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	4313      	orrs	r3, r2
 800aadc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aade:	4b63      	ldr	r3, [pc, #396]	; (800ac6c <HAL_RCC_ClockConfig+0x1c0>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0307 	and.w	r3, r3, #7
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d001      	beq.n	800aaf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e0b8      	b.n	800ac62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0302 	and.w	r3, r3, #2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d020      	beq.n	800ab3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab08:	4b59      	ldr	r3, [pc, #356]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	4a58      	ldr	r2, [pc, #352]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ab12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0308 	and.w	r3, r3, #8
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d005      	beq.n	800ab2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab20:	4b53      	ldr	r3, [pc, #332]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	4a52      	ldr	r2, [pc, #328]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ab2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab2c:	4b50      	ldr	r3, [pc, #320]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	494d      	ldr	r1, [pc, #308]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d040      	beq.n	800abcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d107      	bne.n	800ab62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab52:	4b47      	ldr	r3, [pc, #284]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d115      	bne.n	800ab8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e07f      	b.n	800ac62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d107      	bne.n	800ab7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab6a:	4b41      	ldr	r3, [pc, #260]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e073      	b.n	800ac62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab7a:	4b3d      	ldr	r3, [pc, #244]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e06b      	b.n	800ac62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab8a:	4b39      	ldr	r3, [pc, #228]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	f023 0203 	bic.w	r2, r3, #3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	4936      	ldr	r1, [pc, #216]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab9c:	f7fd fcc0 	bl	8008520 <HAL_GetTick>
 800aba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aba2:	e00a      	b.n	800abba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aba4:	f7fd fcbc 	bl	8008520 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d901      	bls.n	800abba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e053      	b.n	800ac62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abba:	4b2d      	ldr	r3, [pc, #180]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	f003 020c 	and.w	r2, r3, #12
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	429a      	cmp	r2, r3
 800abca:	d1eb      	bne.n	800aba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abcc:	4b27      	ldr	r3, [pc, #156]	; (800ac6c <HAL_RCC_ClockConfig+0x1c0>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0307 	and.w	r3, r3, #7
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d210      	bcs.n	800abfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abda:	4b24      	ldr	r3, [pc, #144]	; (800ac6c <HAL_RCC_ClockConfig+0x1c0>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f023 0207 	bic.w	r2, r3, #7
 800abe2:	4922      	ldr	r1, [pc, #136]	; (800ac6c <HAL_RCC_ClockConfig+0x1c0>)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abea:	4b20      	ldr	r3, [pc, #128]	; (800ac6c <HAL_RCC_ClockConfig+0x1c0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0307 	and.w	r3, r3, #7
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d001      	beq.n	800abfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e032      	b.n	800ac62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d008      	beq.n	800ac1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac08:	4b19      	ldr	r3, [pc, #100]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	4916      	ldr	r1, [pc, #88]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac16:	4313      	orrs	r3, r2
 800ac18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 0308 	and.w	r3, r3, #8
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d009      	beq.n	800ac3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac26:	4b12      	ldr	r3, [pc, #72]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	490e      	ldr	r1, [pc, #56]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ac3a:	f000 f821 	bl	800ac80 <HAL_RCC_GetSysClockFreq>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	4b0b      	ldr	r3, [pc, #44]	; (800ac70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	091b      	lsrs	r3, r3, #4
 800ac46:	f003 030f 	and.w	r3, r3, #15
 800ac4a:	490a      	ldr	r1, [pc, #40]	; (800ac74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac4c:	5ccb      	ldrb	r3, [r1, r3]
 800ac4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac52:	4a09      	ldr	r2, [pc, #36]	; (800ac78 <HAL_RCC_ClockConfig+0x1cc>)
 800ac54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ac56:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <HAL_RCC_ClockConfig+0x1d0>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fd fc1e 	bl	800849c <HAL_InitTick>

  return HAL_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	40022000 	.word	0x40022000
 800ac70:	40021000 	.word	0x40021000
 800ac74:	0800dcc0 	.word	0x0800dcc0
 800ac78:	200000b4 	.word	0x200000b4
 800ac7c:	200000b8 	.word	0x200000b8

0800ac80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60bb      	str	r3, [r7, #8]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]
 800ac92:	2300      	movs	r3, #0
 800ac94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ac9a:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f003 030c 	and.w	r3, r3, #12
 800aca6:	2b04      	cmp	r3, #4
 800aca8:	d002      	beq.n	800acb0 <HAL_RCC_GetSysClockFreq+0x30>
 800acaa:	2b08      	cmp	r3, #8
 800acac:	d003      	beq.n	800acb6 <HAL_RCC_GetSysClockFreq+0x36>
 800acae:	e027      	b.n	800ad00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800acb0:	4b19      	ldr	r3, [pc, #100]	; (800ad18 <HAL_RCC_GetSysClockFreq+0x98>)
 800acb2:	613b      	str	r3, [r7, #16]
      break;
 800acb4:	e027      	b.n	800ad06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	0c9b      	lsrs	r3, r3, #18
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	4a17      	ldr	r2, [pc, #92]	; (800ad1c <HAL_RCC_GetSysClockFreq+0x9c>)
 800acc0:	5cd3      	ldrb	r3, [r2, r3]
 800acc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d010      	beq.n	800acf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800acce:	4b11      	ldr	r3, [pc, #68]	; (800ad14 <HAL_RCC_GetSysClockFreq+0x94>)
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	0c5b      	lsrs	r3, r3, #17
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	4a11      	ldr	r2, [pc, #68]	; (800ad20 <HAL_RCC_GetSysClockFreq+0xa0>)
 800acda:	5cd3      	ldrb	r3, [r2, r3]
 800acdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a0d      	ldr	r2, [pc, #52]	; (800ad18 <HAL_RCC_GetSysClockFreq+0x98>)
 800ace2:	fb03 f202 	mul.w	r2, r3, r2
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acec:	617b      	str	r3, [r7, #20]
 800acee:	e004      	b.n	800acfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a0c      	ldr	r2, [pc, #48]	; (800ad24 <HAL_RCC_GetSysClockFreq+0xa4>)
 800acf4:	fb02 f303 	mul.w	r3, r2, r3
 800acf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	613b      	str	r3, [r7, #16]
      break;
 800acfe:	e002      	b.n	800ad06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ad00:	4b05      	ldr	r3, [pc, #20]	; (800ad18 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad02:	613b      	str	r3, [r7, #16]
      break;
 800ad04:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad06:	693b      	ldr	r3, [r7, #16]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	371c      	adds	r7, #28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bc80      	pop	{r7}
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	40021000 	.word	0x40021000
 800ad18:	007a1200 	.word	0x007a1200
 800ad1c:	0800dcd8 	.word	0x0800dcd8
 800ad20:	0800dce8 	.word	0x0800dce8
 800ad24:	003d0900 	.word	0x003d0900

0800ad28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad2c:	4b02      	ldr	r3, [pc, #8]	; (800ad38 <HAL_RCC_GetHCLKFreq+0x10>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bc80      	pop	{r7}
 800ad36:	4770      	bx	lr
 800ad38:	200000b4 	.word	0x200000b4

0800ad3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ad40:	f7ff fff2 	bl	800ad28 <HAL_RCC_GetHCLKFreq>
 800ad44:	4602      	mov	r2, r0
 800ad46:	4b05      	ldr	r3, [pc, #20]	; (800ad5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	0a1b      	lsrs	r3, r3, #8
 800ad4c:	f003 0307 	and.w	r3, r3, #7
 800ad50:	4903      	ldr	r1, [pc, #12]	; (800ad60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad52:	5ccb      	ldrb	r3, [r1, r3]
 800ad54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	40021000 	.word	0x40021000
 800ad60:	0800dcd0 	.word	0x0800dcd0

0800ad64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ad68:	f7ff ffde 	bl	800ad28 <HAL_RCC_GetHCLKFreq>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	0adb      	lsrs	r3, r3, #11
 800ad74:	f003 0307 	and.w	r3, r3, #7
 800ad78:	4903      	ldr	r1, [pc, #12]	; (800ad88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad7a:	5ccb      	ldrb	r3, [r1, r3]
 800ad7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	40021000 	.word	0x40021000
 800ad88:	0800dcd0 	.word	0x0800dcd0

0800ad8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ad94:	4b0a      	ldr	r3, [pc, #40]	; (800adc0 <RCC_Delay+0x34>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a0a      	ldr	r2, [pc, #40]	; (800adc4 <RCC_Delay+0x38>)
 800ad9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9e:	0a5b      	lsrs	r3, r3, #9
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	fb02 f303 	mul.w	r3, r2, r3
 800ada6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ada8:	bf00      	nop
  }
  while (Delay --);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	1e5a      	subs	r2, r3, #1
 800adae:	60fa      	str	r2, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1f9      	bne.n	800ada8 <RCC_Delay+0x1c>
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	bc80      	pop	{r7}
 800adbe:	4770      	bx	lr
 800adc0:	200000b4 	.word	0x200000b4
 800adc4:	10624dd3 	.word	0x10624dd3

0800adc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e041      	b.n	800ae5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d106      	bne.n	800adf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7fd fa26 	bl	8008240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3304      	adds	r3, #4
 800ae04:	4619      	mov	r1, r3
 800ae06:	4610      	mov	r0, r2
 800ae08:	f000 fa82 	bl	800b310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
	...

0800ae68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d001      	beq.n	800ae80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e044      	b.n	800af0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0201 	orr.w	r2, r2, #1
 800ae96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a1d      	ldr	r2, [pc, #116]	; (800af14 <HAL_TIM_Base_Start_IT+0xac>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d018      	beq.n	800aed4 <HAL_TIM_Base_Start_IT+0x6c>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a1c      	ldr	r2, [pc, #112]	; (800af18 <HAL_TIM_Base_Start_IT+0xb0>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d013      	beq.n	800aed4 <HAL_TIM_Base_Start_IT+0x6c>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb4:	d00e      	beq.n	800aed4 <HAL_TIM_Base_Start_IT+0x6c>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a18      	ldr	r2, [pc, #96]	; (800af1c <HAL_TIM_Base_Start_IT+0xb4>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d009      	beq.n	800aed4 <HAL_TIM_Base_Start_IT+0x6c>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a16      	ldr	r2, [pc, #88]	; (800af20 <HAL_TIM_Base_Start_IT+0xb8>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d004      	beq.n	800aed4 <HAL_TIM_Base_Start_IT+0x6c>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a15      	ldr	r2, [pc, #84]	; (800af24 <HAL_TIM_Base_Start_IT+0xbc>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d111      	bne.n	800aef8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f003 0307 	and.w	r3, r3, #7
 800aede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b06      	cmp	r3, #6
 800aee4:	d010      	beq.n	800af08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f042 0201 	orr.w	r2, r2, #1
 800aef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aef6:	e007      	b.n	800af08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f042 0201 	orr.w	r2, r2, #1
 800af06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	bc80      	pop	{r7}
 800af12:	4770      	bx	lr
 800af14:	40012c00 	.word	0x40012c00
 800af18:	40013400 	.word	0x40013400
 800af1c:	40000400 	.word	0x40000400
 800af20:	40000800 	.word	0x40000800
 800af24:	40000c00 	.word	0x40000c00

0800af28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	f003 0302 	and.w	r3, r3, #2
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d122      	bne.n	800af84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d11b      	bne.n	800af84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f06f 0202 	mvn.w	r2, #2
 800af54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	f003 0303 	and.w	r3, r3, #3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f9b4 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800af70:	e005      	b.n	800af7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f9a7 	bl	800b2c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f9b6 	bl	800b2ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	f003 0304 	and.w	r3, r3, #4
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d122      	bne.n	800afd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	d11b      	bne.n	800afd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f06f 0204 	mvn.w	r2, #4
 800afa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2202      	movs	r2, #2
 800afae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d003      	beq.n	800afc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f98a 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800afc4:	e005      	b.n	800afd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f97d 	bl	800b2c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f98c 	bl	800b2ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	f003 0308 	and.w	r3, r3, #8
 800afe2:	2b08      	cmp	r3, #8
 800afe4:	d122      	bne.n	800b02c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f003 0308 	and.w	r3, r3, #8
 800aff0:	2b08      	cmp	r3, #8
 800aff2:	d11b      	bne.n	800b02c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f06f 0208 	mvn.w	r2, #8
 800affc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2204      	movs	r2, #4
 800b002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	f003 0303 	and.w	r3, r3, #3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f960 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800b018:	e005      	b.n	800b026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f953 	bl	800b2c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f962 	bl	800b2ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	f003 0310 	and.w	r3, r3, #16
 800b036:	2b10      	cmp	r3, #16
 800b038:	d122      	bne.n	800b080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	f003 0310 	and.w	r3, r3, #16
 800b044:	2b10      	cmp	r3, #16
 800b046:	d11b      	bne.n	800b080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f06f 0210 	mvn.w	r2, #16
 800b050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2208      	movs	r2, #8
 800b056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	69db      	ldr	r3, [r3, #28]
 800b05e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f936 	bl	800b2d8 <HAL_TIM_IC_CaptureCallback>
 800b06c:	e005      	b.n	800b07a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f929 	bl	800b2c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f938 	bl	800b2ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d10e      	bne.n	800b0ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d107      	bne.n	800b0ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f06f 0201 	mvn.w	r2, #1
 800b0a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7fc fd62 	bl	8007b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b6:	2b80      	cmp	r3, #128	; 0x80
 800b0b8:	d10e      	bne.n	800b0d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c4:	2b80      	cmp	r3, #128	; 0x80
 800b0c6:	d107      	bne.n	800b0d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 faa1 	bl	800b61a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e2:	2b40      	cmp	r3, #64	; 0x40
 800b0e4:	d10e      	bne.n	800b104 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f0:	2b40      	cmp	r3, #64	; 0x40
 800b0f2:	d107      	bne.n	800b104 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f8fc 	bl	800b2fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f003 0320 	and.w	r3, r3, #32
 800b10e:	2b20      	cmp	r3, #32
 800b110:	d10e      	bne.n	800b130 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	f003 0320 	and.w	r3, r3, #32
 800b11c:	2b20      	cmp	r3, #32
 800b11e:	d107      	bne.n	800b130 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f06f 0220 	mvn.w	r2, #32
 800b128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fa6c 	bl	800b608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b130:	bf00      	nop
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d101      	bne.n	800b154 <HAL_TIM_ConfigClockSource+0x1c>
 800b150:	2302      	movs	r3, #2
 800b152:	e0b4      	b.n	800b2be <HAL_TIM_ConfigClockSource+0x186>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b17a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b18c:	d03e      	beq.n	800b20c <HAL_TIM_ConfigClockSource+0xd4>
 800b18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b192:	f200 8087 	bhi.w	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b19a:	f000 8086 	beq.w	800b2aa <HAL_TIM_ConfigClockSource+0x172>
 800b19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a2:	d87f      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b1a4:	2b70      	cmp	r3, #112	; 0x70
 800b1a6:	d01a      	beq.n	800b1de <HAL_TIM_ConfigClockSource+0xa6>
 800b1a8:	2b70      	cmp	r3, #112	; 0x70
 800b1aa:	d87b      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b1ac:	2b60      	cmp	r3, #96	; 0x60
 800b1ae:	d050      	beq.n	800b252 <HAL_TIM_ConfigClockSource+0x11a>
 800b1b0:	2b60      	cmp	r3, #96	; 0x60
 800b1b2:	d877      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b4:	2b50      	cmp	r3, #80	; 0x50
 800b1b6:	d03c      	beq.n	800b232 <HAL_TIM_ConfigClockSource+0xfa>
 800b1b8:	2b50      	cmp	r3, #80	; 0x50
 800b1ba:	d873      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b1bc:	2b40      	cmp	r3, #64	; 0x40
 800b1be:	d058      	beq.n	800b272 <HAL_TIM_ConfigClockSource+0x13a>
 800b1c0:	2b40      	cmp	r3, #64	; 0x40
 800b1c2:	d86f      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c4:	2b30      	cmp	r3, #48	; 0x30
 800b1c6:	d064      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x15a>
 800b1c8:	2b30      	cmp	r3, #48	; 0x30
 800b1ca:	d86b      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b1cc:	2b20      	cmp	r3, #32
 800b1ce:	d060      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x15a>
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d867      	bhi.n	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d05c      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x15a>
 800b1d8:	2b10      	cmp	r3, #16
 800b1da:	d05a      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x15a>
 800b1dc:	e062      	b.n	800b2a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1ee:	f000 f980 	bl	800b4f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b200:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	609a      	str	r2, [r3, #8]
      break;
 800b20a:	e04f      	b.n	800b2ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b21c:	f000 f969 	bl	800b4f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689a      	ldr	r2, [r3, #8]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b22e:	609a      	str	r2, [r3, #8]
      break;
 800b230:	e03c      	b.n	800b2ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b23e:	461a      	mov	r2, r3
 800b240:	f000 f8e0 	bl	800b404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2150      	movs	r1, #80	; 0x50
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 f937 	bl	800b4be <TIM_ITRx_SetConfig>
      break;
 800b250:	e02c      	b.n	800b2ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b25e:	461a      	mov	r2, r3
 800b260:	f000 f8fe 	bl	800b460 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2160      	movs	r1, #96	; 0x60
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 f927 	bl	800b4be <TIM_ITRx_SetConfig>
      break;
 800b270:	e01c      	b.n	800b2ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b27e:	461a      	mov	r2, r3
 800b280:	f000 f8c0 	bl	800b404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2140      	movs	r1, #64	; 0x40
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 f917 	bl	800b4be <TIM_ITRx_SetConfig>
      break;
 800b290:	e00c      	b.n	800b2ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f000 f90e 	bl	800b4be <TIM_ITRx_SetConfig>
      break;
 800b2a2:	e003      	b.n	800b2ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2a8:	e000      	b.n	800b2ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b2aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2ce:	bf00      	nop
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bc80      	pop	{r7}
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bc80      	pop	{r7}
 800b2e8:	4770      	bx	lr

0800b2ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2f2:	bf00      	nop
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bc80      	pop	{r7}
 800b2fa:	4770      	bx	lr

0800b2fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	bc80      	pop	{r7}
 800b30c:	4770      	bx	lr
	...

0800b310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a33      	ldr	r2, [pc, #204]	; (800b3f0 <TIM_Base_SetConfig+0xe0>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d013      	beq.n	800b350 <TIM_Base_SetConfig+0x40>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a32      	ldr	r2, [pc, #200]	; (800b3f4 <TIM_Base_SetConfig+0xe4>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d00f      	beq.n	800b350 <TIM_Base_SetConfig+0x40>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b336:	d00b      	beq.n	800b350 <TIM_Base_SetConfig+0x40>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a2f      	ldr	r2, [pc, #188]	; (800b3f8 <TIM_Base_SetConfig+0xe8>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d007      	beq.n	800b350 <TIM_Base_SetConfig+0x40>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a2e      	ldr	r2, [pc, #184]	; (800b3fc <TIM_Base_SetConfig+0xec>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d003      	beq.n	800b350 <TIM_Base_SetConfig+0x40>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a2d      	ldr	r2, [pc, #180]	; (800b400 <TIM_Base_SetConfig+0xf0>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d108      	bne.n	800b362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a22      	ldr	r2, [pc, #136]	; (800b3f0 <TIM_Base_SetConfig+0xe0>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d013      	beq.n	800b392 <TIM_Base_SetConfig+0x82>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a21      	ldr	r2, [pc, #132]	; (800b3f4 <TIM_Base_SetConfig+0xe4>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00f      	beq.n	800b392 <TIM_Base_SetConfig+0x82>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b378:	d00b      	beq.n	800b392 <TIM_Base_SetConfig+0x82>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a1e      	ldr	r2, [pc, #120]	; (800b3f8 <TIM_Base_SetConfig+0xe8>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d007      	beq.n	800b392 <TIM_Base_SetConfig+0x82>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a1d      	ldr	r2, [pc, #116]	; (800b3fc <TIM_Base_SetConfig+0xec>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d003      	beq.n	800b392 <TIM_Base_SetConfig+0x82>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a1c      	ldr	r2, [pc, #112]	; (800b400 <TIM_Base_SetConfig+0xf0>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d108      	bne.n	800b3a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a09      	ldr	r2, [pc, #36]	; (800b3f0 <TIM_Base_SetConfig+0xe0>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d003      	beq.n	800b3d8 <TIM_Base_SetConfig+0xc8>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a08      	ldr	r2, [pc, #32]	; (800b3f4 <TIM_Base_SetConfig+0xe4>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d103      	bne.n	800b3e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	691a      	ldr	r2, [r3, #16]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	615a      	str	r2, [r3, #20]
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bc80      	pop	{r7}
 800b3ee:	4770      	bx	lr
 800b3f0:	40012c00 	.word	0x40012c00
 800b3f4:	40013400 	.word	0x40013400
 800b3f8:	40000400 	.word	0x40000400
 800b3fc:	40000800 	.word	0x40000800
 800b400:	40000c00 	.word	0x40000c00

0800b404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b404:	b480      	push	{r7}
 800b406:	b087      	sub	sp, #28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6a1b      	ldr	r3, [r3, #32]
 800b414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	f023 0201 	bic.w	r2, r3, #1
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b42e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	011b      	lsls	r3, r3, #4
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	4313      	orrs	r3, r2
 800b438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f023 030a 	bic.w	r3, r3, #10
 800b440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	4313      	orrs	r3, r2
 800b448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	621a      	str	r2, [r3, #32]
}
 800b456:	bf00      	nop
 800b458:	371c      	adds	r7, #28
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bc80      	pop	{r7}
 800b45e:	4770      	bx	lr

0800b460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b460:	b480      	push	{r7}
 800b462:	b087      	sub	sp, #28
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6a1b      	ldr	r3, [r3, #32]
 800b470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	f023 0210 	bic.w	r2, r3, #16
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b48a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	031b      	lsls	r3, r3, #12
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b49c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	621a      	str	r2, [r3, #32]
}
 800b4b4:	bf00      	nop
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bc80      	pop	{r7}
 800b4bc:	4770      	bx	lr

0800b4be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b085      	sub	sp, #20
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	f043 0307 	orr.w	r3, r3, #7
 800b4e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	609a      	str	r2, [r3, #8]
}
 800b4e8:	bf00      	nop
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bc80      	pop	{r7}
 800b4f0:	4770      	bx	lr

0800b4f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b087      	sub	sp, #28
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	60f8      	str	r0, [r7, #12]
 800b4fa:	60b9      	str	r1, [r7, #8]
 800b4fc:	607a      	str	r2, [r7, #4]
 800b4fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b50c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	021a      	lsls	r2, r3, #8
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	431a      	orrs	r2, r3
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	4313      	orrs	r3, r2
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	609a      	str	r2, [r3, #8]
}
 800b526:	bf00      	nop
 800b528:	371c      	adds	r7, #28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bc80      	pop	{r7}
 800b52e:	4770      	bx	lr

0800b530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b540:	2b01      	cmp	r3, #1
 800b542:	d101      	bne.n	800b548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b544:	2302      	movs	r3, #2
 800b546:	e050      	b.n	800b5ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2202      	movs	r2, #2
 800b554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b56e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	4313      	orrs	r3, r2
 800b578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a1b      	ldr	r2, [pc, #108]	; (800b5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d018      	beq.n	800b5be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a19      	ldr	r2, [pc, #100]	; (800b5f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d013      	beq.n	800b5be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b59e:	d00e      	beq.n	800b5be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a15      	ldr	r2, [pc, #84]	; (800b5fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d009      	beq.n	800b5be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a14      	ldr	r2, [pc, #80]	; (800b600 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d004      	beq.n	800b5be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a12      	ldr	r2, [pc, #72]	; (800b604 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d10c      	bne.n	800b5d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bc80      	pop	{r7}
 800b5f2:	4770      	bx	lr
 800b5f4:	40012c00 	.word	0x40012c00
 800b5f8:	40013400 	.word	0x40013400
 800b5fc:	40000400 	.word	0x40000400
 800b600:	40000800 	.word	0x40000800
 800b604:	40000c00 	.word	0x40000c00

0800b608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	bc80      	pop	{r7}
 800b618:	4770      	bx	lr

0800b61a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b083      	sub	sp, #12
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b622:	bf00      	nop
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	bc80      	pop	{r7}
 800b62a:	4770      	bx	lr

0800b62c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e042      	b.n	800b6c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d106      	bne.n	800b658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7fc fe1a 	bl	800828c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2224      	movs	r2, #36	; 0x24
 800b65c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68da      	ldr	r2, [r3, #12]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b66e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fd11 	bl	800c098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	691a      	ldr	r2, [r3, #16]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	695a      	ldr	r2, [r3, #20]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68da      	ldr	r2, [r3, #12]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2220      	movs	r2, #32
 800b6b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	d121      	bne.n	800b72a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <HAL_UART_Transmit_IT+0x26>
 800b6ec:	88fb      	ldrh	r3, [r7, #6]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d101      	bne.n	800b6f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e01a      	b.n	800b72c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	88fa      	ldrh	r2, [r7, #6]
 800b700:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	88fa      	ldrh	r2, [r7, #6]
 800b706:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2221      	movs	r2, #33	; 0x21
 800b712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68da      	ldr	r2, [r3, #12]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b724:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	e000      	b.n	800b72c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b72a:	2302      	movs	r3, #2
  }
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	bc80      	pop	{r7}
 800b734:	4770      	bx	lr

0800b736 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	4613      	mov	r3, r2
 800b742:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	d112      	bne.n	800b776 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <HAL_UART_Receive_IT+0x26>
 800b756:	88fb      	ldrh	r3, [r7, #6]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e00b      	b.n	800b778 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b766:	88fb      	ldrh	r3, [r7, #6]
 800b768:	461a      	mov	r2, r3
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 fabf 	bl	800bcf0 <UART_Start_Receive_IT>
 800b772:	4603      	mov	r3, r0
 800b774:	e000      	b.n	800b778 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b776:	2302      	movs	r3, #2
  }
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b0ba      	sub	sp, #232	; 0xe8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b7be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10f      	bne.n	800b7e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ca:	f003 0320 	and.w	r3, r3, #32
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <HAL_UART_IRQHandler+0x66>
 800b7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d6:	f003 0320 	and.w	r3, r3, #32
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fb9c 	bl	800bf1c <UART_Receive_IT>
      return;
 800b7e4:	e25b      	b.n	800bc9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b7e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 80de 	beq.w	800b9ac <HAL_UART_IRQHandler+0x22c>
 800b7f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7f4:	f003 0301 	and.w	r3, r3, #1
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b800:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80d1 	beq.w	800b9ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00b      	beq.n	800b82e <HAL_UART_IRQHandler+0xae>
 800b816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b826:	f043 0201 	orr.w	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b832:	f003 0304 	and.w	r3, r3, #4
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00b      	beq.n	800b852 <HAL_UART_IRQHandler+0xd2>
 800b83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d005      	beq.n	800b852 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84a:	f043 0202 	orr.w	r2, r3, #2
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b856:	f003 0302 	and.w	r3, r3, #2
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <HAL_UART_IRQHandler+0xf6>
 800b85e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	2b00      	cmp	r3, #0
 800b868:	d005      	beq.n	800b876 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86e:	f043 0204 	orr.w	r2, r3, #4
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b87a:	f003 0308 	and.w	r3, r3, #8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d011      	beq.n	800b8a6 <HAL_UART_IRQHandler+0x126>
 800b882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b886:	f003 0320 	and.w	r3, r3, #32
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d105      	bne.n	800b89a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b88e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	2b00      	cmp	r3, #0
 800b898:	d005      	beq.n	800b8a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89e:	f043 0208 	orr.w	r2, r3, #8
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 81f2 	beq.w	800bc94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d008      	beq.n	800b8ce <HAL_UART_IRQHandler+0x14e>
 800b8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8c0:	f003 0320 	and.w	r3, r3, #32
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fb27 	bl	800bf1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	bf14      	ite	ne
 800b8dc:	2301      	movne	r3, #1
 800b8de:	2300      	moveq	r3, #0
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ea:	f003 0308 	and.w	r3, r3, #8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d103      	bne.n	800b8fa <HAL_UART_IRQHandler+0x17a>
 800b8f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d04f      	beq.n	800b99a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fa31 	bl	800bd62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d041      	beq.n	800b992 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3314      	adds	r3, #20
 800b914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b91c:	e853 3f00 	ldrex	r3, [r3]
 800b920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b92c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3314      	adds	r3, #20
 800b936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b93a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b93e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b94a:	e841 2300 	strex	r3, r2, [r1]
 800b94e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1d9      	bne.n	800b90e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d013      	beq.n	800b98a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b966:	4a7e      	ldr	r2, [pc, #504]	; (800bb60 <HAL_UART_IRQHandler+0x3e0>)
 800b968:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fd f848 	bl	8008a04 <HAL_DMA_Abort_IT>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d016      	beq.n	800b9a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b984:	4610      	mov	r0, r2
 800b986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b988:	e00e      	b.n	800b9a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f99c 	bl	800bcc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b990:	e00a      	b.n	800b9a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f998 	bl	800bcc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b998:	e006      	b.n	800b9a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f994 	bl	800bcc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b9a6:	e175      	b.n	800bc94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9a8:	bf00      	nop
    return;
 800b9aa:	e173      	b.n	800bc94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	f040 814f 	bne.w	800bc54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ba:	f003 0310 	and.w	r3, r3, #16
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 8148 	beq.w	800bc54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c8:	f003 0310 	and.w	r3, r3, #16
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8141 	beq.w	800bc54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60bb      	str	r3, [r7, #8]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	60bb      	str	r3, [r7, #8]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	60bb      	str	r3, [r7, #8]
 800b9e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 80b6 	beq.w	800bb64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 8145 	beq.w	800bc98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba16:	429a      	cmp	r2, r3
 800ba18:	f080 813e 	bcs.w	800bc98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	2b20      	cmp	r3, #32
 800ba2c:	f000 8088 	beq.w	800bb40 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	330c      	adds	r3, #12
 800ba36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba3e:	e853 3f00 	ldrex	r3, [r3]
 800ba42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	330c      	adds	r3, #12
 800ba58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba5c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba6c:	e841 2300 	strex	r3, r2, [r1]
 800ba70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1d9      	bne.n	800ba30 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3314      	adds	r3, #20
 800ba82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba86:	e853 3f00 	ldrex	r3, [r3]
 800ba8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba8e:	f023 0301 	bic.w	r3, r3, #1
 800ba92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3314      	adds	r3, #20
 800ba9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800baa0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800baa4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800baa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800baac:	e841 2300 	strex	r3, r2, [r1]
 800bab0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1e1      	bne.n	800ba7c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3314      	adds	r3, #20
 800babe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bac2:	e853 3f00 	ldrex	r3, [r3]
 800bac6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3314      	adds	r3, #20
 800bad8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800badc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bade:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bae2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bae4:	e841 2300 	strex	r3, r2, [r1]
 800bae8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800baea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e3      	bne.n	800bab8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2220      	movs	r2, #32
 800baf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	330c      	adds	r3, #12
 800bb04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb08:	e853 3f00 	ldrex	r3, [r3]
 800bb0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb10:	f023 0310 	bic.w	r3, r3, #16
 800bb14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	330c      	adds	r3, #12
 800bb1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb22:	65ba      	str	r2, [r7, #88]	; 0x58
 800bb24:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb2a:	e841 2300 	strex	r3, r2, [r1]
 800bb2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e3      	bne.n	800bafe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fc ff27 	bl	800898e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2202      	movs	r2, #2
 800bb44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	4619      	mov	r1, r3
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f8bf 	bl	800bcda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb5c:	e09c      	b.n	800bc98 <HAL_UART_IRQHandler+0x518>
 800bb5e:	bf00      	nop
 800bb60:	0800be27 	.word	0x0800be27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 808e 	beq.w	800bc9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bb80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 8089 	beq.w	800bc9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	330c      	adds	r3, #12
 800bb90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb94:	e853 3f00 	ldrex	r3, [r3]
 800bb98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	330c      	adds	r3, #12
 800bbaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bbae:	647a      	str	r2, [r7, #68]	; 0x44
 800bbb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbb6:	e841 2300 	strex	r3, r2, [r1]
 800bbba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e3      	bne.n	800bb8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3314      	adds	r3, #20
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	e853 3f00 	ldrex	r3, [r3]
 800bbd0:	623b      	str	r3, [r7, #32]
   return(result);
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	f023 0301 	bic.w	r3, r3, #1
 800bbd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	3314      	adds	r3, #20
 800bbe2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbe6:	633a      	str	r2, [r7, #48]	; 0x30
 800bbe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbee:	e841 2300 	strex	r3, r2, [r1]
 800bbf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1e3      	bne.n	800bbc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	e853 3f00 	ldrex	r3, [r3]
 800bc16:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f023 0310 	bic.w	r3, r3, #16
 800bc1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	330c      	adds	r3, #12
 800bc28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bc2c:	61fa      	str	r2, [r7, #28]
 800bc2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc30:	69b9      	ldr	r1, [r7, #24]
 800bc32:	69fa      	ldr	r2, [r7, #28]
 800bc34:	e841 2300 	strex	r3, r2, [r1]
 800bc38:	617b      	str	r3, [r7, #20]
   return(result);
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e3      	bne.n	800bc08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2202      	movs	r2, #2
 800bc44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f844 	bl	800bcda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc52:	e023      	b.n	800bc9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d009      	beq.n	800bc74 <HAL_UART_IRQHandler+0x4f4>
 800bc60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 f8ee 	bl	800be4e <UART_Transmit_IT>
    return;
 800bc72:	e014      	b.n	800bc9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00e      	beq.n	800bc9e <HAL_UART_IRQHandler+0x51e>
 800bc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d008      	beq.n	800bc9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f92d 	bl	800beec <UART_EndTransmit_IT>
    return;
 800bc92:	e004      	b.n	800bc9e <HAL_UART_IRQHandler+0x51e>
    return;
 800bc94:	bf00      	nop
 800bc96:	e002      	b.n	800bc9e <HAL_UART_IRQHandler+0x51e>
      return;
 800bc98:	bf00      	nop
 800bc9a:	e000      	b.n	800bc9e <HAL_UART_IRQHandler+0x51e>
      return;
 800bc9c:	bf00      	nop
  }
}
 800bc9e:	37e8      	adds	r7, #232	; 0xe8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bc80      	pop	{r7}
 800bcb4:	4770      	bx	lr

0800bcb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bc80      	pop	{r7}
 800bcc6:	4770      	bx	lr

0800bcc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bc80      	pop	{r7}
 800bcd8:	4770      	bx	lr

0800bcda <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr

0800bcf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	88fa      	ldrh	r2, [r7, #6]
 800bd08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	88fa      	ldrh	r2, [r7, #6]
 800bd0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2222      	movs	r2, #34	; 0x22
 800bd1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d007      	beq.n	800bd36 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68da      	ldr	r2, [r3, #12]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd34:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	695a      	ldr	r2, [r3, #20]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f042 0201 	orr.w	r2, r2, #1
 800bd44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f042 0220 	orr.w	r2, r2, #32
 800bd54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bc80      	pop	{r7}
 800bd60:	4770      	bx	lr

0800bd62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b095      	sub	sp, #84	; 0x54
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	330c      	adds	r3, #12
 800bd70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd74:	e853 3f00 	ldrex	r3, [r3]
 800bd78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	330c      	adds	r3, #12
 800bd88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd8a:	643a      	str	r2, [r7, #64]	; 0x40
 800bd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd92:	e841 2300 	strex	r3, r2, [r1]
 800bd96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1e5      	bne.n	800bd6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3314      	adds	r3, #20
 800bda4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	e853 3f00 	ldrex	r3, [r3]
 800bdac:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	f023 0301 	bic.w	r3, r3, #1
 800bdb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3314      	adds	r3, #20
 800bdbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e5      	bne.n	800bd9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d119      	bne.n	800be0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	330c      	adds	r3, #12
 800bde0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	e853 3f00 	ldrex	r3, [r3]
 800bde8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	f023 0310 	bic.w	r3, r3, #16
 800bdf0:	647b      	str	r3, [r7, #68]	; 0x44
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	330c      	adds	r3, #12
 800bdf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdfa:	61ba      	str	r2, [r7, #24]
 800bdfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfe:	6979      	ldr	r1, [r7, #20]
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	e841 2300 	strex	r3, r2, [r1]
 800be06:	613b      	str	r3, [r7, #16]
   return(result);
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1e5      	bne.n	800bdda <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2220      	movs	r2, #32
 800be12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be1c:	bf00      	nop
 800be1e:	3754      	adds	r7, #84	; 0x54
 800be20:	46bd      	mov	sp, r7
 800be22:	bc80      	pop	{r7}
 800be24:	4770      	bx	lr

0800be26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b084      	sub	sp, #16
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f7ff ff41 	bl	800bcc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be4e:	b480      	push	{r7}
 800be50:	b085      	sub	sp, #20
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b21      	cmp	r3, #33	; 0x21
 800be60:	d13e      	bne.n	800bee0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be6a:	d114      	bne.n	800be96 <UART_Transmit_IT+0x48>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d110      	bne.n	800be96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a1b      	ldr	r3, [r3, #32]
 800be78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	1c9a      	adds	r2, r3, #2
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	621a      	str	r2, [r3, #32]
 800be94:	e008      	b.n	800bea8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	1c59      	adds	r1, r3, #1
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	6211      	str	r1, [r2, #32]
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800beac:	b29b      	uxth	r3, r3
 800beae:	3b01      	subs	r3, #1
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	4619      	mov	r1, r3
 800beb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10f      	bne.n	800bedc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68da      	ldr	r2, [r3, #12]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800beca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68da      	ldr	r2, [r3, #12]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	e000      	b.n	800bee2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bee0:	2302      	movs	r3, #2
  }
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bc80      	pop	{r7}
 800beea:	4770      	bx	lr

0800beec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68da      	ldr	r2, [r3, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2220      	movs	r2, #32
 800bf08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff fec9 	bl	800bca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08c      	sub	sp, #48	; 0x30
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	2b22      	cmp	r3, #34	; 0x22
 800bf2e:	f040 80ae 	bne.w	800c08e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf3a:	d117      	bne.n	800bf6c <UART_Receive_IT+0x50>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d113      	bne.n	800bf6c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bf44:	2300      	movs	r3, #0
 800bf46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf64:	1c9a      	adds	r2, r3, #2
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	629a      	str	r2, [r3, #40]	; 0x28
 800bf6a:	e026      	b.n	800bfba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf7e:	d007      	beq.n	800bf90 <UART_Receive_IT+0x74>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10a      	bne.n	800bf9e <UART_Receive_IT+0x82>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d106      	bne.n	800bf9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	701a      	strb	r2, [r3, #0]
 800bf9c:	e008      	b.n	800bfb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb4:	1c5a      	adds	r2, r3, #1
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d15d      	bne.n	800c08a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 0220 	bic.w	r2, r2, #32
 800bfdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bfec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	695a      	ldr	r2, [r3, #20]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f022 0201 	bic.w	r2, r2, #1
 800bffc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2220      	movs	r2, #32
 800c002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c010:	2b01      	cmp	r3, #1
 800c012:	d135      	bne.n	800c080 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	330c      	adds	r3, #12
 800c020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	e853 3f00 	ldrex	r3, [r3]
 800c028:	613b      	str	r3, [r7, #16]
   return(result);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f023 0310 	bic.w	r3, r3, #16
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	330c      	adds	r3, #12
 800c038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c03a:	623a      	str	r2, [r7, #32]
 800c03c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03e:	69f9      	ldr	r1, [r7, #28]
 800c040:	6a3a      	ldr	r2, [r7, #32]
 800c042:	e841 2300 	strex	r3, r2, [r1]
 800c046:	61bb      	str	r3, [r7, #24]
   return(result);
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1e5      	bne.n	800c01a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0310 	and.w	r3, r3, #16
 800c058:	2b10      	cmp	r3, #16
 800c05a:	d10a      	bne.n	800c072 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7ff fe2e 	bl	800bcda <HAL_UARTEx_RxEventCallback>
 800c07e:	e002      	b.n	800c086 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7ff fe18 	bl	800bcb6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	e002      	b.n	800c090 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	e000      	b.n	800c090 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c08e:	2302      	movs	r3, #2
  }
}
 800c090:	4618      	mov	r0, r3
 800c092:	3730      	adds	r7, #48	; 0x30
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c0d2:	f023 030c 	bic.w	r3, r3, #12
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	68b9      	ldr	r1, [r7, #8]
 800c0dc:	430b      	orrs	r3, r1
 800c0de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	699a      	ldr	r2, [r3, #24]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a2c      	ldr	r2, [pc, #176]	; (800c1ac <UART_SetConfig+0x114>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d103      	bne.n	800c108 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c100:	f7fe fe30 	bl	800ad64 <HAL_RCC_GetPCLK2Freq>
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	e002      	b.n	800c10e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c108:	f7fe fe18 	bl	800ad3c <HAL_RCC_GetPCLK1Freq>
 800c10c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	009a      	lsls	r2, r3, #2
 800c118:	441a      	add	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	fbb2 f3f3 	udiv	r3, r2, r3
 800c124:	4a22      	ldr	r2, [pc, #136]	; (800c1b0 <UART_SetConfig+0x118>)
 800c126:	fba2 2303 	umull	r2, r3, r2, r3
 800c12a:	095b      	lsrs	r3, r3, #5
 800c12c:	0119      	lsls	r1, r3, #4
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	4613      	mov	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	009a      	lsls	r2, r3, #2
 800c138:	441a      	add	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	fbb2 f2f3 	udiv	r2, r2, r3
 800c144:	4b1a      	ldr	r3, [pc, #104]	; (800c1b0 <UART_SetConfig+0x118>)
 800c146:	fba3 0302 	umull	r0, r3, r3, r2
 800c14a:	095b      	lsrs	r3, r3, #5
 800c14c:	2064      	movs	r0, #100	; 0x64
 800c14e:	fb00 f303 	mul.w	r3, r0, r3
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	011b      	lsls	r3, r3, #4
 800c156:	3332      	adds	r3, #50	; 0x32
 800c158:	4a15      	ldr	r2, [pc, #84]	; (800c1b0 <UART_SetConfig+0x118>)
 800c15a:	fba2 2303 	umull	r2, r3, r2, r3
 800c15e:	095b      	lsrs	r3, r3, #5
 800c160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c164:	4419      	add	r1, r3
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	009a      	lsls	r2, r3, #2
 800c170:	441a      	add	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	fbb2 f2f3 	udiv	r2, r2, r3
 800c17c:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <UART_SetConfig+0x118>)
 800c17e:	fba3 0302 	umull	r0, r3, r3, r2
 800c182:	095b      	lsrs	r3, r3, #5
 800c184:	2064      	movs	r0, #100	; 0x64
 800c186:	fb00 f303 	mul.w	r3, r0, r3
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	011b      	lsls	r3, r3, #4
 800c18e:	3332      	adds	r3, #50	; 0x32
 800c190:	4a07      	ldr	r2, [pc, #28]	; (800c1b0 <UART_SetConfig+0x118>)
 800c192:	fba2 2303 	umull	r2, r3, r2, r3
 800c196:	095b      	lsrs	r3, r3, #5
 800c198:	f003 020f 	and.w	r2, r3, #15
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	440a      	add	r2, r1
 800c1a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c1a4:	bf00      	nop
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	40013800 	.word	0x40013800
 800c1b0:	51eb851f 	.word	0x51eb851f

0800c1b4 <__itoa>:
 800c1b4:	1e93      	subs	r3, r2, #2
 800c1b6:	2b22      	cmp	r3, #34	; 0x22
 800c1b8:	b510      	push	{r4, lr}
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	d904      	bls.n	800c1c8 <__itoa+0x14>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	461c      	mov	r4, r3
 800c1c2:	700b      	strb	r3, [r1, #0]
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	bd10      	pop	{r4, pc}
 800c1c8:	2a0a      	cmp	r2, #10
 800c1ca:	d109      	bne.n	800c1e0 <__itoa+0x2c>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	da07      	bge.n	800c1e0 <__itoa+0x2c>
 800c1d0:	232d      	movs	r3, #45	; 0x2d
 800c1d2:	700b      	strb	r3, [r1, #0]
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	4240      	negs	r0, r0
 800c1d8:	4421      	add	r1, r4
 800c1da:	f000 f90d 	bl	800c3f8 <__utoa>
 800c1de:	e7f1      	b.n	800c1c4 <__itoa+0x10>
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	e7f9      	b.n	800c1d8 <__itoa+0x24>

0800c1e4 <itoa>:
 800c1e4:	f7ff bfe6 	b.w	800c1b4 <__itoa>

0800c1e8 <malloc>:
 800c1e8:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <malloc+0xc>)
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	f000 b823 	b.w	800c238 <_malloc_r>
 800c1f2:	bf00      	nop
 800c1f4:	2000010c 	.word	0x2000010c

0800c1f8 <sbrk_aligned>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	4e0e      	ldr	r6, [pc, #56]	; (800c234 <sbrk_aligned+0x3c>)
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	6831      	ldr	r1, [r6, #0]
 800c200:	4605      	mov	r5, r0
 800c202:	b911      	cbnz	r1, 800c20a <sbrk_aligned+0x12>
 800c204:	f000 f968 	bl	800c4d8 <_sbrk_r>
 800c208:	6030      	str	r0, [r6, #0]
 800c20a:	4621      	mov	r1, r4
 800c20c:	4628      	mov	r0, r5
 800c20e:	f000 f963 	bl	800c4d8 <_sbrk_r>
 800c212:	1c43      	adds	r3, r0, #1
 800c214:	d00a      	beq.n	800c22c <sbrk_aligned+0x34>
 800c216:	1cc4      	adds	r4, r0, #3
 800c218:	f024 0403 	bic.w	r4, r4, #3
 800c21c:	42a0      	cmp	r0, r4
 800c21e:	d007      	beq.n	800c230 <sbrk_aligned+0x38>
 800c220:	1a21      	subs	r1, r4, r0
 800c222:	4628      	mov	r0, r5
 800c224:	f000 f958 	bl	800c4d8 <_sbrk_r>
 800c228:	3001      	adds	r0, #1
 800c22a:	d101      	bne.n	800c230 <sbrk_aligned+0x38>
 800c22c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c230:	4620      	mov	r0, r4
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	20000380 	.word	0x20000380

0800c238 <_malloc_r>:
 800c238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c23c:	1ccd      	adds	r5, r1, #3
 800c23e:	f025 0503 	bic.w	r5, r5, #3
 800c242:	3508      	adds	r5, #8
 800c244:	2d0c      	cmp	r5, #12
 800c246:	bf38      	it	cc
 800c248:	250c      	movcc	r5, #12
 800c24a:	2d00      	cmp	r5, #0
 800c24c:	4607      	mov	r7, r0
 800c24e:	db01      	blt.n	800c254 <_malloc_r+0x1c>
 800c250:	42a9      	cmp	r1, r5
 800c252:	d905      	bls.n	800c260 <_malloc_r+0x28>
 800c254:	230c      	movs	r3, #12
 800c256:	2600      	movs	r6, #0
 800c258:	603b      	str	r3, [r7, #0]
 800c25a:	4630      	mov	r0, r6
 800c25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c260:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c334 <_malloc_r+0xfc>
 800c264:	f000 f89c 	bl	800c3a0 <__malloc_lock>
 800c268:	f8d8 3000 	ldr.w	r3, [r8]
 800c26c:	461c      	mov	r4, r3
 800c26e:	bb5c      	cbnz	r4, 800c2c8 <_malloc_r+0x90>
 800c270:	4629      	mov	r1, r5
 800c272:	4638      	mov	r0, r7
 800c274:	f7ff ffc0 	bl	800c1f8 <sbrk_aligned>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	4604      	mov	r4, r0
 800c27c:	d155      	bne.n	800c32a <_malloc_r+0xf2>
 800c27e:	f8d8 4000 	ldr.w	r4, [r8]
 800c282:	4626      	mov	r6, r4
 800c284:	2e00      	cmp	r6, #0
 800c286:	d145      	bne.n	800c314 <_malloc_r+0xdc>
 800c288:	2c00      	cmp	r4, #0
 800c28a:	d048      	beq.n	800c31e <_malloc_r+0xe6>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	4631      	mov	r1, r6
 800c290:	4638      	mov	r0, r7
 800c292:	eb04 0903 	add.w	r9, r4, r3
 800c296:	f000 f91f 	bl	800c4d8 <_sbrk_r>
 800c29a:	4581      	cmp	r9, r0
 800c29c:	d13f      	bne.n	800c31e <_malloc_r+0xe6>
 800c29e:	6821      	ldr	r1, [r4, #0]
 800c2a0:	4638      	mov	r0, r7
 800c2a2:	1a6d      	subs	r5, r5, r1
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7ff ffa7 	bl	800c1f8 <sbrk_aligned>
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	d037      	beq.n	800c31e <_malloc_r+0xe6>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	442b      	add	r3, r5
 800c2b2:	6023      	str	r3, [r4, #0]
 800c2b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d038      	beq.n	800c32e <_malloc_r+0xf6>
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	42a2      	cmp	r2, r4
 800c2c0:	d12b      	bne.n	800c31a <_malloc_r+0xe2>
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	605a      	str	r2, [r3, #4]
 800c2c6:	e00f      	b.n	800c2e8 <_malloc_r+0xb0>
 800c2c8:	6822      	ldr	r2, [r4, #0]
 800c2ca:	1b52      	subs	r2, r2, r5
 800c2cc:	d41f      	bmi.n	800c30e <_malloc_r+0xd6>
 800c2ce:	2a0b      	cmp	r2, #11
 800c2d0:	d917      	bls.n	800c302 <_malloc_r+0xca>
 800c2d2:	1961      	adds	r1, r4, r5
 800c2d4:	42a3      	cmp	r3, r4
 800c2d6:	6025      	str	r5, [r4, #0]
 800c2d8:	bf18      	it	ne
 800c2da:	6059      	strne	r1, [r3, #4]
 800c2dc:	6863      	ldr	r3, [r4, #4]
 800c2de:	bf08      	it	eq
 800c2e0:	f8c8 1000 	streq.w	r1, [r8]
 800c2e4:	5162      	str	r2, [r4, r5]
 800c2e6:	604b      	str	r3, [r1, #4]
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f104 060b 	add.w	r6, r4, #11
 800c2ee:	f000 f85d 	bl	800c3ac <__malloc_unlock>
 800c2f2:	f026 0607 	bic.w	r6, r6, #7
 800c2f6:	1d23      	adds	r3, r4, #4
 800c2f8:	1af2      	subs	r2, r6, r3
 800c2fa:	d0ae      	beq.n	800c25a <_malloc_r+0x22>
 800c2fc:	1b9b      	subs	r3, r3, r6
 800c2fe:	50a3      	str	r3, [r4, r2]
 800c300:	e7ab      	b.n	800c25a <_malloc_r+0x22>
 800c302:	42a3      	cmp	r3, r4
 800c304:	6862      	ldr	r2, [r4, #4]
 800c306:	d1dd      	bne.n	800c2c4 <_malloc_r+0x8c>
 800c308:	f8c8 2000 	str.w	r2, [r8]
 800c30c:	e7ec      	b.n	800c2e8 <_malloc_r+0xb0>
 800c30e:	4623      	mov	r3, r4
 800c310:	6864      	ldr	r4, [r4, #4]
 800c312:	e7ac      	b.n	800c26e <_malloc_r+0x36>
 800c314:	4634      	mov	r4, r6
 800c316:	6876      	ldr	r6, [r6, #4]
 800c318:	e7b4      	b.n	800c284 <_malloc_r+0x4c>
 800c31a:	4613      	mov	r3, r2
 800c31c:	e7cc      	b.n	800c2b8 <_malloc_r+0x80>
 800c31e:	230c      	movs	r3, #12
 800c320:	4638      	mov	r0, r7
 800c322:	603b      	str	r3, [r7, #0]
 800c324:	f000 f842 	bl	800c3ac <__malloc_unlock>
 800c328:	e797      	b.n	800c25a <_malloc_r+0x22>
 800c32a:	6025      	str	r5, [r4, #0]
 800c32c:	e7dc      	b.n	800c2e8 <_malloc_r+0xb0>
 800c32e:	605b      	str	r3, [r3, #4]
 800c330:	deff      	udf	#255	; 0xff
 800c332:	bf00      	nop
 800c334:	2000037c 	.word	0x2000037c

0800c338 <sniprintf>:
 800c338:	b40c      	push	{r2, r3}
 800c33a:	b530      	push	{r4, r5, lr}
 800c33c:	4b17      	ldr	r3, [pc, #92]	; (800c39c <sniprintf+0x64>)
 800c33e:	1e0c      	subs	r4, r1, #0
 800c340:	681d      	ldr	r5, [r3, #0]
 800c342:	b09d      	sub	sp, #116	; 0x74
 800c344:	da08      	bge.n	800c358 <sniprintf+0x20>
 800c346:	238b      	movs	r3, #139	; 0x8b
 800c348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c34c:	602b      	str	r3, [r5, #0]
 800c34e:	b01d      	add	sp, #116	; 0x74
 800c350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c354:	b002      	add	sp, #8
 800c356:	4770      	bx	lr
 800c358:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c35c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c360:	bf0c      	ite	eq
 800c362:	4623      	moveq	r3, r4
 800c364:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c368:	9304      	str	r3, [sp, #16]
 800c36a:	9307      	str	r3, [sp, #28]
 800c36c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c370:	9002      	str	r0, [sp, #8]
 800c372:	9006      	str	r0, [sp, #24]
 800c374:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c378:	4628      	mov	r0, r5
 800c37a:	ab21      	add	r3, sp, #132	; 0x84
 800c37c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c37e:	a902      	add	r1, sp, #8
 800c380:	9301      	str	r3, [sp, #4]
 800c382:	f000 f98f 	bl	800c6a4 <_svfiprintf_r>
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	bfbc      	itt	lt
 800c38a:	238b      	movlt	r3, #139	; 0x8b
 800c38c:	602b      	strlt	r3, [r5, #0]
 800c38e:	2c00      	cmp	r4, #0
 800c390:	d0dd      	beq.n	800c34e <sniprintf+0x16>
 800c392:	2200      	movs	r2, #0
 800c394:	9b02      	ldr	r3, [sp, #8]
 800c396:	701a      	strb	r2, [r3, #0]
 800c398:	e7d9      	b.n	800c34e <sniprintf+0x16>
 800c39a:	bf00      	nop
 800c39c:	2000010c 	.word	0x2000010c

0800c3a0 <__malloc_lock>:
 800c3a0:	4801      	ldr	r0, [pc, #4]	; (800c3a8 <__malloc_lock+0x8>)
 800c3a2:	f000 b8d3 	b.w	800c54c <__retarget_lock_acquire_recursive>
 800c3a6:	bf00      	nop
 800c3a8:	200004bc 	.word	0x200004bc

0800c3ac <__malloc_unlock>:
 800c3ac:	4801      	ldr	r0, [pc, #4]	; (800c3b4 <__malloc_unlock+0x8>)
 800c3ae:	f000 b8ce 	b.w	800c54e <__retarget_lock_release_recursive>
 800c3b2:	bf00      	nop
 800c3b4:	200004bc 	.word	0x200004bc

0800c3b8 <siprintf>:
 800c3b8:	b40e      	push	{r1, r2, r3}
 800c3ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3be:	b500      	push	{lr}
 800c3c0:	b09c      	sub	sp, #112	; 0x70
 800c3c2:	ab1d      	add	r3, sp, #116	; 0x74
 800c3c4:	9002      	str	r0, [sp, #8]
 800c3c6:	9006      	str	r0, [sp, #24]
 800c3c8:	9107      	str	r1, [sp, #28]
 800c3ca:	9104      	str	r1, [sp, #16]
 800c3cc:	4808      	ldr	r0, [pc, #32]	; (800c3f0 <siprintf+0x38>)
 800c3ce:	4909      	ldr	r1, [pc, #36]	; (800c3f4 <siprintf+0x3c>)
 800c3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3d4:	9105      	str	r1, [sp, #20]
 800c3d6:	6800      	ldr	r0, [r0, #0]
 800c3d8:	a902      	add	r1, sp, #8
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	f000 f962 	bl	800c6a4 <_svfiprintf_r>
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	9b02      	ldr	r3, [sp, #8]
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	b01c      	add	sp, #112	; 0x70
 800c3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3ec:	b003      	add	sp, #12
 800c3ee:	4770      	bx	lr
 800c3f0:	2000010c 	.word	0x2000010c
 800c3f4:	ffff0208 	.word	0xffff0208

0800c3f8 <__utoa>:
 800c3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3fa:	b08b      	sub	sp, #44	; 0x2c
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	466e      	mov	r6, sp
 800c402:	4c1d      	ldr	r4, [pc, #116]	; (800c478 <__utoa+0x80>)
 800c404:	f104 0c20 	add.w	ip, r4, #32
 800c408:	4637      	mov	r7, r6
 800c40a:	6820      	ldr	r0, [r4, #0]
 800c40c:	6861      	ldr	r1, [r4, #4]
 800c40e:	3408      	adds	r4, #8
 800c410:	c703      	stmia	r7!, {r0, r1}
 800c412:	4564      	cmp	r4, ip
 800c414:	463e      	mov	r6, r7
 800c416:	d1f7      	bne.n	800c408 <__utoa+0x10>
 800c418:	7921      	ldrb	r1, [r4, #4]
 800c41a:	6820      	ldr	r0, [r4, #0]
 800c41c:	7139      	strb	r1, [r7, #4]
 800c41e:	1e91      	subs	r1, r2, #2
 800c420:	2922      	cmp	r1, #34	; 0x22
 800c422:	6038      	str	r0, [r7, #0]
 800c424:	f04f 0100 	mov.w	r1, #0
 800c428:	d904      	bls.n	800c434 <__utoa+0x3c>
 800c42a:	7019      	strb	r1, [r3, #0]
 800c42c:	460b      	mov	r3, r1
 800c42e:	4618      	mov	r0, r3
 800c430:	b00b      	add	sp, #44	; 0x2c
 800c432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c434:	1e58      	subs	r0, r3, #1
 800c436:	4684      	mov	ip, r0
 800c438:	fbb5 f7f2 	udiv	r7, r5, r2
 800c43c:	fb02 5617 	mls	r6, r2, r7, r5
 800c440:	3628      	adds	r6, #40	; 0x28
 800c442:	446e      	add	r6, sp
 800c444:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c448:	460c      	mov	r4, r1
 800c44a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c44e:	462e      	mov	r6, r5
 800c450:	42b2      	cmp	r2, r6
 800c452:	463d      	mov	r5, r7
 800c454:	f101 0101 	add.w	r1, r1, #1
 800c458:	d9ee      	bls.n	800c438 <__utoa+0x40>
 800c45a:	2200      	movs	r2, #0
 800c45c:	545a      	strb	r2, [r3, r1]
 800c45e:	1919      	adds	r1, r3, r4
 800c460:	1aa5      	subs	r5, r4, r2
 800c462:	42aa      	cmp	r2, r5
 800c464:	dae3      	bge.n	800c42e <__utoa+0x36>
 800c466:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c46a:	780e      	ldrb	r6, [r1, #0]
 800c46c:	3201      	adds	r2, #1
 800c46e:	7006      	strb	r6, [r0, #0]
 800c470:	f801 5901 	strb.w	r5, [r1], #-1
 800c474:	e7f4      	b.n	800c460 <__utoa+0x68>
 800c476:	bf00      	nop
 800c478:	0800dcea 	.word	0x0800dcea

0800c47c <strcat>:
 800c47c:	4602      	mov	r2, r0
 800c47e:	b510      	push	{r4, lr}
 800c480:	7814      	ldrb	r4, [r2, #0]
 800c482:	4613      	mov	r3, r2
 800c484:	3201      	adds	r2, #1
 800c486:	2c00      	cmp	r4, #0
 800c488:	d1fa      	bne.n	800c480 <strcat+0x4>
 800c48a:	3b01      	subs	r3, #1
 800c48c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c490:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c494:	2a00      	cmp	r2, #0
 800c496:	d1f9      	bne.n	800c48c <strcat+0x10>
 800c498:	bd10      	pop	{r4, pc}

0800c49a <strstr>:
 800c49a:	780a      	ldrb	r2, [r1, #0]
 800c49c:	b570      	push	{r4, r5, r6, lr}
 800c49e:	b96a      	cbnz	r2, 800c4bc <strstr+0x22>
 800c4a0:	bd70      	pop	{r4, r5, r6, pc}
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d109      	bne.n	800c4ba <strstr+0x20>
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d0f6      	beq.n	800c4a0 <strstr+0x6>
 800c4b2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c4b6:	429e      	cmp	r6, r3
 800c4b8:	d0f7      	beq.n	800c4aa <strstr+0x10>
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	7803      	ldrb	r3, [r0, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1ef      	bne.n	800c4a2 <strstr+0x8>
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	e7ec      	b.n	800c4a0 <strstr+0x6>

0800c4c6 <memset>:
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	4402      	add	r2, r0
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d100      	bne.n	800c4d0 <memset+0xa>
 800c4ce:	4770      	bx	lr
 800c4d0:	f803 1b01 	strb.w	r1, [r3], #1
 800c4d4:	e7f9      	b.n	800c4ca <memset+0x4>
	...

0800c4d8 <_sbrk_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	2300      	movs	r3, #0
 800c4dc:	4d05      	ldr	r5, [pc, #20]	; (800c4f4 <_sbrk_r+0x1c>)
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	602b      	str	r3, [r5, #0]
 800c4e4:	f7fb ff62 	bl	80083ac <_sbrk>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_sbrk_r+0x1a>
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_sbrk_r+0x1a>
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	200004c0 	.word	0x200004c0

0800c4f8 <__errno>:
 800c4f8:	4b01      	ldr	r3, [pc, #4]	; (800c500 <__errno+0x8>)
 800c4fa:	6818      	ldr	r0, [r3, #0]
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	2000010c 	.word	0x2000010c

0800c504 <__libc_init_array>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	2600      	movs	r6, #0
 800c508:	4d0c      	ldr	r5, [pc, #48]	; (800c53c <__libc_init_array+0x38>)
 800c50a:	4c0d      	ldr	r4, [pc, #52]	; (800c540 <__libc_init_array+0x3c>)
 800c50c:	1b64      	subs	r4, r4, r5
 800c50e:	10a4      	asrs	r4, r4, #2
 800c510:	42a6      	cmp	r6, r4
 800c512:	d109      	bne.n	800c528 <__libc_init_array+0x24>
 800c514:	f000 fbc6 	bl	800cca4 <_init>
 800c518:	2600      	movs	r6, #0
 800c51a:	4d0a      	ldr	r5, [pc, #40]	; (800c544 <__libc_init_array+0x40>)
 800c51c:	4c0a      	ldr	r4, [pc, #40]	; (800c548 <__libc_init_array+0x44>)
 800c51e:	1b64      	subs	r4, r4, r5
 800c520:	10a4      	asrs	r4, r4, #2
 800c522:	42a6      	cmp	r6, r4
 800c524:	d105      	bne.n	800c532 <__libc_init_array+0x2e>
 800c526:	bd70      	pop	{r4, r5, r6, pc}
 800c528:	f855 3b04 	ldr.w	r3, [r5], #4
 800c52c:	4798      	blx	r3
 800c52e:	3601      	adds	r6, #1
 800c530:	e7ee      	b.n	800c510 <__libc_init_array+0xc>
 800c532:	f855 3b04 	ldr.w	r3, [r5], #4
 800c536:	4798      	blx	r3
 800c538:	3601      	adds	r6, #1
 800c53a:	e7f2      	b.n	800c522 <__libc_init_array+0x1e>
 800c53c:	0800dd44 	.word	0x0800dd44
 800c540:	0800dd44 	.word	0x0800dd44
 800c544:	0800dd44 	.word	0x0800dd44
 800c548:	0800dd48 	.word	0x0800dd48

0800c54c <__retarget_lock_acquire_recursive>:
 800c54c:	4770      	bx	lr

0800c54e <__retarget_lock_release_recursive>:
 800c54e:	4770      	bx	lr

0800c550 <strcpy>:
 800c550:	4603      	mov	r3, r0
 800c552:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c556:	f803 2b01 	strb.w	r2, [r3], #1
 800c55a:	2a00      	cmp	r2, #0
 800c55c:	d1f9      	bne.n	800c552 <strcpy+0x2>
 800c55e:	4770      	bx	lr

0800c560 <_free_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4605      	mov	r5, r0
 800c564:	2900      	cmp	r1, #0
 800c566:	d040      	beq.n	800c5ea <_free_r+0x8a>
 800c568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c56c:	1f0c      	subs	r4, r1, #4
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bfb8      	it	lt
 800c572:	18e4      	addlt	r4, r4, r3
 800c574:	f7ff ff14 	bl	800c3a0 <__malloc_lock>
 800c578:	4a1c      	ldr	r2, [pc, #112]	; (800c5ec <_free_r+0x8c>)
 800c57a:	6813      	ldr	r3, [r2, #0]
 800c57c:	b933      	cbnz	r3, 800c58c <_free_r+0x2c>
 800c57e:	6063      	str	r3, [r4, #4]
 800c580:	6014      	str	r4, [r2, #0]
 800c582:	4628      	mov	r0, r5
 800c584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c588:	f7ff bf10 	b.w	800c3ac <__malloc_unlock>
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d908      	bls.n	800c5a2 <_free_r+0x42>
 800c590:	6820      	ldr	r0, [r4, #0]
 800c592:	1821      	adds	r1, r4, r0
 800c594:	428b      	cmp	r3, r1
 800c596:	bf01      	itttt	eq
 800c598:	6819      	ldreq	r1, [r3, #0]
 800c59a:	685b      	ldreq	r3, [r3, #4]
 800c59c:	1809      	addeq	r1, r1, r0
 800c59e:	6021      	streq	r1, [r4, #0]
 800c5a0:	e7ed      	b.n	800c57e <_free_r+0x1e>
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	b10b      	cbz	r3, 800c5ac <_free_r+0x4c>
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d9fa      	bls.n	800c5a2 <_free_r+0x42>
 800c5ac:	6811      	ldr	r1, [r2, #0]
 800c5ae:	1850      	adds	r0, r2, r1
 800c5b0:	42a0      	cmp	r0, r4
 800c5b2:	d10b      	bne.n	800c5cc <_free_r+0x6c>
 800c5b4:	6820      	ldr	r0, [r4, #0]
 800c5b6:	4401      	add	r1, r0
 800c5b8:	1850      	adds	r0, r2, r1
 800c5ba:	4283      	cmp	r3, r0
 800c5bc:	6011      	str	r1, [r2, #0]
 800c5be:	d1e0      	bne.n	800c582 <_free_r+0x22>
 800c5c0:	6818      	ldr	r0, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4408      	add	r0, r1
 800c5c6:	6010      	str	r0, [r2, #0]
 800c5c8:	6053      	str	r3, [r2, #4]
 800c5ca:	e7da      	b.n	800c582 <_free_r+0x22>
 800c5cc:	d902      	bls.n	800c5d4 <_free_r+0x74>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	602b      	str	r3, [r5, #0]
 800c5d2:	e7d6      	b.n	800c582 <_free_r+0x22>
 800c5d4:	6820      	ldr	r0, [r4, #0]
 800c5d6:	1821      	adds	r1, r4, r0
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf01      	itttt	eq
 800c5dc:	6819      	ldreq	r1, [r3, #0]
 800c5de:	685b      	ldreq	r3, [r3, #4]
 800c5e0:	1809      	addeq	r1, r1, r0
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	6063      	str	r3, [r4, #4]
 800c5e6:	6054      	str	r4, [r2, #4]
 800c5e8:	e7cb      	b.n	800c582 <_free_r+0x22>
 800c5ea:	bd38      	pop	{r3, r4, r5, pc}
 800c5ec:	2000037c 	.word	0x2000037c

0800c5f0 <__ssputs_r>:
 800c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f4:	461f      	mov	r7, r3
 800c5f6:	688e      	ldr	r6, [r1, #8]
 800c5f8:	4682      	mov	sl, r0
 800c5fa:	42be      	cmp	r6, r7
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	4690      	mov	r8, r2
 800c600:	680b      	ldr	r3, [r1, #0]
 800c602:	d82c      	bhi.n	800c65e <__ssputs_r+0x6e>
 800c604:	898a      	ldrh	r2, [r1, #12]
 800c606:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c60a:	d026      	beq.n	800c65a <__ssputs_r+0x6a>
 800c60c:	6965      	ldr	r5, [r4, #20]
 800c60e:	6909      	ldr	r1, [r1, #16]
 800c610:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c614:	eba3 0901 	sub.w	r9, r3, r1
 800c618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c61c:	1c7b      	adds	r3, r7, #1
 800c61e:	444b      	add	r3, r9
 800c620:	106d      	asrs	r5, r5, #1
 800c622:	429d      	cmp	r5, r3
 800c624:	bf38      	it	cc
 800c626:	461d      	movcc	r5, r3
 800c628:	0553      	lsls	r3, r2, #21
 800c62a:	d527      	bpl.n	800c67c <__ssputs_r+0x8c>
 800c62c:	4629      	mov	r1, r5
 800c62e:	f7ff fe03 	bl	800c238 <_malloc_r>
 800c632:	4606      	mov	r6, r0
 800c634:	b360      	cbz	r0, 800c690 <__ssputs_r+0xa0>
 800c636:	464a      	mov	r2, r9
 800c638:	6921      	ldr	r1, [r4, #16]
 800c63a:	f000 fb1c 	bl	800cc76 <memcpy>
 800c63e:	89a3      	ldrh	r3, [r4, #12]
 800c640:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c648:	81a3      	strh	r3, [r4, #12]
 800c64a:	6126      	str	r6, [r4, #16]
 800c64c:	444e      	add	r6, r9
 800c64e:	6026      	str	r6, [r4, #0]
 800c650:	463e      	mov	r6, r7
 800c652:	6165      	str	r5, [r4, #20]
 800c654:	eba5 0509 	sub.w	r5, r5, r9
 800c658:	60a5      	str	r5, [r4, #8]
 800c65a:	42be      	cmp	r6, r7
 800c65c:	d900      	bls.n	800c660 <__ssputs_r+0x70>
 800c65e:	463e      	mov	r6, r7
 800c660:	4632      	mov	r2, r6
 800c662:	4641      	mov	r1, r8
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	f000 fade 	bl	800cc26 <memmove>
 800c66a:	2000      	movs	r0, #0
 800c66c:	68a3      	ldr	r3, [r4, #8]
 800c66e:	1b9b      	subs	r3, r3, r6
 800c670:	60a3      	str	r3, [r4, #8]
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	4433      	add	r3, r6
 800c676:	6023      	str	r3, [r4, #0]
 800c678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67c:	462a      	mov	r2, r5
 800c67e:	f000 faa3 	bl	800cbc8 <_realloc_r>
 800c682:	4606      	mov	r6, r0
 800c684:	2800      	cmp	r0, #0
 800c686:	d1e0      	bne.n	800c64a <__ssputs_r+0x5a>
 800c688:	4650      	mov	r0, sl
 800c68a:	6921      	ldr	r1, [r4, #16]
 800c68c:	f7ff ff68 	bl	800c560 <_free_r>
 800c690:	230c      	movs	r3, #12
 800c692:	f8ca 3000 	str.w	r3, [sl]
 800c696:	89a3      	ldrh	r3, [r4, #12]
 800c698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	e7e9      	b.n	800c678 <__ssputs_r+0x88>

0800c6a4 <_svfiprintf_r>:
 800c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	4698      	mov	r8, r3
 800c6aa:	898b      	ldrh	r3, [r1, #12]
 800c6ac:	4607      	mov	r7, r0
 800c6ae:	061b      	lsls	r3, r3, #24
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	4614      	mov	r4, r2
 800c6b4:	b09d      	sub	sp, #116	; 0x74
 800c6b6:	d50e      	bpl.n	800c6d6 <_svfiprintf_r+0x32>
 800c6b8:	690b      	ldr	r3, [r1, #16]
 800c6ba:	b963      	cbnz	r3, 800c6d6 <_svfiprintf_r+0x32>
 800c6bc:	2140      	movs	r1, #64	; 0x40
 800c6be:	f7ff fdbb 	bl	800c238 <_malloc_r>
 800c6c2:	6028      	str	r0, [r5, #0]
 800c6c4:	6128      	str	r0, [r5, #16]
 800c6c6:	b920      	cbnz	r0, 800c6d2 <_svfiprintf_r+0x2e>
 800c6c8:	230c      	movs	r3, #12
 800c6ca:	603b      	str	r3, [r7, #0]
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6d0:	e0d0      	b.n	800c874 <_svfiprintf_r+0x1d0>
 800c6d2:	2340      	movs	r3, #64	; 0x40
 800c6d4:	616b      	str	r3, [r5, #20]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c6da:	2320      	movs	r3, #32
 800c6dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6e0:	2330      	movs	r3, #48	; 0x30
 800c6e2:	f04f 0901 	mov.w	r9, #1
 800c6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c88c <_svfiprintf_r+0x1e8>
 800c6ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6f2:	4623      	mov	r3, r4
 800c6f4:	469a      	mov	sl, r3
 800c6f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6fa:	b10a      	cbz	r2, 800c700 <_svfiprintf_r+0x5c>
 800c6fc:	2a25      	cmp	r2, #37	; 0x25
 800c6fe:	d1f9      	bne.n	800c6f4 <_svfiprintf_r+0x50>
 800c700:	ebba 0b04 	subs.w	fp, sl, r4
 800c704:	d00b      	beq.n	800c71e <_svfiprintf_r+0x7a>
 800c706:	465b      	mov	r3, fp
 800c708:	4622      	mov	r2, r4
 800c70a:	4629      	mov	r1, r5
 800c70c:	4638      	mov	r0, r7
 800c70e:	f7ff ff6f 	bl	800c5f0 <__ssputs_r>
 800c712:	3001      	adds	r0, #1
 800c714:	f000 80a9 	beq.w	800c86a <_svfiprintf_r+0x1c6>
 800c718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c71a:	445a      	add	r2, fp
 800c71c:	9209      	str	r2, [sp, #36]	; 0x24
 800c71e:	f89a 3000 	ldrb.w	r3, [sl]
 800c722:	2b00      	cmp	r3, #0
 800c724:	f000 80a1 	beq.w	800c86a <_svfiprintf_r+0x1c6>
 800c728:	2300      	movs	r3, #0
 800c72a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c72e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c732:	f10a 0a01 	add.w	sl, sl, #1
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	9307      	str	r3, [sp, #28]
 800c73a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c73e:	931a      	str	r3, [sp, #104]	; 0x68
 800c740:	4654      	mov	r4, sl
 800c742:	2205      	movs	r2, #5
 800c744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c748:	4850      	ldr	r0, [pc, #320]	; (800c88c <_svfiprintf_r+0x1e8>)
 800c74a:	f000 fa86 	bl	800cc5a <memchr>
 800c74e:	9a04      	ldr	r2, [sp, #16]
 800c750:	b9d8      	cbnz	r0, 800c78a <_svfiprintf_r+0xe6>
 800c752:	06d0      	lsls	r0, r2, #27
 800c754:	bf44      	itt	mi
 800c756:	2320      	movmi	r3, #32
 800c758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c75c:	0711      	lsls	r1, r2, #28
 800c75e:	bf44      	itt	mi
 800c760:	232b      	movmi	r3, #43	; 0x2b
 800c762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c766:	f89a 3000 	ldrb.w	r3, [sl]
 800c76a:	2b2a      	cmp	r3, #42	; 0x2a
 800c76c:	d015      	beq.n	800c79a <_svfiprintf_r+0xf6>
 800c76e:	4654      	mov	r4, sl
 800c770:	2000      	movs	r0, #0
 800c772:	f04f 0c0a 	mov.w	ip, #10
 800c776:	9a07      	ldr	r2, [sp, #28]
 800c778:	4621      	mov	r1, r4
 800c77a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c77e:	3b30      	subs	r3, #48	; 0x30
 800c780:	2b09      	cmp	r3, #9
 800c782:	d94d      	bls.n	800c820 <_svfiprintf_r+0x17c>
 800c784:	b1b0      	cbz	r0, 800c7b4 <_svfiprintf_r+0x110>
 800c786:	9207      	str	r2, [sp, #28]
 800c788:	e014      	b.n	800c7b4 <_svfiprintf_r+0x110>
 800c78a:	eba0 0308 	sub.w	r3, r0, r8
 800c78e:	fa09 f303 	lsl.w	r3, r9, r3
 800c792:	4313      	orrs	r3, r2
 800c794:	46a2      	mov	sl, r4
 800c796:	9304      	str	r3, [sp, #16]
 800c798:	e7d2      	b.n	800c740 <_svfiprintf_r+0x9c>
 800c79a:	9b03      	ldr	r3, [sp, #12]
 800c79c:	1d19      	adds	r1, r3, #4
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	9103      	str	r1, [sp, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	bfbb      	ittet	lt
 800c7a6:	425b      	neglt	r3, r3
 800c7a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c7ac:	9307      	strge	r3, [sp, #28]
 800c7ae:	9307      	strlt	r3, [sp, #28]
 800c7b0:	bfb8      	it	lt
 800c7b2:	9204      	strlt	r2, [sp, #16]
 800c7b4:	7823      	ldrb	r3, [r4, #0]
 800c7b6:	2b2e      	cmp	r3, #46	; 0x2e
 800c7b8:	d10c      	bne.n	800c7d4 <_svfiprintf_r+0x130>
 800c7ba:	7863      	ldrb	r3, [r4, #1]
 800c7bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c7be:	d134      	bne.n	800c82a <_svfiprintf_r+0x186>
 800c7c0:	9b03      	ldr	r3, [sp, #12]
 800c7c2:	3402      	adds	r4, #2
 800c7c4:	1d1a      	adds	r2, r3, #4
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	9203      	str	r2, [sp, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	bfb8      	it	lt
 800c7ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7d2:	9305      	str	r3, [sp, #20]
 800c7d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c890 <_svfiprintf_r+0x1ec>
 800c7d8:	2203      	movs	r2, #3
 800c7da:	4650      	mov	r0, sl
 800c7dc:	7821      	ldrb	r1, [r4, #0]
 800c7de:	f000 fa3c 	bl	800cc5a <memchr>
 800c7e2:	b138      	cbz	r0, 800c7f4 <_svfiprintf_r+0x150>
 800c7e4:	2240      	movs	r2, #64	; 0x40
 800c7e6:	9b04      	ldr	r3, [sp, #16]
 800c7e8:	eba0 000a 	sub.w	r0, r0, sl
 800c7ec:	4082      	lsls	r2, r0
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	3401      	adds	r4, #1
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f8:	2206      	movs	r2, #6
 800c7fa:	4826      	ldr	r0, [pc, #152]	; (800c894 <_svfiprintf_r+0x1f0>)
 800c7fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c800:	f000 fa2b 	bl	800cc5a <memchr>
 800c804:	2800      	cmp	r0, #0
 800c806:	d038      	beq.n	800c87a <_svfiprintf_r+0x1d6>
 800c808:	4b23      	ldr	r3, [pc, #140]	; (800c898 <_svfiprintf_r+0x1f4>)
 800c80a:	bb1b      	cbnz	r3, 800c854 <_svfiprintf_r+0x1b0>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	3307      	adds	r3, #7
 800c810:	f023 0307 	bic.w	r3, r3, #7
 800c814:	3308      	adds	r3, #8
 800c816:	9303      	str	r3, [sp, #12]
 800c818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c81a:	4433      	add	r3, r6
 800c81c:	9309      	str	r3, [sp, #36]	; 0x24
 800c81e:	e768      	b.n	800c6f2 <_svfiprintf_r+0x4e>
 800c820:	460c      	mov	r4, r1
 800c822:	2001      	movs	r0, #1
 800c824:	fb0c 3202 	mla	r2, ip, r2, r3
 800c828:	e7a6      	b.n	800c778 <_svfiprintf_r+0xd4>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f04f 0c0a 	mov.w	ip, #10
 800c830:	4619      	mov	r1, r3
 800c832:	3401      	adds	r4, #1
 800c834:	9305      	str	r3, [sp, #20]
 800c836:	4620      	mov	r0, r4
 800c838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c83c:	3a30      	subs	r2, #48	; 0x30
 800c83e:	2a09      	cmp	r2, #9
 800c840:	d903      	bls.n	800c84a <_svfiprintf_r+0x1a6>
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0c6      	beq.n	800c7d4 <_svfiprintf_r+0x130>
 800c846:	9105      	str	r1, [sp, #20]
 800c848:	e7c4      	b.n	800c7d4 <_svfiprintf_r+0x130>
 800c84a:	4604      	mov	r4, r0
 800c84c:	2301      	movs	r3, #1
 800c84e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c852:	e7f0      	b.n	800c836 <_svfiprintf_r+0x192>
 800c854:	ab03      	add	r3, sp, #12
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	462a      	mov	r2, r5
 800c85a:	4638      	mov	r0, r7
 800c85c:	4b0f      	ldr	r3, [pc, #60]	; (800c89c <_svfiprintf_r+0x1f8>)
 800c85e:	a904      	add	r1, sp, #16
 800c860:	f3af 8000 	nop.w
 800c864:	1c42      	adds	r2, r0, #1
 800c866:	4606      	mov	r6, r0
 800c868:	d1d6      	bne.n	800c818 <_svfiprintf_r+0x174>
 800c86a:	89ab      	ldrh	r3, [r5, #12]
 800c86c:	065b      	lsls	r3, r3, #25
 800c86e:	f53f af2d 	bmi.w	800c6cc <_svfiprintf_r+0x28>
 800c872:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c874:	b01d      	add	sp, #116	; 0x74
 800c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87a:	ab03      	add	r3, sp, #12
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	462a      	mov	r2, r5
 800c880:	4638      	mov	r0, r7
 800c882:	4b06      	ldr	r3, [pc, #24]	; (800c89c <_svfiprintf_r+0x1f8>)
 800c884:	a904      	add	r1, sp, #16
 800c886:	f000 f87d 	bl	800c984 <_printf_i>
 800c88a:	e7eb      	b.n	800c864 <_svfiprintf_r+0x1c0>
 800c88c:	0800dd0f 	.word	0x0800dd0f
 800c890:	0800dd15 	.word	0x0800dd15
 800c894:	0800dd19 	.word	0x0800dd19
 800c898:	00000000 	.word	0x00000000
 800c89c:	0800c5f1 	.word	0x0800c5f1

0800c8a0 <_printf_common>:
 800c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	4616      	mov	r6, r2
 800c8a6:	4699      	mov	r9, r3
 800c8a8:	688a      	ldr	r2, [r1, #8]
 800c8aa:	690b      	ldr	r3, [r1, #16]
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	bfb8      	it	lt
 800c8b2:	4613      	movlt	r3, r2
 800c8b4:	6033      	str	r3, [r6, #0]
 800c8b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8c0:	b10a      	cbz	r2, 800c8c6 <_printf_common+0x26>
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	6033      	str	r3, [r6, #0]
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	0699      	lsls	r1, r3, #26
 800c8ca:	bf42      	ittt	mi
 800c8cc:	6833      	ldrmi	r3, [r6, #0]
 800c8ce:	3302      	addmi	r3, #2
 800c8d0:	6033      	strmi	r3, [r6, #0]
 800c8d2:	6825      	ldr	r5, [r4, #0]
 800c8d4:	f015 0506 	ands.w	r5, r5, #6
 800c8d8:	d106      	bne.n	800c8e8 <_printf_common+0x48>
 800c8da:	f104 0a19 	add.w	sl, r4, #25
 800c8de:	68e3      	ldr	r3, [r4, #12]
 800c8e0:	6832      	ldr	r2, [r6, #0]
 800c8e2:	1a9b      	subs	r3, r3, r2
 800c8e4:	42ab      	cmp	r3, r5
 800c8e6:	dc2b      	bgt.n	800c940 <_printf_common+0xa0>
 800c8e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8ec:	1e13      	subs	r3, r2, #0
 800c8ee:	6822      	ldr	r2, [r4, #0]
 800c8f0:	bf18      	it	ne
 800c8f2:	2301      	movne	r3, #1
 800c8f4:	0692      	lsls	r2, r2, #26
 800c8f6:	d430      	bmi.n	800c95a <_printf_common+0xba>
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c900:	47c0      	blx	r8
 800c902:	3001      	adds	r0, #1
 800c904:	d023      	beq.n	800c94e <_printf_common+0xae>
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	6922      	ldr	r2, [r4, #16]
 800c90a:	f003 0306 	and.w	r3, r3, #6
 800c90e:	2b04      	cmp	r3, #4
 800c910:	bf14      	ite	ne
 800c912:	2500      	movne	r5, #0
 800c914:	6833      	ldreq	r3, [r6, #0]
 800c916:	f04f 0600 	mov.w	r6, #0
 800c91a:	bf08      	it	eq
 800c91c:	68e5      	ldreq	r5, [r4, #12]
 800c91e:	f104 041a 	add.w	r4, r4, #26
 800c922:	bf08      	it	eq
 800c924:	1aed      	subeq	r5, r5, r3
 800c926:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c92a:	bf08      	it	eq
 800c92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c930:	4293      	cmp	r3, r2
 800c932:	bfc4      	itt	gt
 800c934:	1a9b      	subgt	r3, r3, r2
 800c936:	18ed      	addgt	r5, r5, r3
 800c938:	42b5      	cmp	r5, r6
 800c93a:	d11a      	bne.n	800c972 <_printf_common+0xd2>
 800c93c:	2000      	movs	r0, #0
 800c93e:	e008      	b.n	800c952 <_printf_common+0xb2>
 800c940:	2301      	movs	r3, #1
 800c942:	4652      	mov	r2, sl
 800c944:	4649      	mov	r1, r9
 800c946:	4638      	mov	r0, r7
 800c948:	47c0      	blx	r8
 800c94a:	3001      	adds	r0, #1
 800c94c:	d103      	bne.n	800c956 <_printf_common+0xb6>
 800c94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c956:	3501      	adds	r5, #1
 800c958:	e7c1      	b.n	800c8de <_printf_common+0x3e>
 800c95a:	2030      	movs	r0, #48	; 0x30
 800c95c:	18e1      	adds	r1, r4, r3
 800c95e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c968:	4422      	add	r2, r4
 800c96a:	3302      	adds	r3, #2
 800c96c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c970:	e7c2      	b.n	800c8f8 <_printf_common+0x58>
 800c972:	2301      	movs	r3, #1
 800c974:	4622      	mov	r2, r4
 800c976:	4649      	mov	r1, r9
 800c978:	4638      	mov	r0, r7
 800c97a:	47c0      	blx	r8
 800c97c:	3001      	adds	r0, #1
 800c97e:	d0e6      	beq.n	800c94e <_printf_common+0xae>
 800c980:	3601      	adds	r6, #1
 800c982:	e7d9      	b.n	800c938 <_printf_common+0x98>

0800c984 <_printf_i>:
 800c984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c988:	7e0f      	ldrb	r7, [r1, #24]
 800c98a:	4691      	mov	r9, r2
 800c98c:	2f78      	cmp	r7, #120	; 0x78
 800c98e:	4680      	mov	r8, r0
 800c990:	460c      	mov	r4, r1
 800c992:	469a      	mov	sl, r3
 800c994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c99a:	d807      	bhi.n	800c9ac <_printf_i+0x28>
 800c99c:	2f62      	cmp	r7, #98	; 0x62
 800c99e:	d80a      	bhi.n	800c9b6 <_printf_i+0x32>
 800c9a0:	2f00      	cmp	r7, #0
 800c9a2:	f000 80d5 	beq.w	800cb50 <_printf_i+0x1cc>
 800c9a6:	2f58      	cmp	r7, #88	; 0x58
 800c9a8:	f000 80c1 	beq.w	800cb2e <_printf_i+0x1aa>
 800c9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9b4:	e03a      	b.n	800ca2c <_printf_i+0xa8>
 800c9b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9ba:	2b15      	cmp	r3, #21
 800c9bc:	d8f6      	bhi.n	800c9ac <_printf_i+0x28>
 800c9be:	a101      	add	r1, pc, #4	; (adr r1, 800c9c4 <_printf_i+0x40>)
 800c9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9c4:	0800ca1d 	.word	0x0800ca1d
 800c9c8:	0800ca31 	.word	0x0800ca31
 800c9cc:	0800c9ad 	.word	0x0800c9ad
 800c9d0:	0800c9ad 	.word	0x0800c9ad
 800c9d4:	0800c9ad 	.word	0x0800c9ad
 800c9d8:	0800c9ad 	.word	0x0800c9ad
 800c9dc:	0800ca31 	.word	0x0800ca31
 800c9e0:	0800c9ad 	.word	0x0800c9ad
 800c9e4:	0800c9ad 	.word	0x0800c9ad
 800c9e8:	0800c9ad 	.word	0x0800c9ad
 800c9ec:	0800c9ad 	.word	0x0800c9ad
 800c9f0:	0800cb37 	.word	0x0800cb37
 800c9f4:	0800ca5d 	.word	0x0800ca5d
 800c9f8:	0800caf1 	.word	0x0800caf1
 800c9fc:	0800c9ad 	.word	0x0800c9ad
 800ca00:	0800c9ad 	.word	0x0800c9ad
 800ca04:	0800cb59 	.word	0x0800cb59
 800ca08:	0800c9ad 	.word	0x0800c9ad
 800ca0c:	0800ca5d 	.word	0x0800ca5d
 800ca10:	0800c9ad 	.word	0x0800c9ad
 800ca14:	0800c9ad 	.word	0x0800c9ad
 800ca18:	0800caf9 	.word	0x0800caf9
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	1d1a      	adds	r2, r3, #4
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	602a      	str	r2, [r5, #0]
 800ca24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e0a0      	b.n	800cb72 <_printf_i+0x1ee>
 800ca30:	6820      	ldr	r0, [r4, #0]
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	0607      	lsls	r7, r0, #24
 800ca36:	f103 0104 	add.w	r1, r3, #4
 800ca3a:	6029      	str	r1, [r5, #0]
 800ca3c:	d501      	bpl.n	800ca42 <_printf_i+0xbe>
 800ca3e:	681e      	ldr	r6, [r3, #0]
 800ca40:	e003      	b.n	800ca4a <_printf_i+0xc6>
 800ca42:	0646      	lsls	r6, r0, #25
 800ca44:	d5fb      	bpl.n	800ca3e <_printf_i+0xba>
 800ca46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca4a:	2e00      	cmp	r6, #0
 800ca4c:	da03      	bge.n	800ca56 <_printf_i+0xd2>
 800ca4e:	232d      	movs	r3, #45	; 0x2d
 800ca50:	4276      	negs	r6, r6
 800ca52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca56:	230a      	movs	r3, #10
 800ca58:	4859      	ldr	r0, [pc, #356]	; (800cbc0 <_printf_i+0x23c>)
 800ca5a:	e012      	b.n	800ca82 <_printf_i+0xfe>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	6820      	ldr	r0, [r4, #0]
 800ca60:	1d19      	adds	r1, r3, #4
 800ca62:	6029      	str	r1, [r5, #0]
 800ca64:	0605      	lsls	r5, r0, #24
 800ca66:	d501      	bpl.n	800ca6c <_printf_i+0xe8>
 800ca68:	681e      	ldr	r6, [r3, #0]
 800ca6a:	e002      	b.n	800ca72 <_printf_i+0xee>
 800ca6c:	0641      	lsls	r1, r0, #25
 800ca6e:	d5fb      	bpl.n	800ca68 <_printf_i+0xe4>
 800ca70:	881e      	ldrh	r6, [r3, #0]
 800ca72:	2f6f      	cmp	r7, #111	; 0x6f
 800ca74:	bf0c      	ite	eq
 800ca76:	2308      	moveq	r3, #8
 800ca78:	230a      	movne	r3, #10
 800ca7a:	4851      	ldr	r0, [pc, #324]	; (800cbc0 <_printf_i+0x23c>)
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca82:	6865      	ldr	r5, [r4, #4]
 800ca84:	2d00      	cmp	r5, #0
 800ca86:	bfa8      	it	ge
 800ca88:	6821      	ldrge	r1, [r4, #0]
 800ca8a:	60a5      	str	r5, [r4, #8]
 800ca8c:	bfa4      	itt	ge
 800ca8e:	f021 0104 	bicge.w	r1, r1, #4
 800ca92:	6021      	strge	r1, [r4, #0]
 800ca94:	b90e      	cbnz	r6, 800ca9a <_printf_i+0x116>
 800ca96:	2d00      	cmp	r5, #0
 800ca98:	d04b      	beq.n	800cb32 <_printf_i+0x1ae>
 800ca9a:	4615      	mov	r5, r2
 800ca9c:	fbb6 f1f3 	udiv	r1, r6, r3
 800caa0:	fb03 6711 	mls	r7, r3, r1, r6
 800caa4:	5dc7      	ldrb	r7, [r0, r7]
 800caa6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caaa:	4637      	mov	r7, r6
 800caac:	42bb      	cmp	r3, r7
 800caae:	460e      	mov	r6, r1
 800cab0:	d9f4      	bls.n	800ca9c <_printf_i+0x118>
 800cab2:	2b08      	cmp	r3, #8
 800cab4:	d10b      	bne.n	800cace <_printf_i+0x14a>
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	07de      	lsls	r6, r3, #31
 800caba:	d508      	bpl.n	800cace <_printf_i+0x14a>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	6861      	ldr	r1, [r4, #4]
 800cac0:	4299      	cmp	r1, r3
 800cac2:	bfde      	ittt	le
 800cac4:	2330      	movle	r3, #48	; 0x30
 800cac6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800caca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cace:	1b52      	subs	r2, r2, r5
 800cad0:	6122      	str	r2, [r4, #16]
 800cad2:	464b      	mov	r3, r9
 800cad4:	4621      	mov	r1, r4
 800cad6:	4640      	mov	r0, r8
 800cad8:	f8cd a000 	str.w	sl, [sp]
 800cadc:	aa03      	add	r2, sp, #12
 800cade:	f7ff fedf 	bl	800c8a0 <_printf_common>
 800cae2:	3001      	adds	r0, #1
 800cae4:	d14a      	bne.n	800cb7c <_printf_i+0x1f8>
 800cae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caea:	b004      	add	sp, #16
 800caec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	f043 0320 	orr.w	r3, r3, #32
 800caf6:	6023      	str	r3, [r4, #0]
 800caf8:	2778      	movs	r7, #120	; 0x78
 800cafa:	4832      	ldr	r0, [pc, #200]	; (800cbc4 <_printf_i+0x240>)
 800cafc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	6829      	ldr	r1, [r5, #0]
 800cb04:	061f      	lsls	r7, r3, #24
 800cb06:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb0a:	d402      	bmi.n	800cb12 <_printf_i+0x18e>
 800cb0c:	065f      	lsls	r7, r3, #25
 800cb0e:	bf48      	it	mi
 800cb10:	b2b6      	uxthmi	r6, r6
 800cb12:	07df      	lsls	r7, r3, #31
 800cb14:	bf48      	it	mi
 800cb16:	f043 0320 	orrmi.w	r3, r3, #32
 800cb1a:	6029      	str	r1, [r5, #0]
 800cb1c:	bf48      	it	mi
 800cb1e:	6023      	strmi	r3, [r4, #0]
 800cb20:	b91e      	cbnz	r6, 800cb2a <_printf_i+0x1a6>
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	f023 0320 	bic.w	r3, r3, #32
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	2310      	movs	r3, #16
 800cb2c:	e7a6      	b.n	800ca7c <_printf_i+0xf8>
 800cb2e:	4824      	ldr	r0, [pc, #144]	; (800cbc0 <_printf_i+0x23c>)
 800cb30:	e7e4      	b.n	800cafc <_printf_i+0x178>
 800cb32:	4615      	mov	r5, r2
 800cb34:	e7bd      	b.n	800cab2 <_printf_i+0x12e>
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	6826      	ldr	r6, [r4, #0]
 800cb3a:	1d18      	adds	r0, r3, #4
 800cb3c:	6961      	ldr	r1, [r4, #20]
 800cb3e:	6028      	str	r0, [r5, #0]
 800cb40:	0635      	lsls	r5, r6, #24
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	d501      	bpl.n	800cb4a <_printf_i+0x1c6>
 800cb46:	6019      	str	r1, [r3, #0]
 800cb48:	e002      	b.n	800cb50 <_printf_i+0x1cc>
 800cb4a:	0670      	lsls	r0, r6, #25
 800cb4c:	d5fb      	bpl.n	800cb46 <_printf_i+0x1c2>
 800cb4e:	8019      	strh	r1, [r3, #0]
 800cb50:	2300      	movs	r3, #0
 800cb52:	4615      	mov	r5, r2
 800cb54:	6123      	str	r3, [r4, #16]
 800cb56:	e7bc      	b.n	800cad2 <_printf_i+0x14e>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	1d1a      	adds	r2, r3, #4
 800cb5e:	602a      	str	r2, [r5, #0]
 800cb60:	681d      	ldr	r5, [r3, #0]
 800cb62:	6862      	ldr	r2, [r4, #4]
 800cb64:	4628      	mov	r0, r5
 800cb66:	f000 f878 	bl	800cc5a <memchr>
 800cb6a:	b108      	cbz	r0, 800cb70 <_printf_i+0x1ec>
 800cb6c:	1b40      	subs	r0, r0, r5
 800cb6e:	6060      	str	r0, [r4, #4]
 800cb70:	6863      	ldr	r3, [r4, #4]
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	2300      	movs	r3, #0
 800cb76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb7a:	e7aa      	b.n	800cad2 <_printf_i+0x14e>
 800cb7c:	462a      	mov	r2, r5
 800cb7e:	4649      	mov	r1, r9
 800cb80:	4640      	mov	r0, r8
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	47d0      	blx	sl
 800cb86:	3001      	adds	r0, #1
 800cb88:	d0ad      	beq.n	800cae6 <_printf_i+0x162>
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	079b      	lsls	r3, r3, #30
 800cb8e:	d413      	bmi.n	800cbb8 <_printf_i+0x234>
 800cb90:	68e0      	ldr	r0, [r4, #12]
 800cb92:	9b03      	ldr	r3, [sp, #12]
 800cb94:	4298      	cmp	r0, r3
 800cb96:	bfb8      	it	lt
 800cb98:	4618      	movlt	r0, r3
 800cb9a:	e7a6      	b.n	800caea <_printf_i+0x166>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	4632      	mov	r2, r6
 800cba0:	4649      	mov	r1, r9
 800cba2:	4640      	mov	r0, r8
 800cba4:	47d0      	blx	sl
 800cba6:	3001      	adds	r0, #1
 800cba8:	d09d      	beq.n	800cae6 <_printf_i+0x162>
 800cbaa:	3501      	adds	r5, #1
 800cbac:	68e3      	ldr	r3, [r4, #12]
 800cbae:	9903      	ldr	r1, [sp, #12]
 800cbb0:	1a5b      	subs	r3, r3, r1
 800cbb2:	42ab      	cmp	r3, r5
 800cbb4:	dcf2      	bgt.n	800cb9c <_printf_i+0x218>
 800cbb6:	e7eb      	b.n	800cb90 <_printf_i+0x20c>
 800cbb8:	2500      	movs	r5, #0
 800cbba:	f104 0619 	add.w	r6, r4, #25
 800cbbe:	e7f5      	b.n	800cbac <_printf_i+0x228>
 800cbc0:	0800dd20 	.word	0x0800dd20
 800cbc4:	0800dd31 	.word	0x0800dd31

0800cbc8 <_realloc_r>:
 800cbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbcc:	4680      	mov	r8, r0
 800cbce:	4614      	mov	r4, r2
 800cbd0:	460e      	mov	r6, r1
 800cbd2:	b921      	cbnz	r1, 800cbde <_realloc_r+0x16>
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbda:	f7ff bb2d 	b.w	800c238 <_malloc_r>
 800cbde:	b92a      	cbnz	r2, 800cbec <_realloc_r+0x24>
 800cbe0:	f7ff fcbe 	bl	800c560 <_free_r>
 800cbe4:	4625      	mov	r5, r4
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbec:	f000 f851 	bl	800cc92 <_malloc_usable_size_r>
 800cbf0:	4284      	cmp	r4, r0
 800cbf2:	4607      	mov	r7, r0
 800cbf4:	d802      	bhi.n	800cbfc <_realloc_r+0x34>
 800cbf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbfa:	d812      	bhi.n	800cc22 <_realloc_r+0x5a>
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4640      	mov	r0, r8
 800cc00:	f7ff fb1a 	bl	800c238 <_malloc_r>
 800cc04:	4605      	mov	r5, r0
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d0ed      	beq.n	800cbe6 <_realloc_r+0x1e>
 800cc0a:	42bc      	cmp	r4, r7
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	4631      	mov	r1, r6
 800cc10:	bf28      	it	cs
 800cc12:	463a      	movcs	r2, r7
 800cc14:	f000 f82f 	bl	800cc76 <memcpy>
 800cc18:	4631      	mov	r1, r6
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	f7ff fca0 	bl	800c560 <_free_r>
 800cc20:	e7e1      	b.n	800cbe6 <_realloc_r+0x1e>
 800cc22:	4635      	mov	r5, r6
 800cc24:	e7df      	b.n	800cbe6 <_realloc_r+0x1e>

0800cc26 <memmove>:
 800cc26:	4288      	cmp	r0, r1
 800cc28:	b510      	push	{r4, lr}
 800cc2a:	eb01 0402 	add.w	r4, r1, r2
 800cc2e:	d902      	bls.n	800cc36 <memmove+0x10>
 800cc30:	4284      	cmp	r4, r0
 800cc32:	4623      	mov	r3, r4
 800cc34:	d807      	bhi.n	800cc46 <memmove+0x20>
 800cc36:	1e43      	subs	r3, r0, #1
 800cc38:	42a1      	cmp	r1, r4
 800cc3a:	d008      	beq.n	800cc4e <memmove+0x28>
 800cc3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc40:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc44:	e7f8      	b.n	800cc38 <memmove+0x12>
 800cc46:	4601      	mov	r1, r0
 800cc48:	4402      	add	r2, r0
 800cc4a:	428a      	cmp	r2, r1
 800cc4c:	d100      	bne.n	800cc50 <memmove+0x2a>
 800cc4e:	bd10      	pop	{r4, pc}
 800cc50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc58:	e7f7      	b.n	800cc4a <memmove+0x24>

0800cc5a <memchr>:
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	b2c9      	uxtb	r1, r1
 800cc60:	4402      	add	r2, r0
 800cc62:	4293      	cmp	r3, r2
 800cc64:	4618      	mov	r0, r3
 800cc66:	d101      	bne.n	800cc6c <memchr+0x12>
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e003      	b.n	800cc74 <memchr+0x1a>
 800cc6c:	7804      	ldrb	r4, [r0, #0]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	428c      	cmp	r4, r1
 800cc72:	d1f6      	bne.n	800cc62 <memchr+0x8>
 800cc74:	bd10      	pop	{r4, pc}

0800cc76 <memcpy>:
 800cc76:	440a      	add	r2, r1
 800cc78:	4291      	cmp	r1, r2
 800cc7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cc7e:	d100      	bne.n	800cc82 <memcpy+0xc>
 800cc80:	4770      	bx	lr
 800cc82:	b510      	push	{r4, lr}
 800cc84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc88:	4291      	cmp	r1, r2
 800cc8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc8e:	d1f9      	bne.n	800cc84 <memcpy+0xe>
 800cc90:	bd10      	pop	{r4, pc}

0800cc92 <_malloc_usable_size_r>:
 800cc92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc96:	1f18      	subs	r0, r3, #4
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	bfbc      	itt	lt
 800cc9c:	580b      	ldrlt	r3, [r1, r0]
 800cc9e:	18c0      	addlt	r0, r0, r3
 800cca0:	4770      	bx	lr
	...

0800cca4 <_init>:
 800cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca6:	bf00      	nop
 800cca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccaa:	bc08      	pop	{r3}
 800ccac:	469e      	mov	lr, r3
 800ccae:	4770      	bx	lr

0800ccb0 <_fini>:
 800ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb2:	bf00      	nop
 800ccb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccb6:	bc08      	pop	{r3}
 800ccb8:	469e      	mov	lr, r3
 800ccba:	4770      	bx	lr
