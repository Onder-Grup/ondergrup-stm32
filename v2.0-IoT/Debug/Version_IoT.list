
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb98  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  0800cd7c  0800cd7c  0001cd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcec  0800dcec  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcec  0800dcec  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcec  0800dcec  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcec  0800dcec  0001dcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcf0  0800dcf0  0001dcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800dcf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000100  0800ddf4  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800ddf4  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125d8  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c3  00000000  00000000  00032744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00034e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfa  00000000  00000000  00035fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af30  00000000  00000000  00036daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f2a  00000000  00000000  00051cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ecfd  00000000  00000000  00069c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005180  00000000  00000000  00108904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010da84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000100 	.word	0x20000100
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cd64 	.word	0x0800cd64

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000104 	.word	0x20000104
 8000220:	0800cd64 	.word	0x0800cd64

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:

#include "ESP8266.h"

char queryBufferTX[250];

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(queryBufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c f92e 	bl	800c4a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b fb3e 	bl	800b8d8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 fa6e 	bl	8008740 <HAL_Delay>

	sprintf(queryBufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c f91c 	bl	800c4a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b fb2c 	bl	800b8d8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 fa5c 	bl	8008740 <HAL_Delay>

	sprintf(queryBufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c f90a 	bl	800c4a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b fb1a 	bl	800b8d8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 fa4a 	bl	8008740 <HAL_Delay>

	sprintf(queryBufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c f8f8 	bl	800c4a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b fb08 	bl	800b8d8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 fa38 	bl	8008740 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c f93d 	bl	800c568 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c f92a 	bl	800c568 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(queryBufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c f8b4 	bl	800c4a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b fac4 	bl	800b8d8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 f9f4 	bl	8008740 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800cd7c 	.word	0x0800cd7c
 8000364:	2000011c 	.word	0x2000011c
 8000368:	0800cd8c 	.word	0x0800cd8c
 800036c:	0800cd98 	.word	0x0800cd98
 8000370:	0800cda0 	.word	0x0800cda0
 8000374:	0800cdb0 	.word	0x0800cdb0
 8000378:	0800cdbc 	.word	0x0800cdbc
 800037c:	0800cdc0 	.word	0x0800cdc0
 8000380:	0800cdc4 	.word	0x0800cdc4

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(queryBufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", serverIP);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c f879 	bl	800c4a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00b fa86 	bl	800b8d8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 f9b6 	bl	8008740 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c f857 	bl	800c4a4 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, serverIPWithPort);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c f847 	bl	800c4a4 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b fa51 	bl	800b8d8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 f981 	bl	8008740 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b fa3d 	bl	800b8d8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 f96d 	bl	8008740 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800cdc8 	.word	0x0800cdc8
 8000474:	0800cdd8 	.word	0x0800cdd8
 8000478:	2000011c 	.word	0x2000011c
 800047c:	0800ce54 	.word	0x0800ce54
 8000480:	0800cdf8 	.word	0x0800cdf8
 8000484:	0800ce68 	.word	0x0800ce68

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f009 fd31 	bl	8009f32 <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f009 fd1d 	bl	8009f18 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 f880 	bl	8009658 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000374 	.word	0x20000374
 8000564:	20000216 	.word	0x20000216

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f009 fcc1 	bl	8009f32 <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f009 fcad 	bl	8009f18 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 f810 	bl	8009658 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000374 	.word	0x20000374
 8000644:	20000216 	.word	0x20000216

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f009 fc3b 	bl	8009f32 <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f009 fc27 	bl	8009f18 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f008 ff8a 	bl	8009658 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000374 	.word	0x20000374
 8000750:	20000216 	.word	0x20000216

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f007 ff90 	bl	8008740 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000216 	.word	0x20000216

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <getCharFromCursorPosition>:
void menu();
void printTemplate(int type, int page);
int checkSlideVal(int state);
void slideText(const char* text, int startPos, int startLine, int state);

char getCharFromCursorPosition(int cursorPosition) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <getCharFromCursorPosition+0x1c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	2000004c 	.word	0x2000004c

080008ec <readValFromEEPROM>:
			return i;
		}
	}
}

void readValFromEEPROM(int state) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d11c      	bne.n	8000934 <readValFromEEPROM+0x48>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <readValFromEEPROM+0x88>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharLimit; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	e012      	b.n	800092c <readValFromEEPROM+0x40>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <readValFromEEPROM+0x8c>)
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffdd 	bl	80008cc <getCharFromCursorPosition>
 8000912:	4603      	mov	r3, r0
 8000914:	4619      	mov	r1, r3
 8000916:	4a19      	ldr	r2, [pc, #100]	; (800097c <readValFromEEPROM+0x90>)
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4413      	add	r3, r2
 800091c:	460a      	mov	r2, r1
 800091e:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	3301      	adds	r3, #1
 8000924:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharLimit; i++) {
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	3301      	adds	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	2b13      	cmp	r3, #19
 8000930:	dde9      	ble.n	8000906 <readValFromEEPROM+0x1a>
		for(int i=0; i<wifiCharLimit; i++) {
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
			tempPassStartPos++;
		}
	}
}
 8000932:	e01b      	b.n	800096c <readValFromEEPROM+0x80>
		uint8_t tempPassStartPos = passStartPos;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <readValFromEEPROM+0x94>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharLimit; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	e012      	b.n	8000966 <readValFromEEPROM+0x7a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <readValFromEEPROM+0x8c>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ffc0 	bl	80008cc <getCharFromCursorPosition>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <readValFromEEPROM+0x98>)
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	460a      	mov	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	3301      	adds	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharLimit; i++) {
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3301      	adds	r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	2b13      	cmp	r3, #19
 800096a:	dde9      	ble.n	8000940 <readValFromEEPROM+0x54>
}
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000009e 	.word	0x2000009e
 8000978:	20000218 	.word	0x20000218
 800097c:	200002bc 	.word	0x200002bc
 8000980:	2000009f 	.word	0x2000009f
 8000984:	200002d0 	.word	0x200002d0

08000988 <takeMachineID>:

void takeMachineID(int state) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b08b      	sub	sp, #44	; 0x2c
 800098c:	af04      	add	r7, sp, #16
 800098e:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff ff6f 	bl	8000874 <lcd_cursor>

    int cursorPosition = 3;
 8000996:	2303      	movs	r3, #3
 8000998:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 800099e:	2305      	movs	r3, #5
 80009a0:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 80009a8:	220c      	movs	r2, #12
 80009aa:	2100      	movs	r1, #0
 80009ac:	4899      	ldr	r0, [pc, #612]	; (8000c14 <takeMachineID+0x28c>)
 80009ae:	f00b fdea 	bl	800c586 <memset>
    }
    HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f007 fec4 	bl	8008740 <HAL_Delay>

    printTemplate(1, 0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2001      	movs	r0, #1
 80009bc:	f004 f800 	bl	80049c0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80009c0:	2108      	movs	r1, #8
 80009c2:	4895      	ldr	r0, [pc, #596]	; (8000c18 <takeMachineID+0x290>)
 80009c4:	f008 fc8c 	bl	80092e0 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d138      	bne.n	8000a40 <takeMachineID+0xb8>
        	lcd_cursor(0);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff ff50 	bl	8000874 <lcd_cursor>

        	if(machineID[11] == '\0') {
 80009d4:	4b8f      	ldr	r3, [pc, #572]	; (8000c14 <takeMachineID+0x28c>)
 80009d6:	7adb      	ldrb	r3, [r3, #11]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d110      	bne.n	80009fe <takeMachineID+0x76>
        		lcd_clear();
 80009dc:	f7ff ff18 	bl	8000810 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 80009e0:	4a8e      	ldr	r2, [pc, #568]	; (8000c1c <takeMachineID+0x294>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff fee7 	bl	80007b8 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 80009ea:	4a8d      	ldr	r2, [pc, #564]	; (8000c20 <takeMachineID+0x298>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	2002      	movs	r0, #2
 80009f0:	f7ff fee2 	bl	80007b8 <lcd_print>
        		HAL_Delay(1200);
 80009f4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80009f8:	f007 fea2 	bl	8008740 <HAL_Delay>
        		goto mainSection;
 80009fc:	e7c8      	b.n	8000990 <takeMachineID+0x8>
        	}

        	memcpy(&eepromData[idStartPos], machineID, 12);
 80009fe:	4b89      	ldr	r3, [pc, #548]	; (8000c24 <takeMachineID+0x29c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b88      	ldr	r3, [pc, #544]	; (8000c28 <takeMachineID+0x2a0>)
 8000a06:	4413      	add	r3, r2
 8000a08:	4a82      	ldr	r2, [pc, #520]	; (8000c14 <takeMachineID+0x28c>)
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a10:	6020      	str	r0, [r4, #0]
 8000a12:	6061      	str	r1, [r4, #4]
 8000a14:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000a16:	20c8      	movs	r0, #200	; 0xc8
 8000a18:	f007 fe92 	bl	8008740 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000a1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a20:	9302      	str	r3, [sp, #8]
 8000a22:	236e      	movs	r3, #110	; 0x6e
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	4b80      	ldr	r3, [pc, #512]	; (8000c28 <takeMachineID+0x2a0>)
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	236e      	movs	r3, #110	; 0x6e
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	21a0      	movs	r1, #160	; 0xa0
 8000a30:	487e      	ldr	r0, [pc, #504]	; (8000c2c <takeMachineID+0x2a4>)
 8000a32:	f008 ff0f 	bl	8009854 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a3a:	f007 fe81 	bl	8008740 <HAL_Delay>

            break;
 8000a3e:	e0e5      	b.n	8000c0c <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000a40:	2101      	movs	r1, #1
 8000a42:	4875      	ldr	r0, [pc, #468]	; (8000c18 <takeMachineID+0x290>)
 8000a44:	f008 fc4c 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d112      	bne.n	8000a74 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2b07      	cmp	r3, #7
 8000a52:	d102      	bne.n	8000a5a <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000a54:	230a      	movs	r3, #10
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e008      	b.n	8000a6c <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2b0e      	cmp	r3, #14
 8000a5e:	d102      	bne.n	8000a66 <takeMachineID+0xde>
                cursorPosition = 3;
 8000a60:	2303      	movs	r3, #3
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e002      	b.n	8000a6c <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000a6c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000a70:	f007 fe66 	bl	8008740 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000a74:	2108      	movs	r1, #8
 8000a76:	486e      	ldr	r0, [pc, #440]	; (8000c30 <takeMachineID+0x2a8>)
 8000a78:	f008 fc32 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d112      	bne.n	8000aa8 <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d102      	bne.n	8000a8e <takeMachineID+0x106>
                cursorPosition = 14;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e008      	b.n	8000aa0 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2b0a      	cmp	r3, #10
 8000a92:	d102      	bne.n	8000a9a <takeMachineID+0x112>
            	cursorPosition = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e002      	b.n	8000aa0 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000aa0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000aa4:	f007 fe4c 	bl	8008740 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	485b      	ldr	r0, [pc, #364]	; (8000c18 <takeMachineID+0x290>)
 8000aac:	f008 fc18 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d16c      	bne.n	8000b90 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d105      	bne.n	8000ac8 <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000abc:	4a55      	ldr	r2, [pc, #340]	; (8000c14 <takeMachineID+0x28c>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2230      	movs	r2, #48	; 0x30
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e04f      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d105      	bne.n	8000ada <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000ace:	4a51      	ldr	r2, [pc, #324]	; (8000c14 <takeMachineID+0x28c>)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	2231      	movs	r2, #49	; 0x31
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e046      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	d105      	bne.n	8000aec <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000ae0:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <takeMachineID+0x28c>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2232      	movs	r2, #50	; 0x32
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	e03d      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d105      	bne.n	8000afe <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000af2:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <takeMachineID+0x28c>)
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4413      	add	r3, r2
 8000af8:	2233      	movs	r2, #51	; 0x33
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e034      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	d105      	bne.n	8000b10 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000b04:	4a43      	ldr	r2, [pc, #268]	; (8000c14 <takeMachineID+0x28c>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4413      	add	r3, r2
 8000b0a:	2234      	movs	r2, #52	; 0x34
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e02b      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d105      	bne.n	8000b22 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000b16:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <takeMachineID+0x28c>)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2235      	movs	r2, #53	; 0x35
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e022      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	2b0b      	cmp	r3, #11
 8000b26:	d105      	bne.n	8000b34 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000b28:	4a3a      	ldr	r2, [pc, #232]	; (8000c14 <takeMachineID+0x28c>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2236      	movs	r2, #54	; 0x36
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e019      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b0c      	cmp	r3, #12
 8000b38:	d105      	bne.n	8000b46 <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000b3a:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <takeMachineID+0x28c>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4413      	add	r3, r2
 8000b40:	2237      	movs	r2, #55	; 0x37
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e010      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2b0d      	cmp	r3, #13
 8000b4a:	d105      	bne.n	8000b58 <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000b4c:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <takeMachineID+0x28c>)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4413      	add	r3, r2
 8000b52:	2238      	movs	r2, #56	; 0x38
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e007      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	2b0e      	cmp	r3, #14
 8000b5c:	d104      	bne.n	8000b68 <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000b5e:	4a2d      	ldr	r2, [pc, #180]	; (8000c14 <takeMachineID+0x28c>)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4413      	add	r3, r2
 8000b64:	2239      	movs	r2, #57	; 0x39
 8000b66:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	b2d9      	uxtb	r1, r3
 8000b6c:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <takeMachineID+0x28c>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff fe33 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	3301      	adds	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000b88:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000b8c:	f007 fdd8 	bl	8008740 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000b90:	2104      	movs	r1, #4
 8000b92:	4821      	ldr	r0, [pc, #132]	; (8000c18 <takeMachineID+0x290>)
 8000b94:	f008 fba4 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d12f      	bne.n	8000bfe <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <takeMachineID+0x28c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d027      	beq.n	8000bf6 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <takeMachineID+0x28c>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4413      	add	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fe32 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8000bc0:	2032      	movs	r0, #50	; 0x32
 8000bc2:	f007 fdbd 	bl	8008740 <HAL_Delay>

                if(writeLoc > 5) {
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	dd03      	ble.n	8000bd4 <takeMachineID+0x24c>
                	writeLoc--;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e004      	b.n	8000bde <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	dc01      	bgt.n	8000bde <takeMachineID+0x256>
                	writeLoc = 5;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dd03      	ble.n	8000bec <takeMachineID+0x264>
                	machineIDLoc--;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	e004      	b.n	8000bf6 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da01      	bge.n	8000bf6 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000bf6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bfa:	f007 fda1 	bl	8008740 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	2002      	movs	r0, #2
 8000c06:	f7ff fdb8 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c0a:	e6d9      	b.n	80009c0 <takeMachineID+0x38>
    }
}
 8000c0c:	bf00      	nop
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	200002b0 	.word	0x200002b0
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	0800cef4 	.word	0x0800cef4
 8000c20:	0800cf08 	.word	0x0800cf08
 8000c24:	2000009d 	.word	0x2000009d
 8000c28:	20000218 	.word	0x20000218
 8000c2c:	20000374 	.word	0x20000374
 8000c30:	40011000 	.word	0x40011000

08000c34 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fe19 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000c48:	2214      	movs	r2, #20
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	488b      	ldr	r0, [pc, #556]	; (8000e7c <takeWifiSSID+0x248>)
 8000c4e:	f00b fc9a 	bl	800c586 <memset>
    }

    int realCharPos = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
    cursorPosition = 1;
 8000c56:	4b8a      	ldr	r3, [pc, #552]	; (8000e80 <takeWifiSSID+0x24c>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
    page = 1;
 8000c5c:	4b89      	ldr	r3, [pc, #548]	; (8000e84 <takeWifiSSID+0x250>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
    int writeLoc = 7;
 8000c66:	2307      	movs	r3, #7
 8000c68:	617b      	str	r3, [r7, #20]

    int characterSavePos = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
    uint8_t characterSavePosTemp = ssidStartPos;
 8000c6e:	4b86      	ldr	r3, [pc, #536]	; (8000e88 <takeWifiSSID+0x254>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	73fb      	strb	r3, [r7, #15]

    printTemplate(2, 1);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2002      	movs	r0, #2
 8000c78:	f003 fea2 	bl	80049c0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4883      	ldr	r0, [pc, #524]	; (8000e8c <takeWifiSSID+0x258>)
 8000c80:	f008 fb2e 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d12b      	bne.n	8000ce2 <takeWifiSSID+0xae>
            lcd_cursor(0);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fdf2 	bl	8000874 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000c90:	487a      	ldr	r0, [pc, #488]	; (8000e7c <takeWifiSSID+0x248>)
 8000c92:	f7ff fac7 	bl	8000224 <strlen>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b14      	cmp	r3, #20
 8000c9a:	d910      	bls.n	8000cbe <takeWifiSSID+0x8a>
                lcd_clear();
 8000c9c:	f7ff fdb8 	bl	8000810 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000ca0:	4a7b      	ldr	r2, [pc, #492]	; (8000e90 <takeWifiSSID+0x25c>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fd87 	bl	80007b8 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000caa:	4a7a      	ldr	r2, [pc, #488]	; (8000e94 <takeWifiSSID+0x260>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fd82 	bl	80007b8 <lcd_print>
                HAL_Delay(1200);
 8000cb4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000cb8:	f007 fd42 	bl	8008740 <HAL_Delay>
                goto mainSSIDSection;
 8000cbc:	e7be      	b.n	8000c3c <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, 20);
            HAL_Delay(250);*/

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000cbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	236e      	movs	r3, #110	; 0x6e
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	4b73      	ldr	r3, [pc, #460]	; (8000e98 <takeWifiSSID+0x264>)
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	236e      	movs	r3, #110	; 0x6e
 8000cce:	2200      	movs	r2, #0
 8000cd0:	21a0      	movs	r1, #160	; 0xa0
 8000cd2:	4872      	ldr	r0, [pc, #456]	; (8000e9c <takeWifiSSID+0x268>)
 8000cd4:	f008 fdbe 	bl	8009854 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cdc:	f007 fd30 	bl	8008740 <HAL_Delay>

            break;
 8000ce0:	e156      	b.n	8000f90 <takeWifiSSID+0x35c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4869      	ldr	r0, [pc, #420]	; (8000e8c <takeWifiSSID+0x258>)
 8000ce6:	f008 fafb 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d166      	bne.n	8000dbe <takeWifiSSID+0x18a>
        	realCharPos++;
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
        	if(realCharPos > 80) {
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	2b50      	cmp	r3, #80	; 0x50
 8000cfa:	dd01      	ble.n	8000d00 <takeWifiSSID+0xcc>
        		realCharPos = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
        	}
            if (cursorPosition == 16) {
 8000d00:	4b5f      	ldr	r3, [pc, #380]	; (8000e80 <takeWifiSSID+0x24c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b10      	cmp	r3, #16
 8000d06:	d152      	bne.n	8000dae <takeWifiSSID+0x17a>
            	if(page == 1) {
 8000d08:	4b5e      	ldr	r3, [pc, #376]	; (8000e84 <takeWifiSSID+0x250>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10c      	bne.n	8000d2a <takeWifiSSID+0xf6>
            		cursorPosition = 1;
 8000d10:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <takeWifiSSID+0x24c>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
            		page++;
 8000d16:	4b5b      	ldr	r3, [pc, #364]	; (8000e84 <takeWifiSSID+0x250>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a59      	ldr	r2, [pc, #356]	; (8000e84 <takeWifiSSID+0x250>)
 8000d1e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000d20:	2102      	movs	r1, #2
 8000d22:	2002      	movs	r0, #2
 8000d24:	f003 fe4c 	bl	80049c0 <printTemplate>
 8000d28:	e046      	b.n	8000db8 <takeWifiSSID+0x184>
            	} else if(page == 2) {
 8000d2a:	4b56      	ldr	r3, [pc, #344]	; (8000e84 <takeWifiSSID+0x250>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10c      	bne.n	8000d4c <takeWifiSSID+0x118>
            		cursorPosition = 1;
 8000d32:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <takeWifiSSID+0x24c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
            		page++;
 8000d38:	4b52      	ldr	r3, [pc, #328]	; (8000e84 <takeWifiSSID+0x250>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <takeWifiSSID+0x250>)
 8000d40:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000d42:	2103      	movs	r1, #3
 8000d44:	2002      	movs	r0, #2
 8000d46:	f003 fe3b 	bl	80049c0 <printTemplate>
 8000d4a:	e035      	b.n	8000db8 <takeWifiSSID+0x184>
            	} else if(page == 3) {
 8000d4c:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <takeWifiSSID+0x250>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d10c      	bne.n	8000d6e <takeWifiSSID+0x13a>
            		cursorPosition = 1;
 8000d54:	4b4a      	ldr	r3, [pc, #296]	; (8000e80 <takeWifiSSID+0x24c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
            		page++;
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <takeWifiSSID+0x250>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a48      	ldr	r2, [pc, #288]	; (8000e84 <takeWifiSSID+0x250>)
 8000d62:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000d64:	2104      	movs	r1, #4
 8000d66:	2002      	movs	r0, #2
 8000d68:	f003 fe2a 	bl	80049c0 <printTemplate>
 8000d6c:	e024      	b.n	8000db8 <takeWifiSSID+0x184>
            	} else if(page == 4) {
 8000d6e:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <takeWifiSSID+0x250>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d10c      	bne.n	8000d90 <takeWifiSSID+0x15c>
            		cursorPosition = 1;
 8000d76:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <takeWifiSSID+0x24c>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
            		page++;
 8000d7c:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <takeWifiSSID+0x250>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <takeWifiSSID+0x250>)
 8000d84:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000d86:	2105      	movs	r1, #5
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f003 fe19 	bl	80049c0 <printTemplate>
 8000d8e:	e013      	b.n	8000db8 <takeWifiSSID+0x184>
            	} else if(page == 5) {
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <takeWifiSSID+0x250>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d10f      	bne.n	8000db8 <takeWifiSSID+0x184>
            		cursorPosition = 1;
 8000d98:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <takeWifiSSID+0x24c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <takeWifiSSID+0x250>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000da4:	2101      	movs	r1, #1
 8000da6:	2002      	movs	r0, #2
 8000da8:	f003 fe0a 	bl	80049c0 <printTemplate>
 8000dac:	e004      	b.n	8000db8 <takeWifiSSID+0x184>
            	}
            } else {
            	cursorPosition++;
 8000dae:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <takeWifiSSID+0x24c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <takeWifiSSID+0x24c>)
 8000db6:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000db8:	20fa      	movs	r0, #250	; 0xfa
 8000dba:	f007 fcc1 	bl	8008740 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4837      	ldr	r0, [pc, #220]	; (8000ea0 <takeWifiSSID+0x26c>)
 8000dc2:	f008 fa8d 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d173      	bne.n	8000eb4 <takeWifiSSID+0x280>
        	realCharPos--;
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
        	if(realCharPos < 1) {
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dc01      	bgt.n	8000ddc <takeWifiSSID+0x1a8>
        		realCharPos = 80;
 8000dd8:	2350      	movs	r3, #80	; 0x50
 8000dda:	61fb      	str	r3, [r7, #28]
        	}
            if(cursorPosition == 1) {
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <takeWifiSSID+0x24c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d15f      	bne.n	8000ea4 <takeWifiSSID+0x270>
            	if(page == 1) {
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <takeWifiSSID+0x250>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d10a      	bne.n	8000e02 <takeWifiSSID+0x1ce>
            		cursorPosition = 16;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <takeWifiSSID+0x24c>)
 8000dee:	2210      	movs	r2, #16
 8000df0:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <takeWifiSSID+0x250>)
 8000df4:	2205      	movs	r2, #5
 8000df6:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000df8:	2105      	movs	r1, #5
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f003 fde0 	bl	80049c0 <printTemplate>
 8000e00:	e055      	b.n	8000eae <takeWifiSSID+0x27a>
            	} else if(page == 2) {
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <takeWifiSSID+0x250>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d10a      	bne.n	8000e20 <takeWifiSSID+0x1ec>
            		cursorPosition = 16;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <takeWifiSSID+0x24c>)
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <takeWifiSSID+0x250>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e16:	2101      	movs	r1, #1
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f003 fdd1 	bl	80049c0 <printTemplate>
 8000e1e:	e046      	b.n	8000eae <takeWifiSSID+0x27a>
            	} else if(page == 3) {
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <takeWifiSSID+0x250>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d10a      	bne.n	8000e3e <takeWifiSSID+0x20a>
            		cursorPosition = 16;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <takeWifiSSID+0x24c>)
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <takeWifiSSID+0x250>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000e34:	2102      	movs	r1, #2
 8000e36:	2002      	movs	r0, #2
 8000e38:	f003 fdc2 	bl	80049c0 <printTemplate>
 8000e3c:	e037      	b.n	8000eae <takeWifiSSID+0x27a>
            	} else if(page == 4) {
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <takeWifiSSID+0x250>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d10a      	bne.n	8000e5c <takeWifiSSID+0x228>
            		cursorPosition = 16;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <takeWifiSSID+0x24c>)
 8000e48:	2210      	movs	r2, #16
 8000e4a:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <takeWifiSSID+0x250>)
 8000e4e:	2203      	movs	r2, #3
 8000e50:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000e52:	2103      	movs	r1, #3
 8000e54:	2002      	movs	r0, #2
 8000e56:	f003 fdb3 	bl	80049c0 <printTemplate>
 8000e5a:	e028      	b.n	8000eae <takeWifiSSID+0x27a>
            	} else if(page == 5) {
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <takeWifiSSID+0x250>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	d124      	bne.n	8000eae <takeWifiSSID+0x27a>
            		cursorPosition = 16;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <takeWifiSSID+0x24c>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <takeWifiSSID+0x250>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000e70:	2104      	movs	r1, #4
 8000e72:	2002      	movs	r0, #2
 8000e74:	f003 fda4 	bl	80049c0 <printTemplate>
 8000e78:	e019      	b.n	8000eae <takeWifiSSID+0x27a>
 8000e7a:	bf00      	nop
 8000e7c:	200002bc 	.word	0x200002bc
 8000e80:	20000030 	.word	0x20000030
 8000e84:	20000034 	.word	0x20000034
 8000e88:	2000009e 	.word	0x2000009e
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	0800cf1c 	.word	0x0800cf1c
 8000e94:	0800cf30 	.word	0x0800cf30
 8000e98:	20000218 	.word	0x20000218
 8000e9c:	20000374 	.word	0x20000374
 8000ea0:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <takeWifiSSID+0x364>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4a3b      	ldr	r2, [pc, #236]	; (8000f98 <takeWifiSSID+0x364>)
 8000eac:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000eae:	20fa      	movs	r0, #250	; 0xfa
 8000eb0:	f007 fc46 	bl	8008740 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4839      	ldr	r0, [pc, #228]	; (8000f9c <takeWifiSSID+0x368>)
 8000eb8:	f008 fa12 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d128      	bne.n	8000f14 <takeWifiSSID+0x2e0>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fd00 	bl	80008cc <getCharFromCursorPosition>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <takeWifiSSID+0x36c>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]

            //wifiSSIDLoc[characterSavePos] = realCharPos - 1;
            eepromData[characterSavePosTemp] = realCharPos - 1;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	3a01      	subs	r2, #1
 8000ee2:	b2d1      	uxtb	r1, r2
 8000ee4:	4a2f      	ldr	r2, [pc, #188]	; (8000fa4 <takeWifiSSID+0x370>)
 8000ee6:	54d1      	strb	r1, [r2, r3]


            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	b2d9      	uxtb	r1, r3
 8000eec:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <takeWifiSSID+0x36c>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff fc73 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
            wifiNameLoc++;
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
            characterSavePos++;
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000f0e:	20fa      	movs	r0, #250	; 0xfa
 8000f10:	f007 fc16 	bl	8008740 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f14:	2104      	movs	r1, #4
 8000f16:	4821      	ldr	r0, [pc, #132]	; (8000f9c <takeWifiSSID+0x368>)
 8000f18:	f008 f9e2 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d12e      	bne.n	8000f80 <takeWifiSSID+0x34c>
        	if(strlen(wifiSSID) >= 1) {
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <takeWifiSSID+0x36c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d027      	beq.n	8000f7a <takeWifiSSID+0x346>
        		wifiSSID[wifiNameLoc] = '\0';
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <takeWifiSSID+0x36c>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	4413      	add	r3, r2
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	3306      	adds	r3, #6
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff fc70 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 8000f44:	2032      	movs	r0, #50	; 0x32
 8000f46:	f007 fbfb 	bl	8008740 <HAL_Delay>
        		if(writeLoc > 7) {
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	dd03      	ble.n	8000f58 <takeWifiSSID+0x324>
        			writeLoc--;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e004      	b.n	8000f62 <takeWifiSSID+0x32e>
        		} else if(writeLoc < 7) {
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	dc01      	bgt.n	8000f62 <takeWifiSSID+0x32e>
        			writeLoc = 7;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	617b      	str	r3, [r7, #20]
        		}

        		if(wifiNameLoc > 0) {
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	dd03      	ble.n	8000f70 <takeWifiSSID+0x33c>
        			wifiNameLoc--;
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	e004      	b.n	8000f7a <takeWifiSSID+0x346>
        		} else if(wifiNameLoc < 0) {
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	da01      	bge.n	8000f7a <takeWifiSSID+0x346>
        			wifiNameLoc = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
        		}
        	}

        	HAL_Delay(250);
 8000f7a:	20fa      	movs	r0, #250	; 0xfa
 8000f7c:	f007 fbe0 	bl	8008740 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <takeWifiSSID+0x364>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f7ff fbf6 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f8e:	e675      	b.n	8000c7c <takeWifiSSID+0x48>
    }
}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000030 	.word	0x20000030
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	200002bc 	.word	0x200002bc
 8000fa4:	20000218 	.word	0x20000218

08000fa8 <takeWifiPass>:

void takeWifiPass(int state) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af04      	add	r7, sp, #16
 8000fae:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff fc5f 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d104      	bne.n	8000fc6 <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8000fbc:	2214      	movs	r2, #20
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	488b      	ldr	r0, [pc, #556]	; (80011f0 <takeWifiPass+0x248>)
 8000fc2:	f00b fae0 	bl	800c586 <memset>
    }

    int realCharPos = 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
    cursorPosition = 1;
 8000fca:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <takeWifiPass+0x24c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
    page = 1;
 8000fd0:	4b89      	ldr	r3, [pc, #548]	; (80011f8 <takeWifiPass+0x250>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
    int writeLoc = 7;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	617b      	str	r3, [r7, #20]

    int characterSavePos = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
    uint8_t characterSavePosTemp = passStartPos;
 8000fe2:	4b86      	ldr	r3, [pc, #536]	; (80011fc <takeWifiPass+0x254>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	73fb      	strb	r3, [r7, #15]

    printTemplate(3, 1);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	2003      	movs	r0, #3
 8000fec:	f003 fce8 	bl	80049c0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4883      	ldr	r0, [pc, #524]	; (8001200 <takeWifiPass+0x258>)
 8000ff4:	f008 f974 	bl	80092e0 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12b      	bne.n	8001056 <takeWifiPass+0xae>
            lcd_cursor(0);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff fc38 	bl	8000874 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8001004:	487a      	ldr	r0, [pc, #488]	; (80011f0 <takeWifiPass+0x248>)
 8001006:	f7ff f90d 	bl	8000224 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	2b14      	cmp	r3, #20
 800100e:	d910      	bls.n	8001032 <takeWifiPass+0x8a>
                lcd_clear();
 8001010:	f7ff fbfe 	bl	8000810 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8001014:	4a7b      	ldr	r2, [pc, #492]	; (8001204 <takeWifiPass+0x25c>)
 8001016:	2101      	movs	r1, #1
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff fbcd 	bl	80007b8 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800101e:	4a7a      	ldr	r2, [pc, #488]	; (8001208 <takeWifiPass+0x260>)
 8001020:	2101      	movs	r1, #1
 8001022:	2002      	movs	r0, #2
 8001024:	f7ff fbc8 	bl	80007b8 <lcd_print>
                HAL_Delay(1200);
 8001028:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800102c:	f007 fb88 	bl	8008740 <HAL_Delay>
                goto mainPASSSection;
 8001030:	e7be      	b.n	8000fb0 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, 20);
            HAL_Delay(250);*/

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8001032:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	236e      	movs	r3, #110	; 0x6e
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	4b73      	ldr	r3, [pc, #460]	; (800120c <takeWifiPass+0x264>)
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	236e      	movs	r3, #110	; 0x6e
 8001042:	2200      	movs	r2, #0
 8001044:	21a0      	movs	r1, #160	; 0xa0
 8001046:	4872      	ldr	r0, [pc, #456]	; (8001210 <takeWifiPass+0x268>)
 8001048:	f008 fc04 	bl	8009854 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800104c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001050:	f007 fb76 	bl	8008740 <HAL_Delay>

            break;
 8001054:	e156      	b.n	8001304 <takeWifiPass+0x35c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001056:	2101      	movs	r1, #1
 8001058:	4869      	ldr	r0, [pc, #420]	; (8001200 <takeWifiPass+0x258>)
 800105a:	f008 f941 	bl	80092e0 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d166      	bne.n	8001132 <takeWifiPass+0x18a>
        	realCharPos++;
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	3301      	adds	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
        	if(realCharPos > 80) {
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	2b50      	cmp	r3, #80	; 0x50
 800106e:	dd01      	ble.n	8001074 <takeWifiPass+0xcc>
        	    realCharPos = 1;
 8001070:	2301      	movs	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
        	}
            if (cursorPosition == 16) {
 8001074:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <takeWifiPass+0x24c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b10      	cmp	r3, #16
 800107a:	d152      	bne.n	8001122 <takeWifiPass+0x17a>
            	if(page == 1) {
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <takeWifiPass+0x250>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d10c      	bne.n	800109e <takeWifiPass+0xf6>
            		cursorPosition = 1;
 8001084:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <takeWifiPass+0x24c>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
            		page++;
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <takeWifiPass+0x250>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a59      	ldr	r2, [pc, #356]	; (80011f8 <takeWifiPass+0x250>)
 8001092:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001094:	2102      	movs	r1, #2
 8001096:	2003      	movs	r0, #3
 8001098:	f003 fc92 	bl	80049c0 <printTemplate>
 800109c:	e046      	b.n	800112c <takeWifiPass+0x184>
            	} else if(page == 2) {
 800109e:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <takeWifiPass+0x250>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d10c      	bne.n	80010c0 <takeWifiPass+0x118>
            		cursorPosition = 1;
 80010a6:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <takeWifiPass+0x24c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
            		page++;
 80010ac:	4b52      	ldr	r3, [pc, #328]	; (80011f8 <takeWifiPass+0x250>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <takeWifiPass+0x250>)
 80010b4:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80010b6:	2103      	movs	r1, #3
 80010b8:	2003      	movs	r0, #3
 80010ba:	f003 fc81 	bl	80049c0 <printTemplate>
 80010be:	e035      	b.n	800112c <takeWifiPass+0x184>
            	} else if(page == 3) {
 80010c0:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <takeWifiPass+0x250>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d10c      	bne.n	80010e2 <takeWifiPass+0x13a>
            		cursorPosition = 1;
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <takeWifiPass+0x24c>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
            		page++;
 80010ce:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <takeWifiPass+0x250>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <takeWifiPass+0x250>)
 80010d6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80010d8:	2104      	movs	r1, #4
 80010da:	2003      	movs	r0, #3
 80010dc:	f003 fc70 	bl	80049c0 <printTemplate>
 80010e0:	e024      	b.n	800112c <takeWifiPass+0x184>
            	} else if(page == 4) {
 80010e2:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <takeWifiPass+0x250>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d10c      	bne.n	8001104 <takeWifiPass+0x15c>
            		cursorPosition = 1;
 80010ea:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <takeWifiPass+0x24c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
            		page++;
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <takeWifiPass+0x250>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a40      	ldr	r2, [pc, #256]	; (80011f8 <takeWifiPass+0x250>)
 80010f8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80010fa:	2105      	movs	r1, #5
 80010fc:	2003      	movs	r0, #3
 80010fe:	f003 fc5f 	bl	80049c0 <printTemplate>
 8001102:	e013      	b.n	800112c <takeWifiPass+0x184>
            	} else if(page == 5) {
 8001104:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <takeWifiPass+0x250>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d10f      	bne.n	800112c <takeWifiPass+0x184>
            		cursorPosition = 1;
 800110c:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <takeWifiPass+0x24c>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <takeWifiPass+0x250>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001118:	2101      	movs	r1, #1
 800111a:	2003      	movs	r0, #3
 800111c:	f003 fc50 	bl	80049c0 <printTemplate>
 8001120:	e004      	b.n	800112c <takeWifiPass+0x184>
            	}
            } else {
            	cursorPosition++;
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <takeWifiPass+0x24c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <takeWifiPass+0x24c>)
 800112a:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800112c:	20fa      	movs	r0, #250	; 0xfa
 800112e:	f007 fb07 	bl	8008740 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001132:	2108      	movs	r1, #8
 8001134:	4837      	ldr	r0, [pc, #220]	; (8001214 <takeWifiPass+0x26c>)
 8001136:	f008 f8d3 	bl	80092e0 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d173      	bne.n	8001228 <takeWifiPass+0x280>
        	realCharPos--;
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	3b01      	subs	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
        	if(realCharPos < 1) {
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dc01      	bgt.n	8001150 <takeWifiPass+0x1a8>
        	    realCharPos = 80;
 800114c:	2350      	movs	r3, #80	; 0x50
 800114e:	61fb      	str	r3, [r7, #28]
        	}
            if(cursorPosition == 1) {
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <takeWifiPass+0x24c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d15f      	bne.n	8001218 <takeWifiPass+0x270>
            	if(page == 1) {
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <takeWifiPass+0x250>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d10a      	bne.n	8001176 <takeWifiPass+0x1ce>
            		cursorPosition = 16;
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <takeWifiPass+0x24c>)
 8001162:	2210      	movs	r2, #16
 8001164:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <takeWifiPass+0x250>)
 8001168:	2205      	movs	r2, #5
 800116a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800116c:	2105      	movs	r1, #5
 800116e:	2003      	movs	r0, #3
 8001170:	f003 fc26 	bl	80049c0 <printTemplate>
 8001174:	e055      	b.n	8001222 <takeWifiPass+0x27a>
            	} else if(page == 2) {
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <takeWifiPass+0x250>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d10a      	bne.n	8001194 <takeWifiPass+0x1ec>
            		cursorPosition = 16;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <takeWifiPass+0x24c>)
 8001180:	2210      	movs	r2, #16
 8001182:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <takeWifiPass+0x250>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800118a:	2101      	movs	r1, #1
 800118c:	2003      	movs	r0, #3
 800118e:	f003 fc17 	bl	80049c0 <printTemplate>
 8001192:	e046      	b.n	8001222 <takeWifiPass+0x27a>
            	} else if(page == 3) {
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <takeWifiPass+0x250>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d10a      	bne.n	80011b2 <takeWifiPass+0x20a>
            		cursorPosition = 16;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <takeWifiPass+0x24c>)
 800119e:	2210      	movs	r2, #16
 80011a0:	601a      	str	r2, [r3, #0]
            		page = 2;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <takeWifiPass+0x250>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80011a8:	2102      	movs	r1, #2
 80011aa:	2003      	movs	r0, #3
 80011ac:	f003 fc08 	bl	80049c0 <printTemplate>
 80011b0:	e037      	b.n	8001222 <takeWifiPass+0x27a>
            	} else if(page == 4) {
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <takeWifiPass+0x250>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d10a      	bne.n	80011d0 <takeWifiPass+0x228>
            		cursorPosition = 16;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <takeWifiPass+0x24c>)
 80011bc:	2210      	movs	r2, #16
 80011be:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <takeWifiPass+0x250>)
 80011c2:	2203      	movs	r2, #3
 80011c4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80011c6:	2103      	movs	r1, #3
 80011c8:	2003      	movs	r0, #3
 80011ca:	f003 fbf9 	bl	80049c0 <printTemplate>
 80011ce:	e028      	b.n	8001222 <takeWifiPass+0x27a>
            	} else if(page == 5) {
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <takeWifiPass+0x250>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d124      	bne.n	8001222 <takeWifiPass+0x27a>
            		cursorPosition = 16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <takeWifiPass+0x24c>)
 80011da:	2210      	movs	r2, #16
 80011dc:	601a      	str	r2, [r3, #0]
            		page = 4;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <takeWifiPass+0x250>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80011e4:	2104      	movs	r1, #4
 80011e6:	2003      	movs	r0, #3
 80011e8:	f003 fbea 	bl	80049c0 <printTemplate>
 80011ec:	e019      	b.n	8001222 <takeWifiPass+0x27a>
 80011ee:	bf00      	nop
 80011f0:	200002d0 	.word	0x200002d0
 80011f4:	20000030 	.word	0x20000030
 80011f8:	20000034 	.word	0x20000034
 80011fc:	2000009f 	.word	0x2000009f
 8001200:	40010800 	.word	0x40010800
 8001204:	0800cf1c 	.word	0x0800cf1c
 8001208:	0800cf44 	.word	0x0800cf44
 800120c:	20000218 	.word	0x20000218
 8001210:	20000374 	.word	0x20000374
 8001214:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <takeWifiPass+0x364>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	4a3b      	ldr	r2, [pc, #236]	; (800130c <takeWifiPass+0x364>)
 8001220:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001222:	20fa      	movs	r0, #250	; 0xfa
 8001224:	f007 fa8c 	bl	8008740 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001228:	2102      	movs	r1, #2
 800122a:	4839      	ldr	r0, [pc, #228]	; (8001310 <takeWifiPass+0x368>)
 800122c:	f008 f858 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	d128      	bne.n	8001288 <takeWifiPass+0x2e0>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b01      	subs	r3, #1
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fb46 	bl	80008cc <getCharFromCursorPosition>
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	4a33      	ldr	r2, [pc, #204]	; (8001314 <takeWifiPass+0x36c>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4413      	add	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]

        	//wifiPassLocArr[characterSavePos] = realCharPos - 1;
        	eepromData[characterSavePosTemp] = realCharPos - 1;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	3a01      	subs	r2, #1
 8001256:	b2d1      	uxtb	r1, r2
 8001258:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <takeWifiPass+0x370>)
 800125a:	54d1      	strb	r1, [r2, r3]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	b2d9      	uxtb	r1, r3
 8001260:	4a2c      	ldr	r2, [pc, #176]	; (8001314 <takeWifiPass+0x36c>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff fab9 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
            wifiPassLoc++;
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3301      	adds	r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
            characterSavePos++;
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	3301      	adds	r3, #1
 8001280:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001282:	20fa      	movs	r0, #250	; 0xfa
 8001284:	f007 fa5c 	bl	8008740 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001288:	2104      	movs	r1, #4
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <takeWifiPass+0x368>)
 800128c:	f008 f828 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b01      	cmp	r3, #1
 8001294:	d12e      	bne.n	80012f4 <takeWifiPass+0x34c>
            if(strlen(wifiPass) >= 1) {
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <takeWifiPass+0x36c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d027      	beq.n	80012ee <takeWifiPass+0x346>
            	wifiPass[wifiPassLoc] = '\0';
 800129e:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <takeWifiPass+0x36c>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	4413      	add	r3, r2
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	3306      	adds	r3, #6
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fab6 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 80012b8:	2032      	movs	r0, #50	; 0x32
 80012ba:	f007 fa41 	bl	8008740 <HAL_Delay>

            	if(writeLoc > 7) {
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	dd03      	ble.n	80012cc <takeWifiPass+0x324>
            		writeLoc--;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e004      	b.n	80012d6 <takeWifiPass+0x32e>
            	} else if(writeLoc < 7) {
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	dc01      	bgt.n	80012d6 <takeWifiPass+0x32e>
            		writeLoc = 7;
 80012d2:	2307      	movs	r3, #7
 80012d4:	617b      	str	r3, [r7, #20]
            	}

            	if(wifiPassLoc > 0) {
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dd03      	ble.n	80012e4 <takeWifiPass+0x33c>
            		wifiPassLoc--;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	3b01      	subs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	e004      	b.n	80012ee <takeWifiPass+0x346>
            	} else if(wifiPassLoc < 0) {
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da01      	bge.n	80012ee <takeWifiPass+0x346>
            		wifiPassLoc = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
            	}
            }

            HAL_Delay(250);
 80012ee:	20fa      	movs	r0, #250	; 0xfa
 80012f0:	f007 fa26 	bl	8008740 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <takeWifiPass+0x364>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	2002      	movs	r0, #2
 80012fe:	f7ff fa3c 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001302:	e675      	b.n	8000ff0 <takeWifiPass+0x48>
    }
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000030 	.word	0x20000030
 8001310:	40010800 	.word	0x40010800
 8001314:	200002d0 	.word	0x200002d0
 8001318:	20000218 	.word	0x20000218

0800131c <menu>:


void menu() {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001320:	2101      	movs	r1, #1
 8001322:	488f      	ldr	r0, [pc, #572]	; (8001560 <menu+0x244>)
 8001324:	f007 ffdc 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	f040 808e 	bne.w	800144c <menu+0x130>
 8001330:	4b8c      	ldr	r3, [pc, #560]	; (8001564 <menu+0x248>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f083 0301 	eor.w	r3, r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8086 	beq.w	800144c <menu+0x130>
		menuSayac = menuSayac+1;
 8001340:	4b89      	ldr	r3, [pc, #548]	; (8001568 <menu+0x24c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b87      	ldr	r3, [pc, #540]	; (8001568 <menu+0x24c>)
 800134a:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800134c:	4b86      	ldr	r3, [pc, #536]	; (8001568 <menu+0x24c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b24      	cmp	r3, #36	; 0x24
 8001352:	d102      	bne.n	800135a <menu+0x3e>
			menuSayac = 1;
 8001354:	4b84      	ldr	r3, [pc, #528]	; (8001568 <menu+0x24c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800135a:	4b83      	ldr	r3, [pc, #524]	; (8001568 <menu+0x24c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b12      	cmp	r3, #18
 8001360:	d106      	bne.n	8001370 <menu+0x54>
 8001362:	4b82      	ldr	r3, [pc, #520]	; (800156c <menu+0x250>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <menu+0x54>
			menuSayac = 21;
 800136a:	4b7f      	ldr	r3, [pc, #508]	; (8001568 <menu+0x24c>)
 800136c:	2215      	movs	r2, #21
 800136e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001370:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <menu+0x24c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d106      	bne.n	8001386 <menu+0x6a>
 8001378:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <menu+0x254>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <menu+0x6a>
			menuSayac = 16;
 8001380:	4b79      	ldr	r3, [pc, #484]	; (8001568 <menu+0x24c>)
 8001382:	2210      	movs	r2, #16
 8001384:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001386:	4b78      	ldr	r3, [pc, #480]	; (8001568 <menu+0x24c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b0d      	cmp	r3, #13
 800138c:	d106      	bne.n	800139c <menu+0x80>
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <menu+0x254>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <menu+0x80>
			menuSayac = 16;
 8001396:	4b74      	ldr	r3, [pc, #464]	; (8001568 <menu+0x24c>)
 8001398:	2210      	movs	r2, #16
 800139a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800139c:	4b72      	ldr	r3, [pc, #456]	; (8001568 <menu+0x24c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	d106      	bne.n	80013b2 <menu+0x96>
 80013a4:	4b72      	ldr	r3, [pc, #456]	; (8001570 <menu+0x254>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d102      	bne.n	80013b2 <menu+0x96>
			menuSayac = 13;
 80013ac:	4b6e      	ldr	r3, [pc, #440]	; (8001568 <menu+0x24c>)
 80013ae:	220d      	movs	r2, #13
 80013b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013b2:	4b6d      	ldr	r3, [pc, #436]	; (8001568 <menu+0x24c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b0a      	cmp	r3, #10
 80013b8:	d10a      	bne.n	80013d0 <menu+0xb4>
 80013ba:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <menu+0x258>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d003      	beq.n	80013ca <menu+0xae>
 80013c2:	4b6c      	ldr	r3, [pc, #432]	; (8001574 <menu+0x258>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d102      	bne.n	80013d0 <menu+0xb4>
			menuSayac = 11;
 80013ca:	4b67      	ldr	r3, [pc, #412]	; (8001568 <menu+0x24c>)
 80013cc:	220b      	movs	r2, #11
 80013ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80013d0:	4b65      	ldr	r3, [pc, #404]	; (8001568 <menu+0x24c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d10e      	bne.n	80013f6 <menu+0xda>
 80013d8:	4b67      	ldr	r3, [pc, #412]	; (8001578 <menu+0x25c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d003      	beq.n	80013e8 <menu+0xcc>
 80013e0:	4b65      	ldr	r3, [pc, #404]	; (8001578 <menu+0x25c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d106      	bne.n	80013f6 <menu+0xda>
 80013e8:	4b61      	ldr	r3, [pc, #388]	; (8001570 <menu+0x254>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d102      	bne.n	80013f6 <menu+0xda>
			menuSayac = 16;
 80013f0:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <menu+0x24c>)
 80013f2:	2210      	movs	r2, #16
 80013f4:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <menu+0x24c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	d10e      	bne.n	800141c <menu+0x100>
 80013fe:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <menu+0x25c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d003      	beq.n	800140e <menu+0xf2>
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <menu+0x25c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d106      	bne.n	800141c <menu+0x100>
 800140e:	4b58      	ldr	r3, [pc, #352]	; (8001570 <menu+0x254>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d102      	bne.n	800141c <menu+0x100>
			menuSayac = 13;
 8001416:	4b54      	ldr	r3, [pc, #336]	; (8001568 <menu+0x24c>)
 8001418:	220d      	movs	r2, #13
 800141a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800141c:	4b52      	ldr	r3, [pc, #328]	; (8001568 <menu+0x24c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d106      	bne.n	8001432 <menu+0x116>
 8001424:	4b55      	ldr	r3, [pc, #340]	; (800157c <menu+0x260>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d102      	bne.n	8001432 <menu+0x116>
			menuSayac = 16;
 800142c:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <menu+0x24c>)
 800142e:	2210      	movs	r2, #16
 8001430:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001432:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <menu+0x24c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b18      	cmp	r3, #24
 8001438:	d106      	bne.n	8001448 <menu+0x12c>
 800143a:	4b4c      	ldr	r3, [pc, #304]	; (800156c <menu+0x250>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <menu+0x12c>
			menuSayac = 26;
 8001442:	4b49      	ldr	r3, [pc, #292]	; (8001568 <menu+0x24c>)
 8001444:	221a      	movs	r2, #26
 8001446:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001448:	f004 f974 	bl	8005734 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800144c:	2108      	movs	r1, #8
 800144e:	484c      	ldr	r0, [pc, #304]	; (8001580 <menu+0x264>)
 8001450:	f007 ff46 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b01      	cmp	r3, #1
 8001458:	d175      	bne.n	8001546 <menu+0x22a>
 800145a:	4b42      	ldr	r3, [pc, #264]	; (8001564 <menu+0x248>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d06e      	beq.n	8001546 <menu+0x22a>
		if (menuSayac <= 1) {
 8001468:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <menu+0x24c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d802      	bhi.n	8001476 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <menu+0x24c>)
 8001472:	2224      	movs	r2, #36	; 0x24
 8001474:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001476:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <menu+0x24c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3b01      	subs	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <menu+0x24c>)
 8001480:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <menu+0x24c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b14      	cmp	r3, #20
 8001488:	d106      	bne.n	8001498 <menu+0x17c>
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <menu+0x250>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <menu+0x17c>
			menuSayac = 17;
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <menu+0x24c>)
 8001494:	2211      	movs	r2, #17
 8001496:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <menu+0x24c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d106      	bne.n	80014ae <menu+0x192>
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <menu+0x254>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <menu+0x192>
			menuSayac = 7;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <menu+0x24c>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <menu+0x24c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	d106      	bne.n	80014c4 <menu+0x1a8>
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <menu+0x254>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d102      	bne.n	80014c4 <menu+0x1a8>
			menuSayac = 12;
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <menu+0x24c>)
 80014c0:	220c      	movs	r2, #12
 80014c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <menu+0x24c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d106      	bne.n	80014da <menu+0x1be>
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <menu+0x254>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d102      	bne.n	80014da <menu+0x1be>
			menuSayac = 8;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <menu+0x24c>)
 80014d6:	2208      	movs	r2, #8
 80014d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <menu+0x24c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	d10a      	bne.n	80014f8 <menu+0x1dc>
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <menu+0x258>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <menu+0x1d6>
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <menu+0x258>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d102      	bne.n	80014f8 <menu+0x1dc>
			menuSayac = 9;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <menu+0x24c>)
 80014f4:	2209      	movs	r2, #9
 80014f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <menu+0x24c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d10a      	bne.n	8001516 <menu+0x1fa>
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <menu+0x25c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d003      	beq.n	8001510 <menu+0x1f4>
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <menu+0x25c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d102      	bne.n	8001516 <menu+0x1fa>
			menuSayac = 11;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <menu+0x24c>)
 8001512:	220b      	movs	r2, #11
 8001514:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <menu+0x24c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	d106      	bne.n	800152c <menu+0x210>
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <menu+0x260>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d102      	bne.n	800152c <menu+0x210>
			menuSayac = 14;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <menu+0x24c>)
 8001528:	220e      	movs	r2, #14
 800152a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <menu+0x24c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b19      	cmp	r3, #25
 8001532:	d106      	bne.n	8001542 <menu+0x226>
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <menu+0x250>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <menu+0x226>
			menuSayac = 23;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <menu+0x24c>)
 800153e:	2217      	movs	r2, #23
 8001540:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001542:	f004 f8f7 	bl	8005734 <bekle>
	}

	if (menuSayac == 0) {
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <menu+0x24c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d134      	bne.n	80015b8 <menu+0x29c>
		if(dilSecim == 0) {
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <menu+0x268>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d122      	bne.n	800159c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001556:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <menu+0x26c>)
 8001558:	2101      	movs	r1, #1
 800155a:	2001      	movs	r0, #1
 800155c:	e016      	b.n	800158c <menu+0x270>
 800155e:	bf00      	nop
 8001560:	40010800 	.word	0x40010800
 8001564:	20000317 	.word	0x20000317
 8001568:	200002e8 	.word	0x200002e8
 800156c:	200002f7 	.word	0x200002f7
 8001570:	200002f0 	.word	0x200002f0
 8001574:	200002f1 	.word	0x200002f1
 8001578:	200002f2 	.word	0x200002f2
 800157c:	200002f3 	.word	0x200002f3
 8001580:	40011000 	.word	0x40011000
 8001584:	20000309 	.word	0x20000309
 8001588:	0800cf58 	.word	0x0800cf58
 800158c:	f7ff f914 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001590:	4a94      	ldr	r2, [pc, #592]	; (80017e4 <menu+0x4c8>)
 8001592:	2101      	movs	r1, #1
 8001594:	2002      	movs	r0, #2
 8001596:	f7ff f90f 	bl	80007b8 <lcd_print>
 800159a:	e00d      	b.n	80015b8 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800159c:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <menu+0x4cc>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d109      	bne.n	80015b8 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80015a4:	4a91      	ldr	r2, [pc, #580]	; (80017ec <menu+0x4d0>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	2001      	movs	r0, #1
 80015aa:	f7ff f905 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80015ae:	4a90      	ldr	r2, [pc, #576]	; (80017f0 <menu+0x4d4>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	2002      	movs	r0, #2
 80015b4:	f7ff f900 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80015b8:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <menu+0x4d8>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	f040 82b5 	bne.w	8001b2c <menu+0x810>
		if(dilSecim == 0) {
 80015c2:	4b89      	ldr	r3, [pc, #548]	; (80017e8 <menu+0x4cc>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80015ca:	4a8b      	ldr	r2, [pc, #556]	; (80017f8 <menu+0x4dc>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff f8f2 	bl	80007b8 <lcd_print>
 80015d4:	e008      	b.n	80015e8 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80015d6:	4b84      	ldr	r3, [pc, #528]	; (80017e8 <menu+0x4cc>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d104      	bne.n	80015e8 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80015de:	4a87      	ldr	r2, [pc, #540]	; (80017fc <menu+0x4e0>)
 80015e0:	2101      	movs	r1, #1
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff f8e8 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80015e8:	4b85      	ldr	r3, [pc, #532]	; (8001800 <menu+0x4e4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d123      	bne.n	8001638 <menu+0x31c>
			if(dilSecim == 0) {
 80015f0:	4b7d      	ldr	r3, [pc, #500]	; (80017e8 <menu+0x4cc>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80015f8:	4a82      	ldr	r2, [pc, #520]	; (8001804 <menu+0x4e8>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	2002      	movs	r0, #2
 80015fe:	f7ff f8db 	bl	80007b8 <lcd_print>
 8001602:	e008      	b.n	8001616 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001604:	4b78      	ldr	r3, [pc, #480]	; (80017e8 <menu+0x4cc>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d104      	bne.n	8001616 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 800160c:	4a7e      	ldr	r2, [pc, #504]	; (8001808 <menu+0x4ec>)
 800160e:	2101      	movs	r1, #1
 8001610:	2002      	movs	r0, #2
 8001612:	f7ff f8d1 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001616:	4a7d      	ldr	r2, [pc, #500]	; (800180c <menu+0x4f0>)
 8001618:	210f      	movs	r1, #15
 800161a:	2002      	movs	r0, #2
 800161c:	f7ff f8cc 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001620:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <menu+0x4f4>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	220a      	movs	r2, #10
 8001626:	497b      	ldr	r1, [pc, #492]	; (8001814 <menu+0x4f8>)
 8001628:	4618      	mov	r0, r3
 800162a:	f00a fe85 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 800162e:	4a79      	ldr	r2, [pc, #484]	; (8001814 <menu+0x4f8>)
 8001630:	210e      	movs	r1, #14
 8001632:	2002      	movs	r0, #2
 8001634:	f7ff f8c0 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001638:	4b71      	ldr	r3, [pc, #452]	; (8001800 <menu+0x4e4>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d123      	bne.n	8001688 <menu+0x36c>
			if(dilSecim == 0) {
 8001640:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <menu+0x4cc>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001648:	4a73      	ldr	r2, [pc, #460]	; (8001818 <menu+0x4fc>)
 800164a:	2101      	movs	r1, #1
 800164c:	2002      	movs	r0, #2
 800164e:	f7ff f8b3 	bl	80007b8 <lcd_print>
 8001652:	e008      	b.n	8001666 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001654:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <menu+0x4cc>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d104      	bne.n	8001666 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 800165c:	4a6f      	ldr	r2, [pc, #444]	; (800181c <menu+0x500>)
 800165e:	2101      	movs	r1, #1
 8001660:	2002      	movs	r0, #2
 8001662:	f7ff f8a9 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001666:	4a6e      	ldr	r2, [pc, #440]	; (8001820 <menu+0x504>)
 8001668:	210f      	movs	r1, #15
 800166a:	2002      	movs	r0, #2
 800166c:	f7ff f8a4 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001670:	4b6c      	ldr	r3, [pc, #432]	; (8001824 <menu+0x508>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	220a      	movs	r2, #10
 8001676:	4967      	ldr	r1, [pc, #412]	; (8001814 <menu+0x4f8>)
 8001678:	4618      	mov	r0, r3
 800167a:	f00a fe5d 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 800167e:	4a65      	ldr	r2, [pc, #404]	; (8001814 <menu+0x4f8>)
 8001680:	210e      	movs	r1, #14
 8001682:	2002      	movs	r0, #2
 8001684:	f7ff f898 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001688:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <menu+0x4e4>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d123      	bne.n	80016d8 <menu+0x3bc>
			if(dilSecim == 0) {
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <menu+0x4cc>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001698:	4a63      	ldr	r2, [pc, #396]	; (8001828 <menu+0x50c>)
 800169a:	2101      	movs	r1, #1
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff f88b 	bl	80007b8 <lcd_print>
 80016a2:	e008      	b.n	80016b6 <menu+0x39a>
			} else if(dilSecim == 1) {
 80016a4:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <menu+0x4cc>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d104      	bne.n	80016b6 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80016ac:	4a5f      	ldr	r2, [pc, #380]	; (800182c <menu+0x510>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	2002      	movs	r0, #2
 80016b2:	f7ff f881 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016b6:	4a5a      	ldr	r2, [pc, #360]	; (8001820 <menu+0x504>)
 80016b8:	210f      	movs	r1, #15
 80016ba:	2002      	movs	r0, #2
 80016bc:	f7ff f87c 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80016c0:	4b5b      	ldr	r3, [pc, #364]	; (8001830 <menu+0x514>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	220a      	movs	r2, #10
 80016c6:	4953      	ldr	r1, [pc, #332]	; (8001814 <menu+0x4f8>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a fe35 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 80016ce:	4a51      	ldr	r2, [pc, #324]	; (8001814 <menu+0x4f8>)
 80016d0:	210e      	movs	r1, #14
 80016d2:	2002      	movs	r0, #2
 80016d4:	f7ff f870 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80016d8:	4b49      	ldr	r3, [pc, #292]	; (8001800 <menu+0x4e4>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d123      	bne.n	8001728 <menu+0x40c>
			if(dilSecim == 0) {
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <menu+0x4cc>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <menu+0x518>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	2002      	movs	r0, #2
 80016ee:	f7ff f863 	bl	80007b8 <lcd_print>
 80016f2:	e008      	b.n	8001706 <menu+0x3ea>
			} else if(dilSecim == 1) {
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <menu+0x4cc>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d104      	bne.n	8001706 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80016fc:	4a4e      	ldr	r2, [pc, #312]	; (8001838 <menu+0x51c>)
 80016fe:	2101      	movs	r1, #1
 8001700:	2002      	movs	r0, #2
 8001702:	f7ff f859 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001706:	4a46      	ldr	r2, [pc, #280]	; (8001820 <menu+0x504>)
 8001708:	210f      	movs	r1, #15
 800170a:	2002      	movs	r0, #2
 800170c:	f7ff f854 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001710:	4b4a      	ldr	r3, [pc, #296]	; (800183c <menu+0x520>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	220a      	movs	r2, #10
 8001716:	493f      	ldr	r1, [pc, #252]	; (8001814 <menu+0x4f8>)
 8001718:	4618      	mov	r0, r3
 800171a:	f00a fe0d 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 800171e:	4a3d      	ldr	r2, [pc, #244]	; (8001814 <menu+0x4f8>)
 8001720:	210e      	movs	r1, #14
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff f848 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <menu+0x4e4>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d123      	bne.n	8001778 <menu+0x45c>
			if(dilSecim == 0) {
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <menu+0x4cc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001738:	4a41      	ldr	r2, [pc, #260]	; (8001840 <menu+0x524>)
 800173a:	2101      	movs	r1, #1
 800173c:	2002      	movs	r0, #2
 800173e:	f7ff f83b 	bl	80007b8 <lcd_print>
 8001742:	e008      	b.n	8001756 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <menu+0x4cc>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d104      	bne.n	8001756 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 800174c:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <menu+0x528>)
 800174e:	2101      	movs	r1, #1
 8001750:	2002      	movs	r0, #2
 8001752:	f7ff f831 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <menu+0x504>)
 8001758:	210f      	movs	r1, #15
 800175a:	2002      	movs	r0, #2
 800175c:	f7ff f82c 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <menu+0x52c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	220a      	movs	r2, #10
 8001766:	492b      	ldr	r1, [pc, #172]	; (8001814 <menu+0x4f8>)
 8001768:	4618      	mov	r0, r3
 800176a:	f00a fde5 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 800176e:	4a29      	ldr	r2, [pc, #164]	; (8001814 <menu+0x4f8>)
 8001770:	210e      	movs	r1, #14
 8001772:	2002      	movs	r0, #2
 8001774:	f7ff f820 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <menu+0x4e4>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d123      	bne.n	80017c8 <menu+0x4ac>
			if(dilSecim == 0) {
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <menu+0x4cc>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001788:	4a30      	ldr	r2, [pc, #192]	; (800184c <menu+0x530>)
 800178a:	2101      	movs	r1, #1
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff f813 	bl	80007b8 <lcd_print>
 8001792:	e008      	b.n	80017a6 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <menu+0x4cc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d104      	bne.n	80017a6 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 800179c:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <menu+0x534>)
 800179e:	2101      	movs	r1, #1
 80017a0:	2002      	movs	r0, #2
 80017a2:	f7ff f809 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <menu+0x504>)
 80017a8:	210f      	movs	r1, #15
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff f804 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <menu+0x538>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	220a      	movs	r2, #10
 80017b6:	4917      	ldr	r1, [pc, #92]	; (8001814 <menu+0x4f8>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00a fdbd 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <menu+0x4f8>)
 80017c0:	210e      	movs	r1, #14
 80017c2:	2002      	movs	r0, #2
 80017c4:	f7fe fff8 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <menu+0x4e4>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b06      	cmp	r3, #6
 80017ce:	d15f      	bne.n	8001890 <menu+0x574>
			if(dilSecim == 0) {
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <menu+0x4cc>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d141      	bne.n	800185c <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80017d8:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <menu+0x53c>)
 80017da:	2101      	movs	r1, #1
 80017dc:	2002      	movs	r0, #2
 80017de:	f7fe ffeb 	bl	80007b8 <lcd_print>
 80017e2:	e044      	b.n	800186e <menu+0x552>
 80017e4:	0800cf6c 	.word	0x0800cf6c
 80017e8:	20000309 	.word	0x20000309
 80017ec:	0800cf80 	.word	0x0800cf80
 80017f0:	0800cf94 	.word	0x0800cf94
 80017f4:	200002e8 	.word	0x200002e8
 80017f8:	0800cfa8 	.word	0x0800cfa8
 80017fc:	0800cfbc 	.word	0x0800cfbc
 8001800:	200002ea 	.word	0x200002ea
 8001804:	0800cfd0 	.word	0x0800cfd0
 8001808:	0800cfe0 	.word	0x0800cfe0
 800180c:	0800cff0 	.word	0x0800cff0
 8001810:	2000030a 	.word	0x2000030a
 8001814:	20000288 	.word	0x20000288
 8001818:	0800cff4 	.word	0x0800cff4
 800181c:	0800d004 	.word	0x0800d004
 8001820:	0800d014 	.word	0x0800d014
 8001824:	2000030b 	.word	0x2000030b
 8001828:	0800d018 	.word	0x0800d018
 800182c:	0800d028 	.word	0x0800d028
 8001830:	2000030c 	.word	0x2000030c
 8001834:	0800d038 	.word	0x0800d038
 8001838:	0800d048 	.word	0x0800d048
 800183c:	2000030d 	.word	0x2000030d
 8001840:	0800d058 	.word	0x0800d058
 8001844:	0800d068 	.word	0x0800d068
 8001848:	2000030e 	.word	0x2000030e
 800184c:	0800d078 	.word	0x0800d078
 8001850:	0800d088 	.word	0x0800d088
 8001854:	2000030f 	.word	0x2000030f
 8001858:	0800d098 	.word	0x0800d098
			} else if(dilSecim == 1) {
 800185c:	4b4f      	ldr	r3, [pc, #316]	; (800199c <menu+0x680>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d104      	bne.n	800186e <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001864:	4a4e      	ldr	r2, [pc, #312]	; (80019a0 <menu+0x684>)
 8001866:	2101      	movs	r1, #1
 8001868:	2002      	movs	r0, #2
 800186a:	f7fe ffa5 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800186e:	4a4d      	ldr	r2, [pc, #308]	; (80019a4 <menu+0x688>)
 8001870:	210f      	movs	r1, #15
 8001872:	2002      	movs	r0, #2
 8001874:	f7fe ffa0 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001878:	4b4b      	ldr	r3, [pc, #300]	; (80019a8 <menu+0x68c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	220a      	movs	r2, #10
 800187e:	494b      	ldr	r1, [pc, #300]	; (80019ac <menu+0x690>)
 8001880:	4618      	mov	r0, r3
 8001882:	f00a fd59 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 8001886:	4a49      	ldr	r2, [pc, #292]	; (80019ac <menu+0x690>)
 8001888:	210e      	movs	r1, #14
 800188a:	2002      	movs	r0, #2
 800188c:	f7fe ff94 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001890:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <menu+0x694>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b07      	cmp	r3, #7
 8001896:	d123      	bne.n	80018e0 <menu+0x5c4>
			if(dilSecim == 0) {
 8001898:	4b40      	ldr	r3, [pc, #256]	; (800199c <menu+0x680>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80018a0:	4a44      	ldr	r2, [pc, #272]	; (80019b4 <menu+0x698>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	2002      	movs	r0, #2
 80018a6:	f7fe ff87 	bl	80007b8 <lcd_print>
 80018aa:	e008      	b.n	80018be <menu+0x5a2>
			} else if(dilSecim == 1) {
 80018ac:	4b3b      	ldr	r3, [pc, #236]	; (800199c <menu+0x680>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d104      	bne.n	80018be <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80018b4:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <menu+0x69c>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	2002      	movs	r0, #2
 80018ba:	f7fe ff7d 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018be:	4a39      	ldr	r2, [pc, #228]	; (80019a4 <menu+0x688>)
 80018c0:	210f      	movs	r1, #15
 80018c2:	2002      	movs	r0, #2
 80018c4:	f7fe ff78 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <menu+0x6a0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	220a      	movs	r2, #10
 80018ce:	4937      	ldr	r1, [pc, #220]	; (80019ac <menu+0x690>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00a fd31 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 80018d6:	4a35      	ldr	r2, [pc, #212]	; (80019ac <menu+0x690>)
 80018d8:	210e      	movs	r1, #14
 80018da:	2002      	movs	r0, #2
 80018dc:	f7fe ff6c 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <menu+0x694>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d123      	bne.n	8001930 <menu+0x614>
			if(dilSecim == 0) {
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <menu+0x680>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80018f0:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <menu+0x6a4>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	2002      	movs	r0, #2
 80018f6:	f7fe ff5f 	bl	80007b8 <lcd_print>
 80018fa:	e008      	b.n	800190e <menu+0x5f2>
			} else if(dilSecim == 1) {
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <menu+0x680>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d104      	bne.n	800190e <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001904:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <menu+0x6a8>)
 8001906:	2101      	movs	r1, #1
 8001908:	2002      	movs	r0, #2
 800190a:	f7fe ff55 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800190e:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <menu+0x688>)
 8001910:	210f      	movs	r1, #15
 8001912:	2002      	movs	r0, #2
 8001914:	f7fe ff50 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <menu+0x6ac>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	220a      	movs	r2, #10
 800191e:	4923      	ldr	r1, [pc, #140]	; (80019ac <menu+0x690>)
 8001920:	4618      	mov	r0, r3
 8001922:	f00a fd09 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 8001926:	4a21      	ldr	r2, [pc, #132]	; (80019ac <menu+0x690>)
 8001928:	210e      	movs	r1, #14
 800192a:	2002      	movs	r0, #2
 800192c:	f7fe ff44 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <menu+0x694>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d123      	bne.n	8001980 <menu+0x664>
			if(dilSecim == 0) {
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <menu+0x680>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001940:	4a22      	ldr	r2, [pc, #136]	; (80019cc <menu+0x6b0>)
 8001942:	2101      	movs	r1, #1
 8001944:	2002      	movs	r0, #2
 8001946:	f7fe ff37 	bl	80007b8 <lcd_print>
 800194a:	e008      	b.n	800195e <menu+0x642>
			} else if(dilSecim == 1) {
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <menu+0x680>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d104      	bne.n	800195e <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001954:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <menu+0x6b4>)
 8001956:	2101      	movs	r1, #1
 8001958:	2002      	movs	r0, #2
 800195a:	f7fe ff2d 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <menu+0x6b8>)
 8001960:	2110      	movs	r1, #16
 8001962:	2002      	movs	r0, #2
 8001964:	f7fe ff28 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <menu+0x6bc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	220a      	movs	r2, #10
 800196e:	490f      	ldr	r1, [pc, #60]	; (80019ac <menu+0x690>)
 8001970:	4618      	mov	r0, r3
 8001972:	f00a fce1 	bl	800c338 <itoa>
			lcd_print(2, 15, snum);
 8001976:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <menu+0x690>)
 8001978:	210f      	movs	r1, #15
 800197a:	2002      	movs	r0, #2
 800197c:	f7fe ff1c 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <menu+0x694>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b0a      	cmp	r3, #10
 8001986:	d134      	bne.n	80019f2 <menu+0x6d6>
			if(dilSecim == 0) {
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <menu+0x680>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d127      	bne.n	80019e0 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <menu+0x6c0>)
 8001992:	2101      	movs	r1, #1
 8001994:	2002      	movs	r0, #2
 8001996:	f7fe ff0f 	bl	80007b8 <lcd_print>
 800199a:	e02a      	b.n	80019f2 <menu+0x6d6>
 800199c:	20000309 	.word	0x20000309
 80019a0:	0800d0a8 	.word	0x0800d0a8
 80019a4:	0800d014 	.word	0x0800d014
 80019a8:	20000310 	.word	0x20000310
 80019ac:	20000288 	.word	0x20000288
 80019b0:	200002ea 	.word	0x200002ea
 80019b4:	0800d0b8 	.word	0x0800d0b8
 80019b8:	0800d0c8 	.word	0x0800d0c8
 80019bc:	20000311 	.word	0x20000311
 80019c0:	0800d0d8 	.word	0x0800d0d8
 80019c4:	0800d0e8 	.word	0x0800d0e8
 80019c8:	20000312 	.word	0x20000312
 80019cc:	0800d0f8 	.word	0x0800d0f8
 80019d0:	0800d108 	.word	0x0800d108
 80019d4:	0800d118 	.word	0x0800d118
 80019d8:	20000313 	.word	0x20000313
 80019dc:	0800d11c 	.word	0x0800d11c
			} else if(dilSecim == 1) {
 80019e0:	4b82      	ldr	r3, [pc, #520]	; (8001bec <menu+0x8d0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d104      	bne.n	80019f2 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80019e8:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <menu+0x8d4>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f7fe fee3 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019f2:	2102      	movs	r1, #2
 80019f4:	487f      	ldr	r0, [pc, #508]	; (8001bf4 <menu+0x8d8>)
 80019f6:	f007 fc73 	bl	80092e0 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d119      	bne.n	8001a34 <menu+0x718>
 8001a00:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <menu+0x8dc>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <menu+0x718>
 8001a0e:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <menu+0x8e0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10e      	bne.n	8001a34 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a16:	4b7a      	ldr	r3, [pc, #488]	; (8001c00 <menu+0x8e4>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b78      	ldr	r3, [pc, #480]	; (8001c00 <menu+0x8e4>)
 8001a20:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a22:	4b77      	ldr	r3, [pc, #476]	; (8001c00 <menu+0x8e4>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d902      	bls.n	8001a30 <menu+0x714>
				hataGostermeSirasi = 0;
 8001a2a:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <menu+0x8e4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a30:	f003 fe80 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a34:	2104      	movs	r1, #4
 8001a36:	486f      	ldr	r0, [pc, #444]	; (8001bf4 <menu+0x8d8>)
 8001a38:	f007 fc52 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d119      	bne.n	8001a76 <menu+0x75a>
 8001a42:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <menu+0x8dc>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	f083 0301 	eor.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d012      	beq.n	8001a76 <menu+0x75a>
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <menu+0x8e0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10e      	bne.n	8001a76 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a58:	4b69      	ldr	r3, [pc, #420]	; (8001c00 <menu+0x8e4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <menu+0x8e4>)
 8001a62:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a64:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <menu+0x8e4>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b0b      	cmp	r3, #11
 8001a6a:	d902      	bls.n	8001a72 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001a6c:	4b64      	ldr	r3, [pc, #400]	; (8001c00 <menu+0x8e4>)
 8001a6e:	220a      	movs	r2, #10
 8001a70:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a72:	f003 fe5f 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a76:	2108      	movs	r1, #8
 8001a78:	485e      	ldr	r0, [pc, #376]	; (8001bf4 <menu+0x8d8>)
 8001a7a:	f007 fc31 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d153      	bne.n	8001b2c <menu+0x810>
 8001a84:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <menu+0x8dc>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d04c      	beq.n	8001b2c <menu+0x810>
 8001a92:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <menu+0x8e4>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b0a      	cmp	r3, #10
 8001a98:	d148      	bne.n	8001b2c <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <menu+0x8e8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <menu+0x8ec>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001aa8:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <menu+0x8f0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <menu+0x8ec>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001ab6:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <menu+0x8f4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	4b52      	ldr	r3, [pc, #328]	; (8001c08 <menu+0x8ec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <menu+0x8f8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <menu+0x8ec>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <menu+0x8fc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <menu+0x8ec>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001ae0:	4b4e      	ldr	r3, [pc, #312]	; (8001c1c <menu+0x900>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <menu+0x8ec>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001aee:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <menu+0x904>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <menu+0x8ec>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001afc:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <menu+0x908>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <menu+0x8ec>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <menu+0x90c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <menu+0x8ec>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001b18:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <menu+0x910>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <menu+0x8ec>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001b26:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <menu+0x914>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001b2c:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <menu+0x918>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	f040 80fc 	bne.w	8001d2e <menu+0xa12>
		if(dilSecim == 0) {
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <menu+0x8d0>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b3e:	4a3e      	ldr	r2, [pc, #248]	; (8001c38 <menu+0x91c>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7fe fe38 	bl	80007b8 <lcd_print>
 8001b48:	e008      	b.n	8001b5c <menu+0x840>
		} else if(dilSecim == 1) {
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <menu+0x8d0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d104      	bne.n	8001b5c <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001b52:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <menu+0x920>)
 8001b54:	2101      	movs	r1, #1
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7fe fe2e 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <menu+0x8e0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d003      	beq.n	8001b6c <menu+0x850>
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <menu+0x8e0>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d112      	bne.n	8001b92 <menu+0x876>
			if(dilSecim == 0) {
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <menu+0x8d0>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001b74:	4a32      	ldr	r2, [pc, #200]	; (8001c40 <menu+0x924>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f7fe fe1d 	bl	80007b8 <lcd_print>
 8001b7e:	e008      	b.n	8001b92 <menu+0x876>
			} else if(dilSecim == 1) {
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <menu+0x8d0>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d104      	bne.n	8001b92 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b88:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <menu+0x928>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7fe fe13 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <menu+0x92c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <menu+0x8ac>
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <menu+0x8e0>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d112      	bne.n	8001bc8 <menu+0x8ac>
			if(dilSecim == 0) {
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <menu+0x8d0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001baa:	4a28      	ldr	r2, [pc, #160]	; (8001c4c <menu+0x930>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f7fe fe02 	bl	80007b8 <lcd_print>
 8001bb4:	e008      	b.n	8001bc8 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <menu+0x8d0>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d104      	bne.n	8001bc8 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <menu+0x934>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f7fe fdf8 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <menu+0x92c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d14c      	bne.n	8001c6a <menu+0x94e>
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <menu+0x8e0>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d148      	bne.n	8001c6a <menu+0x94e>
			if(dilSecim == 0) {
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <menu+0x8d0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d13b      	bne.n	8001c58 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001be0:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <menu+0x938>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	2002      	movs	r0, #2
 8001be6:	f7fe fde7 	bl	80007b8 <lcd_print>
 8001bea:	e03e      	b.n	8001c6a <menu+0x94e>
 8001bec:	20000309 	.word	0x20000309
 8001bf0:	0800d130 	.word	0x0800d130
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	20000317 	.word	0x20000317
 8001bfc:	200002f7 	.word	0x200002f7
 8001c00:	200002ea 	.word	0x200002ea
 8001c04:	2000030a 	.word	0x2000030a
 8001c08:	20000218 	.word	0x20000218
 8001c0c:	2000030b 	.word	0x2000030b
 8001c10:	2000030c 	.word	0x2000030c
 8001c14:	2000030d 	.word	0x2000030d
 8001c18:	2000030e 	.word	0x2000030e
 8001c1c:	2000030f 	.word	0x2000030f
 8001c20:	20000310 	.word	0x20000310
 8001c24:	20000311 	.word	0x20000311
 8001c28:	20000312 	.word	0x20000312
 8001c2c:	20000313 	.word	0x20000313
 8001c30:	20000314 	.word	0x20000314
 8001c34:	200002e8 	.word	0x200002e8
 8001c38:	0800d144 	.word	0x0800d144
 8001c3c:	0800d158 	.word	0x0800d158
 8001c40:	0800d16c 	.word	0x0800d16c
 8001c44:	0800d180 	.word	0x0800d180
 8001c48:	200002e9 	.word	0x200002e9
 8001c4c:	0800d194 	.word	0x0800d194
 8001c50:	0800d1a4 	.word	0x0800d1a4
 8001c54:	0800d1b4 	.word	0x0800d1b4
			} else if(dilSecim == 1) {
 8001c58:	4b98      	ldr	r3, [pc, #608]	; (8001ebc <menu+0xba0>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d104      	bne.n	8001c6a <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001c60:	4a97      	ldr	r2, [pc, #604]	; (8001ec0 <menu+0xba4>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7fe fda7 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	4895      	ldr	r0, [pc, #596]	; (8001ec4 <menu+0xba8>)
 8001c6e:	f007 fb37 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d119      	bne.n	8001cac <menu+0x990>
 8001c78:	4b93      	ldr	r3, [pc, #588]	; (8001ec8 <menu+0xbac>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d012      	beq.n	8001cac <menu+0x990>
 8001c86:	4b91      	ldr	r3, [pc, #580]	; (8001ecc <menu+0xbb0>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10e      	bne.n	8001cac <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001c8e:	4b90      	ldr	r3, [pc, #576]	; (8001ed0 <menu+0xbb4>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <menu+0xbb4>)
 8001c98:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c9a:	4b8d      	ldr	r3, [pc, #564]	; (8001ed0 <menu+0xbb4>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d902      	bls.n	8001ca8 <menu+0x98c>
				calismaSekli = 0;
 8001ca2:	4b8b      	ldr	r3, [pc, #556]	; (8001ed0 <menu+0xbb4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ca8:	f003 fd44 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cac:	2104      	movs	r1, #4
 8001cae:	4885      	ldr	r0, [pc, #532]	; (8001ec4 <menu+0xba8>)
 8001cb0:	f007 fb16 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d119      	bne.n	8001cee <menu+0x9d2>
 8001cba:	4b83      	ldr	r3, [pc, #524]	; (8001ec8 <menu+0xbac>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f083 0301 	eor.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d012      	beq.n	8001cee <menu+0x9d2>
 8001cc8:	4b80      	ldr	r3, [pc, #512]	; (8001ecc <menu+0xbb0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10e      	bne.n	8001cee <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001cd0:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <menu+0xbb4>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b7d      	ldr	r3, [pc, #500]	; (8001ed0 <menu+0xbb4>)
 8001cda:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001cdc:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <menu+0xbb4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <menu+0x9ce>
	    		calismaSekli = 1;
 8001ce4:	4b7a      	ldr	r3, [pc, #488]	; (8001ed0 <menu+0xbb4>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cea:	f003 fd23 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cee:	2108      	movs	r1, #8
 8001cf0:	4874      	ldr	r0, [pc, #464]	; (8001ec4 <menu+0xba8>)
 8001cf2:	f007 faf5 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d118      	bne.n	8001d2e <menu+0xa12>
 8001cfc:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <menu+0xbac>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	f083 0301 	eor.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d011      	beq.n	8001d2e <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d0a:	4b71      	ldr	r3, [pc, #452]	; (8001ed0 <menu+0xbb4>)
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	4b71      	ldr	r3, [pc, #452]	; (8001ed4 <menu+0xbb8>)
 8001d10:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d12:	4b6f      	ldr	r3, [pc, #444]	; (8001ed0 <menu+0xbb4>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d106      	bne.n	8001d28 <menu+0xa0c>
				altLimit = 1;
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	; (8001ed8 <menu+0xbbc>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d20:	4b6d      	ldr	r3, [pc, #436]	; (8001ed8 <menu+0xbbc>)
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	4b6b      	ldr	r3, [pc, #428]	; (8001ed4 <menu+0xbb8>)
 8001d26:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d28:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <menu+0xbc0>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <menu+0xbc4>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	f040 8083 	bne.w	8001e3e <menu+0xb22>
		if(dilSecim == 0) {
 8001d38:	4b60      	ldr	r3, [pc, #384]	; (8001ebc <menu+0xba0>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d40:	4a68      	ldr	r2, [pc, #416]	; (8001ee4 <menu+0xbc8>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7fe fd37 	bl	80007b8 <lcd_print>
 8001d4a:	e008      	b.n	8001d5e <menu+0xa42>
		} else if(dilSecim == 1) {
 8001d4c:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <menu+0xba0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d104      	bne.n	8001d5e <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001d54:	4a64      	ldr	r2, [pc, #400]	; (8001ee8 <menu+0xbcc>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7fe fd2d 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001d5e:	4b63      	ldr	r3, [pc, #396]	; (8001eec <menu+0xbd0>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d113      	bne.n	8001d8e <menu+0xa72>
			if(dilSecim == 0) {
 8001d66:	4b55      	ldr	r3, [pc, #340]	; (8001ebc <menu+0xba0>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001d6e:	4a60      	ldr	r2, [pc, #384]	; (8001ef0 <menu+0xbd4>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	2002      	movs	r0, #2
 8001d74:	f7fe fd20 	bl	80007b8 <lcd_print>
 8001d78:	e012      	b.n	8001da0 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <menu+0xba0>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d10e      	bne.n	8001da0 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001d82:	4a5c      	ldr	r2, [pc, #368]	; (8001ef4 <menu+0xbd8>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	2002      	movs	r0, #2
 8001d88:	f7fe fd16 	bl	80007b8 <lcd_print>
 8001d8c:	e008      	b.n	8001da0 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001d8e:	4b57      	ldr	r3, [pc, #348]	; (8001eec <menu+0xbd0>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d104      	bne.n	8001da0 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d96:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <menu+0xbdc>)
 8001d98:	2101      	movs	r1, #1
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f7fe fd0c 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001da0:	2102      	movs	r1, #2
 8001da2:	4848      	ldr	r0, [pc, #288]	; (8001ec4 <menu+0xba8>)
 8001da4:	f007 fa9c 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d115      	bne.n	8001dda <menu+0xabe>
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <menu+0xbac>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	f083 0301 	eor.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00e      	beq.n	8001dda <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <menu+0xbd0>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b49      	ldr	r3, [pc, #292]	; (8001eec <menu+0xbd0>)
 8001dc6:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001dc8:	4b48      	ldr	r3, [pc, #288]	; (8001eec <menu+0xbd0>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d902      	bls.n	8001dd6 <menu+0xaba>
				emniyetCercevesi = 0;
 8001dd0:	4b46      	ldr	r3, [pc, #280]	; (8001eec <menu+0xbd0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dd6:	f003 fcad 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dda:	2104      	movs	r1, #4
 8001ddc:	4839      	ldr	r0, [pc, #228]	; (8001ec4 <menu+0xba8>)
 8001dde:	f007 fa7f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d115      	bne.n	8001e14 <menu+0xaf8>
 8001de8:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <menu+0xbac>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f083 0301 	eor.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00e      	beq.n	8001e14 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <menu+0xbd0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <menu+0xbd0>)
 8001e00:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <menu+0xbd0>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e0a:	4b38      	ldr	r3, [pc, #224]	; (8001eec <menu+0xbd0>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e10:	f003 fc90 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e14:	2108      	movs	r1, #8
 8001e16:	482b      	ldr	r0, [pc, #172]	; (8001ec4 <menu+0xba8>)
 8001e18:	f007 fa62 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d10d      	bne.n	8001e3e <menu+0xb22>
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <menu+0xbac>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <menu+0xbd0>)
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <menu+0xbb8>)
 8001e36:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <menu+0xbc0>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e3e:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <menu+0xbc4>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	f040 80ba 	bne.w	8001fbc <menu+0xca0>
		if(dilSecim == 0) {
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <menu+0xba0>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001e50:	4a2a      	ldr	r2, [pc, #168]	; (8001efc <menu+0xbe0>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7fe fcaf 	bl	80007b8 <lcd_print>
 8001e5a:	e008      	b.n	8001e6e <menu+0xb52>
		} else if(dilSecim == 1) {
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <menu+0xba0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d104      	bne.n	8001e6e <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <menu+0xbe4>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7fe fca5 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <menu+0xbe8>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d113      	bne.n	8001e9e <menu+0xb82>
			if(dilSecim == 0) {
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <menu+0xba0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <menu+0xbd4>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	2002      	movs	r0, #2
 8001e84:	f7fe fc98 	bl	80007b8 <lcd_print>
 8001e88:	e049      	b.n	8001f1e <menu+0xc02>
			} else if(dilSecim == 1) {
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <menu+0xba0>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d145      	bne.n	8001f1e <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <menu+0xbd8>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7fe fc8e 	bl	80007b8 <lcd_print>
 8001e9c:	e03f      	b.n	8001f1e <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <menu+0xbe8>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d13b      	bne.n	8001f1e <menu+0xc02>
			if(dilSecim == 0) {
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <menu+0xba0>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d12e      	bne.n	8001f0c <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <menu+0xbec>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7fe fc80 	bl	80007b8 <lcd_print>
 8001eb8:	e031      	b.n	8001f1e <menu+0xc02>
 8001eba:	bf00      	nop
 8001ebc:	20000309 	.word	0x20000309
 8001ec0:	0800d1c4 	.word	0x0800d1c4
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	20000317 	.word	0x20000317
 8001ecc:	200002f7 	.word	0x200002f7
 8001ed0:	200002e9 	.word	0x200002e9
 8001ed4:	20000218 	.word	0x20000218
 8001ed8:	200002ee 	.word	0x200002ee
 8001edc:	20000314 	.word	0x20000314
 8001ee0:	200002e8 	.word	0x200002e8
 8001ee4:	0800d1d4 	.word	0x0800d1d4
 8001ee8:	0800d1e8 	.word	0x0800d1e8
 8001eec:	200002ec 	.word	0x200002ec
 8001ef0:	0800d1fc 	.word	0x0800d1fc
 8001ef4:	0800d210 	.word	0x0800d210
 8001ef8:	0800d224 	.word	0x0800d224
 8001efc:	0800d234 	.word	0x0800d234
 8001f00:	0800d248 	.word	0x0800d248
 8001f04:	200002ed 	.word	0x200002ed
 8001f08:	0800d25c 	.word	0x0800d25c
			} else if(dilSecim == 1) {
 8001f0c:	4b92      	ldr	r3, [pc, #584]	; (8002158 <menu+0xe3c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d104      	bne.n	8001f1e <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001f14:	4a91      	ldr	r2, [pc, #580]	; (800215c <menu+0xe40>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7fe fc4d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f1e:	2102      	movs	r1, #2
 8001f20:	488f      	ldr	r0, [pc, #572]	; (8002160 <menu+0xe44>)
 8001f22:	f007 f9dd 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d115      	bne.n	8001f58 <menu+0xc3c>
 8001f2c:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <menu+0xe48>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00e      	beq.n	8001f58 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f3a:	4b8b      	ldr	r3, [pc, #556]	; (8002168 <menu+0xe4c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b89      	ldr	r3, [pc, #548]	; (8002168 <menu+0xe4c>)
 8001f44:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f46:	4b88      	ldr	r3, [pc, #544]	; (8002168 <menu+0xe4c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d902      	bls.n	8001f54 <menu+0xc38>
				yavaslamaLimit = 0;
 8001f4e:	4b86      	ldr	r3, [pc, #536]	; (8002168 <menu+0xe4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f54:	f003 fbee 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f58:	2104      	movs	r1, #4
 8001f5a:	4881      	ldr	r0, [pc, #516]	; (8002160 <menu+0xe44>)
 8001f5c:	f007 f9c0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d115      	bne.n	8001f92 <menu+0xc76>
 8001f66:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <menu+0xe48>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	f083 0301 	eor.w	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f74:	4b7c      	ldr	r3, [pc, #496]	; (8002168 <menu+0xe4c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b7a      	ldr	r3, [pc, #488]	; (8002168 <menu+0xe4c>)
 8001f7e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f80:	4b79      	ldr	r3, [pc, #484]	; (8002168 <menu+0xe4c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001f88:	4b77      	ldr	r3, [pc, #476]	; (8002168 <menu+0xe4c>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f8e:	f003 fbd1 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f92:	2108      	movs	r1, #8
 8001f94:	4872      	ldr	r0, [pc, #456]	; (8002160 <menu+0xe44>)
 8001f96:	f007 f9a3 	bl	80092e0 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10d      	bne.n	8001fbc <menu+0xca0>
 8001fa0:	4b70      	ldr	r3, [pc, #448]	; (8002164 <menu+0xe48>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f083 0301 	eor.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001fae:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <menu+0xe4c>)
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	; (800216c <menu+0xe50>)
 8001fb4:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	; (8002170 <menu+0xe54>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001fbc:	4b6d      	ldr	r3, [pc, #436]	; (8002174 <menu+0xe58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	f040 80b9 	bne.w	8002138 <menu+0xe1c>
		if(dilSecim == 0) {
 8001fc6:	4b64      	ldr	r3, [pc, #400]	; (8002158 <menu+0xe3c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001fce:	4a6a      	ldr	r2, [pc, #424]	; (8002178 <menu+0xe5c>)
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7fe fbf0 	bl	80007b8 <lcd_print>
 8001fd8:	e008      	b.n	8001fec <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001fda:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <menu+0xe3c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d104      	bne.n	8001fec <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <menu+0xe60>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7fe fbe6 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 8001fec:	4b64      	ldr	r3, [pc, #400]	; (8002180 <menu+0xe64>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d113      	bne.n	800201c <menu+0xd00>
			if(dilSecim == 0) {
 8001ff4:	4b58      	ldr	r3, [pc, #352]	; (8002158 <menu+0xe3c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001ffc:	4a61      	ldr	r2, [pc, #388]	; (8002184 <menu+0xe68>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	2002      	movs	r0, #2
 8002002:	f7fe fbd9 	bl	80007b8 <lcd_print>
 8002006:	e020      	b.n	800204a <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <menu+0xe3c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d11c      	bne.n	800204a <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002010:	4a5d      	ldr	r2, [pc, #372]	; (8002188 <menu+0xe6c>)
 8002012:	2101      	movs	r1, #1
 8002014:	2002      	movs	r0, #2
 8002016:	f7fe fbcf 	bl	80007b8 <lcd_print>
 800201a:	e016      	b.n	800204a <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 800201c:	4b58      	ldr	r3, [pc, #352]	; (8002180 <menu+0xe64>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d112      	bne.n	800204a <menu+0xd2e>
			if(dilSecim == 0){
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <menu+0xe3c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 800202c:	4a57      	ldr	r2, [pc, #348]	; (800218c <menu+0xe70>)
 800202e:	2101      	movs	r1, #1
 8002030:	2002      	movs	r0, #2
 8002032:	f7fe fbc1 	bl	80007b8 <lcd_print>
 8002036:	e008      	b.n	800204a <menu+0xd2e>
			} else if(dilSecim == 1){
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <menu+0xe3c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d104      	bne.n	800204a <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002040:	4a46      	ldr	r2, [pc, #280]	; (800215c <menu+0xe40>)
 8002042:	2101      	movs	r1, #1
 8002044:	2002      	movs	r0, #2
 8002046:	f7fe fbb7 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800204a:	2102      	movs	r1, #2
 800204c:	4844      	ldr	r0, [pc, #272]	; (8002160 <menu+0xe44>)
 800204e:	f007 f947 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	2b01      	cmp	r3, #1
 8002056:	d119      	bne.n	800208c <menu+0xd70>
 8002058:	4b42      	ldr	r3, [pc, #264]	; (8002164 <menu+0xe48>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d012      	beq.n	800208c <menu+0xd70>
 8002066:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <menu+0xe74>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10e      	bne.n	800208c <menu+0xd70>
			altLimit = altLimit + 1;
 800206e:	4b44      	ldr	r3, [pc, #272]	; (8002180 <menu+0xe64>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b42      	ldr	r3, [pc, #264]	; (8002180 <menu+0xe64>)
 8002078:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <menu+0xe64>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d902      	bls.n	8002088 <menu+0xd6c>
				altLimit = 0;
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <menu+0xe64>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002088:	f003 fb54 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800208c:	2104      	movs	r1, #4
 800208e:	4834      	ldr	r0, [pc, #208]	; (8002160 <menu+0xe44>)
 8002090:	f007 f926 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d119      	bne.n	80020ce <menu+0xdb2>
 800209a:	4b32      	ldr	r3, [pc, #200]	; (8002164 <menu+0xe48>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	f083 0301 	eor.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d012      	beq.n	80020ce <menu+0xdb2>
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <menu+0xe74>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10e      	bne.n	80020ce <menu+0xdb2>
			altLimit = altLimit - 1;
 80020b0:	4b33      	ldr	r3, [pc, #204]	; (8002180 <menu+0xe64>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b31      	ldr	r3, [pc, #196]	; (8002180 <menu+0xe64>)
 80020ba:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80020bc:	4b30      	ldr	r3, [pc, #192]	; (8002180 <menu+0xe64>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <menu+0xdae>
		   		altLimit = 1;
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <menu+0xe64>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ca:	f003 fb33 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ce:	2108      	movs	r1, #8
 80020d0:	4823      	ldr	r0, [pc, #140]	; (8002160 <menu+0xe44>)
 80020d2:	f007 f905 	bl	80092e0 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d12d      	bne.n	8002138 <menu+0xe1c>
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <menu+0xe48>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f083 0301 	eor.w	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d026      	beq.n	8002138 <menu+0xe1c>
			eepromData[5] = altLimit;
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <menu+0xe64>)
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <menu+0xe50>)
 80020f0:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <menu+0xe64>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d110      	bne.n	800211c <menu+0xe00>
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <menu+0xe78>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <menu+0xdee>
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <menu+0xe78>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d108      	bne.n	800211c <menu+0xe00>
				kapiTablaAcKonum = 3;
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <menu+0xe78>)
 800210c:	2203      	movs	r2, #3
 800210e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <menu+0xe78>)
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <menu+0xe50>)
 8002116:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800211a:	e00a      	b.n	8002132 <menu+0xe16>
			} else if(altLimit == 0) {
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <menu+0xe64>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <menu+0xe16>
				platformSilindirTipi = 0;
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <menu+0xe7c>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <menu+0xe7c>)
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <menu+0xe50>)
 8002130:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <menu+0xe54>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <menu+0xe58>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b06      	cmp	r3, #6
 800213e:	f040 80b6 	bne.w	80022ae <menu+0xf92>
		if(dilSecim == 0) {
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <menu+0xe3c>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d12a      	bne.n	80021a0 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800214a:	4a14      	ldr	r2, [pc, #80]	; (800219c <menu+0xe80>)
 800214c:	2101      	movs	r1, #1
 800214e:	2001      	movs	r0, #1
 8002150:	f7fe fb32 	bl	80007b8 <lcd_print>
 8002154:	e02d      	b.n	80021b2 <menu+0xe96>
 8002156:	bf00      	nop
 8002158:	20000309 	.word	0x20000309
 800215c:	0800d270 	.word	0x0800d270
 8002160:	40010800 	.word	0x40010800
 8002164:	20000317 	.word	0x20000317
 8002168:	200002ed 	.word	0x200002ed
 800216c:	20000218 	.word	0x20000218
 8002170:	20000314 	.word	0x20000314
 8002174:	200002e8 	.word	0x200002e8
 8002178:	0800d284 	.word	0x0800d284
 800217c:	0800d298 	.word	0x0800d298
 8002180:	200002ee 	.word	0x200002ee
 8002184:	0800d1fc 	.word	0x0800d1fc
 8002188:	0800d210 	.word	0x0800d210
 800218c:	0800d25c 	.word	0x0800d25c
 8002190:	200002e9 	.word	0x200002e9
 8002194:	200002f5 	.word	0x200002f5
 8002198:	200002fb 	.word	0x200002fb
 800219c:	0800d2ac 	.word	0x0800d2ac
		} else if(dilSecim == 1){
 80021a0:	4b7a      	ldr	r3, [pc, #488]	; (800238c <menu+0x1070>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d104      	bne.n	80021b2 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80021a8:	4a79      	ldr	r2, [pc, #484]	; (8002390 <menu+0x1074>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	2001      	movs	r0, #1
 80021ae:	f7fe fb03 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 80021b2:	4b78      	ldr	r3, [pc, #480]	; (8002394 <menu+0x1078>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d113      	bne.n	80021e2 <menu+0xec6>
			if(dilSecim == 0) {
 80021ba:	4b74      	ldr	r3, [pc, #464]	; (800238c <menu+0x1070>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <menu+0x107c>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	2002      	movs	r0, #2
 80021c8:	f7fe faf6 	bl	80007b8 <lcd_print>
 80021cc:	e020      	b.n	8002210 <menu+0xef4>
			} else if(dilSecim == 1){
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <menu+0x1070>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d11c      	bne.n	8002210 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80021d6:	4a71      	ldr	r2, [pc, #452]	; (800239c <menu+0x1080>)
 80021d8:	2101      	movs	r1, #1
 80021da:	2002      	movs	r0, #2
 80021dc:	f7fe faec 	bl	80007b8 <lcd_print>
 80021e0:	e016      	b.n	8002210 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80021e2:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <menu+0x1078>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d112      	bne.n	8002210 <menu+0xef4>
			if(dilSecim == 0) {
 80021ea:	4b68      	ldr	r3, [pc, #416]	; (800238c <menu+0x1070>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80021f2:	4a6b      	ldr	r2, [pc, #428]	; (80023a0 <menu+0x1084>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	2002      	movs	r0, #2
 80021f8:	f7fe fade 	bl	80007b8 <lcd_print>
 80021fc:	e008      	b.n	8002210 <menu+0xef4>
			} else if(dilSecim == 1) {
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <menu+0x1070>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d104      	bne.n	8002210 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002206:	4a67      	ldr	r2, [pc, #412]	; (80023a4 <menu+0x1088>)
 8002208:	2101      	movs	r1, #1
 800220a:	2002      	movs	r0, #2
 800220c:	f7fe fad4 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002210:	2102      	movs	r1, #2
 8002212:	4865      	ldr	r0, [pc, #404]	; (80023a8 <menu+0x108c>)
 8002214:	f007 f864 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d115      	bne.n	800224a <menu+0xf2e>
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <menu+0x1090>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <menu+0x1078>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b57      	ldr	r3, [pc, #348]	; (8002394 <menu+0x1078>)
 8002236:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002238:	4b56      	ldr	r3, [pc, #344]	; (8002394 <menu+0x1078>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d902      	bls.n	8002246 <menu+0xf2a>
				basincSalteri = 0;
 8002240:	4b54      	ldr	r3, [pc, #336]	; (8002394 <menu+0x1078>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002246:	f003 fa75 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800224a:	2104      	movs	r1, #4
 800224c:	4856      	ldr	r0, [pc, #344]	; (80023a8 <menu+0x108c>)
 800224e:	f007 f847 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
 8002254:	2b01      	cmp	r3, #1
 8002256:	d115      	bne.n	8002284 <menu+0xf68>
 8002258:	4b54      	ldr	r3, [pc, #336]	; (80023ac <menu+0x1090>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f083 0301 	eor.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00e      	beq.n	8002284 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002266:	4b4b      	ldr	r3, [pc, #300]	; (8002394 <menu+0x1078>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3b01      	subs	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <menu+0x1078>)
 8002270:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002272:	4b48      	ldr	r3, [pc, #288]	; (8002394 <menu+0x1078>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <menu+0xf64>
		   		basincSalteri = 1;
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <menu+0x1078>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002280:	f003 fa58 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002284:	2108      	movs	r1, #8
 8002286:	4848      	ldr	r0, [pc, #288]	; (80023a8 <menu+0x108c>)
 8002288:	f007 f82a 	bl	80092e0 <HAL_GPIO_ReadPin>
 800228c:	4603      	mov	r3, r0
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10d      	bne.n	80022ae <menu+0xf92>
 8002292:	4b46      	ldr	r3, [pc, #280]	; (80023ac <menu+0x1090>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	f083 0301 	eor.w	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <menu+0xf92>
			eepromData[6] = basincSalteri;
 80022a0:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <menu+0x1078>)
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <menu+0x1094>)
 80022a6:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <menu+0x1098>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <menu+0x109c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	f040 80f5 	bne.w	80024a2 <menu+0x1186>
		if(dilSecim == 0) {
 80022b8:	4b34      	ldr	r3, [pc, #208]	; (800238c <menu+0x1070>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80022c0:	4a3e      	ldr	r2, [pc, #248]	; (80023bc <menu+0x10a0>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7fe fa77 	bl	80007b8 <lcd_print>
 80022ca:	e008      	b.n	80022de <menu+0xfc2>
		} else if(dilSecim == 1){
 80022cc:	4b2f      	ldr	r3, [pc, #188]	; (800238c <menu+0x1070>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d104      	bne.n	80022de <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80022d4:	4a3a      	ldr	r2, [pc, #232]	; (80023c0 <menu+0x10a4>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	2001      	movs	r0, #1
 80022da:	f7fe fa6d 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80022de:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <menu+0x10a8>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d113      	bne.n	800230e <menu+0xff2>
			if(dilSecim == 0) {
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <menu+0x1070>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80022ee:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <menu+0x107c>)
 80022f0:	2101      	movs	r1, #1
 80022f2:	2002      	movs	r0, #2
 80022f4:	f7fe fa60 	bl	80007b8 <lcd_print>
 80022f8:	e079      	b.n	80023ee <menu+0x10d2>
			} else if(dilSecim == 1){
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <menu+0x1070>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d175      	bne.n	80023ee <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002302:	4a26      	ldr	r2, [pc, #152]	; (800239c <menu+0x1080>)
 8002304:	2101      	movs	r1, #1
 8002306:	2002      	movs	r0, #2
 8002308:	f7fe fa56 	bl	80007b8 <lcd_print>
 800230c:	e06f      	b.n	80023ee <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800230e:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <menu+0x10a8>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d113      	bne.n	800233e <menu+0x1022>
			if(dilSecim == 0) {
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <menu+0x1070>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800231e:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <menu+0x10ac>)
 8002320:	2101      	movs	r1, #1
 8002322:	2002      	movs	r0, #2
 8002324:	f7fe fa48 	bl	80007b8 <lcd_print>
 8002328:	e061      	b.n	80023ee <menu+0x10d2>
			} else if(dilSecim == 1) {
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <menu+0x1070>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d15d      	bne.n	80023ee <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002332:	4a26      	ldr	r2, [pc, #152]	; (80023cc <menu+0x10b0>)
 8002334:	2101      	movs	r1, #1
 8002336:	2002      	movs	r0, #2
 8002338:	f7fe fa3e 	bl	80007b8 <lcd_print>
 800233c:	e057      	b.n	80023ee <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <menu+0x10a8>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d113      	bne.n	800236e <menu+0x1052>
			if(dilSecim == 0) {
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <menu+0x1070>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800234e:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <menu+0x10b4>)
 8002350:	2101      	movs	r1, #1
 8002352:	2002      	movs	r0, #2
 8002354:	f7fe fa30 	bl	80007b8 <lcd_print>
 8002358:	e049      	b.n	80023ee <menu+0x10d2>
			} else if(dilSecim == 1) {
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <menu+0x1070>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d145      	bne.n	80023ee <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <menu+0x10b8>)
 8002364:	2101      	movs	r1, #1
 8002366:	2002      	movs	r0, #2
 8002368:	f7fe fa26 	bl	80007b8 <lcd_print>
 800236c:	e03f      	b.n	80023ee <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <menu+0x10a8>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d13b      	bne.n	80023ee <menu+0x10d2>
			if(dilSecim == 0) {
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <menu+0x1070>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d12e      	bne.n	80023dc <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800237e:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <menu+0x10bc>)
 8002380:	2101      	movs	r1, #1
 8002382:	2002      	movs	r0, #2
 8002384:	f7fe fa18 	bl	80007b8 <lcd_print>
 8002388:	e031      	b.n	80023ee <menu+0x10d2>
 800238a:	bf00      	nop
 800238c:	20000309 	.word	0x20000309
 8002390:	0800d2bc 	.word	0x0800d2bc
 8002394:	200002ef 	.word	0x200002ef
 8002398:	0800d1fc 	.word	0x0800d1fc
 800239c:	0800d210 	.word	0x0800d210
 80023a0:	0800d25c 	.word	0x0800d25c
 80023a4:	0800d270 	.word	0x0800d270
 80023a8:	40010800 	.word	0x40010800
 80023ac:	20000317 	.word	0x20000317
 80023b0:	20000218 	.word	0x20000218
 80023b4:	20000314 	.word	0x20000314
 80023b8:	200002e8 	.word	0x200002e8
 80023bc:	0800d2cc 	.word	0x0800d2cc
 80023c0:	0800d2e0 	.word	0x0800d2e0
 80023c4:	200002f0 	.word	0x200002f0
 80023c8:	0800d2f4 	.word	0x0800d2f4
 80023cc:	0800d308 	.word	0x0800d308
 80023d0:	0800d31c 	.word	0x0800d31c
 80023d4:	0800d330 	.word	0x0800d330
 80023d8:	0800d344 	.word	0x0800d344
			} else if(dilSecim == 1){
 80023dc:	4b99      	ldr	r3, [pc, #612]	; (8002644 <menu+0x1328>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d104      	bne.n	80023ee <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80023e4:	4a98      	ldr	r2, [pc, #608]	; (8002648 <menu+0x132c>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7fe f9e5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ee:	2102      	movs	r1, #2
 80023f0:	4896      	ldr	r0, [pc, #600]	; (800264c <menu+0x1330>)
 80023f2:	f006 ff75 	bl	80092e0 <HAL_GPIO_ReadPin>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d115      	bne.n	8002428 <menu+0x110c>
 80023fc:	4b94      	ldr	r3, [pc, #592]	; (8002650 <menu+0x1334>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00e      	beq.n	8002428 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800240a:	4b92      	ldr	r3, [pc, #584]	; (8002654 <menu+0x1338>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b90      	ldr	r3, [pc, #576]	; (8002654 <menu+0x1338>)
 8002414:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002416:	4b8f      	ldr	r3, [pc, #572]	; (8002654 <menu+0x1338>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d902      	bls.n	8002424 <menu+0x1108>
				kapiSecimleri = 0;
 800241e:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <menu+0x1338>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002424:	f003 f986 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002428:	2104      	movs	r1, #4
 800242a:	4888      	ldr	r0, [pc, #544]	; (800264c <menu+0x1330>)
 800242c:	f006 ff58 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002430:	4603      	mov	r3, r0
 8002432:	2b01      	cmp	r3, #1
 8002434:	d115      	bne.n	8002462 <menu+0x1146>
 8002436:	4b86      	ldr	r3, [pc, #536]	; (8002650 <menu+0x1334>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00e      	beq.n	8002462 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002444:	4b83      	ldr	r3, [pc, #524]	; (8002654 <menu+0x1338>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3b01      	subs	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <menu+0x1338>)
 800244e:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002450:	4b80      	ldr	r3, [pc, #512]	; (8002654 <menu+0x1338>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d902      	bls.n	800245e <menu+0x1142>
		   		kapiSecimleri = 3;
 8002458:	4b7e      	ldr	r3, [pc, #504]	; (8002654 <menu+0x1338>)
 800245a:	2203      	movs	r2, #3
 800245c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800245e:	f003 f969 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002462:	2108      	movs	r1, #8
 8002464:	4879      	ldr	r0, [pc, #484]	; (800264c <menu+0x1330>)
 8002466:	f006 ff3b 	bl	80092e0 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	2b01      	cmp	r3, #1
 800246e:	d118      	bne.n	80024a2 <menu+0x1186>
 8002470:	4b77      	ldr	r3, [pc, #476]	; (8002650 <menu+0x1334>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	f083 0301 	eor.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d011      	beq.n	80024a2 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800247e:	4b75      	ldr	r3, [pc, #468]	; (8002654 <menu+0x1338>)
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	4b75      	ldr	r3, [pc, #468]	; (8002658 <menu+0x133c>)
 8002484:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002486:	4b73      	ldr	r3, [pc, #460]	; (8002654 <menu+0x1338>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <menu+0x1180>
				altLimit = 1;
 800248e:	4b73      	ldr	r3, [pc, #460]	; (800265c <menu+0x1340>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002494:	4b71      	ldr	r3, [pc, #452]	; (800265c <menu+0x1340>)
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <menu+0x133c>)
 800249a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800249c:	4b70      	ldr	r3, [pc, #448]	; (8002660 <menu+0x1344>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80024a2:	4b70      	ldr	r3, [pc, #448]	; (8002664 <menu+0x1348>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	f040 8092 	bne.w	80025d0 <menu+0x12b4>
		if(dilSecim == 0) {
 80024ac:	4b65      	ldr	r3, [pc, #404]	; (8002644 <menu+0x1328>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80024b4:	4a6c      	ldr	r2, [pc, #432]	; (8002668 <menu+0x134c>)
 80024b6:	2101      	movs	r1, #1
 80024b8:	2001      	movs	r0, #1
 80024ba:	f7fe f97d 	bl	80007b8 <lcd_print>
 80024be:	e008      	b.n	80024d2 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80024c0:	4b60      	ldr	r3, [pc, #384]	; (8002644 <menu+0x1328>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d104      	bne.n	80024d2 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80024c8:	4a68      	ldr	r2, [pc, #416]	; (800266c <menu+0x1350>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7fe f973 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <menu+0x1354>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d113      	bne.n	8002502 <menu+0x11e6>
			if(dilSecim == 0) {
 80024da:	4b5a      	ldr	r3, [pc, #360]	; (8002644 <menu+0x1328>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80024e2:	4a64      	ldr	r2, [pc, #400]	; (8002674 <menu+0x1358>)
 80024e4:	2101      	movs	r1, #1
 80024e6:	2002      	movs	r0, #2
 80024e8:	f7fe f966 	bl	80007b8 <lcd_print>
 80024ec:	e020      	b.n	8002530 <menu+0x1214>
			} else if(dilSecim == 1) {
 80024ee:	4b55      	ldr	r3, [pc, #340]	; (8002644 <menu+0x1328>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d11c      	bne.n	8002530 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80024f6:	4a60      	ldr	r2, [pc, #384]	; (8002678 <menu+0x135c>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	2002      	movs	r0, #2
 80024fc:	f7fe f95c 	bl	80007b8 <lcd_print>
 8002500:	e016      	b.n	8002530 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002502:	4b5b      	ldr	r3, [pc, #364]	; (8002670 <menu+0x1354>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d112      	bne.n	8002530 <menu+0x1214>
			if(dilSecim == 0){
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <menu+0x1328>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002512:	4a5a      	ldr	r2, [pc, #360]	; (800267c <menu+0x1360>)
 8002514:	2101      	movs	r1, #1
 8002516:	2002      	movs	r0, #2
 8002518:	f7fe f94e 	bl	80007b8 <lcd_print>
 800251c:	e008      	b.n	8002530 <menu+0x1214>
			} else if(dilSecim == 1){
 800251e:	4b49      	ldr	r3, [pc, #292]	; (8002644 <menu+0x1328>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d104      	bne.n	8002530 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002526:	4a56      	ldr	r2, [pc, #344]	; (8002680 <menu+0x1364>)
 8002528:	2101      	movs	r1, #1
 800252a:	2002      	movs	r0, #2
 800252c:	f7fe f944 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002530:	2102      	movs	r1, #2
 8002532:	4846      	ldr	r0, [pc, #280]	; (800264c <menu+0x1330>)
 8002534:	f006 fed4 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	d115      	bne.n	800256a <menu+0x124e>
 800253e:	4b44      	ldr	r3, [pc, #272]	; (8002650 <menu+0x1334>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	f083 0301 	eor.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00e      	beq.n	800256a <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <menu+0x1354>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b46      	ldr	r3, [pc, #280]	; (8002670 <menu+0x1354>)
 8002556:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002558:	4b45      	ldr	r3, [pc, #276]	; (8002670 <menu+0x1354>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d902      	bls.n	8002566 <menu+0x124a>
				kapiAcTipi = 0;
 8002560:	4b43      	ldr	r3, [pc, #268]	; (8002670 <menu+0x1354>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002566:	f003 f8e5 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800256a:	2104      	movs	r1, #4
 800256c:	4837      	ldr	r0, [pc, #220]	; (800264c <menu+0x1330>)
 800256e:	f006 feb7 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d115      	bne.n	80025a4 <menu+0x1288>
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <menu+0x1334>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f083 0301 	eor.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00e      	beq.n	80025a4 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002586:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <menu+0x1354>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	3b01      	subs	r3, #1
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b38      	ldr	r3, [pc, #224]	; (8002670 <menu+0x1354>)
 8002590:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002592:	4b37      	ldr	r3, [pc, #220]	; (8002670 <menu+0x1354>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <menu+0x1284>
		   		kapiAcTipi = 1;
 800259a:	4b35      	ldr	r3, [pc, #212]	; (8002670 <menu+0x1354>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025a0:	f003 f8c8 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025a4:	2108      	movs	r1, #8
 80025a6:	4829      	ldr	r0, [pc, #164]	; (800264c <menu+0x1330>)
 80025a8:	f006 fe9a 	bl	80092e0 <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d10e      	bne.n	80025d0 <menu+0x12b4>
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <menu+0x1334>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	f083 0301 	eor.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <menu+0x1354>)
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <menu+0x133c>)
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80025ca:	4b25      	ldr	r3, [pc, #148]	; (8002660 <menu+0x1344>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <menu+0x1348>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b09      	cmp	r3, #9
 80025d6:	f040 80b9 	bne.w	800274c <menu+0x1430>
		if(dilSecim == 0){
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <menu+0x1328>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80025e2:	4a28      	ldr	r2, [pc, #160]	; (8002684 <menu+0x1368>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7fe f8e6 	bl	80007b8 <lcd_print>
 80025ec:	e008      	b.n	8002600 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <menu+0x1328>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d104      	bne.n	8002600 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <menu+0x136c>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7fe f8dc 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <menu+0x1370>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002608:	4a21      	ldr	r2, [pc, #132]	; (8002690 <menu+0x1374>)
 800260a:	2101      	movs	r1, #1
 800260c:	2002      	movs	r0, #2
 800260e:	f7fe f8d3 	bl	80007b8 <lcd_print>
 8002612:	e04c      	b.n	80026ae <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <menu+0x1370>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d13f      	bne.n	800269c <menu+0x1380>
			if(dilSecim == 0){
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <menu+0x1328>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <menu+0x1378>)
 8002626:	2101      	movs	r1, #1
 8002628:	2002      	movs	r0, #2
 800262a:	f7fe f8c5 	bl	80007b8 <lcd_print>
 800262e:	e03e      	b.n	80026ae <menu+0x1392>
			} else if(dilSecim == 1) {
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <menu+0x1328>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d13a      	bne.n	80026ae <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002638:	4a17      	ldr	r2, [pc, #92]	; (8002698 <menu+0x137c>)
 800263a:	2101      	movs	r1, #1
 800263c:	2002      	movs	r0, #2
 800263e:	f7fe f8bb 	bl	80007b8 <lcd_print>
 8002642:	e034      	b.n	80026ae <menu+0x1392>
 8002644:	20000309 	.word	0x20000309
 8002648:	0800d358 	.word	0x0800d358
 800264c:	40010800 	.word	0x40010800
 8002650:	20000317 	.word	0x20000317
 8002654:	200002f0 	.word	0x200002f0
 8002658:	20000218 	.word	0x20000218
 800265c:	200002ee 	.word	0x200002ee
 8002660:	20000314 	.word	0x20000314
 8002664:	200002e8 	.word	0x200002e8
 8002668:	0800d36c 	.word	0x0800d36c
 800266c:	0800d380 	.word	0x0800d380
 8002670:	200002f4 	.word	0x200002f4
 8002674:	0800d394 	.word	0x0800d394
 8002678:	0800d3a4 	.word	0x0800d3a4
 800267c:	0800d3b4 	.word	0x0800d3b4
 8002680:	0800d3c8 	.word	0x0800d3c8
 8002684:	0800d3dc 	.word	0x0800d3dc
 8002688:	0800d3f0 	.word	0x0800d3f0
 800268c:	200002f1 	.word	0x200002f1
 8002690:	0800d404 	.word	0x0800d404
 8002694:	0800d418 	.word	0x0800d418
 8002698:	0800d428 	.word	0x0800d428
			}
		} else if(kapi1Tip == 2) {
 800269c:	4b8a      	ldr	r3, [pc, #552]	; (80028c8 <menu+0x15ac>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d104      	bne.n	80026ae <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80026a4:	4a89      	ldr	r2, [pc, #548]	; (80028cc <menu+0x15b0>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	2002      	movs	r0, #2
 80026aa:	f7fe f885 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ae:	2102      	movs	r1, #2
 80026b0:	4887      	ldr	r0, [pc, #540]	; (80028d0 <menu+0x15b4>)
 80026b2:	f006 fe15 	bl	80092e0 <HAL_GPIO_ReadPin>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d115      	bne.n	80026e8 <menu+0x13cc>
 80026bc:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <menu+0x15b8>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	f083 0301 	eor.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00e      	beq.n	80026e8 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <menu+0x15ac>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <menu+0x15ac>)
 80026d4:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80026d6:	4b7c      	ldr	r3, [pc, #496]	; (80028c8 <menu+0x15ac>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d902      	bls.n	80026e4 <menu+0x13c8>
				kapi1Tip = 0;
 80026de:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <menu+0x15ac>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026e4:	f003 f826 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026e8:	2104      	movs	r1, #4
 80026ea:	4879      	ldr	r0, [pc, #484]	; (80028d0 <menu+0x15b4>)
 80026ec:	f006 fdf8 	bl	80092e0 <HAL_GPIO_ReadPin>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d115      	bne.n	8002722 <menu+0x1406>
 80026f6:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <menu+0x15b8>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00e      	beq.n	8002722 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002704:	4b70      	ldr	r3, [pc, #448]	; (80028c8 <menu+0x15ac>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	3b01      	subs	r3, #1
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b6e      	ldr	r3, [pc, #440]	; (80028c8 <menu+0x15ac>)
 800270e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002710:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <menu+0x15ac>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d902      	bls.n	800271e <menu+0x1402>
		   		kapi1Tip = 2;
 8002718:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <menu+0x15ac>)
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800271e:	f003 f809 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002722:	2108      	movs	r1, #8
 8002724:	486a      	ldr	r0, [pc, #424]	; (80028d0 <menu+0x15b4>)
 8002726:	f006 fddb 	bl	80092e0 <HAL_GPIO_ReadPin>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d10d      	bne.n	800274c <menu+0x1430>
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <menu+0x15b8>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f083 0301 	eor.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <menu+0x1430>
			eepromData[8] = kapi1Tip;
 800273e:	4b62      	ldr	r3, [pc, #392]	; (80028c8 <menu+0x15ac>)
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <menu+0x15bc>)
 8002744:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002746:	4b65      	ldr	r3, [pc, #404]	; (80028dc <menu+0x15c0>)
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <menu+0x15c4>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b0a      	cmp	r3, #10
 8002752:	d17f      	bne.n	8002854 <menu+0x1538>
		if(dilSecim == 0) {
 8002754:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <menu+0x15c8>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 800275c:	4a62      	ldr	r2, [pc, #392]	; (80028e8 <menu+0x15cc>)
 800275e:	2101      	movs	r1, #1
 8002760:	2001      	movs	r0, #1
 8002762:	f7fe f829 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002766:	4a61      	ldr	r2, [pc, #388]	; (80028ec <menu+0x15d0>)
 8002768:	2101      	movs	r1, #1
 800276a:	2002      	movs	r0, #2
 800276c:	f7fe f824 	bl	80007b8 <lcd_print>
 8002770:	e00d      	b.n	800278e <menu+0x1472>
		} else if(dilSecim == 1) {
 8002772:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <menu+0x15c8>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d109      	bne.n	800278e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800277a:	4a5d      	ldr	r2, [pc, #372]	; (80028f0 <menu+0x15d4>)
 800277c:	2101      	movs	r1, #1
 800277e:	2001      	movs	r0, #1
 8002780:	f7fe f81a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002784:	4a5b      	ldr	r2, [pc, #364]	; (80028f4 <menu+0x15d8>)
 8002786:	2101      	movs	r1, #1
 8002788:	2002      	movs	r0, #2
 800278a:	f7fe f815 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800278e:	4b5a      	ldr	r3, [pc, #360]	; (80028f8 <menu+0x15dc>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	220a      	movs	r2, #10
 8002794:	4959      	ldr	r1, [pc, #356]	; (80028fc <menu+0x15e0>)
 8002796:	4618      	mov	r0, r3
 8002798:	f009 fdce 	bl	800c338 <itoa>
		lcd_print(2,16,snum);
 800279c:	4a57      	ldr	r2, [pc, #348]	; (80028fc <menu+0x15e0>)
 800279e:	2110      	movs	r1, #16
 80027a0:	2002      	movs	r0, #2
 80027a2:	f7fe f809 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027a6:	2102      	movs	r1, #2
 80027a8:	4849      	ldr	r0, [pc, #292]	; (80028d0 <menu+0x15b4>)
 80027aa:	f006 fd99 	bl	80092e0 <HAL_GPIO_ReadPin>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d119      	bne.n	80027e8 <menu+0x14cc>
 80027b4:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <menu+0x15b8>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d012      	beq.n	80027e8 <menu+0x14cc>
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <menu+0x15ac>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80027ca:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <menu+0x15dc>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4b49      	ldr	r3, [pc, #292]	; (80028f8 <menu+0x15dc>)
 80027d4:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80027d6:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <menu+0x15dc>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d902      	bls.n	80027e4 <menu+0x14c8>
				kapi1AcSure = 0;
 80027de:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <menu+0x15dc>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027e4:	f002 ffa6 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027e8:	2104      	movs	r1, #4
 80027ea:	4839      	ldr	r0, [pc, #228]	; (80028d0 <menu+0x15b4>)
 80027ec:	f006 fd78 	bl	80092e0 <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d119      	bne.n	800282a <menu+0x150e>
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <menu+0x15b8>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	f083 0301 	eor.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d012      	beq.n	800282a <menu+0x150e>
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <menu+0x15ac>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10e      	bne.n	800282a <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 800280c:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <menu+0x15dc>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	3b01      	subs	r3, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <menu+0x15dc>)
 8002816:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002818:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <menu+0x15dc>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d902      	bls.n	8002826 <menu+0x150a>
		   		kapi1AcSure = 5;
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <menu+0x15dc>)
 8002822:	2205      	movs	r2, #5
 8002824:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002826:	f002 ff85 	bl	8005734 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282a:	2108      	movs	r1, #8
 800282c:	4828      	ldr	r0, [pc, #160]	; (80028d0 <menu+0x15b4>)
 800282e:	f006 fd57 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002832:	4603      	mov	r3, r0
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10d      	bne.n	8002854 <menu+0x1538>
 8002838:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <menu+0x15b8>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	f083 0301 	eor.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <menu+0x15dc>)
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <menu+0x15bc>)
 800284c:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <menu+0x15c0>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <menu+0x15c4>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b0b      	cmp	r3, #11
 800285a:	f040 80b5 	bne.w	80029c8 <menu+0x16ac>
		if(dilSecim == 0) {
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <menu+0x15c8>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002866:	4a26      	ldr	r2, [pc, #152]	; (8002900 <menu+0x15e4>)
 8002868:	2101      	movs	r1, #1
 800286a:	2001      	movs	r0, #1
 800286c:	f7fd ffa4 	bl	80007b8 <lcd_print>
 8002870:	e008      	b.n	8002884 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <menu+0x15c8>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d104      	bne.n	8002884 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800287a:	4a22      	ldr	r2, [pc, #136]	; (8002904 <menu+0x15e8>)
 800287c:	2101      	movs	r1, #1
 800287e:	2001      	movs	r0, #1
 8002880:	f7fd ff9a 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <menu+0x15ec>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 800288c:	4a1f      	ldr	r2, [pc, #124]	; (800290c <menu+0x15f0>)
 800288e:	2101      	movs	r1, #1
 8002890:	2002      	movs	r0, #2
 8002892:	f7fd ff91 	bl	80007b8 <lcd_print>
 8002896:	e048      	b.n	800292a <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <menu+0x15ec>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d13b      	bne.n	8002918 <menu+0x15fc>
			if(dilSecim == 0) {
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <menu+0x15c8>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <menu+0x15f4>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	2002      	movs	r0, #2
 80028ae:	f7fd ff83 	bl	80007b8 <lcd_print>
 80028b2:	e03a      	b.n	800292a <menu+0x160e>
			} else if(dilSecim == 1) {
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <menu+0x15c8>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d136      	bne.n	800292a <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <menu+0x15f8>)
 80028be:	2101      	movs	r1, #1
 80028c0:	2002      	movs	r0, #2
 80028c2:	f7fd ff79 	bl	80007b8 <lcd_print>
 80028c6:	e030      	b.n	800292a <menu+0x160e>
 80028c8:	200002f1 	.word	0x200002f1
 80028cc:	0800d43c 	.word	0x0800d43c
 80028d0:	40010800 	.word	0x40010800
 80028d4:	20000317 	.word	0x20000317
 80028d8:	20000218 	.word	0x20000218
 80028dc:	20000314 	.word	0x20000314
 80028e0:	200002e8 	.word	0x200002e8
 80028e4:	20000309 	.word	0x20000309
 80028e8:	0800d44c 	.word	0x0800d44c
 80028ec:	0800d460 	.word	0x0800d460
 80028f0:	0800d470 	.word	0x0800d470
 80028f4:	0800d484 	.word	0x0800d484
 80028f8:	20000301 	.word	0x20000301
 80028fc:	20000288 	.word	0x20000288
 8002900:	0800d494 	.word	0x0800d494
 8002904:	0800d4a8 	.word	0x0800d4a8
 8002908:	200002f2 	.word	0x200002f2
 800290c:	0800d404 	.word	0x0800d404
 8002910:	0800d418 	.word	0x0800d418
 8002914:	0800d428 	.word	0x0800d428
			}
		} else if(kapi2Tip == 2) {
 8002918:	4b8a      	ldr	r3, [pc, #552]	; (8002b44 <menu+0x1828>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d104      	bne.n	800292a <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002920:	4a89      	ldr	r2, [pc, #548]	; (8002b48 <menu+0x182c>)
 8002922:	2101      	movs	r1, #1
 8002924:	2002      	movs	r0, #2
 8002926:	f7fd ff47 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800292a:	2102      	movs	r1, #2
 800292c:	4887      	ldr	r0, [pc, #540]	; (8002b4c <menu+0x1830>)
 800292e:	f006 fcd7 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d115      	bne.n	8002964 <menu+0x1648>
 8002938:	4b85      	ldr	r3, [pc, #532]	; (8002b50 <menu+0x1834>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	f083 0301 	eor.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00e      	beq.n	8002964 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002946:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <menu+0x1828>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b7d      	ldr	r3, [pc, #500]	; (8002b44 <menu+0x1828>)
 8002950:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002952:	4b7c      	ldr	r3, [pc, #496]	; (8002b44 <menu+0x1828>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <menu+0x1644>
				kapi2Tip = 0;
 800295a:	4b7a      	ldr	r3, [pc, #488]	; (8002b44 <menu+0x1828>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002960:	f002 fee8 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002964:	2104      	movs	r1, #4
 8002966:	4879      	ldr	r0, [pc, #484]	; (8002b4c <menu+0x1830>)
 8002968:	f006 fcba 	bl	80092e0 <HAL_GPIO_ReadPin>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d115      	bne.n	800299e <menu+0x1682>
 8002972:	4b77      	ldr	r3, [pc, #476]	; (8002b50 <menu+0x1834>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002980:	4b70      	ldr	r3, [pc, #448]	; (8002b44 <menu+0x1828>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <menu+0x1828>)
 800298a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800298c:	4b6d      	ldr	r3, [pc, #436]	; (8002b44 <menu+0x1828>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d902      	bls.n	800299a <menu+0x167e>
		   		kapi2Tip = 2;
 8002994:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <menu+0x1828>)
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800299a:	f002 fecb 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800299e:	2108      	movs	r1, #8
 80029a0:	486a      	ldr	r0, [pc, #424]	; (8002b4c <menu+0x1830>)
 80029a2:	f006 fc9d 	bl	80092e0 <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10d      	bne.n	80029c8 <menu+0x16ac>
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <menu+0x1834>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80029ba:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <menu+0x1828>)
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <menu+0x1838>)
 80029c0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80029c2:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <menu+0x183c>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80029c8:	4b64      	ldr	r3, [pc, #400]	; (8002b5c <menu+0x1840>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d17f      	bne.n	8002ad0 <menu+0x17b4>
		if(dilSecim == 0) {
 80029d0:	4b63      	ldr	r3, [pc, #396]	; (8002b60 <menu+0x1844>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80029d8:	4a62      	ldr	r2, [pc, #392]	; (8002b64 <menu+0x1848>)
 80029da:	2101      	movs	r1, #1
 80029dc:	2001      	movs	r0, #1
 80029de:	f7fd feeb 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029e2:	4a61      	ldr	r2, [pc, #388]	; (8002b68 <menu+0x184c>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	2002      	movs	r0, #2
 80029e8:	f7fd fee6 	bl	80007b8 <lcd_print>
 80029ec:	e00d      	b.n	8002a0a <menu+0x16ee>
		} else if(dilSecim == 1) {
 80029ee:	4b5c      	ldr	r3, [pc, #368]	; (8002b60 <menu+0x1844>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d109      	bne.n	8002a0a <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80029f6:	4a5d      	ldr	r2, [pc, #372]	; (8002b6c <menu+0x1850>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7fd fedc 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a00:	4a5b      	ldr	r2, [pc, #364]	; (8002b70 <menu+0x1854>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	2002      	movs	r0, #2
 8002a06:	f7fd fed7 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a0a:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <menu+0x1858>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	220a      	movs	r2, #10
 8002a10:	4959      	ldr	r1, [pc, #356]	; (8002b78 <menu+0x185c>)
 8002a12:	4618      	mov	r0, r3
 8002a14:	f009 fc90 	bl	800c338 <itoa>
		lcd_print(2,16,snum);
 8002a18:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <menu+0x185c>)
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f7fd fecb 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a22:	2102      	movs	r1, #2
 8002a24:	4849      	ldr	r0, [pc, #292]	; (8002b4c <menu+0x1830>)
 8002a26:	f006 fc5b 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d119      	bne.n	8002a64 <menu+0x1748>
 8002a30:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <menu+0x1834>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <menu+0x1748>
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <menu+0x1828>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10e      	bne.n	8002a64 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <menu+0x1858>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <menu+0x1858>)
 8002a50:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002a52:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <menu+0x1858>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d902      	bls.n	8002a60 <menu+0x1744>
				kapi2AcSure = 0;
 8002a5a:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <menu+0x1858>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a60:	f002 fe68 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a64:	2104      	movs	r1, #4
 8002a66:	4839      	ldr	r0, [pc, #228]	; (8002b4c <menu+0x1830>)
 8002a68:	f006 fc3a 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d119      	bne.n	8002aa6 <menu+0x178a>
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <menu+0x1834>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	f083 0301 	eor.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <menu+0x178a>
 8002a80:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <menu+0x1828>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10e      	bne.n	8002aa6 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002a88:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <menu+0x1858>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <menu+0x1858>)
 8002a92:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a94:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <menu+0x1858>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d902      	bls.n	8002aa2 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002a9c:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <menu+0x1858>)
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aa2:	f002 fe47 	bl	8005734 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	4828      	ldr	r0, [pc, #160]	; (8002b4c <menu+0x1830>)
 8002aaa:	f006 fc19 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10d      	bne.n	8002ad0 <menu+0x17b4>
 8002ab4:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <menu+0x1834>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f083 0301 	eor.w	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <menu+0x1858>)
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <menu+0x1838>)
 8002ac8:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <menu+0x183c>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <menu+0x1840>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b0d      	cmp	r3, #13
 8002ad6:	f040 80b5 	bne.w	8002c44 <menu+0x1928>
		if(dilSecim == 0) {
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <menu+0x1844>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002ae2:	4a26      	ldr	r2, [pc, #152]	; (8002b7c <menu+0x1860>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7fd fe66 	bl	80007b8 <lcd_print>
 8002aec:	e008      	b.n	8002b00 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <menu+0x1844>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d104      	bne.n	8002b00 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <menu+0x1864>)
 8002af8:	2101      	movs	r1, #1
 8002afa:	2001      	movs	r0, #1
 8002afc:	f7fd fe5c 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <menu+0x1868>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b08:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <menu+0x186c>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	2002      	movs	r0, #2
 8002b0e:	f7fd fe53 	bl	80007b8 <lcd_print>
 8002b12:	e048      	b.n	8002ba6 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <menu+0x1868>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d13b      	bne.n	8002b94 <menu+0x1878>
			if(dilSecim == 0) {
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <menu+0x1844>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <menu+0x1870>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7fd fe45 	bl	80007b8 <lcd_print>
 8002b2e:	e03a      	b.n	8002ba6 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <menu+0x1844>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d136      	bne.n	8002ba6 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002b38:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <menu+0x1874>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	f7fd fe3b 	bl	80007b8 <lcd_print>
 8002b42:	e030      	b.n	8002ba6 <menu+0x188a>
 8002b44:	200002f2 	.word	0x200002f2
 8002b48:	0800d43c 	.word	0x0800d43c
 8002b4c:	40010800 	.word	0x40010800
 8002b50:	20000317 	.word	0x20000317
 8002b54:	20000218 	.word	0x20000218
 8002b58:	20000314 	.word	0x20000314
 8002b5c:	200002e8 	.word	0x200002e8
 8002b60:	20000309 	.word	0x20000309
 8002b64:	0800d4bc 	.word	0x0800d4bc
 8002b68:	0800d460 	.word	0x0800d460
 8002b6c:	0800d4d0 	.word	0x0800d4d0
 8002b70:	0800d484 	.word	0x0800d484
 8002b74:	20000302 	.word	0x20000302
 8002b78:	20000288 	.word	0x20000288
 8002b7c:	0800d4e4 	.word	0x0800d4e4
 8002b80:	0800d4f8 	.word	0x0800d4f8
 8002b84:	200002f3 	.word	0x200002f3
 8002b88:	0800d404 	.word	0x0800d404
 8002b8c:	0800d418 	.word	0x0800d418
 8002b90:	0800d428 	.word	0x0800d428
			}
		} else if(kapitablaTip == 2) {
 8002b94:	4b5b      	ldr	r3, [pc, #364]	; (8002d04 <menu+0x19e8>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d104      	bne.n	8002ba6 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002b9c:	4a5a      	ldr	r2, [pc, #360]	; (8002d08 <menu+0x19ec>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7fd fe09 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4858      	ldr	r0, [pc, #352]	; (8002d0c <menu+0x19f0>)
 8002baa:	f006 fb99 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d115      	bne.n	8002be0 <menu+0x18c4>
 8002bb4:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <menu+0x19f4>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00e      	beq.n	8002be0 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002bc2:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <menu+0x19e8>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <menu+0x19e8>)
 8002bcc:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002bce:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <menu+0x19e8>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <menu+0x18c0>
				kapitablaTip = 0;
 8002bd6:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <menu+0x19e8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bdc:	f002 fdaa 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be0:	2104      	movs	r1, #4
 8002be2:	484a      	ldr	r0, [pc, #296]	; (8002d0c <menu+0x19f0>)
 8002be4:	f006 fb7c 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d115      	bne.n	8002c1a <menu+0x18fe>
 8002bee:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <menu+0x19f4>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <menu+0x19e8>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <menu+0x19e8>)
 8002c06:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c08:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <menu+0x19e8>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d902      	bls.n	8002c16 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002c10:	4b3c      	ldr	r3, [pc, #240]	; (8002d04 <menu+0x19e8>)
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c16:	f002 fd8d 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	483b      	ldr	r0, [pc, #236]	; (8002d0c <menu+0x19f0>)
 8002c1e:	f006 fb5f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10d      	bne.n	8002c44 <menu+0x1928>
 8002c28:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <menu+0x19f4>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	f083 0301 	eor.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <menu+0x19e8>)
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <menu+0x19f8>)
 8002c3c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002c3e:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <menu+0x19fc>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002c44:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <menu+0x1a00>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b0e      	cmp	r3, #14
 8002c4a:	f040 80f2 	bne.w	8002e32 <menu+0x1b16>
		if(dilSecim == 0) {
 8002c4e:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <menu+0x1a04>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d105      	bne.n	8002c62 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002c56:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <menu+0x1a08>)
 8002c58:	2101      	movs	r1, #1
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7fd fdac 	bl	80007b8 <lcd_print>
 8002c60:	e008      	b.n	8002c74 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002c62:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <menu+0x1a04>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d104      	bne.n	8002c74 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <menu+0x1a0c>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7fd fda2 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <menu+0x1a10>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d113      	bne.n	8002ca4 <menu+0x1988>
			if(dilSecim == 0){
 8002c7c:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <menu+0x1a04>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002c84:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <menu+0x1a14>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f7fd fd95 	bl	80007b8 <lcd_print>
 8002c8e:	e071      	b.n	8002d74 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c90:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <menu+0x1a04>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d16d      	bne.n	8002d74 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c98:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <menu+0x1a18>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f7fd fd8b 	bl	80007b8 <lcd_print>
 8002ca2:	e067      	b.n	8002d74 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <menu+0x1a10>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d112      	bne.n	8002cd2 <menu+0x19b6>
			if(dilSecim == 0){
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <menu+0x1a04>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d104      	bne.n	8002cbe <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002cb4:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <menu+0x1a1c>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7fd fd7d 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <menu+0x1a04>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d156      	bne.n	8002d74 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002cc6:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <menu+0x1a20>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2002      	movs	r0, #2
 8002ccc:	f7fd fd74 	bl	80007b8 <lcd_print>
 8002cd0:	e050      	b.n	8002d74 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <menu+0x1a10>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d136      	bne.n	8002d48 <menu+0x1a2c>
			if(dilSecim == 0){
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <menu+0x1a04>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <menu+0x1a24>)
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	2002      	movs	r0, #2
 8002ce8:	f7fd fd66 	bl	80007b8 <lcd_print>
 8002cec:	e042      	b.n	8002d74 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <menu+0x1a04>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d13e      	bne.n	8002d74 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002cf6:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <menu+0x1a28>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	f7fd fd5c 	bl	80007b8 <lcd_print>
 8002d00:	e038      	b.n	8002d74 <menu+0x1a58>
 8002d02:	bf00      	nop
 8002d04:	200002f3 	.word	0x200002f3
 8002d08:	0800d43c 	.word	0x0800d43c
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	20000317 	.word	0x20000317
 8002d14:	20000218 	.word	0x20000218
 8002d18:	20000314 	.word	0x20000314
 8002d1c:	200002e8 	.word	0x200002e8
 8002d20:	20000309 	.word	0x20000309
 8002d24:	0800d50c 	.word	0x0800d50c
 8002d28:	0800d520 	.word	0x0800d520
 8002d2c:	200002f5 	.word	0x200002f5
 8002d30:	0800d534 	.word	0x0800d534
 8002d34:	0800d544 	.word	0x0800d544
 8002d38:	0800d554 	.word	0x0800d554
 8002d3c:	0800d564 	.word	0x0800d564
 8002d40:	0800d574 	.word	0x0800d574
 8002d44:	0800d588 	.word	0x0800d588
			}
		} else if(kapiTablaAcKonum == 3) {
 8002d48:	4b9b      	ldr	r3, [pc, #620]	; (8002fb8 <menu+0x1c9c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d111      	bne.n	8002d74 <menu+0x1a58>
			if(dilSecim == 0) {
 8002d50:	4b9a      	ldr	r3, [pc, #616]	; (8002fbc <menu+0x1ca0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d104      	bne.n	8002d62 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002d58:	4a99      	ldr	r2, [pc, #612]	; (8002fc0 <menu+0x1ca4>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	f7fd fd2b 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002d62:	4b96      	ldr	r3, [pc, #600]	; (8002fbc <menu+0x1ca0>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d104      	bne.n	8002d74 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002d6a:	4a96      	ldr	r2, [pc, #600]	; (8002fc4 <menu+0x1ca8>)
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	2002      	movs	r0, #2
 8002d70:	f7fd fd22 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d74:	2102      	movs	r1, #2
 8002d76:	4894      	ldr	r0, [pc, #592]	; (8002fc8 <menu+0x1cac>)
 8002d78:	f006 fab2 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d115      	bne.n	8002dae <menu+0x1a92>
 8002d82:	4b92      	ldr	r3, [pc, #584]	; (8002fcc <menu+0x1cb0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002d90:	4b89      	ldr	r3, [pc, #548]	; (8002fb8 <menu+0x1c9c>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b87      	ldr	r3, [pc, #540]	; (8002fb8 <menu+0x1c9c>)
 8002d9a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002d9c:	4b86      	ldr	r3, [pc, #536]	; (8002fb8 <menu+0x1c9c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d902      	bls.n	8002daa <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002da4:	4b84      	ldr	r3, [pc, #528]	; (8002fb8 <menu+0x1c9c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002daa:	f002 fcc3 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dae:	2104      	movs	r1, #4
 8002db0:	4885      	ldr	r0, [pc, #532]	; (8002fc8 <menu+0x1cac>)
 8002db2:	f006 fa95 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d115      	bne.n	8002de8 <menu+0x1acc>
 8002dbc:	4b83      	ldr	r3, [pc, #524]	; (8002fcc <menu+0x1cb0>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f083 0301 	eor.w	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002dca:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <menu+0x1c9c>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <menu+0x1c9c>)
 8002dd4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002dd6:	4b78      	ldr	r3, [pc, #480]	; (8002fb8 <menu+0x1c9c>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d902      	bls.n	8002de4 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <menu+0x1c9c>)
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002de4:	f002 fca6 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de8:	2108      	movs	r1, #8
 8002dea:	4877      	ldr	r0, [pc, #476]	; (8002fc8 <menu+0x1cac>)
 8002dec:	f006 fa78 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d11d      	bne.n	8002e32 <menu+0x1b16>
 8002df6:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <menu+0x1cb0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d016      	beq.n	8002e32 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e04:	4b6c      	ldr	r3, [pc, #432]	; (8002fb8 <menu+0x1c9c>)
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	4b71      	ldr	r3, [pc, #452]	; (8002fd0 <menu+0x1cb4>)
 8002e0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002e0e:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <menu+0x1c9c>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <menu+0x1b02>
 8002e16:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <menu+0x1c9c>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d106      	bne.n	8002e2c <menu+0x1b10>
				altLimit = 1;
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	; (8002fd4 <menu+0x1cb8>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e24:	4b6b      	ldr	r3, [pc, #428]	; (8002fd4 <menu+0x1cb8>)
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	4b69      	ldr	r3, [pc, #420]	; (8002fd0 <menu+0x1cb4>)
 8002e2a:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <menu+0x1cbc>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002e32:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <menu+0x1cc0>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	d17f      	bne.n	8002f3a <menu+0x1c1e>
		if(dilSecim == 0) {
 8002e3a:	4b60      	ldr	r3, [pc, #384]	; (8002fbc <menu+0x1ca0>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002e42:	4a67      	ldr	r2, [pc, #412]	; (8002fe0 <menu+0x1cc4>)
 8002e44:	2101      	movs	r1, #1
 8002e46:	2001      	movs	r0, #1
 8002e48:	f7fd fcb6 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002e4c:	4a65      	ldr	r2, [pc, #404]	; (8002fe4 <menu+0x1cc8>)
 8002e4e:	2101      	movs	r1, #1
 8002e50:	2002      	movs	r0, #2
 8002e52:	f7fd fcb1 	bl	80007b8 <lcd_print>
 8002e56:	e00d      	b.n	8002e74 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <menu+0x1ca0>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d109      	bne.n	8002e74 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002e60:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <menu+0x1ccc>)
 8002e62:	2101      	movs	r1, #1
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7fd fca7 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002e6a:	4a60      	ldr	r2, [pc, #384]	; (8002fec <menu+0x1cd0>)
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	2002      	movs	r0, #2
 8002e70:	f7fd fca2 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002e74:	4b5e      	ldr	r3, [pc, #376]	; (8002ff0 <menu+0x1cd4>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	220a      	movs	r2, #10
 8002e7a:	495e      	ldr	r1, [pc, #376]	; (8002ff4 <menu+0x1cd8>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f009 fa5b 	bl	800c338 <itoa>
		lcd_print(2,16,snum);
 8002e82:	4a5c      	ldr	r2, [pc, #368]	; (8002ff4 <menu+0x1cd8>)
 8002e84:	2110      	movs	r1, #16
 8002e86:	2002      	movs	r0, #2
 8002e88:	f7fd fc96 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	484e      	ldr	r0, [pc, #312]	; (8002fc8 <menu+0x1cac>)
 8002e90:	f006 fa26 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d119      	bne.n	8002ece <menu+0x1bb2>
 8002e9a:	4b4c      	ldr	r3, [pc, #304]	; (8002fcc <menu+0x1cb0>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <menu+0x1bb2>
 8002ea8:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <menu+0x1cdc>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10e      	bne.n	8002ece <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002eb0:	4b4f      	ldr	r3, [pc, #316]	; (8002ff0 <menu+0x1cd4>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <menu+0x1cd4>)
 8002eba:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002ebc:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <menu+0x1cd4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d902      	bls.n	8002eca <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002ec4:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <menu+0x1cd4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002eca:	f002 fc33 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ece:	2104      	movs	r1, #4
 8002ed0:	483d      	ldr	r0, [pc, #244]	; (8002fc8 <menu+0x1cac>)
 8002ed2:	f006 fa05 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d119      	bne.n	8002f10 <menu+0x1bf4>
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <menu+0x1cb0>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <menu+0x1bf4>
 8002eea:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <menu+0x1cdc>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <menu+0x1cd4>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <menu+0x1cd4>)
 8002efc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002efe:	4b3c      	ldr	r3, [pc, #240]	; (8002ff0 <menu+0x1cd4>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f06:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <menu+0x1cd4>)
 8002f08:	2205      	movs	r2, #5
 8002f0a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002f0c:	f002 fc12 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f10:	2108      	movs	r1, #8
 8002f12:	482d      	ldr	r0, [pc, #180]	; (8002fc8 <menu+0x1cac>)
 8002f14:	f006 f9e4 	bl	80092e0 <HAL_GPIO_ReadPin>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10d      	bne.n	8002f3a <menu+0x1c1e>
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <menu+0x1cb0>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	f083 0301 	eor.w	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002f2c:	4b30      	ldr	r3, [pc, #192]	; (8002ff0 <menu+0x1cd4>)
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <menu+0x1cb4>)
 8002f32:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <menu+0x1cbc>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <menu+0x1cc0>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	f040 80bc 	bne.w	80030bc <menu+0x1da0>
		if(dilSecim == 0) {
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <menu+0x1ca0>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <menu+0x1ce0>)
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2001      	movs	r0, #1
 8002f52:	f7fd fc31 	bl	80007b8 <lcd_print>
 8002f56:	e008      	b.n	8002f6a <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <menu+0x1ca0>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d104      	bne.n	8002f6a <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002f60:	4a27      	ldr	r2, [pc, #156]	; (8003000 <menu+0x1ce4>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7fd fc27 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <menu+0x1ce8>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d113      	bne.n	8002f9a <menu+0x1c7e>
			if(dilSecim == 0) {
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <menu+0x1ca0>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002f7a:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <menu+0x1ca4>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f7fd fc1a 	bl	80007b8 <lcd_print>
 8002f84:	e04b      	b.n	800301e <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <menu+0x1ca0>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d147      	bne.n	800301e <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002f8e:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <menu+0x1ca8>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	2002      	movs	r0, #2
 8002f94:	f7fd fc10 	bl	80007b8 <lcd_print>
 8002f98:	e041      	b.n	800301e <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <menu+0x1ce8>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d13d      	bne.n	800301e <menu+0x1d02>
			if(dilSecim == 0) {
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <menu+0x1ca0>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d130      	bne.n	800300c <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <menu+0x1cec>)
 8002fac:	2101      	movs	r1, #1
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f7fd fc02 	bl	80007b8 <lcd_print>
 8002fb4:	e033      	b.n	800301e <menu+0x1d02>
 8002fb6:	bf00      	nop
 8002fb8:	200002f5 	.word	0x200002f5
 8002fbc:	20000309 	.word	0x20000309
 8002fc0:	0800d1fc 	.word	0x0800d1fc
 8002fc4:	0800d210 	.word	0x0800d210
 8002fc8:	40010800 	.word	0x40010800
 8002fcc:	20000317 	.word	0x20000317
 8002fd0:	20000218 	.word	0x20000218
 8002fd4:	200002ee 	.word	0x200002ee
 8002fd8:	20000314 	.word	0x20000314
 8002fdc:	200002e8 	.word	0x200002e8
 8002fe0:	0800d59c 	.word	0x0800d59c
 8002fe4:	0800d460 	.word	0x0800d460
 8002fe8:	0800d5b0 	.word	0x0800d5b0
 8002fec:	0800d484 	.word	0x0800d484
 8002ff0:	20000303 	.word	0x20000303
 8002ff4:	20000288 	.word	0x20000288
 8002ff8:	200002f3 	.word	0x200002f3
 8002ffc:	0800d5c4 	.word	0x0800d5c4
 8003000:	0800d5d8 	.word	0x0800d5d8
 8003004:	200002f6 	.word	0x200002f6
 8003008:	0800d25c 	.word	0x0800d25c
			} else if(dilSecim == 1) {
 800300c:	4b99      	ldr	r3, [pc, #612]	; (8003274 <menu+0x1f58>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d104      	bne.n	800301e <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003014:	4a98      	ldr	r2, [pc, #608]	; (8003278 <menu+0x1f5c>)
 8003016:	2101      	movs	r1, #1
 8003018:	2002      	movs	r0, #2
 800301a:	f7fd fbcd 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800301e:	2102      	movs	r1, #2
 8003020:	4896      	ldr	r0, [pc, #600]	; (800327c <menu+0x1f60>)
 8003022:	f006 f95d 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003026:	4603      	mov	r3, r0
 8003028:	2b01      	cmp	r3, #1
 800302a:	d115      	bne.n	8003058 <menu+0x1d3c>
 800302c:	4b94      	ldr	r3, [pc, #592]	; (8003280 <menu+0x1f64>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	f083 0301 	eor.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00e      	beq.n	8003058 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800303a:	4b92      	ldr	r3, [pc, #584]	; (8003284 <menu+0x1f68>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b90      	ldr	r3, [pc, #576]	; (8003284 <menu+0x1f68>)
 8003044:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003046:	4b8f      	ldr	r3, [pc, #572]	; (8003284 <menu+0x1f68>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d902      	bls.n	8003054 <menu+0x1d38>
				yukariYavasLimit = 0;
 800304e:	4b8d      	ldr	r3, [pc, #564]	; (8003284 <menu+0x1f68>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003054:	f002 fb6e 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003058:	2104      	movs	r1, #4
 800305a:	4888      	ldr	r0, [pc, #544]	; (800327c <menu+0x1f60>)
 800305c:	f006 f940 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003060:	4603      	mov	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d115      	bne.n	8003092 <menu+0x1d76>
 8003066:	4b86      	ldr	r3, [pc, #536]	; (8003280 <menu+0x1f64>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	f083 0301 	eor.w	r3, r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00e      	beq.n	8003092 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003074:	4b83      	ldr	r3, [pc, #524]	; (8003284 <menu+0x1f68>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	3b01      	subs	r3, #1
 800307a:	b2da      	uxtb	r2, r3
 800307c:	4b81      	ldr	r3, [pc, #516]	; (8003284 <menu+0x1f68>)
 800307e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003080:	4b80      	ldr	r3, [pc, #512]	; (8003284 <menu+0x1f68>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003088:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <menu+0x1f68>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800308e:	f002 fb51 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003092:	2108      	movs	r1, #8
 8003094:	4879      	ldr	r0, [pc, #484]	; (800327c <menu+0x1f60>)
 8003096:	f006 f923 	bl	80092e0 <HAL_GPIO_ReadPin>
 800309a:	4603      	mov	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10d      	bne.n	80030bc <menu+0x1da0>
 80030a0:	4b77      	ldr	r3, [pc, #476]	; (8003280 <menu+0x1f64>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	f083 0301 	eor.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80030ae:	4b75      	ldr	r3, [pc, #468]	; (8003284 <menu+0x1f68>)
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	4b75      	ldr	r3, [pc, #468]	; (8003288 <menu+0x1f6c>)
 80030b4:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80030b6:	4b75      	ldr	r3, [pc, #468]	; (800328c <menu+0x1f70>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80030bc:	4b74      	ldr	r3, [pc, #464]	; (8003290 <menu+0x1f74>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b11      	cmp	r3, #17
 80030c2:	f040 80c3 	bne.w	800324c <menu+0x1f30>
		if(dilSecim == 0) {
 80030c6:	4b6b      	ldr	r3, [pc, #428]	; (8003274 <menu+0x1f58>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80030ce:	4a71      	ldr	r2, [pc, #452]	; (8003294 <menu+0x1f78>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7fd fb70 	bl	80007b8 <lcd_print>
 80030d8:	e008      	b.n	80030ec <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80030da:	4b66      	ldr	r3, [pc, #408]	; (8003274 <menu+0x1f58>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d104      	bne.n	80030ec <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80030e2:	4a6d      	ldr	r2, [pc, #436]	; (8003298 <menu+0x1f7c>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	2001      	movs	r0, #1
 80030e8:	f7fd fb66 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80030ec:	4b6b      	ldr	r3, [pc, #428]	; (800329c <menu+0x1f80>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d113      	bne.n	800311c <menu+0x1e00>
			if(dilSecim == 0){
 80030f4:	4b5f      	ldr	r3, [pc, #380]	; (8003274 <menu+0x1f58>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80030fc:	4a68      	ldr	r2, [pc, #416]	; (80032a0 <menu+0x1f84>)
 80030fe:	2101      	movs	r1, #1
 8003100:	2002      	movs	r0, #2
 8003102:	f7fd fb59 	bl	80007b8 <lcd_print>
 8003106:	e038      	b.n	800317a <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003108:	4b5a      	ldr	r3, [pc, #360]	; (8003274 <menu+0x1f58>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d134      	bne.n	800317a <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003110:	4a64      	ldr	r2, [pc, #400]	; (80032a4 <menu+0x1f88>)
 8003112:	2101      	movs	r1, #1
 8003114:	2002      	movs	r0, #2
 8003116:	f7fd fb4f 	bl	80007b8 <lcd_print>
 800311a:	e02e      	b.n	800317a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800311c:	4b5f      	ldr	r3, [pc, #380]	; (800329c <menu+0x1f80>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d113      	bne.n	800314c <menu+0x1e30>
			if(dilSecim == 0){
 8003124:	4b53      	ldr	r3, [pc, #332]	; (8003274 <menu+0x1f58>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 800312c:	4a5e      	ldr	r2, [pc, #376]	; (80032a8 <menu+0x1f8c>)
 800312e:	2101      	movs	r1, #1
 8003130:	2002      	movs	r0, #2
 8003132:	f7fd fb41 	bl	80007b8 <lcd_print>
 8003136:	e020      	b.n	800317a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003138:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <menu+0x1f58>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d11c      	bne.n	800317a <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003140:	4a5a      	ldr	r2, [pc, #360]	; (80032ac <menu+0x1f90>)
 8003142:	2101      	movs	r1, #1
 8003144:	2002      	movs	r0, #2
 8003146:	f7fd fb37 	bl	80007b8 <lcd_print>
 800314a:	e016      	b.n	800317a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <menu+0x1f80>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d112      	bne.n	800317a <menu+0x1e5e>
			if(dilSecim == 0) {
 8003154:	4b47      	ldr	r3, [pc, #284]	; (8003274 <menu+0x1f58>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 800315c:	4a54      	ldr	r2, [pc, #336]	; (80032b0 <menu+0x1f94>)
 800315e:	2101      	movs	r1, #1
 8003160:	2002      	movs	r0, #2
 8003162:	f7fd fb29 	bl	80007b8 <lcd_print>
 8003166:	e008      	b.n	800317a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003168:	4b42      	ldr	r3, [pc, #264]	; (8003274 <menu+0x1f58>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d104      	bne.n	800317a <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003170:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <menu+0x1f98>)
 8003172:	2101      	movs	r1, #1
 8003174:	2002      	movs	r0, #2
 8003176:	f7fd fb1f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800317a:	2102      	movs	r1, #2
 800317c:	483f      	ldr	r0, [pc, #252]	; (800327c <menu+0x1f60>)
 800317e:	f006 f8af 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003182:	4603      	mov	r3, r0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d115      	bne.n	80031b4 <menu+0x1e98>
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <menu+0x1f64>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00e      	beq.n	80031b4 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <menu+0x1f80>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b3f      	ldr	r3, [pc, #252]	; (800329c <menu+0x1f80>)
 80031a0:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80031a2:	4b3e      	ldr	r3, [pc, #248]	; (800329c <menu+0x1f80>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d902      	bls.n	80031b0 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80031aa:	4b3c      	ldr	r3, [pc, #240]	; (800329c <menu+0x1f80>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031b0:	f002 fac0 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b4:	2104      	movs	r1, #4
 80031b6:	4831      	ldr	r0, [pc, #196]	; (800327c <menu+0x1f60>)
 80031b8:	f006 f892 	bl	80092e0 <HAL_GPIO_ReadPin>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d115      	bne.n	80031ee <menu+0x1ed2>
 80031c2:	4b2f      	ldr	r3, [pc, #188]	; (8003280 <menu+0x1f64>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	f083 0301 	eor.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80031d0:	4b32      	ldr	r3, [pc, #200]	; (800329c <menu+0x1f80>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	4b30      	ldr	r3, [pc, #192]	; (800329c <menu+0x1f80>)
 80031da:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <menu+0x1f80>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d902      	bls.n	80031ea <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80031e4:	4b2d      	ldr	r3, [pc, #180]	; (800329c <menu+0x1f80>)
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ea:	f002 faa3 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ee:	2108      	movs	r1, #8
 80031f0:	4822      	ldr	r0, [pc, #136]	; (800327c <menu+0x1f60>)
 80031f2:	f006 f875 	bl	80092e0 <HAL_GPIO_ReadPin>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d127      	bne.n	800324c <menu+0x1f30>
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <menu+0x1f64>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f083 0301 	eor.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d020      	beq.n	800324c <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <menu+0x1f80>)
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <menu+0x1f6c>)
 8003210:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <menu+0x1f80>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d003      	beq.n	8003222 <menu+0x1f06>
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <menu+0x1f80>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d106      	bne.n	8003230 <menu+0x1f14>
				calismaSekli = 0;
 8003222:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <menu+0x1f9c>)
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <menu+0x1f9c>)
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <menu+0x1f6c>)
 800322e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <menu+0x1f80>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d106      	bne.n	8003246 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <menu+0x1fa0>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800323e:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <menu+0x1fa0>)
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <menu+0x1f6c>)
 8003244:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <menu+0x1f70>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <menu+0x1f74>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b12      	cmp	r3, #18
 8003252:	f040 80d5 	bne.w	8003400 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <menu+0x1f80>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d13c      	bne.n	80032d8 <menu+0x1fbc>
			if(dilSecim == 0) {
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <menu+0x1f58>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d12e      	bne.n	80032c4 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003266:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <menu+0x1fa4>)
 8003268:	2101      	movs	r1, #1
 800326a:	2001      	movs	r0, #1
 800326c:	f7fd faa4 	bl	80007b8 <lcd_print>
 8003270:	e048      	b.n	8003304 <menu+0x1fe8>
 8003272:	bf00      	nop
 8003274:	20000309 	.word	0x20000309
 8003278:	0800d270 	.word	0x0800d270
 800327c:	40010800 	.word	0x40010800
 8003280:	20000317 	.word	0x20000317
 8003284:	200002f6 	.word	0x200002f6
 8003288:	20000218 	.word	0x20000218
 800328c:	20000314 	.word	0x20000314
 8003290:	200002e8 	.word	0x200002e8
 8003294:	0800d5ec 	.word	0x0800d5ec
 8003298:	0800d600 	.word	0x0800d600
 800329c:	200002f7 	.word	0x200002f7
 80032a0:	0800d614 	.word	0x0800d614
 80032a4:	0800d624 	.word	0x0800d624
 80032a8:	0800d634 	.word	0x0800d634
 80032ac:	0800d644 	.word	0x0800d644
 80032b0:	0800d1fc 	.word	0x0800d1fc
 80032b4:	0800d210 	.word	0x0800d210
 80032b8:	200002e9 	.word	0x200002e9
 80032bc:	200002fa 	.word	0x200002fa
 80032c0:	0800d654 	.word	0x0800d654
			} else if(dilSecim == 1) {
 80032c4:	4b7b      	ldr	r3, [pc, #492]	; (80034b4 <menu+0x2198>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d11b      	bne.n	8003304 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80032cc:	4a7a      	ldr	r2, [pc, #488]	; (80034b8 <menu+0x219c>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	2001      	movs	r0, #1
 80032d2:	f7fd fa71 	bl	80007b8 <lcd_print>
 80032d6:	e015      	b.n	8003304 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032d8:	4b78      	ldr	r3, [pc, #480]	; (80034bc <menu+0x21a0>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d111      	bne.n	8003304 <menu+0x1fe8>
			if(dilSecim == 0){
 80032e0:	4b74      	ldr	r3, [pc, #464]	; (80034b4 <menu+0x2198>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80032e8:	4a75      	ldr	r2, [pc, #468]	; (80034c0 <menu+0x21a4>)
 80032ea:	2101      	movs	r1, #1
 80032ec:	2001      	movs	r0, #1
 80032ee:	f7fd fa63 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80032f2:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <menu+0x2198>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d104      	bne.n	8003304 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80032fa:	4a72      	ldr	r2, [pc, #456]	; (80034c4 <menu+0x21a8>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	2001      	movs	r0, #1
 8003300:	f7fd fa5a 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003304:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <menu+0x21ac>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d113      	bne.n	8003334 <menu+0x2018>
			if(dilSecim == 0) {
 800330c:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <menu+0x2198>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003314:	4a6d      	ldr	r2, [pc, #436]	; (80034cc <menu+0x21b0>)
 8003316:	2101      	movs	r1, #1
 8003318:	2002      	movs	r0, #2
 800331a:	f7fd fa4d 	bl	80007b8 <lcd_print>
 800331e:	e020      	b.n	8003362 <menu+0x2046>
			} else if(dilSecim == 1){
 8003320:	4b64      	ldr	r3, [pc, #400]	; (80034b4 <menu+0x2198>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d11c      	bne.n	8003362 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003328:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <menu+0x21b4>)
 800332a:	2101      	movs	r1, #1
 800332c:	2002      	movs	r0, #2
 800332e:	f7fd fa43 	bl	80007b8 <lcd_print>
 8003332:	e016      	b.n	8003362 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003334:	4b64      	ldr	r3, [pc, #400]	; (80034c8 <menu+0x21ac>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d112      	bne.n	8003362 <menu+0x2046>
			if(dilSecim == 0){
 800333c:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <menu+0x2198>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003344:	4a63      	ldr	r2, [pc, #396]	; (80034d4 <menu+0x21b8>)
 8003346:	2101      	movs	r1, #1
 8003348:	2002      	movs	r0, #2
 800334a:	f7fd fa35 	bl	80007b8 <lcd_print>
 800334e:	e008      	b.n	8003362 <menu+0x2046>
			} else if(dilSecim == 1){
 8003350:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <menu+0x2198>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d104      	bne.n	8003362 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003358:	4a5f      	ldr	r2, [pc, #380]	; (80034d8 <menu+0x21bc>)
 800335a:	2101      	movs	r1, #1
 800335c:	2002      	movs	r0, #2
 800335e:	f7fd fa2b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003362:	2102      	movs	r1, #2
 8003364:	485d      	ldr	r0, [pc, #372]	; (80034dc <menu+0x21c0>)
 8003366:	f005 ffbb 	bl	80092e0 <HAL_GPIO_ReadPin>
 800336a:	4603      	mov	r3, r0
 800336c:	2b01      	cmp	r3, #1
 800336e:	d115      	bne.n	800339c <menu+0x2080>
 8003370:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <menu+0x21c4>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	f083 0301 	eor.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00e      	beq.n	800339c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800337e:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <menu+0x21ac>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <menu+0x21ac>)
 8003388:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800338a:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <menu+0x21ac>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d902      	bls.n	8003398 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003392:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <menu+0x21ac>)
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003398:	f002 f9cc 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800339c:	2104      	movs	r1, #4
 800339e:	484f      	ldr	r0, [pc, #316]	; (80034dc <menu+0x21c0>)
 80033a0:	f005 ff9e 	bl	80092e0 <HAL_GPIO_ReadPin>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d115      	bne.n	80033d6 <menu+0x20ba>
 80033aa:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <menu+0x21c4>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	f083 0301 	eor.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00e      	beq.n	80033d6 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80033b8:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <menu+0x21ac>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	3b01      	subs	r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <menu+0x21ac>)
 80033c2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <menu+0x21ac>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80033cc:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <menu+0x21ac>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033d2:	f002 f9af 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033d6:	2108      	movs	r1, #8
 80033d8:	4840      	ldr	r0, [pc, #256]	; (80034dc <menu+0x21c0>)
 80033da:	f005 ff81 	bl	80092e0 <HAL_GPIO_ReadPin>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d10d      	bne.n	8003400 <menu+0x20e4>
 80033e4:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <menu+0x21c4>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	f083 0301 	eor.w	r3, r3, #1
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80033f2:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <menu+0x21ac>)
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <menu+0x21c8>)
 80033f8:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <menu+0x21cc>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003400:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <menu+0x21d0>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b13      	cmp	r3, #19
 8003406:	f040 80d5 	bne.w	80035b4 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <menu+0x21a0>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d113      	bne.n	800343a <menu+0x211e>
			if(dilSecim == 0) {
 8003412:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <menu+0x2198>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800341a:	4a35      	ldr	r2, [pc, #212]	; (80034f0 <menu+0x21d4>)
 800341c:	2101      	movs	r1, #1
 800341e:	2001      	movs	r0, #1
 8003420:	f7fd f9ca 	bl	80007b8 <lcd_print>
 8003424:	e01f      	b.n	8003466 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <menu+0x2198>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d11b      	bne.n	8003466 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800342e:	4a31      	ldr	r2, [pc, #196]	; (80034f4 <menu+0x21d8>)
 8003430:	2101      	movs	r1, #1
 8003432:	2001      	movs	r0, #1
 8003434:	f7fd f9c0 	bl	80007b8 <lcd_print>
 8003438:	e015      	b.n	8003466 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <menu+0x21a0>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d111      	bne.n	8003466 <menu+0x214a>
			if(dilSecim == 0) {
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <menu+0x2198>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800344a:	4a2b      	ldr	r2, [pc, #172]	; (80034f8 <menu+0x21dc>)
 800344c:	2101      	movs	r1, #1
 800344e:	2001      	movs	r0, #1
 8003450:	f7fd f9b2 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003454:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <menu+0x2198>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d104      	bne.n	8003466 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <menu+0x21e0>)
 800345e:	2101      	movs	r1, #1
 8003460:	2001      	movs	r0, #1
 8003462:	f7fd f9a9 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003466:	4b26      	ldr	r3, [pc, #152]	; (8003500 <menu+0x21e4>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d113      	bne.n	8003496 <menu+0x217a>
			if(dilSecim == 0) {
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <menu+0x2198>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003476:	4a15      	ldr	r2, [pc, #84]	; (80034cc <menu+0x21b0>)
 8003478:	2101      	movs	r1, #1
 800347a:	2002      	movs	r0, #2
 800347c:	f7fd f99c 	bl	80007b8 <lcd_print>
 8003480:	e049      	b.n	8003516 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <menu+0x2198>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d145      	bne.n	8003516 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800348a:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <menu+0x21b4>)
 800348c:	2101      	movs	r1, #1
 800348e:	2002      	movs	r0, #2
 8003490:	f7fd f992 	bl	80007b8 <lcd_print>
 8003494:	e03f      	b.n	8003516 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003496:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <menu+0x21e4>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d13b      	bne.n	8003516 <menu+0x21fa>
			if(dilSecim == 0) {
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <menu+0x2198>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d12e      	bne.n	8003504 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80034a6:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <menu+0x21b8>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	2002      	movs	r0, #2
 80034ac:	f7fd f984 	bl	80007b8 <lcd_print>
 80034b0:	e031      	b.n	8003516 <menu+0x21fa>
 80034b2:	bf00      	nop
 80034b4:	20000309 	.word	0x20000309
 80034b8:	0800d668 	.word	0x0800d668
 80034bc:	200002f7 	.word	0x200002f7
 80034c0:	0800d678 	.word	0x0800d678
 80034c4:	0800d68c 	.word	0x0800d68c
 80034c8:	200002f8 	.word	0x200002f8
 80034cc:	0800d1fc 	.word	0x0800d1fc
 80034d0:	0800d210 	.word	0x0800d210
 80034d4:	0800d25c 	.word	0x0800d25c
 80034d8:	0800d270 	.word	0x0800d270
 80034dc:	40010800 	.word	0x40010800
 80034e0:	20000317 	.word	0x20000317
 80034e4:	20000218 	.word	0x20000218
 80034e8:	20000314 	.word	0x20000314
 80034ec:	200002e8 	.word	0x200002e8
 80034f0:	0800d6a0 	.word	0x0800d6a0
 80034f4:	0800d6b4 	.word	0x0800d6b4
 80034f8:	0800d6c8 	.word	0x0800d6c8
 80034fc:	0800d6dc 	.word	0x0800d6dc
 8003500:	200002f9 	.word	0x200002f9
			} else if(dilSecim == 1) {
 8003504:	4b90      	ldr	r3, [pc, #576]	; (8003748 <menu+0x242c>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d104      	bne.n	8003516 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 800350c:	4a8f      	ldr	r2, [pc, #572]	; (800374c <menu+0x2430>)
 800350e:	2101      	movs	r1, #1
 8003510:	2002      	movs	r0, #2
 8003512:	f7fd f951 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003516:	2102      	movs	r1, #2
 8003518:	488d      	ldr	r0, [pc, #564]	; (8003750 <menu+0x2434>)
 800351a:	f005 fee1 	bl	80092e0 <HAL_GPIO_ReadPin>
 800351e:	4603      	mov	r3, r0
 8003520:	2b01      	cmp	r3, #1
 8003522:	d115      	bne.n	8003550 <menu+0x2234>
 8003524:	4b8b      	ldr	r3, [pc, #556]	; (8003754 <menu+0x2438>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f083 0301 	eor.w	r3, r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00e      	beq.n	8003550 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003532:	4b89      	ldr	r3, [pc, #548]	; (8003758 <menu+0x243c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	3301      	adds	r3, #1
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b87      	ldr	r3, [pc, #540]	; (8003758 <menu+0x243c>)
 800353c:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800353e:	4b86      	ldr	r3, [pc, #536]	; (8003758 <menu+0x243c>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d902      	bls.n	800354c <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003546:	4b84      	ldr	r3, [pc, #528]	; (8003758 <menu+0x243c>)
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800354c:	f002 f8f2 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003550:	2104      	movs	r1, #4
 8003552:	487f      	ldr	r0, [pc, #508]	; (8003750 <menu+0x2434>)
 8003554:	f005 fec4 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003558:	4603      	mov	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d115      	bne.n	800358a <menu+0x226e>
 800355e:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <menu+0x2438>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	f083 0301 	eor.w	r3, r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800356c:	4b7a      	ldr	r3, [pc, #488]	; (8003758 <menu+0x243c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	4b78      	ldr	r3, [pc, #480]	; (8003758 <menu+0x243c>)
 8003576:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003578:	4b77      	ldr	r3, [pc, #476]	; (8003758 <menu+0x243c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003580:	4b75      	ldr	r3, [pc, #468]	; (8003758 <menu+0x243c>)
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003586:	f002 f8d5 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800358a:	2108      	movs	r1, #8
 800358c:	4870      	ldr	r0, [pc, #448]	; (8003750 <menu+0x2434>)
 800358e:	f005 fea7 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10d      	bne.n	80035b4 <menu+0x2298>
 8003598:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <menu+0x2438>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80035a6:	4b6c      	ldr	r3, [pc, #432]	; (8003758 <menu+0x243c>)
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	4b6c      	ldr	r3, [pc, #432]	; (800375c <menu+0x2440>)
 80035ac:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80035ae:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <menu+0x2444>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80035b4:	4b6b      	ldr	r3, [pc, #428]	; (8003764 <menu+0x2448>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b14      	cmp	r3, #20
 80035ba:	f040 80b5 	bne.w	8003728 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80035be:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <menu+0x244c>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d113      	bne.n	80035ee <menu+0x22d2>
			if(dilSecim == 0) {
 80035c6:	4b60      	ldr	r3, [pc, #384]	; (8003748 <menu+0x242c>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80035ce:	4a67      	ldr	r2, [pc, #412]	; (800376c <menu+0x2450>)
 80035d0:	2101      	movs	r1, #1
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7fd f8f0 	bl	80007b8 <lcd_print>
 80035d8:	e020      	b.n	800361c <menu+0x2300>
			} else if(dilSecim == 1) {
 80035da:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <menu+0x242c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d11c      	bne.n	800361c <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80035e2:	4a63      	ldr	r2, [pc, #396]	; (8003770 <menu+0x2454>)
 80035e4:	2101      	movs	r1, #1
 80035e6:	2001      	movs	r0, #1
 80035e8:	f7fd f8e6 	bl	80007b8 <lcd_print>
 80035ec:	e016      	b.n	800361c <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80035ee:	4b5e      	ldr	r3, [pc, #376]	; (8003768 <menu+0x244c>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d112      	bne.n	800361c <menu+0x2300>
			if(dilSecim == 0) {
 80035f6:	4b54      	ldr	r3, [pc, #336]	; (8003748 <menu+0x242c>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80035fe:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <menu+0x2458>)
 8003600:	2101      	movs	r1, #1
 8003602:	2001      	movs	r0, #1
 8003604:	f7fd f8d8 	bl	80007b8 <lcd_print>
 8003608:	e008      	b.n	800361c <menu+0x2300>
			} else if(dilSecim == 1) {
 800360a:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <menu+0x242c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d104      	bne.n	800361c <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003612:	4a59      	ldr	r2, [pc, #356]	; (8003778 <menu+0x245c>)
 8003614:	2101      	movs	r1, #1
 8003616:	2001      	movs	r0, #1
 8003618:	f7fd f8ce 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 800361c:	4b57      	ldr	r3, [pc, #348]	; (800377c <menu+0x2460>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d113      	bne.n	800364c <menu+0x2330>
			if(dilSecim == 0) {
 8003624:	4b48      	ldr	r3, [pc, #288]	; (8003748 <menu+0x242c>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 800362c:	4a54      	ldr	r2, [pc, #336]	; (8003780 <menu+0x2464>)
 800362e:	2101      	movs	r1, #1
 8003630:	2002      	movs	r0, #2
 8003632:	f7fd f8c1 	bl	80007b8 <lcd_print>
 8003636:	e020      	b.n	800367a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003638:	4b43      	ldr	r3, [pc, #268]	; (8003748 <menu+0x242c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d11c      	bne.n	800367a <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003640:	4a50      	ldr	r2, [pc, #320]	; (8003784 <menu+0x2468>)
 8003642:	2101      	movs	r1, #1
 8003644:	2002      	movs	r0, #2
 8003646:	f7fd f8b7 	bl	80007b8 <lcd_print>
 800364a:	e016      	b.n	800367a <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 800364c:	4b4b      	ldr	r3, [pc, #300]	; (800377c <menu+0x2460>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d112      	bne.n	800367a <menu+0x235e>
			if(dilSecim == 0) {
 8003654:	4b3c      	ldr	r3, [pc, #240]	; (8003748 <menu+0x242c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 800365c:	4a4a      	ldr	r2, [pc, #296]	; (8003788 <menu+0x246c>)
 800365e:	2101      	movs	r1, #1
 8003660:	2002      	movs	r0, #2
 8003662:	f7fd f8a9 	bl	80007b8 <lcd_print>
 8003666:	e008      	b.n	800367a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003668:	4b37      	ldr	r3, [pc, #220]	; (8003748 <menu+0x242c>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d104      	bne.n	800367a <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003670:	4a46      	ldr	r2, [pc, #280]	; (800378c <menu+0x2470>)
 8003672:	2101      	movs	r1, #1
 8003674:	2002      	movs	r0, #2
 8003676:	f7fd f89f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800367a:	2102      	movs	r1, #2
 800367c:	4834      	ldr	r0, [pc, #208]	; (8003750 <menu+0x2434>)
 800367e:	f005 fe2f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003682:	4603      	mov	r3, r0
 8003684:	2b01      	cmp	r3, #1
 8003686:	d119      	bne.n	80036bc <menu+0x23a0>
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <menu+0x2438>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	f083 0301 	eor.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d012      	beq.n	80036bc <menu+0x23a0>
 8003696:	4b34      	ldr	r3, [pc, #208]	; (8003768 <menu+0x244c>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d10e      	bne.n	80036bc <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <menu+0x2460>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4b35      	ldr	r3, [pc, #212]	; (800377c <menu+0x2460>)
 80036a8:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <menu+0x2460>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d902      	bls.n	80036b8 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80036b2:	4b32      	ldr	r3, [pc, #200]	; (800377c <menu+0x2460>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036b8:	f002 f83c 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036bc:	2104      	movs	r1, #4
 80036be:	4824      	ldr	r0, [pc, #144]	; (8003750 <menu+0x2434>)
 80036c0:	f005 fe0e 	bl	80092e0 <HAL_GPIO_ReadPin>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d119      	bne.n	80036fe <menu+0x23e2>
 80036ca:	4b22      	ldr	r3, [pc, #136]	; (8003754 <menu+0x2438>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <menu+0x23e2>
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <menu+0x244c>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d10e      	bne.n	80036fe <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80036e0:	4b26      	ldr	r3, [pc, #152]	; (800377c <menu+0x2460>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <menu+0x2460>)
 80036ea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80036ec:	4b23      	ldr	r3, [pc, #140]	; (800377c <menu+0x2460>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80036f4:	4b21      	ldr	r3, [pc, #132]	; (800377c <menu+0x2460>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036fa:	f002 f81b 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036fe:	2108      	movs	r1, #8
 8003700:	4813      	ldr	r0, [pc, #76]	; (8003750 <menu+0x2434>)
 8003702:	f005 fded 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10d      	bne.n	8003728 <menu+0x240c>
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <menu+0x2438>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	f083 0301 	eor.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d006      	beq.n	8003728 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <menu+0x2460>)
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <menu+0x2440>)
 8003720:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <menu+0x2444>)
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <menu+0x2448>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b15      	cmp	r3, #21
 800372e:	f040 80c2 	bne.w	80038b6 <menu+0x259a>
		if(dilSecim == 0) {
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <menu+0x242c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d12c      	bne.n	8003794 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800373a:	4a15      	ldr	r2, [pc, #84]	; (8003790 <menu+0x2474>)
 800373c:	2101      	movs	r1, #1
 800373e:	2001      	movs	r0, #1
 8003740:	f7fd f83a 	bl	80007b8 <lcd_print>
 8003744:	e02f      	b.n	80037a6 <menu+0x248a>
 8003746:	bf00      	nop
 8003748:	20000309 	.word	0x20000309
 800374c:	0800d270 	.word	0x0800d270
 8003750:	40010800 	.word	0x40010800
 8003754:	20000317 	.word	0x20000317
 8003758:	200002f9 	.word	0x200002f9
 800375c:	20000218 	.word	0x20000218
 8003760:	20000314 	.word	0x20000314
 8003764:	200002e8 	.word	0x200002e8
 8003768:	200002f7 	.word	0x200002f7
 800376c:	0800d6f0 	.word	0x0800d6f0
 8003770:	0800d704 	.word	0x0800d704
 8003774:	0800d718 	.word	0x0800d718
 8003778:	0800d72c 	.word	0x0800d72c
 800377c:	200002fa 	.word	0x200002fa
 8003780:	0800d740 	.word	0x0800d740
 8003784:	0800d754 	.word	0x0800d754
 8003788:	0800d764 	.word	0x0800d764
 800378c:	0800d778 	.word	0x0800d778
 8003790:	0800d788 	.word	0x0800d788
		} else if(dilSecim == 1) {
 8003794:	4b9c      	ldr	r3, [pc, #624]	; (8003a08 <menu+0x26ec>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d104      	bne.n	80037a6 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800379c:	4a9b      	ldr	r2, [pc, #620]	; (8003a0c <menu+0x26f0>)
 800379e:	2101      	movs	r1, #1
 80037a0:	2001      	movs	r0, #1
 80037a2:	f7fd f809 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80037a6:	4b9a      	ldr	r3, [pc, #616]	; (8003a10 <menu+0x26f4>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d112      	bne.n	80037d4 <menu+0x24b8>
			if(dilSecim == 0) {
 80037ae:	4b96      	ldr	r3, [pc, #600]	; (8003a08 <menu+0x26ec>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80037b6:	4a97      	ldr	r2, [pc, #604]	; (8003a14 <menu+0x26f8>)
 80037b8:	2101      	movs	r1, #1
 80037ba:	2002      	movs	r0, #2
 80037bc:	f7fc fffc 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 80037c0:	4b91      	ldr	r3, [pc, #580]	; (8003a08 <menu+0x26ec>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d11c      	bne.n	8003802 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80037c8:	4a93      	ldr	r2, [pc, #588]	; (8003a18 <menu+0x26fc>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	2002      	movs	r0, #2
 80037ce:	f7fc fff3 	bl	80007b8 <lcd_print>
 80037d2:	e016      	b.n	8003802 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80037d4:	4b8e      	ldr	r3, [pc, #568]	; (8003a10 <menu+0x26f4>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d112      	bne.n	8003802 <menu+0x24e6>
			if(dilSecim == 0) {
 80037dc:	4b8a      	ldr	r3, [pc, #552]	; (8003a08 <menu+0x26ec>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80037e4:	4a8d      	ldr	r2, [pc, #564]	; (8003a1c <menu+0x2700>)
 80037e6:	2101      	movs	r1, #1
 80037e8:	2002      	movs	r0, #2
 80037ea:	f7fc ffe5 	bl	80007b8 <lcd_print>
 80037ee:	e008      	b.n	8003802 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80037f0:	4b85      	ldr	r3, [pc, #532]	; (8003a08 <menu+0x26ec>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d104      	bne.n	8003802 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80037f8:	4a89      	ldr	r2, [pc, #548]	; (8003a20 <menu+0x2704>)
 80037fa:	2101      	movs	r1, #1
 80037fc:	2002      	movs	r0, #2
 80037fe:	f7fc ffdb 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003802:	2102      	movs	r1, #2
 8003804:	4887      	ldr	r0, [pc, #540]	; (8003a24 <menu+0x2708>)
 8003806:	f005 fd6b 	bl	80092e0 <HAL_GPIO_ReadPin>
 800380a:	4603      	mov	r3, r0
 800380c:	2b01      	cmp	r3, #1
 800380e:	d115      	bne.n	800383c <menu+0x2520>
 8003810:	4b85      	ldr	r3, [pc, #532]	; (8003a28 <menu+0x270c>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	f083 0301 	eor.w	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800381e:	4b7c      	ldr	r3, [pc, #496]	; (8003a10 <menu+0x26f4>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b7a      	ldr	r3, [pc, #488]	; (8003a10 <menu+0x26f4>)
 8003828:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800382a:	4b79      	ldr	r3, [pc, #484]	; (8003a10 <menu+0x26f4>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d902      	bls.n	8003838 <menu+0x251c>
				platformSilindirTipi = 0;
 8003832:	4b77      	ldr	r3, [pc, #476]	; (8003a10 <menu+0x26f4>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003838:	f001 ff7c 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800383c:	2104      	movs	r1, #4
 800383e:	4879      	ldr	r0, [pc, #484]	; (8003a24 <menu+0x2708>)
 8003840:	f005 fd4e 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003844:	4603      	mov	r3, r0
 8003846:	2b01      	cmp	r3, #1
 8003848:	d115      	bne.n	8003876 <menu+0x255a>
 800384a:	4b77      	ldr	r3, [pc, #476]	; (8003a28 <menu+0x270c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	f083 0301 	eor.w	r3, r3, #1
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003858:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <menu+0x26f4>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	b2da      	uxtb	r2, r3
 8003860:	4b6b      	ldr	r3, [pc, #428]	; (8003a10 <menu+0x26f4>)
 8003862:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <menu+0x26f4>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <menu+0x2556>
		   		platformSilindirTipi = 1;
 800386c:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <menu+0x26f4>)
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003872:	f001 ff5f 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003876:	2108      	movs	r1, #8
 8003878:	486a      	ldr	r0, [pc, #424]	; (8003a24 <menu+0x2708>)
 800387a:	f005 fd31 	bl	80092e0 <HAL_GPIO_ReadPin>
 800387e:	4603      	mov	r3, r0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d118      	bne.n	80038b6 <menu+0x259a>
 8003884:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <menu+0x270c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f083 0301 	eor.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <menu+0x26f4>)
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <menu+0x2710>)
 8003898:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <menu+0x26f4>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d106      	bne.n	80038b0 <menu+0x2594>
				altLimit = 1;
 80038a2:	4b63      	ldr	r3, [pc, #396]	; (8003a30 <menu+0x2714>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80038a8:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <menu+0x2714>)
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	4b5f      	ldr	r3, [pc, #380]	; (8003a2c <menu+0x2710>)
 80038ae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80038b0:	4b60      	ldr	r3, [pc, #384]	; (8003a34 <menu+0x2718>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80038b6:	4b60      	ldr	r3, [pc, #384]	; (8003a38 <menu+0x271c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b16      	cmp	r3, #22
 80038bc:	f040 8081 	bne.w	80039c2 <menu+0x26a6>
		if(dilSecim == 0) {
 80038c0:	4b51      	ldr	r3, [pc, #324]	; (8003a08 <menu+0x26ec>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80038c8:	4a5c      	ldr	r2, [pc, #368]	; (8003a3c <menu+0x2720>)
 80038ca:	2101      	movs	r1, #1
 80038cc:	2001      	movs	r0, #1
 80038ce:	f7fc ff73 	bl	80007b8 <lcd_print>
 80038d2:	e008      	b.n	80038e6 <menu+0x25ca>
		} else if(dilSecim == 1) {
 80038d4:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <menu+0x26ec>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d104      	bne.n	80038e6 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80038dc:	4a58      	ldr	r2, [pc, #352]	; (8003a40 <menu+0x2724>)
 80038de:	2101      	movs	r1, #1
 80038e0:	2001      	movs	r0, #1
 80038e2:	f7fc ff69 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80038e6:	4b48      	ldr	r3, [pc, #288]	; (8003a08 <menu+0x26ec>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80038ee:	4a55      	ldr	r2, [pc, #340]	; (8003a44 <menu+0x2728>)
 80038f0:	2101      	movs	r1, #1
 80038f2:	2002      	movs	r0, #2
 80038f4:	f7fc ff60 	bl	80007b8 <lcd_print>
 80038f8:	e008      	b.n	800390c <menu+0x25f0>
			} else if(dilSecim == 1){
 80038fa:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <menu+0x26ec>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d104      	bne.n	800390c <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003902:	4a51      	ldr	r2, [pc, #324]	; (8003a48 <menu+0x272c>)
 8003904:	2101      	movs	r1, #1
 8003906:	2002      	movs	r0, #2
 8003908:	f7fc ff56 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 800390c:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <menu+0x2730>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	220a      	movs	r2, #10
 8003912:	494f      	ldr	r1, [pc, #316]	; (8003a50 <menu+0x2734>)
 8003914:	4618      	mov	r0, r3
 8003916:	f008 fd0f 	bl	800c338 <itoa>
		lcd_print(2,16,snum);
 800391a:	4a4d      	ldr	r2, [pc, #308]	; (8003a50 <menu+0x2734>)
 800391c:	2110      	movs	r1, #16
 800391e:	2002      	movs	r0, #2
 8003920:	f7fc ff4a 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003924:	2102      	movs	r1, #2
 8003926:	483f      	ldr	r0, [pc, #252]	; (8003a24 <menu+0x2708>)
 8003928:	f005 fcda 	bl	80092e0 <HAL_GPIO_ReadPin>
 800392c:	4603      	mov	r3, r0
 800392e:	2b01      	cmp	r3, #1
 8003930:	d115      	bne.n	800395e <menu+0x2642>
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <menu+0x270c>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	f083 0301 	eor.w	r3, r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00e      	beq.n	800395e <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003940:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <menu+0x2730>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	4b40      	ldr	r3, [pc, #256]	; (8003a4c <menu+0x2730>)
 800394a:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 800394c:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <menu+0x2730>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b05      	cmp	r3, #5
 8003952:	d902      	bls.n	800395a <menu+0x263e>
				yukariValfTmr = 0;
 8003954:	4b3d      	ldr	r3, [pc, #244]	; (8003a4c <menu+0x2730>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800395a:	f001 feeb 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800395e:	2104      	movs	r1, #4
 8003960:	4830      	ldr	r0, [pc, #192]	; (8003a24 <menu+0x2708>)
 8003962:	f005 fcbd 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003966:	4603      	mov	r3, r0
 8003968:	2b01      	cmp	r3, #1
 800396a:	d115      	bne.n	8003998 <menu+0x267c>
 800396c:	4b2e      	ldr	r3, [pc, #184]	; (8003a28 <menu+0x270c>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	f083 0301 	eor.w	r3, r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800397a:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <menu+0x2730>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	3b01      	subs	r3, #1
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <menu+0x2730>)
 8003984:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <menu+0x2730>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b06      	cmp	r3, #6
 800398c:	d902      	bls.n	8003994 <menu+0x2678>
		   		yukariValfTmr = 5;
 800398e:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <menu+0x2730>)
 8003990:	2205      	movs	r2, #5
 8003992:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003994:	f001 fece 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003998:	2108      	movs	r1, #8
 800399a:	4822      	ldr	r0, [pc, #136]	; (8003a24 <menu+0x2708>)
 800399c:	f005 fca0 	bl	80092e0 <HAL_GPIO_ReadPin>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10d      	bne.n	80039c2 <menu+0x26a6>
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <menu+0x270c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	f083 0301 	eor.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d006      	beq.n	80039c2 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <menu+0x2730>)
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <menu+0x2710>)
 80039ba:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <menu+0x2718>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <menu+0x271c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b17      	cmp	r3, #23
 80039c8:	f040 80ac 	bne.w	8003b24 <menu+0x2808>
		if(dilSecim == 0) {
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <menu+0x26ec>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80039d4:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <menu+0x2738>)
 80039d6:	2101      	movs	r1, #1
 80039d8:	2001      	movs	r0, #1
 80039da:	f7fc feed 	bl	80007b8 <lcd_print>
 80039de:	e008      	b.n	80039f2 <menu+0x26d6>
		} else if(dilSecim == 1) {
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <menu+0x26ec>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d104      	bne.n	80039f2 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80039e8:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <menu+0x273c>)
 80039ea:	2101      	movs	r1, #1
 80039ec:	2001      	movs	r0, #1
 80039ee:	f7fc fee3 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <menu+0x26ec>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d130      	bne.n	8003a5c <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <menu+0x2728>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	2002      	movs	r0, #2
 8003a00:	f7fc feda 	bl	80007b8 <lcd_print>
 8003a04:	e033      	b.n	8003a6e <menu+0x2752>
 8003a06:	bf00      	nop
 8003a08:	20000309 	.word	0x20000309
 8003a0c:	0800d79c 	.word	0x0800d79c
 8003a10:	200002fb 	.word	0x200002fb
 8003a14:	0800d740 	.word	0x0800d740
 8003a18:	0800d754 	.word	0x0800d754
 8003a1c:	0800d764 	.word	0x0800d764
 8003a20:	0800d778 	.word	0x0800d778
 8003a24:	40010800 	.word	0x40010800
 8003a28:	20000317 	.word	0x20000317
 8003a2c:	20000218 	.word	0x20000218
 8003a30:	200002ee 	.word	0x200002ee
 8003a34:	20000314 	.word	0x20000314
 8003a38:	200002e8 	.word	0x200002e8
 8003a3c:	0800d7ac 	.word	0x0800d7ac
 8003a40:	0800d7c0 	.word	0x0800d7c0
 8003a44:	0800d460 	.word	0x0800d460
 8003a48:	0800d7d4 	.word	0x0800d7d4
 8003a4c:	200002fc 	.word	0x200002fc
 8003a50:	20000288 	.word	0x20000288
 8003a54:	0800d7e4 	.word	0x0800d7e4
 8003a58:	0800d7f8 	.word	0x0800d7f8
			} else if(dilSecim == 1) {
 8003a5c:	4b98      	ldr	r3, [pc, #608]	; (8003cc0 <menu+0x29a4>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d104      	bne.n	8003a6e <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003a64:	4a97      	ldr	r2, [pc, #604]	; (8003cc4 <menu+0x29a8>)
 8003a66:	2101      	movs	r1, #1
 8003a68:	2002      	movs	r0, #2
 8003a6a:	f7fc fea5 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003a6e:	4b96      	ldr	r3, [pc, #600]	; (8003cc8 <menu+0x29ac>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	220a      	movs	r2, #10
 8003a74:	4995      	ldr	r1, [pc, #596]	; (8003ccc <menu+0x29b0>)
 8003a76:	4618      	mov	r0, r3
 8003a78:	f008 fc5e 	bl	800c338 <itoa>
		lcd_print(2,16,snum);
 8003a7c:	4a93      	ldr	r2, [pc, #588]	; (8003ccc <menu+0x29b0>)
 8003a7e:	2110      	movs	r1, #16
 8003a80:	2002      	movs	r0, #2
 8003a82:	f7fc fe99 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a86:	2102      	movs	r1, #2
 8003a88:	4891      	ldr	r0, [pc, #580]	; (8003cd0 <menu+0x29b4>)
 8003a8a:	f005 fc29 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d115      	bne.n	8003ac0 <menu+0x27a4>
 8003a94:	4b8f      	ldr	r3, [pc, #572]	; (8003cd4 <menu+0x29b8>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	f083 0301 	eor.w	r3, r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00e      	beq.n	8003ac0 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003aa2:	4b89      	ldr	r3, [pc, #548]	; (8003cc8 <menu+0x29ac>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b87      	ldr	r3, [pc, #540]	; (8003cc8 <menu+0x29ac>)
 8003aac:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003aae:	4b86      	ldr	r3, [pc, #536]	; (8003cc8 <menu+0x29ac>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d902      	bls.n	8003abc <menu+0x27a0>
				asagiValfTmr = 0;
 8003ab6:	4b84      	ldr	r3, [pc, #528]	; (8003cc8 <menu+0x29ac>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003abc:	f001 fe3a 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac0:	2104      	movs	r1, #4
 8003ac2:	4883      	ldr	r0, [pc, #524]	; (8003cd0 <menu+0x29b4>)
 8003ac4:	f005 fc0c 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d115      	bne.n	8003afa <menu+0x27de>
 8003ace:	4b81      	ldr	r3, [pc, #516]	; (8003cd4 <menu+0x29b8>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	f083 0301 	eor.w	r3, r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003adc:	4b7a      	ldr	r3, [pc, #488]	; (8003cc8 <menu+0x29ac>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b78      	ldr	r3, [pc, #480]	; (8003cc8 <menu+0x29ac>)
 8003ae6:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003ae8:	4b77      	ldr	r3, [pc, #476]	; (8003cc8 <menu+0x29ac>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d902      	bls.n	8003af6 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003af0:	4b75      	ldr	r3, [pc, #468]	; (8003cc8 <menu+0x29ac>)
 8003af2:	2205      	movs	r2, #5
 8003af4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003af6:	f001 fe1d 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afa:	2108      	movs	r1, #8
 8003afc:	4874      	ldr	r0, [pc, #464]	; (8003cd0 <menu+0x29b4>)
 8003afe:	f005 fbef 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10d      	bne.n	8003b24 <menu+0x2808>
 8003b08:	4b72      	ldr	r3, [pc, #456]	; (8003cd4 <menu+0x29b8>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f083 0301 	eor.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003b16:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <menu+0x29ac>)
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <menu+0x29bc>)
 8003b1c:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	; (8003cdc <menu+0x29c0>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003b24:	4b6e      	ldr	r3, [pc, #440]	; (8003ce0 <menu+0x29c4>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b18      	cmp	r3, #24
 8003b2a:	f040 809d 	bne.w	8003c68 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <menu+0x29c8>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d113      	bne.n	8003b5e <menu+0x2842>
			if(dilSecim == 0) {
 8003b36:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <menu+0x29a4>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003b3e:	4a6a      	ldr	r2, [pc, #424]	; (8003ce8 <menu+0x29cc>)
 8003b40:	2101      	movs	r1, #1
 8003b42:	2001      	movs	r0, #1
 8003b44:	f7fc fe38 	bl	80007b8 <lcd_print>
 8003b48:	e020      	b.n	8003b8c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b4a:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <menu+0x29a4>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d11c      	bne.n	8003b8c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003b52:	4a66      	ldr	r2, [pc, #408]	; (8003cec <menu+0x29d0>)
 8003b54:	2101      	movs	r1, #1
 8003b56:	2001      	movs	r0, #1
 8003b58:	f7fc fe2e 	bl	80007b8 <lcd_print>
 8003b5c:	e016      	b.n	8003b8c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b5e:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <menu+0x29c8>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d112      	bne.n	8003b8c <menu+0x2870>
			if(dilSecim == 0) {
 8003b66:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <menu+0x29a4>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003b6e:	4a60      	ldr	r2, [pc, #384]	; (8003cf0 <menu+0x29d4>)
 8003b70:	2101      	movs	r1, #1
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7fc fe20 	bl	80007b8 <lcd_print>
 8003b78:	e008      	b.n	8003b8c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b7a:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <menu+0x29a4>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d104      	bne.n	8003b8c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003b82:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <menu+0x29d8>)
 8003b84:	2101      	movs	r1, #1
 8003b86:	2001      	movs	r0, #1
 8003b88:	f7fc fe16 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003b8c:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <menu+0x29a4>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <menu+0x29dc>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	2002      	movs	r0, #2
 8003b9a:	f7fc fe0d 	bl	80007b8 <lcd_print>
 8003b9e:	e008      	b.n	8003bb2 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003ba0:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <menu+0x29a4>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d104      	bne.n	8003bb2 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003ba8:	4a46      	ldr	r2, [pc, #280]	; (8003cc4 <menu+0x29a8>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2002      	movs	r0, #2
 8003bae:	f7fc fe03 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003bb2:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <menu+0x29e0>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	220a      	movs	r2, #10
 8003bb8:	4944      	ldr	r1, [pc, #272]	; (8003ccc <menu+0x29b0>)
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f008 fbbc 	bl	800c338 <itoa>
		lcd_print(2, 16, snum);
 8003bc0:	4a42      	ldr	r2, [pc, #264]	; (8003ccc <menu+0x29b0>)
 8003bc2:	2110      	movs	r1, #16
 8003bc4:	2002      	movs	r0, #2
 8003bc6:	f7fc fdf7 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bca:	2102      	movs	r1, #2
 8003bcc:	4840      	ldr	r0, [pc, #256]	; (8003cd0 <menu+0x29b4>)
 8003bce:	f005 fb87 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d115      	bne.n	8003c04 <menu+0x28e8>
 8003bd8:	4b3e      	ldr	r3, [pc, #248]	; (8003cd4 <menu+0x29b8>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	f083 0301 	eor.w	r3, r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00e      	beq.n	8003c04 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003be6:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <menu+0x29e0>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b43      	ldr	r3, [pc, #268]	; (8003cfc <menu+0x29e0>)
 8003bf0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003bf2:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <menu+0x29e0>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d902      	bls.n	8003c00 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003bfa:	4b40      	ldr	r3, [pc, #256]	; (8003cfc <menu+0x29e0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c00:	f001 fd98 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c04:	2104      	movs	r1, #4
 8003c06:	4832      	ldr	r0, [pc, #200]	; (8003cd0 <menu+0x29b4>)
 8003c08:	f005 fb6a 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d115      	bne.n	8003c3e <menu+0x2922>
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <menu+0x29b8>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f083 0301 	eor.w	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003c20:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <menu+0x29e0>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	4b34      	ldr	r3, [pc, #208]	; (8003cfc <menu+0x29e0>)
 8003c2a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003c2c:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <menu+0x29e0>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b06      	cmp	r3, #6
 8003c32:	d902      	bls.n	8003c3a <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003c34:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <menu+0x29e0>)
 8003c36:	2205      	movs	r2, #5
 8003c38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c3a:	f001 fd7b 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c3e:	2108      	movs	r1, #8
 8003c40:	4823      	ldr	r0, [pc, #140]	; (8003cd0 <menu+0x29b4>)
 8003c42:	f005 fb4d 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10d      	bne.n	8003c68 <menu+0x294c>
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <menu+0x29b8>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f083 0301 	eor.w	r3, r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003c5a:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <menu+0x29e0>)
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <menu+0x29bc>)
 8003c60:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <menu+0x29c0>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <menu+0x29c4>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b19      	cmp	r3, #25
 8003c6e:	f040 80c4 	bne.w	8003dfa <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003c72:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <menu+0x29c8>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d113      	bne.n	8003ca2 <menu+0x2986>
			if(dilSecim == 0) {
 8003c7a:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <menu+0x29a4>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003c82:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <menu+0x29e4>)
 8003c84:	2101      	movs	r1, #1
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7fc fd96 	bl	80007b8 <lcd_print>
 8003c8c:	e047      	b.n	8003d1e <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <menu+0x29a4>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d143      	bne.n	8003d1e <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c96:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <menu+0x29e8>)
 8003c98:	2101      	movs	r1, #1
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f7fc fd8c 	bl	80007b8 <lcd_print>
 8003ca0:	e03d      	b.n	8003d1e <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <menu+0x29c8>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d139      	bne.n	8003d1e <menu+0x2a02>
			if(dilSecim == 0) {
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <menu+0x29a4>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d12c      	bne.n	8003d0c <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <menu+0x29ec>)
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f7fc fd7e 	bl	80007b8 <lcd_print>
 8003cbc:	e02f      	b.n	8003d1e <menu+0x2a02>
 8003cbe:	bf00      	nop
 8003cc0:	20000309 	.word	0x20000309
 8003cc4:	0800d7d4 	.word	0x0800d7d4
 8003cc8:	200002fd 	.word	0x200002fd
 8003ccc:	20000288 	.word	0x20000288
 8003cd0:	40010800 	.word	0x40010800
 8003cd4:	20000317 	.word	0x20000317
 8003cd8:	20000218 	.word	0x20000218
 8003cdc:	20000314 	.word	0x20000314
 8003ce0:	200002e8 	.word	0x200002e8
 8003ce4:	200002f7 	.word	0x200002f7
 8003ce8:	0800d80c 	.word	0x0800d80c
 8003cec:	0800d820 	.word	0x0800d820
 8003cf0:	0800d834 	.word	0x0800d834
 8003cf4:	0800d848 	.word	0x0800d848
 8003cf8:	0800d460 	.word	0x0800d460
 8003cfc:	200002fe 	.word	0x200002fe
 8003d00:	0800d85c 	.word	0x0800d85c
 8003d04:	0800d870 	.word	0x0800d870
 8003d08:	0800d884 	.word	0x0800d884
			} else if(dilSecim == 1) {
 8003d0c:	4b73      	ldr	r3, [pc, #460]	; (8003edc <menu+0x2bc0>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d104      	bne.n	8003d1e <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003d14:	4a72      	ldr	r2, [pc, #456]	; (8003ee0 <menu+0x2bc4>)
 8003d16:	2101      	movs	r1, #1
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7fc fd4d 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003d1e:	4b6f      	ldr	r3, [pc, #444]	; (8003edc <menu+0x2bc0>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d26:	4a6f      	ldr	r2, [pc, #444]	; (8003ee4 <menu+0x2bc8>)
 8003d28:	2101      	movs	r1, #1
 8003d2a:	2002      	movs	r0, #2
 8003d2c:	f7fc fd44 	bl	80007b8 <lcd_print>
 8003d30:	e008      	b.n	8003d44 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003d32:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <menu+0x2bc0>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d104      	bne.n	8003d44 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003d3a:	4a6b      	ldr	r2, [pc, #428]	; (8003ee8 <menu+0x2bcc>)
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	2002      	movs	r0, #2
 8003d40:	f7fc fd3a 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003d44:	4b69      	ldr	r3, [pc, #420]	; (8003eec <menu+0x2bd0>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	220a      	movs	r2, #10
 8003d4a:	4969      	ldr	r1, [pc, #420]	; (8003ef0 <menu+0x2bd4>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f008 faf3 	bl	800c338 <itoa>
		lcd_print(2,16,snum);
 8003d52:	4a67      	ldr	r2, [pc, #412]	; (8003ef0 <menu+0x2bd4>)
 8003d54:	2110      	movs	r1, #16
 8003d56:	2002      	movs	r0, #2
 8003d58:	f7fc fd2e 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	4865      	ldr	r0, [pc, #404]	; (8003ef4 <menu+0x2bd8>)
 8003d60:	f005 fabe 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d115      	bne.n	8003d96 <menu+0x2a7a>
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <menu+0x2bdc>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	f083 0301 	eor.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003d78:	4b5c      	ldr	r3, [pc, #368]	; (8003eec <menu+0x2bd0>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	4b5a      	ldr	r3, [pc, #360]	; (8003eec <menu+0x2bd0>)
 8003d82:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <menu+0x2bd0>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d902      	bls.n	8003d92 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003d8c:	4b57      	ldr	r3, [pc, #348]	; (8003eec <menu+0x2bd0>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d92:	f001 fccf 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d96:	2104      	movs	r1, #4
 8003d98:	4856      	ldr	r0, [pc, #344]	; (8003ef4 <menu+0x2bd8>)
 8003d9a:	f005 faa1 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d115      	bne.n	8003dd0 <menu+0x2ab4>
 8003da4:	4b54      	ldr	r3, [pc, #336]	; (8003ef8 <menu+0x2bdc>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	f083 0301 	eor.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003db2:	4b4e      	ldr	r3, [pc, #312]	; (8003eec <menu+0x2bd0>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b4c      	ldr	r3, [pc, #304]	; (8003eec <menu+0x2bd0>)
 8003dbc:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003dbe:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <menu+0x2bd0>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d902      	bls.n	8003dcc <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003dc6:	4b49      	ldr	r3, [pc, #292]	; (8003eec <menu+0x2bd0>)
 8003dc8:	2205      	movs	r2, #5
 8003dca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dcc:	f001 fcb2 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd0:	2108      	movs	r1, #8
 8003dd2:	4848      	ldr	r0, [pc, #288]	; (8003ef4 <menu+0x2bd8>)
 8003dd4:	f005 fa84 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10d      	bne.n	8003dfa <menu+0x2ade>
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <menu+0x2bdc>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	f083 0301 	eor.w	r3, r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d006      	beq.n	8003dfa <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003dec:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <menu+0x2bd0>)
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	4b42      	ldr	r3, [pc, #264]	; (8003efc <menu+0x2be0>)
 8003df2:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003df4:	4b42      	ldr	r3, [pc, #264]	; (8003f00 <menu+0x2be4>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003dfa:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <menu+0x2be8>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b1a      	cmp	r3, #26
 8003e00:	f040 80ec 	bne.w	8003fdc <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e04:	4b35      	ldr	r3, [pc, #212]	; (8003edc <menu+0x2bc0>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003e0c:	4a3e      	ldr	r2, [pc, #248]	; (8003f08 <menu+0x2bec>)
 8003e0e:	2101      	movs	r1, #1
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7fc fcd1 	bl	80007b8 <lcd_print>
 8003e16:	e008      	b.n	8003e2a <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003e18:	4b30      	ldr	r3, [pc, #192]	; (8003edc <menu+0x2bc0>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d104      	bne.n	8003e2a <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003e20:	4a3a      	ldr	r2, [pc, #232]	; (8003f0c <menu+0x2bf0>)
 8003e22:	2101      	movs	r1, #1
 8003e24:	2001      	movs	r0, #1
 8003e26:	f7fc fcc7 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003e2a:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <menu+0x2bf4>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b63      	cmp	r3, #99	; 0x63
 8003e30:	d91e      	bls.n	8003e70 <menu+0x2b54>
			if(dilSecim == 0) {
 8003e32:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <menu+0x2bc0>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <menu+0x2bc8>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	2002      	movs	r0, #2
 8003e40:	f7fc fcba 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <menu+0x2bc0>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d104      	bne.n	8003e56 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <menu+0x2bcc>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	2002      	movs	r0, #2
 8003e52:	f7fc fcb1 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <menu+0x2bf4>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	220a      	movs	r2, #10
 8003e5c:	4924      	ldr	r1, [pc, #144]	; (8003ef0 <menu+0x2bd4>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f008 fa6a 	bl	800c338 <itoa>
			lcd_print(2,14,snum);
 8003e64:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <menu+0x2bd4>)
 8003e66:	210e      	movs	r1, #14
 8003e68:	2002      	movs	r0, #2
 8003e6a:	f7fc fca5 	bl	80007b8 <lcd_print>
 8003e6e:	e066      	b.n	8003f3e <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <menu+0x2bf4>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b09      	cmp	r3, #9
 8003e76:	d923      	bls.n	8003ec0 <menu+0x2ba4>
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <menu+0x2bf4>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b63      	cmp	r3, #99	; 0x63
 8003e7e:	d81f      	bhi.n	8003ec0 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003e80:	4b16      	ldr	r3, [pc, #88]	; (8003edc <menu+0x2bc0>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e88:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <menu+0x2bc8>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	f7fc fc93 	bl	80007b8 <lcd_print>
 8003e92:	e008      	b.n	8003ea6 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <menu+0x2bc0>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d104      	bne.n	8003ea6 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003e9c:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <menu+0x2bcc>)
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	2002      	movs	r0, #2
 8003ea2:	f7fc fc89 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <menu+0x2bf4>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	220a      	movs	r2, #10
 8003eac:	4910      	ldr	r1, [pc, #64]	; (8003ef0 <menu+0x2bd4>)
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f008 fa42 	bl	800c338 <itoa>
			lcd_print(2, 15, snum);
 8003eb4:	4a0e      	ldr	r2, [pc, #56]	; (8003ef0 <menu+0x2bd4>)
 8003eb6:	210f      	movs	r1, #15
 8003eb8:	2002      	movs	r0, #2
 8003eba:	f7fc fc7d 	bl	80007b8 <lcd_print>
 8003ebe:	e03e      	b.n	8003f3e <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <menu+0x2bf4>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b09      	cmp	r3, #9
 8003ec6:	d83a      	bhi.n	8003f3e <menu+0x2c22>
			if(dilSecim == 0) {
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <menu+0x2bc0>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d121      	bne.n	8003f14 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <menu+0x2bc8>)
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	f7fc fc6f 	bl	80007b8 <lcd_print>
 8003eda:	e024      	b.n	8003f26 <menu+0x2c0a>
 8003edc:	20000309 	.word	0x20000309
 8003ee0:	0800d898 	.word	0x0800d898
 8003ee4:	0800d460 	.word	0x0800d460
 8003ee8:	0800d7d4 	.word	0x0800d7d4
 8003eec:	200002ff 	.word	0x200002ff
 8003ef0:	20000288 	.word	0x20000288
 8003ef4:	40010800 	.word	0x40010800
 8003ef8:	20000317 	.word	0x20000317
 8003efc:	20000218 	.word	0x20000218
 8003f00:	20000314 	.word	0x20000314
 8003f04:	200002e8 	.word	0x200002e8
 8003f08:	0800d8ac 	.word	0x0800d8ac
 8003f0c:	0800d8c0 	.word	0x0800d8c0
 8003f10:	20000300 	.word	0x20000300
			} else if(dilSecim == 1) {
 8003f14:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <menu+0x2e38>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d104      	bne.n	8003f26 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003f1c:	4a8e      	ldr	r2, [pc, #568]	; (8004158 <menu+0x2e3c>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	2002      	movs	r0, #2
 8003f22:	f7fc fc49 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f26:	4b8d      	ldr	r3, [pc, #564]	; (800415c <menu+0x2e40>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	220a      	movs	r2, #10
 8003f2c:	498c      	ldr	r1, [pc, #560]	; (8004160 <menu+0x2e44>)
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f008 fa02 	bl	800c338 <itoa>
			lcd_print(2, 16, snum);
 8003f34:	4a8a      	ldr	r2, [pc, #552]	; (8004160 <menu+0x2e44>)
 8003f36:	2110      	movs	r1, #16
 8003f38:	2002      	movs	r0, #2
 8003f3a:	f7fc fc3d 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4888      	ldr	r0, [pc, #544]	; (8004164 <menu+0x2e48>)
 8003f42:	f005 f9cd 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d115      	bne.n	8003f78 <menu+0x2c5c>
 8003f4c:	4b86      	ldr	r3, [pc, #536]	; (8004168 <menu+0x2e4c>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f083 0301 	eor.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003f5a:	4b80      	ldr	r3, [pc, #512]	; (800415c <menu+0x2e40>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4b7e      	ldr	r3, [pc, #504]	; (800415c <menu+0x2e40>)
 8003f64:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003f66:	4b7d      	ldr	r3, [pc, #500]	; (800415c <menu+0x2e40>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2bb4      	cmp	r3, #180	; 0xb4
 8003f6c:	d902      	bls.n	8003f74 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003f6e:	4b7b      	ldr	r3, [pc, #492]	; (800415c <menu+0x2e40>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f74:	f001 fbde 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f78:	2104      	movs	r1, #4
 8003f7a:	487a      	ldr	r0, [pc, #488]	; (8004164 <menu+0x2e48>)
 8003f7c:	f005 f9b0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d115      	bne.n	8003fb2 <menu+0x2c96>
 8003f86:	4b78      	ldr	r3, [pc, #480]	; (8004168 <menu+0x2e4c>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	f083 0301 	eor.w	r3, r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f94:	4b71      	ldr	r3, [pc, #452]	; (800415c <menu+0x2e40>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	4b6f      	ldr	r3, [pc, #444]	; (800415c <menu+0x2e40>)
 8003f9e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003fa0:	4b6e      	ldr	r3, [pc, #440]	; (800415c <menu+0x2e40>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2bb5      	cmp	r3, #181	; 0xb5
 8003fa6:	d902      	bls.n	8003fae <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003fa8:	4b6c      	ldr	r3, [pc, #432]	; (800415c <menu+0x2e40>)
 8003faa:	22b4      	movs	r2, #180	; 0xb4
 8003fac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fae:	f001 fbc1 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fb2:	2108      	movs	r1, #8
 8003fb4:	486b      	ldr	r0, [pc, #428]	; (8004164 <menu+0x2e48>)
 8003fb6:	f005 f993 	bl	80092e0 <HAL_GPIO_ReadPin>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10d      	bne.n	8003fdc <menu+0x2cc0>
 8003fc0:	4b69      	ldr	r3, [pc, #420]	; (8004168 <menu+0x2e4c>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003fce:	4b63      	ldr	r3, [pc, #396]	; (800415c <menu+0x2e40>)
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	4b66      	ldr	r3, [pc, #408]	; (800416c <menu+0x2e50>)
 8003fd4:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003fd6:	4b66      	ldr	r3, [pc, #408]	; (8004170 <menu+0x2e54>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003fdc:	4b65      	ldr	r3, [pc, #404]	; (8004174 <menu+0x2e58>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b1b      	cmp	r3, #27
 8003fe2:	f040 8083 	bne.w	80040ec <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003fe6:	4a64      	ldr	r2, [pc, #400]	; (8004178 <menu+0x2e5c>)
 8003fe8:	2101      	movs	r1, #1
 8003fea:	2001      	movs	r0, #1
 8003fec:	f7fc fbe4 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 8003ff0:	4b62      	ldr	r3, [pc, #392]	; (800417c <menu+0x2e60>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d113      	bne.n	8004020 <menu+0x2d04>
			if(dilSecim == 0) {
 8003ff8:	4b56      	ldr	r3, [pc, #344]	; (8004154 <menu+0x2e38>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004000:	4a5f      	ldr	r2, [pc, #380]	; (8004180 <menu+0x2e64>)
 8004002:	2101      	movs	r1, #1
 8004004:	2002      	movs	r0, #2
 8004006:	f7fc fbd7 	bl	80007b8 <lcd_print>
 800400a:	e020      	b.n	800404e <menu+0x2d32>
			} else if(dilSecim == 1) {
 800400c:	4b51      	ldr	r3, [pc, #324]	; (8004154 <menu+0x2e38>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d11c      	bne.n	800404e <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004014:	4a5b      	ldr	r2, [pc, #364]	; (8004184 <menu+0x2e68>)
 8004016:	2101      	movs	r1, #1
 8004018:	2002      	movs	r0, #2
 800401a:	f7fc fbcd 	bl	80007b8 <lcd_print>
 800401e:	e016      	b.n	800404e <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004020:	4b56      	ldr	r3, [pc, #344]	; (800417c <menu+0x2e60>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d112      	bne.n	800404e <menu+0x2d32>
			if(dilSecim == 0) {
 8004028:	4b4a      	ldr	r3, [pc, #296]	; (8004154 <menu+0x2e38>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004030:	4a55      	ldr	r2, [pc, #340]	; (8004188 <menu+0x2e6c>)
 8004032:	2101      	movs	r1, #1
 8004034:	2002      	movs	r0, #2
 8004036:	f7fc fbbf 	bl	80007b8 <lcd_print>
 800403a:	e008      	b.n	800404e <menu+0x2d32>
			} else if(dilSecim == 1) {
 800403c:	4b45      	ldr	r3, [pc, #276]	; (8004154 <menu+0x2e38>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d104      	bne.n	800404e <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004044:	4a51      	ldr	r2, [pc, #324]	; (800418c <menu+0x2e70>)
 8004046:	2101      	movs	r1, #1
 8004048:	2002      	movs	r0, #2
 800404a:	f7fc fbb5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800404e:	2102      	movs	r1, #2
 8004050:	4844      	ldr	r0, [pc, #272]	; (8004164 <menu+0x2e48>)
 8004052:	f005 f945 	bl	80092e0 <HAL_GPIO_ReadPin>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d115      	bne.n	8004088 <menu+0x2d6c>
 800405c:	4b42      	ldr	r3, [pc, #264]	; (8004168 <menu+0x2e4c>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	f083 0301 	eor.w	r3, r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00e      	beq.n	8004088 <menu+0x2d6c>
			buzzer = buzzer + 1;
 800406a:	4b44      	ldr	r3, [pc, #272]	; (800417c <menu+0x2e60>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	3301      	adds	r3, #1
 8004070:	b2da      	uxtb	r2, r3
 8004072:	4b42      	ldr	r3, [pc, #264]	; (800417c <menu+0x2e60>)
 8004074:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <menu+0x2e60>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d902      	bls.n	8004084 <menu+0x2d68>
				buzzer = 0;
 800407e:	4b3f      	ldr	r3, [pc, #252]	; (800417c <menu+0x2e60>)
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004084:	f001 fb56 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004088:	2104      	movs	r1, #4
 800408a:	4836      	ldr	r0, [pc, #216]	; (8004164 <menu+0x2e48>)
 800408c:	f005 f928 	bl	80092e0 <HAL_GPIO_ReadPin>
 8004090:	4603      	mov	r3, r0
 8004092:	2b01      	cmp	r3, #1
 8004094:	d115      	bne.n	80040c2 <menu+0x2da6>
 8004096:	4b34      	ldr	r3, [pc, #208]	; (8004168 <menu+0x2e4c>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	f083 0301 	eor.w	r3, r3, #1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <menu+0x2da6>
			buzzer = buzzer - 1;
 80040a4:	4b35      	ldr	r3, [pc, #212]	; (800417c <menu+0x2e60>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4b33      	ldr	r3, [pc, #204]	; (800417c <menu+0x2e60>)
 80040ae:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80040b0:	4b32      	ldr	r3, [pc, #200]	; (800417c <menu+0x2e60>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <menu+0x2da2>
		   		buzzer = 1;
 80040b8:	4b30      	ldr	r3, [pc, #192]	; (800417c <menu+0x2e60>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040be:	f001 fb39 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040c2:	2108      	movs	r1, #8
 80040c4:	4827      	ldr	r0, [pc, #156]	; (8004164 <menu+0x2e48>)
 80040c6:	f005 f90b 	bl	80092e0 <HAL_GPIO_ReadPin>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10d      	bne.n	80040ec <menu+0x2dd0>
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <menu+0x2e4c>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	f083 0301 	eor.w	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <menu+0x2dd0>
			eepromData[25] = buzzer;
 80040de:	4b27      	ldr	r3, [pc, #156]	; (800417c <menu+0x2e60>)
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <menu+0x2e50>)
 80040e4:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <menu+0x2e54>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <menu+0x2e58>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b1c      	cmp	r3, #28
 80040f2:	f040 80ab 	bne.w	800424c <menu+0x2f30>
		calismaSayModu = 0;
 80040f6:	4b26      	ldr	r3, [pc, #152]	; (8004190 <menu+0x2e74>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80040fc:	4a25      	ldr	r2, [pc, #148]	; (8004194 <menu+0x2e78>)
 80040fe:	2101      	movs	r1, #1
 8004100:	2001      	movs	r0, #1
 8004102:	f7fc fb59 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <menu+0x2e7c>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d113      	bne.n	8004136 <menu+0x2e1a>
			if(dilSecim == 0) {
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <menu+0x2e38>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004116:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <menu+0x2e64>)
 8004118:	2101      	movs	r1, #1
 800411a:	2002      	movs	r0, #2
 800411c:	f7fc fb4c 	bl	80007b8 <lcd_print>
 8004120:	e045      	b.n	80041ae <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <menu+0x2e38>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d141      	bne.n	80041ae <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <menu+0x2e68>)
 800412c:	2101      	movs	r1, #1
 800412e:	2002      	movs	r0, #2
 8004130:	f7fc fb42 	bl	80007b8 <lcd_print>
 8004134:	e03b      	b.n	80041ae <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <menu+0x2e7c>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d137      	bne.n	80041ae <menu+0x2e92>
			if(dilSecim == 0){
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <menu+0x2e38>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d12a      	bne.n	800419c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8004146:	4a10      	ldr	r2, [pc, #64]	; (8004188 <menu+0x2e6c>)
 8004148:	2101      	movs	r1, #1
 800414a:	2002      	movs	r0, #2
 800414c:	f7fc fb34 	bl	80007b8 <lcd_print>
 8004150:	e02d      	b.n	80041ae <menu+0x2e92>
 8004152:	bf00      	nop
 8004154:	20000309 	.word	0x20000309
 8004158:	0800d7d4 	.word	0x0800d7d4
 800415c:	20000300 	.word	0x20000300
 8004160:	20000288 	.word	0x20000288
 8004164:	40010800 	.word	0x40010800
 8004168:	20000317 	.word	0x20000317
 800416c:	20000218 	.word	0x20000218
 8004170:	20000314 	.word	0x20000314
 8004174:	200002e8 	.word	0x200002e8
 8004178:	0800d8d4 	.word	0x0800d8d4
 800417c:	20000304 	.word	0x20000304
 8004180:	0800d1fc 	.word	0x0800d1fc
 8004184:	0800d210 	.word	0x0800d210
 8004188:	0800d25c 	.word	0x0800d25c
 800418c:	0800d270 	.word	0x0800d270
 8004190:	20000308 	.word	0x20000308
 8004194:	0800d8e8 	.word	0x0800d8e8
 8004198:	20000306 	.word	0x20000306
			} else if(dilSecim == 1) {
 800419c:	4b71      	ldr	r3, [pc, #452]	; (8004364 <menu+0x3048>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d104      	bne.n	80041ae <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80041a4:	4a70      	ldr	r2, [pc, #448]	; (8004368 <menu+0x304c>)
 80041a6:	2101      	movs	r1, #1
 80041a8:	2002      	movs	r0, #2
 80041aa:	f7fc fb05 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041ae:	2102      	movs	r1, #2
 80041b0:	486e      	ldr	r0, [pc, #440]	; (800436c <menu+0x3050>)
 80041b2:	f005 f895 	bl	80092e0 <HAL_GPIO_ReadPin>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d115      	bne.n	80041e8 <menu+0x2ecc>
 80041bc:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <menu+0x3054>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	f083 0301 	eor.w	r3, r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00e      	beq.n	80041e8 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80041ca:	4b6a      	ldr	r3, [pc, #424]	; (8004374 <menu+0x3058>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4b68      	ldr	r3, [pc, #416]	; (8004374 <menu+0x3058>)
 80041d4:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80041d6:	4b67      	ldr	r3, [pc, #412]	; (8004374 <menu+0x3058>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d902      	bls.n	80041e4 <menu+0x2ec8>
				demoMode = 0;
 80041de:	4b65      	ldr	r3, [pc, #404]	; (8004374 <menu+0x3058>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041e4:	f001 faa6 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041e8:	2104      	movs	r1, #4
 80041ea:	4860      	ldr	r0, [pc, #384]	; (800436c <menu+0x3050>)
 80041ec:	f005 f878 	bl	80092e0 <HAL_GPIO_ReadPin>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d115      	bne.n	8004222 <menu+0x2f06>
 80041f6:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <menu+0x3054>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	f083 0301 	eor.w	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004204:	4b5b      	ldr	r3, [pc, #364]	; (8004374 <menu+0x3058>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	3b01      	subs	r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <menu+0x3058>)
 800420e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004210:	4b58      	ldr	r3, [pc, #352]	; (8004374 <menu+0x3058>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <menu+0x2f02>
		   		demoMode = 1;
 8004218:	4b56      	ldr	r3, [pc, #344]	; (8004374 <menu+0x3058>)
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800421e:	f001 fa89 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004222:	2108      	movs	r1, #8
 8004224:	4851      	ldr	r0, [pc, #324]	; (800436c <menu+0x3050>)
 8004226:	f005 f85b 	bl	80092e0 <HAL_GPIO_ReadPin>
 800422a:	4603      	mov	r3, r0
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10d      	bne.n	800424c <menu+0x2f30>
 8004230:	4b4f      	ldr	r3, [pc, #316]	; (8004370 <menu+0x3054>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d006      	beq.n	800424c <menu+0x2f30>
			eepromData[26] = demoMode;
 800423e:	4b4d      	ldr	r3, [pc, #308]	; (8004374 <menu+0x3058>)
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <menu+0x305c>)
 8004244:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004246:	4b4d      	ldr	r3, [pc, #308]	; (800437c <menu+0x3060>)
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800424c:	4b4c      	ldr	r3, [pc, #304]	; (8004380 <menu+0x3064>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b1d      	cmp	r3, #29
 8004252:	f040 8132 	bne.w	80044ba <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004256:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <menu+0x3068>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d113      	bne.n	8004286 <menu+0x2f6a>
 800425e:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <menu+0x306c>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10f      	bne.n	8004286 <menu+0x2f6a>
 8004266:	4b49      	ldr	r3, [pc, #292]	; (800438c <menu+0x3070>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <menu+0x2f6a>
 800426e:	4b48      	ldr	r3, [pc, #288]	; (8004390 <menu+0x3074>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <menu+0x2f6a>
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <menu+0x3078>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800427e:	4b46      	ldr	r3, [pc, #280]	; (8004398 <menu+0x307c>)
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
 8004284:	e002      	b.n	800428c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004286:	4b44      	ldr	r3, [pc, #272]	; (8004398 <menu+0x307c>)
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800428c:	4b43      	ldr	r3, [pc, #268]	; (800439c <menu+0x3080>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d154      	bne.n	800433e <menu+0x3022>
			if(dilSecim == 0) {
 8004294:	4b33      	ldr	r3, [pc, #204]	; (8004364 <menu+0x3048>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800429c:	4a40      	ldr	r2, [pc, #256]	; (80043a0 <menu+0x3084>)
 800429e:	2101      	movs	r1, #1
 80042a0:	2001      	movs	r0, #1
 80042a2:	f7fc fa89 	bl	80007b8 <lcd_print>
 80042a6:	e008      	b.n	80042ba <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80042a8:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <menu+0x3048>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d104      	bne.n	80042ba <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80042b0:	4a3c      	ldr	r2, [pc, #240]	; (80043a4 <menu+0x3088>)
 80042b2:	2101      	movs	r1, #1
 80042b4:	2001      	movs	r0, #1
 80042b6:	f7fc fa7f 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80042ba:	4b36      	ldr	r3, [pc, #216]	; (8004394 <menu+0x3078>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	220a      	movs	r2, #10
 80042c0:	4939      	ldr	r1, [pc, #228]	; (80043a8 <menu+0x308c>)
 80042c2:	4618      	mov	r0, r3
 80042c4:	f008 f838 	bl	800c338 <itoa>
			lcd_print(2, 12, snum);
 80042c8:	4a37      	ldr	r2, [pc, #220]	; (80043a8 <menu+0x308c>)
 80042ca:	210c      	movs	r1, #12
 80042cc:	2002      	movs	r0, #2
 80042ce:	f7fc fa73 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80042d2:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <menu+0x3074>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	220a      	movs	r2, #10
 80042d8:	4933      	ldr	r1, [pc, #204]	; (80043a8 <menu+0x308c>)
 80042da:	4618      	mov	r0, r3
 80042dc:	f008 f82c 	bl	800c338 <itoa>
			lcd_print(2, 13, snum);
 80042e0:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <menu+0x308c>)
 80042e2:	210d      	movs	r1, #13
 80042e4:	2002      	movs	r0, #2
 80042e6:	f7fc fa67 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80042ea:	4b28      	ldr	r3, [pc, #160]	; (800438c <menu+0x3070>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	220a      	movs	r2, #10
 80042f0:	492d      	ldr	r1, [pc, #180]	; (80043a8 <menu+0x308c>)
 80042f2:	4618      	mov	r0, r3
 80042f4:	f008 f820 	bl	800c338 <itoa>
			lcd_print(2, 14, snum);
 80042f8:	4a2b      	ldr	r2, [pc, #172]	; (80043a8 <menu+0x308c>)
 80042fa:	210e      	movs	r1, #14
 80042fc:	2002      	movs	r0, #2
 80042fe:	f7fc fa5b 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004302:	4b21      	ldr	r3, [pc, #132]	; (8004388 <menu+0x306c>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	220a      	movs	r2, #10
 8004308:	4927      	ldr	r1, [pc, #156]	; (80043a8 <menu+0x308c>)
 800430a:	4618      	mov	r0, r3
 800430c:	f008 f814 	bl	800c338 <itoa>
			lcd_print(2, 15, snum);
 8004310:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <menu+0x308c>)
 8004312:	210f      	movs	r1, #15
 8004314:	2002      	movs	r0, #2
 8004316:	f7fc fa4f 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <menu+0x3068>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	220a      	movs	r2, #10
 8004320:	4921      	ldr	r1, [pc, #132]	; (80043a8 <menu+0x308c>)
 8004322:	4618      	mov	r0, r3
 8004324:	f008 f808 	bl	800c338 <itoa>
			lcd_print(2, 16, snum);
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <menu+0x308c>)
 800432a:	2110      	movs	r1, #16
 800432c:	2002      	movs	r0, #2
 800432e:	f7fc fa43 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 8004332:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <menu+0x3090>)
 8004334:	2101      	movs	r1, #1
 8004336:	2002      	movs	r0, #2
 8004338:	f7fc fa3e 	bl	80007b8 <lcd_print>
 800433c:	e048      	b.n	80043d0 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <menu+0x3080>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d144      	bne.n	80043d0 <menu+0x30b4>
			if(dilSecim == 0) {
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <menu+0x3048>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d132      	bne.n	80043b4 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800434e:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <menu+0x3084>)
 8004350:	2101      	movs	r1, #1
 8004352:	2001      	movs	r0, #1
 8004354:	f7fc fa30 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004358:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <menu+0x3094>)
 800435a:	2101      	movs	r1, #1
 800435c:	2002      	movs	r0, #2
 800435e:	f7fc fa2b 	bl	80007b8 <lcd_print>
 8004362:	e035      	b.n	80043d0 <menu+0x30b4>
 8004364:	20000309 	.word	0x20000309
 8004368:	0800d270 	.word	0x0800d270
 800436c:	40010800 	.word	0x40010800
 8004370:	20000317 	.word	0x20000317
 8004374:	20000306 	.word	0x20000306
 8004378:	20000218 	.word	0x20000218
 800437c:	20000314 	.word	0x20000314
 8004380:	200002e8 	.word	0x200002e8
 8004384:	200002e5 	.word	0x200002e5
 8004388:	200002e6 	.word	0x200002e6
 800438c:	200000a1 	.word	0x200000a1
 8004390:	200000a2 	.word	0x200000a2
 8004394:	200002e7 	.word	0x200002e7
 8004398:	20000329 	.word	0x20000329
 800439c:	20000308 	.word	0x20000308
 80043a0:	0800d8f8 	.word	0x0800d8f8
 80043a4:	0800d90c 	.word	0x0800d90c
 80043a8:	20000288 	.word	0x20000288
 80043ac:	0800d920 	.word	0x0800d920
 80043b0:	0800d92c 	.word	0x0800d92c
			} else if(dilSecim == 1) {
 80043b4:	4b94      	ldr	r3, [pc, #592]	; (8004608 <menu+0x32ec>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d109      	bne.n	80043d0 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80043bc:	4a93      	ldr	r2, [pc, #588]	; (800460c <menu+0x32f0>)
 80043be:	2101      	movs	r1, #1
 80043c0:	2001      	movs	r0, #1
 80043c2:	f7fc f9f9 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80043c6:	4a92      	ldr	r2, [pc, #584]	; (8004610 <menu+0x32f4>)
 80043c8:	2101      	movs	r1, #1
 80043ca:	2002      	movs	r0, #2
 80043cc:	f7fc f9f4 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80043d0:	2102      	movs	r1, #2
 80043d2:	4890      	ldr	r0, [pc, #576]	; (8004614 <menu+0x32f8>)
 80043d4:	f004 ff84 	bl	80092e0 <HAL_GPIO_ReadPin>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d119      	bne.n	8004412 <menu+0x30f6>
 80043de:	4b8e      	ldr	r3, [pc, #568]	; (8004618 <menu+0x32fc>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	f083 0301 	eor.w	r3, r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d012      	beq.n	8004412 <menu+0x30f6>
 80043ec:	4b8b      	ldr	r3, [pc, #556]	; (800461c <menu+0x3300>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00e      	beq.n	8004412 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80043f4:	4b8a      	ldr	r3, [pc, #552]	; (8004620 <menu+0x3304>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	4b88      	ldr	r3, [pc, #544]	; (8004620 <menu+0x3304>)
 80043fe:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004400:	4b87      	ldr	r3, [pc, #540]	; (8004620 <menu+0x3304>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d902      	bls.n	800440e <menu+0x30f2>
				calismaSayModu = 0;
 8004408:	4b85      	ldr	r3, [pc, #532]	; (8004620 <menu+0x3304>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800440e:	f001 f991 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004412:	2104      	movs	r1, #4
 8004414:	487f      	ldr	r0, [pc, #508]	; (8004614 <menu+0x32f8>)
 8004416:	f004 ff63 	bl	80092e0 <HAL_GPIO_ReadPin>
 800441a:	4603      	mov	r3, r0
 800441c:	2b01      	cmp	r3, #1
 800441e:	d119      	bne.n	8004454 <menu+0x3138>
 8004420:	4b7d      	ldr	r3, [pc, #500]	; (8004618 <menu+0x32fc>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	f083 0301 	eor.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d012      	beq.n	8004454 <menu+0x3138>
 800442e:	4b7b      	ldr	r3, [pc, #492]	; (800461c <menu+0x3300>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00e      	beq.n	8004454 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004436:	4b7a      	ldr	r3, [pc, #488]	; (8004620 <menu+0x3304>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	3b01      	subs	r3, #1
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4b78      	ldr	r3, [pc, #480]	; (8004620 <menu+0x3304>)
 8004440:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004442:	4b77      	ldr	r3, [pc, #476]	; (8004620 <menu+0x3304>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <menu+0x3134>
		   		calismaSayModu = 1;
 800444a:	4b75      	ldr	r3, [pc, #468]	; (8004620 <menu+0x3304>)
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004450:	f001 f970 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004454:	2108      	movs	r1, #8
 8004456:	486f      	ldr	r0, [pc, #444]	; (8004614 <menu+0x32f8>)
 8004458:	f004 ff42 	bl	80092e0 <HAL_GPIO_ReadPin>
 800445c:	4603      	mov	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d12b      	bne.n	80044ba <menu+0x319e>
 8004462:	4b6d      	ldr	r3, [pc, #436]	; (8004618 <menu+0x32fc>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	f083 0301 	eor.w	r3, r3, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d024      	beq.n	80044ba <menu+0x319e>
			eepromData[32] = 0;
 8004470:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <menu+0x3308>)
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004478:	4b6a      	ldr	r3, [pc, #424]	; (8004624 <menu+0x3308>)
 800447a:	2200      	movs	r2, #0
 800447c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800447e:	4b69      	ldr	r3, [pc, #420]	; (8004624 <menu+0x3308>)
 8004480:	2200      	movs	r2, #0
 8004482:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004484:	4b67      	ldr	r3, [pc, #412]	; (8004624 <menu+0x3308>)
 8004486:	2200      	movs	r2, #0
 8004488:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800448a:	4b66      	ldr	r3, [pc, #408]	; (8004624 <menu+0x3308>)
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004490:	4b65      	ldr	r3, [pc, #404]	; (8004628 <menu+0x330c>)
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004496:	4b65      	ldr	r3, [pc, #404]	; (800462c <menu+0x3310>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800449c:	4b64      	ldr	r3, [pc, #400]	; (8004630 <menu+0x3314>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80044a2:	4b64      	ldr	r3, [pc, #400]	; (8004634 <menu+0x3318>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80044a8:	4b63      	ldr	r3, [pc, #396]	; (8004638 <menu+0x331c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80044ae:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <menu+0x3304>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80044b4:	4b61      	ldr	r3, [pc, #388]	; (800463c <menu+0x3320>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80044ba:	4b61      	ldr	r3, [pc, #388]	; (8004640 <menu+0x3324>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b1e      	cmp	r3, #30
 80044c0:	d16f      	bne.n	80045a2 <menu+0x3286>
		calismaSayModu = 0;
 80044c2:	4b57      	ldr	r3, [pc, #348]	; (8004620 <menu+0x3304>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044c8:	4b4f      	ldr	r3, [pc, #316]	; (8004608 <menu+0x32ec>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80044d0:	4a5c      	ldr	r2, [pc, #368]	; (8004644 <menu+0x3328>)
 80044d2:	2101      	movs	r1, #1
 80044d4:	2001      	movs	r0, #1
 80044d6:	f7fc f96f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80044da:	4a5b      	ldr	r2, [pc, #364]	; (8004648 <menu+0x332c>)
 80044dc:	2101      	movs	r1, #1
 80044de:	2002      	movs	r0, #2
 80044e0:	f7fc f96a 	bl	80007b8 <lcd_print>
 80044e4:	e00d      	b.n	8004502 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80044e6:	4b48      	ldr	r3, [pc, #288]	; (8004608 <menu+0x32ec>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d109      	bne.n	8004502 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80044ee:	4a57      	ldr	r2, [pc, #348]	; (800464c <menu+0x3330>)
 80044f0:	2101      	movs	r1, #1
 80044f2:	2001      	movs	r0, #1
 80044f4:	f7fc f960 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80044f8:	4a55      	ldr	r2, [pc, #340]	; (8004650 <menu+0x3334>)
 80044fa:	2101      	movs	r1, #1
 80044fc:	2002      	movs	r0, #2
 80044fe:	f7fc f95b 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004502:	2102      	movs	r1, #2
 8004504:	4843      	ldr	r0, [pc, #268]	; (8004614 <menu+0x32f8>)
 8004506:	f004 feeb 	bl	80092e0 <HAL_GPIO_ReadPin>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d115      	bne.n	800453c <menu+0x3220>
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <menu+0x32fc>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f083 0301 	eor.w	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00e      	beq.n	800453c <menu+0x3220>
			dilSecim = dilSecim + 1;
 800451e:	4b3a      	ldr	r3, [pc, #232]	; (8004608 <menu+0x32ec>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4b38      	ldr	r3, [pc, #224]	; (8004608 <menu+0x32ec>)
 8004528:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <menu+0x32ec>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d902      	bls.n	8004538 <menu+0x321c>
				dilSecim = 0;
 8004532:	4b35      	ldr	r3, [pc, #212]	; (8004608 <menu+0x32ec>)
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004538:	f001 f8fc 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800453c:	2104      	movs	r1, #4
 800453e:	4835      	ldr	r0, [pc, #212]	; (8004614 <menu+0x32f8>)
 8004540:	f004 fece 	bl	80092e0 <HAL_GPIO_ReadPin>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d115      	bne.n	8004576 <menu+0x325a>
 800454a:	4b33      	ldr	r3, [pc, #204]	; (8004618 <menu+0x32fc>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	f083 0301 	eor.w	r3, r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004558:	4b2b      	ldr	r3, [pc, #172]	; (8004608 <menu+0x32ec>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	3b01      	subs	r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	4b29      	ldr	r3, [pc, #164]	; (8004608 <menu+0x32ec>)
 8004562:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004564:	4b28      	ldr	r3, [pc, #160]	; (8004608 <menu+0x32ec>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <menu+0x3256>
		   		dilSecim = 1;
 800456c:	4b26      	ldr	r3, [pc, #152]	; (8004608 <menu+0x32ec>)
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004572:	f001 f8df 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004576:	2108      	movs	r1, #8
 8004578:	4826      	ldr	r0, [pc, #152]	; (8004614 <menu+0x32f8>)
 800457a:	f004 feb1 	bl	80092e0 <HAL_GPIO_ReadPin>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10e      	bne.n	80045a2 <menu+0x3286>
 8004584:	4b24      	ldr	r3, [pc, #144]	; (8004618 <menu+0x32fc>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f083 0301 	eor.w	r3, r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <menu+0x32ec>)
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <menu+0x3308>)
 8004598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800459c:	4b27      	ldr	r3, [pc, #156]	; (800463c <menu+0x3320>)
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80045a2:	4b27      	ldr	r3, [pc, #156]	; (8004640 <menu+0x3324>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b1f      	cmp	r3, #31
 80045a8:	f040 80b7 	bne.w	800471a <menu+0x33fe>
		calismaSayModu = 0;
 80045ac:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <menu+0x3304>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80045b2:	4a28      	ldr	r2, [pc, #160]	; (8004654 <menu+0x3338>)
 80045b4:	2101      	movs	r1, #1
 80045b6:	2001      	movs	r0, #1
 80045b8:	f7fc f8fe 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 80045bc:	4b26      	ldr	r3, [pc, #152]	; (8004658 <menu+0x333c>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d113      	bne.n	80045ec <menu+0x32d0>
			if(dilSecim == 0) {
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <menu+0x32ec>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80045cc:	4a23      	ldr	r2, [pc, #140]	; (800465c <menu+0x3340>)
 80045ce:	2101      	movs	r1, #1
 80045d0:	2002      	movs	r0, #2
 80045d2:	f7fc f8f1 	bl	80007b8 <lcd_print>
 80045d6:	e050      	b.n	800467a <menu+0x335e>
			} else if(dilSecim == 1) {
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <menu+0x32ec>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d14c      	bne.n	800467a <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <menu+0x3344>)
 80045e2:	2101      	movs	r1, #1
 80045e4:	2002      	movs	r0, #2
 80045e6:	f7fc f8e7 	bl	80007b8 <lcd_print>
 80045ea:	e046      	b.n	800467a <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80045ec:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <menu+0x333c>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d142      	bne.n	800467a <menu+0x335e>
			if(dilSecim == 0){
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <menu+0x32ec>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d135      	bne.n	8004668 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <menu+0x3348>)
 80045fe:	2101      	movs	r1, #1
 8004600:	2002      	movs	r0, #2
 8004602:	f7fc f8d9 	bl	80007b8 <lcd_print>
 8004606:	e038      	b.n	800467a <menu+0x335e>
 8004608:	20000309 	.word	0x20000309
 800460c:	0800d90c 	.word	0x0800d90c
 8004610:	0800d940 	.word	0x0800d940
 8004614:	40010800 	.word	0x40010800
 8004618:	20000317 	.word	0x20000317
 800461c:	20000329 	.word	0x20000329
 8004620:	20000308 	.word	0x20000308
 8004624:	20000218 	.word	0x20000218
 8004628:	200002e7 	.word	0x200002e7
 800462c:	200000a2 	.word	0x200000a2
 8004630:	200000a1 	.word	0x200000a1
 8004634:	200002e6 	.word	0x200002e6
 8004638:	200002e5 	.word	0x200002e5
 800463c:	20000314 	.word	0x20000314
 8004640:	200002e8 	.word	0x200002e8
 8004644:	0800d954 	.word	0x0800d954
 8004648:	0800d968 	.word	0x0800d968
 800464c:	0800d97c 	.word	0x0800d97c
 8004650:	0800d990 	.word	0x0800d990
 8004654:	0800d9a4 	.word	0x0800d9a4
 8004658:	20000307 	.word	0x20000307
 800465c:	0800d1fc 	.word	0x0800d1fc
 8004660:	0800d210 	.word	0x0800d210
 8004664:	0800d25c 	.word	0x0800d25c
			} else if(dilSecim == 1) {
 8004668:	4bac      	ldr	r3, [pc, #688]	; (800491c <menu+0x3600>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d104      	bne.n	800467a <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004670:	4aab      	ldr	r2, [pc, #684]	; (8004920 <menu+0x3604>)
 8004672:	2101      	movs	r1, #1
 8004674:	2002      	movs	r0, #2
 8004676:	f7fc f89f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800467a:	2102      	movs	r1, #2
 800467c:	48a9      	ldr	r0, [pc, #676]	; (8004924 <menu+0x3608>)
 800467e:	f004 fe2f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8004682:	4603      	mov	r3, r0
 8004684:	2b01      	cmp	r3, #1
 8004686:	d115      	bne.n	80046b4 <menu+0x3398>
 8004688:	4ba7      	ldr	r3, [pc, #668]	; (8004928 <menu+0x360c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f083 0301 	eor.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00e      	beq.n	80046b4 <menu+0x3398>
			iotMode = iotMode + 1;
 8004696:	4ba5      	ldr	r3, [pc, #660]	; (800492c <menu+0x3610>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	3301      	adds	r3, #1
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4ba3      	ldr	r3, [pc, #652]	; (800492c <menu+0x3610>)
 80046a0:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80046a2:	4ba2      	ldr	r3, [pc, #648]	; (800492c <menu+0x3610>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d902      	bls.n	80046b0 <menu+0x3394>
				iotMode = 0;
 80046aa:	4ba0      	ldr	r3, [pc, #640]	; (800492c <menu+0x3610>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046b0:	f001 f840 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046b4:	2104      	movs	r1, #4
 80046b6:	489b      	ldr	r0, [pc, #620]	; (8004924 <menu+0x3608>)
 80046b8:	f004 fe12 	bl	80092e0 <HAL_GPIO_ReadPin>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d115      	bne.n	80046ee <menu+0x33d2>
 80046c2:	4b99      	ldr	r3, [pc, #612]	; (8004928 <menu+0x360c>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	f083 0301 	eor.w	r3, r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <menu+0x33d2>
			iotMode = iotMode - 1;
 80046d0:	4b96      	ldr	r3, [pc, #600]	; (800492c <menu+0x3610>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	4b94      	ldr	r3, [pc, #592]	; (800492c <menu+0x3610>)
 80046da:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80046dc:	4b93      	ldr	r3, [pc, #588]	; (800492c <menu+0x3610>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <menu+0x33ce>
		   		iotMode = 1;
 80046e4:	4b91      	ldr	r3, [pc, #580]	; (800492c <menu+0x3610>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046ea:	f001 f823 	bl	8005734 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ee:	2108      	movs	r1, #8
 80046f0:	488c      	ldr	r0, [pc, #560]	; (8004924 <menu+0x3608>)
 80046f2:	f004 fdf5 	bl	80092e0 <HAL_GPIO_ReadPin>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d10e      	bne.n	800471a <menu+0x33fe>
 80046fc:	4b8a      	ldr	r3, [pc, #552]	; (8004928 <menu+0x360c>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f083 0301 	eor.w	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <menu+0x33fe>
			eepromData[48] = iotMode;
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <menu+0x3610>)
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	4b88      	ldr	r3, [pc, #544]	; (8004930 <menu+0x3614>)
 8004710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004714:	4b87      	ldr	r3, [pc, #540]	; (8004934 <menu+0x3618>)
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800471a:	4b87      	ldr	r3, [pc, #540]	; (8004938 <menu+0x361c>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b20      	cmp	r3, #32
 8004720:	d138      	bne.n	8004794 <menu+0x3478>
		calismaSayModu = 0;
 8004722:	4b86      	ldr	r3, [pc, #536]	; (800493c <menu+0x3620>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004728:	4a85      	ldr	r2, [pc, #532]	; (8004940 <menu+0x3624>)
 800472a:	2101      	movs	r1, #1
 800472c:	2001      	movs	r0, #1
 800472e:	f7fc f843 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 8004732:	4a84      	ldr	r2, [pc, #528]	; (8004944 <menu+0x3628>)
 8004734:	2101      	movs	r1, #1
 8004736:	2002      	movs	r0, #2
 8004738:	f7fc f83e 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "    ");
 800473c:	4a82      	ldr	r2, [pc, #520]	; (8004948 <menu+0x362c>)
 800473e:	210d      	movs	r1, #13
 8004740:	2002      	movs	r0, #2
 8004742:	f7fc f839 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004746:	2102      	movs	r1, #2
 8004748:	4876      	ldr	r0, [pc, #472]	; (8004924 <menu+0x3608>)
 800474a:	f004 fdc9 	bl	80092e0 <HAL_GPIO_ReadPin>
 800474e:	4603      	mov	r3, r0
 8004750:	2b01      	cmp	r3, #1
 8004752:	d11f      	bne.n	8004794 <menu+0x3478>
 8004754:	2104      	movs	r1, #4
 8004756:	4873      	ldr	r0, [pc, #460]	; (8004924 <menu+0x3608>)
 8004758:	f004 fdc2 	bl	80092e0 <HAL_GPIO_ReadPin>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d118      	bne.n	8004794 <menu+0x3478>
 8004762:	4b71      	ldr	r3, [pc, #452]	; (8004928 <menu+0x360c>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	f083 0301 	eor.w	r3, r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d011      	beq.n	8004794 <menu+0x3478>
			takeMachineID(0);
 8004770:	2000      	movs	r0, #0
 8004772:	f7fc f909 	bl	8000988 <takeMachineID>

			HAL_Delay(50);
 8004776:	2032      	movs	r0, #50	; 0x32
 8004778:	f003 ffe2 	bl	8008740 <HAL_Delay>

			lcd_print(2, 1, machineID);
 800477c:	4a71      	ldr	r2, [pc, #452]	; (8004944 <menu+0x3628>)
 800477e:	2101      	movs	r1, #1
 8004780:	2002      	movs	r0, #2
 8004782:	f7fc f819 	bl	80007b8 <lcd_print>
			lcd_print(2, 13, "    ");
 8004786:	4a70      	ldr	r2, [pc, #448]	; (8004948 <menu+0x362c>)
 8004788:	210d      	movs	r1, #13
 800478a:	2002      	movs	r0, #2
 800478c:	f7fc f814 	bl	80007b8 <lcd_print>

			bekle();
 8004790:	f000 ffd0 	bl	8005734 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004794:	4b68      	ldr	r3, [pc, #416]	; (8004938 <menu+0x361c>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b21      	cmp	r3, #33	; 0x21
 800479a:	d153      	bne.n	8004844 <menu+0x3528>
		calismaSayModu = 0;
 800479c:	4b67      	ldr	r3, [pc, #412]	; (800493c <menu+0x3620>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 80047a2:	4a6a      	ldr	r2, [pc, #424]	; (800494c <menu+0x3630>)
 80047a4:	2101      	movs	r1, #1
 80047a6:	2001      	movs	r0, #1
 80047a8:	f7fc f806 	bl	80007b8 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 80047ac:	4868      	ldr	r0, [pc, #416]	; (8004950 <menu+0x3634>)
 80047ae:	f7fb fd39 	bl	8000224 <strlen>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d811      	bhi.n	80047dc <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 80047b8:	4a65      	ldr	r2, [pc, #404]	; (8004950 <menu+0x3634>)
 80047ba:	2101      	movs	r1, #1
 80047bc:	2002      	movs	r0, #2
 80047be:	f7fb fffb 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80047c2:	4863      	ldr	r0, [pc, #396]	; (8004950 <menu+0x3634>)
 80047c4:	f7fb fd2e 	bl	8000224 <strlen>
 80047c8:	4603      	mov	r3, r0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	4a60      	ldr	r2, [pc, #384]	; (8004954 <menu+0x3638>)
 80047d2:	4619      	mov	r1, r3
 80047d4:	2002      	movs	r0, #2
 80047d6:	f7fb ffef 	bl	80007b8 <lcd_print>
 80047da:	e005      	b.n	80047e8 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 80047dc:	2300      	movs	r3, #0
 80047de:	2202      	movs	r2, #2
 80047e0:	2101      	movs	r1, #1
 80047e2:	485b      	ldr	r0, [pc, #364]	; (8004950 <menu+0x3634>)
 80047e4:	f000 fa96 	bl	8004d14 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047e8:	2102      	movs	r1, #2
 80047ea:	484e      	ldr	r0, [pc, #312]	; (8004924 <menu+0x3608>)
 80047ec:	f004 fd78 	bl	80092e0 <HAL_GPIO_ReadPin>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d126      	bne.n	8004844 <menu+0x3528>
 80047f6:	2104      	movs	r1, #4
 80047f8:	484a      	ldr	r0, [pc, #296]	; (8004924 <menu+0x3608>)
 80047fa:	f004 fd71 	bl	80092e0 <HAL_GPIO_ReadPin>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d11f      	bne.n	8004844 <menu+0x3528>
 8004804:	4b48      	ldr	r3, [pc, #288]	; (8004928 <menu+0x360c>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	f083 0301 	eor.w	r3, r3, #1
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <menu+0x3528>
			takeWifiSSID(0);
 8004812:	2000      	movs	r0, #0
 8004814:	f7fc fa0e 	bl	8000c34 <takeWifiSSID>

			HAL_Delay(100);
 8004818:	2064      	movs	r0, #100	; 0x64
 800481a:	f003 ff91 	bl	8008740 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 800481e:	4a4c      	ldr	r2, [pc, #304]	; (8004950 <menu+0x3634>)
 8004820:	2101      	movs	r1, #1
 8004822:	2002      	movs	r0, #2
 8004824:	f7fb ffc8 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004828:	4849      	ldr	r0, [pc, #292]	; (8004950 <menu+0x3634>)
 800482a:	f7fb fcfb 	bl	8000224 <strlen>
 800482e:	4603      	mov	r3, r0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	3301      	adds	r3, #1
 8004834:	b2db      	uxtb	r3, r3
 8004836:	4a47      	ldr	r2, [pc, #284]	; (8004954 <menu+0x3638>)
 8004838:	4619      	mov	r1, r3
 800483a:	2002      	movs	r0, #2
 800483c:	f7fb ffbc 	bl	80007b8 <lcd_print>

			bekle();
 8004840:	f000 ff78 	bl	8005734 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004844:	4b3c      	ldr	r3, [pc, #240]	; (8004938 <menu+0x361c>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b22      	cmp	r3, #34	; 0x22
 800484a:	d153      	bne.n	80048f4 <menu+0x35d8>
		calismaSayModu = 0;
 800484c:	4b3b      	ldr	r3, [pc, #236]	; (800493c <menu+0x3620>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004852:	4a41      	ldr	r2, [pc, #260]	; (8004958 <menu+0x363c>)
 8004854:	2101      	movs	r1, #1
 8004856:	2001      	movs	r0, #1
 8004858:	f7fb ffae 	bl	80007b8 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 800485c:	483f      	ldr	r0, [pc, #252]	; (800495c <menu+0x3640>)
 800485e:	f7fb fce1 	bl	8000224 <strlen>
 8004862:	4603      	mov	r3, r0
 8004864:	2b10      	cmp	r3, #16
 8004866:	d811      	bhi.n	800488c <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004868:	4a3c      	ldr	r2, [pc, #240]	; (800495c <menu+0x3640>)
 800486a:	2101      	movs	r1, #1
 800486c:	2002      	movs	r0, #2
 800486e:	f7fb ffa3 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004872:	483a      	ldr	r0, [pc, #232]	; (800495c <menu+0x3640>)
 8004874:	f7fb fcd6 	bl	8000224 <strlen>
 8004878:	4603      	mov	r3, r0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	3301      	adds	r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4a34      	ldr	r2, [pc, #208]	; (8004954 <menu+0x3638>)
 8004882:	4619      	mov	r1, r3
 8004884:	2002      	movs	r0, #2
 8004886:	f7fb ff97 	bl	80007b8 <lcd_print>
 800488a:	e005      	b.n	8004898 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 800488c:	2301      	movs	r3, #1
 800488e:	2202      	movs	r2, #2
 8004890:	2101      	movs	r1, #1
 8004892:	4832      	ldr	r0, [pc, #200]	; (800495c <menu+0x3640>)
 8004894:	f000 fa3e 	bl	8004d14 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004898:	2102      	movs	r1, #2
 800489a:	4822      	ldr	r0, [pc, #136]	; (8004924 <menu+0x3608>)
 800489c:	f004 fd20 	bl	80092e0 <HAL_GPIO_ReadPin>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d126      	bne.n	80048f4 <menu+0x35d8>
 80048a6:	2104      	movs	r1, #4
 80048a8:	481e      	ldr	r0, [pc, #120]	; (8004924 <menu+0x3608>)
 80048aa:	f004 fd19 	bl	80092e0 <HAL_GPIO_ReadPin>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d11f      	bne.n	80048f4 <menu+0x35d8>
 80048b4:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <menu+0x360c>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	f083 0301 	eor.w	r3, r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d018      	beq.n	80048f4 <menu+0x35d8>
			takeWifiPass(0);
 80048c2:	2000      	movs	r0, #0
 80048c4:	f7fc fb70 	bl	8000fa8 <takeWifiPass>

			HAL_Delay(50);
 80048c8:	2032      	movs	r0, #50	; 0x32
 80048ca:	f003 ff39 	bl	8008740 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 80048ce:	4a23      	ldr	r2, [pc, #140]	; (800495c <menu+0x3640>)
 80048d0:	2101      	movs	r1, #1
 80048d2:	2002      	movs	r0, #2
 80048d4:	f7fb ff70 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80048d8:	4820      	ldr	r0, [pc, #128]	; (800495c <menu+0x3640>)
 80048da:	f7fb fca3 	bl	8000224 <strlen>
 80048de:	4603      	mov	r3, r0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	3301      	adds	r3, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <menu+0x3638>)
 80048e8:	4619      	mov	r1, r3
 80048ea:	2002      	movs	r0, #2
 80048ec:	f7fb ff64 	bl	80007b8 <lcd_print>

			bekle();
 80048f0:	f000 ff20 	bl	8005734 <bekle>
		}
	}

	if (menuSayac == 35) {
 80048f4:	4b10      	ldr	r3, [pc, #64]	; (8004938 <menu+0x361c>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b23      	cmp	r3, #35	; 0x23
 80048fa:	d155      	bne.n	80049a8 <menu+0x368c>
		if(dilSecim == 0) {
 80048fc:	4b07      	ldr	r3, [pc, #28]	; (800491c <menu+0x3600>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d131      	bne.n	8004968 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004904:	4a16      	ldr	r2, [pc, #88]	; (8004960 <menu+0x3644>)
 8004906:	2101      	movs	r1, #1
 8004908:	2001      	movs	r0, #1
 800490a:	f7fb ff55 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <menu+0x3648>)
 8004910:	2101      	movs	r1, #1
 8004912:	2002      	movs	r0, #2
 8004914:	f7fb ff50 	bl	80007b8 <lcd_print>
 8004918:	e034      	b.n	8004984 <menu+0x3668>
 800491a:	bf00      	nop
 800491c:	20000309 	.word	0x20000309
 8004920:	0800d270 	.word	0x0800d270
 8004924:	40010800 	.word	0x40010800
 8004928:	20000317 	.word	0x20000317
 800492c:	20000307 	.word	0x20000307
 8004930:	20000218 	.word	0x20000218
 8004934:	20000314 	.word	0x20000314
 8004938:	200002e8 	.word	0x200002e8
 800493c:	20000308 	.word	0x20000308
 8004940:	0800d9b8 	.word	0x0800d9b8
 8004944:	200002b0 	.word	0x200002b0
 8004948:	0800d9cc 	.word	0x0800d9cc
 800494c:	0800d9d4 	.word	0x0800d9d4
 8004950:	200002bc 	.word	0x200002bc
 8004954:	20000038 	.word	0x20000038
 8004958:	0800d9e8 	.word	0x0800d9e8
 800495c:	200002d0 	.word	0x200002d0
 8004960:	0800d9fc 	.word	0x0800d9fc
 8004964:	0800da10 	.word	0x0800da10
		} else if(dilSecim == 1) {
 8004968:	4b10      	ldr	r3, [pc, #64]	; (80049ac <menu+0x3690>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d109      	bne.n	8004984 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <menu+0x3694>)
 8004972:	2101      	movs	r1, #1
 8004974:	2001      	movs	r0, #1
 8004976:	f7fb ff1f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800497a:	4a0e      	ldr	r2, [pc, #56]	; (80049b4 <menu+0x3698>)
 800497c:	2101      	movs	r1, #1
 800497e:	2002      	movs	r0, #2
 8004980:	f7fb ff1a 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004984:	2108      	movs	r1, #8
 8004986:	480c      	ldr	r0, [pc, #48]	; (80049b8 <menu+0x369c>)
 8004988:	f004 fcaa 	bl	80092e0 <HAL_GPIO_ReadPin>
 800498c:	4603      	mov	r3, r0
 800498e:	2b01      	cmp	r3, #1
 8004990:	d10a      	bne.n	80049a8 <menu+0x368c>
			menuGiris = 0;
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <menu+0x36a0>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004998:	f7fb ff3a 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 800499c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049a0:	f003 fece 	bl	8008740 <HAL_Delay>
			NVIC_SystemReset();
 80049a4:	f7fb ff7c 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 80049a8:	bf00      	nop
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000309 	.word	0x20000309
 80049b0:	0800da24 	.word	0x0800da24
 80049b4:	0800da38 	.word	0x0800da38
 80049b8:	40010800 	.word	0x40010800
 80049bc:	20000305 	.word	0x20000305

080049c0 <printTemplate>:

void printTemplate(int type, int page) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80049ca:	20c8      	movs	r0, #200	; 0xc8
 80049cc:	f003 feb8 	bl	8008740 <HAL_Delay>
	lcd_clear();
 80049d0:	f7fb ff1e 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d143      	bne.n	8004a62 <printTemplate+0xa2>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d140      	bne.n	8004a62 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80049e0:	4a9d      	ldr	r2, [pc, #628]	; (8004c58 <printTemplate+0x298>)
 80049e2:	2101      	movs	r1, #1
 80049e4:	2001      	movs	r0, #1
 80049e6:	f7fb fee7 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 80049ea:	4a9c      	ldr	r2, [pc, #624]	; (8004c5c <printTemplate+0x29c>)
 80049ec:	2103      	movs	r1, #3
 80049ee:	2002      	movs	r0, #2
 80049f0:	f7fb fee2 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 80049f4:	4a9a      	ldr	r2, [pc, #616]	; (8004c60 <printTemplate+0x2a0>)
 80049f6:	2104      	movs	r1, #4
 80049f8:	2002      	movs	r0, #2
 80049fa:	f7fb fedd 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 80049fe:	4a99      	ldr	r2, [pc, #612]	; (8004c64 <printTemplate+0x2a4>)
 8004a00:	2105      	movs	r1, #5
 8004a02:	2002      	movs	r0, #2
 8004a04:	f7fb fed8 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8004a08:	4a97      	ldr	r2, [pc, #604]	; (8004c68 <printTemplate+0x2a8>)
 8004a0a:	2106      	movs	r1, #6
 8004a0c:	2002      	movs	r0, #2
 8004a0e:	f7fb fed3 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 8004a12:	4a96      	ldr	r2, [pc, #600]	; (8004c6c <printTemplate+0x2ac>)
 8004a14:	2107      	movs	r1, #7
 8004a16:	2002      	movs	r0, #2
 8004a18:	f7fb fece 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 8004a1c:	4a94      	ldr	r2, [pc, #592]	; (8004c70 <printTemplate+0x2b0>)
 8004a1e:	210a      	movs	r1, #10
 8004a20:	2002      	movs	r0, #2
 8004a22:	f7fb fec9 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 8004a26:	4a93      	ldr	r2, [pc, #588]	; (8004c74 <printTemplate+0x2b4>)
 8004a28:	210b      	movs	r1, #11
 8004a2a:	2002      	movs	r0, #2
 8004a2c:	f7fb fec4 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 8004a30:	4a91      	ldr	r2, [pc, #580]	; (8004c78 <printTemplate+0x2b8>)
 8004a32:	210c      	movs	r1, #12
 8004a34:	2002      	movs	r0, #2
 8004a36:	f7fb febf 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 8004a3a:	4a90      	ldr	r2, [pc, #576]	; (8004c7c <printTemplate+0x2bc>)
 8004a3c:	210d      	movs	r1, #13
 8004a3e:	2002      	movs	r0, #2
 8004a40:	f7fb feba 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 8004a44:	4a8e      	ldr	r2, [pc, #568]	; (8004c80 <printTemplate+0x2c0>)
 8004a46:	210e      	movs	r1, #14
 8004a48:	2002      	movs	r0, #2
 8004a4a:	f7fb feb5 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 8004a4e:	4a8d      	ldr	r2, [pc, #564]	; (8004c84 <printTemplate+0x2c4>)
 8004a50:	2105      	movs	r1, #5
 8004a52:	2001      	movs	r0, #1
 8004a54:	f7fb feb0 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8004a58:	2103      	movs	r1, #3
 8004a5a:	2002      	movs	r0, #2
 8004a5c:	f7fb fe8d 	bl	800077a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8004a60:	e0f5      	b.n	8004c4e <printTemplate+0x28e>
	} else if(type == 2) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d178      	bne.n	8004b5a <printTemplate+0x19a>
		if(page == 1) {
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d114      	bne.n	8004a98 <printTemplate+0xd8>
			lcd_clear();
 8004a6e:	f7fb fecf 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004a72:	2064      	movs	r0, #100	; 0x64
 8004a74:	f003 fe64 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004a78:	4a83      	ldr	r2, [pc, #524]	; (8004c88 <printTemplate+0x2c8>)
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f7fb fe9b 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004a82:	4a82      	ldr	r2, [pc, #520]	; (8004c8c <printTemplate+0x2cc>)
 8004a84:	2107      	movs	r1, #7
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fb fe96 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8004a8c:	4a80      	ldr	r2, [pc, #512]	; (8004c90 <printTemplate+0x2d0>)
 8004a8e:	2101      	movs	r1, #1
 8004a90:	2002      	movs	r0, #2
 8004a92:	f7fb fe91 	bl	80007b8 <lcd_print>
}
 8004a96:	e0da      	b.n	8004c4e <printTemplate+0x28e>
		} else if(page == 2) {
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d114      	bne.n	8004ac8 <printTemplate+0x108>
			lcd_clear();
 8004a9e:	f7fb feb7 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004aa2:	2064      	movs	r0, #100	; 0x64
 8004aa4:	f003 fe4c 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004aa8:	4a77      	ldr	r2, [pc, #476]	; (8004c88 <printTemplate+0x2c8>)
 8004aaa:	2101      	movs	r1, #1
 8004aac:	2001      	movs	r0, #1
 8004aae:	f7fb fe83 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004ab2:	4a76      	ldr	r2, [pc, #472]	; (8004c8c <printTemplate+0x2cc>)
 8004ab4:	2107      	movs	r1, #7
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fb fe7e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8004abc:	4a75      	ldr	r2, [pc, #468]	; (8004c94 <printTemplate+0x2d4>)
 8004abe:	2101      	movs	r1, #1
 8004ac0:	2002      	movs	r0, #2
 8004ac2:	f7fb fe79 	bl	80007b8 <lcd_print>
}
 8004ac6:	e0c2      	b.n	8004c4e <printTemplate+0x28e>
		} else if(page == 3) {
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d114      	bne.n	8004af8 <printTemplate+0x138>
			lcd_clear();
 8004ace:	f7fb fe9f 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004ad2:	2064      	movs	r0, #100	; 0x64
 8004ad4:	f003 fe34 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004ad8:	4a6b      	ldr	r2, [pc, #428]	; (8004c88 <printTemplate+0x2c8>)
 8004ada:	2101      	movs	r1, #1
 8004adc:	2001      	movs	r0, #1
 8004ade:	f7fb fe6b 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004ae2:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <printTemplate+0x2cc>)
 8004ae4:	2107      	movs	r1, #7
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f7fb fe66 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8004aec:	4a6a      	ldr	r2, [pc, #424]	; (8004c98 <printTemplate+0x2d8>)
 8004aee:	2101      	movs	r1, #1
 8004af0:	2002      	movs	r0, #2
 8004af2:	f7fb fe61 	bl	80007b8 <lcd_print>
}
 8004af6:	e0aa      	b.n	8004c4e <printTemplate+0x28e>
		} else if(page == 4) {
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d114      	bne.n	8004b28 <printTemplate+0x168>
			lcd_clear();
 8004afe:	f7fb fe87 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004b02:	2064      	movs	r0, #100	; 0x64
 8004b04:	f003 fe1c 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004b08:	4a5f      	ldr	r2, [pc, #380]	; (8004c88 <printTemplate+0x2c8>)
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f7fb fe53 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004b12:	4a5e      	ldr	r2, [pc, #376]	; (8004c8c <printTemplate+0x2cc>)
 8004b14:	2107      	movs	r1, #7
 8004b16:	2001      	movs	r0, #1
 8004b18:	f7fb fe4e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8004b1c:	4a5f      	ldr	r2, [pc, #380]	; (8004c9c <printTemplate+0x2dc>)
 8004b1e:	2101      	movs	r1, #1
 8004b20:	2002      	movs	r0, #2
 8004b22:	f7fb fe49 	bl	80007b8 <lcd_print>
}
 8004b26:	e092      	b.n	8004c4e <printTemplate+0x28e>
		} else if(page == 5) {
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	f040 808f 	bne.w	8004c4e <printTemplate+0x28e>
			lcd_clear();
 8004b30:	f7fb fe6e 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004b34:	2064      	movs	r0, #100	; 0x64
 8004b36:	f003 fe03 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004b3a:	4a53      	ldr	r2, [pc, #332]	; (8004c88 <printTemplate+0x2c8>)
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f7fb fe3a 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004b44:	4a51      	ldr	r2, [pc, #324]	; (8004c8c <printTemplate+0x2cc>)
 8004b46:	2107      	movs	r1, #7
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f7fb fe35 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8004b4e:	4a54      	ldr	r2, [pc, #336]	; (8004ca0 <printTemplate+0x2e0>)
 8004b50:	2101      	movs	r1, #1
 8004b52:	2002      	movs	r0, #2
 8004b54:	f7fb fe30 	bl	80007b8 <lcd_print>
}
 8004b58:	e079      	b.n	8004c4e <printTemplate+0x28e>
	} else if(type == 3) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d176      	bne.n	8004c4e <printTemplate+0x28e>
		if(page == 1) {
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d114      	bne.n	8004b90 <printTemplate+0x1d0>
			lcd_clear();
 8004b66:	f7fb fe53 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004b6a:	2064      	movs	r0, #100	; 0x64
 8004b6c:	f003 fde8 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004b70:	4a4c      	ldr	r2, [pc, #304]	; (8004ca4 <printTemplate+0x2e4>)
 8004b72:	2101      	movs	r1, #1
 8004b74:	2001      	movs	r0, #1
 8004b76:	f7fb fe1f 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004b7a:	4a4b      	ldr	r2, [pc, #300]	; (8004ca8 <printTemplate+0x2e8>)
 8004b7c:	2107      	movs	r1, #7
 8004b7e:	2001      	movs	r0, #1
 8004b80:	f7fb fe1a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8004b84:	4a42      	ldr	r2, [pc, #264]	; (8004c90 <printTemplate+0x2d0>)
 8004b86:	2101      	movs	r1, #1
 8004b88:	2002      	movs	r0, #2
 8004b8a:	f7fb fe15 	bl	80007b8 <lcd_print>
}
 8004b8e:	e05e      	b.n	8004c4e <printTemplate+0x28e>
		} else if(page == 2) {
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d114      	bne.n	8004bc0 <printTemplate+0x200>
			lcd_clear();
 8004b96:	f7fb fe3b 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004b9a:	2064      	movs	r0, #100	; 0x64
 8004b9c:	f003 fdd0 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004ba0:	4a40      	ldr	r2, [pc, #256]	; (8004ca4 <printTemplate+0x2e4>)
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f7fb fe07 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004baa:	4a3f      	ldr	r2, [pc, #252]	; (8004ca8 <printTemplate+0x2e8>)
 8004bac:	2107      	movs	r1, #7
 8004bae:	2001      	movs	r0, #1
 8004bb0:	f7fb fe02 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8004bb4:	4a37      	ldr	r2, [pc, #220]	; (8004c94 <printTemplate+0x2d4>)
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	2002      	movs	r0, #2
 8004bba:	f7fb fdfd 	bl	80007b8 <lcd_print>
}
 8004bbe:	e046      	b.n	8004c4e <printTemplate+0x28e>
		} else if(page == 3) {
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d114      	bne.n	8004bf0 <printTemplate+0x230>
			lcd_clear();
 8004bc6:	f7fb fe23 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004bca:	2064      	movs	r0, #100	; 0x64
 8004bcc:	f003 fdb8 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004bd0:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <printTemplate+0x2e4>)
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f7fb fdef 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004bda:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <printTemplate+0x2e8>)
 8004bdc:	2107      	movs	r1, #7
 8004bde:	2001      	movs	r0, #1
 8004be0:	f7fb fdea 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8004be4:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <printTemplate+0x2d8>)
 8004be6:	2101      	movs	r1, #1
 8004be8:	2002      	movs	r0, #2
 8004bea:	f7fb fde5 	bl	80007b8 <lcd_print>
}
 8004bee:	e02e      	b.n	8004c4e <printTemplate+0x28e>
		} else if(page == 4) {
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d114      	bne.n	8004c20 <printTemplate+0x260>
			lcd_clear();
 8004bf6:	f7fb fe0b 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004bfa:	2064      	movs	r0, #100	; 0x64
 8004bfc:	f003 fda0 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004c00:	4a28      	ldr	r2, [pc, #160]	; (8004ca4 <printTemplate+0x2e4>)
 8004c02:	2101      	movs	r1, #1
 8004c04:	2001      	movs	r0, #1
 8004c06:	f7fb fdd7 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004c0a:	4a27      	ldr	r2, [pc, #156]	; (8004ca8 <printTemplate+0x2e8>)
 8004c0c:	2107      	movs	r1, #7
 8004c0e:	2001      	movs	r0, #1
 8004c10:	f7fb fdd2 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8004c14:	4a21      	ldr	r2, [pc, #132]	; (8004c9c <printTemplate+0x2dc>)
 8004c16:	2101      	movs	r1, #1
 8004c18:	2002      	movs	r0, #2
 8004c1a:	f7fb fdcd 	bl	80007b8 <lcd_print>
}
 8004c1e:	e016      	b.n	8004c4e <printTemplate+0x28e>
		} else if(page == 5) {
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d113      	bne.n	8004c4e <printTemplate+0x28e>
			lcd_clear();
 8004c26:	f7fb fdf3 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004c2a:	2064      	movs	r0, #100	; 0x64
 8004c2c:	f003 fd88 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004c30:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <printTemplate+0x2e4>)
 8004c32:	2101      	movs	r1, #1
 8004c34:	2001      	movs	r0, #1
 8004c36:	f7fb fdbf 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004c3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <printTemplate+0x2e8>)
 8004c3c:	2107      	movs	r1, #7
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f7fb fdba 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8004c44:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <printTemplate+0x2e0>)
 8004c46:	2101      	movs	r1, #1
 8004c48:	2002      	movs	r0, #2
 8004c4a:	f7fb fdb5 	bl	80007b8 <lcd_print>
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	0800da4c 	.word	0x0800da4c
 8004c5c:	0800da54 	.word	0x0800da54
 8004c60:	0800da58 	.word	0x0800da58
 8004c64:	0800da5c 	.word	0x0800da5c
 8004c68:	0800da60 	.word	0x0800da60
 8004c6c:	0800da64 	.word	0x0800da64
 8004c70:	0800da68 	.word	0x0800da68
 8004c74:	0800da6c 	.word	0x0800da6c
 8004c78:	0800da70 	.word	0x0800da70
 8004c7c:	0800da74 	.word	0x0800da74
 8004c80:	0800da78 	.word	0x0800da78
 8004c84:	200002b0 	.word	0x200002b0
 8004c88:	0800da7c 	.word	0x0800da7c
 8004c8c:	200002bc 	.word	0x200002bc
 8004c90:	0800da84 	.word	0x0800da84
 8004c94:	0800da98 	.word	0x0800da98
 8004c98:	0800daac 	.word	0x0800daac
 8004c9c:	0800dac0 	.word	0x0800dac0
 8004ca0:	0800dad4 	.word	0x0800dad4
 8004ca4:	0800dae8 	.word	0x0800dae8
 8004ca8:	200002d0 	.word	0x200002d0

08004cac <checkSlideVal>:

int checkSlideVal(int state) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d111      	bne.n	8004cde <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4813      	ldr	r0, [pc, #76]	; (8004d0c <checkSlideVal+0x60>)
 8004cbe:	f004 fb0f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <checkSlideVal+0x20>
			return 34;
 8004cc8:	2322      	movs	r3, #34	; 0x22
 8004cca:	e01b      	b.n	8004d04 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8004ccc:	2108      	movs	r1, #8
 8004cce:	4810      	ldr	r0, [pc, #64]	; (8004d10 <checkSlideVal+0x64>)
 8004cd0:	f004 fb06 	bl	80092e0 <HAL_GPIO_ReadPin>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d113      	bne.n	8004d02 <checkSlideVal+0x56>
			return 32;
 8004cda:	2320      	movs	r3, #32
 8004cdc:	e012      	b.n	8004d04 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8004cde:	2101      	movs	r1, #1
 8004ce0:	480a      	ldr	r0, [pc, #40]	; (8004d0c <checkSlideVal+0x60>)
 8004ce2:	f004 fafd 	bl	80092e0 <HAL_GPIO_ReadPin>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <checkSlideVal+0x44>
			return 35;
 8004cec:	2323      	movs	r3, #35	; 0x23
 8004cee:	e009      	b.n	8004d04 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8004cf0:	2108      	movs	r1, #8
 8004cf2:	4807      	ldr	r0, [pc, #28]	; (8004d10 <checkSlideVal+0x64>)
 8004cf4:	f004 faf4 	bl	80092e0 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <checkSlideVal+0x56>
			return 33;
 8004cfe:	2321      	movs	r3, #33	; 0x21
 8004d00:	e000      	b.n	8004d04 <checkSlideVal+0x58>
		}
	}
	return 0;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40010800 	.word	0x40010800
 8004d10:	40011000 	.word	0x40011000

08004d14 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fb fa7e 	bl	8000224 <strlen>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8004d30:	e08a      	b.n	8004e48 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8004d32:	6838      	ldr	r0, [r7, #0]
 8004d34:	f7ff ffba 	bl	8004cac <checkSlideVal>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dd07      	ble.n	8004d4e <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8004d3e:	6838      	ldr	r0, [r7, #0]
 8004d40:	f7ff ffb4 	bl	8004cac <checkSlideVal>
 8004d44:	4603      	mov	r3, r0
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	4b44      	ldr	r3, [pc, #272]	; (8004e5c <slideText+0x148>)
 8004d4a:	701a      	strb	r2, [r3, #0]
			break;
 8004d4c:	e081      	b.n	8004e52 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8004d4e:	2300      	movs	r3, #0
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	e075      	b.n	8004e40 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8004d54:	6838      	ldr	r0, [r7, #0]
 8004d56:	f7ff ffa9 	bl	8004cac <checkSlideVal>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	dd09      	ble.n	8004d74 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8004d60:	6838      	ldr	r0, [r7, #0]
 8004d62:	f7ff ffa3 	bl	8004cac <checkSlideVal>
 8004d66:	4603      	mov	r3, r0
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	4b3c      	ldr	r3, [pc, #240]	; (8004e5c <slideText+0x148>)
 8004d6c:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004d72:	e069      	b.n	8004e48 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	4413      	add	r3, r2
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e029      	b.n	8004dd2 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8004d7e:	6838      	ldr	r0, [r7, #0]
 8004d80:	f7ff ff94 	bl	8004cac <checkSlideVal>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	dd0b      	ble.n	8004da2 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8004d8a:	6838      	ldr	r0, [r7, #0]
 8004d8c:	f7ff ff8e 	bl	8004cac <checkSlideVal>
 8004d90:	4603      	mov	r3, r0
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <slideText+0x148>)
 8004d96:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004da0:	e01d      	b.n	8004dde <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	b2d8      	uxtb	r0, r3
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b2d9      	uxtb	r1, r3
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f7fb fd0e 	bl	80007e2 <lcd_print_char>
				HAL_Delay(30);
 8004dc6:	201e      	movs	r0, #30
 8004dc8:	f003 fcba 	bl	8008740 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	7dfa      	ldrb	r2, [r7, #23]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	dbcf      	blt.n	8004d7e <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e023      	b.n	8004e2e <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8004de6:	6838      	ldr	r0, [r7, #0]
 8004de8:	f7ff ff60 	bl	8004cac <checkSlideVal>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dd0b      	ble.n	8004e0a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8004df2:	6838      	ldr	r0, [r7, #0]
 8004df4:	f7ff ff5a 	bl	8004cac <checkSlideVal>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <slideText+0x148>)
 8004dfe:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004e08:	e017      	b.n	8004e3a <slideText+0x126>
				}
			     if(j >= startPos) {
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	db0a      	blt.n	8004e28 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	b2d1      	uxtb	r1, r2
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb fce0 	bl	80007e2 <lcd_print_char>
			    	 HAL_Delay(30);
 8004e22:	201e      	movs	r0, #30
 8004e24:	f003 fc8c 	bl	8008740 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	7dfa      	ldrb	r2, [r7, #23]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	dad5      	bge.n	8004de6 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	6a3a      	ldr	r2, [r7, #32]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	db85      	blt.n	8004d54 <slideText+0x40>
	while(mainLoopVal == 1) {
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	f43f af71 	beq.w	8004d32 <slideText+0x1e>
			     }
			}
		}
	}
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	3728      	adds	r7, #40	; 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200002e8 	.word	0x200002e8

08004e60 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d105      	bne.n	8004e7c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004e70:	4a22      	ldr	r2, [pc, #136]	; (8004efc <lcdUpdate+0x9c>)
 8004e72:	2101      	movs	r1, #1
 8004e74:	2002      	movs	r0, #2
 8004e76:	f7fb fc9f 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004e7a:	e03b      	b.n	8004ef4 <lcdUpdate+0x94>
	} else if(y==2) {
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d105      	bne.n	8004e8e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <lcdUpdate+0x9c>)
 8004e84:	2102      	movs	r1, #2
 8004e86:	2002      	movs	r0, #2
 8004e88:	f7fb fc96 	bl	80007b8 <lcd_print>
}
 8004e8c:	e032      	b.n	8004ef4 <lcdUpdate+0x94>
	} else if(y==3) {
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d105      	bne.n	8004ea0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <lcdUpdate+0x9c>)
 8004e96:	2103      	movs	r1, #3
 8004e98:	2002      	movs	r0, #2
 8004e9a:	f7fb fc8d 	bl	80007b8 <lcd_print>
}
 8004e9e:	e029      	b.n	8004ef4 <lcdUpdate+0x94>
	} else if(y==4) {
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d105      	bne.n	8004eb2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <lcdUpdate+0x9c>)
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	2002      	movs	r0, #2
 8004eac:	f7fb fc84 	bl	80007b8 <lcd_print>
}
 8004eb0:	e020      	b.n	8004ef4 <lcdUpdate+0x94>
	} else if(y==5) {
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d105      	bne.n	8004ec4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004eb8:	4a10      	ldr	r2, [pc, #64]	; (8004efc <lcdUpdate+0x9c>)
 8004eba:	2105      	movs	r1, #5
 8004ebc:	2002      	movs	r0, #2
 8004ebe:	f7fb fc7b 	bl	80007b8 <lcd_print>
}
 8004ec2:	e017      	b.n	8004ef4 <lcdUpdate+0x94>
	} else if(y==6) {
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2b06      	cmp	r3, #6
 8004ec8:	d105      	bne.n	8004ed6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004eca:	4a0c      	ldr	r2, [pc, #48]	; (8004efc <lcdUpdate+0x9c>)
 8004ecc:	2106      	movs	r1, #6
 8004ece:	2002      	movs	r0, #2
 8004ed0:	f7fb fc72 	bl	80007b8 <lcd_print>
}
 8004ed4:	e00e      	b.n	8004ef4 <lcdUpdate+0x94>
	} else if (y==7) {
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b07      	cmp	r3, #7
 8004eda:	d10b      	bne.n	8004ef4 <lcdUpdate+0x94>
		lcd_clear();
 8004edc:	f7fb fc98 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004ee0:	4a07      	ldr	r2, [pc, #28]	; (8004f00 <lcdUpdate+0xa0>)
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f7fb fc67 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8004eea:	4a06      	ldr	r2, [pc, #24]	; (8004f04 <lcdUpdate+0xa4>)
 8004eec:	2101      	movs	r1, #1
 8004eee:	2002      	movs	r0, #2
 8004ef0:	f7fb fc62 	bl	80007b8 <lcd_print>
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	0800d118 	.word	0x0800d118
 8004f00:	0800daf0 	.word	0x0800daf0
 8004f04:	0800db04 	.word	0x0800db04

08004f08 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d11d      	bne.n	8004f54 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004f18:	4b62      	ldr	r3, [pc, #392]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004f20:	4a61      	ldr	r2, [pc, #388]	; (80050a8 <hataKoduLcdGoster+0x1a0>)
 8004f22:	2101      	movs	r1, #1
 8004f24:	2001      	movs	r0, #1
 8004f26:	f7fb fc47 	bl	80007b8 <lcd_print>
 8004f2a:	e008      	b.n	8004f3e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004f2c:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d104      	bne.n	8004f3e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004f34:	4a5d      	ldr	r2, [pc, #372]	; (80050ac <hataKoduLcdGoster+0x1a4>)
 8004f36:	2101      	movs	r1, #1
 8004f38:	2001      	movs	r0, #1
 8004f3a:	f7fb fc3d 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004f3e:	4a5c      	ldr	r2, [pc, #368]	; (80050b0 <hataKoduLcdGoster+0x1a8>)
 8004f40:	2101      	movs	r1, #1
 8004f42:	2002      	movs	r0, #2
 8004f44:	f7fb fc38 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004f48:	4a5a      	ldr	r2, [pc, #360]	; (80050b4 <hataKoduLcdGoster+0x1ac>)
 8004f4a:	2107      	movs	r1, #7
 8004f4c:	2002      	movs	r0, #2
 8004f4e:	f7fb fc33 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004f52:	e0a3      	b.n	800509c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d11d      	bne.n	8004f96 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004f5a:	4b52      	ldr	r3, [pc, #328]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d105      	bne.n	8004f6e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004f62:	4a51      	ldr	r2, [pc, #324]	; (80050a8 <hataKoduLcdGoster+0x1a0>)
 8004f64:	2101      	movs	r1, #1
 8004f66:	2001      	movs	r0, #1
 8004f68:	f7fb fc26 	bl	80007b8 <lcd_print>
 8004f6c:	e008      	b.n	8004f80 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8004f6e:	4b4d      	ldr	r3, [pc, #308]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d104      	bne.n	8004f80 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004f76:	4a4d      	ldr	r2, [pc, #308]	; (80050ac <hataKoduLcdGoster+0x1a4>)
 8004f78:	2101      	movs	r1, #1
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7fb fc1c 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 8004f80:	4a4d      	ldr	r2, [pc, #308]	; (80050b8 <hataKoduLcdGoster+0x1b0>)
 8004f82:	2102      	movs	r1, #2
 8004f84:	2002      	movs	r0, #2
 8004f86:	f7fb fc17 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004f8a:	4a4a      	ldr	r2, [pc, #296]	; (80050b4 <hataKoduLcdGoster+0x1ac>)
 8004f8c:	2107      	movs	r1, #7
 8004f8e:	2002      	movs	r0, #2
 8004f90:	f7fb fc12 	bl	80007b8 <lcd_print>
}
 8004f94:	e082      	b.n	800509c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d11d      	bne.n	8004fd8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004f9c:	4b41      	ldr	r3, [pc, #260]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8004fa4:	4a40      	ldr	r2, [pc, #256]	; (80050a8 <hataKoduLcdGoster+0x1a0>)
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f7fb fc05 	bl	80007b8 <lcd_print>
 8004fae:	e008      	b.n	8004fc2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8004fb0:	4b3c      	ldr	r3, [pc, #240]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d104      	bne.n	8004fc2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004fb8:	4a3c      	ldr	r2, [pc, #240]	; (80050ac <hataKoduLcdGoster+0x1a4>)
 8004fba:	2101      	movs	r1, #1
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	f7fb fbfb 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 8004fc2:	4a3e      	ldr	r2, [pc, #248]	; (80050bc <hataKoduLcdGoster+0x1b4>)
 8004fc4:	2103      	movs	r1, #3
 8004fc6:	2002      	movs	r0, #2
 8004fc8:	f7fb fbf6 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004fcc:	4a39      	ldr	r2, [pc, #228]	; (80050b4 <hataKoduLcdGoster+0x1ac>)
 8004fce:	2107      	movs	r1, #7
 8004fd0:	2002      	movs	r0, #2
 8004fd2:	f7fb fbf1 	bl	80007b8 <lcd_print>
}
 8004fd6:	e061      	b.n	800509c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d11d      	bne.n	800501a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004fe6:	4a30      	ldr	r2, [pc, #192]	; (80050a8 <hataKoduLcdGoster+0x1a0>)
 8004fe8:	2101      	movs	r1, #1
 8004fea:	2001      	movs	r0, #1
 8004fec:	f7fb fbe4 	bl	80007b8 <lcd_print>
 8004ff0:	e008      	b.n	8005004 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004ff2:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d104      	bne.n	8005004 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004ffa:	4a2c      	ldr	r2, [pc, #176]	; (80050ac <hataKoduLcdGoster+0x1a4>)
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	2001      	movs	r0, #1
 8005000:	f7fb fbda 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 8005004:	4a2e      	ldr	r2, [pc, #184]	; (80050c0 <hataKoduLcdGoster+0x1b8>)
 8005006:	2104      	movs	r1, #4
 8005008:	2002      	movs	r0, #2
 800500a:	f7fb fbd5 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 800500e:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <hataKoduLcdGoster+0x1ac>)
 8005010:	2107      	movs	r1, #7
 8005012:	2002      	movs	r0, #2
 8005014:	f7fb fbd0 	bl	80007b8 <lcd_print>
}
 8005018:	e040      	b.n	800509c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b05      	cmp	r3, #5
 800501e:	d11d      	bne.n	800505c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005020:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <hataKoduLcdGoster+0x1a0>)
 800502a:	2101      	movs	r1, #1
 800502c:	2001      	movs	r0, #1
 800502e:	f7fb fbc3 	bl	80007b8 <lcd_print>
 8005032:	e008      	b.n	8005046 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d104      	bne.n	8005046 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 800503c:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <hataKoduLcdGoster+0x1a4>)
 800503e:	2101      	movs	r1, #1
 8005040:	2001      	movs	r0, #1
 8005042:	f7fb fbb9 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <hataKoduLcdGoster+0x1bc>)
 8005048:	2105      	movs	r1, #5
 800504a:	2002      	movs	r0, #2
 800504c:	f7fb fbb4 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005050:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <hataKoduLcdGoster+0x1ac>)
 8005052:	2107      	movs	r1, #7
 8005054:	2002      	movs	r0, #2
 8005056:	f7fb fbaf 	bl	80007b8 <lcd_print>
}
 800505a:	e01f      	b.n	800509c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	2b06      	cmp	r3, #6
 8005060:	d11c      	bne.n	800509c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800506a:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <hataKoduLcdGoster+0x1a0>)
 800506c:	2101      	movs	r1, #1
 800506e:	2001      	movs	r0, #1
 8005070:	f7fb fba2 	bl	80007b8 <lcd_print>
 8005074:	e008      	b.n	8005088 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <hataKoduLcdGoster+0x19c>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d104      	bne.n	8005088 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 800507e:	4a0b      	ldr	r2, [pc, #44]	; (80050ac <hataKoduLcdGoster+0x1a4>)
 8005080:	2101      	movs	r1, #1
 8005082:	2001      	movs	r0, #1
 8005084:	f7fb fb98 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8005088:	4a0f      	ldr	r2, [pc, #60]	; (80050c8 <hataKoduLcdGoster+0x1c0>)
 800508a:	2106      	movs	r1, #6
 800508c:	2002      	movs	r0, #2
 800508e:	f7fb fb93 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005092:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <hataKoduLcdGoster+0x1ac>)
 8005094:	2107      	movs	r1, #7
 8005096:	2002      	movs	r0, #2
 8005098:	f7fb fb8e 	bl	80007b8 <lcd_print>
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000309 	.word	0x20000309
 80050a8:	0800db18 	.word	0x0800db18
 80050ac:	0800db2c 	.word	0x0800db2c
 80050b0:	0800da58 	.word	0x0800da58
 80050b4:	0800db40 	.word	0x0800db40
 80050b8:	0800da5c 	.word	0x0800da5c
 80050bc:	0800da60 	.word	0x0800da60
 80050c0:	0800da64 	.word	0x0800da64
 80050c4:	0800da68 	.word	0x0800da68
 80050c8:	0800da6c 	.word	0x0800da6c

080050cc <convertAndSendData>:

void convertAndSendData() {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 80050d2:	4a14      	ldr	r2, [pc, #80]	; (8005124 <convertAndSendData+0x58>)
 80050d4:	2101      	movs	r1, #1
 80050d6:	2001      	movs	r0, #1
 80050d8:	f7fb fb6e 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 80050dc:	4a12      	ldr	r2, [pc, #72]	; (8005128 <convertAndSendData+0x5c>)
 80050de:	2101      	movs	r1, #1
 80050e0:	2002      	movs	r0, #2
 80050e2:	f7fb fb69 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
 80050ea:	e00a      	b.n	8005102 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80050ec:	f002 fb4e 	bl	800778c <mergeData>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	490d      	ldr	r1, [pc, #52]	; (800512c <convertAndSendData+0x60>)
 80050f6:	480e      	ldr	r0, [pc, #56]	; (8005130 <convertAndSendData+0x64>)
 80050f8:	f7fb f944 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3301      	adds	r3, #1
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b01      	cmp	r3, #1
 8005106:	ddf1      	ble.n	80050ec <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800510c:	f003 fb18 	bl	8008740 <HAL_Delay>
	lcd_clear();
 8005110:	f7fb fb7e 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005118:	f003 fb12 	bl	8008740 <HAL_Delay>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	0800db4c 	.word	0x0800db4c
 8005128:	0800db58 	.word	0x0800db58
 800512c:	200002b0 	.word	0x200002b0
 8005130:	20000410 	.word	0x20000410

08005134 <eepromKontrol>:

void eepromKontrol(int type) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af04      	add	r7, sp, #16
 800513a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800513c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005140:	9302      	str	r3, [sp, #8]
 8005142:	236e      	movs	r3, #110	; 0x6e
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	4b9c      	ldr	r3, [pc, #624]	; (80053b8 <eepromKontrol+0x284>)
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	236e      	movs	r3, #110	; 0x6e
 800514c:	2200      	movs	r2, #0
 800514e:	21a0      	movs	r1, #160	; 0xa0
 8005150:	489a      	ldr	r0, [pc, #616]	; (80053bc <eepromKontrol+0x288>)
 8005152:	f004 fc79 	bl	8009a48 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8005156:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800515a:	f003 faf1 	bl	8008740 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800515e:	4b96      	ldr	r3, [pc, #600]	; (80053b8 <eepromKontrol+0x284>)
 8005160:	78da      	ldrb	r2, [r3, #3]
 8005162:	4b97      	ldr	r3, [pc, #604]	; (80053c0 <eepromKontrol+0x28c>)
 8005164:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005166:	4b94      	ldr	r3, [pc, #592]	; (80053b8 <eepromKontrol+0x284>)
 8005168:	785a      	ldrb	r2, [r3, #1]
 800516a:	4b96      	ldr	r3, [pc, #600]	; (80053c4 <eepromKontrol+0x290>)
 800516c:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800516e:	4b92      	ldr	r3, [pc, #584]	; (80053b8 <eepromKontrol+0x284>)
 8005170:	789a      	ldrb	r2, [r3, #2]
 8005172:	4b95      	ldr	r3, [pc, #596]	; (80053c8 <eepromKontrol+0x294>)
 8005174:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005176:	4b90      	ldr	r3, [pc, #576]	; (80053b8 <eepromKontrol+0x284>)
 8005178:	791a      	ldrb	r2, [r3, #4]
 800517a:	4b94      	ldr	r3, [pc, #592]	; (80053cc <eepromKontrol+0x298>)
 800517c:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800517e:	4b8e      	ldr	r3, [pc, #568]	; (80053b8 <eepromKontrol+0x284>)
 8005180:	795a      	ldrb	r2, [r3, #5]
 8005182:	4b93      	ldr	r3, [pc, #588]	; (80053d0 <eepromKontrol+0x29c>)
 8005184:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005186:	4b8c      	ldr	r3, [pc, #560]	; (80053b8 <eepromKontrol+0x284>)
 8005188:	799a      	ldrb	r2, [r3, #6]
 800518a:	4b92      	ldr	r3, [pc, #584]	; (80053d4 <eepromKontrol+0x2a0>)
 800518c:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800518e:	4b8a      	ldr	r3, [pc, #552]	; (80053b8 <eepromKontrol+0x284>)
 8005190:	79da      	ldrb	r2, [r3, #7]
 8005192:	4b91      	ldr	r3, [pc, #580]	; (80053d8 <eepromKontrol+0x2a4>)
 8005194:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005196:	4b88      	ldr	r3, [pc, #544]	; (80053b8 <eepromKontrol+0x284>)
 8005198:	7a1a      	ldrb	r2, [r3, #8]
 800519a:	4b90      	ldr	r3, [pc, #576]	; (80053dc <eepromKontrol+0x2a8>)
 800519c:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800519e:	4b86      	ldr	r3, [pc, #536]	; (80053b8 <eepromKontrol+0x284>)
 80051a0:	7a5a      	ldrb	r2, [r3, #9]
 80051a2:	4b8f      	ldr	r3, [pc, #572]	; (80053e0 <eepromKontrol+0x2ac>)
 80051a4:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80051a6:	4b84      	ldr	r3, [pc, #528]	; (80053b8 <eepromKontrol+0x284>)
 80051a8:	7a9a      	ldrb	r2, [r3, #10]
 80051aa:	4b8e      	ldr	r3, [pc, #568]	; (80053e4 <eepromKontrol+0x2b0>)
 80051ac:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80051ae:	4b82      	ldr	r3, [pc, #520]	; (80053b8 <eepromKontrol+0x284>)
 80051b0:	7ada      	ldrb	r2, [r3, #11]
 80051b2:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <eepromKontrol+0x2b4>)
 80051b4:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80051b6:	4b80      	ldr	r3, [pc, #512]	; (80053b8 <eepromKontrol+0x284>)
 80051b8:	7b1a      	ldrb	r2, [r3, #12]
 80051ba:	4b8c      	ldr	r3, [pc, #560]	; (80053ec <eepromKontrol+0x2b8>)
 80051bc:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80051be:	4b7e      	ldr	r3, [pc, #504]	; (80053b8 <eepromKontrol+0x284>)
 80051c0:	7b5a      	ldrb	r2, [r3, #13]
 80051c2:	4b8b      	ldr	r3, [pc, #556]	; (80053f0 <eepromKontrol+0x2bc>)
 80051c4:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80051c6:	4b7c      	ldr	r3, [pc, #496]	; (80053b8 <eepromKontrol+0x284>)
 80051c8:	7b9a      	ldrb	r2, [r3, #14]
 80051ca:	4b8a      	ldr	r3, [pc, #552]	; (80053f4 <eepromKontrol+0x2c0>)
 80051cc:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80051ce:	4b7a      	ldr	r3, [pc, #488]	; (80053b8 <eepromKontrol+0x284>)
 80051d0:	7bda      	ldrb	r2, [r3, #15]
 80051d2:	4b89      	ldr	r3, [pc, #548]	; (80053f8 <eepromKontrol+0x2c4>)
 80051d4:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80051d6:	4b78      	ldr	r3, [pc, #480]	; (80053b8 <eepromKontrol+0x284>)
 80051d8:	7c1a      	ldrb	r2, [r3, #16]
 80051da:	4b88      	ldr	r3, [pc, #544]	; (80053fc <eepromKontrol+0x2c8>)
 80051dc:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80051de:	4b76      	ldr	r3, [pc, #472]	; (80053b8 <eepromKontrol+0x284>)
 80051e0:	7c5a      	ldrb	r2, [r3, #17]
 80051e2:	4b87      	ldr	r3, [pc, #540]	; (8005400 <eepromKontrol+0x2cc>)
 80051e4:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80051e6:	4b74      	ldr	r3, [pc, #464]	; (80053b8 <eepromKontrol+0x284>)
 80051e8:	7c9a      	ldrb	r2, [r3, #18]
 80051ea:	4b86      	ldr	r3, [pc, #536]	; (8005404 <eepromKontrol+0x2d0>)
 80051ec:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80051ee:	4b72      	ldr	r3, [pc, #456]	; (80053b8 <eepromKontrol+0x284>)
 80051f0:	7cda      	ldrb	r2, [r3, #19]
 80051f2:	4b85      	ldr	r3, [pc, #532]	; (8005408 <eepromKontrol+0x2d4>)
 80051f4:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80051f6:	4b70      	ldr	r3, [pc, #448]	; (80053b8 <eepromKontrol+0x284>)
 80051f8:	7d1a      	ldrb	r2, [r3, #20]
 80051fa:	4b84      	ldr	r3, [pc, #528]	; (800540c <eepromKontrol+0x2d8>)
 80051fc:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80051fe:	4b6e      	ldr	r3, [pc, #440]	; (80053b8 <eepromKontrol+0x284>)
 8005200:	7d5a      	ldrb	r2, [r3, #21]
 8005202:	4b83      	ldr	r3, [pc, #524]	; (8005410 <eepromKontrol+0x2dc>)
 8005204:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005206:	4b6c      	ldr	r3, [pc, #432]	; (80053b8 <eepromKontrol+0x284>)
 8005208:	7d9a      	ldrb	r2, [r3, #22]
 800520a:	4b82      	ldr	r3, [pc, #520]	; (8005414 <eepromKontrol+0x2e0>)
 800520c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800520e:	4b6a      	ldr	r3, [pc, #424]	; (80053b8 <eepromKontrol+0x284>)
 8005210:	7dda      	ldrb	r2, [r3, #23]
 8005212:	4b81      	ldr	r3, [pc, #516]	; (8005418 <eepromKontrol+0x2e4>)
 8005214:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005216:	4b68      	ldr	r3, [pc, #416]	; (80053b8 <eepromKontrol+0x284>)
 8005218:	7e1a      	ldrb	r2, [r3, #24]
 800521a:	4b80      	ldr	r3, [pc, #512]	; (800541c <eepromKontrol+0x2e8>)
 800521c:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800521e:	4b66      	ldr	r3, [pc, #408]	; (80053b8 <eepromKontrol+0x284>)
 8005220:	7e5a      	ldrb	r2, [r3, #25]
 8005222:	4b7f      	ldr	r3, [pc, #508]	; (8005420 <eepromKontrol+0x2ec>)
 8005224:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005226:	4b64      	ldr	r3, [pc, #400]	; (80053b8 <eepromKontrol+0x284>)
 8005228:	7e9a      	ldrb	r2, [r3, #26]
 800522a:	4b7e      	ldr	r3, [pc, #504]	; (8005424 <eepromKontrol+0x2f0>)
 800522c:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800522e:	4b62      	ldr	r3, [pc, #392]	; (80053b8 <eepromKontrol+0x284>)
 8005230:	7eda      	ldrb	r2, [r3, #27]
 8005232:	4b7d      	ldr	r3, [pc, #500]	; (8005428 <eepromKontrol+0x2f4>)
 8005234:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005236:	4b60      	ldr	r3, [pc, #384]	; (80053b8 <eepromKontrol+0x284>)
 8005238:	7f1a      	ldrb	r2, [r3, #28]
 800523a:	4b7c      	ldr	r3, [pc, #496]	; (800542c <eepromKontrol+0x2f8>)
 800523c:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800523e:	4b5e      	ldr	r3, [pc, #376]	; (80053b8 <eepromKontrol+0x284>)
 8005240:	7f5a      	ldrb	r2, [r3, #29]
 8005242:	4b7b      	ldr	r3, [pc, #492]	; (8005430 <eepromKontrol+0x2fc>)
 8005244:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005246:	4b5c      	ldr	r3, [pc, #368]	; (80053b8 <eepromKontrol+0x284>)
 8005248:	7f9a      	ldrb	r2, [r3, #30]
 800524a:	4b7a      	ldr	r3, [pc, #488]	; (8005434 <eepromKontrol+0x300>)
 800524c:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800524e:	4b5a      	ldr	r3, [pc, #360]	; (80053b8 <eepromKontrol+0x284>)
 8005250:	7fda      	ldrb	r2, [r3, #31]
 8005252:	4b79      	ldr	r3, [pc, #484]	; (8005438 <eepromKontrol+0x304>)
 8005254:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005256:	4b58      	ldr	r3, [pc, #352]	; (80053b8 <eepromKontrol+0x284>)
 8005258:	f893 2020 	ldrb.w	r2, [r3, #32]
 800525c:	4b77      	ldr	r3, [pc, #476]	; (800543c <eepromKontrol+0x308>)
 800525e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005260:	4b55      	ldr	r3, [pc, #340]	; (80053b8 <eepromKontrol+0x284>)
 8005262:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005266:	4b76      	ldr	r3, [pc, #472]	; (8005440 <eepromKontrol+0x30c>)
 8005268:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800526a:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <eepromKontrol+0x284>)
 800526c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005270:	4b74      	ldr	r3, [pc, #464]	; (8005444 <eepromKontrol+0x310>)
 8005272:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005274:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <eepromKontrol+0x284>)
 8005276:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800527a:	4b73      	ldr	r3, [pc, #460]	; (8005448 <eepromKontrol+0x314>)
 800527c:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800527e:	4b4e      	ldr	r3, [pc, #312]	; (80053b8 <eepromKontrol+0x284>)
 8005280:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005284:	4b71      	ldr	r3, [pc, #452]	; (800544c <eepromKontrol+0x318>)
 8005286:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005288:	4b4b      	ldr	r3, [pc, #300]	; (80053b8 <eepromKontrol+0x284>)
 800528a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800528e:	4b70      	ldr	r3, [pc, #448]	; (8005450 <eepromKontrol+0x31c>)
 8005290:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005292:	4b49      	ldr	r3, [pc, #292]	; (80053b8 <eepromKontrol+0x284>)
 8005294:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005298:	4b6e      	ldr	r3, [pc, #440]	; (8005454 <eepromKontrol+0x320>)
 800529a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800529c:	4b46      	ldr	r3, [pc, #280]	; (80053b8 <eepromKontrol+0x284>)
 800529e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80052a2:	4b6d      	ldr	r3, [pc, #436]	; (8005458 <eepromKontrol+0x324>)
 80052a4:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80052a6:	4b44      	ldr	r3, [pc, #272]	; (80053b8 <eepromKontrol+0x284>)
 80052a8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80052ac:	4b6b      	ldr	r3, [pc, #428]	; (800545c <eepromKontrol+0x328>)
 80052ae:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80052b0:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <eepromKontrol+0x284>)
 80052b2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80052b6:	4b6a      	ldr	r3, [pc, #424]	; (8005460 <eepromKontrol+0x32c>)
 80052b8:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80052ba:	4b3f      	ldr	r3, [pc, #252]	; (80053b8 <eepromKontrol+0x284>)
 80052bc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80052c0:	4b68      	ldr	r3, [pc, #416]	; (8005464 <eepromKontrol+0x330>)
 80052c2:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80052c4:	4b3c      	ldr	r3, [pc, #240]	; (80053b8 <eepromKontrol+0x284>)
 80052c6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80052ca:	4b67      	ldr	r3, [pc, #412]	; (8005468 <eepromKontrol+0x334>)
 80052cc:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80052ce:	4b3a      	ldr	r3, [pc, #232]	; (80053b8 <eepromKontrol+0x284>)
 80052d0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80052d4:	4b65      	ldr	r3, [pc, #404]	; (800546c <eepromKontrol+0x338>)
 80052d6:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80052d8:	4b37      	ldr	r3, [pc, #220]	; (80053b8 <eepromKontrol+0x284>)
 80052da:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80052de:	4b64      	ldr	r3, [pc, #400]	; (8005470 <eepromKontrol+0x33c>)
 80052e0:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80052e2:	4b35      	ldr	r3, [pc, #212]	; (80053b8 <eepromKontrol+0x284>)
 80052e4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80052e8:	4b62      	ldr	r3, [pc, #392]	; (8005474 <eepromKontrol+0x340>)
 80052ea:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <eepromKontrol+0x284>)
 80052ee:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80052f2:	4b61      	ldr	r3, [pc, #388]	; (8005478 <eepromKontrol+0x344>)
 80052f4:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80052f6:	4b51      	ldr	r3, [pc, #324]	; (800543c <eepromKontrol+0x308>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b09      	cmp	r3, #9
 80052fc:	d902      	bls.n	8005304 <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 80052fe:	4b4f      	ldr	r3, [pc, #316]	; (800543c <eepromKontrol+0x308>)
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005304:	4b4c      	ldr	r3, [pc, #304]	; (8005438 <eepromKontrol+0x304>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b09      	cmp	r3, #9
 800530a:	d902      	bls.n	8005312 <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 800530c:	4b4a      	ldr	r3, [pc, #296]	; (8005438 <eepromKontrol+0x304>)
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005312:	4b48      	ldr	r3, [pc, #288]	; (8005434 <eepromKontrol+0x300>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b09      	cmp	r3, #9
 8005318:	d902      	bls.n	8005320 <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 800531a:	4b46      	ldr	r3, [pc, #280]	; (8005434 <eepromKontrol+0x300>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005320:	4b43      	ldr	r3, [pc, #268]	; (8005430 <eepromKontrol+0x2fc>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b09      	cmp	r3, #9
 8005326:	d902      	bls.n	800532e <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 8005328:	4b41      	ldr	r3, [pc, #260]	; (8005430 <eepromKontrol+0x2fc>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 800532e:	4b3f      	ldr	r3, [pc, #252]	; (800542c <eepromKontrol+0x2f8>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b09      	cmp	r3, #9
 8005334:	d902      	bls.n	800533c <eepromKontrol+0x208>
	    calismaSayisi1=0;
 8005336:	4b3d      	ldr	r3, [pc, #244]	; (800542c <eepromKontrol+0x2f8>)
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 800533c:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <eepromKontrol+0x290>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d902      	bls.n	800534a <eepromKontrol+0x216>
	    calismaSekli=0;
 8005344:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <eepromKontrol+0x290>)
 8005346:	2200      	movs	r2, #0
 8005348:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 800534a:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <eepromKontrol+0x294>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d902      	bls.n	8005358 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <eepromKontrol+0x294>)
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005358:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <eepromKontrol+0x298>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d902      	bls.n	8005366 <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 8005360:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <eepromKontrol+0x298>)
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005366:	4b1a      	ldr	r3, [pc, #104]	; (80053d0 <eepromKontrol+0x29c>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d902      	bls.n	8005374 <eepromKontrol+0x240>
	    altLimit=1;
 800536e:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <eepromKontrol+0x29c>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005374:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <eepromKontrol+0x2a0>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d902      	bls.n	8005382 <eepromKontrol+0x24e>
	    basincSalteri=1;
 800537c:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <eepromKontrol+0x2a0>)
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <eepromKontrol+0x2a4>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b03      	cmp	r3, #3
 8005388:	d902      	bls.n	8005390 <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <eepromKontrol+0x2a4>)
 800538c:	2203      	movs	r2, #3
 800538e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005390:	4b2f      	ldr	r3, [pc, #188]	; (8005450 <eepromKontrol+0x31c>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d902      	bls.n	800539e <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <eepromKontrol+0x31c>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <eepromKontrol+0x2a8>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d902      	bls.n	80053ac <eepromKontrol+0x278>
	    kapi1Tip=1;
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <eepromKontrol+0x2a8>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <eepromKontrol+0x2ac>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d966      	bls.n	8005482 <eepromKontrol+0x34e>
 80053b4:	e062      	b.n	800547c <eepromKontrol+0x348>
 80053b6:	bf00      	nop
 80053b8:	20000218 	.word	0x20000218
 80053bc:	20000374 	.word	0x20000374
 80053c0:	20000286 	.word	0x20000286
 80053c4:	200002e9 	.word	0x200002e9
 80053c8:	200002ec 	.word	0x200002ec
 80053cc:	200002ed 	.word	0x200002ed
 80053d0:	200002ee 	.word	0x200002ee
 80053d4:	200002ef 	.word	0x200002ef
 80053d8:	200002f0 	.word	0x200002f0
 80053dc:	200002f1 	.word	0x200002f1
 80053e0:	20000301 	.word	0x20000301
 80053e4:	200002f2 	.word	0x200002f2
 80053e8:	20000302 	.word	0x20000302
 80053ec:	200002f3 	.word	0x200002f3
 80053f0:	20000303 	.word	0x20000303
 80053f4:	200002f6 	.word	0x200002f6
 80053f8:	200002f7 	.word	0x200002f7
 80053fc:	200002f8 	.word	0x200002f8
 8005400:	200002f9 	.word	0x200002f9
 8005404:	200002fa 	.word	0x200002fa
 8005408:	200002fb 	.word	0x200002fb
 800540c:	200002fc 	.word	0x200002fc
 8005410:	200002fd 	.word	0x200002fd
 8005414:	200002fe 	.word	0x200002fe
 8005418:	200002ff 	.word	0x200002ff
 800541c:	20000300 	.word	0x20000300
 8005420:	20000304 	.word	0x20000304
 8005424:	20000306 	.word	0x20000306
 8005428:	200002e4 	.word	0x200002e4
 800542c:	200002e5 	.word	0x200002e5
 8005430:	200002e6 	.word	0x200002e6
 8005434:	200000a1 	.word	0x200000a1
 8005438:	200000a2 	.word	0x200000a2
 800543c:	200002e7 	.word	0x200002e7
 8005440:	20000309 	.word	0x20000309
 8005444:	20000307 	.word	0x20000307
 8005448:	200002f5 	.word	0x200002f5
 800544c:	20000308 	.word	0x20000308
 8005450:	200002f4 	.word	0x200002f4
 8005454:	2000030a 	.word	0x2000030a
 8005458:	2000030b 	.word	0x2000030b
 800545c:	2000030c 	.word	0x2000030c
 8005460:	2000030d 	.word	0x2000030d
 8005464:	2000030e 	.word	0x2000030e
 8005468:	2000030f 	.word	0x2000030f
 800546c:	20000310 	.word	0x20000310
 8005470:	20000311 	.word	0x20000311
 8005474:	20000312 	.word	0x20000312
 8005478:	20000313 	.word	0x20000313
	    kapi1AcSure=5;
 800547c:	4b56      	ldr	r3, [pc, #344]	; (80055d8 <eepromKontrol+0x4a4>)
 800547e:	2205      	movs	r2, #5
 8005480:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005482:	4b56      	ldr	r3, [pc, #344]	; (80055dc <eepromKontrol+0x4a8>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d902      	bls.n	8005490 <eepromKontrol+0x35c>
	    kapi2Tip=1;
 800548a:	4b54      	ldr	r3, [pc, #336]	; (80055dc <eepromKontrol+0x4a8>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005490:	4b53      	ldr	r3, [pc, #332]	; (80055e0 <eepromKontrol+0x4ac>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b05      	cmp	r3, #5
 8005496:	d902      	bls.n	800549e <eepromKontrol+0x36a>
	    kapi2AcSure=5;
 8005498:	4b51      	ldr	r3, [pc, #324]	; (80055e0 <eepromKontrol+0x4ac>)
 800549a:	2205      	movs	r2, #5
 800549c:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800549e:	4b51      	ldr	r3, [pc, #324]	; (80055e4 <eepromKontrol+0x4b0>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d902      	bls.n	80054ac <eepromKontrol+0x378>
	    kapitablaTip=1;
 80054a6:	4b4f      	ldr	r3, [pc, #316]	; (80055e4 <eepromKontrol+0x4b0>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80054ac:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <eepromKontrol+0x4b4>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d902      	bls.n	80054ba <eepromKontrol+0x386>
	    kapiTablaAcKonum=2;
 80054b4:	4b4c      	ldr	r3, [pc, #304]	; (80055e8 <eepromKontrol+0x4b4>)
 80054b6:	2202      	movs	r2, #2
 80054b8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80054ba:	4b4c      	ldr	r3, [pc, #304]	; (80055ec <eepromKontrol+0x4b8>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b05      	cmp	r3, #5
 80054c0:	d902      	bls.n	80054c8 <eepromKontrol+0x394>
	    kapiTablaAcSure=5;
 80054c2:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <eepromKontrol+0x4b8>)
 80054c4:	2205      	movs	r2, #5
 80054c6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80054c8:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <eepromKontrol+0x4bc>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d902      	bls.n	80054d6 <eepromKontrol+0x3a2>
	    yukariYavasLimit=0;
 80054d0:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <eepromKontrol+0x4bc>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80054d6:	4b47      	ldr	r3, [pc, #284]	; (80055f4 <eepromKontrol+0x4c0>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d902      	bls.n	80054e4 <eepromKontrol+0x3b0>
	    devirmeYuruyusSecim=0;
 80054de:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <eepromKontrol+0x4c0>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80054e4:	4b44      	ldr	r3, [pc, #272]	; (80055f8 <eepromKontrol+0x4c4>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d902      	bls.n	80054f2 <eepromKontrol+0x3be>
	    devirmeYukariIleriLimit=1;
 80054ec:	4b42      	ldr	r3, [pc, #264]	; (80055f8 <eepromKontrol+0x4c4>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80054f2:	4b42      	ldr	r3, [pc, #264]	; (80055fc <eepromKontrol+0x4c8>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d902      	bls.n	8005500 <eepromKontrol+0x3cc>
	    devirmeAsagiGeriLimit=1;
 80054fa:	4b40      	ldr	r3, [pc, #256]	; (80055fc <eepromKontrol+0x4c8>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005500:	4b3f      	ldr	r3, [pc, #252]	; (8005600 <eepromKontrol+0x4cc>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d902      	bls.n	800550e <eepromKontrol+0x3da>
	    devirmeSilindirTipi=0;
 8005508:	4b3d      	ldr	r3, [pc, #244]	; (8005600 <eepromKontrol+0x4cc>)
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800550e:	4b3d      	ldr	r3, [pc, #244]	; (8005604 <eepromKontrol+0x4d0>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d902      	bls.n	800551c <eepromKontrol+0x3e8>
	    platformSilindirTipi=0;
 8005516:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <eepromKontrol+0x4d0>)
 8005518:	2200      	movs	r2, #0
 800551a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 800551c:	4b3a      	ldr	r3, [pc, #232]	; (8005608 <eepromKontrol+0x4d4>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b05      	cmp	r3, #5
 8005522:	d902      	bls.n	800552a <eepromKontrol+0x3f6>
	    yukariValfTmr=0;
 8005524:	4b38      	ldr	r3, [pc, #224]	; (8005608 <eepromKontrol+0x4d4>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 800552a:	4b38      	ldr	r3, [pc, #224]	; (800560c <eepromKontrol+0x4d8>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b05      	cmp	r3, #5
 8005530:	d902      	bls.n	8005538 <eepromKontrol+0x404>
	    asagiValfTmr=0;
 8005532:	4b36      	ldr	r3, [pc, #216]	; (800560c <eepromKontrol+0x4d8>)
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005538:	4b35      	ldr	r3, [pc, #212]	; (8005610 <eepromKontrol+0x4dc>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b05      	cmp	r3, #5
 800553e:	d902      	bls.n	8005546 <eepromKontrol+0x412>
	    devirmeYukariIleriTmr=0;
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <eepromKontrol+0x4dc>)
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005546:	4b33      	ldr	r3, [pc, #204]	; (8005614 <eepromKontrol+0x4e0>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b05      	cmp	r3, #5
 800554c:	d902      	bls.n	8005554 <eepromKontrol+0x420>
	    devirmeAsagiGeriTmr=0;
 800554e:	4b31      	ldr	r3, [pc, #196]	; (8005614 <eepromKontrol+0x4e0>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005554:	4b30      	ldr	r3, [pc, #192]	; (8005618 <eepromKontrol+0x4e4>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2bb4      	cmp	r3, #180	; 0xb4
 800555a:	d902      	bls.n	8005562 <eepromKontrol+0x42e>
	    makineCalismaTmr=60;
 800555c:	4b2e      	ldr	r3, [pc, #184]	; (8005618 <eepromKontrol+0x4e4>)
 800555e:	223c      	movs	r2, #60	; 0x3c
 8005560:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005562:	4b2e      	ldr	r3, [pc, #184]	; (800561c <eepromKontrol+0x4e8>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d902      	bls.n	8005570 <eepromKontrol+0x43c>
	    buzzer=0;
 800556a:	4b2c      	ldr	r3, [pc, #176]	; (800561c <eepromKontrol+0x4e8>)
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005570:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <eepromKontrol+0x4ec>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d902      	bls.n	800557e <eepromKontrol+0x44a>
	    demoMode=0;
 8005578:	4b29      	ldr	r3, [pc, #164]	; (8005620 <eepromKontrol+0x4ec>)
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800557e:	4b29      	ldr	r3, [pc, #164]	; (8005624 <eepromKontrol+0x4f0>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d902      	bls.n	800558c <eepromKontrol+0x458>
	    calismaSayModu=0;
 8005586:	4b27      	ldr	r3, [pc, #156]	; (8005624 <eepromKontrol+0x4f0>)
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800558c:	4b26      	ldr	r3, [pc, #152]	; (8005628 <eepromKontrol+0x4f4>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d902      	bls.n	800559a <eepromKontrol+0x466>
	    dilSecim=0;
 8005594:	4b24      	ldr	r3, [pc, #144]	; (8005628 <eepromKontrol+0x4f4>)
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <eepromKontrol+0x4f8>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d902      	bls.n	80055a8 <eepromKontrol+0x474>
		iotMode=0;
 80055a2:	4b22      	ldr	r3, [pc, #136]	; (800562c <eepromKontrol+0x4f8>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <eepromKontrol+0x4fc>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	4b21      	ldr	r3, [pc, #132]	; (8005634 <eepromKontrol+0x500>)
 80055b0:	441a      	add	r2, r3
 80055b2:	4b21      	ldr	r3, [pc, #132]	; (8005638 <eepromKontrol+0x504>)
 80055b4:	6810      	ldr	r0, [r2, #0]
 80055b6:	6851      	ldr	r1, [r2, #4]
 80055b8:	6892      	ldr	r2, [r2, #8]
 80055ba:	c307      	stmia	r3!, {r0, r1, r2}
	readValFromEEPROM(1); //SSID Okuma
 80055bc:	2001      	movs	r0, #1
 80055be:	f7fb f995 	bl	80008ec <readValFromEEPROM>
	HAL_Delay(250);
 80055c2:	20fa      	movs	r0, #250	; 0xfa
 80055c4:	f003 f8bc 	bl	8008740 <HAL_Delay>
	readValFromEEPROM(2); //Pass Okuma
 80055c8:	2002      	movs	r0, #2
 80055ca:	f7fb f98f 	bl	80008ec <readValFromEEPROM>
	//readWiFiCredentialsFromEEPROM(wifiSSID, wifiPass);
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000301 	.word	0x20000301
 80055dc:	200002f2 	.word	0x200002f2
 80055e0:	20000302 	.word	0x20000302
 80055e4:	200002f3 	.word	0x200002f3
 80055e8:	200002f5 	.word	0x200002f5
 80055ec:	20000303 	.word	0x20000303
 80055f0:	200002f6 	.word	0x200002f6
 80055f4:	200002f7 	.word	0x200002f7
 80055f8:	200002f8 	.word	0x200002f8
 80055fc:	200002f9 	.word	0x200002f9
 8005600:	200002fa 	.word	0x200002fa
 8005604:	200002fb 	.word	0x200002fb
 8005608:	200002fc 	.word	0x200002fc
 800560c:	200002fd 	.word	0x200002fd
 8005610:	200002fe 	.word	0x200002fe
 8005614:	200002ff 	.word	0x200002ff
 8005618:	20000300 	.word	0x20000300
 800561c:	20000304 	.word	0x20000304
 8005620:	20000306 	.word	0x20000306
 8005624:	20000308 	.word	0x20000308
 8005628:	20000309 	.word	0x20000309
 800562c:	20000307 	.word	0x20000307
 8005630:	2000009d 	.word	0x2000009d
 8005634:	20000218 	.word	0x20000218
 8005638:	200002b0 	.word	0x200002b0

0800563c <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af04      	add	r7, sp, #16
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005646:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <hata2EEPROM+0xa4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <hata2EEPROM+0xa8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4413      	add	r3, r2
 8005652:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <hata2EEPROM+0xac>)
 8005654:	5cd3      	ldrb	r3, [r2, r3]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800565a:	f000 f849 	bl	80056f0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800565e:	e000      	b.n	8005662 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005660:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e012      	b.n	800568e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <hata2EEPROM+0xa8>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	4a1d      	ldr	r2, [pc, #116]	; (80056e8 <hata2EEPROM+0xac>)
 8005672:	5cd3      	ldrb	r3, [r2, r3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d107      	bne.n	8005688 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005678:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <hata2EEPROM+0xa8>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	4919      	ldr	r1, [pc, #100]	; (80056e8 <hata2EEPROM+0xac>)
 8005682:	79fa      	ldrb	r2, [r7, #7]
 8005684:	54ca      	strb	r2, [r1, r3]
					break;
 8005686:	e007      	b.n	8005698 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	4b14      	ldr	r3, [pc, #80]	; (80056e0 <hata2EEPROM+0xa4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	429a      	cmp	r2, r3
 8005696:	dbe7      	blt.n	8005668 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <hata2EEPROM+0xa8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	b299      	uxth	r1, r3
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <hata2EEPROM+0xa4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	b298      	uxth	r0, r3
 80056a4:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <hata2EEPROM+0xa8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <hata2EEPROM+0xac>)
 80056aa:	4413      	add	r3, r2
 80056ac:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <hata2EEPROM+0xa4>)
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	b292      	uxth	r2, r2
 80056b2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80056b6:	9402      	str	r4, [sp, #8]
 80056b8:	9201      	str	r2, [sp, #4]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	4603      	mov	r3, r0
 80056be:	460a      	mov	r2, r1
 80056c0:	21a0      	movs	r1, #160	; 0xa0
 80056c2:	480a      	ldr	r0, [pc, #40]	; (80056ec <hata2EEPROM+0xb0>)
 80056c4:	f004 f8c6 	bl	8009854 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80056c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056cc:	f003 f838 	bl	8008740 <HAL_Delay>
	eepromKontrol(1);
 80056d0:	2001      	movs	r0, #1
 80056d2:	f7ff fd2f 	bl	8005134 <eepromKontrol>
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd90      	pop	{r4, r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000028 	.word	0x20000028
 80056e4:	2000002c 	.word	0x2000002c
 80056e8:	20000218 	.word	0x20000218
 80056ec:	20000374 	.word	0x20000374

080056f0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 80056f6:	2300      	movs	r3, #0
 80056f8:	607b      	str	r3, [r7, #4]
 80056fa:	e009      	b.n	8005710 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 80056fc:	4a0a      	ldr	r2, [pc, #40]	; (8005728 <eepromDataFillWithEmpty+0x38>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005704:	4a09      	ldr	r2, [pc, #36]	; (800572c <eepromDataFillWithEmpty+0x3c>)
 8005706:	2100      	movs	r1, #0
 8005708:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3301      	adds	r3, #1
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	4b07      	ldr	r3, [pc, #28]	; (8005730 <eepromDataFillWithEmpty+0x40>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	dbf0      	blt.n	80056fc <eepromDataFillWithEmpty+0xc>
	}
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000000 	.word	0x20000000
 800572c:	20000218 	.word	0x20000218
 8005730:	20000028 	.word	0x20000028

08005734 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
	timer1=millis;
 8005738:	4b47      	ldr	r3, [pc, #284]	; (8005858 <bekle+0x124>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a47      	ldr	r2, [pc, #284]	; (800585c <bekle+0x128>)
 800573e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005740:	e002      	b.n	8005748 <bekle+0x14>
    	butonKontrol = 1;
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <bekle+0x12c>)
 8005744:	2201      	movs	r2, #1
 8005746:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005748:	2101      	movs	r1, #1
 800574a:	4846      	ldr	r0, [pc, #280]	; (8005864 <bekle+0x130>)
 800574c:	f003 fdc8 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d109      	bne.n	800576a <bekle+0x36>
 8005756:	4b40      	ldr	r3, [pc, #256]	; (8005858 <bekle+0x124>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b40      	ldr	r3, [pc, #256]	; (800585c <bekle+0x128>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d0ef      	beq.n	8005742 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005762:	e002      	b.n	800576a <bekle+0x36>
    	butonKontrol = 1;
 8005764:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <bekle+0x12c>)
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800576a:	2108      	movs	r1, #8
 800576c:	483e      	ldr	r0, [pc, #248]	; (8005868 <bekle+0x134>)
 800576e:	f003 fdb7 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005772:	4603      	mov	r3, r0
 8005774:	2b01      	cmp	r3, #1
 8005776:	d109      	bne.n	800578c <bekle+0x58>
 8005778:	4b37      	ldr	r3, [pc, #220]	; (8005858 <bekle+0x124>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b37      	ldr	r3, [pc, #220]	; (800585c <bekle+0x128>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d0ef      	beq.n	8005764 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005784:	e002      	b.n	800578c <bekle+0x58>
    	butonKontrol = 1;
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <bekle+0x12c>)
 8005788:	2201      	movs	r2, #1
 800578a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800578c:	2102      	movs	r1, #2
 800578e:	4835      	ldr	r0, [pc, #212]	; (8005864 <bekle+0x130>)
 8005790:	f003 fda6 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005794:	4603      	mov	r3, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	d109      	bne.n	80057ae <bekle+0x7a>
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <bekle+0x124>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b2f      	ldr	r3, [pc, #188]	; (800585c <bekle+0x128>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d0ef      	beq.n	8005786 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057a6:	e002      	b.n	80057ae <bekle+0x7a>
    	butonKontrol = 1;
 80057a8:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <bekle+0x12c>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057ae:	2104      	movs	r1, #4
 80057b0:	482c      	ldr	r0, [pc, #176]	; (8005864 <bekle+0x130>)
 80057b2:	f003 fd95 	bl	80092e0 <HAL_GPIO_ReadPin>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d109      	bne.n	80057d0 <bekle+0x9c>
 80057bc:	4b26      	ldr	r3, [pc, #152]	; (8005858 <bekle+0x124>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4b26      	ldr	r3, [pc, #152]	; (800585c <bekle+0x128>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d0ef      	beq.n	80057a8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057c8:	e002      	b.n	80057d0 <bekle+0x9c>
    	butonKontrol = 1;
 80057ca:	4b25      	ldr	r3, [pc, #148]	; (8005860 <bekle+0x12c>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057d0:	2108      	movs	r1, #8
 80057d2:	4824      	ldr	r0, [pc, #144]	; (8005864 <bekle+0x130>)
 80057d4:	f003 fd84 	bl	80092e0 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d109      	bne.n	80057f2 <bekle+0xbe>
 80057de:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <bekle+0x124>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b1e      	ldr	r3, [pc, #120]	; (800585c <bekle+0x128>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d0ef      	beq.n	80057ca <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80057ea:	e002      	b.n	80057f2 <bekle+0xbe>
    	butonKontrol = 1;
 80057ec:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <bekle+0x12c>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80057f2:	2180      	movs	r1, #128	; 0x80
 80057f4:	481c      	ldr	r0, [pc, #112]	; (8005868 <bekle+0x134>)
 80057f6:	f003 fd73 	bl	80092e0 <HAL_GPIO_ReadPin>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <bekle+0xe0>
 8005800:	4b15      	ldr	r3, [pc, #84]	; (8005858 <bekle+0x124>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b15      	ldr	r3, [pc, #84]	; (800585c <bekle+0x128>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d0ef      	beq.n	80057ec <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800580c:	e002      	b.n	8005814 <bekle+0xe0>
    	butonKontrol = 1;
 800580e:	4b14      	ldr	r3, [pc, #80]	; (8005860 <bekle+0x12c>)
 8005810:	2201      	movs	r2, #1
 8005812:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005818:	4813      	ldr	r0, [pc, #76]	; (8005868 <bekle+0x134>)
 800581a:	f003 fd61 	bl	80092e0 <HAL_GPIO_ReadPin>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <bekle+0x104>
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <bekle+0x124>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <bekle+0x128>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d0ee      	beq.n	800580e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005830:	e002      	b.n	8005838 <bekle+0x104>
    	butonKontrol = 1;
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <bekle+0x12c>)
 8005834:	2201      	movs	r2, #1
 8005836:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800583c:	480a      	ldr	r0, [pc, #40]	; (8005868 <bekle+0x134>)
 800583e:	f003 fd4f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <bekle+0x120>
 8005848:	4b03      	ldr	r3, [pc, #12]	; (8005858 <bekle+0x124>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b03      	ldr	r3, [pc, #12]	; (800585c <bekle+0x128>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d0ee      	beq.n	8005832 <bekle+0xfe>
    }

}
 8005854:	bf00      	nop
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000290 	.word	0x20000290
 800585c:	20000298 	.word	0x20000298
 8005860:	20000317 	.word	0x20000317
 8005864:	40010800 	.word	0x40010800
 8005868:	40011000 	.word	0x40011000

0800586c <i2cTest>:

void i2cTest() {
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8005872:	463b      	mov	r3, r7
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	609a      	str	r2, [r3, #8]
 800587c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800587e:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <i2cTest+0x154>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4b4e      	ldr	r3, [pc, #312]	; (80059c0 <i2cTest+0x154>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0201 	bic.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800588e:	484c      	ldr	r0, [pc, #304]	; (80059c0 <i2cTest+0x154>)
 8005890:	f003 feb2 	bl	80095f8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005894:	23c0      	movs	r3, #192	; 0xc0
 8005896:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005898:	2311      	movs	r3, #17
 800589a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800589c:	2301      	movs	r3, #1
 800589e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80058a0:	2303      	movs	r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80058a4:	463b      	mov	r3, r7
 80058a6:	4619      	mov	r1, r3
 80058a8:	4846      	ldr	r0, [pc, #280]	; (80059c4 <i2cTest+0x158>)
 80058aa:	f003 fab9 	bl	8008e20 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80058ae:	2201      	movs	r2, #1
 80058b0:	2140      	movs	r1, #64	; 0x40
 80058b2:	4844      	ldr	r0, [pc, #272]	; (80059c4 <i2cTest+0x158>)
 80058b4:	f003 fd2b 	bl	800930e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80058b8:	2201      	movs	r2, #1
 80058ba:	2180      	movs	r1, #128	; 0x80
 80058bc:	4841      	ldr	r0, [pc, #260]	; (80059c4 <i2cTest+0x158>)
 80058be:	f003 fd26 	bl	800930e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80058c2:	200a      	movs	r0, #10
 80058c4:	f002 ff3c 	bl	8008740 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80058c8:	bf00      	nop
 80058ca:	2140      	movs	r1, #64	; 0x40
 80058cc:	483d      	ldr	r0, [pc, #244]	; (80059c4 <i2cTest+0x158>)
 80058ce:	f003 fd07 	bl	80092e0 <HAL_GPIO_ReadPin>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d006      	beq.n	80058e6 <i2cTest+0x7a>
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	483a      	ldr	r0, [pc, #232]	; (80059c4 <i2cTest+0x158>)
 80058dc:	f003 fd00 	bl	80092e0 <HAL_GPIO_ReadPin>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d1f1      	bne.n	80058ca <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80058e6:	2200      	movs	r2, #0
 80058e8:	2180      	movs	r1, #128	; 0x80
 80058ea:	4836      	ldr	r0, [pc, #216]	; (80059c4 <i2cTest+0x158>)
 80058ec:	f003 fd0f 	bl	800930e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80058f0:	200a      	movs	r0, #10
 80058f2:	f002 ff25 	bl	8008740 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80058f6:	bf00      	nop
 80058f8:	2180      	movs	r1, #128	; 0x80
 80058fa:	4832      	ldr	r0, [pc, #200]	; (80059c4 <i2cTest+0x158>)
 80058fc:	f003 fcf0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d0f8      	beq.n	80058f8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005906:	2200      	movs	r2, #0
 8005908:	2140      	movs	r1, #64	; 0x40
 800590a:	482e      	ldr	r0, [pc, #184]	; (80059c4 <i2cTest+0x158>)
 800590c:	f003 fcff 	bl	800930e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005910:	200a      	movs	r0, #10
 8005912:	f002 ff15 	bl	8008740 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8005916:	bf00      	nop
 8005918:	2140      	movs	r1, #64	; 0x40
 800591a:	482a      	ldr	r0, [pc, #168]	; (80059c4 <i2cTest+0x158>)
 800591c:	f003 fce0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005920:	4603      	mov	r3, r0
 8005922:	2b01      	cmp	r3, #1
 8005924:	d0f8      	beq.n	8005918 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005926:	2201      	movs	r2, #1
 8005928:	2140      	movs	r1, #64	; 0x40
 800592a:	4826      	ldr	r0, [pc, #152]	; (80059c4 <i2cTest+0x158>)
 800592c:	f003 fcef 	bl	800930e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005930:	200a      	movs	r0, #10
 8005932:	f002 ff05 	bl	8008740 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8005936:	bf00      	nop
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	4822      	ldr	r0, [pc, #136]	; (80059c4 <i2cTest+0x158>)
 800593c:	f003 fcd0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005940:	4603      	mov	r3, r0
 8005942:	2b01      	cmp	r3, #1
 8005944:	d1f8      	bne.n	8005938 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005946:	2201      	movs	r2, #1
 8005948:	2180      	movs	r1, #128	; 0x80
 800594a:	481e      	ldr	r0, [pc, #120]	; (80059c4 <i2cTest+0x158>)
 800594c:	f003 fcdf 	bl	800930e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005950:	200a      	movs	r0, #10
 8005952:	f002 fef5 	bl	8008740 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005956:	bf00      	nop
 8005958:	2180      	movs	r1, #128	; 0x80
 800595a:	481a      	ldr	r0, [pc, #104]	; (80059c4 <i2cTest+0x158>)
 800595c:	f003 fcc0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d1f8      	bne.n	8005958 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005966:	23c0      	movs	r3, #192	; 0xc0
 8005968:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800596a:	2312      	movs	r3, #18
 800596c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800596e:	2301      	movs	r3, #1
 8005970:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005972:	2303      	movs	r3, #3
 8005974:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005976:	463b      	mov	r3, r7
 8005978:	4619      	mov	r1, r3
 800597a:	4812      	ldr	r0, [pc, #72]	; (80059c4 <i2cTest+0x158>)
 800597c:	f003 fa50 	bl	8008e20 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <i2cTest+0x154>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <i2cTest+0x154>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800598e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <i2cTest+0x154>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <i2cTest+0x154>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800599e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <i2cTest+0x154>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <i2cTest+0x154>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80059b0:	4803      	ldr	r0, [pc, #12]	; (80059c0 <i2cTest+0x154>)
 80059b2:	f003 fcdd 	bl	8009370 <HAL_I2C_Init>
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000374 	.word	0x20000374
 80059c4:	40010c00 	.word	0x40010c00

080059c8 <checkLCDBacklight>:

void checkLCDBacklight() {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <checkLCDBacklight+0x34>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <checkLCDBacklight+0x38>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <checkLCDBacklight+0x3c>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	460b      	mov	r3, r1
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d303      	bcc.n	80059f0 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80059e8:	2000      	movs	r0, #0
 80059ea:	f7fa ff31 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80059ee:	e002      	b.n	80059f6 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80059f0:	2001      	movs	r0, #1
 80059f2:	f7fa ff2d 	bl	8000850 <lcd_backlight>
}
 80059f6:	bf00      	nop
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000290 	.word	0x20000290
 8005a00:	200002ac 	.word	0x200002ac
 8005a04:	200000a0 	.word	0x200000a0

08005a08 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <checkBasincSalteri+0x54>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <checkBasincSalteri+0x12>
		basincVar=1;
 8005a14:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <checkBasincSalteri+0x58>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <checkBasincSalteri+0x54>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d119      	bne.n	8005a56 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8005a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a26:	480f      	ldr	r0, [pc, #60]	; (8005a64 <checkBasincSalteri+0x5c>)
 8005a28:	f003 fc5a 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8005a32:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <checkBasincSalteri+0x60>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <checkBasincSalteri+0x64>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d90a      	bls.n	8005a56 <checkBasincSalteri+0x4e>
				basincVar=1;
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <checkBasincSalteri+0x58>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8005a46:	e006      	b.n	8005a56 <checkBasincSalteri+0x4e>
			timer5=millis;
 8005a48:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <checkBasincSalteri+0x60>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <checkBasincSalteri+0x64>)
 8005a4e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <checkBasincSalteri+0x58>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	200002ef 	.word	0x200002ef
 8005a60:	200002eb 	.word	0x200002eb
 8005a64:	40011000 	.word	0x40011000
 8005a68:	20000290 	.word	0x20000290
 8005a6c:	200002a8 	.word	0x200002a8

08005a70 <checkBasGonder>:

void checkBasGonder() {
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <checkBasGonder+0x74>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d10b      	bne.n	8005a94 <checkBasGonder+0x24>
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <checkBasGonder+0x78>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <checkBasGonder+0x24>
 8005a84:	4b19      	ldr	r3, [pc, #100]	; (8005aec <checkBasGonder+0x7c>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8005a8c:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <checkBasGonder+0x80>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e009      	b.n	8005aa8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005a94:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <checkBasGonder+0x78>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f083 0301 	eor.w	r3, r3, #1
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8005aa2:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <checkBasGonder+0x80>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005aa8:	4b0e      	ldr	r3, [pc, #56]	; (8005ae4 <checkBasGonder+0x74>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d10b      	bne.n	8005ac8 <checkBasGonder+0x58>
 8005ab0:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <checkBasGonder+0x84>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <checkBasGonder+0x58>
 8005ab8:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <checkBasGonder+0x7c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <checkBasGonder+0x88>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8005ac6:	e009      	b.n	8005adc <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <checkBasGonder+0x84>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f083 0301 	eor.w	r3, r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <checkBasGonder+0x88>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	200002e9 	.word	0x200002e9
 8005ae8:	2000031d 	.word	0x2000031d
 8005aec:	200002f7 	.word	0x200002f7
 8005af0:	20000324 	.word	0x20000324
 8005af4:	20000320 	.word	0x20000320
 8005af8:	20000325 	.word	0x20000325

08005afc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005b00:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <checkKapiSecimleri+0x98>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <checkKapiSecimleri+0x9c>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8005b0e:	4b21      	ldr	r3, [pc, #132]	; (8005b94 <checkKapiSecimleri+0x98>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d10e      	bne.n	8005b34 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b1a:	4820      	ldr	r0, [pc, #128]	; (8005b9c <checkKapiSecimleri+0xa0>)
 8005b1c:	f003 fbe0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8005b26:	4b1c      	ldr	r3, [pc, #112]	; (8005b98 <checkKapiSecimleri+0x9c>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e002      	b.n	8005b34 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <checkKapiSecimleri+0x9c>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8005b34:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <checkKapiSecimleri+0x98>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d10e      	bne.n	8005b5a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8005b3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b40:	4816      	ldr	r0, [pc, #88]	; (8005b9c <checkKapiSecimleri+0xa0>)
 8005b42:	f003 fbcd 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8005b4c:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <checkKapiSecimleri+0x9c>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8005b54:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <checkKapiSecimleri+0x9c>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8005b5a:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <checkKapiSecimleri+0x98>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d116      	bne.n	8005b90 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8005b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b66:	480d      	ldr	r0, [pc, #52]	; (8005b9c <checkKapiSecimleri+0xa0>)
 8005b68:	f003 fbba 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <checkKapiSecimleri+0x8e>
 8005b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b76:	4809      	ldr	r0, [pc, #36]	; (8005b9c <checkKapiSecimleri+0xa0>)
 8005b78:	f003 fbb2 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <checkKapiSecimleri+0x9c>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8005b88:	e002      	b.n	8005b90 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8005b8a:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <checkKapiSecimleri+0x9c>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
}
 8005b90:	bf00      	nop
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	200002f0 	.word	0x200002f0
 8005b98:	2000033b 	.word	0x2000033b
 8005b9c:	40010800 	.word	0x40010800

08005ba0 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005ba4:	4b62      	ldr	r3, [pc, #392]	; (8005d30 <checkAktifCalisma+0x190>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f041 833e 	bne.w	800722a <checkAktifCalisma+0x168a>
 8005bae:	4b61      	ldr	r3, [pc, #388]	; (8005d34 <checkAktifCalisma+0x194>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f041 8339 	bne.w	800722a <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005bb8:	4b5f      	ldr	r3, [pc, #380]	; (8005d38 <checkAktifCalisma+0x198>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d11a      	bne.n	8005bf6 <checkAktifCalisma+0x56>
 8005bc0:	4b5e      	ldr	r3, [pc, #376]	; (8005d3c <checkAktifCalisma+0x19c>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d116      	bne.n	8005bf6 <checkAktifCalisma+0x56>
 8005bc8:	4b5d      	ldr	r3, [pc, #372]	; (8005d40 <checkAktifCalisma+0x1a0>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <checkAktifCalisma+0x46>
 8005bd0:	4b5c      	ldr	r3, [pc, #368]	; (8005d44 <checkAktifCalisma+0x1a4>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f083 0301 	eor.w	r3, r3, #1
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <checkAktifCalisma+0x46>
 8005bde:	4b5a      	ldr	r3, [pc, #360]	; (8005d48 <checkAktifCalisma+0x1a8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d007      	beq.n	8005bf6 <checkAktifCalisma+0x56>
 8005be6:	4b59      	ldr	r3, [pc, #356]	; (8005d4c <checkAktifCalisma+0x1ac>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d018      	beq.n	8005c20 <checkAktifCalisma+0x80>
 8005bee:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <checkAktifCalisma+0x1b0>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d114      	bne.n	8005c20 <checkAktifCalisma+0x80>
 8005bf6:	4b57      	ldr	r3, [pc, #348]	; (8005d54 <checkAktifCalisma+0x1b4>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <checkAktifCalisma+0x80>
 8005bfe:	4b56      	ldr	r3, [pc, #344]	; (8005d58 <checkAktifCalisma+0x1b8>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005c06:	2201      	movs	r2, #1
 8005c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c0c:	4853      	ldr	r0, [pc, #332]	; (8005d5c <checkAktifCalisma+0x1bc>)
 8005c0e:	f003 fb7e 	bl	800930e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8005c12:	4b53      	ldr	r3, [pc, #332]	; (8005d60 <checkAktifCalisma+0x1c0>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8005c18:	4b52      	ldr	r3, [pc, #328]	; (8005d64 <checkAktifCalisma+0x1c4>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e008      	b.n	8005c32 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005c20:	2200      	movs	r2, #0
 8005c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c26:	484d      	ldr	r0, [pc, #308]	; (8005d5c <checkAktifCalisma+0x1bc>)
 8005c28:	f003 fb71 	bl	800930e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8005c2c:	4b4c      	ldr	r3, [pc, #304]	; (8005d60 <checkAktifCalisma+0x1c0>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8005c32:	4b40      	ldr	r3, [pc, #256]	; (8005d34 <checkAktifCalisma+0x194>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d160      	bne.n	8005cfc <checkAktifCalisma+0x15c>
 8005c3a:	4b46      	ldr	r3, [pc, #280]	; (8005d54 <checkAktifCalisma+0x1b4>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d05c      	beq.n	8005cfc <checkAktifCalisma+0x15c>
 8005c42:	4b45      	ldr	r3, [pc, #276]	; (8005d58 <checkAktifCalisma+0x1b8>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d058      	beq.n	8005cfc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c4e:	4843      	ldr	r0, [pc, #268]	; (8005d5c <checkAktifCalisma+0x1bc>)
 8005c50:	f003 fb46 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <checkAktifCalisma+0xc2>
 8005c5a:	4b43      	ldr	r3, [pc, #268]	; (8005d68 <checkAktifCalisma+0x1c8>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d04c      	beq.n	8005cfc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005c62:	2102      	movs	r1, #2
 8005c64:	4841      	ldr	r0, [pc, #260]	; (8005d6c <checkAktifCalisma+0x1cc>)
 8005c66:	f003 fb3b 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d145      	bne.n	8005cfc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005c70:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <checkAktifCalisma+0x1d0>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d041      	beq.n	8005cfc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c7c:	4837      	ldr	r0, [pc, #220]	; (8005d5c <checkAktifCalisma+0x1bc>)
 8005c7e:	f003 fb2f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10e      	bne.n	8005ca6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c8c:	4833      	ldr	r0, [pc, #204]	; (8005d5c <checkAktifCalisma+0x1bc>)
 8005c8e:	f003 fb27 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d106      	bne.n	8005ca6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	4834      	ldr	r0, [pc, #208]	; (8005d6c <checkAktifCalisma+0x1cc>)
 8005c9c:	f003 fb20 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d003      	beq.n	8005cae <checkAktifCalisma+0x10e>
 8005ca6:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <checkAktifCalisma+0x198>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d026      	beq.n	8005cfc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <checkAktifCalisma+0x1a0>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f083 0301 	eor.w	r3, r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01f      	beq.n	8005cfc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005cbc:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <checkAktifCalisma+0x19c>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	f083 0301 	eor.w	r3, r3, #1
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8005cca:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <checkAktifCalisma+0x1ac>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	f083 0301 	eor.w	r3, r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d011      	beq.n	8005cfc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005cd8:	4b26      	ldr	r3, [pc, #152]	; (8005d74 <checkAktifCalisma+0x1d4>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <checkAktifCalisma+0x1d8>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005cf4:	4b10      	ldr	r3, [pc, #64]	; (8005d38 <checkAktifCalisma+0x198>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	e002      	b.n	8005d02 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005cfc:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <checkAktifCalisma+0x198>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005d02:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <checkAktifCalisma+0x198>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d03a      	beq.n	8005d80 <checkAktifCalisma+0x1e0>
 8005d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d0e:	4817      	ldr	r0, [pc, #92]	; (8005d6c <checkAktifCalisma+0x1cc>)
 8005d10:	f003 fae6 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d132      	bne.n	8005d80 <checkAktifCalisma+0x1e0>
 8005d1a:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <checkAktifCalisma+0x1dc>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d02e      	beq.n	8005d80 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005d22:	2201      	movs	r2, #1
 8005d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d28:	480c      	ldr	r0, [pc, #48]	; (8005d5c <checkAktifCalisma+0x1bc>)
 8005d2a:	f003 faf0 	bl	800930e <HAL_GPIO_WritePin>
 8005d2e:	e02d      	b.n	8005d8c <checkAktifCalisma+0x1ec>
 8005d30:	20000306 	.word	0x20000306
 8005d34:	20000305 	.word	0x20000305
 8005d38:	2000031d 	.word	0x2000031d
 8005d3c:	2000031e 	.word	0x2000031e
 8005d40:	20000320 	.word	0x20000320
 8005d44:	20000318 	.word	0x20000318
 8005d48:	200002fb 	.word	0x200002fb
 8005d4c:	2000031f 	.word	0x2000031f
 8005d50:	200002fa 	.word	0x200002fa
 8005d54:	2000033a 	.word	0x2000033a
 8005d58:	2000033b 	.word	0x2000033b
 8005d5c:	40010c00 	.word	0x40010c00
 8005d60:	2000033c 	.word	0x2000033c
 8005d64:	20000327 	.word	0x20000327
 8005d68:	20000324 	.word	0x20000324
 8005d6c:	40011000 	.word	0x40011000
 8005d70:	200002eb 	.word	0x200002eb
 8005d74:	20000322 	.word	0x20000322
 8005d78:	20000323 	.word	0x20000323
 8005d7c:	200002f6 	.word	0x200002f6
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005d80:	2200      	movs	r2, #0
 8005d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d86:	4860      	ldr	r0, [pc, #384]	; (8005f08 <checkAktifCalisma+0x368>)
 8005d88:	f003 fac1 	bl	800930e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005d8c:	4b5f      	ldr	r3, [pc, #380]	; (8005f0c <checkAktifCalisma+0x36c>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <checkAktifCalisma+0x21c>
 8005d94:	4b5e      	ldr	r3, [pc, #376]	; (8005f10 <checkAktifCalisma+0x370>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d007      	beq.n	8005dac <checkAktifCalisma+0x20c>
 8005d9c:	4b5c      	ldr	r3, [pc, #368]	; (8005f10 <checkAktifCalisma+0x370>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d003      	beq.n	8005dac <checkAktifCalisma+0x20c>
 8005da4:	4b5b      	ldr	r3, [pc, #364]	; (8005f14 <checkAktifCalisma+0x374>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d107      	bne.n	8005dbc <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005dac:	2201      	movs	r2, #1
 8005dae:	2104      	movs	r1, #4
 8005db0:	4855      	ldr	r0, [pc, #340]	; (8005f08 <checkAktifCalisma+0x368>)
 8005db2:	f003 faac 	bl	800930e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005db6:	4b58      	ldr	r3, [pc, #352]	; (8005f18 <checkAktifCalisma+0x378>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005dbc:	4b56      	ldr	r3, [pc, #344]	; (8005f18 <checkAktifCalisma+0x378>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02f      	beq.n	8005e24 <checkAktifCalisma+0x284>
 8005dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dc8:	484f      	ldr	r0, [pc, #316]	; (8005f08 <checkAktifCalisma+0x368>)
 8005dca:	f003 fa89 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d106      	bne.n	8005de2 <checkAktifCalisma+0x242>
 8005dd4:	4b51      	ldr	r3, [pc, #324]	; (8005f1c <checkAktifCalisma+0x37c>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f083 0301 	eor.w	r3, r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <checkAktifCalisma+0x250>
 8005de2:	2102      	movs	r1, #2
 8005de4:	484e      	ldr	r0, [pc, #312]	; (8005f20 <checkAktifCalisma+0x380>)
 8005de6:	f003 fa7b 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d119      	bne.n	8005e24 <checkAktifCalisma+0x284>
 8005df0:	4b4c      	ldr	r3, [pc, #304]	; (8005f24 <checkAktifCalisma+0x384>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <checkAktifCalisma+0x284>
 8005df8:	4b4b      	ldr	r3, [pc, #300]	; (8005f28 <checkAktifCalisma+0x388>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d011      	beq.n	8005e24 <checkAktifCalisma+0x284>
 8005e00:	4b4a      	ldr	r3, [pc, #296]	; (8005f2c <checkAktifCalisma+0x38c>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00d      	beq.n	8005e24 <checkAktifCalisma+0x284>
 8005e08:	4b49      	ldr	r3, [pc, #292]	; (8005f30 <checkAktifCalisma+0x390>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	f083 0301 	eor.w	r3, r3, #1
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d006      	beq.n	8005e24 <checkAktifCalisma+0x284>
			timer2=millis;
 8005e16:	4b47      	ldr	r3, [pc, #284]	; (8005f34 <checkAktifCalisma+0x394>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a47      	ldr	r2, [pc, #284]	; (8005f38 <checkAktifCalisma+0x398>)
 8005e1c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005e1e:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <checkAktifCalisma+0x390>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005e24:	4b43      	ldr	r3, [pc, #268]	; (8005f34 <checkAktifCalisma+0x394>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4b43      	ldr	r3, [pc, #268]	; (8005f38 <checkAktifCalisma+0x398>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	4a43      	ldr	r2, [pc, #268]	; (8005f3c <checkAktifCalisma+0x39c>)
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d303      	bcc.n	8005e3e <checkAktifCalisma+0x29e>
 8005e36:	4b3e      	ldr	r3, [pc, #248]	; (8005f30 <checkAktifCalisma+0x390>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d111      	bne.n	8005e62 <checkAktifCalisma+0x2c2>
 8005e3e:	4b39      	ldr	r3, [pc, #228]	; (8005f24 <checkAktifCalisma+0x384>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	f083 0301 	eor.w	r3, r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <checkAktifCalisma+0x2c2>
 8005e4c:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <checkAktifCalisma+0x388>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	f083 0301 	eor.w	r3, r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <checkAktifCalisma+0x2c2>
 8005e5a:	4b34      	ldr	r3, [pc, #208]	; (8005f2c <checkAktifCalisma+0x38c>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005e62:	2200      	movs	r2, #0
 8005e64:	2104      	movs	r1, #4
 8005e66:	4828      	ldr	r0, [pc, #160]	; (8005f08 <checkAktifCalisma+0x368>)
 8005e68:	f003 fa51 	bl	800930e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <checkAktifCalisma+0x378>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005e72:	4b2f      	ldr	r3, [pc, #188]	; (8005f30 <checkAktifCalisma+0x390>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005e78:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <checkAktifCalisma+0x3a0>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005e80:	4b30      	ldr	r3, [pc, #192]	; (8005f44 <checkAktifCalisma+0x3a4>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005e86:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <checkAktifCalisma+0x3a0>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d116      	bne.n	8005ebc <checkAktifCalisma+0x31c>
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <checkAktifCalisma+0x3a8>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d112      	bne.n	8005ebc <checkAktifCalisma+0x31c>
 8005e96:	2101      	movs	r1, #1
 8005e98:	4821      	ldr	r0, [pc, #132]	; (8005f20 <checkAktifCalisma+0x380>)
 8005e9a:	f003 fa21 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <checkAktifCalisma+0x31c>
 8005ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ea8:	4817      	ldr	r0, [pc, #92]	; (8005f08 <checkAktifCalisma+0x368>)
 8005eaa:	f003 fa19 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005eb4:	4b23      	ldr	r3, [pc, #140]	; (8005f44 <checkAktifCalisma+0x3a4>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e011      	b.n	8005ee0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005ebc:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <checkAktifCalisma+0x3a0>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d10d      	bne.n	8005ee0 <checkAktifCalisma+0x340>
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4816      	ldr	r0, [pc, #88]	; (8005f20 <checkAktifCalisma+0x380>)
 8005ec8:	f003 fa0a 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d106      	bne.n	8005ee0 <checkAktifCalisma+0x340>
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <checkAktifCalisma+0x3a8>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <checkAktifCalisma+0x3a4>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005ee0:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <checkAktifCalisma+0x3a0>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d134      	bne.n	8005f52 <checkAktifCalisma+0x3b2>
 8005ee8:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <checkAktifCalisma+0x3a8>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d130      	bne.n	8005f52 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	480b      	ldr	r0, [pc, #44]	; (8005f20 <checkAktifCalisma+0x380>)
 8005ef4:	f003 f9f4 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d126      	bne.n	8005f4c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005efe:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <checkAktifCalisma+0x3a4>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	e025      	b.n	8005f52 <checkAktifCalisma+0x3b2>
 8005f06:	bf00      	nop
 8005f08:	40010c00 	.word	0x40010c00
 8005f0c:	2000031d 	.word	0x2000031d
 8005f10:	200002f7 	.word	0x200002f7
 8005f14:	200002fb 	.word	0x200002fb
 8005f18:	20000321 	.word	0x20000321
 8005f1c:	20000324 	.word	0x20000324
 8005f20:	40011000 	.word	0x40011000
 8005f24:	2000033a 	.word	0x2000033a
 8005f28:	2000033b 	.word	0x2000033b
 8005f2c:	200002eb 	.word	0x200002eb
 8005f30:	20000319 	.word	0x20000319
 8005f34:	20000290 	.word	0x20000290
 8005f38:	2000029c 	.word	0x2000029c
 8005f3c:	200002fc 	.word	0x200002fc
 8005f40:	200002ec 	.word	0x200002ec
 8005f44:	2000033f 	.word	0x2000033f
 8005f48:	200002e9 	.word	0x200002e9
			} else {
				cerceveVar=0;
 8005f4c:	4b7f      	ldr	r3, [pc, #508]	; (800614c <checkAktifCalisma+0x5ac>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005f52:	4b7f      	ldr	r3, [pc, #508]	; (8006150 <checkAktifCalisma+0x5b0>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d17c      	bne.n	8006054 <checkAktifCalisma+0x4b4>
 8005f5a:	4b7e      	ldr	r3, [pc, #504]	; (8006154 <checkAktifCalisma+0x5b4>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d078      	beq.n	8006054 <checkAktifCalisma+0x4b4>
 8005f62:	4b7d      	ldr	r3, [pc, #500]	; (8006158 <checkAktifCalisma+0x5b8>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d074      	beq.n	8006054 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005f6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f6e:	487b      	ldr	r0, [pc, #492]	; (800615c <checkAktifCalisma+0x5bc>)
 8005f70:	f003 f9b6 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <checkAktifCalisma+0x3e2>
 8005f7a:	4b79      	ldr	r3, [pc, #484]	; (8006160 <checkAktifCalisma+0x5c0>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d068      	beq.n	8006054 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005f82:	4b72      	ldr	r3, [pc, #456]	; (800614c <checkAktifCalisma+0x5ac>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d064      	beq.n	8006054 <checkAktifCalisma+0x4b4>
 8005f8a:	4b76      	ldr	r3, [pc, #472]	; (8006164 <checkAktifCalisma+0x5c4>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	f083 0301 	eor.w	r3, r3, #1
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d05d      	beq.n	8006054 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005f98:	2104      	movs	r1, #4
 8005f9a:	4873      	ldr	r0, [pc, #460]	; (8006168 <checkAktifCalisma+0x5c8>)
 8005f9c:	f003 f9a0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <checkAktifCalisma+0x40e>
 8005fa6:	4b71      	ldr	r3, [pc, #452]	; (800616c <checkAktifCalisma+0x5cc>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d152      	bne.n	8006054 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fb2:	486a      	ldr	r0, [pc, #424]	; (800615c <checkAktifCalisma+0x5bc>)
 8005fb4:	f003 f994 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d10e      	bne.n	8005fdc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fc2:	4866      	ldr	r0, [pc, #408]	; (800615c <checkAktifCalisma+0x5bc>)
 8005fc4:	f003 f98c 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d106      	bne.n	8005fdc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005fce:	2140      	movs	r1, #64	; 0x40
 8005fd0:	4865      	ldr	r0, [pc, #404]	; (8006168 <checkAktifCalisma+0x5c8>)
 8005fd2:	f003 f985 	bl	80092e0 <HAL_GPIO_ReadPin>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d003      	beq.n	8005fe4 <checkAktifCalisma+0x444>
 8005fdc:	4b64      	ldr	r3, [pc, #400]	; (8006170 <checkAktifCalisma+0x5d0>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d037      	beq.n	8006054 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005fe4:	4b63      	ldr	r3, [pc, #396]	; (8006174 <checkAktifCalisma+0x5d4>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f083 0301 	eor.w	r3, r3, #1
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d030      	beq.n	8006054 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005ff2:	4b61      	ldr	r3, [pc, #388]	; (8006178 <checkAktifCalisma+0x5d8>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f083 0301 	eor.w	r3, r3, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d029      	beq.n	8006054 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006000:	4b5e      	ldr	r3, [pc, #376]	; (800617c <checkAktifCalisma+0x5dc>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f083 0301 	eor.w	r3, r3, #1
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d022      	beq.n	8006054 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800600e:	4b5c      	ldr	r3, [pc, #368]	; (8006180 <checkAktifCalisma+0x5e0>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f083 0301 	eor.w	r3, r3, #1
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800601c:	4b59      	ldr	r3, [pc, #356]	; (8006184 <checkAktifCalisma+0x5e4>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f083 0301 	eor.w	r3, r3, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800602a:	4b57      	ldr	r3, [pc, #348]	; (8006188 <checkAktifCalisma+0x5e8>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	f083 0301 	eor.w	r3, r3, #1
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006038:	2201      	movs	r2, #1
 800603a:	2102      	movs	r1, #2
 800603c:	4847      	ldr	r0, [pc, #284]	; (800615c <checkAktifCalisma+0x5bc>)
 800603e:	f003 f966 	bl	800930e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006042:	4b4b      	ldr	r3, [pc, #300]	; (8006170 <checkAktifCalisma+0x5d0>)
 8006044:	2201      	movs	r2, #1
 8006046:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006048:	4b50      	ldr	r3, [pc, #320]	; (800618c <checkAktifCalisma+0x5ec>)
 800604a:	2201      	movs	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800604e:	4b50      	ldr	r3, [pc, #320]	; (8006190 <checkAktifCalisma+0x5f0>)
 8006050:	2201      	movs	r2, #1
 8006052:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006054:	4b46      	ldr	r3, [pc, #280]	; (8006170 <checkAktifCalisma+0x5d0>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d033      	beq.n	80060c4 <checkAktifCalisma+0x524>
 800605c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006060:	483e      	ldr	r0, [pc, #248]	; (800615c <checkAktifCalisma+0x5bc>)
 8006062:	f003 f93d 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006066:	4603      	mov	r3, r0
 8006068:	2b01      	cmp	r3, #1
 800606a:	d106      	bne.n	800607a <checkAktifCalisma+0x4da>
 800606c:	4b3c      	ldr	r3, [pc, #240]	; (8006160 <checkAktifCalisma+0x5c0>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f083 0301 	eor.w	r3, r3, #1
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <checkAktifCalisma+0x4f0>
 800607a:	2104      	movs	r1, #4
 800607c:	483a      	ldr	r0, [pc, #232]	; (8006168 <checkAktifCalisma+0x5c8>)
 800607e:	f003 f92f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006082:	4603      	mov	r3, r0
 8006084:	2b01      	cmp	r3, #1
 8006086:	d11d      	bne.n	80060c4 <checkAktifCalisma+0x524>
 8006088:	4b38      	ldr	r3, [pc, #224]	; (800616c <checkAktifCalisma+0x5cc>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d019      	beq.n	80060c4 <checkAktifCalisma+0x524>
 8006090:	4b30      	ldr	r3, [pc, #192]	; (8006154 <checkAktifCalisma+0x5b4>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <checkAktifCalisma+0x524>
 8006098:	4b2f      	ldr	r3, [pc, #188]	; (8006158 <checkAktifCalisma+0x5b8>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d011      	beq.n	80060c4 <checkAktifCalisma+0x524>
 80060a0:	4b2a      	ldr	r3, [pc, #168]	; (800614c <checkAktifCalisma+0x5ac>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00d      	beq.n	80060c4 <checkAktifCalisma+0x524>
 80060a8:	4b3a      	ldr	r3, [pc, #232]	; (8006194 <checkAktifCalisma+0x5f4>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f083 0301 	eor.w	r3, r3, #1
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d006      	beq.n	80060c4 <checkAktifCalisma+0x524>
			timer2=millis;
 80060b6:	4b38      	ldr	r3, [pc, #224]	; (8006198 <checkAktifCalisma+0x5f8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a38      	ldr	r2, [pc, #224]	; (800619c <checkAktifCalisma+0x5fc>)
 80060bc:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80060be:	4b35      	ldr	r3, [pc, #212]	; (8006194 <checkAktifCalisma+0x5f4>)
 80060c0:	2201      	movs	r2, #1
 80060c2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80060c4:	4b34      	ldr	r3, [pc, #208]	; (8006198 <checkAktifCalisma+0x5f8>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	4b34      	ldr	r3, [pc, #208]	; (800619c <checkAktifCalisma+0x5fc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	4a34      	ldr	r2, [pc, #208]	; (80061a0 <checkAktifCalisma+0x600>)
 80060d0:	7812      	ldrb	r2, [r2, #0]
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d303      	bcc.n	80060de <checkAktifCalisma+0x53e>
 80060d6:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <checkAktifCalisma+0x5f4>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d114      	bne.n	8006108 <checkAktifCalisma+0x568>
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <checkAktifCalisma+0x5b4>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f083 0301 	eor.w	r3, r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10d      	bne.n	8006108 <checkAktifCalisma+0x568>
 80060ec:	4b1a      	ldr	r3, [pc, #104]	; (8006158 <checkAktifCalisma+0x5b8>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f083 0301 	eor.w	r3, r3, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <checkAktifCalisma+0x568>
 80060fa:	4b14      	ldr	r3, [pc, #80]	; (800614c <checkAktifCalisma+0x5ac>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	f083 0301 	eor.w	r3, r3, #1
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006108:	2200      	movs	r2, #0
 800610a:	2102      	movs	r1, #2
 800610c:	4813      	ldr	r0, [pc, #76]	; (800615c <checkAktifCalisma+0x5bc>)
 800610e:	f003 f8fe 	bl	800930e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006112:	4b17      	ldr	r3, [pc, #92]	; (8006170 <checkAktifCalisma+0x5d0>)
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <checkAktifCalisma+0x5f4>)
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800611e:	4b14      	ldr	r3, [pc, #80]	; (8006170 <checkAktifCalisma+0x5d0>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d040      	beq.n	80061a8 <checkAktifCalisma+0x608>
 8006126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800612a:	480f      	ldr	r0, [pc, #60]	; (8006168 <checkAktifCalisma+0x5c8>)
 800612c:	f003 f8d8 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d138      	bne.n	80061a8 <checkAktifCalisma+0x608>
 8006136:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <checkAktifCalisma+0x604>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d034      	beq.n	80061a8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800613e:	2201      	movs	r2, #1
 8006140:	2101      	movs	r1, #1
 8006142:	4806      	ldr	r0, [pc, #24]	; (800615c <checkAktifCalisma+0x5bc>)
 8006144:	f003 f8e3 	bl	800930e <HAL_GPIO_WritePin>
 8006148:	e033      	b.n	80061b2 <checkAktifCalisma+0x612>
 800614a:	bf00      	nop
 800614c:	2000033f 	.word	0x2000033f
 8006150:	20000305 	.word	0x20000305
 8006154:	2000033a 	.word	0x2000033a
 8006158:	2000033b 	.word	0x2000033b
 800615c:	40010c00 	.word	0x40010c00
 8006160:	20000325 	.word	0x20000325
 8006164:	20000339 	.word	0x20000339
 8006168:	40011000 	.word	0x40011000
 800616c:	200002ee 	.word	0x200002ee
 8006170:	20000320 	.word	0x20000320
 8006174:	2000031d 	.word	0x2000031d
 8006178:	20000321 	.word	0x20000321
 800617c:	2000031e 	.word	0x2000031e
 8006180:	2000031f 	.word	0x2000031f
 8006184:	20000322 	.word	0x20000322
 8006188:	20000323 	.word	0x20000323
 800618c:	20000328 	.word	0x20000328
 8006190:	20000349 	.word	0x20000349
 8006194:	20000318 	.word	0x20000318
 8006198:	20000290 	.word	0x20000290
 800619c:	2000029c 	.word	0x2000029c
 80061a0:	200002fd 	.word	0x200002fd
 80061a4:	200002ed 	.word	0x200002ed
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80061a8:	2200      	movs	r2, #0
 80061aa:	2101      	movs	r1, #1
 80061ac:	4836      	ldr	r0, [pc, #216]	; (8006288 <checkAktifCalisma+0x6e8>)
 80061ae:	f003 f8ae 	bl	800930e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80061b2:	4b36      	ldr	r3, [pc, #216]	; (800628c <checkAktifCalisma+0x6ec>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 8080 	bne.w	80062bc <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80061bc:	4b34      	ldr	r3, [pc, #208]	; (8006290 <checkAktifCalisma+0x6f0>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d003      	beq.n	80061cc <checkAktifCalisma+0x62c>
 80061c4:	4b32      	ldr	r3, [pc, #200]	; (8006290 <checkAktifCalisma+0x6f0>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d177      	bne.n	80062bc <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80061cc:	4b31      	ldr	r3, [pc, #196]	; (8006294 <checkAktifCalisma+0x6f4>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d073      	beq.n	80062bc <checkAktifCalisma+0x71c>
 80061d4:	4b30      	ldr	r3, [pc, #192]	; (8006298 <checkAktifCalisma+0x6f8>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d06f      	beq.n	80062bc <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80061dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061e0:	4829      	ldr	r0, [pc, #164]	; (8006288 <checkAktifCalisma+0x6e8>)
 80061e2:	f003 f87d 	bl	80092e0 <HAL_GPIO_ReadPin>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d167      	bne.n	80062bc <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80061ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80061f0:	482a      	ldr	r0, [pc, #168]	; (800629c <checkAktifCalisma+0x6fc>)
 80061f2:	f003 f875 	bl	80092e0 <HAL_GPIO_ReadPin>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <checkAktifCalisma+0x664>
 80061fc:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <checkAktifCalisma+0x700>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d15b      	bne.n	80062bc <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006204:	2140      	movs	r1, #64	; 0x40
 8006206:	4825      	ldr	r0, [pc, #148]	; (800629c <checkAktifCalisma+0x6fc>)
 8006208:	f003 f86a 	bl	80092e0 <HAL_GPIO_ReadPin>
 800620c:	4603      	mov	r3, r0
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10f      	bne.n	8006232 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006216:	481c      	ldr	r0, [pc, #112]	; (8006288 <checkAktifCalisma+0x6e8>)
 8006218:	f003 f862 	bl	80092e0 <HAL_GPIO_ReadPin>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d107      	bne.n	8006232 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006222:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006226:	4818      	ldr	r0, [pc, #96]	; (8006288 <checkAktifCalisma+0x6e8>)
 8006228:	f003 f85a 	bl	80092e0 <HAL_GPIO_ReadPin>
 800622c:	4603      	mov	r3, r0
 800622e:	2b01      	cmp	r3, #1
 8006230:	d003      	beq.n	800623a <checkAktifCalisma+0x69a>
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <checkAktifCalisma+0x704>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d040      	beq.n	80062bc <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800623a:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <checkAktifCalisma+0x708>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	f083 0301 	eor.w	r3, r3, #1
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d039      	beq.n	80062bc <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006248:	4b18      	ldr	r3, [pc, #96]	; (80062ac <checkAktifCalisma+0x70c>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f083 0301 	eor.w	r3, r3, #1
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d032      	beq.n	80062bc <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006256:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <checkAktifCalisma+0x710>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	f083 0301 	eor.w	r3, r3, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d02b      	beq.n	80062bc <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006264:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <checkAktifCalisma+0x714>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f083 0301 	eor.w	r3, r3, #1
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d024      	beq.n	80062bc <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006272:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <checkAktifCalisma+0x718>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	f083 0301 	eor.w	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01d      	beq.n	80062bc <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006280:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <checkAktifCalisma+0x704>)
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e01c      	b.n	80062c2 <checkAktifCalisma+0x722>
 8006288:	40010c00 	.word	0x40010c00
 800628c:	20000305 	.word	0x20000305
 8006290:	200002f7 	.word	0x200002f7
 8006294:	2000033a 	.word	0x2000033a
 8006298:	2000033b 	.word	0x2000033b
 800629c:	40011000 	.word	0x40011000
 80062a0:	200002f8 	.word	0x200002f8
 80062a4:	2000031e 	.word	0x2000031e
 80062a8:	2000031d 	.word	0x2000031d
 80062ac:	20000321 	.word	0x20000321
 80062b0:	20000320 	.word	0x20000320
 80062b4:	2000031f 	.word	0x2000031f
 80062b8:	20000323 	.word	0x20000323
		} else {
			devmotoryukaricalisiyor=0;
 80062bc:	4b64      	ldr	r3, [pc, #400]	; (8006450 <checkAktifCalisma+0x8b0>)
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80062c2:	4b63      	ldr	r3, [pc, #396]	; (8006450 <checkAktifCalisma+0x8b0>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80062ca:	2201      	movs	r2, #1
 80062cc:	2120      	movs	r1, #32
 80062ce:	4861      	ldr	r0, [pc, #388]	; (8006454 <checkAktifCalisma+0x8b4>)
 80062d0:	f003 f81d 	bl	800930e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80062d4:	4b60      	ldr	r3, [pc, #384]	; (8006458 <checkAktifCalisma+0x8b8>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80062da:	4b5f      	ldr	r3, [pc, #380]	; (8006458 <checkAktifCalisma+0x8b8>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d025      	beq.n	800632e <checkAktifCalisma+0x78e>
 80062e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062e6:	485d      	ldr	r0, [pc, #372]	; (800645c <checkAktifCalisma+0x8bc>)
 80062e8:	f002 fffa 	bl	80092e0 <HAL_GPIO_ReadPin>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d007      	beq.n	8006302 <checkAktifCalisma+0x762>
 80062f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062f6:	4857      	ldr	r0, [pc, #348]	; (8006454 <checkAktifCalisma+0x8b4>)
 80062f8:	f002 fff2 	bl	80092e0 <HAL_GPIO_ReadPin>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d115      	bne.n	800632e <checkAktifCalisma+0x78e>
 8006302:	4b57      	ldr	r3, [pc, #348]	; (8006460 <checkAktifCalisma+0x8c0>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d011      	beq.n	800632e <checkAktifCalisma+0x78e>
 800630a:	4b56      	ldr	r3, [pc, #344]	; (8006464 <checkAktifCalisma+0x8c4>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <checkAktifCalisma+0x78e>
 8006312:	4b55      	ldr	r3, [pc, #340]	; (8006468 <checkAktifCalisma+0x8c8>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f083 0301 	eor.w	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <checkAktifCalisma+0x78e>
			timer2=millis;
 8006320:	4b52      	ldr	r3, [pc, #328]	; (800646c <checkAktifCalisma+0x8cc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a52      	ldr	r2, [pc, #328]	; (8006470 <checkAktifCalisma+0x8d0>)
 8006326:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006328:	4b4f      	ldr	r3, [pc, #316]	; (8006468 <checkAktifCalisma+0x8c8>)
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800632e:	4b4f      	ldr	r3, [pc, #316]	; (800646c <checkAktifCalisma+0x8cc>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b4f      	ldr	r3, [pc, #316]	; (8006470 <checkAktifCalisma+0x8d0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	4a4e      	ldr	r2, [pc, #312]	; (8006474 <checkAktifCalisma+0x8d4>)
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	4293      	cmp	r3, r2
 800633e:	d303      	bcc.n	8006348 <checkAktifCalisma+0x7a8>
 8006340:	4b49      	ldr	r3, [pc, #292]	; (8006468 <checkAktifCalisma+0x8c8>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10d      	bne.n	8006364 <checkAktifCalisma+0x7c4>
 8006348:	4b45      	ldr	r3, [pc, #276]	; (8006460 <checkAktifCalisma+0x8c0>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f083 0301 	eor.w	r3, r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <checkAktifCalisma+0x7c4>
 8006356:	4b43      	ldr	r3, [pc, #268]	; (8006464 <checkAktifCalisma+0x8c4>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f083 0301 	eor.w	r3, r3, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006364:	2200      	movs	r2, #0
 8006366:	2120      	movs	r1, #32
 8006368:	483a      	ldr	r0, [pc, #232]	; (8006454 <checkAktifCalisma+0x8b4>)
 800636a:	f002 ffd0 	bl	800930e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800636e:	4b3a      	ldr	r3, [pc, #232]	; (8006458 <checkAktifCalisma+0x8b8>)
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006374:	4b3c      	ldr	r3, [pc, #240]	; (8006468 <checkAktifCalisma+0x8c8>)
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800637a:	4b3f      	ldr	r3, [pc, #252]	; (8006478 <checkAktifCalisma+0x8d8>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 8088 	bne.w	8006494 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006384:	4b3d      	ldr	r3, [pc, #244]	; (800647c <checkAktifCalisma+0x8dc>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d003      	beq.n	8006394 <checkAktifCalisma+0x7f4>
 800638c:	4b3b      	ldr	r3, [pc, #236]	; (800647c <checkAktifCalisma+0x8dc>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d17f      	bne.n	8006494 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006394:	4b32      	ldr	r3, [pc, #200]	; (8006460 <checkAktifCalisma+0x8c0>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d07b      	beq.n	8006494 <checkAktifCalisma+0x8f4>
 800639c:	4b31      	ldr	r3, [pc, #196]	; (8006464 <checkAktifCalisma+0x8c4>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d077      	beq.n	8006494 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80063a4:	2140      	movs	r1, #64	; 0x40
 80063a6:	482b      	ldr	r0, [pc, #172]	; (8006454 <checkAktifCalisma+0x8b4>)
 80063a8:	f002 ff9a 	bl	80092e0 <HAL_GPIO_ReadPin>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d170      	bne.n	8006494 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80063b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063b6:	4827      	ldr	r0, [pc, #156]	; (8006454 <checkAktifCalisma+0x8b4>)
 80063b8:	f002 ff92 	bl	80092e0 <HAL_GPIO_ReadPin>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <checkAktifCalisma+0x82a>
 80063c2:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <checkAktifCalisma+0x8e0>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d164      	bne.n	8006494 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80063ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063ce:	4823      	ldr	r0, [pc, #140]	; (800645c <checkAktifCalisma+0x8bc>)
 80063d0:	f002 ff86 	bl	80092e0 <HAL_GPIO_ReadPin>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d10f      	bne.n	80063fa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80063da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063de:	481f      	ldr	r0, [pc, #124]	; (800645c <checkAktifCalisma+0x8bc>)
 80063e0:	f002 ff7e 	bl	80092e0 <HAL_GPIO_ReadPin>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d107      	bne.n	80063fa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80063ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063ee:	481b      	ldr	r0, [pc, #108]	; (800645c <checkAktifCalisma+0x8bc>)
 80063f0:	f002 ff76 	bl	80092e0 <HAL_GPIO_ReadPin>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d003      	beq.n	8006402 <checkAktifCalisma+0x862>
 80063fa:	4b22      	ldr	r3, [pc, #136]	; (8006484 <checkAktifCalisma+0x8e4>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d048      	beq.n	8006494 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006402:	4b21      	ldr	r3, [pc, #132]	; (8006488 <checkAktifCalisma+0x8e8>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f083 0301 	eor.w	r3, r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d041      	beq.n	8006494 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006410:	4b1e      	ldr	r3, [pc, #120]	; (800648c <checkAktifCalisma+0x8ec>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f083 0301 	eor.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d03a      	beq.n	8006494 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800641e:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <checkAktifCalisma+0x8f0>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	f083 0301 	eor.w	r3, r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d033      	beq.n	8006494 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <checkAktifCalisma+0x8b8>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f083 0301 	eor.w	r3, r3, #1
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d02c      	beq.n	8006494 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <checkAktifCalisma+0x8b0>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	f083 0301 	eor.w	r3, r3, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d025      	beq.n	8006494 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006448:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <checkAktifCalisma+0x8e4>)
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e024      	b.n	800649a <checkAktifCalisma+0x8fa>
 8006450:	2000031e 	.word	0x2000031e
 8006454:	40011000 	.word	0x40011000
 8006458:	20000322 	.word	0x20000322
 800645c:	40010c00 	.word	0x40010c00
 8006460:	2000033a 	.word	0x2000033a
 8006464:	2000033b 	.word	0x2000033b
 8006468:	2000031a 	.word	0x2000031a
 800646c:	20000290 	.word	0x20000290
 8006470:	2000029c 	.word	0x2000029c
 8006474:	200002fe 	.word	0x200002fe
 8006478:	20000305 	.word	0x20000305
 800647c:	200002f7 	.word	0x200002f7
 8006480:	200002f9 	.word	0x200002f9
 8006484:	2000031f 	.word	0x2000031f
 8006488:	2000031d 	.word	0x2000031d
 800648c:	20000321 	.word	0x20000321
 8006490:	20000320 	.word	0x20000320
		} else {
			devmotorasagicalisiyor=0;
 8006494:	4b96      	ldr	r3, [pc, #600]	; (80066f0 <checkAktifCalisma+0xb50>)
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800649a:	4b95      	ldr	r3, [pc, #596]	; (80066f0 <checkAktifCalisma+0xb50>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80064a2:	2201      	movs	r2, #1
 80064a4:	2110      	movs	r1, #16
 80064a6:	4893      	ldr	r0, [pc, #588]	; (80066f4 <checkAktifCalisma+0xb54>)
 80064a8:	f002 ff31 	bl	800930e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80064ac:	4b92      	ldr	r3, [pc, #584]	; (80066f8 <checkAktifCalisma+0xb58>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80064b2:	4b91      	ldr	r3, [pc, #580]	; (80066f8 <checkAktifCalisma+0xb58>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d024      	beq.n	8006504 <checkAktifCalisma+0x964>
 80064ba:	2140      	movs	r1, #64	; 0x40
 80064bc:	488d      	ldr	r0, [pc, #564]	; (80066f4 <checkAktifCalisma+0xb54>)
 80064be:	f002 ff0f 	bl	80092e0 <HAL_GPIO_ReadPin>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d007      	beq.n	80064d8 <checkAktifCalisma+0x938>
 80064c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064cc:	4889      	ldr	r0, [pc, #548]	; (80066f4 <checkAktifCalisma+0xb54>)
 80064ce:	f002 ff07 	bl	80092e0 <HAL_GPIO_ReadPin>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d115      	bne.n	8006504 <checkAktifCalisma+0x964>
 80064d8:	4b88      	ldr	r3, [pc, #544]	; (80066fc <checkAktifCalisma+0xb5c>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d011      	beq.n	8006504 <checkAktifCalisma+0x964>
 80064e0:	4b87      	ldr	r3, [pc, #540]	; (8006700 <checkAktifCalisma+0xb60>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <checkAktifCalisma+0x964>
 80064e8:	4b86      	ldr	r3, [pc, #536]	; (8006704 <checkAktifCalisma+0xb64>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f083 0301 	eor.w	r3, r3, #1
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <checkAktifCalisma+0x964>
			timer2=millis;
 80064f6:	4b84      	ldr	r3, [pc, #528]	; (8006708 <checkAktifCalisma+0xb68>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a84      	ldr	r2, [pc, #528]	; (800670c <checkAktifCalisma+0xb6c>)
 80064fc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80064fe:	4b81      	ldr	r3, [pc, #516]	; (8006704 <checkAktifCalisma+0xb64>)
 8006500:	2201      	movs	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006504:	4b80      	ldr	r3, [pc, #512]	; (8006708 <checkAktifCalisma+0xb68>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b80      	ldr	r3, [pc, #512]	; (800670c <checkAktifCalisma+0xb6c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	4a80      	ldr	r2, [pc, #512]	; (8006710 <checkAktifCalisma+0xb70>)
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	4293      	cmp	r3, r2
 8006514:	d303      	bcc.n	800651e <checkAktifCalisma+0x97e>
 8006516:	4b7b      	ldr	r3, [pc, #492]	; (8006704 <checkAktifCalisma+0xb64>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10d      	bne.n	800653a <checkAktifCalisma+0x99a>
 800651e:	4b77      	ldr	r3, [pc, #476]	; (80066fc <checkAktifCalisma+0xb5c>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	f083 0301 	eor.w	r3, r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <checkAktifCalisma+0x99a>
 800652c:	4b74      	ldr	r3, [pc, #464]	; (8006700 <checkAktifCalisma+0xb60>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f083 0301 	eor.w	r3, r3, #1
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800653a:	2200      	movs	r2, #0
 800653c:	2110      	movs	r1, #16
 800653e:	486d      	ldr	r0, [pc, #436]	; (80066f4 <checkAktifCalisma+0xb54>)
 8006540:	f002 fee5 	bl	800930e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006544:	4b6c      	ldr	r3, [pc, #432]	; (80066f8 <checkAktifCalisma+0xb58>)
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800654a:	4b6e      	ldr	r3, [pc, #440]	; (8006704 <checkAktifCalisma+0xb64>)
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006554:	486f      	ldr	r0, [pc, #444]	; (8006714 <checkAktifCalisma+0xb74>)
 8006556:	f002 fec3 	bl	80092e0 <HAL_GPIO_ReadPin>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d120      	bne.n	80065a2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006560:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006564:	486b      	ldr	r0, [pc, #428]	; (8006714 <checkAktifCalisma+0xb74>)
 8006566:	f002 febb 	bl	80092e0 <HAL_GPIO_ReadPin>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d118      	bne.n	80065a2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006570:	2104      	movs	r1, #4
 8006572:	4868      	ldr	r0, [pc, #416]	; (8006714 <checkAktifCalisma+0xb74>)
 8006574:	f002 feb4 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d111      	bne.n	80065a2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800657e:	2102      	movs	r1, #2
 8006580:	4864      	ldr	r0, [pc, #400]	; (8006714 <checkAktifCalisma+0xb74>)
 8006582:	f002 fead 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800658c:	2101      	movs	r1, #1
 800658e:	4861      	ldr	r0, [pc, #388]	; (8006714 <checkAktifCalisma+0xb74>)
 8006590:	f002 fea6 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <checkAktifCalisma+0xa02>
			makineStop=1;
 800659a:	4b5f      	ldr	r3, [pc, #380]	; (8006718 <checkAktifCalisma+0xb78>)
 800659c:	2201      	movs	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	e002      	b.n	80065a8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80065a2:	4b5d      	ldr	r3, [pc, #372]	; (8006718 <checkAktifCalisma+0xb78>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80065a8:	4b5c      	ldr	r3, [pc, #368]	; (800671c <checkAktifCalisma+0xb7c>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d144      	bne.n	800663a <checkAktifCalisma+0xa9a>
 80065b0:	4b5b      	ldr	r3, [pc, #364]	; (8006720 <checkAktifCalisma+0xb80>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d003      	beq.n	80065c0 <checkAktifCalisma+0xa20>
 80065b8:	4b59      	ldr	r3, [pc, #356]	; (8006720 <checkAktifCalisma+0xb80>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d13c      	bne.n	800663a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80065c0:	2180      	movs	r1, #128	; 0x80
 80065c2:	484c      	ldr	r0, [pc, #304]	; (80066f4 <checkAktifCalisma+0xb54>)
 80065c4:	f002 fe8c 	bl	80092e0 <HAL_GPIO_ReadPin>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <checkAktifCalisma+0xa36>
 80065ce:	4b55      	ldr	r3, [pc, #340]	; (8006724 <checkAktifCalisma+0xb84>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00b      	beq.n	80065ee <checkAktifCalisma+0xa4e>
 80065d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065da:	484e      	ldr	r0, [pc, #312]	; (8006714 <checkAktifCalisma+0xb74>)
 80065dc:	f002 fe80 	bl	80092e0 <HAL_GPIO_ReadPin>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d129      	bne.n	800663a <checkAktifCalisma+0xa9a>
 80065e6:	4b4f      	ldr	r3, [pc, #316]	; (8006724 <checkAktifCalisma+0xb84>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d125      	bne.n	800663a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80065ee:	2104      	movs	r1, #4
 80065f0:	4840      	ldr	r0, [pc, #256]	; (80066f4 <checkAktifCalisma+0xb54>)
 80065f2:	f002 fe75 	bl	80092e0 <HAL_GPIO_ReadPin>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d003      	beq.n	8006604 <checkAktifCalisma+0xa64>
 80065fc:	4b4a      	ldr	r3, [pc, #296]	; (8006728 <checkAktifCalisma+0xb88>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d11a      	bne.n	800663a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006604:	2102      	movs	r1, #2
 8006606:	483b      	ldr	r0, [pc, #236]	; (80066f4 <checkAktifCalisma+0xb54>)
 8006608:	f002 fe6a 	bl	80092e0 <HAL_GPIO_ReadPin>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d113      	bne.n	800663a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006612:	4b46      	ldr	r3, [pc, #280]	; (800672c <checkAktifCalisma+0xb8c>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f083 0301 	eor.w	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00c      	beq.n	800663a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006620:	4b3d      	ldr	r3, [pc, #244]	; (8006718 <checkAktifCalisma+0xb78>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006628:	4b41      	ldr	r3, [pc, #260]	; (8006730 <checkAktifCalisma+0xb90>)
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800662e:	4b36      	ldr	r3, [pc, #216]	; (8006708 <checkAktifCalisma+0xb68>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a40      	ldr	r2, [pc, #256]	; (8006734 <checkAktifCalisma+0xb94>)
 8006634:	6013      	str	r3, [r2, #0]
			bekle();
 8006636:	f7ff f87d 	bl	8005734 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800663a:	4b33      	ldr	r3, [pc, #204]	; (8006708 <checkAktifCalisma+0xb68>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b3d      	ldr	r3, [pc, #244]	; (8006734 <checkAktifCalisma+0xb94>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	4a3c      	ldr	r2, [pc, #240]	; (8006738 <checkAktifCalisma+0xb98>)
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	4293      	cmp	r3, r2
 800664a:	d211      	bcs.n	8006670 <checkAktifCalisma+0xad0>
 800664c:	2104      	movs	r1, #4
 800664e:	4829      	ldr	r0, [pc, #164]	; (80066f4 <checkAktifCalisma+0xb54>)
 8006650:	f002 fe46 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <checkAktifCalisma+0xad0>
 800665a:	4b33      	ldr	r3, [pc, #204]	; (8006728 <checkAktifCalisma+0xb88>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d006      	beq.n	8006670 <checkAktifCalisma+0xad0>
 8006662:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <checkAktifCalisma+0xb78>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f083 0301 	eor.w	r3, r3, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006670:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <checkAktifCalisma+0xb90>)
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006676:	4b29      	ldr	r3, [pc, #164]	; (800671c <checkAktifCalisma+0xb7c>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d160      	bne.n	8006740 <checkAktifCalisma+0xba0>
 800667e:	4b28      	ldr	r3, [pc, #160]	; (8006720 <checkAktifCalisma+0xb80>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d003      	beq.n	800668e <checkAktifCalisma+0xaee>
 8006686:	4b26      	ldr	r3, [pc, #152]	; (8006720 <checkAktifCalisma+0xb80>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d158      	bne.n	8006740 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800668e:	2104      	movs	r1, #4
 8006690:	4818      	ldr	r0, [pc, #96]	; (80066f4 <checkAktifCalisma+0xb54>)
 8006692:	f002 fe25 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006696:	4603      	mov	r3, r0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d003      	beq.n	80066a4 <checkAktifCalisma+0xb04>
 800669c:	4b22      	ldr	r3, [pc, #136]	; (8006728 <checkAktifCalisma+0xb88>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d14d      	bne.n	8006740 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80066a4:	2102      	movs	r1, #2
 80066a6:	4813      	ldr	r0, [pc, #76]	; (80066f4 <checkAktifCalisma+0xb54>)
 80066a8:	f002 fe1a 	bl	80092e0 <HAL_GPIO_ReadPin>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d146      	bne.n	8006740 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	480f      	ldr	r0, [pc, #60]	; (80066f4 <checkAktifCalisma+0xb54>)
 80066b6:	f002 fe13 	bl	80092e0 <HAL_GPIO_ReadPin>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d103      	bne.n	80066c8 <checkAktifCalisma+0xb28>
 80066c0:	4b18      	ldr	r3, [pc, #96]	; (8006724 <checkAktifCalisma+0xb84>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <checkAktifCalisma+0xb40>
 80066c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066cc:	4811      	ldr	r0, [pc, #68]	; (8006714 <checkAktifCalisma+0xb74>)
 80066ce:	f002 fe07 	bl	80092e0 <HAL_GPIO_ReadPin>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d133      	bne.n	8006740 <checkAktifCalisma+0xba0>
 80066d8:	4b12      	ldr	r3, [pc, #72]	; (8006724 <checkAktifCalisma+0xb84>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d12f      	bne.n	8006740 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80066e0:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <checkAktifCalisma+0xb78>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d02b      	beq.n	8006740 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80066e8:	4b14      	ldr	r3, [pc, #80]	; (800673c <checkAktifCalisma+0xb9c>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e02a      	b.n	8006746 <checkAktifCalisma+0xba6>
 80066f0:	2000031f 	.word	0x2000031f
 80066f4:	40011000 	.word	0x40011000
 80066f8:	20000323 	.word	0x20000323
 80066fc:	2000033a 	.word	0x2000033a
 8006700:	2000033b 	.word	0x2000033b
 8006704:	2000031b 	.word	0x2000031b
 8006708:	20000290 	.word	0x20000290
 800670c:	2000029c 	.word	0x2000029c
 8006710:	200002fe 	.word	0x200002fe
 8006714:	40010c00 	.word	0x40010c00
 8006718:	2000032a 	.word	0x2000032a
 800671c:	200002f1 	.word	0x200002f1
 8006720:	200002f0 	.word	0x200002f0
 8006724:	200002f4 	.word	0x200002f4
 8006728:	200002ee 	.word	0x200002ee
 800672c:	20000317 	.word	0x20000317
 8006730:	2000032b 	.word	0x2000032b
 8006734:	20000294 	.word	0x20000294
 8006738:	20000301 	.word	0x20000301
 800673c:	2000032c 	.word	0x2000032c
		} else {
			kapi1butonkontrol=0;
 8006740:	4b8b      	ldr	r3, [pc, #556]	; (8006970 <checkAktifCalisma+0xdd0>)
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006746:	4b8b      	ldr	r3, [pc, #556]	; (8006974 <checkAktifCalisma+0xdd4>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d121      	bne.n	8006792 <checkAktifCalisma+0xbf2>
 800674e:	4b8a      	ldr	r3, [pc, #552]	; (8006978 <checkAktifCalisma+0xdd8>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d003      	beq.n	800675e <checkAktifCalisma+0xbbe>
 8006756:	4b88      	ldr	r3, [pc, #544]	; (8006978 <checkAktifCalisma+0xdd8>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d119      	bne.n	8006792 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800675e:	2104      	movs	r1, #4
 8006760:	4886      	ldr	r0, [pc, #536]	; (800697c <checkAktifCalisma+0xddc>)
 8006762:	f002 fdbd 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d003      	beq.n	8006774 <checkAktifCalisma+0xbd4>
 800676c:	4b84      	ldr	r3, [pc, #528]	; (8006980 <checkAktifCalisma+0xde0>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10e      	bne.n	8006792 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006774:	2102      	movs	r1, #2
 8006776:	4881      	ldr	r0, [pc, #516]	; (800697c <checkAktifCalisma+0xddc>)
 8006778:	f002 fdb2 	bl	80092e0 <HAL_GPIO_ReadPin>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d107      	bne.n	8006792 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006782:	4b80      	ldr	r3, [pc, #512]	; (8006984 <checkAktifCalisma+0xde4>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800678a:	4b7f      	ldr	r3, [pc, #508]	; (8006988 <checkAktifCalisma+0xde8>)
 800678c:	2201      	movs	r2, #1
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e002      	b.n	8006798 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006792:	4b7d      	ldr	r3, [pc, #500]	; (8006988 <checkAktifCalisma+0xde8>)
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006798:	4b75      	ldr	r3, [pc, #468]	; (8006970 <checkAktifCalisma+0xdd0>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d107      	bne.n	80067b0 <checkAktifCalisma+0xc10>
 80067a0:	4b79      	ldr	r3, [pc, #484]	; (8006988 <checkAktifCalisma+0xde8>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <checkAktifCalisma+0xc10>
 80067a8:	4b78      	ldr	r3, [pc, #480]	; (800698c <checkAktifCalisma+0xdec>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80067b0:	2201      	movs	r2, #1
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	4876      	ldr	r0, [pc, #472]	; (8006990 <checkAktifCalisma+0xdf0>)
 80067b6:	f002 fdaa 	bl	800930e <HAL_GPIO_WritePin>
 80067ba:	e004      	b.n	80067c6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067bc:	2200      	movs	r2, #0
 80067be:	2180      	movs	r1, #128	; 0x80
 80067c0:	4873      	ldr	r0, [pc, #460]	; (8006990 <checkAktifCalisma+0xdf0>)
 80067c2:	f002 fda4 	bl	800930e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80067c6:	4b73      	ldr	r3, [pc, #460]	; (8006994 <checkAktifCalisma+0xdf4>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d141      	bne.n	8006852 <checkAktifCalisma+0xcb2>
 80067ce:	4b6a      	ldr	r3, [pc, #424]	; (8006978 <checkAktifCalisma+0xdd8>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d003      	beq.n	80067de <checkAktifCalisma+0xc3e>
 80067d6:	4b68      	ldr	r3, [pc, #416]	; (8006978 <checkAktifCalisma+0xdd8>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d139      	bne.n	8006852 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80067de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067e2:	4866      	ldr	r0, [pc, #408]	; (800697c <checkAktifCalisma+0xddc>)
 80067e4:	f002 fd7c 	bl	80092e0 <HAL_GPIO_ReadPin>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d103      	bne.n	80067f6 <checkAktifCalisma+0xc56>
 80067ee:	4b6a      	ldr	r3, [pc, #424]	; (8006998 <checkAktifCalisma+0xdf8>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <checkAktifCalisma+0xc6e>
 80067f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067fa:	4868      	ldr	r0, [pc, #416]	; (800699c <checkAktifCalisma+0xdfc>)
 80067fc:	f002 fd70 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d125      	bne.n	8006852 <checkAktifCalisma+0xcb2>
 8006806:	4b64      	ldr	r3, [pc, #400]	; (8006998 <checkAktifCalisma+0xdf8>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d121      	bne.n	8006852 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800680e:	2102      	movs	r1, #2
 8006810:	485a      	ldr	r0, [pc, #360]	; (800697c <checkAktifCalisma+0xddc>)
 8006812:	f002 fd65 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006816:	4603      	mov	r3, r0
 8006818:	2b01      	cmp	r3, #1
 800681a:	d11a      	bne.n	8006852 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800681c:	2104      	movs	r1, #4
 800681e:	4857      	ldr	r0, [pc, #348]	; (800697c <checkAktifCalisma+0xddc>)
 8006820:	f002 fd5e 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d113      	bne.n	8006852 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800682a:	4b56      	ldr	r3, [pc, #344]	; (8006984 <checkAktifCalisma+0xde4>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00f      	beq.n	8006852 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8006832:	4b5b      	ldr	r3, [pc, #364]	; (80069a0 <checkAktifCalisma+0xe00>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	f083 0301 	eor.w	r3, r3, #1
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8006840:	4b58      	ldr	r3, [pc, #352]	; (80069a4 <checkAktifCalisma+0xe04>)
 8006842:	2201      	movs	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006846:	4b58      	ldr	r3, [pc, #352]	; (80069a8 <checkAktifCalisma+0xe08>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a58      	ldr	r2, [pc, #352]	; (80069ac <checkAktifCalisma+0xe0c>)
 800684c:	6013      	str	r3, [r2, #0]
			bekle();
 800684e:	f7fe ff71 	bl	8005734 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006852:	4b55      	ldr	r3, [pc, #340]	; (80069a8 <checkAktifCalisma+0xe08>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b55      	ldr	r3, [pc, #340]	; (80069ac <checkAktifCalisma+0xe0c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	4a54      	ldr	r2, [pc, #336]	; (80069b0 <checkAktifCalisma+0xe10>)
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	4293      	cmp	r3, r2
 8006862:	d20d      	bcs.n	8006880 <checkAktifCalisma+0xce0>
 8006864:	2102      	movs	r1, #2
 8006866:	4845      	ldr	r0, [pc, #276]	; (800697c <checkAktifCalisma+0xddc>)
 8006868:	f002 fd3a 	bl	80092e0 <HAL_GPIO_ReadPin>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d006      	beq.n	8006880 <checkAktifCalisma+0xce0>
 8006872:	4b44      	ldr	r3, [pc, #272]	; (8006984 <checkAktifCalisma+0xde4>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f083 0301 	eor.w	r3, r3, #1
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8006880:	4b48      	ldr	r3, [pc, #288]	; (80069a4 <checkAktifCalisma+0xe04>)
 8006882:	2200      	movs	r2, #0
 8006884:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006886:	4b43      	ldr	r3, [pc, #268]	; (8006994 <checkAktifCalisma+0xdf4>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d135      	bne.n	80068fa <checkAktifCalisma+0xd5a>
 800688e:	4b3a      	ldr	r3, [pc, #232]	; (8006978 <checkAktifCalisma+0xdd8>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d003      	beq.n	800689e <checkAktifCalisma+0xcfe>
 8006896:	4b38      	ldr	r3, [pc, #224]	; (8006978 <checkAktifCalisma+0xdd8>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b03      	cmp	r3, #3
 800689c:	d12d      	bne.n	80068fa <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800689e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068a2:	4836      	ldr	r0, [pc, #216]	; (800697c <checkAktifCalisma+0xddc>)
 80068a4:	f002 fd1c 	bl	80092e0 <HAL_GPIO_ReadPin>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <checkAktifCalisma+0xd16>
 80068ae:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <checkAktifCalisma+0xdf8>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <checkAktifCalisma+0xd2e>
 80068b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068ba:	4838      	ldr	r0, [pc, #224]	; (800699c <checkAktifCalisma+0xdfc>)
 80068bc:	f002 fd10 	bl	80092e0 <HAL_GPIO_ReadPin>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d119      	bne.n	80068fa <checkAktifCalisma+0xd5a>
 80068c6:	4b34      	ldr	r3, [pc, #208]	; (8006998 <checkAktifCalisma+0xdf8>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d115      	bne.n	80068fa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80068ce:	2102      	movs	r1, #2
 80068d0:	482a      	ldr	r0, [pc, #168]	; (800697c <checkAktifCalisma+0xddc>)
 80068d2:	f002 fd05 	bl	80092e0 <HAL_GPIO_ReadPin>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d10e      	bne.n	80068fa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80068dc:	2104      	movs	r1, #4
 80068de:	4827      	ldr	r0, [pc, #156]	; (800697c <checkAktifCalisma+0xddc>)
 80068e0:	f002 fcfe 	bl	80092e0 <HAL_GPIO_ReadPin>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d107      	bne.n	80068fa <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80068ea:	4b26      	ldr	r3, [pc, #152]	; (8006984 <checkAktifCalisma+0xde4>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80068f2:	4b30      	ldr	r3, [pc, #192]	; (80069b4 <checkAktifCalisma+0xe14>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e002      	b.n	8006900 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80068fa:	4b2e      	ldr	r3, [pc, #184]	; (80069b4 <checkAktifCalisma+0xe14>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006900:	4b24      	ldr	r3, [pc, #144]	; (8006994 <checkAktifCalisma+0xdf4>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d11d      	bne.n	8006944 <checkAktifCalisma+0xda4>
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <checkAktifCalisma+0xdd8>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d003      	beq.n	8006918 <checkAktifCalisma+0xd78>
 8006910:	4b19      	ldr	r3, [pc, #100]	; (8006978 <checkAktifCalisma+0xdd8>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b03      	cmp	r3, #3
 8006916:	d115      	bne.n	8006944 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006918:	2102      	movs	r1, #2
 800691a:	4818      	ldr	r0, [pc, #96]	; (800697c <checkAktifCalisma+0xddc>)
 800691c:	f002 fce0 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006920:	4603      	mov	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d10e      	bne.n	8006944 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006926:	2104      	movs	r1, #4
 8006928:	4814      	ldr	r0, [pc, #80]	; (800697c <checkAktifCalisma+0xddc>)
 800692a:	f002 fcd9 	bl	80092e0 <HAL_GPIO_ReadPin>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d107      	bne.n	8006944 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8006934:	4b13      	ldr	r3, [pc, #76]	; (8006984 <checkAktifCalisma+0xde4>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 800693c:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <checkAktifCalisma+0xe18>)
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	e002      	b.n	800694a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8006944:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <checkAktifCalisma+0xe18>)
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800694a:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <checkAktifCalisma+0xe14>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d107      	bne.n	8006962 <checkAktifCalisma+0xdc2>
 8006952:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <checkAktifCalisma+0xe18>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <checkAktifCalisma+0xdc2>
 800695a:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <checkAktifCalisma+0xe04>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d02c      	beq.n	80069bc <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006962:	2201      	movs	r2, #1
 8006964:	2140      	movs	r1, #64	; 0x40
 8006966:	480a      	ldr	r0, [pc, #40]	; (8006990 <checkAktifCalisma+0xdf0>)
 8006968:	f002 fcd1 	bl	800930e <HAL_GPIO_WritePin>
 800696c:	e02b      	b.n	80069c6 <checkAktifCalisma+0xe26>
 800696e:	bf00      	nop
 8006970:	2000032c 	.word	0x2000032c
 8006974:	200002f1 	.word	0x200002f1
 8006978:	200002f0 	.word	0x200002f0
 800697c:	40011000 	.word	0x40011000
 8006980:	200002ee 	.word	0x200002ee
 8006984:	2000032a 	.word	0x2000032a
 8006988:	2000032d 	.word	0x2000032d
 800698c:	2000032b 	.word	0x2000032b
 8006990:	40010800 	.word	0x40010800
 8006994:	200002f2 	.word	0x200002f2
 8006998:	200002f4 	.word	0x200002f4
 800699c:	40010c00 	.word	0x40010c00
 80069a0:	20000317 	.word	0x20000317
 80069a4:	2000032e 	.word	0x2000032e
 80069a8:	20000290 	.word	0x20000290
 80069ac:	20000294 	.word	0x20000294
 80069b0:	20000302 	.word	0x20000302
 80069b4:	2000032f 	.word	0x2000032f
 80069b8:	20000330 	.word	0x20000330
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80069bc:	2200      	movs	r2, #0
 80069be:	2140      	movs	r1, #64	; 0x40
 80069c0:	488d      	ldr	r0, [pc, #564]	; (8006bf8 <checkAktifCalisma+0x1058>)
 80069c2:	f002 fca4 	bl	800930e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80069c6:	4b8d      	ldr	r3, [pc, #564]	; (8006bfc <checkAktifCalisma+0x105c>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <checkAktifCalisma+0xe36>
 80069ce:	4b8b      	ldr	r3, [pc, #556]	; (8006bfc <checkAktifCalisma+0x105c>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d115      	bne.n	8006a02 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80069d6:	2104      	movs	r1, #4
 80069d8:	4889      	ldr	r0, [pc, #548]	; (8006c00 <checkAktifCalisma+0x1060>)
 80069da:	f002 fc81 	bl	80092e0 <HAL_GPIO_ReadPin>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d003      	beq.n	80069ec <checkAktifCalisma+0xe4c>
 80069e4:	4b87      	ldr	r3, [pc, #540]	; (8006c04 <checkAktifCalisma+0x1064>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80069ec:	2102      	movs	r1, #2
 80069ee:	4884      	ldr	r0, [pc, #528]	; (8006c00 <checkAktifCalisma+0x1060>)
 80069f0:	f002 fc76 	bl	80092e0 <HAL_GPIO_ReadPin>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80069fa:	4b83      	ldr	r3, [pc, #524]	; (8006c08 <checkAktifCalisma+0x1068>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e002      	b.n	8006a08 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8006a02:	4b81      	ldr	r3, [pc, #516]	; (8006c08 <checkAktifCalisma+0x1068>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006a08:	4b7c      	ldr	r3, [pc, #496]	; (8006bfc <checkAktifCalisma+0x105c>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d003      	beq.n	8006a18 <checkAktifCalisma+0xe78>
 8006a10:	4b7a      	ldr	r3, [pc, #488]	; (8006bfc <checkAktifCalisma+0x105c>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d111      	bne.n	8006a3c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006a18:	2102      	movs	r1, #2
 8006a1a:	4879      	ldr	r0, [pc, #484]	; (8006c00 <checkAktifCalisma+0x1060>)
 8006a1c:	f002 fc60 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d10a      	bne.n	8006a3c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006a26:	2104      	movs	r1, #4
 8006a28:	4875      	ldr	r0, [pc, #468]	; (8006c00 <checkAktifCalisma+0x1060>)
 8006a2a:	f002 fc59 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8006a34:	4b75      	ldr	r3, [pc, #468]	; (8006c0c <checkAktifCalisma+0x106c>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	e002      	b.n	8006a42 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8006a3c:	4b73      	ldr	r3, [pc, #460]	; (8006c0c <checkAktifCalisma+0x106c>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8006a42:	4b71      	ldr	r3, [pc, #452]	; (8006c08 <checkAktifCalisma+0x1068>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00f      	beq.n	8006a6a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8006a4a:	4b71      	ldr	r3, [pc, #452]	; (8006c10 <checkAktifCalisma+0x1070>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d10b      	bne.n	8006a6a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a56:	486f      	ldr	r0, [pc, #444]	; (8006c14 <checkAktifCalisma+0x1074>)
 8006a58:	f002 fc42 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8006a62:	4b6d      	ldr	r3, [pc, #436]	; (8006c18 <checkAktifCalisma+0x1078>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e002      	b.n	8006a70 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8006a6a:	4b6b      	ldr	r3, [pc, #428]	; (8006c18 <checkAktifCalisma+0x1078>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8006a70:	4b66      	ldr	r3, [pc, #408]	; (8006c0c <checkAktifCalisma+0x106c>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00f      	beq.n	8006a98 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8006a78:	4b65      	ldr	r3, [pc, #404]	; (8006c10 <checkAktifCalisma+0x1070>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10b      	bne.n	8006a98 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a84:	4863      	ldr	r0, [pc, #396]	; (8006c14 <checkAktifCalisma+0x1074>)
 8006a86:	f002 fc2b 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d103      	bne.n	8006a98 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006a90:	4b62      	ldr	r3, [pc, #392]	; (8006c1c <checkAktifCalisma+0x107c>)
 8006a92:	2201      	movs	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e002      	b.n	8006a9e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8006a98:	4b60      	ldr	r3, [pc, #384]	; (8006c1c <checkAktifCalisma+0x107c>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006a9e:	4b60      	ldr	r3, [pc, #384]	; (8006c20 <checkAktifCalisma+0x1080>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d137      	bne.n	8006b16 <checkAktifCalisma+0xf76>
 8006aa6:	4b5f      	ldr	r3, [pc, #380]	; (8006c24 <checkAktifCalisma+0x1084>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d003      	beq.n	8006ab6 <checkAktifCalisma+0xf16>
 8006aae:	4b5d      	ldr	r3, [pc, #372]	; (8006c24 <checkAktifCalisma+0x1084>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d12f      	bne.n	8006b16 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006ab6:	4b54      	ldr	r3, [pc, #336]	; (8006c08 <checkAktifCalisma+0x1068>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <checkAktifCalisma+0xf26>
 8006abe:	4b53      	ldr	r3, [pc, #332]	; (8006c0c <checkAktifCalisma+0x106c>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d027      	beq.n	8006b16 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006aca:	484d      	ldr	r0, [pc, #308]	; (8006c00 <checkAktifCalisma+0x1060>)
 8006acc:	f002 fc08 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <checkAktifCalisma+0xf3e>
 8006ad6:	4b4e      	ldr	r3, [pc, #312]	; (8006c10 <checkAktifCalisma+0x1070>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006ade:	4b4e      	ldr	r3, [pc, #312]	; (8006c18 <checkAktifCalisma+0x1078>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d103      	bne.n	8006aee <checkAktifCalisma+0xf4e>
 8006ae6:	4b4d      	ldr	r3, [pc, #308]	; (8006c1c <checkAktifCalisma+0x107c>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d013      	beq.n	8006b16 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8006aee:	4b4e      	ldr	r3, [pc, #312]	; (8006c28 <checkAktifCalisma+0x1088>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00f      	beq.n	8006b16 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8006af6:	4b4d      	ldr	r3, [pc, #308]	; (8006c2c <checkAktifCalisma+0x108c>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f083 0301 	eor.w	r3, r3, #1
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8006b04:	4b4a      	ldr	r3, [pc, #296]	; (8006c30 <checkAktifCalisma+0x1090>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006b0a:	4b4a      	ldr	r3, [pc, #296]	; (8006c34 <checkAktifCalisma+0x1094>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a4a      	ldr	r2, [pc, #296]	; (8006c38 <checkAktifCalisma+0x1098>)
 8006b10:	6013      	str	r3, [r2, #0]
			bekle();
 8006b12:	f7fe fe0f 	bl	8005734 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006b16:	4b47      	ldr	r3, [pc, #284]	; (8006c34 <checkAktifCalisma+0x1094>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4b47      	ldr	r3, [pc, #284]	; (8006c38 <checkAktifCalisma+0x1098>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	4a46      	ldr	r2, [pc, #280]	; (8006c3c <checkAktifCalisma+0x109c>)
 8006b22:	7812      	ldrb	r2, [r2, #0]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d214      	bcs.n	8006b52 <checkAktifCalisma+0xfb2>
 8006b28:	4b37      	ldr	r3, [pc, #220]	; (8006c08 <checkAktifCalisma+0x1068>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f083 0301 	eor.w	r3, r3, #1
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d006      	beq.n	8006b44 <checkAktifCalisma+0xfa4>
 8006b36:	4b35      	ldr	r3, [pc, #212]	; (8006c0c <checkAktifCalisma+0x106c>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f083 0301 	eor.w	r3, r3, #1
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d106      	bne.n	8006b52 <checkAktifCalisma+0xfb2>
 8006b44:	4b38      	ldr	r3, [pc, #224]	; (8006c28 <checkAktifCalisma+0x1088>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f083 0301 	eor.w	r3, r3, #1
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8006b52:	4b37      	ldr	r3, [pc, #220]	; (8006c30 <checkAktifCalisma+0x1090>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006b58:	4b31      	ldr	r3, [pc, #196]	; (8006c20 <checkAktifCalisma+0x1080>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d12b      	bne.n	8006bb8 <checkAktifCalisma+0x1018>
 8006b60:	4b30      	ldr	r3, [pc, #192]	; (8006c24 <checkAktifCalisma+0x1084>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d003      	beq.n	8006b70 <checkAktifCalisma+0xfd0>
 8006b68:	4b2e      	ldr	r3, [pc, #184]	; (8006c24 <checkAktifCalisma+0x1084>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d123      	bne.n	8006bb8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006b70:	4b25      	ldr	r3, [pc, #148]	; (8006c08 <checkAktifCalisma+0x1068>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d103      	bne.n	8006b80 <checkAktifCalisma+0xfe0>
 8006b78:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <checkAktifCalisma+0x106c>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01b      	beq.n	8006bb8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b84:	481e      	ldr	r0, [pc, #120]	; (8006c00 <checkAktifCalisma+0x1060>)
 8006b86:	f002 fbab 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <checkAktifCalisma+0xff8>
 8006b90:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <checkAktifCalisma+0x1070>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006b98:	4b1f      	ldr	r3, [pc, #124]	; (8006c18 <checkAktifCalisma+0x1078>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d103      	bne.n	8006ba8 <checkAktifCalisma+0x1008>
 8006ba0:	4b1e      	ldr	r3, [pc, #120]	; (8006c1c <checkAktifCalisma+0x107c>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8006ba8:	4b1f      	ldr	r3, [pc, #124]	; (8006c28 <checkAktifCalisma+0x1088>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006bb0:	4b23      	ldr	r3, [pc, #140]	; (8006c40 <checkAktifCalisma+0x10a0>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	e002      	b.n	8006bbe <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8006bb8:	4b21      	ldr	r3, [pc, #132]	; (8006c40 <checkAktifCalisma+0x10a0>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006bbe:	4b18      	ldr	r3, [pc, #96]	; (8006c20 <checkAktifCalisma+0x1080>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d140      	bne.n	8006c48 <checkAktifCalisma+0x10a8>
 8006bc6:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <checkAktifCalisma+0x1084>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d003      	beq.n	8006bd6 <checkAktifCalisma+0x1036>
 8006bce:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <checkAktifCalisma+0x1084>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d138      	bne.n	8006c48 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <checkAktifCalisma+0x1068>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <checkAktifCalisma+0x1046>
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <checkAktifCalisma+0x106c>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d030      	beq.n	8006c48 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <checkAktifCalisma+0x1088>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d02c      	beq.n	8006c48 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006bee:	4b15      	ldr	r3, [pc, #84]	; (8006c44 <checkAktifCalisma+0x10a4>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	e02b      	b.n	8006c4e <checkAktifCalisma+0x10ae>
 8006bf6:	bf00      	nop
 8006bf8:	40010800 	.word	0x40010800
 8006bfc:	200002f5 	.word	0x200002f5
 8006c00:	40011000 	.word	0x40011000
 8006c04:	200002ee 	.word	0x200002ee
 8006c08:	20000334 	.word	0x20000334
 8006c0c:	20000335 	.word	0x20000335
 8006c10:	200002f4 	.word	0x200002f4
 8006c14:	40010c00 	.word	0x40010c00
 8006c18:	20000344 	.word	0x20000344
 8006c1c:	20000345 	.word	0x20000345
 8006c20:	200002f3 	.word	0x200002f3
 8006c24:	200002f0 	.word	0x200002f0
 8006c28:	2000032a 	.word	0x2000032a
 8006c2c:	20000317 	.word	0x20000317
 8006c30:	20000331 	.word	0x20000331
 8006c34:	20000290 	.word	0x20000290
 8006c38:	20000294 	.word	0x20000294
 8006c3c:	20000303 	.word	0x20000303
 8006c40:	20000332 	.word	0x20000332
 8006c44:	20000333 	.word	0x20000333
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006c48:	4b8b      	ldr	r3, [pc, #556]	; (8006e78 <checkAktifCalisma+0x12d8>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006c4e:	4b8b      	ldr	r3, [pc, #556]	; (8006e7c <checkAktifCalisma+0x12dc>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d107      	bne.n	8006c66 <checkAktifCalisma+0x10c6>
 8006c56:	4b8a      	ldr	r3, [pc, #552]	; (8006e80 <checkAktifCalisma+0x12e0>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <checkAktifCalisma+0x10c6>
 8006c5e:	4b86      	ldr	r3, [pc, #536]	; (8006e78 <checkAktifCalisma+0x12d8>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006c66:	2201      	movs	r2, #1
 8006c68:	2120      	movs	r1, #32
 8006c6a:	4886      	ldr	r0, [pc, #536]	; (8006e84 <checkAktifCalisma+0x12e4>)
 8006c6c:	f002 fb4f 	bl	800930e <HAL_GPIO_WritePin>
 8006c70:	e004      	b.n	8006c7c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006c72:	2200      	movs	r2, #0
 8006c74:	2120      	movs	r1, #32
 8006c76:	4883      	ldr	r0, [pc, #524]	; (8006e84 <checkAktifCalisma+0x12e4>)
 8006c78:	f002 fb49 	bl	800930e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006c7c:	4b82      	ldr	r3, [pc, #520]	; (8006e88 <checkAktifCalisma+0x12e8>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00e      	beq.n	8006ca2 <checkAktifCalisma+0x1102>
 8006c84:	2102      	movs	r1, #2
 8006c86:	4881      	ldr	r0, [pc, #516]	; (8006e8c <checkAktifCalisma+0x12ec>)
 8006c88:	f002 fb2a 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d107      	bne.n	8006ca2 <checkAktifCalisma+0x1102>
 8006c92:	4b7f      	ldr	r3, [pc, #508]	; (8006e90 <checkAktifCalisma+0x12f0>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <checkAktifCalisma+0x1102>
 8006c9a:	4b7e      	ldr	r3, [pc, #504]	; (8006e94 <checkAktifCalisma+0x12f4>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d112      	bne.n	8006cc8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006ca2:	4b7d      	ldr	r3, [pc, #500]	; (8006e98 <checkAktifCalisma+0x12f8>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d066      	beq.n	8006d78 <checkAktifCalisma+0x11d8>
 8006caa:	2104      	movs	r1, #4
 8006cac:	4877      	ldr	r0, [pc, #476]	; (8006e8c <checkAktifCalisma+0x12ec>)
 8006cae:	f002 fb17 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d15f      	bne.n	8006d78 <checkAktifCalisma+0x11d8>
 8006cb8:	4b75      	ldr	r3, [pc, #468]	; (8006e90 <checkAktifCalisma+0x12f0>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d05b      	beq.n	8006d78 <checkAktifCalisma+0x11d8>
 8006cc0:	4b74      	ldr	r3, [pc, #464]	; (8006e94 <checkAktifCalisma+0x12f4>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d057      	beq.n	8006d78 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006cc8:	4b74      	ldr	r3, [pc, #464]	; (8006e9c <checkAktifCalisma+0x12fc>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	4b72      	ldr	r3, [pc, #456]	; (8006e9c <checkAktifCalisma+0x12fc>)
 8006cd2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006cd4:	4b71      	ldr	r3, [pc, #452]	; (8006e9c <checkAktifCalisma+0x12fc>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b09      	cmp	r3, #9
 8006cda:	d908      	bls.n	8006cee <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006cdc:	4b6f      	ldr	r3, [pc, #444]	; (8006e9c <checkAktifCalisma+0x12fc>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006ce2:	4b6f      	ldr	r3, [pc, #444]	; (8006ea0 <checkAktifCalisma+0x1300>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	4b6d      	ldr	r3, [pc, #436]	; (8006ea0 <checkAktifCalisma+0x1300>)
 8006cec:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006cee:	4b6c      	ldr	r3, [pc, #432]	; (8006ea0 <checkAktifCalisma+0x1300>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b09      	cmp	r3, #9
 8006cf4:	d908      	bls.n	8006d08 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8006cf6:	4b6a      	ldr	r3, [pc, #424]	; (8006ea0 <checkAktifCalisma+0x1300>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006cfc:	4b69      	ldr	r3, [pc, #420]	; (8006ea4 <checkAktifCalisma+0x1304>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	4b67      	ldr	r3, [pc, #412]	; (8006ea4 <checkAktifCalisma+0x1304>)
 8006d06:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006d08:	4b66      	ldr	r3, [pc, #408]	; (8006ea4 <checkAktifCalisma+0x1304>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b09      	cmp	r3, #9
 8006d0e:	d908      	bls.n	8006d22 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006d10:	4b64      	ldr	r3, [pc, #400]	; (8006ea4 <checkAktifCalisma+0x1304>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006d16:	4b64      	ldr	r3, [pc, #400]	; (8006ea8 <checkAktifCalisma+0x1308>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	4b62      	ldr	r3, [pc, #392]	; (8006ea8 <checkAktifCalisma+0x1308>)
 8006d20:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006d22:	4b61      	ldr	r3, [pc, #388]	; (8006ea8 <checkAktifCalisma+0x1308>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b09      	cmp	r3, #9
 8006d28:	d908      	bls.n	8006d3c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8006d2a:	4b5f      	ldr	r3, [pc, #380]	; (8006ea8 <checkAktifCalisma+0x1308>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006d30:	4b5e      	ldr	r3, [pc, #376]	; (8006eac <checkAktifCalisma+0x130c>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	4b5c      	ldr	r3, [pc, #368]	; (8006eac <checkAktifCalisma+0x130c>)
 8006d3a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006d3c:	4b5b      	ldr	r3, [pc, #364]	; (8006eac <checkAktifCalisma+0x130c>)
 8006d3e:	781a      	ldrb	r2, [r3, #0]
 8006d40:	4b5b      	ldr	r3, [pc, #364]	; (8006eb0 <checkAktifCalisma+0x1310>)
 8006d42:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006d46:	4b58      	ldr	r3, [pc, #352]	; (8006ea8 <checkAktifCalisma+0x1308>)
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <checkAktifCalisma+0x1310>)
 8006d4c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006d4e:	4b55      	ldr	r3, [pc, #340]	; (8006ea4 <checkAktifCalisma+0x1304>)
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	4b57      	ldr	r3, [pc, #348]	; (8006eb0 <checkAktifCalisma+0x1310>)
 8006d54:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006d56:	4b52      	ldr	r3, [pc, #328]	; (8006ea0 <checkAktifCalisma+0x1300>)
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	4b55      	ldr	r3, [pc, #340]	; (8006eb0 <checkAktifCalisma+0x1310>)
 8006d5c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006d5e:	4b4f      	ldr	r3, [pc, #316]	; (8006e9c <checkAktifCalisma+0x12fc>)
 8006d60:	781a      	ldrb	r2, [r3, #0]
 8006d62:	4b53      	ldr	r3, [pc, #332]	; (8006eb0 <checkAktifCalisma+0x1310>)
 8006d64:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006d66:	4b53      	ldr	r3, [pc, #332]	; (8006eb4 <checkAktifCalisma+0x1314>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006d6c:	4b46      	ldr	r3, [pc, #280]	; (8006e88 <checkAktifCalisma+0x12e8>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006d72:	4b49      	ldr	r3, [pc, #292]	; (8006e98 <checkAktifCalisma+0x12f8>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d7c:	484e      	ldr	r0, [pc, #312]	; (8006eb8 <checkAktifCalisma+0x1318>)
 8006d7e:	f002 faaf 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d016      	beq.n	8006db6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d8c:	484a      	ldr	r0, [pc, #296]	; (8006eb8 <checkAktifCalisma+0x1318>)
 8006d8e:	f002 faa7 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00e      	beq.n	8006db6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d9c:	4846      	ldr	r0, [pc, #280]	; (8006eb8 <checkAktifCalisma+0x1318>)
 8006d9e:	f002 fa9f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006da8:	2140      	movs	r1, #64	; 0x40
 8006daa:	4838      	ldr	r0, [pc, #224]	; (8006e8c <checkAktifCalisma+0x12ec>)
 8006dac:	f002 fa98 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d103      	bne.n	8006dbe <checkAktifCalisma+0x121e>
			startBasili=1;
 8006db6:	4b41      	ldr	r3, [pc, #260]	; (8006ebc <checkAktifCalisma+0x131c>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	e002      	b.n	8006dc4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <checkAktifCalisma+0x131c>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006dc4:	4b3d      	ldr	r3, [pc, #244]	; (8006ebc <checkAktifCalisma+0x131c>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d016      	beq.n	8006dfa <checkAktifCalisma+0x125a>
 8006dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006dd0:	4839      	ldr	r0, [pc, #228]	; (8006eb8 <checkAktifCalisma+0x1318>)
 8006dd2:	f002 fa85 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d10e      	bne.n	8006dfa <checkAktifCalisma+0x125a>
			hataVar=1;
 8006ddc:	4b38      	ldr	r3, [pc, #224]	; (8006ec0 <checkAktifCalisma+0x1320>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006de2:	f7fe f973 	bl	80050cc <convertAndSendData>
			hataKoduLcdGoster(1);
 8006de6:	2001      	movs	r0, #1
 8006de8:	f7fe f88e 	bl	8004f08 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006dec:	2001      	movs	r0, #1
 8006dee:	f7fe fc25 	bl	800563c <hata2EEPROM>
			acilstophatasi=1;
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <checkAktifCalisma+0x1324>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e018      	b.n	8006e2c <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006dfa:	4b32      	ldr	r3, [pc, #200]	; (8006ec4 <checkAktifCalisma+0x1324>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d014      	beq.n	8006e2c <checkAktifCalisma+0x128c>
 8006e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e06:	482c      	ldr	r0, [pc, #176]	; (8006eb8 <checkAktifCalisma+0x1318>)
 8006e08:	f002 fa6a 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10c      	bne.n	8006e2c <checkAktifCalisma+0x128c>
 8006e12:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <checkAktifCalisma+0x131c>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f083 0301 	eor.w	r3, r3, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <checkAktifCalisma+0x1324>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006e26:	2001      	movs	r0, #1
 8006e28:	f7fe f81a 	bl	8004e60 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006e2c:	4b26      	ldr	r3, [pc, #152]	; (8006ec8 <checkAktifCalisma+0x1328>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f083 0301 	eor.w	r3, r3, #1
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04e      	beq.n	8006ed8 <checkAktifCalisma+0x1338>
 8006e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e3e:	481e      	ldr	r0, [pc, #120]	; (8006eb8 <checkAktifCalisma+0x1318>)
 8006e40:	f002 fa4e 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <checkAktifCalisma+0x12b2>
 8006e4a:	4b20      	ldr	r3, [pc, #128]	; (8006ecc <checkAktifCalisma+0x132c>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d042      	beq.n	8006ed8 <checkAktifCalisma+0x1338>
 8006e52:	4b1f      	ldr	r3, [pc, #124]	; (8006ed0 <checkAktifCalisma+0x1330>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d13e      	bne.n	8006ed8 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006e5a:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <checkAktifCalisma+0x1320>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006e60:	f7fe f934 	bl	80050cc <convertAndSendData>
			hataKoduLcdGoster(2);
 8006e64:	2002      	movs	r0, #2
 8006e66:	f7fe f84f 	bl	8004f08 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006e6a:	2002      	movs	r0, #2
 8006e6c:	f7fe fbe6 	bl	800563c <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8006e70:	4b18      	ldr	r3, [pc, #96]	; (8006ed4 <checkAktifCalisma+0x1334>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e047      	b.n	8006f08 <checkAktifCalisma+0x1368>
 8006e78:	20000333 	.word	0x20000333
 8006e7c:	20000332 	.word	0x20000332
 8006e80:	20000331 	.word	0x20000331
 8006e84:	40010800 	.word	0x40010800
 8006e88:	20000327 	.word	0x20000327
 8006e8c:	40011000 	.word	0x40011000
 8006e90:	200002ee 	.word	0x200002ee
 8006e94:	2000032a 	.word	0x2000032a
 8006e98:	20000328 	.word	0x20000328
 8006e9c:	200002e5 	.word	0x200002e5
 8006ea0:	200002e6 	.word	0x200002e6
 8006ea4:	200000a1 	.word	0x200000a1
 8006ea8:	200000a2 	.word	0x200000a2
 8006eac:	200002e7 	.word	0x200002e7
 8006eb0:	20000218 	.word	0x20000218
 8006eb4:	20000314 	.word	0x20000314
 8006eb8:	40010c00 	.word	0x40010c00
 8006ebc:	20000336 	.word	0x20000336
 8006ec0:	2000033d 	.word	0x2000033d
 8006ec4:	20000338 	.word	0x20000338
 8006ec8:	2000033f 	.word	0x2000033f
 8006ecc:	20000349 	.word	0x20000349
 8006ed0:	200002ec 	.word	0x200002ec
 8006ed4:	20000339 	.word	0x20000339
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006ed8:	4b9b      	ldr	r3, [pc, #620]	; (8007148 <checkAktifCalisma+0x15a8>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d013      	beq.n	8006f08 <checkAktifCalisma+0x1368>
 8006ee0:	4b9a      	ldr	r3, [pc, #616]	; (800714c <checkAktifCalisma+0x15ac>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00f      	beq.n	8006f08 <checkAktifCalisma+0x1368>
 8006ee8:	4b99      	ldr	r3, [pc, #612]	; (8007150 <checkAktifCalisma+0x15b0>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	f083 0301 	eor.w	r3, r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d008      	beq.n	8006f08 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006ef6:	4b94      	ldr	r3, [pc, #592]	; (8007148 <checkAktifCalisma+0x15a8>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006efc:	4b95      	ldr	r3, [pc, #596]	; (8007154 <checkAktifCalisma+0x15b4>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006f02:	2002      	movs	r0, #2
 8006f04:	f7fd ffac 	bl	8004e60 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006f08:	4b93      	ldr	r3, [pc, #588]	; (8007158 <checkAktifCalisma+0x15b8>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d11e      	bne.n	8006f4e <checkAktifCalisma+0x13ae>
 8006f10:	4b92      	ldr	r3, [pc, #584]	; (800715c <checkAktifCalisma+0x15bc>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d11a      	bne.n	8006f4e <checkAktifCalisma+0x13ae>
 8006f18:	4b91      	ldr	r3, [pc, #580]	; (8007160 <checkAktifCalisma+0x15c0>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d016      	beq.n	8006f4e <checkAktifCalisma+0x13ae>
 8006f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f24:	488f      	ldr	r0, [pc, #572]	; (8007164 <checkAktifCalisma+0x15c4>)
 8006f26:	f002 f9db 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d10e      	bne.n	8006f4e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006f30:	4b8d      	ldr	r3, [pc, #564]	; (8007168 <checkAktifCalisma+0x15c8>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006f36:	f7fe f8c9 	bl	80050cc <convertAndSendData>
			hataKoduLcdGoster(3);
 8006f3a:	2003      	movs	r0, #3
 8006f3c:	f7fd ffe4 	bl	8004f08 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006f40:	2003      	movs	r0, #3
 8006f42:	f7fe fb7b 	bl	800563c <hata2EEPROM>
			basinchatasi=1;
 8006f46:	4b89      	ldr	r3, [pc, #548]	; (800716c <checkAktifCalisma+0x15cc>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e015      	b.n	8006f7a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006f4e:	4b87      	ldr	r3, [pc, #540]	; (800716c <checkAktifCalisma+0x15cc>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d011      	beq.n	8006f7a <checkAktifCalisma+0x13da>
 8006f56:	4b80      	ldr	r3, [pc, #512]	; (8007158 <checkAktifCalisma+0x15b8>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d10d      	bne.n	8006f7a <checkAktifCalisma+0x13da>
 8006f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f62:	4883      	ldr	r0, [pc, #524]	; (8007170 <checkAktifCalisma+0x15d0>)
 8006f64:	f002 f9bc 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d105      	bne.n	8006f7a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006f6e:	4b7f      	ldr	r3, [pc, #508]	; (800716c <checkAktifCalisma+0x15cc>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006f74:	2003      	movs	r0, #3
 8006f76:	f7fd ff73 	bl	8004e60 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006f7a:	4b7e      	ldr	r3, [pc, #504]	; (8007174 <checkAktifCalisma+0x15d4>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d103      	bne.n	8006f8a <checkAktifCalisma+0x13ea>
 8006f82:	4b7d      	ldr	r3, [pc, #500]	; (8007178 <checkAktifCalisma+0x15d8>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01e      	beq.n	8006fc8 <checkAktifCalisma+0x1428>
 8006f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f8e:	487b      	ldr	r0, [pc, #492]	; (800717c <checkAktifCalisma+0x15dc>)
 8006f90:	f002 f9a6 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d116      	bne.n	8006fc8 <checkAktifCalisma+0x1428>
 8006f9a:	4b79      	ldr	r3, [pc, #484]	; (8007180 <checkAktifCalisma+0x15e0>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d003      	beq.n	8006faa <checkAktifCalisma+0x140a>
 8006fa2:	4b77      	ldr	r3, [pc, #476]	; (8007180 <checkAktifCalisma+0x15e0>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d10e      	bne.n	8006fc8 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006faa:	4b6f      	ldr	r3, [pc, #444]	; (8007168 <checkAktifCalisma+0x15c8>)
 8006fac:	2201      	movs	r2, #1
 8006fae:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006fb0:	f7fe f88c 	bl	80050cc <convertAndSendData>
			hataKoduLcdGoster(4);
 8006fb4:	2004      	movs	r0, #4
 8006fb6:	f7fd ffa7 	bl	8004f08 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006fba:	2004      	movs	r0, #4
 8006fbc:	f7fe fb3e 	bl	800563c <hata2EEPROM>
			katkapisivicihatasi=1;
 8006fc0:	4b70      	ldr	r3, [pc, #448]	; (8007184 <checkAktifCalisma+0x15e4>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e01f      	b.n	8007008 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006fc8:	4b6e      	ldr	r3, [pc, #440]	; (8007184 <checkAktifCalisma+0x15e4>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01b      	beq.n	8007008 <checkAktifCalisma+0x1468>
 8006fd0:	4b6d      	ldr	r3, [pc, #436]	; (8007188 <checkAktifCalisma+0x15e8>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d017      	beq.n	8007008 <checkAktifCalisma+0x1468>
 8006fd8:	4b66      	ldr	r3, [pc, #408]	; (8007174 <checkAktifCalisma+0x15d4>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f083 0301 	eor.w	r3, r3, #1
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d010      	beq.n	8007008 <checkAktifCalisma+0x1468>
 8006fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fea:	4864      	ldr	r0, [pc, #400]	; (800717c <checkAktifCalisma+0x15dc>)
 8006fec:	f002 f978 	bl	80092e0 <HAL_GPIO_ReadPin>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d108      	bne.n	8007008 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006ff6:	4b63      	ldr	r3, [pc, #396]	; (8007184 <checkAktifCalisma+0x15e4>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006ffc:	4b5e      	ldr	r3, [pc, #376]	; (8007178 <checkAktifCalisma+0x15d8>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007002:	2004      	movs	r0, #4
 8007004:	f7fd ff2c 	bl	8004e60 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007008:	4b5a      	ldr	r3, [pc, #360]	; (8007174 <checkAktifCalisma+0x15d4>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <checkAktifCalisma+0x1478>
 8007010:	4b5e      	ldr	r3, [pc, #376]	; (800718c <checkAktifCalisma+0x15ec>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01e      	beq.n	8007056 <checkAktifCalisma+0x14b6>
 8007018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800701c:	4857      	ldr	r0, [pc, #348]	; (800717c <checkAktifCalisma+0x15dc>)
 800701e:	f002 f95f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007022:	4603      	mov	r3, r0
 8007024:	2b01      	cmp	r3, #1
 8007026:	d116      	bne.n	8007056 <checkAktifCalisma+0x14b6>
 8007028:	4b55      	ldr	r3, [pc, #340]	; (8007180 <checkAktifCalisma+0x15e0>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d003      	beq.n	8007038 <checkAktifCalisma+0x1498>
 8007030:	4b53      	ldr	r3, [pc, #332]	; (8007180 <checkAktifCalisma+0x15e0>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d10e      	bne.n	8007056 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8007038:	4b4b      	ldr	r3, [pc, #300]	; (8007168 <checkAktifCalisma+0x15c8>)
 800703a:	2201      	movs	r2, #1
 800703c:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 800703e:	f7fe f845 	bl	80050cc <convertAndSendData>
			hataKoduLcdGoster(5);
 8007042:	2005      	movs	r0, #5
 8007044:	f7fd ff60 	bl	8004f08 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007048:	2005      	movs	r0, #5
 800704a:	f7fe faf7 	bl	800563c <hata2EEPROM>
			tablakapisivicihatasi=1;
 800704e:	4b50      	ldr	r3, [pc, #320]	; (8007190 <checkAktifCalisma+0x15f0>)
 8007050:	2201      	movs	r2, #1
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e023      	b.n	800709e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007056:	4b4e      	ldr	r3, [pc, #312]	; (8007190 <checkAktifCalisma+0x15f0>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01f      	beq.n	800709e <checkAktifCalisma+0x14fe>
 800705e:	4b4a      	ldr	r3, [pc, #296]	; (8007188 <checkAktifCalisma+0x15e8>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d01b      	beq.n	800709e <checkAktifCalisma+0x14fe>
 8007066:	4b43      	ldr	r3, [pc, #268]	; (8007174 <checkAktifCalisma+0x15d4>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	f083 0301 	eor.w	r3, r3, #1
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d014      	beq.n	800709e <checkAktifCalisma+0x14fe>
 8007074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007078:	4840      	ldr	r0, [pc, #256]	; (800717c <checkAktifCalisma+0x15dc>)
 800707a:	f002 f931 	bl	80092e0 <HAL_GPIO_ReadPin>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10c      	bne.n	800709e <checkAktifCalisma+0x14fe>
 8007084:	4b40      	ldr	r3, [pc, #256]	; (8007188 <checkAktifCalisma+0x15e8>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800708c:	4b40      	ldr	r3, [pc, #256]	; (8007190 <checkAktifCalisma+0x15f0>)
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007092:	4b3e      	ldr	r3, [pc, #248]	; (800718c <checkAktifCalisma+0x15ec>)
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007098:	2005      	movs	r0, #5
 800709a:	f7fd fee1 	bl	8004e60 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800709e:	4b30      	ldr	r3, [pc, #192]	; (8007160 <checkAktifCalisma+0x15c0>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d107      	bne.n	80070b6 <checkAktifCalisma+0x1516>
 80070a6:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <checkAktifCalisma+0x15b0>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d103      	bne.n	80070b6 <checkAktifCalisma+0x1516>
 80070ae:	4b39      	ldr	r3, [pc, #228]	; (8007194 <checkAktifCalisma+0x15f4>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d016      	beq.n	80070e4 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80070b6:	4b38      	ldr	r3, [pc, #224]	; (8007198 <checkAktifCalisma+0x15f8>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b38      	ldr	r3, [pc, #224]	; (800719c <checkAktifCalisma+0x15fc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	4a37      	ldr	r2, [pc, #220]	; (80071a0 <checkAktifCalisma+0x1600>)
 80070c2:	7812      	ldrb	r2, [r2, #0]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d30d      	bcc.n	80070e4 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80070c8:	4b27      	ldr	r3, [pc, #156]	; (8007168 <checkAktifCalisma+0x15c8>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	701a      	strb	r2, [r3, #0]
			  	convertAndSendData();
 80070ce:	f7fd fffd 	bl	80050cc <convertAndSendData>
			  	hataKoduLcdGoster(6);
 80070d2:	2006      	movs	r0, #6
 80070d4:	f7fd ff18 	bl	8004f08 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80070d8:	2006      	movs	r0, #6
 80070da:	f7fe faaf 	bl	800563c <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 80070de:	4b31      	ldr	r3, [pc, #196]	; (80071a4 <checkAktifCalisma+0x1604>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80070e4:	4b2f      	ldr	r3, [pc, #188]	; (80071a4 <checkAktifCalisma+0x1604>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d013      	beq.n	8007114 <checkAktifCalisma+0x1574>
 80070ec:	2108      	movs	r1, #8
 80070ee:	4823      	ldr	r0, [pc, #140]	; (800717c <checkAktifCalisma+0x15dc>)
 80070f0:	f002 f8f6 	bl	80092e0 <HAL_GPIO_ReadPin>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <checkAktifCalisma+0x1574>
 80070fa:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <checkAktifCalisma+0x15d4>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	f083 0301 	eor.w	r3, r3, #1
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8007108:	4b26      	ldr	r3, [pc, #152]	; (80071a4 <checkAktifCalisma+0x1604>)
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800710e:	2006      	movs	r0, #6
 8007110:	f7fd fea6 	bl	8004e60 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007114:	4b24      	ldr	r3, [pc, #144]	; (80071a8 <checkAktifCalisma+0x1608>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <checkAktifCalisma+0x1594>
 800711c:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <checkAktifCalisma+0x15b0>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d107      	bne.n	8007134 <checkAktifCalisma+0x1594>
 8007124:	4b21      	ldr	r3, [pc, #132]	; (80071ac <checkAktifCalisma+0x160c>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <checkAktifCalisma+0x1594>
 800712c:	4b19      	ldr	r3, [pc, #100]	; (8007194 <checkAktifCalisma+0x15f4>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d03f      	beq.n	80071b4 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8007134:	4b1e      	ldr	r3, [pc, #120]	; (80071b0 <checkAktifCalisma+0x1610>)
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <checkAktifCalisma+0x15d8>)
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <checkAktifCalisma+0x15ec>)
 8007142:	2201      	movs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e03c      	b.n	80071c2 <checkAktifCalisma+0x1622>
 8007148:	20000339 	.word	0x20000339
 800714c:	2000033f 	.word	0x2000033f
 8007150:	20000320 	.word	0x20000320
 8007154:	20000349 	.word	0x20000349
 8007158:	200002eb 	.word	0x200002eb
 800715c:	200002ef 	.word	0x200002ef
 8007160:	2000033c 	.word	0x2000033c
 8007164:	40011000 	.word	0x40011000
 8007168:	2000033d 	.word	0x2000033d
 800716c:	20000346 	.word	0x20000346
 8007170:	40010c00 	.word	0x40010c00
 8007174:	20000336 	.word	0x20000336
 8007178:	2000034a 	.word	0x2000034a
 800717c:	40010800 	.word	0x40010800
 8007180:	200002f0 	.word	0x200002f0
 8007184:	20000347 	.word	0x20000347
 8007188:	2000032a 	.word	0x2000032a
 800718c:	2000034b 	.word	0x2000034b
 8007190:	20000348 	.word	0x20000348
 8007194:	2000031f 	.word	0x2000031f
 8007198:	20000290 	.word	0x20000290
 800719c:	200002a4 	.word	0x200002a4
 80071a0:	20000300 	.word	0x20000300
 80071a4:	20000337 	.word	0x20000337
 80071a8:	2000031d 	.word	0x2000031d
 80071ac:	2000031e 	.word	0x2000031e
 80071b0:	2000033e 	.word	0x2000033e
		} else {
			makineCalisiyor=1;
 80071b4:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <checkAktifCalisma+0x1690>)
 80071b6:	2201      	movs	r2, #1
 80071b8:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80071ba:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <checkAktifCalisma+0x1694>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1e      	ldr	r2, [pc, #120]	; (8007238 <checkAktifCalisma+0x1698>)
 80071c0:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80071c2:	4b1e      	ldr	r3, [pc, #120]	; (800723c <checkAktifCalisma+0x169c>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d02f      	beq.n	800722a <checkAktifCalisma+0x168a>
 80071ca:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <checkAktifCalisma+0x16a0>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	f083 0301 	eor.w	r3, r3, #1
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d028      	beq.n	800722a <checkAktifCalisma+0x168a>
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <checkAktifCalisma+0x16a4>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	f083 0301 	eor.w	r3, r3, #1
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d021      	beq.n	800722a <checkAktifCalisma+0x168a>
 80071e6:	4b18      	ldr	r3, [pc, #96]	; (8007248 <checkAktifCalisma+0x16a8>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	f083 0301 	eor.w	r3, r3, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01a      	beq.n	800722a <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80071f4:	4b15      	ldr	r3, [pc, #84]	; (800724c <checkAktifCalisma+0x16ac>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f083 0301 	eor.w	r3, r3, #1
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d013      	beq.n	800722a <checkAktifCalisma+0x168a>
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <checkAktifCalisma+0x16b0>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f083 0301 	eor.w	r3, r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00c      	beq.n	800722a <checkAktifCalisma+0x168a>
 8007210:	4b10      	ldr	r3, [pc, #64]	; (8007254 <checkAktifCalisma+0x16b4>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f083 0301 	eor.w	r3, r3, #1
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <checkAktifCalisma+0x168a>
			hataVar=0;
 800721e:	4b07      	ldr	r3, [pc, #28]	; (800723c <checkAktifCalisma+0x169c>)
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007224:	2007      	movs	r0, #7
 8007226:	f7fd fe1b 	bl	8004e60 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	2000033e 	.word	0x2000033e
 8007234:	20000290 	.word	0x20000290
 8007238:	200002a4 	.word	0x200002a4
 800723c:	2000033d 	.word	0x2000033d
 8007240:	20000338 	.word	0x20000338
 8007244:	20000339 	.word	0x20000339
 8007248:	20000346 	.word	0x20000346
 800724c:	20000347 	.word	0x20000347
 8007250:	20000348 	.word	0x20000348
 8007254:	20000337 	.word	0x20000337

08007258 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800725c:	4b8b      	ldr	r3, [pc, #556]	; (800748c <checkDemoModCalisma+0x234>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	f040 8229 	bne.w	80076b8 <checkDemoModCalisma+0x460>
 8007266:	4b8a      	ldr	r3, [pc, #552]	; (8007490 <checkDemoModCalisma+0x238>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8224 	beq.w	80076b8 <checkDemoModCalisma+0x460>
 8007270:	4b88      	ldr	r3, [pc, #544]	; (8007494 <checkDemoModCalisma+0x23c>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 821f 	bne.w	80076b8 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800727a:	2102      	movs	r1, #2
 800727c:	4886      	ldr	r0, [pc, #536]	; (8007498 <checkDemoModCalisma+0x240>)
 800727e:	f002 f82f 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11d      	bne.n	80072c4 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007288:	4b84      	ldr	r3, [pc, #528]	; (800749c <checkDemoModCalisma+0x244>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f083 0301 	eor.w	r3, r3, #1
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007296:	4b82      	ldr	r3, [pc, #520]	; (80074a0 <checkDemoModCalisma+0x248>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	f083 0301 	eor.w	r3, r3, #1
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00f      	beq.n	80072c4 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80072a4:	4b7f      	ldr	r3, [pc, #508]	; (80074a4 <checkDemoModCalisma+0x24c>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f083 0301 	eor.w	r3, r3, #1
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d008      	beq.n	80072c4 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80072b2:	2201      	movs	r2, #1
 80072b4:	2104      	movs	r1, #4
 80072b6:	487c      	ldr	r0, [pc, #496]	; (80074a8 <checkDemoModCalisma+0x250>)
 80072b8:	f002 f829 	bl	800930e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80072bc:	4b7b      	ldr	r3, [pc, #492]	; (80074ac <checkDemoModCalisma+0x254>)
 80072be:	2201      	movs	r2, #1
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	e00e      	b.n	80072e2 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80072c4:	2102      	movs	r1, #2
 80072c6:	4874      	ldr	r0, [pc, #464]	; (8007498 <checkDemoModCalisma+0x240>)
 80072c8:	f002 f80a 	bl	80092e0 <HAL_GPIO_ReadPin>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d107      	bne.n	80072e2 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80072d2:	2200      	movs	r2, #0
 80072d4:	2104      	movs	r1, #4
 80072d6:	4874      	ldr	r0, [pc, #464]	; (80074a8 <checkDemoModCalisma+0x250>)
 80072d8:	f002 f819 	bl	800930e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80072dc:	4b73      	ldr	r3, [pc, #460]	; (80074ac <checkDemoModCalisma+0x254>)
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80072e2:	4b72      	ldr	r3, [pc, #456]	; (80074ac <checkDemoModCalisma+0x254>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <checkDemoModCalisma+0xaa>
 80072ea:	4b6d      	ldr	r3, [pc, #436]	; (80074a0 <checkDemoModCalisma+0x248>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d107      	bne.n	8007302 <checkDemoModCalisma+0xaa>
 80072f2:	4b6c      	ldr	r3, [pc, #432]	; (80074a4 <checkDemoModCalisma+0x24c>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <checkDemoModCalisma+0xaa>
 80072fa:	4b68      	ldr	r3, [pc, #416]	; (800749c <checkDemoModCalisma+0x244>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00c      	beq.n	800731c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007302:	2201      	movs	r2, #1
 8007304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007308:	4867      	ldr	r0, [pc, #412]	; (80074a8 <checkDemoModCalisma+0x250>)
 800730a:	f002 f800 	bl	800930e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800730e:	2201      	movs	r2, #1
 8007310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007314:	4864      	ldr	r0, [pc, #400]	; (80074a8 <checkDemoModCalisma+0x250>)
 8007316:	f001 fffa 	bl	800930e <HAL_GPIO_WritePin>
 800731a:	e00b      	b.n	8007334 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800731c:	2200      	movs	r2, #0
 800731e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007322:	4861      	ldr	r0, [pc, #388]	; (80074a8 <checkDemoModCalisma+0x250>)
 8007324:	f001 fff3 	bl	800930e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007328:	2200      	movs	r2, #0
 800732a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800732e:	485e      	ldr	r0, [pc, #376]	; (80074a8 <checkDemoModCalisma+0x250>)
 8007330:	f001 ffed 	bl	800930e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007334:	2102      	movs	r1, #2
 8007336:	4858      	ldr	r0, [pc, #352]	; (8007498 <checkDemoModCalisma+0x240>)
 8007338:	f001 ffd2 	bl	80092e0 <HAL_GPIO_ReadPin>
 800733c:	4603      	mov	r3, r0
 800733e:	2b01      	cmp	r3, #1
 8007340:	d10d      	bne.n	800735e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007346:	4854      	ldr	r0, [pc, #336]	; (8007498 <checkDemoModCalisma+0x240>)
 8007348:	f001 ffca 	bl	80092e0 <HAL_GPIO_ReadPin>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d105      	bne.n	800735e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007352:	4b56      	ldr	r3, [pc, #344]	; (80074ac <checkDemoModCalisma+0x254>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	f083 0301 	eor.w	r3, r3, #1
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800735e:	2102      	movs	r1, #2
 8007360:	484d      	ldr	r0, [pc, #308]	; (8007498 <checkDemoModCalisma+0x240>)
 8007362:	f001 ffbd 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007366:	4603      	mov	r3, r0
 8007368:	2b01      	cmp	r3, #1
 800736a:	d125      	bne.n	80073b8 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800736c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007370:	4849      	ldr	r0, [pc, #292]	; (8007498 <checkDemoModCalisma+0x240>)
 8007372:	f001 ffb5 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d11d      	bne.n	80073b8 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800737c:	4b4b      	ldr	r3, [pc, #300]	; (80074ac <checkDemoModCalisma+0x254>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f083 0301 	eor.w	r3, r3, #1
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d016      	beq.n	80073b8 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800738a:	4b44      	ldr	r3, [pc, #272]	; (800749c <checkDemoModCalisma+0x244>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	f083 0301 	eor.w	r3, r3, #1
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00f      	beq.n	80073b8 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007398:	4b42      	ldr	r3, [pc, #264]	; (80074a4 <checkDemoModCalisma+0x24c>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f083 0301 	eor.w	r3, r3, #1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80073a6:	2201      	movs	r2, #1
 80073a8:	2120      	movs	r1, #32
 80073aa:	483b      	ldr	r0, [pc, #236]	; (8007498 <checkDemoModCalisma+0x240>)
 80073ac:	f001 ffaf 	bl	800930e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80073b0:	4b3b      	ldr	r3, [pc, #236]	; (80074a0 <checkDemoModCalisma+0x248>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e007      	b.n	80073c8 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80073b8:	2200      	movs	r2, #0
 80073ba:	2120      	movs	r1, #32
 80073bc:	4836      	ldr	r0, [pc, #216]	; (8007498 <checkDemoModCalisma+0x240>)
 80073be:	f001 ffa6 	bl	800930e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80073c2:	4b37      	ldr	r3, [pc, #220]	; (80074a0 <checkDemoModCalisma+0x248>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80073c8:	2102      	movs	r1, #2
 80073ca:	4833      	ldr	r0, [pc, #204]	; (8007498 <checkDemoModCalisma+0x240>)
 80073cc:	f001 ff88 	bl	80092e0 <HAL_GPIO_ReadPin>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d125      	bne.n	8007422 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80073d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073da:	482f      	ldr	r0, [pc, #188]	; (8007498 <checkDemoModCalisma+0x240>)
 80073dc:	f001 ff80 	bl	80092e0 <HAL_GPIO_ReadPin>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d11d      	bne.n	8007422 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80073e6:	4b31      	ldr	r3, [pc, #196]	; (80074ac <checkDemoModCalisma+0x254>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f083 0301 	eor.w	r3, r3, #1
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d016      	beq.n	8007422 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80073f4:	4b2a      	ldr	r3, [pc, #168]	; (80074a0 <checkDemoModCalisma+0x248>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f083 0301 	eor.w	r3, r3, #1
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00f      	beq.n	8007422 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007402:	4b26      	ldr	r3, [pc, #152]	; (800749c <checkDemoModCalisma+0x244>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	f083 0301 	eor.w	r3, r3, #1
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007410:	2201      	movs	r2, #1
 8007412:	2110      	movs	r1, #16
 8007414:	4820      	ldr	r0, [pc, #128]	; (8007498 <checkDemoModCalisma+0x240>)
 8007416:	f001 ff7a 	bl	800930e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800741a:	4b22      	ldr	r3, [pc, #136]	; (80074a4 <checkDemoModCalisma+0x24c>)
 800741c:	2201      	movs	r2, #1
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e007      	b.n	8007432 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007422:	2200      	movs	r2, #0
 8007424:	2110      	movs	r1, #16
 8007426:	481c      	ldr	r0, [pc, #112]	; (8007498 <checkDemoModCalisma+0x240>)
 8007428:	f001 ff71 	bl	800930e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 800742c:	4b1d      	ldr	r3, [pc, #116]	; (80074a4 <checkDemoModCalisma+0x24c>)
 800742e:	2200      	movs	r2, #0
 8007430:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007432:	2104      	movs	r1, #4
 8007434:	4818      	ldr	r0, [pc, #96]	; (8007498 <checkDemoModCalisma+0x240>)
 8007436:	f001 ff53 	bl	80092e0 <HAL_GPIO_ReadPin>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d139      	bne.n	80074b4 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007440:	4b1a      	ldr	r3, [pc, #104]	; (80074ac <checkDemoModCalisma+0x254>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f083 0301 	eor.w	r3, r3, #1
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d032      	beq.n	80074b4 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <checkDemoModCalisma+0x24c>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f083 0301 	eor.w	r3, r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02b      	beq.n	80074b4 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800745c:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <checkDemoModCalisma+0x248>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f083 0301 	eor.w	r3, r3, #1
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d024      	beq.n	80074b4 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800746a:	2201      	movs	r2, #1
 800746c:	2102      	movs	r1, #2
 800746e:	480e      	ldr	r0, [pc, #56]	; (80074a8 <checkDemoModCalisma+0x250>)
 8007470:	f001 ff4d 	bl	800930e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007474:	2201      	movs	r2, #1
 8007476:	2101      	movs	r1, #1
 8007478:	480b      	ldr	r0, [pc, #44]	; (80074a8 <checkDemoModCalisma+0x250>)
 800747a:	f001 ff48 	bl	800930e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <checkDemoModCalisma+0x244>)
 8007480:	2201      	movs	r2, #1
 8007482:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007484:	4b0a      	ldr	r3, [pc, #40]	; (80074b0 <checkDemoModCalisma+0x258>)
 8007486:	2201      	movs	r2, #1
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	e027      	b.n	80074dc <checkDemoModCalisma+0x284>
 800748c:	20000306 	.word	0x20000306
 8007490:	2000033a 	.word	0x2000033a
 8007494:	20000305 	.word	0x20000305
 8007498:	40011000 	.word	0x40011000
 800749c:	20000341 	.word	0x20000341
 80074a0:	20000342 	.word	0x20000342
 80074a4:	20000343 	.word	0x20000343
 80074a8:	40010c00 	.word	0x40010c00
 80074ac:	20000340 	.word	0x20000340
 80074b0:	20000326 	.word	0x20000326
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80074b4:	2104      	movs	r1, #4
 80074b6:	48a0      	ldr	r0, [pc, #640]	; (8007738 <checkDemoModCalisma+0x4e0>)
 80074b8:	f001 ff12 	bl	80092e0 <HAL_GPIO_ReadPin>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d10c      	bne.n	80074dc <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80074c2:	2200      	movs	r2, #0
 80074c4:	2102      	movs	r1, #2
 80074c6:	489d      	ldr	r0, [pc, #628]	; (800773c <checkDemoModCalisma+0x4e4>)
 80074c8:	f001 ff21 	bl	800930e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80074cc:	2200      	movs	r2, #0
 80074ce:	2101      	movs	r1, #1
 80074d0:	489a      	ldr	r0, [pc, #616]	; (800773c <checkDemoModCalisma+0x4e4>)
 80074d2:	f001 ff1c 	bl	800930e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80074d6:	4b9a      	ldr	r3, [pc, #616]	; (8007740 <checkDemoModCalisma+0x4e8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80074dc:	2104      	movs	r1, #4
 80074de:	4896      	ldr	r0, [pc, #600]	; (8007738 <checkDemoModCalisma+0x4e0>)
 80074e0:	f001 fefe 	bl	80092e0 <HAL_GPIO_ReadPin>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10d      	bne.n	8007506 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80074ea:	2201      	movs	r2, #1
 80074ec:	2180      	movs	r1, #128	; 0x80
 80074ee:	4895      	ldr	r0, [pc, #596]	; (8007744 <checkDemoModCalisma+0x4ec>)
 80074f0:	f001 ff0d 	bl	800930e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80074f4:	2201      	movs	r2, #1
 80074f6:	2120      	movs	r1, #32
 80074f8:	4892      	ldr	r0, [pc, #584]	; (8007744 <checkDemoModCalisma+0x4ec>)
 80074fa:	f001 ff08 	bl	800930e <HAL_GPIO_WritePin>
			timer3 = millis;
 80074fe:	4b92      	ldr	r3, [pc, #584]	; (8007748 <checkDemoModCalisma+0x4f0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a92      	ldr	r2, [pc, #584]	; (800774c <checkDemoModCalisma+0x4f4>)
 8007504:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007506:	4b90      	ldr	r3, [pc, #576]	; (8007748 <checkDemoModCalisma+0x4f0>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4b90      	ldr	r3, [pc, #576]	; (800774c <checkDemoModCalisma+0x4f4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b04      	cmp	r3, #4
 8007512:	d909      	bls.n	8007528 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007514:	2200      	movs	r2, #0
 8007516:	2180      	movs	r1, #128	; 0x80
 8007518:	488a      	ldr	r0, [pc, #552]	; (8007744 <checkDemoModCalisma+0x4ec>)
 800751a:	f001 fef8 	bl	800930e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800751e:	2200      	movs	r2, #0
 8007520:	2120      	movs	r1, #32
 8007522:	4888      	ldr	r0, [pc, #544]	; (8007744 <checkDemoModCalisma+0x4ec>)
 8007524:	f001 fef3 	bl	800930e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007528:	2102      	movs	r1, #2
 800752a:	4883      	ldr	r0, [pc, #524]	; (8007738 <checkDemoModCalisma+0x4e0>)
 800752c:	f001 fed8 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007530:	4603      	mov	r3, r0
 8007532:	2b01      	cmp	r3, #1
 8007534:	d108      	bne.n	8007548 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007536:	2201      	movs	r2, #1
 8007538:	2140      	movs	r1, #64	; 0x40
 800753a:	4882      	ldr	r0, [pc, #520]	; (8007744 <checkDemoModCalisma+0x4ec>)
 800753c:	f001 fee7 	bl	800930e <HAL_GPIO_WritePin>
			timer3 = millis;
 8007540:	4b81      	ldr	r3, [pc, #516]	; (8007748 <checkDemoModCalisma+0x4f0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a81      	ldr	r2, [pc, #516]	; (800774c <checkDemoModCalisma+0x4f4>)
 8007546:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007548:	4b7f      	ldr	r3, [pc, #508]	; (8007748 <checkDemoModCalisma+0x4f0>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4b7f      	ldr	r3, [pc, #508]	; (800774c <checkDemoModCalisma+0x4f4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b04      	cmp	r3, #4
 8007554:	d904      	bls.n	8007560 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007556:	2200      	movs	r2, #0
 8007558:	2140      	movs	r1, #64	; 0x40
 800755a:	487a      	ldr	r0, [pc, #488]	; (8007744 <checkDemoModCalisma+0x4ec>)
 800755c:	f001 fed7 	bl	800930e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007560:	4b7b      	ldr	r3, [pc, #492]	; (8007750 <checkDemoModCalisma+0x4f8>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d058      	beq.n	800761a <checkDemoModCalisma+0x3c2>
 8007568:	4b7a      	ldr	r3, [pc, #488]	; (8007754 <checkDemoModCalisma+0x4fc>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d054      	beq.n	800761a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007570:	4b79      	ldr	r3, [pc, #484]	; (8007758 <checkDemoModCalisma+0x500>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	3301      	adds	r3, #1
 8007576:	b2da      	uxtb	r2, r3
 8007578:	4b77      	ldr	r3, [pc, #476]	; (8007758 <checkDemoModCalisma+0x500>)
 800757a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800757c:	4b76      	ldr	r3, [pc, #472]	; (8007758 <checkDemoModCalisma+0x500>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b09      	cmp	r3, #9
 8007582:	d908      	bls.n	8007596 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007584:	4b74      	ldr	r3, [pc, #464]	; (8007758 <checkDemoModCalisma+0x500>)
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800758a:	4b74      	ldr	r3, [pc, #464]	; (800775c <checkDemoModCalisma+0x504>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	3301      	adds	r3, #1
 8007590:	b2da      	uxtb	r2, r3
 8007592:	4b72      	ldr	r3, [pc, #456]	; (800775c <checkDemoModCalisma+0x504>)
 8007594:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007596:	4b71      	ldr	r3, [pc, #452]	; (800775c <checkDemoModCalisma+0x504>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b09      	cmp	r3, #9
 800759c:	d908      	bls.n	80075b0 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800759e:	4b6f      	ldr	r3, [pc, #444]	; (800775c <checkDemoModCalisma+0x504>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80075a4:	4b6e      	ldr	r3, [pc, #440]	; (8007760 <checkDemoModCalisma+0x508>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	4b6c      	ldr	r3, [pc, #432]	; (8007760 <checkDemoModCalisma+0x508>)
 80075ae:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80075b0:	4b6b      	ldr	r3, [pc, #428]	; (8007760 <checkDemoModCalisma+0x508>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b09      	cmp	r3, #9
 80075b6:	d908      	bls.n	80075ca <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80075b8:	4b69      	ldr	r3, [pc, #420]	; (8007760 <checkDemoModCalisma+0x508>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80075be:	4b69      	ldr	r3, [pc, #420]	; (8007764 <checkDemoModCalisma+0x50c>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	4b67      	ldr	r3, [pc, #412]	; (8007764 <checkDemoModCalisma+0x50c>)
 80075c8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80075ca:	4b66      	ldr	r3, [pc, #408]	; (8007764 <checkDemoModCalisma+0x50c>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d908      	bls.n	80075e4 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80075d2:	4b64      	ldr	r3, [pc, #400]	; (8007764 <checkDemoModCalisma+0x50c>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80075d8:	4b63      	ldr	r3, [pc, #396]	; (8007768 <checkDemoModCalisma+0x510>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	4b61      	ldr	r3, [pc, #388]	; (8007768 <checkDemoModCalisma+0x510>)
 80075e2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80075e4:	4b60      	ldr	r3, [pc, #384]	; (8007768 <checkDemoModCalisma+0x510>)
 80075e6:	781a      	ldrb	r2, [r3, #0]
 80075e8:	4b60      	ldr	r3, [pc, #384]	; (800776c <checkDemoModCalisma+0x514>)
 80075ea:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80075ee:	4b5d      	ldr	r3, [pc, #372]	; (8007764 <checkDemoModCalisma+0x50c>)
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	4b5e      	ldr	r3, [pc, #376]	; (800776c <checkDemoModCalisma+0x514>)
 80075f4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80075f6:	4b5a      	ldr	r3, [pc, #360]	; (8007760 <checkDemoModCalisma+0x508>)
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	4b5c      	ldr	r3, [pc, #368]	; (800776c <checkDemoModCalisma+0x514>)
 80075fc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80075fe:	4b57      	ldr	r3, [pc, #348]	; (800775c <checkDemoModCalisma+0x504>)
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	4b5a      	ldr	r3, [pc, #360]	; (800776c <checkDemoModCalisma+0x514>)
 8007604:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007606:	4b54      	ldr	r3, [pc, #336]	; (8007758 <checkDemoModCalisma+0x500>)
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	4b58      	ldr	r3, [pc, #352]	; (800776c <checkDemoModCalisma+0x514>)
 800760c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800760e:	4b58      	ldr	r3, [pc, #352]	; (8007770 <checkDemoModCalisma+0x518>)
 8007610:	2201      	movs	r2, #1
 8007612:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007614:	4b4f      	ldr	r3, [pc, #316]	; (8007754 <checkDemoModCalisma+0x4fc>)
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800761a:	4b56      	ldr	r3, [pc, #344]	; (8007774 <checkDemoModCalisma+0x51c>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 8087 	bne.w	8007732 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007624:	4a54      	ldr	r2, [pc, #336]	; (8007778 <checkDemoModCalisma+0x520>)
 8007626:	2101      	movs	r1, #1
 8007628:	2002      	movs	r0, #2
 800762a:	f7f9 f8c5 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800762e:	4a53      	ldr	r2, [pc, #332]	; (800777c <checkDemoModCalisma+0x524>)
 8007630:	2101      	movs	r1, #1
 8007632:	2001      	movs	r0, #1
 8007634:	f7f9 f8c0 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007638:	4b4b      	ldr	r3, [pc, #300]	; (8007768 <checkDemoModCalisma+0x510>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	220a      	movs	r2, #10
 800763e:	4950      	ldr	r1, [pc, #320]	; (8007780 <checkDemoModCalisma+0x528>)
 8007640:	4618      	mov	r0, r3
 8007642:	f004 fe79 	bl	800c338 <itoa>
			lcd_print(2,12,snum);
 8007646:	4a4e      	ldr	r2, [pc, #312]	; (8007780 <checkDemoModCalisma+0x528>)
 8007648:	210c      	movs	r1, #12
 800764a:	2002      	movs	r0, #2
 800764c:	f7f9 f8b4 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007650:	4b44      	ldr	r3, [pc, #272]	; (8007764 <checkDemoModCalisma+0x50c>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	220a      	movs	r2, #10
 8007656:	494a      	ldr	r1, [pc, #296]	; (8007780 <checkDemoModCalisma+0x528>)
 8007658:	4618      	mov	r0, r3
 800765a:	f004 fe6d 	bl	800c338 <itoa>
			lcd_print(2,13,snum);
 800765e:	4a48      	ldr	r2, [pc, #288]	; (8007780 <checkDemoModCalisma+0x528>)
 8007660:	210d      	movs	r1, #13
 8007662:	2002      	movs	r0, #2
 8007664:	f7f9 f8a8 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007668:	4b3d      	ldr	r3, [pc, #244]	; (8007760 <checkDemoModCalisma+0x508>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	220a      	movs	r2, #10
 800766e:	4944      	ldr	r1, [pc, #272]	; (8007780 <checkDemoModCalisma+0x528>)
 8007670:	4618      	mov	r0, r3
 8007672:	f004 fe61 	bl	800c338 <itoa>
			lcd_print(2,14,snum);
 8007676:	4a42      	ldr	r2, [pc, #264]	; (8007780 <checkDemoModCalisma+0x528>)
 8007678:	210e      	movs	r1, #14
 800767a:	2002      	movs	r0, #2
 800767c:	f7f9 f89c 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007680:	4b36      	ldr	r3, [pc, #216]	; (800775c <checkDemoModCalisma+0x504>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	220a      	movs	r2, #10
 8007686:	493e      	ldr	r1, [pc, #248]	; (8007780 <checkDemoModCalisma+0x528>)
 8007688:	4618      	mov	r0, r3
 800768a:	f004 fe55 	bl	800c338 <itoa>
			lcd_print(2,15,snum);
 800768e:	4a3c      	ldr	r2, [pc, #240]	; (8007780 <checkDemoModCalisma+0x528>)
 8007690:	210f      	movs	r1, #15
 8007692:	2002      	movs	r0, #2
 8007694:	f7f9 f890 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007698:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <checkDemoModCalisma+0x500>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	220a      	movs	r2, #10
 800769e:	4938      	ldr	r1, [pc, #224]	; (8007780 <checkDemoModCalisma+0x528>)
 80076a0:	4618      	mov	r0, r3
 80076a2:	f004 fe49 	bl	800c338 <itoa>
			lcd_print(2,16,snum);
 80076a6:	4a36      	ldr	r2, [pc, #216]	; (8007780 <checkDemoModCalisma+0x528>)
 80076a8:	2110      	movs	r1, #16
 80076aa:	2002      	movs	r0, #2
 80076ac:	f7f9 f884 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 80076b0:	4b34      	ldr	r3, [pc, #208]	; (8007784 <checkDemoModCalisma+0x52c>)
 80076b2:	2201      	movs	r2, #1
 80076b4:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80076b6:	e03c      	b.n	8007732 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80076b8:	4b33      	ldr	r3, [pc, #204]	; (8007788 <checkDemoModCalisma+0x530>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d003      	beq.n	80076c8 <checkDemoModCalisma+0x470>
 80076c0:	4b2c      	ldr	r3, [pc, #176]	; (8007774 <checkDemoModCalisma+0x51c>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d134      	bne.n	8007732 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80076c8:	2200      	movs	r2, #0
 80076ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80076ce:	481b      	ldr	r0, [pc, #108]	; (800773c <checkDemoModCalisma+0x4e4>)
 80076d0:	f001 fe1d 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80076d4:	2200      	movs	r2, #0
 80076d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80076da:	4818      	ldr	r0, [pc, #96]	; (800773c <checkDemoModCalisma+0x4e4>)
 80076dc:	f001 fe17 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80076e0:	2200      	movs	r2, #0
 80076e2:	2104      	movs	r1, #4
 80076e4:	4815      	ldr	r0, [pc, #84]	; (800773c <checkDemoModCalisma+0x4e4>)
 80076e6:	f001 fe12 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80076ea:	2200      	movs	r2, #0
 80076ec:	2102      	movs	r1, #2
 80076ee:	4813      	ldr	r0, [pc, #76]	; (800773c <checkDemoModCalisma+0x4e4>)
 80076f0:	f001 fe0d 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80076f4:	2200      	movs	r2, #0
 80076f6:	2101      	movs	r1, #1
 80076f8:	4810      	ldr	r0, [pc, #64]	; (800773c <checkDemoModCalisma+0x4e4>)
 80076fa:	f001 fe08 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80076fe:	2200      	movs	r2, #0
 8007700:	2120      	movs	r1, #32
 8007702:	480d      	ldr	r0, [pc, #52]	; (8007738 <checkDemoModCalisma+0x4e0>)
 8007704:	f001 fe03 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007708:	2200      	movs	r2, #0
 800770a:	2110      	movs	r1, #16
 800770c:	480a      	ldr	r0, [pc, #40]	; (8007738 <checkDemoModCalisma+0x4e0>)
 800770e:	f001 fdfe 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007712:	2200      	movs	r2, #0
 8007714:	2180      	movs	r1, #128	; 0x80
 8007716:	480b      	ldr	r0, [pc, #44]	; (8007744 <checkDemoModCalisma+0x4ec>)
 8007718:	f001 fdf9 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800771c:	2200      	movs	r2, #0
 800771e:	2140      	movs	r1, #64	; 0x40
 8007720:	4808      	ldr	r0, [pc, #32]	; (8007744 <checkDemoModCalisma+0x4ec>)
 8007722:	f001 fdf4 	bl	800930e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007726:	2200      	movs	r2, #0
 8007728:	2120      	movs	r1, #32
 800772a:	4806      	ldr	r0, [pc, #24]	; (8007744 <checkDemoModCalisma+0x4ec>)
 800772c:	f001 fdef 	bl	800930e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007730:	e7ff      	b.n	8007732 <checkDemoModCalisma+0x4da>
 8007732:	bf00      	nop
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40011000 	.word	0x40011000
 800773c:	40010c00 	.word	0x40010c00
 8007740:	20000341 	.word	0x20000341
 8007744:	40010800 	.word	0x40010800
 8007748:	20000290 	.word	0x20000290
 800774c:	200002a0 	.word	0x200002a0
 8007750:	20000340 	.word	0x20000340
 8007754:	20000326 	.word	0x20000326
 8007758:	200002e5 	.word	0x200002e5
 800775c:	200002e6 	.word	0x200002e6
 8007760:	200000a1 	.word	0x200000a1
 8007764:	200000a2 	.word	0x200000a2
 8007768:	200002e7 	.word	0x200002e7
 800776c:	20000218 	.word	0x20000218
 8007770:	20000314 	.word	0x20000314
 8007774:	20000305 	.word	0x20000305
 8007778:	0800db68 	.word	0x0800db68
 800777c:	0800db74 	.word	0x0800db74
 8007780:	20000288 	.word	0x20000288
 8007784:	2000031c 	.word	0x2000031c
 8007788:	20000306 	.word	0x20000306

0800778c <mergeData>:

char* mergeData() {
 800778c:	b580      	push	{r7, lr}
 800778e:	b09e      	sub	sp, #120	; 0x78
 8007790:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007792:	2300      	movs	r3, #0
 8007794:	643b      	str	r3, [r7, #64]	; 0x40
 8007796:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800779a:	2229      	movs	r2, #41	; 0x29
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f004 fef1 	bl	800c586 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80077a4:	4b6a      	ldr	r3, [pc, #424]	; (8007950 <mergeData+0x1c4>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	713b      	strb	r3, [r7, #4]
 80077aa:	4b6a      	ldr	r3, [pc, #424]	; (8007954 <mergeData+0x1c8>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	717b      	strb	r3, [r7, #5]
 80077b0:	4b69      	ldr	r3, [pc, #420]	; (8007958 <mergeData+0x1cc>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	71bb      	strb	r3, [r7, #6]
 80077b6:	4b69      	ldr	r3, [pc, #420]	; (800795c <mergeData+0x1d0>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	71fb      	strb	r3, [r7, #7]
 80077bc:	4b68      	ldr	r3, [pc, #416]	; (8007960 <mergeData+0x1d4>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	723b      	strb	r3, [r7, #8]
 80077c2:	4b68      	ldr	r3, [pc, #416]	; (8007964 <mergeData+0x1d8>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	727b      	strb	r3, [r7, #9]
 80077c8:	4b67      	ldr	r3, [pc, #412]	; (8007968 <mergeData+0x1dc>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	72bb      	strb	r3, [r7, #10]
 80077ce:	4b67      	ldr	r3, [pc, #412]	; (800796c <mergeData+0x1e0>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	72fb      	strb	r3, [r7, #11]
 80077d4:	4b66      	ldr	r3, [pc, #408]	; (8007970 <mergeData+0x1e4>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	733b      	strb	r3, [r7, #12]
 80077da:	4b66      	ldr	r3, [pc, #408]	; (8007974 <mergeData+0x1e8>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	737b      	strb	r3, [r7, #13]
 80077e0:	4b65      	ldr	r3, [pc, #404]	; (8007978 <mergeData+0x1ec>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	73bb      	strb	r3, [r7, #14]
 80077e6:	4b65      	ldr	r3, [pc, #404]	; (800797c <mergeData+0x1f0>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	73fb      	strb	r3, [r7, #15]
 80077ec:	4b64      	ldr	r3, [pc, #400]	; (8007980 <mergeData+0x1f4>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	743b      	strb	r3, [r7, #16]
 80077f2:	4b64      	ldr	r3, [pc, #400]	; (8007984 <mergeData+0x1f8>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	747b      	strb	r3, [r7, #17]
 80077f8:	4b63      	ldr	r3, [pc, #396]	; (8007988 <mergeData+0x1fc>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	74bb      	strb	r3, [r7, #18]
 80077fe:	4b63      	ldr	r3, [pc, #396]	; (800798c <mergeData+0x200>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	74fb      	strb	r3, [r7, #19]
 8007804:	4b62      	ldr	r3, [pc, #392]	; (8007990 <mergeData+0x204>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	753b      	strb	r3, [r7, #20]
 800780a:	4b62      	ldr	r3, [pc, #392]	; (8007994 <mergeData+0x208>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	757b      	strb	r3, [r7, #21]
 8007810:	4b61      	ldr	r3, [pc, #388]	; (8007998 <mergeData+0x20c>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	75bb      	strb	r3, [r7, #22]
 8007816:	4b61      	ldr	r3, [pc, #388]	; (800799c <mergeData+0x210>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	75fb      	strb	r3, [r7, #23]
 800781c:	4b60      	ldr	r3, [pc, #384]	; (80079a0 <mergeData+0x214>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	763b      	strb	r3, [r7, #24]
 8007822:	4b60      	ldr	r3, [pc, #384]	; (80079a4 <mergeData+0x218>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	767b      	strb	r3, [r7, #25]
 8007828:	4b5f      	ldr	r3, [pc, #380]	; (80079a8 <mergeData+0x21c>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	76bb      	strb	r3, [r7, #26]
 800782e:	4b5f      	ldr	r3, [pc, #380]	; (80079ac <mergeData+0x220>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	76fb      	strb	r3, [r7, #27]
 8007834:	4b5e      	ldr	r3, [pc, #376]	; (80079b0 <mergeData+0x224>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	773b      	strb	r3, [r7, #28]
 800783a:	4b5e      	ldr	r3, [pc, #376]	; (80079b4 <mergeData+0x228>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	777b      	strb	r3, [r7, #29]
 8007840:	4b5d      	ldr	r3, [pc, #372]	; (80079b8 <mergeData+0x22c>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	77bb      	strb	r3, [r7, #30]
 8007846:	4b5d      	ldr	r3, [pc, #372]	; (80079bc <mergeData+0x230>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	77fb      	strb	r3, [r7, #31]
 800784c:	4b5c      	ldr	r3, [pc, #368]	; (80079c0 <mergeData+0x234>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f887 3020 	strb.w	r3, [r7, #32]
 8007854:	4b5b      	ldr	r3, [pc, #364]	; (80079c4 <mergeData+0x238>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800785c:	4b5a      	ldr	r3, [pc, #360]	; (80079c8 <mergeData+0x23c>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007864:	4b59      	ldr	r3, [pc, #356]	; (80079cc <mergeData+0x240>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800786c:	4b58      	ldr	r3, [pc, #352]	; (80079d0 <mergeData+0x244>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8007874:	4b57      	ldr	r3, [pc, #348]	; (80079d4 <mergeData+0x248>)
 8007876:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 800787a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800787e:	4b55      	ldr	r3, [pc, #340]	; (80079d4 <mergeData+0x248>)
 8007880:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8007888:	4b52      	ldr	r3, [pc, #328]	; (80079d4 <mergeData+0x248>)
 800788a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800788e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 8007892:	4b50      	ldr	r3, [pc, #320]	; (80079d4 <mergeData+0x248>)
 8007894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007898:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 800789c:	4b4d      	ldr	r3, [pc, #308]	; (80079d4 <mergeData+0x248>)
 800789e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80078a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80078a6:	4b4b      	ldr	r3, [pc, #300]	; (80079d4 <mergeData+0x248>)
 80078a8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80078ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80078b0:	4b48      	ldr	r3, [pc, #288]	; (80079d4 <mergeData+0x248>)
 80078b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80078b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80078ba:	4b46      	ldr	r3, [pc, #280]	; (80079d4 <mergeData+0x248>)
 80078bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80078c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80078c4:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <mergeData+0x248>)
 80078c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80078ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80078ce:	4b41      	ldr	r3, [pc, #260]	; (80079d4 <mergeData+0x248>)
 80078d0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80078d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 80078d8:	4b3e      	ldr	r3, [pc, #248]	; (80079d4 <mergeData+0x248>)
 80078da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80078de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078e2:	4b3d      	ldr	r3, [pc, #244]	; (80079d8 <mergeData+0x24c>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	677b      	str	r3, [r7, #116]	; 0x74
 80078ee:	e015      	b.n	800791c <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 80078f0:	1d3a      	adds	r2, r7, #4
 80078f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f4:	4413      	add	r3, r2
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80078fe:	4937      	ldr	r1, [pc, #220]	; (80079dc <mergeData+0x250>)
 8007900:	4618      	mov	r0, r3
 8007902:	f004 fdcf 	bl	800c4a4 <siprintf>
	    strcat(combinedString, temp);
 8007906:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800790a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800790e:	4611      	mov	r1, r2
 8007910:	4618      	mov	r0, r3
 8007912:	f004 fe29 	bl	800c568 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007918:	3301      	adds	r3, #1
 800791a:	677b      	str	r3, [r7, #116]	; 0x74
 800791c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800791e:	2b2c      	cmp	r3, #44	; 0x2c
 8007920:	d9e6      	bls.n	80078f0 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007922:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007926:	4618      	mov	r0, r3
 8007928:	f7f8 fc7c 	bl	8000224 <strlen>
 800792c:	4603      	mov	r3, r0
 800792e:	3301      	adds	r3, #1
 8007930:	4618      	mov	r0, r3
 8007932:	f004 fd03 	bl	800c33c <malloc>
 8007936:	4603      	mov	r3, r0
 8007938:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 800793a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800793e:	4619      	mov	r1, r3
 8007940:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007942:	f004 fe65 	bl	800c610 <strcpy>
	return result;
 8007946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8007948:	4618      	mov	r0, r3
 800794a:	3778      	adds	r7, #120	; 0x78
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	200002f7 	.word	0x200002f7
 8007954:	200002e9 	.word	0x200002e9
 8007958:	200002ec 	.word	0x200002ec
 800795c:	200002ed 	.word	0x200002ed
 8007960:	200002ee 	.word	0x200002ee
 8007964:	200002f5 	.word	0x200002f5
 8007968:	200002ef 	.word	0x200002ef
 800796c:	200002f0 	.word	0x200002f0
 8007970:	200002f4 	.word	0x200002f4
 8007974:	200002f1 	.word	0x200002f1
 8007978:	20000301 	.word	0x20000301
 800797c:	200002f2 	.word	0x200002f2
 8007980:	20000302 	.word	0x20000302
 8007984:	200002f3 	.word	0x200002f3
 8007988:	20000303 	.word	0x20000303
 800798c:	200002f6 	.word	0x200002f6
 8007990:	200002f8 	.word	0x200002f8
 8007994:	200002f9 	.word	0x200002f9
 8007998:	200002fa 	.word	0x200002fa
 800799c:	200002fb 	.word	0x200002fb
 80079a0:	200002fc 	.word	0x200002fc
 80079a4:	200002fd 	.word	0x200002fd
 80079a8:	200002fe 	.word	0x200002fe
 80079ac:	200002ff 	.word	0x200002ff
 80079b0:	20000300 	.word	0x20000300
 80079b4:	20000304 	.word	0x20000304
 80079b8:	20000306 	.word	0x20000306
 80079bc:	200002e5 	.word	0x200002e5
 80079c0:	200002e6 	.word	0x200002e6
 80079c4:	200000a1 	.word	0x200000a1
 80079c8:	200000a2 	.word	0x200000a2
 80079cc:	200002e7 	.word	0x200002e7
 80079d0:	20000309 	.word	0x20000309
 80079d4:	20000218 	.word	0x20000218
 80079d8:	200000a0 	.word	0x200000a0
 80079dc:	0800db88 	.word	0x0800db88

080079e0 <mainLoop>:

void mainLoop() {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80079e6:	f7fd ffef 	bl	80059c8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80079ea:	2101      	movs	r1, #1
 80079ec:	48ad      	ldr	r0, [pc, #692]	; (8007ca4 <mainLoop+0x2c4>)
 80079ee:	f001 fc77 	bl	80092e0 <HAL_GPIO_ReadPin>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d136      	bne.n	8007a66 <mainLoop+0x86>
 80079f8:	2108      	movs	r1, #8
 80079fa:	48ab      	ldr	r0, [pc, #684]	; (8007ca8 <mainLoop+0x2c8>)
 80079fc:	f001 fc70 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d12f      	bne.n	8007a66 <mainLoop+0x86>
 8007a06:	2102      	movs	r1, #2
 8007a08:	48a6      	ldr	r0, [pc, #664]	; (8007ca4 <mainLoop+0x2c4>)
 8007a0a:	f001 fc69 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d128      	bne.n	8007a66 <mainLoop+0x86>
 8007a14:	2104      	movs	r1, #4
 8007a16:	48a3      	ldr	r0, [pc, #652]	; (8007ca4 <mainLoop+0x2c4>)
 8007a18:	f001 fc62 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d121      	bne.n	8007a66 <mainLoop+0x86>
 8007a22:	2108      	movs	r1, #8
 8007a24:	489f      	ldr	r0, [pc, #636]	; (8007ca4 <mainLoop+0x2c4>)
 8007a26:	f001 fc5b 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d11a      	bne.n	8007a66 <mainLoop+0x86>
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	489d      	ldr	r0, [pc, #628]	; (8007ca8 <mainLoop+0x2c8>)
 8007a34:	f001 fc54 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d113      	bne.n	8007a66 <mainLoop+0x86>
 8007a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a42:	4899      	ldr	r0, [pc, #612]	; (8007ca8 <mainLoop+0x2c8>)
 8007a44:	f001 fc4c 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d10b      	bne.n	8007a66 <mainLoop+0x86>
 8007a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a52:	4895      	ldr	r0, [pc, #596]	; (8007ca8 <mainLoop+0x2c8>)
 8007a54:	f001 fc44 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d103      	bne.n	8007a66 <mainLoop+0x86>
			butonKontrol=0;
 8007a5e:	4b93      	ldr	r3, [pc, #588]	; (8007cac <mainLoop+0x2cc>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e003      	b.n	8007a6e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007a66:	4b92      	ldr	r3, [pc, #584]	; (8007cb0 <mainLoop+0x2d0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a92      	ldr	r2, [pc, #584]	; (8007cb4 <mainLoop+0x2d4>)
 8007a6c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007a6e:	4b92      	ldr	r3, [pc, #584]	; (8007cb8 <mainLoop+0x2d8>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d03a      	beq.n	8007aec <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a76:	bf00      	nop
 8007a78:	4890      	ldr	r0, [pc, #576]	; (8007cbc <mainLoop+0x2dc>)
 8007a7a:	f002 fa5a 	bl	8009f32 <HAL_I2C_GetError>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d0f9      	beq.n	8007a78 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a84:	bf00      	nop
 8007a86:	488d      	ldr	r0, [pc, #564]	; (8007cbc <mainLoop+0x2dc>)
 8007a88:	f002 fa46 	bl	8009f18 <HAL_I2C_GetState>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d1f9      	bne.n	8007a86 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007a92:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a96:	9302      	str	r3, [sp, #8]
 8007a98:	236e      	movs	r3, #110	; 0x6e
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	4b88      	ldr	r3, [pc, #544]	; (8007cc0 <mainLoop+0x2e0>)
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	236e      	movs	r3, #110	; 0x6e
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	21a0      	movs	r1, #160	; 0xa0
 8007aa6:	4885      	ldr	r0, [pc, #532]	; (8007cbc <mainLoop+0x2dc>)
 8007aa8:	f001 fed4 	bl	8009854 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ab0:	f000 fe46 	bl	8008740 <HAL_Delay>

		  hafizaYaz=0;
 8007ab4:	4b80      	ldr	r3, [pc, #512]	; (8007cb8 <mainLoop+0x2d8>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8007aba:	4b82      	ldr	r3, [pc, #520]	; (8007cc4 <mainLoop+0x2e4>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d105      	bne.n	8007ace <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8007ac2:	4a81      	ldr	r2, [pc, #516]	; (8007cc8 <mainLoop+0x2e8>)
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	2002      	movs	r0, #2
 8007ac8:	f7f8 fe76 	bl	80007b8 <lcd_print>
 8007acc:	e008      	b.n	8007ae0 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8007ace:	4b7d      	ldr	r3, [pc, #500]	; (8007cc4 <mainLoop+0x2e4>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d104      	bne.n	8007ae0 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8007ad6:	4a7d      	ldr	r2, [pc, #500]	; (8007ccc <mainLoop+0x2ec>)
 8007ad8:	2101      	movs	r1, #1
 8007ada:	2002      	movs	r0, #2
 8007adc:	f7f8 fe6c 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 8007ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ae4:	f000 fe2c 	bl	8008740 <HAL_Delay>
		  lcd_clear();
 8007ae8:	f7f8 fe92 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007aec:	4b78      	ldr	r3, [pc, #480]	; (8007cd0 <mainLoop+0x2f0>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	f083 0301 	eor.w	r3, r3, #1
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d06e      	beq.n	8007bd8 <mainLoop+0x1f8>
 8007afa:	4870      	ldr	r0, [pc, #448]	; (8007cbc <mainLoop+0x2dc>)
 8007afc:	f002 fa0c 	bl	8009f18 <HAL_I2C_GetState>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d168      	bne.n	8007bd8 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8007b06:	4b73      	ldr	r3, [pc, #460]	; (8007cd4 <mainLoop+0x2f4>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	f083 0301 	eor.w	r3, r3, #1
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d044      	beq.n	8007b9e <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007b14:	4a70      	ldr	r2, [pc, #448]	; (8007cd8 <mainLoop+0x2f8>)
 8007b16:	2101      	movs	r1, #1
 8007b18:	2001      	movs	r0, #1
 8007b1a:	f7f8 fe4d 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 8007b1e:	4b69      	ldr	r3, [pc, #420]	; (8007cc4 <mainLoop+0x2e4>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8007b26:	4a6d      	ldr	r2, [pc, #436]	; (8007cdc <mainLoop+0x2fc>)
 8007b28:	2101      	movs	r1, #1
 8007b2a:	2002      	movs	r0, #2
 8007b2c:	f7f8 fe44 	bl	80007b8 <lcd_print>
 8007b30:	e008      	b.n	8007b44 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8007b32:	4b64      	ldr	r3, [pc, #400]	; (8007cc4 <mainLoop+0x2e4>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d104      	bne.n	8007b44 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8007b3a:	4a69      	ldr	r2, [pc, #420]	; (8007ce0 <mainLoop+0x300>)
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	2002      	movs	r0, #2
 8007b40:	f7f8 fe3a 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 8007b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b48:	f000 fdfa 	bl	8008740 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b4c:	bf00      	nop
 8007b4e:	485b      	ldr	r0, [pc, #364]	; (8007cbc <mainLoop+0x2dc>)
 8007b50:	f002 f9ef 	bl	8009f32 <HAL_I2C_GetError>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d0f9      	beq.n	8007b4e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007b5a:	e003      	b.n	8007b64 <mainLoop+0x184>
				  HAL_Delay(1000);
 8007b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b60:	f000 fdee 	bl	8008740 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007b64:	4855      	ldr	r0, [pc, #340]	; (8007cbc <mainLoop+0x2dc>)
 8007b66:	f002 f9d7 	bl	8009f18 <HAL_I2C_GetState>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d1f5      	bne.n	8007b5c <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8007b70:	4b54      	ldr	r3, [pc, #336]	; (8007cc4 <mainLoop+0x2e4>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d105      	bne.n	8007b84 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8007b78:	4a5a      	ldr	r2, [pc, #360]	; (8007ce4 <mainLoop+0x304>)
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	2002      	movs	r0, #2
 8007b7e:	f7f8 fe1b 	bl	80007b8 <lcd_print>
 8007b82:	e008      	b.n	8007b96 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8007b84:	4b4f      	ldr	r3, [pc, #316]	; (8007cc4 <mainLoop+0x2e4>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d104      	bne.n	8007b96 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8007b8c:	4a56      	ldr	r2, [pc, #344]	; (8007ce8 <mainLoop+0x308>)
 8007b8e:	2101      	movs	r1, #1
 8007b90:	2002      	movs	r0, #2
 8007b92:	f7f8 fe11 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 8007b96:	4b4f      	ldr	r3, [pc, #316]	; (8007cd4 <mainLoop+0x2f4>)
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e014      	b.n	8007bc8 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8007b9e:	4b49      	ldr	r3, [pc, #292]	; (8007cc4 <mainLoop+0x2e4>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8007ba6:	4a51      	ldr	r2, [pc, #324]	; (8007cec <mainLoop+0x30c>)
 8007ba8:	2101      	movs	r1, #1
 8007baa:	2002      	movs	r0, #2
 8007bac:	f7f8 fe04 	bl	80007b8 <lcd_print>
 8007bb0:	e008      	b.n	8007bc4 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8007bb2:	4b44      	ldr	r3, [pc, #272]	; (8007cc4 <mainLoop+0x2e4>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d104      	bne.n	8007bc4 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8007bba:	4a4d      	ldr	r2, [pc, #308]	; (8007cf0 <mainLoop+0x310>)
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	2002      	movs	r0, #2
 8007bc0:	f7f8 fdfa 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 8007bc4:	f7f8 fe24 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 8007bc8:	f7f8 fe22 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 8007bcc:	2001      	movs	r0, #1
 8007bce:	f7fd fab1 	bl	8005134 <eepromKontrol>
		  hafizaOku=1;
 8007bd2:	4b3f      	ldr	r3, [pc, #252]	; (8007cd0 <mainLoop+0x2f0>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007bd8:	4b46      	ldr	r3, [pc, #280]	; (8007cf4 <mainLoop+0x314>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d11c      	bne.n	8007c1a <mainLoop+0x23a>
 8007be0:	4b45      	ldr	r3, [pc, #276]	; (8007cf8 <mainLoop+0x318>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f083 0301 	eor.w	r3, r3, #1
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d015      	beq.n	8007c1a <mainLoop+0x23a>
 8007bee:	4b43      	ldr	r3, [pc, #268]	; (8007cfc <mainLoop+0x31c>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d111      	bne.n	8007c1a <mainLoop+0x23a>
			lcd_clear();
 8007bf6:	f7f8 fe0b 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 8007bfa:	200a      	movs	r0, #10
 8007bfc:	f000 fda0 	bl	8008740 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8007c00:	4a3f      	ldr	r2, [pc, #252]	; (8007d00 <mainLoop+0x320>)
 8007c02:	2101      	movs	r1, #1
 8007c04:	2001      	movs	r0, #1
 8007c06:	f7f8 fdd7 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8007c0a:	4a3e      	ldr	r2, [pc, #248]	; (8007d04 <mainLoop+0x324>)
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	2002      	movs	r0, #2
 8007c10:	f7f8 fdd2 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8007c14:	4b38      	ldr	r3, [pc, #224]	; (8007cf8 <mainLoop+0x318>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007c1a:	4b36      	ldr	r3, [pc, #216]	; (8007cf4 <mainLoop+0x314>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d112      	bne.n	8007c48 <mainLoop+0x268>
 8007c22:	2102      	movs	r1, #2
 8007c24:	481f      	ldr	r0, [pc, #124]	; (8007ca4 <mainLoop+0x2c4>)
 8007c26:	f001 fb5b 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d10b      	bne.n	8007c48 <mainLoop+0x268>
 8007c30:	2104      	movs	r1, #4
 8007c32:	481c      	ldr	r0, [pc, #112]	; (8007ca4 <mainLoop+0x2c4>)
 8007c34:	f001 fb54 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d104      	bne.n	8007c48 <mainLoop+0x268>
			menuGiris=1;
 8007c3e:	4b2d      	ldr	r3, [pc, #180]	; (8007cf4 <mainLoop+0x314>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007c44:	f7f8 fde4 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 8007c48:	4b2a      	ldr	r3, [pc, #168]	; (8007cf4 <mainLoop+0x314>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d102      	bne.n	8007c56 <mainLoop+0x276>
			menu(&hi2c1);
 8007c50:	481a      	ldr	r0, [pc, #104]	; (8007cbc <mainLoop+0x2dc>)
 8007c52:	f7f9 fb63 	bl	800131c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c5a:	4813      	ldr	r0, [pc, #76]	; (8007ca8 <mainLoop+0x2c8>)
 8007c5c:	f001 fb6f 	bl	800933e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c64:	4828      	ldr	r0, [pc, #160]	; (8007d08 <mainLoop+0x328>)
 8007c66:	f001 fb3b 	bl	80092e0 <HAL_GPIO_ReadPin>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <mainLoop+0x2a6>
 8007c70:	4b26      	ldr	r3, [pc, #152]	; (8007d0c <mainLoop+0x32c>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f083 0301 	eor.w	r3, r3, #1
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <mainLoop+0x2a6>
			stopVar=1;
 8007c7e:	4b24      	ldr	r3, [pc, #144]	; (8007d10 <mainLoop+0x330>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	e002      	b.n	8007c8c <mainLoop+0x2ac>
		} else {
			stopVar=0;
 8007c86:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <mainLoop+0x330>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007c8c:	f7fd febc 	bl	8005a08 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007c90:	f7fd feee 	bl	8005a70 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007c94:	f7fd ff32 	bl	8005afc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007c98:	f7fd ff82 	bl	8005ba0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007c9c:	f7ff fadc 	bl	8007258 <checkDemoModCalisma>
		checkLCDBacklight();
 8007ca0:	e6a1      	b.n	80079e6 <mainLoop+0x6>
 8007ca2:	bf00      	nop
 8007ca4:	40010800 	.word	0x40010800
 8007ca8:	40011000 	.word	0x40011000
 8007cac:	20000317 	.word	0x20000317
 8007cb0:	20000290 	.word	0x20000290
 8007cb4:	200002ac 	.word	0x200002ac
 8007cb8:	20000314 	.word	0x20000314
 8007cbc:	20000374 	.word	0x20000374
 8007cc0:	20000218 	.word	0x20000218
 8007cc4:	20000309 	.word	0x20000309
 8007cc8:	0800db8c 	.word	0x0800db8c
 8007ccc:	0800dba0 	.word	0x0800dba0
 8007cd0:	20000315 	.word	0x20000315
 8007cd4:	20000316 	.word	0x20000316
 8007cd8:	0800dbb4 	.word	0x0800dbb4
 8007cdc:	0800dbc8 	.word	0x0800dbc8
 8007ce0:	0800dbdc 	.word	0x0800dbdc
 8007ce4:	0800dbf0 	.word	0x0800dbf0
 8007ce8:	0800dc04 	.word	0x0800dc04
 8007cec:	0800dc18 	.word	0x0800dc18
 8007cf0:	0800dc2c 	.word	0x0800dc2c
 8007cf4:	20000305 	.word	0x20000305
 8007cf8:	2000031c 	.word	0x2000031c
 8007cfc:	20000306 	.word	0x20000306
 8007d00:	0800daf0 	.word	0x0800daf0
 8007d04:	0800db04 	.word	0x0800db04
 8007d08:	40010c00 	.word	0x40010c00
 8007d0c:	2000033d 	.word	0x2000033d
 8007d10:	2000033a 	.word	0x2000033a

08007d14 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007d1c:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	4a03      	ldr	r2, [pc, #12]	; (8007d30 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d24:	6013      	str	r3, [r2, #0]
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr
 8007d30:	20000290 	.word	0x20000290

08007d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d38:	f000 fca0 	bl	800867c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d40:	f000 fcfe 	bl	8008740 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d44:	f000 f8d0 	bl	8007ee8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d48:	f000 f9f2 	bl	8008130 <MX_GPIO_Init>
  MX_CAN_Init();
 8007d4c:	f000 f912 	bl	8007f74 <MX_CAN_Init>
  MX_I2C1_Init();
 8007d50:	f000 f944 	bl	8007fdc <MX_I2C1_Init>
  MX_TIM1_Init();
 8007d54:	f000 f970 	bl	8008038 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007d58:	f000 f9c0 	bl	80080dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	2140      	movs	r1, #64	; 0x40
 8007d60:	4853      	ldr	r0, [pc, #332]	; (8007eb0 <main+0x17c>)
 8007d62:	f001 fad4 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007d66:	2201      	movs	r2, #1
 8007d68:	2180      	movs	r1, #128	; 0x80
 8007d6a:	4851      	ldr	r0, [pc, #324]	; (8007eb0 <main+0x17c>)
 8007d6c:	f001 facf 	bl	800930e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007d70:	200a      	movs	r0, #10
 8007d72:	f000 fce5 	bl	8008740 <HAL_Delay>
  lcd_init();
 8007d76:	f7f8 fced 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 8007d7a:	200a      	movs	r0, #10
 8007d7c:	f000 fce0 	bl	8008740 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007d80:	484c      	ldr	r0, [pc, #304]	; (8007eb4 <main+0x180>)
 8007d82:	f003 f977 	bl	800b074 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007d86:	bf00      	nop
 8007d88:	484b      	ldr	r0, [pc, #300]	; (8007eb8 <main+0x184>)
 8007d8a:	f002 f8d2 	bl	8009f32 <HAL_I2C_GetError>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d0f9      	beq.n	8007d88 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007d94:	bf00      	nop
 8007d96:	4848      	ldr	r0, [pc, #288]	; (8007eb8 <main+0x184>)
 8007d98:	f002 f8be 	bl	8009f18 <HAL_I2C_GetState>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d1f9      	bne.n	8007d96 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007da2:	2200      	movs	r2, #0
 8007da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007da8:	4841      	ldr	r0, [pc, #260]	; (8007eb0 <main+0x17c>)
 8007daa:	f001 fab0 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007dae:	2200      	movs	r2, #0
 8007db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007db4:	483e      	ldr	r0, [pc, #248]	; (8007eb0 <main+0x17c>)
 8007db6:	f001 faaa 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2104      	movs	r1, #4
 8007dbe:	483c      	ldr	r0, [pc, #240]	; (8007eb0 <main+0x17c>)
 8007dc0:	f001 faa5 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2102      	movs	r1, #2
 8007dc8:	4839      	ldr	r0, [pc, #228]	; (8007eb0 <main+0x17c>)
 8007dca:	f001 faa0 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4837      	ldr	r0, [pc, #220]	; (8007eb0 <main+0x17c>)
 8007dd4:	f001 fa9b 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2120      	movs	r1, #32
 8007ddc:	4837      	ldr	r0, [pc, #220]	; (8007ebc <main+0x188>)
 8007dde:	f001 fa96 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007de2:	2200      	movs	r2, #0
 8007de4:	2110      	movs	r1, #16
 8007de6:	4835      	ldr	r0, [pc, #212]	; (8007ebc <main+0x188>)
 8007de8:	f001 fa91 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007dec:	2200      	movs	r2, #0
 8007dee:	2180      	movs	r1, #128	; 0x80
 8007df0:	4833      	ldr	r0, [pc, #204]	; (8007ec0 <main+0x18c>)
 8007df2:	f001 fa8c 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007df6:	2200      	movs	r2, #0
 8007df8:	2140      	movs	r1, #64	; 0x40
 8007dfa:	4831      	ldr	r0, [pc, #196]	; (8007ec0 <main+0x18c>)
 8007dfc:	f001 fa87 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e00:	2200      	movs	r2, #0
 8007e02:	2120      	movs	r1, #32
 8007e04:	482e      	ldr	r0, [pc, #184]	; (8007ec0 <main+0x18c>)
 8007e06:	f001 fa82 	bl	800930e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2110      	movs	r1, #16
 8007e0e:	482c      	ldr	r0, [pc, #176]	; (8007ec0 <main+0x18c>)
 8007e10:	f001 fa7d 	bl	800930e <HAL_GPIO_WritePin>

  i2cTest();
 8007e14:	f7fd fd2a 	bl	800586c <i2cTest>
  HAL_Delay(100);
 8007e18:	2064      	movs	r0, #100	; 0x64
 8007e1a:	f000 fc91 	bl	8008740 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007e1e:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <main+0x190>)
 8007e20:	2101      	movs	r1, #1
 8007e22:	2001      	movs	r0, #1
 8007e24:	f7f8 fcc8 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007e28:	4a27      	ldr	r2, [pc, #156]	; (8007ec8 <main+0x194>)
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	2002      	movs	r0, #2
 8007e2e:	f7f8 fcc3 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 8007e32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e36:	f000 fc83 	bl	8008740 <HAL_Delay>
  lcd_clear();
 8007e3a:	f7f8 fce9 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f7fd f978 	bl	8005134 <eepromKontrol>
  HAL_Delay(200);
 8007e44:	20c8      	movs	r0, #200	; 0xc8
 8007e46:	f000 fc7b 	bl	8008740 <HAL_Delay>

  lcd_clear();
 8007e4a:	f7f8 fce1 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 8007e4e:	20c8      	movs	r0, #200	; 0xc8
 8007e50:	f000 fc76 	bl	8008740 <HAL_Delay>

  backLightTimer = millis;
 8007e54:	4b1d      	ldr	r3, [pc, #116]	; (8007ecc <main+0x198>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a1d      	ldr	r2, [pc, #116]	; (8007ed0 <main+0x19c>)
 8007e5a:	6013      	str	r3, [r2, #0]

  if(iotMode != 0) {
 8007e5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <main+0x1a0>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01c      	beq.n	8007e9e <main+0x16a>
	  if(machineID[11] == '\0') {
 8007e64:	4b1c      	ldr	r3, [pc, #112]	; (8007ed8 <main+0x1a4>)
 8007e66:	7adb      	ldrb	r3, [r3, #11]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <main+0x13e>
	  	  takeMachineID(0);
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f7f8 fd8b 	bl	8000988 <takeMachineID>
	  }

	  if(wifiSSID[0] == '\0') {
 8007e72:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <main+0x1a8>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d106      	bne.n	8007e88 <main+0x154>
		  takeWifiSSID(0);
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f7f8 feda 	bl	8000c34 <takeWifiSSID>
		  HAL_Delay(500);
 8007e80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e84:	f000 fc5c 	bl	8008740 <HAL_Delay>
	  }

	  if(wifiPass[0] == '\0') {
 8007e88:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <main+0x1ac>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d106      	bne.n	8007e9e <main+0x16a>
		  takeWifiPass(0);
 8007e90:	2000      	movs	r0, #0
 8007e92:	f7f9 f889 	bl	8000fa8 <takeWifiPass>
		  HAL_Delay(500);
 8007e96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e9a:	f000 fc51 	bl	8008740 <HAL_Delay>
	  }
  }

  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007e9e:	4a10      	ldr	r2, [pc, #64]	; (8007ee0 <main+0x1ac>)
 8007ea0:	490e      	ldr	r1, [pc, #56]	; (8007edc <main+0x1a8>)
 8007ea2:	4810      	ldr	r0, [pc, #64]	; (8007ee4 <main+0x1b0>)
 8007ea4:	f7f8 f9c6 	bl	8000234 <ESP8266_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ea8:	f7ff fd9a 	bl	80079e0 <mainLoop>
 8007eac:	e7fc      	b.n	8007ea8 <main+0x174>
 8007eae:	bf00      	nop
 8007eb0:	40010c00 	.word	0x40010c00
 8007eb4:	200003c8 	.word	0x200003c8
 8007eb8:	20000374 	.word	0x20000374
 8007ebc:	40011000 	.word	0x40011000
 8007ec0:	40010800 	.word	0x40010800
 8007ec4:	0800dc40 	.word	0x0800dc40
 8007ec8:	0800dc54 	.word	0x0800dc54
 8007ecc:	20000290 	.word	0x20000290
 8007ed0:	200002ac 	.word	0x200002ac
 8007ed4:	20000307 	.word	0x20000307
 8007ed8:	200002b0 	.word	0x200002b0
 8007edc:	200002bc 	.word	0x200002bc
 8007ee0:	200002d0 	.word	0x200002d0
 8007ee4:	20000410 	.word	0x20000410

08007ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b090      	sub	sp, #64	; 0x40
 8007eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007eee:	f107 0318 	add.w	r3, r7, #24
 8007ef2:	2228      	movs	r2, #40	; 0x28
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f004 fb45 	bl	800c586 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007efc:	1d3b      	adds	r3, r7, #4
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	605a      	str	r2, [r3, #4]
 8007f04:	609a      	str	r2, [r3, #8]
 8007f06:	60da      	str	r2, [r3, #12]
 8007f08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f14:	2300      	movs	r3, #0
 8007f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f2c:	f107 0318 	add.w	r3, r7, #24
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 fc3f 	bl	800a7b4 <HAL_RCC_OscConfig>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f3c:	f000 f9a2 	bl	8008284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f40:	230f      	movs	r3, #15
 8007f42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f44:	2302      	movs	r3, #2
 8007f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f52:	2300      	movs	r3, #0
 8007f54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f56:	1d3b      	adds	r3, r7, #4
 8007f58:	2102      	movs	r1, #2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f002 feac 	bl	800acb8 <HAL_RCC_ClockConfig>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007f66:	f000 f98d 	bl	8008284 <Error_Handler>
  }
}
 8007f6a:	bf00      	nop
 8007f6c:	3740      	adds	r7, #64	; 0x40
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007f78:	4b16      	ldr	r3, [pc, #88]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <MX_CAN_Init+0x64>)
 8007f7c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007f7e:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007f80:	2210      	movs	r2, #16
 8007f82:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007f84:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007f90:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007f96:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007fc0:	4804      	ldr	r0, [pc, #16]	; (8007fd4 <MX_CAN_Init+0x60>)
 8007fc2:	f000 fbe1 	bl	8008788 <HAL_CAN_Init>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007fcc:	f000 f95a 	bl	8008284 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007fd0:	bf00      	nop
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	2000034c 	.word	0x2000034c
 8007fd8:	40006400 	.word	0x40006400

08007fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <MX_I2C1_Init+0x50>)
 8007fe2:	4a13      	ldr	r2, [pc, #76]	; (8008030 <MX_I2C1_Init+0x54>)
 8007fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007fe6:	4b11      	ldr	r3, [pc, #68]	; (800802c <MX_I2C1_Init+0x50>)
 8007fe8:	4a12      	ldr	r2, [pc, #72]	; (8008034 <MX_I2C1_Init+0x58>)
 8007fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007fec:	4b0f      	ldr	r3, [pc, #60]	; (800802c <MX_I2C1_Init+0x50>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007ff2:	4b0e      	ldr	r3, [pc, #56]	; (800802c <MX_I2C1_Init+0x50>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007ff8:	4b0c      	ldr	r3, [pc, #48]	; (800802c <MX_I2C1_Init+0x50>)
 8007ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <MX_I2C1_Init+0x50>)
 8008002:	2200      	movs	r2, #0
 8008004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <MX_I2C1_Init+0x50>)
 8008008:	2200      	movs	r2, #0
 800800a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800800c:	4b07      	ldr	r3, [pc, #28]	; (800802c <MX_I2C1_Init+0x50>)
 800800e:	2200      	movs	r2, #0
 8008010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <MX_I2C1_Init+0x50>)
 8008014:	2200      	movs	r2, #0
 8008016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008018:	4804      	ldr	r0, [pc, #16]	; (800802c <MX_I2C1_Init+0x50>)
 800801a:	f001 f9a9 	bl	8009370 <HAL_I2C_Init>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008024:	f000 f92e 	bl	8008284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000374 	.word	0x20000374
 8008030:	40005400 	.word	0x40005400
 8008034:	00061a80 	.word	0x00061a80

08008038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800803e:	f107 0308 	add.w	r3, r7, #8
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	605a      	str	r2, [r3, #4]
 8008048:	609a      	str	r2, [r3, #8]
 800804a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800804c:	463b      	mov	r3, r7
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008054:	4b1f      	ldr	r3, [pc, #124]	; (80080d4 <MX_TIM1_Init+0x9c>)
 8008056:	4a20      	ldr	r2, [pc, #128]	; (80080d8 <MX_TIM1_Init+0xa0>)
 8008058:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800805a:	4b1e      	ldr	r3, [pc, #120]	; (80080d4 <MX_TIM1_Init+0x9c>)
 800805c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008060:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <MX_TIM1_Init+0x9c>)
 8008064:	2200      	movs	r2, #0
 8008066:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <MX_TIM1_Init+0x9c>)
 800806a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800806e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008070:	4b18      	ldr	r3, [pc, #96]	; (80080d4 <MX_TIM1_Init+0x9c>)
 8008072:	2200      	movs	r2, #0
 8008074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008076:	4b17      	ldr	r3, [pc, #92]	; (80080d4 <MX_TIM1_Init+0x9c>)
 8008078:	2200      	movs	r2, #0
 800807a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800807c:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <MX_TIM1_Init+0x9c>)
 800807e:	2200      	movs	r2, #0
 8008080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008082:	4814      	ldr	r0, [pc, #80]	; (80080d4 <MX_TIM1_Init+0x9c>)
 8008084:	f002 ffa6 	bl	800afd4 <HAL_TIM_Base_Init>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800808e:	f000 f8f9 	bl	8008284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008096:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008098:	f107 0308 	add.w	r3, r7, #8
 800809c:	4619      	mov	r1, r3
 800809e:	480d      	ldr	r0, [pc, #52]	; (80080d4 <MX_TIM1_Init+0x9c>)
 80080a0:	f003 f950 	bl	800b344 <HAL_TIM_ConfigClockSource>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80080aa:	f000 f8eb 	bl	8008284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080ae:	2300      	movs	r3, #0
 80080b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80080b6:	463b      	mov	r3, r7
 80080b8:	4619      	mov	r1, r3
 80080ba:	4806      	ldr	r0, [pc, #24]	; (80080d4 <MX_TIM1_Init+0x9c>)
 80080bc:	f003 fb3e 	bl	800b73c <HAL_TIMEx_MasterConfigSynchronization>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80080c6:	f000 f8dd 	bl	8008284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80080ca:	bf00      	nop
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	200003c8 	.word	0x200003c8
 80080d8:	40012c00 	.word	0x40012c00

080080dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80080e0:	4b11      	ldr	r3, [pc, #68]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 80080e2:	4a12      	ldr	r2, [pc, #72]	; (800812c <MX_USART1_UART_Init+0x50>)
 80080e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80080e6:	4b10      	ldr	r3, [pc, #64]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 80080e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80080ee:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80080f4:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80080fa:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008100:	4b09      	ldr	r3, [pc, #36]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 8008102:	220c      	movs	r2, #12
 8008104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008106:	4b08      	ldr	r3, [pc, #32]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 8008108:	2200      	movs	r2, #0
 800810a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 800810e:	2200      	movs	r2, #0
 8008110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008112:	4805      	ldr	r0, [pc, #20]	; (8008128 <MX_USART1_UART_Init+0x4c>)
 8008114:	f003 fb90 	bl	800b838 <HAL_UART_Init>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800811e:	f000 f8b1 	bl	8008284 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008122:	bf00      	nop
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000410 	.word	0x20000410
 800812c:	40013800 	.word	0x40013800

08008130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008136:	f107 0310 	add.w	r3, r7, #16
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008144:	4b4b      	ldr	r3, [pc, #300]	; (8008274 <MX_GPIO_Init+0x144>)
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	4a4a      	ldr	r2, [pc, #296]	; (8008274 <MX_GPIO_Init+0x144>)
 800814a:	f043 0310 	orr.w	r3, r3, #16
 800814e:	6193      	str	r3, [r2, #24]
 8008150:	4b48      	ldr	r3, [pc, #288]	; (8008274 <MX_GPIO_Init+0x144>)
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	60fb      	str	r3, [r7, #12]
 800815a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800815c:	4b45      	ldr	r3, [pc, #276]	; (8008274 <MX_GPIO_Init+0x144>)
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	4a44      	ldr	r2, [pc, #272]	; (8008274 <MX_GPIO_Init+0x144>)
 8008162:	f043 0320 	orr.w	r3, r3, #32
 8008166:	6193      	str	r3, [r2, #24]
 8008168:	4b42      	ldr	r3, [pc, #264]	; (8008274 <MX_GPIO_Init+0x144>)
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	60bb      	str	r3, [r7, #8]
 8008172:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008174:	4b3f      	ldr	r3, [pc, #252]	; (8008274 <MX_GPIO_Init+0x144>)
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	4a3e      	ldr	r2, [pc, #248]	; (8008274 <MX_GPIO_Init+0x144>)
 800817a:	f043 0304 	orr.w	r3, r3, #4
 800817e:	6193      	str	r3, [r2, #24]
 8008180:	4b3c      	ldr	r3, [pc, #240]	; (8008274 <MX_GPIO_Init+0x144>)
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800818c:	4b39      	ldr	r3, [pc, #228]	; (8008274 <MX_GPIO_Init+0x144>)
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	4a38      	ldr	r2, [pc, #224]	; (8008274 <MX_GPIO_Init+0x144>)
 8008192:	f043 0308 	orr.w	r3, r3, #8
 8008196:	6193      	str	r3, [r2, #24]
 8008198:	4b36      	ldr	r3, [pc, #216]	; (8008274 <MX_GPIO_Init+0x144>)
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	603b      	str	r3, [r7, #0]
 80081a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80081a4:	2200      	movs	r2, #0
 80081a6:	21f0      	movs	r1, #240	; 0xf0
 80081a8:	4833      	ldr	r0, [pc, #204]	; (8008278 <MX_GPIO_Init+0x148>)
 80081aa:	f001 f8b0 	bl	800930e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80081ae:	2200      	movs	r2, #0
 80081b0:	f241 0130 	movw	r1, #4144	; 0x1030
 80081b4:	4831      	ldr	r0, [pc, #196]	; (800827c <MX_GPIO_Init+0x14c>)
 80081b6:	f001 f8aa 	bl	800930e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80081ba:	2200      	movs	r2, #0
 80081bc:	f640 4107 	movw	r1, #3079	; 0xc07
 80081c0:	482f      	ldr	r0, [pc, #188]	; (8008280 <MX_GPIO_Init+0x150>)
 80081c2:	f001 f8a4 	bl	800930e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80081c6:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80081ca:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081d4:	f107 0310 	add.w	r3, r7, #16
 80081d8:	4619      	mov	r1, r3
 80081da:	4828      	ldr	r0, [pc, #160]	; (800827c <MX_GPIO_Init+0x14c>)
 80081dc:	f000 fe20 	bl	8008e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80081e0:	f248 130f 	movw	r3, #33039	; 0x810f
 80081e4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081e6:	2300      	movs	r3, #0
 80081e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ee:	f107 0310 	add.w	r3, r7, #16
 80081f2:	4619      	mov	r1, r3
 80081f4:	4820      	ldr	r0, [pc, #128]	; (8008278 <MX_GPIO_Init+0x148>)
 80081f6:	f000 fe13 	bl	8008e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80081fa:	23f0      	movs	r3, #240	; 0xf0
 80081fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081fe:	2301      	movs	r3, #1
 8008200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008202:	2300      	movs	r3, #0
 8008204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008206:	2302      	movs	r3, #2
 8008208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800820a:	f107 0310 	add.w	r3, r7, #16
 800820e:	4619      	mov	r1, r3
 8008210:	4819      	ldr	r0, [pc, #100]	; (8008278 <MX_GPIO_Init+0x148>)
 8008212:	f000 fe05 	bl	8008e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008216:	f241 0330 	movw	r3, #4144	; 0x1030
 800821a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800821c:	2301      	movs	r3, #1
 800821e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008220:	2300      	movs	r3, #0
 8008222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008224:	2302      	movs	r3, #2
 8008226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008228:	f107 0310 	add.w	r3, r7, #16
 800822c:	4619      	mov	r1, r3
 800822e:	4813      	ldr	r0, [pc, #76]	; (800827c <MX_GPIO_Init+0x14c>)
 8008230:	f000 fdf6 	bl	8008e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008234:	f640 4307 	movw	r3, #3079	; 0xc07
 8008238:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800823a:	2301      	movs	r3, #1
 800823c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800823e:	2300      	movs	r3, #0
 8008240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008242:	2302      	movs	r3, #2
 8008244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008246:	f107 0310 	add.w	r3, r7, #16
 800824a:	4619      	mov	r1, r3
 800824c:	480c      	ldr	r0, [pc, #48]	; (8008280 <MX_GPIO_Init+0x150>)
 800824e:	f000 fde7 	bl	8008e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008252:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800825c:	2300      	movs	r3, #0
 800825e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008260:	f107 0310 	add.w	r3, r7, #16
 8008264:	4619      	mov	r1, r3
 8008266:	4806      	ldr	r0, [pc, #24]	; (8008280 <MX_GPIO_Init+0x150>)
 8008268:	f000 fdda 	bl	8008e20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800826c:	bf00      	nop
 800826e:	3720      	adds	r7, #32
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	40021000 	.word	0x40021000
 8008278:	40010800 	.word	0x40010800
 800827c:	40011000 	.word	0x40011000
 8008280:	40010c00 	.word	0x40010c00

08008284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008288:	bf00      	nop
 800828a:	46bd      	mov	sp, r7
 800828c:	bc80      	pop	{r7}
 800828e:	4770      	bx	lr

08008290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008296:	4b15      	ldr	r3, [pc, #84]	; (80082ec <HAL_MspInit+0x5c>)
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	4a14      	ldr	r2, [pc, #80]	; (80082ec <HAL_MspInit+0x5c>)
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	6193      	str	r3, [r2, #24]
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <HAL_MspInit+0x5c>)
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	60bb      	str	r3, [r7, #8]
 80082ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <HAL_MspInit+0x5c>)
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	4a0e      	ldr	r2, [pc, #56]	; (80082ec <HAL_MspInit+0x5c>)
 80082b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b8:	61d3      	str	r3, [r2, #28]
 80082ba:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <HAL_MspInit+0x5c>)
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c2:	607b      	str	r3, [r7, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80082c6:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <HAL_MspInit+0x60>)
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	4a04      	ldr	r2, [pc, #16]	; (80082f0 <HAL_MspInit+0x60>)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082e2:	bf00      	nop
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr
 80082ec:	40021000 	.word	0x40021000
 80082f0:	40010000 	.word	0x40010000

080082f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	605a      	str	r2, [r3, #4]
 8008306:	609a      	str	r2, [r3, #8]
 8008308:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1c      	ldr	r2, [pc, #112]	; (8008380 <HAL_CAN_MspInit+0x8c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d131      	bne.n	8008378 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008314:	4b1b      	ldr	r3, [pc, #108]	; (8008384 <HAL_CAN_MspInit+0x90>)
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <HAL_CAN_MspInit+0x90>)
 800831a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800831e:	61d3      	str	r3, [r2, #28]
 8008320:	4b18      	ldr	r3, [pc, #96]	; (8008384 <HAL_CAN_MspInit+0x90>)
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800832c:	4b15      	ldr	r3, [pc, #84]	; (8008384 <HAL_CAN_MspInit+0x90>)
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	4a14      	ldr	r2, [pc, #80]	; (8008384 <HAL_CAN_MspInit+0x90>)
 8008332:	f043 0304 	orr.w	r3, r3, #4
 8008336:	6193      	str	r3, [r2, #24]
 8008338:	4b12      	ldr	r3, [pc, #72]	; (8008384 <HAL_CAN_MspInit+0x90>)
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834e:	2300      	movs	r3, #0
 8008350:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008352:	f107 0310 	add.w	r3, r7, #16
 8008356:	4619      	mov	r1, r3
 8008358:	480b      	ldr	r0, [pc, #44]	; (8008388 <HAL_CAN_MspInit+0x94>)
 800835a:	f000 fd61 	bl	8008e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800835e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008364:	2302      	movs	r3, #2
 8008366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008368:	2303      	movs	r3, #3
 800836a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800836c:	f107 0310 	add.w	r3, r7, #16
 8008370:	4619      	mov	r1, r3
 8008372:	4805      	ldr	r0, [pc, #20]	; (8008388 <HAL_CAN_MspInit+0x94>)
 8008374:	f000 fd54 	bl	8008e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008378:	bf00      	nop
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	40006400 	.word	0x40006400
 8008384:	40021000 	.word	0x40021000
 8008388:	40010800 	.word	0x40010800

0800838c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008394:	f107 0310 	add.w	r3, r7, #16
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	609a      	str	r2, [r3, #8]
 80083a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a15      	ldr	r2, [pc, #84]	; (80083fc <HAL_I2C_MspInit+0x70>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d123      	bne.n	80083f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083ac:	4b14      	ldr	r3, [pc, #80]	; (8008400 <HAL_I2C_MspInit+0x74>)
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	4a13      	ldr	r2, [pc, #76]	; (8008400 <HAL_I2C_MspInit+0x74>)
 80083b2:	f043 0308 	orr.w	r3, r3, #8
 80083b6:	6193      	str	r3, [r2, #24]
 80083b8:	4b11      	ldr	r3, [pc, #68]	; (8008400 <HAL_I2C_MspInit+0x74>)
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083c4:	23c0      	movs	r3, #192	; 0xc0
 80083c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083c8:	2312      	movs	r3, #18
 80083ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083cc:	2303      	movs	r3, #3
 80083ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083d0:	f107 0310 	add.w	r3, r7, #16
 80083d4:	4619      	mov	r1, r3
 80083d6:	480b      	ldr	r0, [pc, #44]	; (8008404 <HAL_I2C_MspInit+0x78>)
 80083d8:	f000 fd22 	bl	8008e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80083dc:	4b08      	ldr	r3, [pc, #32]	; (8008400 <HAL_I2C_MspInit+0x74>)
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	4a07      	ldr	r2, [pc, #28]	; (8008400 <HAL_I2C_MspInit+0x74>)
 80083e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083e6:	61d3      	str	r3, [r2, #28]
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <HAL_I2C_MspInit+0x74>)
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f0:	60bb      	str	r3, [r7, #8]
 80083f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80083f4:	bf00      	nop
 80083f6:	3720      	adds	r7, #32
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	40005400 	.word	0x40005400
 8008400:	40021000 	.word	0x40021000
 8008404:	40010c00 	.word	0x40010c00

08008408 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a0a      	ldr	r2, [pc, #40]	; (8008440 <HAL_I2C_MspDeInit+0x38>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d10d      	bne.n	8008436 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800841a:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <HAL_I2C_MspDeInit+0x3c>)
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	4a09      	ldr	r2, [pc, #36]	; (8008444 <HAL_I2C_MspDeInit+0x3c>)
 8008420:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008424:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008426:	2140      	movs	r1, #64	; 0x40
 8008428:	4807      	ldr	r0, [pc, #28]	; (8008448 <HAL_I2C_MspDeInit+0x40>)
 800842a:	f000 fe8d 	bl	8009148 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800842e:	2180      	movs	r1, #128	; 0x80
 8008430:	4805      	ldr	r0, [pc, #20]	; (8008448 <HAL_I2C_MspDeInit+0x40>)
 8008432:	f000 fe89 	bl	8009148 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40005400 	.word	0x40005400
 8008444:	40021000 	.word	0x40021000
 8008448:	40010c00 	.word	0x40010c00

0800844c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a0d      	ldr	r2, [pc, #52]	; (8008490 <HAL_TIM_Base_MspInit+0x44>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d113      	bne.n	8008486 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800845e:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <HAL_TIM_Base_MspInit+0x48>)
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	4a0c      	ldr	r2, [pc, #48]	; (8008494 <HAL_TIM_Base_MspInit+0x48>)
 8008464:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008468:	6193      	str	r3, [r2, #24]
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <HAL_TIM_Base_MspInit+0x48>)
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008476:	2200      	movs	r2, #0
 8008478:	2100      	movs	r1, #0
 800847a:	2019      	movs	r0, #25
 800847c:	f000 fb57 	bl	8008b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008480:	2019      	movs	r0, #25
 8008482:	f000 fb70 	bl	8008b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40012c00 	.word	0x40012c00
 8008494:	40021000 	.word	0x40021000

08008498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084a0:	f107 0310 	add.w	r3, r7, #16
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	609a      	str	r2, [r3, #8]
 80084ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a20      	ldr	r2, [pc, #128]	; (8008534 <HAL_UART_MspInit+0x9c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d139      	bne.n	800852c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <HAL_UART_MspInit+0xa0>)
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <HAL_UART_MspInit+0xa0>)
 80084be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084c2:	6193      	str	r3, [r2, #24]
 80084c4:	4b1c      	ldr	r3, [pc, #112]	; (8008538 <HAL_UART_MspInit+0xa0>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084d0:	4b19      	ldr	r3, [pc, #100]	; (8008538 <HAL_UART_MspInit+0xa0>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	4a18      	ldr	r2, [pc, #96]	; (8008538 <HAL_UART_MspInit+0xa0>)
 80084d6:	f043 0304 	orr.w	r3, r3, #4
 80084da:	6193      	str	r3, [r2, #24]
 80084dc:	4b16      	ldr	r3, [pc, #88]	; (8008538 <HAL_UART_MspInit+0xa0>)
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80084e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ee:	2302      	movs	r3, #2
 80084f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084f2:	2303      	movs	r3, #3
 80084f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084f6:	f107 0310 	add.w	r3, r7, #16
 80084fa:	4619      	mov	r1, r3
 80084fc:	480f      	ldr	r0, [pc, #60]	; (800853c <HAL_UART_MspInit+0xa4>)
 80084fe:	f000 fc8f 	bl	8008e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008508:	2300      	movs	r3, #0
 800850a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800850c:	2300      	movs	r3, #0
 800850e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008510:	f107 0310 	add.w	r3, r7, #16
 8008514:	4619      	mov	r1, r3
 8008516:	4809      	ldr	r0, [pc, #36]	; (800853c <HAL_UART_MspInit+0xa4>)
 8008518:	f000 fc82 	bl	8008e20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800851c:	2200      	movs	r2, #0
 800851e:	2100      	movs	r1, #0
 8008520:	2025      	movs	r0, #37	; 0x25
 8008522:	f000 fb04 	bl	8008b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008526:	2025      	movs	r0, #37	; 0x25
 8008528:	f000 fb1d 	bl	8008b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800852c:	bf00      	nop
 800852e:	3720      	adds	r7, #32
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	40013800 	.word	0x40013800
 8008538:	40021000 	.word	0x40021000
 800853c:	40010800 	.word	0x40010800

08008540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008544:	e7fe      	b.n	8008544 <NMI_Handler+0x4>

08008546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008546:	b480      	push	{r7}
 8008548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800854a:	e7fe      	b.n	800854a <HardFault_Handler+0x4>

0800854c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008550:	e7fe      	b.n	8008550 <MemManage_Handler+0x4>

08008552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008552:	b480      	push	{r7}
 8008554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008556:	e7fe      	b.n	8008556 <BusFault_Handler+0x4>

08008558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008558:	b480      	push	{r7}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800855c:	e7fe      	b.n	800855c <UsageFault_Handler+0x4>

0800855e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800855e:	b480      	push	{r7}
 8008560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008562:	bf00      	nop
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr

0800856a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800856a:	b480      	push	{r7}
 800856c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800856e:	bf00      	nop
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr

08008576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008576:	b480      	push	{r7}
 8008578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800857a:	bf00      	nop
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr

08008582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008586:	f000 f8bf 	bl	8008708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008594:	4802      	ldr	r0, [pc, #8]	; (80085a0 <TIM1_UP_IRQHandler+0x10>)
 8008596:	f002 fdcd 	bl	800b134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800859a:	bf00      	nop
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	200003c8 	.word	0x200003c8

080085a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085a8:	4802      	ldr	r0, [pc, #8]	; (80085b4 <USART1_IRQHandler+0x10>)
 80085aa:	f003 f9cb 	bl	800b944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80085ae:	bf00      	nop
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000410 	.word	0x20000410

080085b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085c0:	4a14      	ldr	r2, [pc, #80]	; (8008614 <_sbrk+0x5c>)
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <_sbrk+0x60>)
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085cc:	4b13      	ldr	r3, [pc, #76]	; (800861c <_sbrk+0x64>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085d4:	4b11      	ldr	r3, [pc, #68]	; (800861c <_sbrk+0x64>)
 80085d6:	4a12      	ldr	r2, [pc, #72]	; (8008620 <_sbrk+0x68>)
 80085d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085da:	4b10      	ldr	r3, [pc, #64]	; (800861c <_sbrk+0x64>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d207      	bcs.n	80085f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085e8:	f003 ffe6 	bl	800c5b8 <__errno>
 80085ec:	4603      	mov	r3, r0
 80085ee:	220c      	movs	r2, #12
 80085f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085f6:	e009      	b.n	800860c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <_sbrk+0x64>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085fe:	4b07      	ldr	r3, [pc, #28]	; (800861c <_sbrk+0x64>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	4a05      	ldr	r2, [pc, #20]	; (800861c <_sbrk+0x64>)
 8008608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800860a:	68fb      	ldr	r3, [r7, #12]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	2000c000 	.word	0x2000c000
 8008618:	00000400 	.word	0x00000400
 800861c:	20000458 	.word	0x20000458
 8008620:	200005a8 	.word	0x200005a8

08008624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008628:	bf00      	nop
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008630:	480c      	ldr	r0, [pc, #48]	; (8008664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008632:	490d      	ldr	r1, [pc, #52]	; (8008668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008634:	4a0d      	ldr	r2, [pc, #52]	; (800866c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008638:	e002      	b.n	8008640 <LoopCopyDataInit>

0800863a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800863a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800863c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800863e:	3304      	adds	r3, #4

08008640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008644:	d3f9      	bcc.n	800863a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008646:	4a0a      	ldr	r2, [pc, #40]	; (8008670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008648:	4c0a      	ldr	r4, [pc, #40]	; (8008674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800864a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800864c:	e001      	b.n	8008652 <LoopFillZerobss>

0800864e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800864e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008650:	3204      	adds	r2, #4

08008652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008654:	d3fb      	bcc.n	800864e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008656:	f7ff ffe5 	bl	8008624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800865a:	f003 ffb3 	bl	800c5c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800865e:	f7ff fb69 	bl	8007d34 <main>
  bx lr
 8008662:	4770      	bx	lr
  ldr r0, =_sdata
 8008664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008668:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800866c:	0800dcf4 	.word	0x0800dcf4
  ldr r2, =_sbss
 8008670:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8008674:	200005a8 	.word	0x200005a8

08008678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008678:	e7fe      	b.n	8008678 <ADC1_2_IRQHandler>
	...

0800867c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008680:	4b08      	ldr	r3, [pc, #32]	; (80086a4 <HAL_Init+0x28>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a07      	ldr	r2, [pc, #28]	; (80086a4 <HAL_Init+0x28>)
 8008686:	f043 0310 	orr.w	r3, r3, #16
 800868a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800868c:	2003      	movs	r0, #3
 800868e:	f000 fa43 	bl	8008b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008692:	200f      	movs	r0, #15
 8008694:	f000 f808 	bl	80086a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008698:	f7ff fdfa 	bl	8008290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40022000 	.word	0x40022000

080086a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086b0:	4b12      	ldr	r3, [pc, #72]	; (80086fc <HAL_InitTick+0x54>)
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	4b12      	ldr	r3, [pc, #72]	; (8008700 <HAL_InitTick+0x58>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	4619      	mov	r1, r3
 80086ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086be:	fbb3 f3f1 	udiv	r3, r3, r1
 80086c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fa5b 	bl	8008b82 <HAL_SYSTICK_Config>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e00e      	b.n	80086f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b0f      	cmp	r3, #15
 80086da:	d80a      	bhi.n	80086f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086dc:	2200      	movs	r2, #0
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e4:	f000 fa23 	bl	8008b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086e8:	4a06      	ldr	r2, [pc, #24]	; (8008704 <HAL_InitTick+0x5c>)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	e000      	b.n	80086f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	200000a4 	.word	0x200000a4
 8008700:	200000ac 	.word	0x200000ac
 8008704:	200000a8 	.word	0x200000a8

08008708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <HAL_IncTick+0x1c>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	461a      	mov	r2, r3
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <HAL_IncTick+0x20>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4413      	add	r3, r2
 8008718:	4a03      	ldr	r2, [pc, #12]	; (8008728 <HAL_IncTick+0x20>)
 800871a:	6013      	str	r3, [r2, #0]
}
 800871c:	bf00      	nop
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr
 8008724:	200000ac 	.word	0x200000ac
 8008728:	2000045c 	.word	0x2000045c

0800872c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
  return uwTick;
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <HAL_GetTick+0x10>)
 8008732:	681b      	ldr	r3, [r3, #0]
}
 8008734:	4618      	mov	r0, r3
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr
 800873c:	2000045c 	.word	0x2000045c

08008740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008748:	f7ff fff0 	bl	800872c <HAL_GetTick>
 800874c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008758:	d005      	beq.n	8008766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800875a:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <HAL_Delay+0x44>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4413      	add	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008766:	bf00      	nop
 8008768:	f7ff ffe0 	bl	800872c <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	429a      	cmp	r2, r3
 8008776:	d8f7      	bhi.n	8008768 <HAL_Delay+0x28>
  {
  }
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	200000ac 	.word	0x200000ac

08008788 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e0ed      	b.n	8008976 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fda4 	bl	80082f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087bc:	f7ff ffb6 	bl	800872c <HAL_GetTick>
 80087c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087c2:	e012      	b.n	80087ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80087c4:	f7ff ffb2 	bl	800872c <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b0a      	cmp	r3, #10
 80087d0:	d90b      	bls.n	80087ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2205      	movs	r2, #5
 80087e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e0c5      	b.n	8008976 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0e5      	beq.n	80087c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0202 	bic.w	r2, r2, #2
 8008806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008808:	f7ff ff90 	bl	800872c <HAL_GetTick>
 800880c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800880e:	e012      	b.n	8008836 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008810:	f7ff ff8c 	bl	800872c <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b0a      	cmp	r3, #10
 800881c:	d90b      	bls.n	8008836 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2205      	movs	r2, #5
 800882e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e09f      	b.n	8008976 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e5      	bne.n	8008810 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7e1b      	ldrb	r3, [r3, #24]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d108      	bne.n	800885e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	e007      	b.n	800886e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800886c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7e5b      	ldrb	r3, [r3, #25]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d108      	bne.n	8008888 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	e007      	b.n	8008898 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008896:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7e9b      	ldrb	r3, [r3, #26]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d108      	bne.n	80088b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0220 	orr.w	r2, r2, #32
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	e007      	b.n	80088c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 0220 	bic.w	r2, r2, #32
 80088c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7edb      	ldrb	r3, [r3, #27]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d108      	bne.n	80088dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0210 	bic.w	r2, r2, #16
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e007      	b.n	80088ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0210 	orr.w	r2, r2, #16
 80088ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7f1b      	ldrb	r3, [r3, #28]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d108      	bne.n	8008906 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f042 0208 	orr.w	r2, r2, #8
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e007      	b.n	8008916 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0208 	bic.w	r2, r2, #8
 8008914:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	7f5b      	ldrb	r3, [r3, #29]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d108      	bne.n	8008930 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0204 	orr.w	r2, r2, #4
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e007      	b.n	8008940 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0204 	bic.w	r2, r2, #4
 800893e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	431a      	orrs	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	431a      	orrs	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	ea42 0103 	orr.w	r1, r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	1e5a      	subs	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <__NVIC_SetPriorityGrouping>:
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008990:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <__NVIC_SetPriorityGrouping+0x44>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800899c:	4013      	ands	r3, r2
 800899e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089b2:	4a04      	ldr	r2, [pc, #16]	; (80089c4 <__NVIC_SetPriorityGrouping+0x44>)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	60d3      	str	r3, [r2, #12]
}
 80089b8:	bf00      	nop
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	e000ed00 	.word	0xe000ed00

080089c8 <__NVIC_GetPriorityGrouping>:
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <__NVIC_GetPriorityGrouping+0x18>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	0a1b      	lsrs	r3, r3, #8
 80089d2:	f003 0307 	and.w	r3, r3, #7
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	e000ed00 	.word	0xe000ed00

080089e4 <__NVIC_EnableIRQ>:
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	db0b      	blt.n	8008a0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	f003 021f 	and.w	r2, r3, #31
 80089fc:	4906      	ldr	r1, [pc, #24]	; (8008a18 <__NVIC_EnableIRQ+0x34>)
 80089fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	2001      	movs	r0, #1
 8008a06:	fa00 f202 	lsl.w	r2, r0, r2
 8008a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr
 8008a18:	e000e100 	.word	0xe000e100

08008a1c <__NVIC_SetPriority>:
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	db0a      	blt.n	8008a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	490c      	ldr	r1, [pc, #48]	; (8008a68 <__NVIC_SetPriority+0x4c>)
 8008a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a3a:	0112      	lsls	r2, r2, #4
 8008a3c:	b2d2      	uxtb	r2, r2
 8008a3e:	440b      	add	r3, r1
 8008a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a44:	e00a      	b.n	8008a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	4908      	ldr	r1, [pc, #32]	; (8008a6c <__NVIC_SetPriority+0x50>)
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	3b04      	subs	r3, #4
 8008a54:	0112      	lsls	r2, r2, #4
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	440b      	add	r3, r1
 8008a5a:	761a      	strb	r2, [r3, #24]
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	e000e100 	.word	0xe000e100
 8008a6c:	e000ed00 	.word	0xe000ed00

08008a70 <NVIC_EncodePriority>:
{
 8008a70:	b480      	push	{r7}
 8008a72:	b089      	sub	sp, #36	; 0x24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f1c3 0307 	rsb	r3, r3, #7
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	bf28      	it	cs
 8008a8e:	2304      	movcs	r3, #4
 8008a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	3304      	adds	r3, #4
 8008a96:	2b06      	cmp	r3, #6
 8008a98:	d902      	bls.n	8008aa0 <NVIC_EncodePriority+0x30>
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	3b03      	subs	r3, #3
 8008a9e:	e000      	b.n	8008aa2 <NVIC_EncodePriority+0x32>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	43da      	mvns	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	401a      	ands	r2, r3
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac2:	43d9      	mvns	r1, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ac8:	4313      	orrs	r3, r2
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3724      	adds	r7, #36	; 0x24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bc80      	pop	{r7}
 8008ad2:	4770      	bx	lr

08008ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ae4:	d301      	bcc.n	8008aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e00f      	b.n	8008b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008aea:	4a0a      	ldr	r2, [pc, #40]	; (8008b14 <SysTick_Config+0x40>)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008af2:	210f      	movs	r1, #15
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008af8:	f7ff ff90 	bl	8008a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <SysTick_Config+0x40>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b02:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <SysTick_Config+0x40>)
 8008b04:	2207      	movs	r2, #7
 8008b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	e000e010 	.word	0xe000e010

08008b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff ff2d 	bl	8008980 <__NVIC_SetPriorityGrouping>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b086      	sub	sp, #24
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	4603      	mov	r3, r0
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	607a      	str	r2, [r7, #4]
 8008b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b40:	f7ff ff42 	bl	80089c8 <__NVIC_GetPriorityGrouping>
 8008b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	68b9      	ldr	r1, [r7, #8]
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f7ff ff90 	bl	8008a70 <NVIC_EncodePriority>
 8008b50:	4602      	mov	r2, r0
 8008b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff ff5f 	bl	8008a1c <__NVIC_SetPriority>
}
 8008b5e:	bf00      	nop
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff ff35 	bl	80089e4 <__NVIC_EnableIRQ>
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff ffa2 	bl	8008ad4 <SysTick_Config>
 8008b90:	4603      	mov	r3, r0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d008      	beq.n	8008bc4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e020      	b.n	8008c06 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f022 020e 	bic.w	r2, r2, #14
 8008bd2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0201 	bic.w	r2, r2, #1
 8008be2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bec:	2101      	movs	r1, #1
 8008bee:	fa01 f202 	lsl.w	r2, r1, r2
 8008bf2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bc80      	pop	{r7}
 8008c0e:	4770      	bx	lr

08008c10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d005      	beq.n	8008c34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	73fb      	strb	r3, [r7, #15]
 8008c32:	e0d6      	b.n	8008de2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 020e 	bic.w	r2, r2, #14
 8008c42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0201 	bic.w	r2, r2, #1
 8008c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4b64      	ldr	r3, [pc, #400]	; (8008dec <HAL_DMA_Abort_IT+0x1dc>)
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d958      	bls.n	8008d12 <HAL_DMA_Abort_IT+0x102>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a62      	ldr	r2, [pc, #392]	; (8008df0 <HAL_DMA_Abort_IT+0x1e0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d04f      	beq.n	8008d0a <HAL_DMA_Abort_IT+0xfa>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a61      	ldr	r2, [pc, #388]	; (8008df4 <HAL_DMA_Abort_IT+0x1e4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d048      	beq.n	8008d06 <HAL_DMA_Abort_IT+0xf6>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a5f      	ldr	r2, [pc, #380]	; (8008df8 <HAL_DMA_Abort_IT+0x1e8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d040      	beq.n	8008d00 <HAL_DMA_Abort_IT+0xf0>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a5e      	ldr	r2, [pc, #376]	; (8008dfc <HAL_DMA_Abort_IT+0x1ec>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d038      	beq.n	8008cfa <HAL_DMA_Abort_IT+0xea>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a5c      	ldr	r2, [pc, #368]	; (8008e00 <HAL_DMA_Abort_IT+0x1f0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d030      	beq.n	8008cf4 <HAL_DMA_Abort_IT+0xe4>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a5b      	ldr	r2, [pc, #364]	; (8008e04 <HAL_DMA_Abort_IT+0x1f4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d028      	beq.n	8008cee <HAL_DMA_Abort_IT+0xde>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a52      	ldr	r2, [pc, #328]	; (8008dec <HAL_DMA_Abort_IT+0x1dc>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d020      	beq.n	8008ce8 <HAL_DMA_Abort_IT+0xd8>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a57      	ldr	r2, [pc, #348]	; (8008e08 <HAL_DMA_Abort_IT+0x1f8>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d019      	beq.n	8008ce4 <HAL_DMA_Abort_IT+0xd4>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a55      	ldr	r2, [pc, #340]	; (8008e0c <HAL_DMA_Abort_IT+0x1fc>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d012      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0xd0>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a54      	ldr	r2, [pc, #336]	; (8008e10 <HAL_DMA_Abort_IT+0x200>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00a      	beq.n	8008cda <HAL_DMA_Abort_IT+0xca>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a52      	ldr	r2, [pc, #328]	; (8008e14 <HAL_DMA_Abort_IT+0x204>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d102      	bne.n	8008cd4 <HAL_DMA_Abort_IT+0xc4>
 8008cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd2:	e01b      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cd8:	e018      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cde:	e015      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008ce0:	2310      	movs	r3, #16
 8008ce2:	e013      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e011      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cec:	e00e      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008cee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cf2:	e00b      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cf8:	e008      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cfe:	e005      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d04:	e002      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008d06:	2310      	movs	r3, #16
 8008d08:	e000      	b.n	8008d0c <HAL_DMA_Abort_IT+0xfc>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4a42      	ldr	r2, [pc, #264]	; (8008e18 <HAL_DMA_Abort_IT+0x208>)
 8008d0e:	6053      	str	r3, [r2, #4]
 8008d10:	e057      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1b2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a36      	ldr	r2, [pc, #216]	; (8008df0 <HAL_DMA_Abort_IT+0x1e0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d04f      	beq.n	8008dbc <HAL_DMA_Abort_IT+0x1ac>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a34      	ldr	r2, [pc, #208]	; (8008df4 <HAL_DMA_Abort_IT+0x1e4>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d048      	beq.n	8008db8 <HAL_DMA_Abort_IT+0x1a8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a33      	ldr	r2, [pc, #204]	; (8008df8 <HAL_DMA_Abort_IT+0x1e8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d040      	beq.n	8008db2 <HAL_DMA_Abort_IT+0x1a2>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a31      	ldr	r2, [pc, #196]	; (8008dfc <HAL_DMA_Abort_IT+0x1ec>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d038      	beq.n	8008dac <HAL_DMA_Abort_IT+0x19c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a30      	ldr	r2, [pc, #192]	; (8008e00 <HAL_DMA_Abort_IT+0x1f0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d030      	beq.n	8008da6 <HAL_DMA_Abort_IT+0x196>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a2e      	ldr	r2, [pc, #184]	; (8008e04 <HAL_DMA_Abort_IT+0x1f4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d028      	beq.n	8008da0 <HAL_DMA_Abort_IT+0x190>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a26      	ldr	r2, [pc, #152]	; (8008dec <HAL_DMA_Abort_IT+0x1dc>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d020      	beq.n	8008d9a <HAL_DMA_Abort_IT+0x18a>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a2a      	ldr	r2, [pc, #168]	; (8008e08 <HAL_DMA_Abort_IT+0x1f8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d019      	beq.n	8008d96 <HAL_DMA_Abort_IT+0x186>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a29      	ldr	r2, [pc, #164]	; (8008e0c <HAL_DMA_Abort_IT+0x1fc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d012      	beq.n	8008d92 <HAL_DMA_Abort_IT+0x182>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a27      	ldr	r2, [pc, #156]	; (8008e10 <HAL_DMA_Abort_IT+0x200>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00a      	beq.n	8008d8c <HAL_DMA_Abort_IT+0x17c>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a26      	ldr	r2, [pc, #152]	; (8008e14 <HAL_DMA_Abort_IT+0x204>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d102      	bne.n	8008d86 <HAL_DMA_Abort_IT+0x176>
 8008d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d84:	e01b      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d8a:	e018      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d90:	e015      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008d92:	2310      	movs	r3, #16
 8008d94:	e013      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e011      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d9e:	e00e      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008da0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008da4:	e00b      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008daa:	e008      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db0:	e005      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db6:	e002      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008db8:	2310      	movs	r3, #16
 8008dba:	e000      	b.n	8008dbe <HAL_DMA_Abort_IT+0x1ae>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4a17      	ldr	r2, [pc, #92]	; (8008e1c <HAL_DMA_Abort_IT+0x20c>)
 8008dc0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
    } 
  }
  return status;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40020080 	.word	0x40020080
 8008df0:	40020008 	.word	0x40020008
 8008df4:	4002001c 	.word	0x4002001c
 8008df8:	40020030 	.word	0x40020030
 8008dfc:	40020044 	.word	0x40020044
 8008e00:	40020058 	.word	0x40020058
 8008e04:	4002006c 	.word	0x4002006c
 8008e08:	40020408 	.word	0x40020408
 8008e0c:	4002041c 	.word	0x4002041c
 8008e10:	40020430 	.word	0x40020430
 8008e14:	40020444 	.word	0x40020444
 8008e18:	40020400 	.word	0x40020400
 8008e1c:	40020000 	.word	0x40020000

08008e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b08b      	sub	sp, #44	; 0x2c
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e32:	e179      	b.n	8009128 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e34:	2201      	movs	r2, #1
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69fa      	ldr	r2, [r7, #28]
 8008e44:	4013      	ands	r3, r2
 8008e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	f040 8168 	bne.w	8009122 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	4a96      	ldr	r2, [pc, #600]	; (80090b0 <HAL_GPIO_Init+0x290>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d05e      	beq.n	8008f1a <HAL_GPIO_Init+0xfa>
 8008e5c:	4a94      	ldr	r2, [pc, #592]	; (80090b0 <HAL_GPIO_Init+0x290>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d875      	bhi.n	8008f4e <HAL_GPIO_Init+0x12e>
 8008e62:	4a94      	ldr	r2, [pc, #592]	; (80090b4 <HAL_GPIO_Init+0x294>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d058      	beq.n	8008f1a <HAL_GPIO_Init+0xfa>
 8008e68:	4a92      	ldr	r2, [pc, #584]	; (80090b4 <HAL_GPIO_Init+0x294>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d86f      	bhi.n	8008f4e <HAL_GPIO_Init+0x12e>
 8008e6e:	4a92      	ldr	r2, [pc, #584]	; (80090b8 <HAL_GPIO_Init+0x298>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d052      	beq.n	8008f1a <HAL_GPIO_Init+0xfa>
 8008e74:	4a90      	ldr	r2, [pc, #576]	; (80090b8 <HAL_GPIO_Init+0x298>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d869      	bhi.n	8008f4e <HAL_GPIO_Init+0x12e>
 8008e7a:	4a90      	ldr	r2, [pc, #576]	; (80090bc <HAL_GPIO_Init+0x29c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d04c      	beq.n	8008f1a <HAL_GPIO_Init+0xfa>
 8008e80:	4a8e      	ldr	r2, [pc, #568]	; (80090bc <HAL_GPIO_Init+0x29c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d863      	bhi.n	8008f4e <HAL_GPIO_Init+0x12e>
 8008e86:	4a8e      	ldr	r2, [pc, #568]	; (80090c0 <HAL_GPIO_Init+0x2a0>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d046      	beq.n	8008f1a <HAL_GPIO_Init+0xfa>
 8008e8c:	4a8c      	ldr	r2, [pc, #560]	; (80090c0 <HAL_GPIO_Init+0x2a0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d85d      	bhi.n	8008f4e <HAL_GPIO_Init+0x12e>
 8008e92:	2b12      	cmp	r3, #18
 8008e94:	d82a      	bhi.n	8008eec <HAL_GPIO_Init+0xcc>
 8008e96:	2b12      	cmp	r3, #18
 8008e98:	d859      	bhi.n	8008f4e <HAL_GPIO_Init+0x12e>
 8008e9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <HAL_GPIO_Init+0x80>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008f1b 	.word	0x08008f1b
 8008ea4:	08008ef5 	.word	0x08008ef5
 8008ea8:	08008f07 	.word	0x08008f07
 8008eac:	08008f49 	.word	0x08008f49
 8008eb0:	08008f4f 	.word	0x08008f4f
 8008eb4:	08008f4f 	.word	0x08008f4f
 8008eb8:	08008f4f 	.word	0x08008f4f
 8008ebc:	08008f4f 	.word	0x08008f4f
 8008ec0:	08008f4f 	.word	0x08008f4f
 8008ec4:	08008f4f 	.word	0x08008f4f
 8008ec8:	08008f4f 	.word	0x08008f4f
 8008ecc:	08008f4f 	.word	0x08008f4f
 8008ed0:	08008f4f 	.word	0x08008f4f
 8008ed4:	08008f4f 	.word	0x08008f4f
 8008ed8:	08008f4f 	.word	0x08008f4f
 8008edc:	08008f4f 	.word	0x08008f4f
 8008ee0:	08008f4f 	.word	0x08008f4f
 8008ee4:	08008efd 	.word	0x08008efd
 8008ee8:	08008f11 	.word	0x08008f11
 8008eec:	4a75      	ldr	r2, [pc, #468]	; (80090c4 <HAL_GPIO_Init+0x2a4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008ef2:	e02c      	b.n	8008f4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	623b      	str	r3, [r7, #32]
          break;
 8008efa:	e029      	b.n	8008f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	3304      	adds	r3, #4
 8008f02:	623b      	str	r3, [r7, #32]
          break;
 8008f04:	e024      	b.n	8008f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	623b      	str	r3, [r7, #32]
          break;
 8008f0e:	e01f      	b.n	8008f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	330c      	adds	r3, #12
 8008f16:	623b      	str	r3, [r7, #32]
          break;
 8008f18:	e01a      	b.n	8008f50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f22:	2304      	movs	r3, #4
 8008f24:	623b      	str	r3, [r7, #32]
          break;
 8008f26:	e013      	b.n	8008f50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d105      	bne.n	8008f3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f30:	2308      	movs	r3, #8
 8008f32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	611a      	str	r2, [r3, #16]
          break;
 8008f3a:	e009      	b.n	8008f50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	615a      	str	r2, [r3, #20]
          break;
 8008f46:	e003      	b.n	8008f50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	623b      	str	r3, [r7, #32]
          break;
 8008f4c:	e000      	b.n	8008f50 <HAL_GPIO_Init+0x130>
          break;
 8008f4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2bff      	cmp	r3, #255	; 0xff
 8008f54:	d801      	bhi.n	8008f5a <HAL_GPIO_Init+0x13a>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	e001      	b.n	8008f5e <HAL_GPIO_Init+0x13e>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2bff      	cmp	r3, #255	; 0xff
 8008f64:	d802      	bhi.n	8008f6c <HAL_GPIO_Init+0x14c>
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	e002      	b.n	8008f72 <HAL_GPIO_Init+0x152>
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	3b08      	subs	r3, #8
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	210f      	movs	r1, #15
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f80:	43db      	mvns	r3, r3
 8008f82:	401a      	ands	r2, r3
 8008f84:	6a39      	ldr	r1, [r7, #32]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	fa01 f303 	lsl.w	r3, r1, r3
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80c1 	beq.w	8009122 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008fa0:	4b49      	ldr	r3, [pc, #292]	; (80090c8 <HAL_GPIO_Init+0x2a8>)
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	4a48      	ldr	r2, [pc, #288]	; (80090c8 <HAL_GPIO_Init+0x2a8>)
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	6193      	str	r3, [r2, #24]
 8008fac:	4b46      	ldr	r3, [pc, #280]	; (80090c8 <HAL_GPIO_Init+0x2a8>)
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008fb8:	4a44      	ldr	r2, [pc, #272]	; (80090cc <HAL_GPIO_Init+0x2ac>)
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	089b      	lsrs	r3, r3, #2
 8008fbe:	3302      	adds	r3, #2
 8008fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	220f      	movs	r2, #15
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	43db      	mvns	r3, r3
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a3c      	ldr	r2, [pc, #240]	; (80090d0 <HAL_GPIO_Init+0x2b0>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d01f      	beq.n	8009024 <HAL_GPIO_Init+0x204>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a3b      	ldr	r2, [pc, #236]	; (80090d4 <HAL_GPIO_Init+0x2b4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d019      	beq.n	8009020 <HAL_GPIO_Init+0x200>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a3a      	ldr	r2, [pc, #232]	; (80090d8 <HAL_GPIO_Init+0x2b8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d013      	beq.n	800901c <HAL_GPIO_Init+0x1fc>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a39      	ldr	r2, [pc, #228]	; (80090dc <HAL_GPIO_Init+0x2bc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d00d      	beq.n	8009018 <HAL_GPIO_Init+0x1f8>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a38      	ldr	r2, [pc, #224]	; (80090e0 <HAL_GPIO_Init+0x2c0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d007      	beq.n	8009014 <HAL_GPIO_Init+0x1f4>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a37      	ldr	r2, [pc, #220]	; (80090e4 <HAL_GPIO_Init+0x2c4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d101      	bne.n	8009010 <HAL_GPIO_Init+0x1f0>
 800900c:	2305      	movs	r3, #5
 800900e:	e00a      	b.n	8009026 <HAL_GPIO_Init+0x206>
 8009010:	2306      	movs	r3, #6
 8009012:	e008      	b.n	8009026 <HAL_GPIO_Init+0x206>
 8009014:	2304      	movs	r3, #4
 8009016:	e006      	b.n	8009026 <HAL_GPIO_Init+0x206>
 8009018:	2303      	movs	r3, #3
 800901a:	e004      	b.n	8009026 <HAL_GPIO_Init+0x206>
 800901c:	2302      	movs	r3, #2
 800901e:	e002      	b.n	8009026 <HAL_GPIO_Init+0x206>
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <HAL_GPIO_Init+0x206>
 8009024:	2300      	movs	r3, #0
 8009026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009028:	f002 0203 	and.w	r2, r2, #3
 800902c:	0092      	lsls	r2, r2, #2
 800902e:	4093      	lsls	r3, r2
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009036:	4925      	ldr	r1, [pc, #148]	; (80090cc <HAL_GPIO_Init+0x2ac>)
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	089b      	lsrs	r3, r3, #2
 800903c:	3302      	adds	r3, #2
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009050:	4b25      	ldr	r3, [pc, #148]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	4924      	ldr	r1, [pc, #144]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	4313      	orrs	r3, r2
 800905a:	608b      	str	r3, [r1, #8]
 800905c:	e006      	b.n	800906c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800905e:	4b22      	ldr	r3, [pc, #136]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	43db      	mvns	r3, r3
 8009066:	4920      	ldr	r1, [pc, #128]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 8009068:	4013      	ands	r3, r2
 800906a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d006      	beq.n	8009086 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009078:	4b1b      	ldr	r3, [pc, #108]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	491a      	ldr	r1, [pc, #104]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	4313      	orrs	r3, r2
 8009082:	60cb      	str	r3, [r1, #12]
 8009084:	e006      	b.n	8009094 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009086:	4b18      	ldr	r3, [pc, #96]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	43db      	mvns	r3, r3
 800908e:	4916      	ldr	r1, [pc, #88]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 8009090:	4013      	ands	r3, r2
 8009092:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d025      	beq.n	80090ec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	4910      	ldr	r1, [pc, #64]	; (80090e8 <HAL_GPIO_Init+0x2c8>)
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	604b      	str	r3, [r1, #4]
 80090ac:	e025      	b.n	80090fa <HAL_GPIO_Init+0x2da>
 80090ae:	bf00      	nop
 80090b0:	10320000 	.word	0x10320000
 80090b4:	10310000 	.word	0x10310000
 80090b8:	10220000 	.word	0x10220000
 80090bc:	10210000 	.word	0x10210000
 80090c0:	10120000 	.word	0x10120000
 80090c4:	10110000 	.word	0x10110000
 80090c8:	40021000 	.word	0x40021000
 80090cc:	40010000 	.word	0x40010000
 80090d0:	40010800 	.word	0x40010800
 80090d4:	40010c00 	.word	0x40010c00
 80090d8:	40011000 	.word	0x40011000
 80090dc:	40011400 	.word	0x40011400
 80090e0:	40011800 	.word	0x40011800
 80090e4:	40011c00 	.word	0x40011c00
 80090e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80090ec:	4b15      	ldr	r3, [pc, #84]	; (8009144 <HAL_GPIO_Init+0x324>)
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	43db      	mvns	r3, r3
 80090f4:	4913      	ldr	r1, [pc, #76]	; (8009144 <HAL_GPIO_Init+0x324>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d006      	beq.n	8009114 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009106:	4b0f      	ldr	r3, [pc, #60]	; (8009144 <HAL_GPIO_Init+0x324>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	490e      	ldr	r1, [pc, #56]	; (8009144 <HAL_GPIO_Init+0x324>)
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	4313      	orrs	r3, r2
 8009110:	600b      	str	r3, [r1, #0]
 8009112:	e006      	b.n	8009122 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009114:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <HAL_GPIO_Init+0x324>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	43db      	mvns	r3, r3
 800911c:	4909      	ldr	r1, [pc, #36]	; (8009144 <HAL_GPIO_Init+0x324>)
 800911e:	4013      	ands	r3, r2
 8009120:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	3301      	adds	r3, #1
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	fa22 f303 	lsr.w	r3, r2, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	f47f ae7e 	bne.w	8008e34 <HAL_GPIO_Init+0x14>
  }
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	372c      	adds	r7, #44	; 0x2c
 800913e:	46bd      	mov	sp, r7
 8009140:	bc80      	pop	{r7}
 8009142:	4770      	bx	lr
 8009144:	40010400 	.word	0x40010400

08009148 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009148:	b480      	push	{r7}
 800914a:	b089      	sub	sp, #36	; 0x24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009152:	2300      	movs	r3, #0
 8009154:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009156:	e0a6      	b.n	80092a6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009158:	2201      	movs	r2, #1
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	fa02 f303 	lsl.w	r3, r2, r3
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	4013      	ands	r3, r2
 8009164:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 8099 	beq.w	80092a0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800916e:	4a54      	ldr	r2, [pc, #336]	; (80092c0 <HAL_GPIO_DeInit+0x178>)
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	089b      	lsrs	r3, r3, #2
 8009174:	3302      	adds	r3, #2
 8009176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800917a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	220f      	movs	r2, #15
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4013      	ands	r3, r2
 800918e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a4c      	ldr	r2, [pc, #304]	; (80092c4 <HAL_GPIO_DeInit+0x17c>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d01f      	beq.n	80091d8 <HAL_GPIO_DeInit+0x90>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a4b      	ldr	r2, [pc, #300]	; (80092c8 <HAL_GPIO_DeInit+0x180>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d019      	beq.n	80091d4 <HAL_GPIO_DeInit+0x8c>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a4a      	ldr	r2, [pc, #296]	; (80092cc <HAL_GPIO_DeInit+0x184>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d013      	beq.n	80091d0 <HAL_GPIO_DeInit+0x88>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a49      	ldr	r2, [pc, #292]	; (80092d0 <HAL_GPIO_DeInit+0x188>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00d      	beq.n	80091cc <HAL_GPIO_DeInit+0x84>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a48      	ldr	r2, [pc, #288]	; (80092d4 <HAL_GPIO_DeInit+0x18c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d007      	beq.n	80091c8 <HAL_GPIO_DeInit+0x80>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a47      	ldr	r2, [pc, #284]	; (80092d8 <HAL_GPIO_DeInit+0x190>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d101      	bne.n	80091c4 <HAL_GPIO_DeInit+0x7c>
 80091c0:	2305      	movs	r3, #5
 80091c2:	e00a      	b.n	80091da <HAL_GPIO_DeInit+0x92>
 80091c4:	2306      	movs	r3, #6
 80091c6:	e008      	b.n	80091da <HAL_GPIO_DeInit+0x92>
 80091c8:	2304      	movs	r3, #4
 80091ca:	e006      	b.n	80091da <HAL_GPIO_DeInit+0x92>
 80091cc:	2303      	movs	r3, #3
 80091ce:	e004      	b.n	80091da <HAL_GPIO_DeInit+0x92>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e002      	b.n	80091da <HAL_GPIO_DeInit+0x92>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <HAL_GPIO_DeInit+0x92>
 80091d8:	2300      	movs	r3, #0
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	f002 0203 	and.w	r2, r2, #3
 80091e0:	0092      	lsls	r2, r2, #2
 80091e2:	4093      	lsls	r3, r2
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d132      	bne.n	8009250 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80091ea:	4b3c      	ldr	r3, [pc, #240]	; (80092dc <HAL_GPIO_DeInit+0x194>)
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	43db      	mvns	r3, r3
 80091f2:	493a      	ldr	r1, [pc, #232]	; (80092dc <HAL_GPIO_DeInit+0x194>)
 80091f4:	4013      	ands	r3, r2
 80091f6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80091f8:	4b38      	ldr	r3, [pc, #224]	; (80092dc <HAL_GPIO_DeInit+0x194>)
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	43db      	mvns	r3, r3
 8009200:	4936      	ldr	r1, [pc, #216]	; (80092dc <HAL_GPIO_DeInit+0x194>)
 8009202:	4013      	ands	r3, r2
 8009204:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009206:	4b35      	ldr	r3, [pc, #212]	; (80092dc <HAL_GPIO_DeInit+0x194>)
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	43db      	mvns	r3, r3
 800920e:	4933      	ldr	r1, [pc, #204]	; (80092dc <HAL_GPIO_DeInit+0x194>)
 8009210:	4013      	ands	r3, r2
 8009212:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009214:	4b31      	ldr	r3, [pc, #196]	; (80092dc <HAL_GPIO_DeInit+0x194>)
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	43db      	mvns	r3, r3
 800921c:	492f      	ldr	r1, [pc, #188]	; (80092dc <HAL_GPIO_DeInit+0x194>)
 800921e:	4013      	ands	r3, r2
 8009220:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	f003 0303 	and.w	r3, r3, #3
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	220f      	movs	r2, #15
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009232:	4a23      	ldr	r2, [pc, #140]	; (80092c0 <HAL_GPIO_DeInit+0x178>)
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	089b      	lsrs	r3, r3, #2
 8009238:	3302      	adds	r3, #2
 800923a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	43da      	mvns	r2, r3
 8009242:	481f      	ldr	r0, [pc, #124]	; (80092c0 <HAL_GPIO_DeInit+0x178>)
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	400a      	ands	r2, r1
 800924a:	3302      	adds	r3, #2
 800924c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	2bff      	cmp	r3, #255	; 0xff
 8009254:	d801      	bhi.n	800925a <HAL_GPIO_DeInit+0x112>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	e001      	b.n	800925e <HAL_GPIO_DeInit+0x116>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3304      	adds	r3, #4
 800925e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	2bff      	cmp	r3, #255	; 0xff
 8009264:	d802      	bhi.n	800926c <HAL_GPIO_DeInit+0x124>
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	e002      	b.n	8009272 <HAL_GPIO_DeInit+0x12a>
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	3b08      	subs	r3, #8
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	210f      	movs	r1, #15
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	fa01 f303 	lsl.w	r3, r1, r3
 8009280:	43db      	mvns	r3, r3
 8009282:	401a      	ands	r2, r3
 8009284:	2104      	movs	r1, #4
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	fa01 f303 	lsl.w	r3, r1, r3
 800928c:	431a      	orrs	r2, r3
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	43db      	mvns	r3, r3
 800929a:	401a      	ands	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	60da      	str	r2, [r3, #12]
    }

    position++;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	3301      	adds	r3, #1
 80092a4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	fa22 f303 	lsr.w	r3, r2, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f47f af52 	bne.w	8009158 <HAL_GPIO_DeInit+0x10>
  }
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop
 80092b8:	3724      	adds	r7, #36	; 0x24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr
 80092c0:	40010000 	.word	0x40010000
 80092c4:	40010800 	.word	0x40010800
 80092c8:	40010c00 	.word	0x40010c00
 80092cc:	40011000 	.word	0x40011000
 80092d0:	40011400 	.word	0x40011400
 80092d4:	40011800 	.word	0x40011800
 80092d8:	40011c00 	.word	0x40011c00
 80092dc:	40010400 	.word	0x40010400

080092e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	887b      	ldrh	r3, [r7, #2]
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092f8:	2301      	movs	r3, #1
 80092fa:	73fb      	strb	r3, [r7, #15]
 80092fc:	e001      	b.n	8009302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr

0800930e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	807b      	strh	r3, [r7, #2]
 800931a:	4613      	mov	r3, r2
 800931c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800931e:	787b      	ldrb	r3, [r7, #1]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009324:	887a      	ldrh	r2, [r7, #2]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800932a:	e003      	b.n	8009334 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800932c:	887b      	ldrh	r3, [r7, #2]
 800932e:	041a      	lsls	r2, r3, #16
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	611a      	str	r2, [r3, #16]
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr

0800933e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800933e:	b480      	push	{r7}
 8009340:	b085      	sub	sp, #20
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009350:	887a      	ldrh	r2, [r7, #2]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4013      	ands	r3, r2
 8009356:	041a      	lsls	r2, r3, #16
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	43d9      	mvns	r1, r3
 800935c:	887b      	ldrh	r3, [r7, #2]
 800935e:	400b      	ands	r3, r1
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	611a      	str	r2, [r3, #16]
}
 8009366:	bf00      	nop
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	bc80      	pop	{r7}
 800936e:	4770      	bx	lr

08009370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e12b      	b.n	80095da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d106      	bne.n	800939c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7fe fff8 	bl	800838c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2224      	movs	r2, #36	; 0x24
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0201 	bic.w	r2, r2, #1
 80093b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093d4:	f001 fdb8 	bl	800af48 <HAL_RCC_GetPCLK1Freq>
 80093d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	4a81      	ldr	r2, [pc, #516]	; (80095e4 <HAL_I2C_Init+0x274>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d807      	bhi.n	80093f4 <HAL_I2C_Init+0x84>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4a80      	ldr	r2, [pc, #512]	; (80095e8 <HAL_I2C_Init+0x278>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	bf94      	ite	ls
 80093ec:	2301      	movls	r3, #1
 80093ee:	2300      	movhi	r3, #0
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	e006      	b.n	8009402 <HAL_I2C_Init+0x92>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4a7d      	ldr	r2, [pc, #500]	; (80095ec <HAL_I2C_Init+0x27c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	bf94      	ite	ls
 80093fc:	2301      	movls	r3, #1
 80093fe:	2300      	movhi	r3, #0
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e0e7      	b.n	80095da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4a78      	ldr	r2, [pc, #480]	; (80095f0 <HAL_I2C_Init+0x280>)
 800940e:	fba2 2303 	umull	r2, r3, r2, r3
 8009412:	0c9b      	lsrs	r3, r3, #18
 8009414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4a6a      	ldr	r2, [pc, #424]	; (80095e4 <HAL_I2C_Init+0x274>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d802      	bhi.n	8009444 <HAL_I2C_Init+0xd4>
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	3301      	adds	r3, #1
 8009442:	e009      	b.n	8009458 <HAL_I2C_Init+0xe8>
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800944a:	fb02 f303 	mul.w	r3, r2, r3
 800944e:	4a69      	ldr	r2, [pc, #420]	; (80095f4 <HAL_I2C_Init+0x284>)
 8009450:	fba2 2303 	umull	r2, r3, r2, r3
 8009454:	099b      	lsrs	r3, r3, #6
 8009456:	3301      	adds	r3, #1
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6812      	ldr	r2, [r2, #0]
 800945c:	430b      	orrs	r3, r1
 800945e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800946a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	495c      	ldr	r1, [pc, #368]	; (80095e4 <HAL_I2C_Init+0x274>)
 8009474:	428b      	cmp	r3, r1
 8009476:	d819      	bhi.n	80094ac <HAL_I2C_Init+0x13c>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	1e59      	subs	r1, r3, #1
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	fbb1 f3f3 	udiv	r3, r1, r3
 8009486:	1c59      	adds	r1, r3, #1
 8009488:	f640 73fc 	movw	r3, #4092	; 0xffc
 800948c:	400b      	ands	r3, r1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <HAL_I2C_Init+0x138>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	1e59      	subs	r1, r3, #1
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	fbb1 f3f3 	udiv	r3, r1, r3
 80094a0:	3301      	adds	r3, #1
 80094a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094a6:	e051      	b.n	800954c <HAL_I2C_Init+0x1dc>
 80094a8:	2304      	movs	r3, #4
 80094aa:	e04f      	b.n	800954c <HAL_I2C_Init+0x1dc>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d111      	bne.n	80094d8 <HAL_I2C_Init+0x168>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	1e58      	subs	r0, r3, #1
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6859      	ldr	r1, [r3, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	440b      	add	r3, r1
 80094c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80094c6:	3301      	adds	r3, #1
 80094c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	bf0c      	ite	eq
 80094d0:	2301      	moveq	r3, #1
 80094d2:	2300      	movne	r3, #0
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	e012      	b.n	80094fe <HAL_I2C_Init+0x18e>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	1e58      	subs	r0, r3, #1
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6859      	ldr	r1, [r3, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	440b      	add	r3, r1
 80094e6:	0099      	lsls	r1, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80094ee:	3301      	adds	r3, #1
 80094f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bf0c      	ite	eq
 80094f8:	2301      	moveq	r3, #1
 80094fa:	2300      	movne	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <HAL_I2C_Init+0x196>
 8009502:	2301      	movs	r3, #1
 8009504:	e022      	b.n	800954c <HAL_I2C_Init+0x1dc>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10e      	bne.n	800952c <HAL_I2C_Init+0x1bc>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1e58      	subs	r0, r3, #1
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6859      	ldr	r1, [r3, #4]
 8009516:	460b      	mov	r3, r1
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	440b      	add	r3, r1
 800951c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009520:	3301      	adds	r3, #1
 8009522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800952a:	e00f      	b.n	800954c <HAL_I2C_Init+0x1dc>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	1e58      	subs	r0, r3, #1
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6859      	ldr	r1, [r3, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	440b      	add	r3, r1
 800953a:	0099      	lsls	r1, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009542:	3301      	adds	r3, #1
 8009544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	6809      	ldr	r1, [r1, #0]
 8009550:	4313      	orrs	r3, r2
 8009552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	69da      	ldr	r2, [r3, #28]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800957a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6911      	ldr	r1, [r2, #16]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	68d2      	ldr	r2, [r2, #12]
 8009586:	4311      	orrs	r1, r2
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	6812      	ldr	r2, [r2, #0]
 800958c:	430b      	orrs	r3, r1
 800958e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	695a      	ldr	r2, [r3, #20]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0201 	orr.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	000186a0 	.word	0x000186a0
 80095e8:	001e847f 	.word	0x001e847f
 80095ec:	003d08ff 	.word	0x003d08ff
 80095f0:	431bde83 	.word	0x431bde83
 80095f4:	10624dd3 	.word	0x10624dd3

080095f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e021      	b.n	800964e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2224      	movs	r2, #36	; 0x24
 800960e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 0201 	bic.w	r2, r2, #1
 8009620:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7fe fef0 	bl	8008408 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af02      	add	r7, sp, #8
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	607a      	str	r2, [r7, #4]
 8009662:	461a      	mov	r2, r3
 8009664:	460b      	mov	r3, r1
 8009666:	817b      	strh	r3, [r7, #10]
 8009668:	4613      	mov	r3, r2
 800966a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800966c:	f7ff f85e 	bl	800872c <HAL_GetTick>
 8009670:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b20      	cmp	r3, #32
 800967c:	f040 80e0 	bne.w	8009840 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2319      	movs	r3, #25
 8009686:	2201      	movs	r2, #1
 8009688:	4970      	ldr	r1, [pc, #448]	; (800984c <HAL_I2C_Master_Transmit+0x1f4>)
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 fe5c 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009696:	2302      	movs	r3, #2
 8009698:	e0d3      	b.n	8009842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_I2C_Master_Transmit+0x50>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e0cc      	b.n	8009842 <HAL_I2C_Master_Transmit+0x1ea>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d007      	beq.n	80096ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f042 0201 	orr.w	r2, r2, #1
 80096cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2221      	movs	r2, #33	; 0x21
 80096e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2210      	movs	r2, #16
 80096ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	893a      	ldrh	r2, [r7, #8]
 80096fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009704:	b29a      	uxth	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4a50      	ldr	r2, [pc, #320]	; (8009850 <HAL_I2C_Master_Transmit+0x1f8>)
 800970e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009710:	8979      	ldrh	r1, [r7, #10]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	6a3a      	ldr	r2, [r7, #32]
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 fc16 	bl	8009f48 <I2C_MasterRequestWrite>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e08d      	b.n	8009842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009726:	2300      	movs	r3, #0
 8009728:	613b      	str	r3, [r7, #16]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	613b      	str	r3, [r7, #16]
 800973a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800973c:	e066      	b.n	800980c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	6a39      	ldr	r1, [r7, #32]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 ff1a 	bl	800a57c <I2C_WaitOnTXEFlagUntilTimeout>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00d      	beq.n	800976a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	2b04      	cmp	r3, #4
 8009754:	d107      	bne.n	8009766 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009764:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e06b      	b.n	8009842 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	781a      	ldrb	r2, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009792:	3b01      	subs	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d11b      	bne.n	80097e0 <HAL_I2C_Master_Transmit+0x188>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d017      	beq.n	80097e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	781a      	ldrb	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	3b01      	subs	r3, #1
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d8:	3b01      	subs	r3, #1
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	6a39      	ldr	r1, [r7, #32]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 ff11 	bl	800a60c <I2C_WaitOnBTFFlagUntilTimeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00d      	beq.n	800980c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	2b04      	cmp	r3, #4
 80097f6:	d107      	bne.n	8009808 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009806:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e01a      	b.n	8009842 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	d194      	bne.n	800973e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2220      	movs	r2, #32
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	00100002 	.word	0x00100002
 8009850:	ffff0000 	.word	0xffff0000

08009854 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af02      	add	r7, sp, #8
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	4608      	mov	r0, r1
 800985e:	4611      	mov	r1, r2
 8009860:	461a      	mov	r2, r3
 8009862:	4603      	mov	r3, r0
 8009864:	817b      	strh	r3, [r7, #10]
 8009866:	460b      	mov	r3, r1
 8009868:	813b      	strh	r3, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800986e:	f7fe ff5d 	bl	800872c <HAL_GetTick>
 8009872:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b20      	cmp	r3, #32
 800987e:	f040 80d9 	bne.w	8009a34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	2319      	movs	r3, #25
 8009888:	2201      	movs	r2, #1
 800988a:	496d      	ldr	r1, [pc, #436]	; (8009a40 <HAL_I2C_Mem_Write+0x1ec>)
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 fd5b 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009898:	2302      	movs	r3, #2
 800989a:	e0cc      	b.n	8009a36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_I2C_Mem_Write+0x56>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e0c5      	b.n	8009a36 <HAL_I2C_Mem_Write+0x1e2>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 0301 	and.w	r3, r3, #1
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d007      	beq.n	80098d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2221      	movs	r2, #33	; 0x21
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2240      	movs	r2, #64	; 0x40
 80098ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009906:	b29a      	uxth	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4a4d      	ldr	r2, [pc, #308]	; (8009a44 <HAL_I2C_Mem_Write+0x1f0>)
 8009910:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009912:	88f8      	ldrh	r0, [r7, #6]
 8009914:	893a      	ldrh	r2, [r7, #8]
 8009916:	8979      	ldrh	r1, [r7, #10]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	4603      	mov	r3, r0
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fb92 	bl	800a04c <I2C_RequestMemoryWrite>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d052      	beq.n	80099d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e081      	b.n	8009a36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fe20 	bl	800a57c <I2C_WaitOnTXEFlagUntilTimeout>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00d      	beq.n	800995e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	2b04      	cmp	r3, #4
 8009948:	d107      	bne.n	800995a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009958:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e06b      	b.n	8009a36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	781a      	ldrb	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009978:	3b01      	subs	r3, #1
 800997a:	b29a      	uxth	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009984:	b29b      	uxth	r3, r3
 8009986:	3b01      	subs	r3, #1
 8009988:	b29a      	uxth	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b04      	cmp	r3, #4
 800999a:	d11b      	bne.n	80099d4 <HAL_I2C_Mem_Write+0x180>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d017      	beq.n	80099d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	781a      	ldrb	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1aa      	bne.n	8009932 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 fe13 	bl	800a60c <I2C_WaitOnBTFFlagUntilTimeout>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00d      	beq.n	8009a08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f0:	2b04      	cmp	r3, #4
 80099f2:	d107      	bne.n	8009a04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e016      	b.n	8009a36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e000      	b.n	8009a36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a34:	2302      	movs	r3, #2
  }
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	00100002 	.word	0x00100002
 8009a44:	ffff0000 	.word	0xffff0000

08009a48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08c      	sub	sp, #48	; 0x30
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	4608      	mov	r0, r1
 8009a52:	4611      	mov	r1, r2
 8009a54:	461a      	mov	r2, r3
 8009a56:	4603      	mov	r3, r0
 8009a58:	817b      	strh	r3, [r7, #10]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	813b      	strh	r3, [r7, #8]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a66:	f7fe fe61 	bl	800872c <HAL_GetTick>
 8009a6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	f040 8244 	bne.w	8009f02 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	2319      	movs	r3, #25
 8009a80:	2201      	movs	r2, #1
 8009a82:	4982      	ldr	r1, [pc, #520]	; (8009c8c <HAL_I2C_Mem_Read+0x244>)
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 fc5f 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009a90:	2302      	movs	r3, #2
 8009a92:	e237      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d101      	bne.n	8009aa2 <HAL_I2C_Mem_Read+0x5a>
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	e230      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d007      	beq.n	8009ac8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2222      	movs	r2, #34	; 0x22
 8009adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2240      	movs	r2, #64	; 0x40
 8009ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4a62      	ldr	r2, [pc, #392]	; (8009c90 <HAL_I2C_Mem_Read+0x248>)
 8009b08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b0a:	88f8      	ldrh	r0, [r7, #6]
 8009b0c:	893a      	ldrh	r2, [r7, #8]
 8009b0e:	8979      	ldrh	r1, [r7, #10]
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	4603      	mov	r3, r0
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 fb2c 	bl	800a178 <I2C_RequestMemoryRead>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e1ec      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d113      	bne.n	8009b5a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b32:	2300      	movs	r3, #0
 8009b34:	61fb      	str	r3, [r7, #28]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	61fb      	str	r3, [r7, #28]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	e1c0      	b.n	8009edc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d11e      	bne.n	8009ba0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b72:	b672      	cpsid	i
}
 8009b74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b76:	2300      	movs	r3, #0
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	61bb      	str	r3, [r7, #24]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	61bb      	str	r3, [r7, #24]
 8009b8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b9c:	b662      	cpsie	i
}
 8009b9e:	e035      	b.n	8009c0c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d11e      	bne.n	8009be6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bb8:	b672      	cpsid	i
}
 8009bba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009be0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009be2:	b662      	cpsie	i
}
 8009be4:	e012      	b.n	8009c0c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bf4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	613b      	str	r3, [r7, #16]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	613b      	str	r3, [r7, #16]
 8009c0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c0c:	e166      	b.n	8009edc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	f200 811f 	bhi.w	8009e56 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d123      	bne.n	8009c68 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 fd39 	bl	800a69c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e167      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	691a      	ldr	r2, [r3, #16]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	b2d2      	uxtb	r2, r2
 8009c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c50:	3b01      	subs	r3, #1
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c66:	e139      	b.n	8009edc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d152      	bne.n	8009d16 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	2200      	movs	r2, #0
 8009c78:	4906      	ldr	r1, [pc, #24]	; (8009c94 <HAL_I2C_Mem_Read+0x24c>)
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 fb64 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d008      	beq.n	8009c98 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e13c      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
 8009c8a:	bf00      	nop
 8009c8c:	00100002 	.word	0x00100002
 8009c90:	ffff0000 	.word	0xffff0000
 8009c94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009c98:	b672      	cpsid	i
}
 8009c9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	691a      	ldr	r2, [r3, #16]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009cde:	b662      	cpsie	i
}
 8009ce0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d14:	e0e2      	b.n	8009edc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	497b      	ldr	r1, [pc, #492]	; (8009f0c <HAL_I2C_Mem_Read+0x4c4>)
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fb11 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e0e9      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d40:	b672      	cpsid	i
}
 8009d42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691a      	ldr	r2, [r3, #16]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d60:	3b01      	subs	r3, #1
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009d76:	4b66      	ldr	r3, [pc, #408]	; (8009f10 <HAL_I2C_Mem_Read+0x4c8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	08db      	lsrs	r3, r3, #3
 8009d7c:	4a65      	ldr	r2, [pc, #404]	; (8009f14 <HAL_I2C_Mem_Read+0x4cc>)
 8009d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d82:	0a1a      	lsrs	r2, r3, #8
 8009d84:	4613      	mov	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	00da      	lsls	r2, r3, #3
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d118      	bne.n	8009dce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2220      	movs	r2, #32
 8009da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db6:	f043 0220 	orr.w	r2, r3, #32
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009dbe:	b662      	cpsie	i
}
 8009dc0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e09a      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b04      	cmp	r3, #4
 8009dda:	d1d9      	bne.n	8009d90 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691a      	ldr	r2, [r3, #16]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	3b01      	subs	r3, #1
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e1e:	b662      	cpsie	i
}
 8009e20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	b2d2      	uxtb	r2, r2
 8009e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e54:	e042      	b.n	8009edc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fc1e 	bl	800a69c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e04c      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691a      	ldr	r2, [r3, #16]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	b2d2      	uxtb	r2, r2
 8009e76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	f003 0304 	and.w	r3, r3, #4
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	d118      	bne.n	8009edc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	b2d2      	uxtb	r2, r2
 8009eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f47f ae94 	bne.w	8009c0e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	e000      	b.n	8009f04 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f02:	2302      	movs	r3, #2
  }
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3728      	adds	r7, #40	; 0x28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	00010004 	.word	0x00010004
 8009f10:	200000a4 	.word	0x200000a4
 8009f14:	14f8b589 	.word	0x14f8b589

08009f18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f26:	b2db      	uxtb	r3, r3
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bc80      	pop	{r7}
 8009f30:	4770      	bx	lr

08009f32 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b083      	sub	sp, #12
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bc80      	pop	{r7}
 8009f46:	4770      	bx	lr

08009f48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	607a      	str	r2, [r7, #4]
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	460b      	mov	r3, r1
 8009f56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d006      	beq.n	8009f72 <I2C_MasterRequestWrite+0x2a>
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d003      	beq.n	8009f72 <I2C_MasterRequestWrite+0x2a>
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f70:	d108      	bne.n	8009f84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f80:	601a      	str	r2, [r3, #0]
 8009f82:	e00b      	b.n	8009f9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f88:	2b12      	cmp	r3, #18
 8009f8a:	d107      	bne.n	8009f9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 f9cd 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00d      	beq.n	8009fd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc2:	d103      	bne.n	8009fcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e035      	b.n	800a03c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fd8:	d108      	bne.n	8009fec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fda:	897b      	ldrh	r3, [r7, #10]
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fe8:	611a      	str	r2, [r3, #16]
 8009fea:	e01b      	b.n	800a024 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009fec:	897b      	ldrh	r3, [r7, #10]
 8009fee:	11db      	asrs	r3, r3, #7
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	f003 0306 	and.w	r3, r3, #6
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	f063 030f 	orn	r3, r3, #15
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	490e      	ldr	r1, [pc, #56]	; (800a044 <I2C_MasterRequestWrite+0xfc>)
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fa16 	bl	800a43c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e010      	b.n	800a03c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a01a:	897b      	ldrh	r3, [r7, #10]
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	4907      	ldr	r1, [pc, #28]	; (800a048 <I2C_MasterRequestWrite+0x100>)
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fa06 	bl	800a43c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	00010008 	.word	0x00010008
 800a048:	00010002 	.word	0x00010002

0800a04c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b088      	sub	sp, #32
 800a050:	af02      	add	r7, sp, #8
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	4608      	mov	r0, r1
 800a056:	4611      	mov	r1, r2
 800a058:	461a      	mov	r2, r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	817b      	strh	r3, [r7, #10]
 800a05e:	460b      	mov	r3, r1
 800a060:	813b      	strh	r3, [r7, #8]
 800a062:	4613      	mov	r3, r2
 800a064:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a074:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 f960 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00d      	beq.n	800a0aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a09c:	d103      	bne.n	800a0a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e05f      	b.n	800a16a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0aa:	897b      	ldrh	r3, [r7, #10]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	6a3a      	ldr	r2, [r7, #32]
 800a0be:	492d      	ldr	r1, [pc, #180]	; (800a174 <I2C_RequestMemoryWrite+0x128>)
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 f9bb 	bl	800a43c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e04c      	b.n	800a16a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	617b      	str	r3, [r7, #20]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	617b      	str	r3, [r7, #20]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	617b      	str	r3, [r7, #20]
 800a0e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e8:	6a39      	ldr	r1, [r7, #32]
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 fa46 	bl	800a57c <I2C_WaitOnTXEFlagUntilTimeout>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00d      	beq.n	800a112 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d107      	bne.n	800a10e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a10c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e02b      	b.n	800a16a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a112:	88fb      	ldrh	r3, [r7, #6]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d105      	bne.n	800a124 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a118:	893b      	ldrh	r3, [r7, #8]
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	611a      	str	r2, [r3, #16]
 800a122:	e021      	b.n	800a168 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a124:	893b      	ldrh	r3, [r7, #8]
 800a126:	0a1b      	lsrs	r3, r3, #8
 800a128:	b29b      	uxth	r3, r3
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a134:	6a39      	ldr	r1, [r7, #32]
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 fa20 	bl	800a57c <I2C_WaitOnTXEFlagUntilTimeout>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00d      	beq.n	800a15e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	2b04      	cmp	r3, #4
 800a148:	d107      	bne.n	800a15a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a158:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e005      	b.n	800a16a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a15e:	893b      	ldrh	r3, [r7, #8]
 800a160:	b2da      	uxtb	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	00010002 	.word	0x00010002

0800a178 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	4608      	mov	r0, r1
 800a182:	4611      	mov	r1, r2
 800a184:	461a      	mov	r2, r3
 800a186:	4603      	mov	r3, r0
 800a188:	817b      	strh	r3, [r7, #10]
 800a18a:	460b      	mov	r3, r1
 800a18c:	813b      	strh	r3, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f000 f8c2 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00d      	beq.n	800a1e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d8:	d103      	bne.n	800a1e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e0aa      	b.n	800a33c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1e6:	897b      	ldrh	r3, [r7, #10]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	6a3a      	ldr	r2, [r7, #32]
 800a1fa:	4952      	ldr	r1, [pc, #328]	; (800a344 <I2C_RequestMemoryRead+0x1cc>)
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f91d 	bl	800a43c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e097      	b.n	800a33c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a20c:	2300      	movs	r3, #0
 800a20e:	617b      	str	r3, [r7, #20]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	617b      	str	r3, [r7, #20]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	617b      	str	r3, [r7, #20]
 800a220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a224:	6a39      	ldr	r1, [r7, #32]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 f9a8 	bl	800a57c <I2C_WaitOnTXEFlagUntilTimeout>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00d      	beq.n	800a24e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	2b04      	cmp	r3, #4
 800a238:	d107      	bne.n	800a24a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e076      	b.n	800a33c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d105      	bne.n	800a260 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a254:	893b      	ldrh	r3, [r7, #8]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	611a      	str	r2, [r3, #16]
 800a25e:	e021      	b.n	800a2a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a260:	893b      	ldrh	r3, [r7, #8]
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	b29b      	uxth	r3, r3
 800a266:	b2da      	uxtb	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a270:	6a39      	ldr	r1, [r7, #32]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 f982 	bl	800a57c <I2C_WaitOnTXEFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00d      	beq.n	800a29a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	2b04      	cmp	r3, #4
 800a284:	d107      	bne.n	800a296 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e050      	b.n	800a33c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a29a:	893b      	ldrh	r3, [r7, #8]
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a6:	6a39      	ldr	r1, [r7, #32]
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 f967 	bl	800a57c <I2C_WaitOnTXEFlagUntilTimeout>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00d      	beq.n	800a2d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d107      	bne.n	800a2cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e035      	b.n	800a33c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f82b 	bl	800a348 <I2C_WaitOnFlagUntilTimeout>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00d      	beq.n	800a314 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a306:	d103      	bne.n	800a310 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a30e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e013      	b.n	800a33c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a314:	897b      	ldrh	r3, [r7, #10]
 800a316:	b2db      	uxtb	r3, r3
 800a318:	f043 0301 	orr.w	r3, r3, #1
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	6a3a      	ldr	r2, [r7, #32]
 800a328:	4906      	ldr	r1, [pc, #24]	; (800a344 <I2C_RequestMemoryRead+0x1cc>)
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 f886 	bl	800a43c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	00010002 	.word	0x00010002

0800a348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	603b      	str	r3, [r7, #0]
 800a354:	4613      	mov	r3, r2
 800a356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a358:	e048      	b.n	800a3ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a360:	d044      	beq.n	800a3ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a362:	f7fe f9e3 	bl	800872c <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d302      	bcc.n	800a378 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d139      	bne.n	800a3ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	0c1b      	lsrs	r3, r3, #16
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d10d      	bne.n	800a39e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	43da      	mvns	r2, r3
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	4013      	ands	r3, r2
 800a38e:	b29b      	uxth	r3, r3
 800a390:	2b00      	cmp	r3, #0
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	e00c      	b.n	800a3b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	43da      	mvns	r2, r3
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bf0c      	ite	eq
 800a3b0:	2301      	moveq	r3, #1
 800a3b2:	2300      	movne	r3, #0
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d116      	bne.n	800a3ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	f043 0220 	orr.w	r2, r3, #32
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e023      	b.n	800a434 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	0c1b      	lsrs	r3, r3, #16
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d10d      	bne.n	800a412 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	43da      	mvns	r2, r3
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	4013      	ands	r3, r2
 800a402:	b29b      	uxth	r3, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	bf0c      	ite	eq
 800a408:	2301      	moveq	r3, #1
 800a40a:	2300      	movne	r3, #0
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	e00c      	b.n	800a42c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	43da      	mvns	r2, r3
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	4013      	ands	r3, r2
 800a41e:	b29b      	uxth	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	bf0c      	ite	eq
 800a424:	2301      	moveq	r3, #1
 800a426:	2300      	movne	r3, #0
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	461a      	mov	r2, r3
 800a42c:	79fb      	ldrb	r3, [r7, #7]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d093      	beq.n	800a35a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a44a:	e071      	b.n	800a530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a45a:	d123      	bne.n	800a4a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a46a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2220      	movs	r2, #32
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a490:	f043 0204 	orr.w	r2, r3, #4
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e067      	b.n	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4aa:	d041      	beq.n	800a530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ac:	f7fe f93e 	bl	800872c <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d302      	bcc.n	800a4c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d136      	bne.n	800a530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	0c1b      	lsrs	r3, r3, #16
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d10c      	bne.n	800a4e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	43da      	mvns	r2, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bf14      	ite	ne
 800a4de:	2301      	movne	r3, #1
 800a4e0:	2300      	moveq	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	e00b      	b.n	800a4fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	43da      	mvns	r2, r3
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bf14      	ite	ne
 800a4f8:	2301      	movne	r3, #1
 800a4fa:	2300      	moveq	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d016      	beq.n	800a530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2220      	movs	r2, #32
 800a50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51c:	f043 0220 	orr.w	r2, r3, #32
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e021      	b.n	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	0c1b      	lsrs	r3, r3, #16
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b01      	cmp	r3, #1
 800a538:	d10c      	bne.n	800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	43da      	mvns	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4013      	ands	r3, r2
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bf14      	ite	ne
 800a54c:	2301      	movne	r3, #1
 800a54e:	2300      	moveq	r3, #0
 800a550:	b2db      	uxtb	r3, r3
 800a552:	e00b      	b.n	800a56c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	43da      	mvns	r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4013      	ands	r3, r2
 800a560:	b29b      	uxth	r3, r3
 800a562:	2b00      	cmp	r3, #0
 800a564:	bf14      	ite	ne
 800a566:	2301      	movne	r3, #1
 800a568:	2300      	moveq	r3, #0
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f47f af6d 	bne.w	800a44c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a588:	e034      	b.n	800a5f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f8e3 	bl	800a756 <I2C_IsAcknowledgeFailed>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e034      	b.n	800a604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a0:	d028      	beq.n	800a5f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a2:	f7fe f8c3 	bl	800872c <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d302      	bcc.n	800a5b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11d      	bne.n	800a5f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c2:	2b80      	cmp	r3, #128	; 0x80
 800a5c4:	d016      	beq.n	800a5f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	f043 0220 	orr.w	r2, r3, #32
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e007      	b.n	800a604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5fe:	2b80      	cmp	r3, #128	; 0x80
 800a600:	d1c3      	bne.n	800a58a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a618:	e034      	b.n	800a684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f89b 	bl	800a756 <I2C_IsAcknowledgeFailed>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e034      	b.n	800a694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a630:	d028      	beq.n	800a684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a632:	f7fe f87b 	bl	800872c <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d302      	bcc.n	800a648 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d11d      	bne.n	800a684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b04      	cmp	r3, #4
 800a654:	d016      	beq.n	800a684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2220      	movs	r2, #32
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	f043 0220 	orr.w	r2, r3, #32
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e007      	b.n	800a694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	f003 0304 	and.w	r3, r3, #4
 800a68e:	2b04      	cmp	r3, #4
 800a690:	d1c3      	bne.n	800a61a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6a8:	e049      	b.n	800a73e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	f003 0310 	and.w	r3, r3, #16
 800a6b4:	2b10      	cmp	r3, #16
 800a6b6:	d119      	bne.n	800a6ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f06f 0210 	mvn.w	r2, #16
 800a6c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e030      	b.n	800a74e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ec:	f7fe f81e 	bl	800872c <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d302      	bcc.n	800a702 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d11d      	bne.n	800a73e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70c:	2b40      	cmp	r3, #64	; 0x40
 800a70e:	d016      	beq.n	800a73e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2220      	movs	r2, #32
 800a71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	f043 0220 	orr.w	r2, r3, #32
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e007      	b.n	800a74e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a748:	2b40      	cmp	r3, #64	; 0x40
 800a74a:	d1ae      	bne.n	800a6aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a76c:	d11b      	bne.n	800a7a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a776:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	f043 0204 	orr.w	r2, r3, #4
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bc80      	pop	{r7}
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e272      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 8087 	beq.w	800a8e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a7d4:	4b92      	ldr	r3, [pc, #584]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	f003 030c 	and.w	r3, r3, #12
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d00c      	beq.n	800a7fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a7e0:	4b8f      	ldr	r3, [pc, #572]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f003 030c 	and.w	r3, r3, #12
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d112      	bne.n	800a812 <HAL_RCC_OscConfig+0x5e>
 800a7ec:	4b8c      	ldr	r3, [pc, #560]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f8:	d10b      	bne.n	800a812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7fa:	4b89      	ldr	r3, [pc, #548]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d06c      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x12c>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d168      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e24c      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81a:	d106      	bne.n	800a82a <HAL_RCC_OscConfig+0x76>
 800a81c:	4b80      	ldr	r3, [pc, #512]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a7f      	ldr	r2, [pc, #508]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	e02e      	b.n	800a888 <HAL_RCC_OscConfig+0xd4>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10c      	bne.n	800a84c <HAL_RCC_OscConfig+0x98>
 800a832:	4b7b      	ldr	r3, [pc, #492]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a7a      	ldr	r2, [pc, #488]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	4b78      	ldr	r3, [pc, #480]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a77      	ldr	r2, [pc, #476]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	e01d      	b.n	800a888 <HAL_RCC_OscConfig+0xd4>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a854:	d10c      	bne.n	800a870 <HAL_RCC_OscConfig+0xbc>
 800a856:	4b72      	ldr	r3, [pc, #456]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a71      	ldr	r2, [pc, #452]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a85c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	4b6f      	ldr	r3, [pc, #444]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a6e      	ldr	r2, [pc, #440]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	e00b      	b.n	800a888 <HAL_RCC_OscConfig+0xd4>
 800a870:	4b6b      	ldr	r3, [pc, #428]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a6a      	ldr	r2, [pc, #424]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	4b68      	ldr	r3, [pc, #416]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a67      	ldr	r2, [pc, #412]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a886:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d013      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a890:	f7fd ff4c 	bl	800872c <HAL_GetTick>
 800a894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a896:	e008      	b.n	800a8aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a898:	f7fd ff48 	bl	800872c <HAL_GetTick>
 800a89c:	4602      	mov	r2, r0
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	2b64      	cmp	r3, #100	; 0x64
 800a8a4:	d901      	bls.n	800a8aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e200      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8aa:	4b5d      	ldr	r3, [pc, #372]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0f0      	beq.n	800a898 <HAL_RCC_OscConfig+0xe4>
 800a8b6:	e014      	b.n	800a8e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8b8:	f7fd ff38 	bl	800872c <HAL_GetTick>
 800a8bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8be:	e008      	b.n	800a8d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8c0:	f7fd ff34 	bl	800872c <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b64      	cmp	r3, #100	; 0x64
 800a8cc:	d901      	bls.n	800a8d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e1ec      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8d2:	4b53      	ldr	r3, [pc, #332]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1f0      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x10c>
 800a8de:	e000      	b.n	800a8e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0302 	and.w	r3, r3, #2
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d063      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a8ee:	4b4c      	ldr	r3, [pc, #304]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	f003 030c 	and.w	r3, r3, #12
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00b      	beq.n	800a912 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a8fa:	4b49      	ldr	r3, [pc, #292]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f003 030c 	and.w	r3, r3, #12
 800a902:	2b08      	cmp	r3, #8
 800a904:	d11c      	bne.n	800a940 <HAL_RCC_OscConfig+0x18c>
 800a906:	4b46      	ldr	r3, [pc, #280]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d116      	bne.n	800a940 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a912:	4b43      	ldr	r3, [pc, #268]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <HAL_RCC_OscConfig+0x176>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d001      	beq.n	800a92a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e1c0      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a92a:	4b3d      	ldr	r3, [pc, #244]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	4939      	ldr	r1, [pc, #228]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a93a:	4313      	orrs	r3, r2
 800a93c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a93e:	e03a      	b.n	800a9b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d020      	beq.n	800a98a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a948:	4b36      	ldr	r3, [pc, #216]	; (800aa24 <HAL_RCC_OscConfig+0x270>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a94e:	f7fd feed 	bl	800872c <HAL_GetTick>
 800a952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a954:	e008      	b.n	800a968 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a956:	f7fd fee9 	bl	800872c <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d901      	bls.n	800a968 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e1a1      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a968:	4b2d      	ldr	r3, [pc, #180]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0f0      	beq.n	800a956 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a974:	4b2a      	ldr	r3, [pc, #168]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	4927      	ldr	r1, [pc, #156]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a984:	4313      	orrs	r3, r2
 800a986:	600b      	str	r3, [r1, #0]
 800a988:	e015      	b.n	800a9b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a98a:	4b26      	ldr	r3, [pc, #152]	; (800aa24 <HAL_RCC_OscConfig+0x270>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a990:	f7fd fecc 	bl	800872c <HAL_GetTick>
 800a994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a996:	e008      	b.n	800a9aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a998:	f7fd fec8 	bl	800872c <HAL_GetTick>
 800a99c:	4602      	mov	r2, r0
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d901      	bls.n	800a9aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e180      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9aa:	4b1d      	ldr	r3, [pc, #116]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0302 	and.w	r3, r3, #2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1f0      	bne.n	800a998 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0308 	and.w	r3, r3, #8
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d03a      	beq.n	800aa38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d019      	beq.n	800a9fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9ca:	4b17      	ldr	r3, [pc, #92]	; (800aa28 <HAL_RCC_OscConfig+0x274>)
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9d0:	f7fd feac 	bl	800872c <HAL_GetTick>
 800a9d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9d8:	f7fd fea8 	bl	800872c <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e160      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	; (800aa20 <HAL_RCC_OscConfig+0x26c>)
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0f0      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	f000 face 	bl	800af98 <RCC_Delay>
 800a9fc:	e01c      	b.n	800aa38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <HAL_RCC_OscConfig+0x274>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa04:	f7fd fe92 	bl	800872c <HAL_GetTick>
 800aa08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa0a:	e00f      	b.n	800aa2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa0c:	f7fd fe8e 	bl	800872c <HAL_GetTick>
 800aa10:	4602      	mov	r2, r0
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d908      	bls.n	800aa2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e146      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
 800aa1e:	bf00      	nop
 800aa20:	40021000 	.word	0x40021000
 800aa24:	42420000 	.word	0x42420000
 800aa28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa2c:	4b92      	ldr	r3, [pc, #584]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e9      	bne.n	800aa0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f000 80a6 	beq.w	800ab92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa46:	2300      	movs	r3, #0
 800aa48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa4a:	4b8b      	ldr	r3, [pc, #556]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10d      	bne.n	800aa72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa56:	4b88      	ldr	r3, [pc, #544]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	4a87      	ldr	r2, [pc, #540]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aa5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa60:	61d3      	str	r3, [r2, #28]
 800aa62:	4b85      	ldr	r3, [pc, #532]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa6a:	60bb      	str	r3, [r7, #8]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa72:	4b82      	ldr	r3, [pc, #520]	; (800ac7c <HAL_RCC_OscConfig+0x4c8>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d118      	bne.n	800aab0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa7e:	4b7f      	ldr	r3, [pc, #508]	; (800ac7c <HAL_RCC_OscConfig+0x4c8>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a7e      	ldr	r2, [pc, #504]	; (800ac7c <HAL_RCC_OscConfig+0x4c8>)
 800aa84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa8a:	f7fd fe4f 	bl	800872c <HAL_GetTick>
 800aa8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa90:	e008      	b.n	800aaa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa92:	f7fd fe4b 	bl	800872c <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	2b64      	cmp	r3, #100	; 0x64
 800aa9e:	d901      	bls.n	800aaa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e103      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaa4:	4b75      	ldr	r3, [pc, #468]	; (800ac7c <HAL_RCC_OscConfig+0x4c8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0f0      	beq.n	800aa92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d106      	bne.n	800aac6 <HAL_RCC_OscConfig+0x312>
 800aab8:	4b6f      	ldr	r3, [pc, #444]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	4a6e      	ldr	r2, [pc, #440]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aabe:	f043 0301 	orr.w	r3, r3, #1
 800aac2:	6213      	str	r3, [r2, #32]
 800aac4:	e02d      	b.n	800ab22 <HAL_RCC_OscConfig+0x36e>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10c      	bne.n	800aae8 <HAL_RCC_OscConfig+0x334>
 800aace:	4b6a      	ldr	r3, [pc, #424]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	4a69      	ldr	r2, [pc, #420]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aad4:	f023 0301 	bic.w	r3, r3, #1
 800aad8:	6213      	str	r3, [r2, #32]
 800aada:	4b67      	ldr	r3, [pc, #412]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	4a66      	ldr	r2, [pc, #408]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aae0:	f023 0304 	bic.w	r3, r3, #4
 800aae4:	6213      	str	r3, [r2, #32]
 800aae6:	e01c      	b.n	800ab22 <HAL_RCC_OscConfig+0x36e>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	2b05      	cmp	r3, #5
 800aaee:	d10c      	bne.n	800ab0a <HAL_RCC_OscConfig+0x356>
 800aaf0:	4b61      	ldr	r3, [pc, #388]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aaf2:	6a1b      	ldr	r3, [r3, #32]
 800aaf4:	4a60      	ldr	r2, [pc, #384]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aaf6:	f043 0304 	orr.w	r3, r3, #4
 800aafa:	6213      	str	r3, [r2, #32]
 800aafc:	4b5e      	ldr	r3, [pc, #376]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	4a5d      	ldr	r2, [pc, #372]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab02:	f043 0301 	orr.w	r3, r3, #1
 800ab06:	6213      	str	r3, [r2, #32]
 800ab08:	e00b      	b.n	800ab22 <HAL_RCC_OscConfig+0x36e>
 800ab0a:	4b5b      	ldr	r3, [pc, #364]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	4a5a      	ldr	r2, [pc, #360]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab10:	f023 0301 	bic.w	r3, r3, #1
 800ab14:	6213      	str	r3, [r2, #32]
 800ab16:	4b58      	ldr	r3, [pc, #352]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	4a57      	ldr	r2, [pc, #348]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab1c:	f023 0304 	bic.w	r3, r3, #4
 800ab20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d015      	beq.n	800ab56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab2a:	f7fd fdff 	bl	800872c <HAL_GetTick>
 800ab2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab30:	e00a      	b.n	800ab48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab32:	f7fd fdfb 	bl	800872c <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d901      	bls.n	800ab48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e0b1      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab48:	4b4b      	ldr	r3, [pc, #300]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0ee      	beq.n	800ab32 <HAL_RCC_OscConfig+0x37e>
 800ab54:	e014      	b.n	800ab80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab56:	f7fd fde9 	bl	800872c <HAL_GetTick>
 800ab5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab5c:	e00a      	b.n	800ab74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab5e:	f7fd fde5 	bl	800872c <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d901      	bls.n	800ab74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e09b      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab74:	4b40      	ldr	r3, [pc, #256]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1ee      	bne.n	800ab5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d105      	bne.n	800ab92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab86:	4b3c      	ldr	r3, [pc, #240]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	4a3b      	ldr	r2, [pc, #236]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 8087 	beq.w	800acaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab9c:	4b36      	ldr	r3, [pc, #216]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	f003 030c 	and.w	r3, r3, #12
 800aba4:	2b08      	cmp	r3, #8
 800aba6:	d061      	beq.n	800ac6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	69db      	ldr	r3, [r3, #28]
 800abac:	2b02      	cmp	r3, #2
 800abae:	d146      	bne.n	800ac3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abb0:	4b33      	ldr	r3, [pc, #204]	; (800ac80 <HAL_RCC_OscConfig+0x4cc>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abb6:	f7fd fdb9 	bl	800872c <HAL_GetTick>
 800abba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abbc:	e008      	b.n	800abd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abbe:	f7fd fdb5 	bl	800872c <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d901      	bls.n	800abd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e06d      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abd0:	4b29      	ldr	r3, [pc, #164]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f0      	bne.n	800abbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe4:	d108      	bne.n	800abf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800abe6:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	4921      	ldr	r1, [pc, #132]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abf8:	4b1f      	ldr	r3, [pc, #124]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a19      	ldr	r1, [r3, #32]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	430b      	orrs	r3, r1
 800ac0a:	491b      	ldr	r1, [pc, #108]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <HAL_RCC_OscConfig+0x4cc>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac16:	f7fd fd89 	bl	800872c <HAL_GetTick>
 800ac1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac1c:	e008      	b.n	800ac30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac1e:	f7fd fd85 	bl	800872c <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d901      	bls.n	800ac30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e03d      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac30:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0f0      	beq.n	800ac1e <HAL_RCC_OscConfig+0x46a>
 800ac3c:	e035      	b.n	800acaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac3e:	4b10      	ldr	r3, [pc, #64]	; (800ac80 <HAL_RCC_OscConfig+0x4cc>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac44:	f7fd fd72 	bl	800872c <HAL_GetTick>
 800ac48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac4a:	e008      	b.n	800ac5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac4c:	f7fd fd6e 	bl	800872c <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d901      	bls.n	800ac5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e026      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac5e:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <HAL_RCC_OscConfig+0x4c4>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1f0      	bne.n	800ac4c <HAL_RCC_OscConfig+0x498>
 800ac6a:	e01e      	b.n	800acaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d107      	bne.n	800ac84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e019      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
 800ac78:	40021000 	.word	0x40021000
 800ac7c:	40007000 	.word	0x40007000
 800ac80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ac84:	4b0b      	ldr	r3, [pc, #44]	; (800acb4 <HAL_RCC_OscConfig+0x500>)
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d106      	bne.n	800aca6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d001      	beq.n	800acaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	40021000 	.word	0x40021000

0800acb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e0d0      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800accc:	4b6a      	ldr	r3, [pc, #424]	; (800ae78 <HAL_RCC_ClockConfig+0x1c0>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0307 	and.w	r3, r3, #7
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d910      	bls.n	800acfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acda:	4b67      	ldr	r3, [pc, #412]	; (800ae78 <HAL_RCC_ClockConfig+0x1c0>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f023 0207 	bic.w	r2, r3, #7
 800ace2:	4965      	ldr	r1, [pc, #404]	; (800ae78 <HAL_RCC_ClockConfig+0x1c0>)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acea:	4b63      	ldr	r3, [pc, #396]	; (800ae78 <HAL_RCC_ClockConfig+0x1c0>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d001      	beq.n	800acfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e0b8      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0302 	and.w	r3, r3, #2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d020      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad14:	4b59      	ldr	r3, [pc, #356]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	4a58      	ldr	r2, [pc, #352]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0308 	and.w	r3, r3, #8
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d005      	beq.n	800ad38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad2c:	4b53      	ldr	r3, [pc, #332]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	4a52      	ldr	r2, [pc, #328]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad38:	4b50      	ldr	r3, [pc, #320]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	494d      	ldr	r1, [pc, #308]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d040      	beq.n	800add8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d107      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad5e:	4b47      	ldr	r3, [pc, #284]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d115      	bne.n	800ad96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e07f      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d107      	bne.n	800ad86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad76:	4b41      	ldr	r3, [pc, #260]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e073      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad86:	4b3d      	ldr	r3, [pc, #244]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e06b      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad96:	4b39      	ldr	r3, [pc, #228]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	f023 0203 	bic.w	r2, r3, #3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	4936      	ldr	r1, [pc, #216]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ada4:	4313      	orrs	r3, r2
 800ada6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ada8:	f7fd fcc0 	bl	800872c <HAL_GetTick>
 800adac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adae:	e00a      	b.n	800adc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adb0:	f7fd fcbc 	bl	800872c <HAL_GetTick>
 800adb4:	4602      	mov	r2, r0
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	f241 3288 	movw	r2, #5000	; 0x1388
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d901      	bls.n	800adc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e053      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adc6:	4b2d      	ldr	r3, [pc, #180]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f003 020c 	and.w	r2, r3, #12
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	429a      	cmp	r2, r3
 800add6:	d1eb      	bne.n	800adb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800add8:	4b27      	ldr	r3, [pc, #156]	; (800ae78 <HAL_RCC_ClockConfig+0x1c0>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0307 	and.w	r3, r3, #7
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d210      	bcs.n	800ae08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ade6:	4b24      	ldr	r3, [pc, #144]	; (800ae78 <HAL_RCC_ClockConfig+0x1c0>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f023 0207 	bic.w	r2, r3, #7
 800adee:	4922      	ldr	r1, [pc, #136]	; (800ae78 <HAL_RCC_ClockConfig+0x1c0>)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adf6:	4b20      	ldr	r3, [pc, #128]	; (800ae78 <HAL_RCC_ClockConfig+0x1c0>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0307 	and.w	r3, r3, #7
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d001      	beq.n	800ae08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e032      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d008      	beq.n	800ae26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae14:	4b19      	ldr	r3, [pc, #100]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	4916      	ldr	r1, [pc, #88]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ae22:	4313      	orrs	r3, r2
 800ae24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0308 	and.w	r3, r3, #8
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d009      	beq.n	800ae46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae32:	4b12      	ldr	r3, [pc, #72]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	00db      	lsls	r3, r3, #3
 800ae40:	490e      	ldr	r1, [pc, #56]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae46:	f000 f821 	bl	800ae8c <HAL_RCC_GetSysClockFreq>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <HAL_RCC_ClockConfig+0x1c4>)
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	091b      	lsrs	r3, r3, #4
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	490a      	ldr	r1, [pc, #40]	; (800ae80 <HAL_RCC_ClockConfig+0x1c8>)
 800ae58:	5ccb      	ldrb	r3, [r1, r3]
 800ae5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5e:	4a09      	ldr	r2, [pc, #36]	; (800ae84 <HAL_RCC_ClockConfig+0x1cc>)
 800ae60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ae62:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <HAL_RCC_ClockConfig+0x1d0>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fd fc1e 	bl	80086a8 <HAL_InitTick>

  return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	40022000 	.word	0x40022000
 800ae7c:	40021000 	.word	0x40021000
 800ae80:	0800dc68 	.word	0x0800dc68
 800ae84:	200000a4 	.word	0x200000a4
 800ae88:	200000a8 	.word	0x200000a8

0800ae8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b087      	sub	sp, #28
 800ae90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	2300      	movs	r3, #0
 800ae98:	60bb      	str	r3, [r7, #8]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	617b      	str	r3, [r7, #20]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aea6:	4b1e      	ldr	r3, [pc, #120]	; (800af20 <HAL_RCC_GetSysClockFreq+0x94>)
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f003 030c 	and.w	r3, r3, #12
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d002      	beq.n	800aebc <HAL_RCC_GetSysClockFreq+0x30>
 800aeb6:	2b08      	cmp	r3, #8
 800aeb8:	d003      	beq.n	800aec2 <HAL_RCC_GetSysClockFreq+0x36>
 800aeba:	e027      	b.n	800af0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aebc:	4b19      	ldr	r3, [pc, #100]	; (800af24 <HAL_RCC_GetSysClockFreq+0x98>)
 800aebe:	613b      	str	r3, [r7, #16]
      break;
 800aec0:	e027      	b.n	800af12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	0c9b      	lsrs	r3, r3, #18
 800aec6:	f003 030f 	and.w	r3, r3, #15
 800aeca:	4a17      	ldr	r2, [pc, #92]	; (800af28 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aecc:	5cd3      	ldrb	r3, [r2, r3]
 800aece:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d010      	beq.n	800aefc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aeda:	4b11      	ldr	r3, [pc, #68]	; (800af20 <HAL_RCC_GetSysClockFreq+0x94>)
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	0c5b      	lsrs	r3, r3, #17
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	4a11      	ldr	r2, [pc, #68]	; (800af2c <HAL_RCC_GetSysClockFreq+0xa0>)
 800aee6:	5cd3      	ldrb	r3, [r2, r3]
 800aee8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a0d      	ldr	r2, [pc, #52]	; (800af24 <HAL_RCC_GetSysClockFreq+0x98>)
 800aeee:	fb03 f202 	mul.w	r2, r3, r2
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef8:	617b      	str	r3, [r7, #20]
 800aefa:	e004      	b.n	800af06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a0c      	ldr	r2, [pc, #48]	; (800af30 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af00:	fb02 f303 	mul.w	r3, r2, r3
 800af04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	613b      	str	r3, [r7, #16]
      break;
 800af0a:	e002      	b.n	800af12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af0c:	4b05      	ldr	r3, [pc, #20]	; (800af24 <HAL_RCC_GetSysClockFreq+0x98>)
 800af0e:	613b      	str	r3, [r7, #16]
      break;
 800af10:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af12:	693b      	ldr	r3, [r7, #16]
}
 800af14:	4618      	mov	r0, r3
 800af16:	371c      	adds	r7, #28
 800af18:	46bd      	mov	sp, r7
 800af1a:	bc80      	pop	{r7}
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	40021000 	.word	0x40021000
 800af24:	007a1200 	.word	0x007a1200
 800af28:	0800dc80 	.word	0x0800dc80
 800af2c:	0800dc90 	.word	0x0800dc90
 800af30:	003d0900 	.word	0x003d0900

0800af34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af34:	b480      	push	{r7}
 800af36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af38:	4b02      	ldr	r3, [pc, #8]	; (800af44 <HAL_RCC_GetHCLKFreq+0x10>)
 800af3a:	681b      	ldr	r3, [r3, #0]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr
 800af44:	200000a4 	.word	0x200000a4

0800af48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af4c:	f7ff fff2 	bl	800af34 <HAL_RCC_GetHCLKFreq>
 800af50:	4602      	mov	r2, r0
 800af52:	4b05      	ldr	r3, [pc, #20]	; (800af68 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	0a1b      	lsrs	r3, r3, #8
 800af58:	f003 0307 	and.w	r3, r3, #7
 800af5c:	4903      	ldr	r1, [pc, #12]	; (800af6c <HAL_RCC_GetPCLK1Freq+0x24>)
 800af5e:	5ccb      	ldrb	r3, [r1, r3]
 800af60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af64:	4618      	mov	r0, r3
 800af66:	bd80      	pop	{r7, pc}
 800af68:	40021000 	.word	0x40021000
 800af6c:	0800dc78 	.word	0x0800dc78

0800af70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af74:	f7ff ffde 	bl	800af34 <HAL_RCC_GetHCLKFreq>
 800af78:	4602      	mov	r2, r0
 800af7a:	4b05      	ldr	r3, [pc, #20]	; (800af90 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	0adb      	lsrs	r3, r3, #11
 800af80:	f003 0307 	and.w	r3, r3, #7
 800af84:	4903      	ldr	r1, [pc, #12]	; (800af94 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af86:	5ccb      	ldrb	r3, [r1, r3]
 800af88:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	40021000 	.word	0x40021000
 800af94:	0800dc78 	.word	0x0800dc78

0800af98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800afa0:	4b0a      	ldr	r3, [pc, #40]	; (800afcc <RCC_Delay+0x34>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a0a      	ldr	r2, [pc, #40]	; (800afd0 <RCC_Delay+0x38>)
 800afa6:	fba2 2303 	umull	r2, r3, r2, r3
 800afaa:	0a5b      	lsrs	r3, r3, #9
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	fb02 f303 	mul.w	r3, r2, r3
 800afb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800afb4:	bf00      	nop
  }
  while (Delay --);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	1e5a      	subs	r2, r3, #1
 800afba:	60fa      	str	r2, [r7, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1f9      	bne.n	800afb4 <RCC_Delay+0x1c>
}
 800afc0:	bf00      	nop
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bc80      	pop	{r7}
 800afca:	4770      	bx	lr
 800afcc:	200000a4 	.word	0x200000a4
 800afd0:	10624dd3 	.word	0x10624dd3

0800afd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e041      	b.n	800b06a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7fd fa26 	bl	800844c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2202      	movs	r2, #2
 800b004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3304      	adds	r3, #4
 800b010:	4619      	mov	r1, r3
 800b012:	4610      	mov	r0, r2
 800b014:	f000 fa82 	bl	800b51c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b01      	cmp	r3, #1
 800b086:	d001      	beq.n	800b08c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e044      	b.n	800b116 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f042 0201 	orr.w	r2, r2, #1
 800b0a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a1d      	ldr	r2, [pc, #116]	; (800b120 <HAL_TIM_Base_Start_IT+0xac>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d018      	beq.n	800b0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a1c      	ldr	r2, [pc, #112]	; (800b124 <HAL_TIM_Base_Start_IT+0xb0>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d013      	beq.n	800b0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0c0:	d00e      	beq.n	800b0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a18      	ldr	r2, [pc, #96]	; (800b128 <HAL_TIM_Base_Start_IT+0xb4>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d009      	beq.n	800b0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a16      	ldr	r2, [pc, #88]	; (800b12c <HAL_TIM_Base_Start_IT+0xb8>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d004      	beq.n	800b0e0 <HAL_TIM_Base_Start_IT+0x6c>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a15      	ldr	r2, [pc, #84]	; (800b130 <HAL_TIM_Base_Start_IT+0xbc>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d111      	bne.n	800b104 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	f003 0307 	and.w	r3, r3, #7
 800b0ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b06      	cmp	r3, #6
 800b0f0:	d010      	beq.n	800b114 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f042 0201 	orr.w	r2, r2, #1
 800b100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b102:	e007      	b.n	800b114 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0201 	orr.w	r2, r2, #1
 800b112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bc80      	pop	{r7}
 800b11e:	4770      	bx	lr
 800b120:	40012c00 	.word	0x40012c00
 800b124:	40013400 	.word	0x40013400
 800b128:	40000400 	.word	0x40000400
 800b12c:	40000800 	.word	0x40000800
 800b130:	40000c00 	.word	0x40000c00

0800b134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f003 0302 	and.w	r3, r3, #2
 800b146:	2b02      	cmp	r3, #2
 800b148:	d122      	bne.n	800b190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f003 0302 	and.w	r3, r3, #2
 800b154:	2b02      	cmp	r3, #2
 800b156:	d11b      	bne.n	800b190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 0202 	mvn.w	r2, #2
 800b160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	f003 0303 	and.w	r3, r3, #3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f9b4 	bl	800b4e4 <HAL_TIM_IC_CaptureCallback>
 800b17c:	e005      	b.n	800b18a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f9a7 	bl	800b4d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f9b6 	bl	800b4f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 0304 	and.w	r3, r3, #4
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	d122      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d11b      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f06f 0204 	mvn.w	r2, #4
 800b1b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f98a 	bl	800b4e4 <HAL_TIM_IC_CaptureCallback>
 800b1d0:	e005      	b.n	800b1de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f97d 	bl	800b4d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f98c 	bl	800b4f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f003 0308 	and.w	r3, r3, #8
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d122      	bne.n	800b238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f003 0308 	and.w	r3, r3, #8
 800b1fc:	2b08      	cmp	r3, #8
 800b1fe:	d11b      	bne.n	800b238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f06f 0208 	mvn.w	r2, #8
 800b208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2204      	movs	r2, #4
 800b20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	f003 0303 	and.w	r3, r3, #3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f960 	bl	800b4e4 <HAL_TIM_IC_CaptureCallback>
 800b224:	e005      	b.n	800b232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f953 	bl	800b4d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f962 	bl	800b4f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0310 	and.w	r3, r3, #16
 800b242:	2b10      	cmp	r3, #16
 800b244:	d122      	bne.n	800b28c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f003 0310 	and.w	r3, r3, #16
 800b250:	2b10      	cmp	r3, #16
 800b252:	d11b      	bne.n	800b28c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f06f 0210 	mvn.w	r2, #16
 800b25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2208      	movs	r2, #8
 800b262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f936 	bl	800b4e4 <HAL_TIM_IC_CaptureCallback>
 800b278:	e005      	b.n	800b286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f929 	bl	800b4d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f938 	bl	800b4f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b01      	cmp	r3, #1
 800b298:	d10e      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d107      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f06f 0201 	mvn.w	r2, #1
 800b2b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7fc fd2e 	bl	8007d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c2:	2b80      	cmp	r3, #128	; 0x80
 800b2c4:	d10e      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d0:	2b80      	cmp	r3, #128	; 0x80
 800b2d2:	d107      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 faa1 	bl	800b826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ee:	2b40      	cmp	r3, #64	; 0x40
 800b2f0:	d10e      	bne.n	800b310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2fc:	2b40      	cmp	r3, #64	; 0x40
 800b2fe:	d107      	bne.n	800b310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f8fc 	bl	800b508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	f003 0320 	and.w	r3, r3, #32
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	d10e      	bne.n	800b33c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	f003 0320 	and.w	r3, r3, #32
 800b328:	2b20      	cmp	r3, #32
 800b32a:	d107      	bne.n	800b33c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f06f 0220 	mvn.w	r2, #32
 800b334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa6c 	bl	800b814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d101      	bne.n	800b360 <HAL_TIM_ConfigClockSource+0x1c>
 800b35c:	2302      	movs	r3, #2
 800b35e:	e0b4      	b.n	800b4ca <HAL_TIM_ConfigClockSource+0x186>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2202      	movs	r2, #2
 800b36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b37e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b398:	d03e      	beq.n	800b418 <HAL_TIM_ConfigClockSource+0xd4>
 800b39a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b39e:	f200 8087 	bhi.w	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 800b3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3a6:	f000 8086 	beq.w	800b4b6 <HAL_TIM_ConfigClockSource+0x172>
 800b3aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ae:	d87f      	bhi.n	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b0:	2b70      	cmp	r3, #112	; 0x70
 800b3b2:	d01a      	beq.n	800b3ea <HAL_TIM_ConfigClockSource+0xa6>
 800b3b4:	2b70      	cmp	r3, #112	; 0x70
 800b3b6:	d87b      	bhi.n	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b8:	2b60      	cmp	r3, #96	; 0x60
 800b3ba:	d050      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0x11a>
 800b3bc:	2b60      	cmp	r3, #96	; 0x60
 800b3be:	d877      	bhi.n	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c0:	2b50      	cmp	r3, #80	; 0x50
 800b3c2:	d03c      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0xfa>
 800b3c4:	2b50      	cmp	r3, #80	; 0x50
 800b3c6:	d873      	bhi.n	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c8:	2b40      	cmp	r3, #64	; 0x40
 800b3ca:	d058      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x13a>
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
 800b3ce:	d86f      	bhi.n	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 800b3d0:	2b30      	cmp	r3, #48	; 0x30
 800b3d2:	d064      	beq.n	800b49e <HAL_TIM_ConfigClockSource+0x15a>
 800b3d4:	2b30      	cmp	r3, #48	; 0x30
 800b3d6:	d86b      	bhi.n	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 800b3d8:	2b20      	cmp	r3, #32
 800b3da:	d060      	beq.n	800b49e <HAL_TIM_ConfigClockSource+0x15a>
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	d867      	bhi.n	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d05c      	beq.n	800b49e <HAL_TIM_ConfigClockSource+0x15a>
 800b3e4:	2b10      	cmp	r3, #16
 800b3e6:	d05a      	beq.n	800b49e <HAL_TIM_ConfigClockSource+0x15a>
 800b3e8:	e062      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3fa:	f000 f980 	bl	800b6fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b40c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	609a      	str	r2, [r3, #8]
      break;
 800b416:	e04f      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b428:	f000 f969 	bl	800b6fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	689a      	ldr	r2, [r3, #8]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b43a:	609a      	str	r2, [r3, #8]
      break;
 800b43c:	e03c      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b44a:	461a      	mov	r2, r3
 800b44c:	f000 f8e0 	bl	800b610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2150      	movs	r1, #80	; 0x50
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f937 	bl	800b6ca <TIM_ITRx_SetConfig>
      break;
 800b45c:	e02c      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b46a:	461a      	mov	r2, r3
 800b46c:	f000 f8fe 	bl	800b66c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2160      	movs	r1, #96	; 0x60
 800b476:	4618      	mov	r0, r3
 800b478:	f000 f927 	bl	800b6ca <TIM_ITRx_SetConfig>
      break;
 800b47c:	e01c      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b48a:	461a      	mov	r2, r3
 800b48c:	f000 f8c0 	bl	800b610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2140      	movs	r1, #64	; 0x40
 800b496:	4618      	mov	r0, r3
 800b498:	f000 f917 	bl	800b6ca <TIM_ITRx_SetConfig>
      break;
 800b49c:	e00c      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	f000 f90e 	bl	800b6ca <TIM_ITRx_SetConfig>
      break;
 800b4ae:	e003      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b4b4:	e000      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b4b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4da:	bf00      	nop
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bc80      	pop	{r7}
 800b4e2:	4770      	bx	lr

0800b4e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bc80      	pop	{r7}
 800b4f4:	4770      	bx	lr

0800b4f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4fe:	bf00      	nop
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	bc80      	pop	{r7}
 800b506:	4770      	bx	lr

0800b508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	bc80      	pop	{r7}
 800b518:	4770      	bx	lr
	...

0800b51c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a33      	ldr	r2, [pc, #204]	; (800b5fc <TIM_Base_SetConfig+0xe0>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d013      	beq.n	800b55c <TIM_Base_SetConfig+0x40>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a32      	ldr	r2, [pc, #200]	; (800b600 <TIM_Base_SetConfig+0xe4>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d00f      	beq.n	800b55c <TIM_Base_SetConfig+0x40>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b542:	d00b      	beq.n	800b55c <TIM_Base_SetConfig+0x40>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a2f      	ldr	r2, [pc, #188]	; (800b604 <TIM_Base_SetConfig+0xe8>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d007      	beq.n	800b55c <TIM_Base_SetConfig+0x40>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a2e      	ldr	r2, [pc, #184]	; (800b608 <TIM_Base_SetConfig+0xec>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d003      	beq.n	800b55c <TIM_Base_SetConfig+0x40>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a2d      	ldr	r2, [pc, #180]	; (800b60c <TIM_Base_SetConfig+0xf0>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d108      	bne.n	800b56e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a22      	ldr	r2, [pc, #136]	; (800b5fc <TIM_Base_SetConfig+0xe0>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d013      	beq.n	800b59e <TIM_Base_SetConfig+0x82>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4a21      	ldr	r2, [pc, #132]	; (800b600 <TIM_Base_SetConfig+0xe4>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d00f      	beq.n	800b59e <TIM_Base_SetConfig+0x82>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b584:	d00b      	beq.n	800b59e <TIM_Base_SetConfig+0x82>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a1e      	ldr	r2, [pc, #120]	; (800b604 <TIM_Base_SetConfig+0xe8>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d007      	beq.n	800b59e <TIM_Base_SetConfig+0x82>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a1d      	ldr	r2, [pc, #116]	; (800b608 <TIM_Base_SetConfig+0xec>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d003      	beq.n	800b59e <TIM_Base_SetConfig+0x82>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a1c      	ldr	r2, [pc, #112]	; (800b60c <TIM_Base_SetConfig+0xf0>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d108      	bne.n	800b5b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	689a      	ldr	r2, [r3, #8]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a09      	ldr	r2, [pc, #36]	; (800b5fc <TIM_Base_SetConfig+0xe0>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d003      	beq.n	800b5e4 <TIM_Base_SetConfig+0xc8>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a08      	ldr	r2, [pc, #32]	; (800b600 <TIM_Base_SetConfig+0xe4>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d103      	bne.n	800b5ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	691a      	ldr	r2, [r3, #16]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	615a      	str	r2, [r3, #20]
}
 800b5f2:	bf00      	nop
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bc80      	pop	{r7}
 800b5fa:	4770      	bx	lr
 800b5fc:	40012c00 	.word	0x40012c00
 800b600:	40013400 	.word	0x40013400
 800b604:	40000400 	.word	0x40000400
 800b608:	40000800 	.word	0x40000800
 800b60c:	40000c00 	.word	0x40000c00

0800b610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	f023 0201 	bic.w	r2, r3, #1
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b63a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	011b      	lsls	r3, r3, #4
 800b640:	693a      	ldr	r2, [r7, #16]
 800b642:	4313      	orrs	r3, r2
 800b644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f023 030a 	bic.w	r3, r3, #10
 800b64c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4313      	orrs	r3, r2
 800b654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	bc80      	pop	{r7}
 800b66a:	4770      	bx	lr

0800b66c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6a1b      	ldr	r3, [r3, #32]
 800b67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	f023 0210 	bic.w	r2, r3, #16
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	031b      	lsls	r3, r3, #12
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	011b      	lsls	r3, r3, #4
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	621a      	str	r2, [r3, #32]
}
 800b6c0:	bf00      	nop
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bc80      	pop	{r7}
 800b6c8:	4770      	bx	lr

0800b6ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b085      	sub	sp, #20
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	f043 0307 	orr.w	r3, r3, #7
 800b6ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	609a      	str	r2, [r3, #8]
}
 800b6f4:	bf00      	nop
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr

0800b6fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b087      	sub	sp, #28
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
 800b70a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b718:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	021a      	lsls	r2, r3, #8
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	431a      	orrs	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	4313      	orrs	r3, r2
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	4313      	orrs	r3, r2
 800b72a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	609a      	str	r2, [r3, #8]
}
 800b732:	bf00      	nop
 800b734:	371c      	adds	r7, #28
 800b736:	46bd      	mov	sp, r7
 800b738:	bc80      	pop	{r7}
 800b73a:	4770      	bx	lr

0800b73c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d101      	bne.n	800b754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b750:	2302      	movs	r3, #2
 800b752:	e050      	b.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2202      	movs	r2, #2
 800b760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4313      	orrs	r3, r2
 800b784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a1b      	ldr	r2, [pc, #108]	; (800b800 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d018      	beq.n	800b7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a19      	ldr	r2, [pc, #100]	; (800b804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d013      	beq.n	800b7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7aa:	d00e      	beq.n	800b7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a15      	ldr	r2, [pc, #84]	; (800b808 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d009      	beq.n	800b7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a14      	ldr	r2, [pc, #80]	; (800b80c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d004      	beq.n	800b7ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a12      	ldr	r2, [pc, #72]	; (800b810 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d10c      	bne.n	800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bc80      	pop	{r7}
 800b7fe:	4770      	bx	lr
 800b800:	40012c00 	.word	0x40012c00
 800b804:	40013400 	.word	0x40013400
 800b808:	40000400 	.word	0x40000400
 800b80c:	40000800 	.word	0x40000800
 800b810:	40000c00 	.word	0x40000c00

0800b814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	bc80      	pop	{r7}
 800b824:	4770      	bx	lr

0800b826 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b826:	b480      	push	{r7}
 800b828:	b083      	sub	sp, #12
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b82e:	bf00      	nop
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	bc80      	pop	{r7}
 800b836:	4770      	bx	lr

0800b838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e042      	b.n	800b8d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d106      	bne.n	800b864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7fc fe1a 	bl	8008498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2224      	movs	r2, #36	; 0x24
 800b868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b87a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fcb5 	bl	800c1ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	691a      	ldr	r2, [r3, #16]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	695a      	ldr	r2, [r3, #20]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68da      	ldr	r2, [r3, #12]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	2b20      	cmp	r3, #32
 800b8f0:	d121      	bne.n	800b936 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <HAL_UART_Transmit_IT+0x26>
 800b8f8:	88fb      	ldrh	r3, [r7, #6]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	e01a      	b.n	800b938 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	88fa      	ldrh	r2, [r7, #6]
 800b90c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	88fa      	ldrh	r2, [r7, #6]
 800b912:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2221      	movs	r2, #33	; 0x21
 800b91e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68da      	ldr	r2, [r3, #12]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b930:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	e000      	b.n	800b938 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b936:	2302      	movs	r3, #2
  }
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bc80      	pop	{r7}
 800b940:	4770      	bx	lr
	...

0800b944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b0ba      	sub	sp, #232	; 0xe8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b970:	2300      	movs	r3, #0
 800b972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b97a:	f003 030f 	and.w	r3, r3, #15
 800b97e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10f      	bne.n	800b9aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b98e:	f003 0320 	and.w	r3, r3, #32
 800b992:	2b00      	cmp	r3, #0
 800b994:	d009      	beq.n	800b9aa <HAL_UART_IRQHandler+0x66>
 800b996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b99a:	f003 0320 	and.w	r3, r3, #32
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fb63 	bl	800c06e <UART_Receive_IT>
      return;
 800b9a8:	e25b      	b.n	800be62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 80de 	beq.w	800bb70 <HAL_UART_IRQHandler+0x22c>
 800b9b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d106      	bne.n	800b9ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 80d1 	beq.w	800bb70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00b      	beq.n	800b9f2 <HAL_UART_IRQHandler+0xae>
 800b9da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d005      	beq.n	800b9f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ea:	f043 0201 	orr.w	r2, r3, #1
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b9f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9f6:	f003 0304 	and.w	r3, r3, #4
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00b      	beq.n	800ba16 <HAL_UART_IRQHandler+0xd2>
 800b9fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba02:	f003 0301 	and.w	r3, r3, #1
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d005      	beq.n	800ba16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba0e:	f043 0202 	orr.w	r2, r3, #2
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba1a:	f003 0302 	and.w	r3, r3, #2
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00b      	beq.n	800ba3a <HAL_UART_IRQHandler+0xf6>
 800ba22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba32:	f043 0204 	orr.w	r2, r3, #4
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba3e:	f003 0308 	and.w	r3, r3, #8
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d011      	beq.n	800ba6a <HAL_UART_IRQHandler+0x126>
 800ba46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba4a:	f003 0320 	and.w	r3, r3, #32
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d105      	bne.n	800ba5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba56:	f003 0301 	and.w	r3, r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d005      	beq.n	800ba6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba62:	f043 0208 	orr.w	r2, r3, #8
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 81f2 	beq.w	800be58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba78:	f003 0320 	and.w	r3, r3, #32
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d008      	beq.n	800ba92 <HAL_UART_IRQHandler+0x14e>
 800ba80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba84:	f003 0320 	and.w	r3, r3, #32
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 faee 	bl	800c06e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bf14      	ite	ne
 800baa0:	2301      	movne	r3, #1
 800baa2:	2300      	moveq	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baae:	f003 0308 	and.w	r3, r3, #8
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d103      	bne.n	800babe <HAL_UART_IRQHandler+0x17a>
 800bab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800baba:	2b00      	cmp	r3, #0
 800babc:	d04f      	beq.n	800bb5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f9f8 	bl	800beb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d041      	beq.n	800bb56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3314      	adds	r3, #20
 800bad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800badc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bae0:	e853 3f00 	ldrex	r3, [r3]
 800bae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800baec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	3314      	adds	r3, #20
 800bafa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bafe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb0e:	e841 2300 	strex	r3, r2, [r1]
 800bb12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1d9      	bne.n	800bad2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d013      	beq.n	800bb4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2a:	4a7e      	ldr	r2, [pc, #504]	; (800bd24 <HAL_UART_IRQHandler+0x3e0>)
 800bb2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fd f86c 	bl	8008c10 <HAL_DMA_Abort_IT>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d016      	beq.n	800bb6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb4c:	e00e      	b.n	800bb6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f99c 	bl	800be8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb54:	e00a      	b.n	800bb6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f998 	bl	800be8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb5c:	e006      	b.n	800bb6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f994 	bl	800be8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bb6a:	e175      	b.n	800be58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb6c:	bf00      	nop
    return;
 800bb6e:	e173      	b.n	800be58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	f040 814f 	bne.w	800be18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bb7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb7e:	f003 0310 	and.w	r3, r3, #16
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 8148 	beq.w	800be18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bb88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb8c:	f003 0310 	and.w	r3, r3, #16
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 8141 	beq.w	800be18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb96:	2300      	movs	r3, #0
 800bb98:	60bb      	str	r3, [r7, #8]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	60bb      	str	r3, [r7, #8]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	60bb      	str	r3, [r7, #8]
 800bbaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 80b6 	beq.w	800bd28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 8145 	beq.w	800be5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	f080 813e 	bcs.w	800be5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbe6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	2b20      	cmp	r3, #32
 800bbf0:	f000 8088 	beq.w	800bd04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	330c      	adds	r3, #12
 800bbfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc02:	e853 3f00 	ldrex	r3, [r3]
 800bc06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	330c      	adds	r3, #12
 800bc1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc20:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc30:	e841 2300 	strex	r3, r2, [r1]
 800bc34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1d9      	bne.n	800bbf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3314      	adds	r3, #20
 800bc46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc4a:	e853 3f00 	ldrex	r3, [r3]
 800bc4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc52:	f023 0301 	bic.w	r3, r3, #1
 800bc56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3314      	adds	r3, #20
 800bc60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc70:	e841 2300 	strex	r3, r2, [r1]
 800bc74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e1      	bne.n	800bc40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3314      	adds	r3, #20
 800bc82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc86:	e853 3f00 	ldrex	r3, [r3]
 800bc8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3314      	adds	r3, #20
 800bc9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bca0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bca6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bca8:	e841 2300 	strex	r3, r2, [r1]
 800bcac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1e3      	bne.n	800bc7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2220      	movs	r2, #32
 800bcb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	330c      	adds	r3, #12
 800bcc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bccc:	e853 3f00 	ldrex	r3, [r3]
 800bcd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcd4:	f023 0310 	bic.w	r3, r3, #16
 800bcd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	330c      	adds	r3, #12
 800bce2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bce6:	65ba      	str	r2, [r7, #88]	; 0x58
 800bce8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcee:	e841 2300 	strex	r3, r2, [r1]
 800bcf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bcf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1e3      	bne.n	800bcc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fc ff4b 	bl	8008b9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2202      	movs	r2, #2
 800bd08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f8bf 	bl	800be9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd20:	e09c      	b.n	800be5c <HAL_UART_IRQHandler+0x518>
 800bd22:	bf00      	nop
 800bd24:	0800bf79 	.word	0x0800bf79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 808e 	beq.w	800be60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 8089 	beq.w	800be60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	330c      	adds	r3, #12
 800bd54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	330c      	adds	r3, #12
 800bd6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd72:	647a      	str	r2, [r7, #68]	; 0x44
 800bd74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd7a:	e841 2300 	strex	r3, r2, [r1]
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1e3      	bne.n	800bd4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3314      	adds	r3, #20
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd90:	e853 3f00 	ldrex	r3, [r3]
 800bd94:	623b      	str	r3, [r7, #32]
   return(result);
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	f023 0301 	bic.w	r3, r3, #1
 800bd9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3314      	adds	r3, #20
 800bda6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdaa:	633a      	str	r2, [r7, #48]	; 0x30
 800bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdb2:	e841 2300 	strex	r3, r2, [r1]
 800bdb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1e3      	bne.n	800bd86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2220      	movs	r2, #32
 800bdc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	330c      	adds	r3, #12
 800bdd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	e853 3f00 	ldrex	r3, [r3]
 800bdda:	60fb      	str	r3, [r7, #12]
   return(result);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f023 0310 	bic.w	r3, r3, #16
 800bde2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	330c      	adds	r3, #12
 800bdec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bdf0:	61fa      	str	r2, [r7, #28]
 800bdf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf4:	69b9      	ldr	r1, [r7, #24]
 800bdf6:	69fa      	ldr	r2, [r7, #28]
 800bdf8:	e841 2300 	strex	r3, r2, [r1]
 800bdfc:	617b      	str	r3, [r7, #20]
   return(result);
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1e3      	bne.n	800bdcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2202      	movs	r2, #2
 800be08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f844 	bl	800be9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be16:	e023      	b.n	800be60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be20:	2b00      	cmp	r3, #0
 800be22:	d009      	beq.n	800be38 <HAL_UART_IRQHandler+0x4f4>
 800be24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f8b5 	bl	800bfa0 <UART_Transmit_IT>
    return;
 800be36:	e014      	b.n	800be62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00e      	beq.n	800be62 <HAL_UART_IRQHandler+0x51e>
 800be44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d008      	beq.n	800be62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f8f4 	bl	800c03e <UART_EndTransmit_IT>
    return;
 800be56:	e004      	b.n	800be62 <HAL_UART_IRQHandler+0x51e>
    return;
 800be58:	bf00      	nop
 800be5a:	e002      	b.n	800be62 <HAL_UART_IRQHandler+0x51e>
      return;
 800be5c:	bf00      	nop
 800be5e:	e000      	b.n	800be62 <HAL_UART_IRQHandler+0x51e>
      return;
 800be60:	bf00      	nop
  }
}
 800be62:	37e8      	adds	r7, #232	; 0xe8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	bc80      	pop	{r7}
 800be78:	4770      	bx	lr

0800be7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be7a:	b480      	push	{r7}
 800be7c:	b083      	sub	sp, #12
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be82:	bf00      	nop
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	bc80      	pop	{r7}
 800be8a:	4770      	bx	lr

0800be8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	bc80      	pop	{r7}
 800be9c:	4770      	bx	lr

0800be9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	460b      	mov	r3, r1
 800bea8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800beaa:	bf00      	nop
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	bc80      	pop	{r7}
 800beb2:	4770      	bx	lr

0800beb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b095      	sub	sp, #84	; 0x54
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	330c      	adds	r3, #12
 800bec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec6:	e853 3f00 	ldrex	r3, [r3]
 800beca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	330c      	adds	r3, #12
 800beda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bedc:	643a      	str	r2, [r7, #64]	; 0x40
 800bede:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bee4:	e841 2300 	strex	r3, r2, [r1]
 800bee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1e5      	bne.n	800bebc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3314      	adds	r3, #20
 800bef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef8:	6a3b      	ldr	r3, [r7, #32]
 800befa:	e853 3f00 	ldrex	r3, [r3]
 800befe:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	f023 0301 	bic.w	r3, r3, #1
 800bf06:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3314      	adds	r3, #20
 800bf0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf10:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf18:	e841 2300 	strex	r3, r2, [r1]
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1e5      	bne.n	800bef0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d119      	bne.n	800bf60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	330c      	adds	r3, #12
 800bf32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	e853 3f00 	ldrex	r3, [r3]
 800bf3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	f023 0310 	bic.w	r3, r3, #16
 800bf42:	647b      	str	r3, [r7, #68]	; 0x44
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	330c      	adds	r3, #12
 800bf4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf4c:	61ba      	str	r2, [r7, #24]
 800bf4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf50:	6979      	ldr	r1, [r7, #20]
 800bf52:	69ba      	ldr	r2, [r7, #24]
 800bf54:	e841 2300 	strex	r3, r2, [r1]
 800bf58:	613b      	str	r3, [r7, #16]
   return(result);
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e5      	bne.n	800bf2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2220      	movs	r2, #32
 800bf64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf6e:	bf00      	nop
 800bf70:	3754      	adds	r7, #84	; 0x54
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bc80      	pop	{r7}
 800bf76:	4770      	bx	lr

0800bf78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f7ff ff7a 	bl	800be8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf98:	bf00      	nop
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b21      	cmp	r3, #33	; 0x21
 800bfb2:	d13e      	bne.n	800c032 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfbc:	d114      	bne.n	800bfe8 <UART_Transmit_IT+0x48>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d110      	bne.n	800bfe8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a1b      	ldr	r3, [r3, #32]
 800bfe0:	1c9a      	adds	r2, r3, #2
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	621a      	str	r2, [r3, #32]
 800bfe6:	e008      	b.n	800bffa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a1b      	ldr	r3, [r3, #32]
 800bfec:	1c59      	adds	r1, r3, #1
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	6211      	str	r1, [r2, #32]
 800bff2:	781a      	ldrb	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bffe:	b29b      	uxth	r3, r3
 800c000:	3b01      	subs	r3, #1
 800c002:	b29b      	uxth	r3, r3
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	4619      	mov	r1, r3
 800c008:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10f      	bne.n	800c02e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c01c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68da      	ldr	r2, [r3, #12]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c02c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	e000      	b.n	800c034 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c032:	2302      	movs	r3, #2
  }
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	bc80      	pop	{r7}
 800c03c:	4770      	bx	lr

0800c03e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68da      	ldr	r2, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c054:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2220      	movs	r2, #32
 800c05a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff ff02 	bl	800be68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b08c      	sub	sp, #48	; 0x30
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b22      	cmp	r3, #34	; 0x22
 800c080:	f040 80ae 	bne.w	800c1e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c08c:	d117      	bne.n	800c0be <UART_Receive_IT+0x50>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d113      	bne.n	800c0be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c096:	2300      	movs	r3, #0
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b6:	1c9a      	adds	r2, r3, #2
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	629a      	str	r2, [r3, #40]	; 0x28
 800c0bc:	e026      	b.n	800c10c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d0:	d007      	beq.n	800c0e2 <UART_Receive_IT+0x74>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <UART_Receive_IT+0x82>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	701a      	strb	r2, [r3, #0]
 800c0ee:	e008      	b.n	800c102 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0fc:	b2da      	uxtb	r2, r3
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c110:	b29b      	uxth	r3, r3
 800c112:	3b01      	subs	r3, #1
 800c114:	b29b      	uxth	r3, r3
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	4619      	mov	r1, r3
 800c11a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d15d      	bne.n	800c1dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68da      	ldr	r2, [r3, #12]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f022 0220 	bic.w	r2, r2, #32
 800c12e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c13e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	695a      	ldr	r2, [r3, #20]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f022 0201 	bic.w	r2, r2, #1
 800c14e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2220      	movs	r2, #32
 800c154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c162:	2b01      	cmp	r3, #1
 800c164:	d135      	bne.n	800c1d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	330c      	adds	r3, #12
 800c172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	e853 3f00 	ldrex	r3, [r3]
 800c17a:	613b      	str	r3, [r7, #16]
   return(result);
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	f023 0310 	bic.w	r3, r3, #16
 800c182:	627b      	str	r3, [r7, #36]	; 0x24
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	330c      	adds	r3, #12
 800c18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c18c:	623a      	str	r2, [r7, #32]
 800c18e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c190:	69f9      	ldr	r1, [r7, #28]
 800c192:	6a3a      	ldr	r2, [r7, #32]
 800c194:	e841 2300 	strex	r3, r2, [r1]
 800c198:	61bb      	str	r3, [r7, #24]
   return(result);
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e5      	bne.n	800c16c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0310 	and.w	r3, r3, #16
 800c1aa:	2b10      	cmp	r3, #16
 800c1ac:	d10a      	bne.n	800c1c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60fb      	str	r3, [r7, #12]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	60fb      	str	r3, [r7, #12]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff fe67 	bl	800be9e <HAL_UARTEx_RxEventCallback>
 800c1d0:	e002      	b.n	800c1d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7ff fe51 	bl	800be7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	e002      	b.n	800c1e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e000      	b.n	800c1e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c1e0:	2302      	movs	r3, #2
  }
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3730      	adds	r7, #48	; 0x30
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68da      	ldr	r2, [r3, #12]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	689a      	ldr	r2, [r3, #8]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	431a      	orrs	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	695b      	ldr	r3, [r3, #20]
 800c218:	4313      	orrs	r3, r2
 800c21a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c226:	f023 030c 	bic.w	r3, r3, #12
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	6812      	ldr	r2, [r2, #0]
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	430b      	orrs	r3, r1
 800c232:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a2c      	ldr	r2, [pc, #176]	; (800c300 <UART_SetConfig+0x114>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d103      	bne.n	800c25c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c254:	f7fe fe8c 	bl	800af70 <HAL_RCC_GetPCLK2Freq>
 800c258:	60f8      	str	r0, [r7, #12]
 800c25a:	e002      	b.n	800c262 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c25c:	f7fe fe74 	bl	800af48 <HAL_RCC_GetPCLK1Freq>
 800c260:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	4613      	mov	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4413      	add	r3, r2
 800c26a:	009a      	lsls	r2, r3, #2
 800c26c:	441a      	add	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	fbb2 f3f3 	udiv	r3, r2, r3
 800c278:	4a22      	ldr	r2, [pc, #136]	; (800c304 <UART_SetConfig+0x118>)
 800c27a:	fba2 2303 	umull	r2, r3, r2, r3
 800c27e:	095b      	lsrs	r3, r3, #5
 800c280:	0119      	lsls	r1, r3, #4
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	4613      	mov	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	009a      	lsls	r2, r3, #2
 800c28c:	441a      	add	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	fbb2 f2f3 	udiv	r2, r2, r3
 800c298:	4b1a      	ldr	r3, [pc, #104]	; (800c304 <UART_SetConfig+0x118>)
 800c29a:	fba3 0302 	umull	r0, r3, r3, r2
 800c29e:	095b      	lsrs	r3, r3, #5
 800c2a0:	2064      	movs	r0, #100	; 0x64
 800c2a2:	fb00 f303 	mul.w	r3, r0, r3
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	011b      	lsls	r3, r3, #4
 800c2aa:	3332      	adds	r3, #50	; 0x32
 800c2ac:	4a15      	ldr	r2, [pc, #84]	; (800c304 <UART_SetConfig+0x118>)
 800c2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b2:	095b      	lsrs	r3, r3, #5
 800c2b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2b8:	4419      	add	r1, r3
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009a      	lsls	r2, r3, #2
 800c2c4:	441a      	add	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2d0:	4b0c      	ldr	r3, [pc, #48]	; (800c304 <UART_SetConfig+0x118>)
 800c2d2:	fba3 0302 	umull	r0, r3, r3, r2
 800c2d6:	095b      	lsrs	r3, r3, #5
 800c2d8:	2064      	movs	r0, #100	; 0x64
 800c2da:	fb00 f303 	mul.w	r3, r0, r3
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	011b      	lsls	r3, r3, #4
 800c2e2:	3332      	adds	r3, #50	; 0x32
 800c2e4:	4a07      	ldr	r2, [pc, #28]	; (800c304 <UART_SetConfig+0x118>)
 800c2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ea:	095b      	lsrs	r3, r3, #5
 800c2ec:	f003 020f 	and.w	r2, r3, #15
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	440a      	add	r2, r1
 800c2f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c2f8:	bf00      	nop
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	40013800 	.word	0x40013800
 800c304:	51eb851f 	.word	0x51eb851f

0800c308 <__itoa>:
 800c308:	1e93      	subs	r3, r2, #2
 800c30a:	2b22      	cmp	r3, #34	; 0x22
 800c30c:	b510      	push	{r4, lr}
 800c30e:	460c      	mov	r4, r1
 800c310:	d904      	bls.n	800c31c <__itoa+0x14>
 800c312:	2300      	movs	r3, #0
 800c314:	461c      	mov	r4, r3
 800c316:	700b      	strb	r3, [r1, #0]
 800c318:	4620      	mov	r0, r4
 800c31a:	bd10      	pop	{r4, pc}
 800c31c:	2a0a      	cmp	r2, #10
 800c31e:	d109      	bne.n	800c334 <__itoa+0x2c>
 800c320:	2800      	cmp	r0, #0
 800c322:	da07      	bge.n	800c334 <__itoa+0x2c>
 800c324:	232d      	movs	r3, #45	; 0x2d
 800c326:	700b      	strb	r3, [r1, #0]
 800c328:	2101      	movs	r1, #1
 800c32a:	4240      	negs	r0, r0
 800c32c:	4421      	add	r1, r4
 800c32e:	f000 f8d9 	bl	800c4e4 <__utoa>
 800c332:	e7f1      	b.n	800c318 <__itoa+0x10>
 800c334:	2100      	movs	r1, #0
 800c336:	e7f9      	b.n	800c32c <__itoa+0x24>

0800c338 <itoa>:
 800c338:	f7ff bfe6 	b.w	800c308 <__itoa>

0800c33c <malloc>:
 800c33c:	4b02      	ldr	r3, [pc, #8]	; (800c348 <malloc+0xc>)
 800c33e:	4601      	mov	r1, r0
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	f000 b823 	b.w	800c38c <_malloc_r>
 800c346:	bf00      	nop
 800c348:	200000fc 	.word	0x200000fc

0800c34c <sbrk_aligned>:
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	4e0e      	ldr	r6, [pc, #56]	; (800c388 <sbrk_aligned+0x3c>)
 800c350:	460c      	mov	r4, r1
 800c352:	6831      	ldr	r1, [r6, #0]
 800c354:	4605      	mov	r5, r0
 800c356:	b911      	cbnz	r1, 800c35e <sbrk_aligned+0x12>
 800c358:	f000 f91e 	bl	800c598 <_sbrk_r>
 800c35c:	6030      	str	r0, [r6, #0]
 800c35e:	4621      	mov	r1, r4
 800c360:	4628      	mov	r0, r5
 800c362:	f000 f919 	bl	800c598 <_sbrk_r>
 800c366:	1c43      	adds	r3, r0, #1
 800c368:	d00a      	beq.n	800c380 <sbrk_aligned+0x34>
 800c36a:	1cc4      	adds	r4, r0, #3
 800c36c:	f024 0403 	bic.w	r4, r4, #3
 800c370:	42a0      	cmp	r0, r4
 800c372:	d007      	beq.n	800c384 <sbrk_aligned+0x38>
 800c374:	1a21      	subs	r1, r4, r0
 800c376:	4628      	mov	r0, r5
 800c378:	f000 f90e 	bl	800c598 <_sbrk_r>
 800c37c:	3001      	adds	r0, #1
 800c37e:	d101      	bne.n	800c384 <sbrk_aligned+0x38>
 800c380:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c384:	4620      	mov	r0, r4
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	20000464 	.word	0x20000464

0800c38c <_malloc_r>:
 800c38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c390:	1ccd      	adds	r5, r1, #3
 800c392:	f025 0503 	bic.w	r5, r5, #3
 800c396:	3508      	adds	r5, #8
 800c398:	2d0c      	cmp	r5, #12
 800c39a:	bf38      	it	cc
 800c39c:	250c      	movcc	r5, #12
 800c39e:	2d00      	cmp	r5, #0
 800c3a0:	4607      	mov	r7, r0
 800c3a2:	db01      	blt.n	800c3a8 <_malloc_r+0x1c>
 800c3a4:	42a9      	cmp	r1, r5
 800c3a6:	d905      	bls.n	800c3b4 <_malloc_r+0x28>
 800c3a8:	230c      	movs	r3, #12
 800c3aa:	2600      	movs	r6, #0
 800c3ac:	603b      	str	r3, [r7, #0]
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c488 <_malloc_r+0xfc>
 800c3b8:	f000 f868 	bl	800c48c <__malloc_lock>
 800c3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c3c0:	461c      	mov	r4, r3
 800c3c2:	bb5c      	cbnz	r4, 800c41c <_malloc_r+0x90>
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	f7ff ffc0 	bl	800c34c <sbrk_aligned>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	d155      	bne.n	800c47e <_malloc_r+0xf2>
 800c3d2:	f8d8 4000 	ldr.w	r4, [r8]
 800c3d6:	4626      	mov	r6, r4
 800c3d8:	2e00      	cmp	r6, #0
 800c3da:	d145      	bne.n	800c468 <_malloc_r+0xdc>
 800c3dc:	2c00      	cmp	r4, #0
 800c3de:	d048      	beq.n	800c472 <_malloc_r+0xe6>
 800c3e0:	6823      	ldr	r3, [r4, #0]
 800c3e2:	4631      	mov	r1, r6
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	eb04 0903 	add.w	r9, r4, r3
 800c3ea:	f000 f8d5 	bl	800c598 <_sbrk_r>
 800c3ee:	4581      	cmp	r9, r0
 800c3f0:	d13f      	bne.n	800c472 <_malloc_r+0xe6>
 800c3f2:	6821      	ldr	r1, [r4, #0]
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	1a6d      	subs	r5, r5, r1
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f7ff ffa7 	bl	800c34c <sbrk_aligned>
 800c3fe:	3001      	adds	r0, #1
 800c400:	d037      	beq.n	800c472 <_malloc_r+0xe6>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	442b      	add	r3, r5
 800c406:	6023      	str	r3, [r4, #0]
 800c408:	f8d8 3000 	ldr.w	r3, [r8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d038      	beq.n	800c482 <_malloc_r+0xf6>
 800c410:	685a      	ldr	r2, [r3, #4]
 800c412:	42a2      	cmp	r2, r4
 800c414:	d12b      	bne.n	800c46e <_malloc_r+0xe2>
 800c416:	2200      	movs	r2, #0
 800c418:	605a      	str	r2, [r3, #4]
 800c41a:	e00f      	b.n	800c43c <_malloc_r+0xb0>
 800c41c:	6822      	ldr	r2, [r4, #0]
 800c41e:	1b52      	subs	r2, r2, r5
 800c420:	d41f      	bmi.n	800c462 <_malloc_r+0xd6>
 800c422:	2a0b      	cmp	r2, #11
 800c424:	d917      	bls.n	800c456 <_malloc_r+0xca>
 800c426:	1961      	adds	r1, r4, r5
 800c428:	42a3      	cmp	r3, r4
 800c42a:	6025      	str	r5, [r4, #0]
 800c42c:	bf18      	it	ne
 800c42e:	6059      	strne	r1, [r3, #4]
 800c430:	6863      	ldr	r3, [r4, #4]
 800c432:	bf08      	it	eq
 800c434:	f8c8 1000 	streq.w	r1, [r8]
 800c438:	5162      	str	r2, [r4, r5]
 800c43a:	604b      	str	r3, [r1, #4]
 800c43c:	4638      	mov	r0, r7
 800c43e:	f104 060b 	add.w	r6, r4, #11
 800c442:	f000 f829 	bl	800c498 <__malloc_unlock>
 800c446:	f026 0607 	bic.w	r6, r6, #7
 800c44a:	1d23      	adds	r3, r4, #4
 800c44c:	1af2      	subs	r2, r6, r3
 800c44e:	d0ae      	beq.n	800c3ae <_malloc_r+0x22>
 800c450:	1b9b      	subs	r3, r3, r6
 800c452:	50a3      	str	r3, [r4, r2]
 800c454:	e7ab      	b.n	800c3ae <_malloc_r+0x22>
 800c456:	42a3      	cmp	r3, r4
 800c458:	6862      	ldr	r2, [r4, #4]
 800c45a:	d1dd      	bne.n	800c418 <_malloc_r+0x8c>
 800c45c:	f8c8 2000 	str.w	r2, [r8]
 800c460:	e7ec      	b.n	800c43c <_malloc_r+0xb0>
 800c462:	4623      	mov	r3, r4
 800c464:	6864      	ldr	r4, [r4, #4]
 800c466:	e7ac      	b.n	800c3c2 <_malloc_r+0x36>
 800c468:	4634      	mov	r4, r6
 800c46a:	6876      	ldr	r6, [r6, #4]
 800c46c:	e7b4      	b.n	800c3d8 <_malloc_r+0x4c>
 800c46e:	4613      	mov	r3, r2
 800c470:	e7cc      	b.n	800c40c <_malloc_r+0x80>
 800c472:	230c      	movs	r3, #12
 800c474:	4638      	mov	r0, r7
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	f000 f80e 	bl	800c498 <__malloc_unlock>
 800c47c:	e797      	b.n	800c3ae <_malloc_r+0x22>
 800c47e:	6025      	str	r5, [r4, #0]
 800c480:	e7dc      	b.n	800c43c <_malloc_r+0xb0>
 800c482:	605b      	str	r3, [r3, #4]
 800c484:	deff      	udf	#255	; 0xff
 800c486:	bf00      	nop
 800c488:	20000460 	.word	0x20000460

0800c48c <__malloc_lock>:
 800c48c:	4801      	ldr	r0, [pc, #4]	; (800c494 <__malloc_lock+0x8>)
 800c48e:	f000 b8bd 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800c492:	bf00      	nop
 800c494:	200005a0 	.word	0x200005a0

0800c498 <__malloc_unlock>:
 800c498:	4801      	ldr	r0, [pc, #4]	; (800c4a0 <__malloc_unlock+0x8>)
 800c49a:	f000 b8b8 	b.w	800c60e <__retarget_lock_release_recursive>
 800c49e:	bf00      	nop
 800c4a0:	200005a0 	.word	0x200005a0

0800c4a4 <siprintf>:
 800c4a4:	b40e      	push	{r1, r2, r3}
 800c4a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4aa:	b500      	push	{lr}
 800c4ac:	b09c      	sub	sp, #112	; 0x70
 800c4ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c4b0:	9002      	str	r0, [sp, #8]
 800c4b2:	9006      	str	r0, [sp, #24]
 800c4b4:	9107      	str	r1, [sp, #28]
 800c4b6:	9104      	str	r1, [sp, #16]
 800c4b8:	4808      	ldr	r0, [pc, #32]	; (800c4dc <siprintf+0x38>)
 800c4ba:	4909      	ldr	r1, [pc, #36]	; (800c4e0 <siprintf+0x3c>)
 800c4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c0:	9105      	str	r1, [sp, #20]
 800c4c2:	6800      	ldr	r0, [r0, #0]
 800c4c4:	a902      	add	r1, sp, #8
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	f000 f94c 	bl	800c764 <_svfiprintf_r>
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	9b02      	ldr	r3, [sp, #8]
 800c4d0:	701a      	strb	r2, [r3, #0]
 800c4d2:	b01c      	add	sp, #112	; 0x70
 800c4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4d8:	b003      	add	sp, #12
 800c4da:	4770      	bx	lr
 800c4dc:	200000fc 	.word	0x200000fc
 800c4e0:	ffff0208 	.word	0xffff0208

0800c4e4 <__utoa>:
 800c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e6:	b08b      	sub	sp, #44	; 0x2c
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	466e      	mov	r6, sp
 800c4ee:	4c1d      	ldr	r4, [pc, #116]	; (800c564 <__utoa+0x80>)
 800c4f0:	f104 0c20 	add.w	ip, r4, #32
 800c4f4:	4637      	mov	r7, r6
 800c4f6:	6820      	ldr	r0, [r4, #0]
 800c4f8:	6861      	ldr	r1, [r4, #4]
 800c4fa:	3408      	adds	r4, #8
 800c4fc:	c703      	stmia	r7!, {r0, r1}
 800c4fe:	4564      	cmp	r4, ip
 800c500:	463e      	mov	r6, r7
 800c502:	d1f7      	bne.n	800c4f4 <__utoa+0x10>
 800c504:	7921      	ldrb	r1, [r4, #4]
 800c506:	6820      	ldr	r0, [r4, #0]
 800c508:	7139      	strb	r1, [r7, #4]
 800c50a:	1e91      	subs	r1, r2, #2
 800c50c:	2922      	cmp	r1, #34	; 0x22
 800c50e:	6038      	str	r0, [r7, #0]
 800c510:	f04f 0100 	mov.w	r1, #0
 800c514:	d904      	bls.n	800c520 <__utoa+0x3c>
 800c516:	7019      	strb	r1, [r3, #0]
 800c518:	460b      	mov	r3, r1
 800c51a:	4618      	mov	r0, r3
 800c51c:	b00b      	add	sp, #44	; 0x2c
 800c51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c520:	1e58      	subs	r0, r3, #1
 800c522:	4684      	mov	ip, r0
 800c524:	fbb5 f7f2 	udiv	r7, r5, r2
 800c528:	fb02 5617 	mls	r6, r2, r7, r5
 800c52c:	3628      	adds	r6, #40	; 0x28
 800c52e:	446e      	add	r6, sp
 800c530:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c534:	460c      	mov	r4, r1
 800c536:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c53a:	462e      	mov	r6, r5
 800c53c:	42b2      	cmp	r2, r6
 800c53e:	463d      	mov	r5, r7
 800c540:	f101 0101 	add.w	r1, r1, #1
 800c544:	d9ee      	bls.n	800c524 <__utoa+0x40>
 800c546:	2200      	movs	r2, #0
 800c548:	545a      	strb	r2, [r3, r1]
 800c54a:	1919      	adds	r1, r3, r4
 800c54c:	1aa5      	subs	r5, r4, r2
 800c54e:	42aa      	cmp	r2, r5
 800c550:	dae3      	bge.n	800c51a <__utoa+0x36>
 800c552:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c556:	780e      	ldrb	r6, [r1, #0]
 800c558:	3201      	adds	r2, #1
 800c55a:	7006      	strb	r6, [r0, #0]
 800c55c:	f801 5901 	strb.w	r5, [r1], #-1
 800c560:	e7f4      	b.n	800c54c <__utoa+0x68>
 800c562:	bf00      	nop
 800c564:	0800dc92 	.word	0x0800dc92

0800c568 <strcat>:
 800c568:	4602      	mov	r2, r0
 800c56a:	b510      	push	{r4, lr}
 800c56c:	7814      	ldrb	r4, [r2, #0]
 800c56e:	4613      	mov	r3, r2
 800c570:	3201      	adds	r2, #1
 800c572:	2c00      	cmp	r4, #0
 800c574:	d1fa      	bne.n	800c56c <strcat+0x4>
 800c576:	3b01      	subs	r3, #1
 800c578:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c57c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c580:	2a00      	cmp	r2, #0
 800c582:	d1f9      	bne.n	800c578 <strcat+0x10>
 800c584:	bd10      	pop	{r4, pc}

0800c586 <memset>:
 800c586:	4603      	mov	r3, r0
 800c588:	4402      	add	r2, r0
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d100      	bne.n	800c590 <memset+0xa>
 800c58e:	4770      	bx	lr
 800c590:	f803 1b01 	strb.w	r1, [r3], #1
 800c594:	e7f9      	b.n	800c58a <memset+0x4>
	...

0800c598 <_sbrk_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	2300      	movs	r3, #0
 800c59c:	4d05      	ldr	r5, [pc, #20]	; (800c5b4 <_sbrk_r+0x1c>)
 800c59e:	4604      	mov	r4, r0
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	602b      	str	r3, [r5, #0]
 800c5a4:	f7fc f808 	bl	80085b8 <_sbrk>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_sbrk_r+0x1a>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_sbrk_r+0x1a>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	200005a4 	.word	0x200005a4

0800c5b8 <__errno>:
 800c5b8:	4b01      	ldr	r3, [pc, #4]	; (800c5c0 <__errno+0x8>)
 800c5ba:	6818      	ldr	r0, [r3, #0]
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	200000fc 	.word	0x200000fc

0800c5c4 <__libc_init_array>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	2600      	movs	r6, #0
 800c5c8:	4d0c      	ldr	r5, [pc, #48]	; (800c5fc <__libc_init_array+0x38>)
 800c5ca:	4c0d      	ldr	r4, [pc, #52]	; (800c600 <__libc_init_array+0x3c>)
 800c5cc:	1b64      	subs	r4, r4, r5
 800c5ce:	10a4      	asrs	r4, r4, #2
 800c5d0:	42a6      	cmp	r6, r4
 800c5d2:	d109      	bne.n	800c5e8 <__libc_init_array+0x24>
 800c5d4:	f000 fbc6 	bl	800cd64 <_init>
 800c5d8:	2600      	movs	r6, #0
 800c5da:	4d0a      	ldr	r5, [pc, #40]	; (800c604 <__libc_init_array+0x40>)
 800c5dc:	4c0a      	ldr	r4, [pc, #40]	; (800c608 <__libc_init_array+0x44>)
 800c5de:	1b64      	subs	r4, r4, r5
 800c5e0:	10a4      	asrs	r4, r4, #2
 800c5e2:	42a6      	cmp	r6, r4
 800c5e4:	d105      	bne.n	800c5f2 <__libc_init_array+0x2e>
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}
 800c5e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ec:	4798      	blx	r3
 800c5ee:	3601      	adds	r6, #1
 800c5f0:	e7ee      	b.n	800c5d0 <__libc_init_array+0xc>
 800c5f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5f6:	4798      	blx	r3
 800c5f8:	3601      	adds	r6, #1
 800c5fa:	e7f2      	b.n	800c5e2 <__libc_init_array+0x1e>
 800c5fc:	0800dcec 	.word	0x0800dcec
 800c600:	0800dcec 	.word	0x0800dcec
 800c604:	0800dcec 	.word	0x0800dcec
 800c608:	0800dcf0 	.word	0x0800dcf0

0800c60c <__retarget_lock_acquire_recursive>:
 800c60c:	4770      	bx	lr

0800c60e <__retarget_lock_release_recursive>:
 800c60e:	4770      	bx	lr

0800c610 <strcpy>:
 800c610:	4603      	mov	r3, r0
 800c612:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c616:	f803 2b01 	strb.w	r2, [r3], #1
 800c61a:	2a00      	cmp	r2, #0
 800c61c:	d1f9      	bne.n	800c612 <strcpy+0x2>
 800c61e:	4770      	bx	lr

0800c620 <_free_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4605      	mov	r5, r0
 800c624:	2900      	cmp	r1, #0
 800c626:	d040      	beq.n	800c6aa <_free_r+0x8a>
 800c628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62c:	1f0c      	subs	r4, r1, #4
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bfb8      	it	lt
 800c632:	18e4      	addlt	r4, r4, r3
 800c634:	f7ff ff2a 	bl	800c48c <__malloc_lock>
 800c638:	4a1c      	ldr	r2, [pc, #112]	; (800c6ac <_free_r+0x8c>)
 800c63a:	6813      	ldr	r3, [r2, #0]
 800c63c:	b933      	cbnz	r3, 800c64c <_free_r+0x2c>
 800c63e:	6063      	str	r3, [r4, #4]
 800c640:	6014      	str	r4, [r2, #0]
 800c642:	4628      	mov	r0, r5
 800c644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c648:	f7ff bf26 	b.w	800c498 <__malloc_unlock>
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	d908      	bls.n	800c662 <_free_r+0x42>
 800c650:	6820      	ldr	r0, [r4, #0]
 800c652:	1821      	adds	r1, r4, r0
 800c654:	428b      	cmp	r3, r1
 800c656:	bf01      	itttt	eq
 800c658:	6819      	ldreq	r1, [r3, #0]
 800c65a:	685b      	ldreq	r3, [r3, #4]
 800c65c:	1809      	addeq	r1, r1, r0
 800c65e:	6021      	streq	r1, [r4, #0]
 800c660:	e7ed      	b.n	800c63e <_free_r+0x1e>
 800c662:	461a      	mov	r2, r3
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	b10b      	cbz	r3, 800c66c <_free_r+0x4c>
 800c668:	42a3      	cmp	r3, r4
 800c66a:	d9fa      	bls.n	800c662 <_free_r+0x42>
 800c66c:	6811      	ldr	r1, [r2, #0]
 800c66e:	1850      	adds	r0, r2, r1
 800c670:	42a0      	cmp	r0, r4
 800c672:	d10b      	bne.n	800c68c <_free_r+0x6c>
 800c674:	6820      	ldr	r0, [r4, #0]
 800c676:	4401      	add	r1, r0
 800c678:	1850      	adds	r0, r2, r1
 800c67a:	4283      	cmp	r3, r0
 800c67c:	6011      	str	r1, [r2, #0]
 800c67e:	d1e0      	bne.n	800c642 <_free_r+0x22>
 800c680:	6818      	ldr	r0, [r3, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	4408      	add	r0, r1
 800c686:	6010      	str	r0, [r2, #0]
 800c688:	6053      	str	r3, [r2, #4]
 800c68a:	e7da      	b.n	800c642 <_free_r+0x22>
 800c68c:	d902      	bls.n	800c694 <_free_r+0x74>
 800c68e:	230c      	movs	r3, #12
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	e7d6      	b.n	800c642 <_free_r+0x22>
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	1821      	adds	r1, r4, r0
 800c698:	428b      	cmp	r3, r1
 800c69a:	bf01      	itttt	eq
 800c69c:	6819      	ldreq	r1, [r3, #0]
 800c69e:	685b      	ldreq	r3, [r3, #4]
 800c6a0:	1809      	addeq	r1, r1, r0
 800c6a2:	6021      	streq	r1, [r4, #0]
 800c6a4:	6063      	str	r3, [r4, #4]
 800c6a6:	6054      	str	r4, [r2, #4]
 800c6a8:	e7cb      	b.n	800c642 <_free_r+0x22>
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	20000460 	.word	0x20000460

0800c6b0 <__ssputs_r>:
 800c6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b4:	461f      	mov	r7, r3
 800c6b6:	688e      	ldr	r6, [r1, #8]
 800c6b8:	4682      	mov	sl, r0
 800c6ba:	42be      	cmp	r6, r7
 800c6bc:	460c      	mov	r4, r1
 800c6be:	4690      	mov	r8, r2
 800c6c0:	680b      	ldr	r3, [r1, #0]
 800c6c2:	d82c      	bhi.n	800c71e <__ssputs_r+0x6e>
 800c6c4:	898a      	ldrh	r2, [r1, #12]
 800c6c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6ca:	d026      	beq.n	800c71a <__ssputs_r+0x6a>
 800c6cc:	6965      	ldr	r5, [r4, #20]
 800c6ce:	6909      	ldr	r1, [r1, #16]
 800c6d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6d4:	eba3 0901 	sub.w	r9, r3, r1
 800c6d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6dc:	1c7b      	adds	r3, r7, #1
 800c6de:	444b      	add	r3, r9
 800c6e0:	106d      	asrs	r5, r5, #1
 800c6e2:	429d      	cmp	r5, r3
 800c6e4:	bf38      	it	cc
 800c6e6:	461d      	movcc	r5, r3
 800c6e8:	0553      	lsls	r3, r2, #21
 800c6ea:	d527      	bpl.n	800c73c <__ssputs_r+0x8c>
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7ff fe4d 	bl	800c38c <_malloc_r>
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	b360      	cbz	r0, 800c750 <__ssputs_r+0xa0>
 800c6f6:	464a      	mov	r2, r9
 800c6f8:	6921      	ldr	r1, [r4, #16]
 800c6fa:	f000 fb1c 	bl	800cd36 <memcpy>
 800c6fe:	89a3      	ldrh	r3, [r4, #12]
 800c700:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c708:	81a3      	strh	r3, [r4, #12]
 800c70a:	6126      	str	r6, [r4, #16]
 800c70c:	444e      	add	r6, r9
 800c70e:	6026      	str	r6, [r4, #0]
 800c710:	463e      	mov	r6, r7
 800c712:	6165      	str	r5, [r4, #20]
 800c714:	eba5 0509 	sub.w	r5, r5, r9
 800c718:	60a5      	str	r5, [r4, #8]
 800c71a:	42be      	cmp	r6, r7
 800c71c:	d900      	bls.n	800c720 <__ssputs_r+0x70>
 800c71e:	463e      	mov	r6, r7
 800c720:	4632      	mov	r2, r6
 800c722:	4641      	mov	r1, r8
 800c724:	6820      	ldr	r0, [r4, #0]
 800c726:	f000 fade 	bl	800cce6 <memmove>
 800c72a:	2000      	movs	r0, #0
 800c72c:	68a3      	ldr	r3, [r4, #8]
 800c72e:	1b9b      	subs	r3, r3, r6
 800c730:	60a3      	str	r3, [r4, #8]
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	4433      	add	r3, r6
 800c736:	6023      	str	r3, [r4, #0]
 800c738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73c:	462a      	mov	r2, r5
 800c73e:	f000 faa3 	bl	800cc88 <_realloc_r>
 800c742:	4606      	mov	r6, r0
 800c744:	2800      	cmp	r0, #0
 800c746:	d1e0      	bne.n	800c70a <__ssputs_r+0x5a>
 800c748:	4650      	mov	r0, sl
 800c74a:	6921      	ldr	r1, [r4, #16]
 800c74c:	f7ff ff68 	bl	800c620 <_free_r>
 800c750:	230c      	movs	r3, #12
 800c752:	f8ca 3000 	str.w	r3, [sl]
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c760:	81a3      	strh	r3, [r4, #12]
 800c762:	e7e9      	b.n	800c738 <__ssputs_r+0x88>

0800c764 <_svfiprintf_r>:
 800c764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c768:	4698      	mov	r8, r3
 800c76a:	898b      	ldrh	r3, [r1, #12]
 800c76c:	4607      	mov	r7, r0
 800c76e:	061b      	lsls	r3, r3, #24
 800c770:	460d      	mov	r5, r1
 800c772:	4614      	mov	r4, r2
 800c774:	b09d      	sub	sp, #116	; 0x74
 800c776:	d50e      	bpl.n	800c796 <_svfiprintf_r+0x32>
 800c778:	690b      	ldr	r3, [r1, #16]
 800c77a:	b963      	cbnz	r3, 800c796 <_svfiprintf_r+0x32>
 800c77c:	2140      	movs	r1, #64	; 0x40
 800c77e:	f7ff fe05 	bl	800c38c <_malloc_r>
 800c782:	6028      	str	r0, [r5, #0]
 800c784:	6128      	str	r0, [r5, #16]
 800c786:	b920      	cbnz	r0, 800c792 <_svfiprintf_r+0x2e>
 800c788:	230c      	movs	r3, #12
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c790:	e0d0      	b.n	800c934 <_svfiprintf_r+0x1d0>
 800c792:	2340      	movs	r3, #64	; 0x40
 800c794:	616b      	str	r3, [r5, #20]
 800c796:	2300      	movs	r3, #0
 800c798:	9309      	str	r3, [sp, #36]	; 0x24
 800c79a:	2320      	movs	r3, #32
 800c79c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7a0:	2330      	movs	r3, #48	; 0x30
 800c7a2:	f04f 0901 	mov.w	r9, #1
 800c7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c94c <_svfiprintf_r+0x1e8>
 800c7ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7b2:	4623      	mov	r3, r4
 800c7b4:	469a      	mov	sl, r3
 800c7b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ba:	b10a      	cbz	r2, 800c7c0 <_svfiprintf_r+0x5c>
 800c7bc:	2a25      	cmp	r2, #37	; 0x25
 800c7be:	d1f9      	bne.n	800c7b4 <_svfiprintf_r+0x50>
 800c7c0:	ebba 0b04 	subs.w	fp, sl, r4
 800c7c4:	d00b      	beq.n	800c7de <_svfiprintf_r+0x7a>
 800c7c6:	465b      	mov	r3, fp
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f7ff ff6f 	bl	800c6b0 <__ssputs_r>
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f000 80a9 	beq.w	800c92a <_svfiprintf_r+0x1c6>
 800c7d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7da:	445a      	add	r2, fp
 800c7dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c7de:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 80a1 	beq.w	800c92a <_svfiprintf_r+0x1c6>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7f2:	f10a 0a01 	add.w	sl, sl, #1
 800c7f6:	9304      	str	r3, [sp, #16]
 800c7f8:	9307      	str	r3, [sp, #28]
 800c7fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7fe:	931a      	str	r3, [sp, #104]	; 0x68
 800c800:	4654      	mov	r4, sl
 800c802:	2205      	movs	r2, #5
 800c804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c808:	4850      	ldr	r0, [pc, #320]	; (800c94c <_svfiprintf_r+0x1e8>)
 800c80a:	f000 fa86 	bl	800cd1a <memchr>
 800c80e:	9a04      	ldr	r2, [sp, #16]
 800c810:	b9d8      	cbnz	r0, 800c84a <_svfiprintf_r+0xe6>
 800c812:	06d0      	lsls	r0, r2, #27
 800c814:	bf44      	itt	mi
 800c816:	2320      	movmi	r3, #32
 800c818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c81c:	0711      	lsls	r1, r2, #28
 800c81e:	bf44      	itt	mi
 800c820:	232b      	movmi	r3, #43	; 0x2b
 800c822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c826:	f89a 3000 	ldrb.w	r3, [sl]
 800c82a:	2b2a      	cmp	r3, #42	; 0x2a
 800c82c:	d015      	beq.n	800c85a <_svfiprintf_r+0xf6>
 800c82e:	4654      	mov	r4, sl
 800c830:	2000      	movs	r0, #0
 800c832:	f04f 0c0a 	mov.w	ip, #10
 800c836:	9a07      	ldr	r2, [sp, #28]
 800c838:	4621      	mov	r1, r4
 800c83a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c83e:	3b30      	subs	r3, #48	; 0x30
 800c840:	2b09      	cmp	r3, #9
 800c842:	d94d      	bls.n	800c8e0 <_svfiprintf_r+0x17c>
 800c844:	b1b0      	cbz	r0, 800c874 <_svfiprintf_r+0x110>
 800c846:	9207      	str	r2, [sp, #28]
 800c848:	e014      	b.n	800c874 <_svfiprintf_r+0x110>
 800c84a:	eba0 0308 	sub.w	r3, r0, r8
 800c84e:	fa09 f303 	lsl.w	r3, r9, r3
 800c852:	4313      	orrs	r3, r2
 800c854:	46a2      	mov	sl, r4
 800c856:	9304      	str	r3, [sp, #16]
 800c858:	e7d2      	b.n	800c800 <_svfiprintf_r+0x9c>
 800c85a:	9b03      	ldr	r3, [sp, #12]
 800c85c:	1d19      	adds	r1, r3, #4
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	9103      	str	r1, [sp, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	bfbb      	ittet	lt
 800c866:	425b      	neglt	r3, r3
 800c868:	f042 0202 	orrlt.w	r2, r2, #2
 800c86c:	9307      	strge	r3, [sp, #28]
 800c86e:	9307      	strlt	r3, [sp, #28]
 800c870:	bfb8      	it	lt
 800c872:	9204      	strlt	r2, [sp, #16]
 800c874:	7823      	ldrb	r3, [r4, #0]
 800c876:	2b2e      	cmp	r3, #46	; 0x2e
 800c878:	d10c      	bne.n	800c894 <_svfiprintf_r+0x130>
 800c87a:	7863      	ldrb	r3, [r4, #1]
 800c87c:	2b2a      	cmp	r3, #42	; 0x2a
 800c87e:	d134      	bne.n	800c8ea <_svfiprintf_r+0x186>
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	3402      	adds	r4, #2
 800c884:	1d1a      	adds	r2, r3, #4
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	9203      	str	r2, [sp, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	bfb8      	it	lt
 800c88e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c892:	9305      	str	r3, [sp, #20]
 800c894:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c950 <_svfiprintf_r+0x1ec>
 800c898:	2203      	movs	r2, #3
 800c89a:	4650      	mov	r0, sl
 800c89c:	7821      	ldrb	r1, [r4, #0]
 800c89e:	f000 fa3c 	bl	800cd1a <memchr>
 800c8a2:	b138      	cbz	r0, 800c8b4 <_svfiprintf_r+0x150>
 800c8a4:	2240      	movs	r2, #64	; 0x40
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	eba0 000a 	sub.w	r0, r0, sl
 800c8ac:	4082      	lsls	r2, r0
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	3401      	adds	r4, #1
 800c8b2:	9304      	str	r3, [sp, #16]
 800c8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b8:	2206      	movs	r2, #6
 800c8ba:	4826      	ldr	r0, [pc, #152]	; (800c954 <_svfiprintf_r+0x1f0>)
 800c8bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8c0:	f000 fa2b 	bl	800cd1a <memchr>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d038      	beq.n	800c93a <_svfiprintf_r+0x1d6>
 800c8c8:	4b23      	ldr	r3, [pc, #140]	; (800c958 <_svfiprintf_r+0x1f4>)
 800c8ca:	bb1b      	cbnz	r3, 800c914 <_svfiprintf_r+0x1b0>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	3307      	adds	r3, #7
 800c8d0:	f023 0307 	bic.w	r3, r3, #7
 800c8d4:	3308      	adds	r3, #8
 800c8d6:	9303      	str	r3, [sp, #12]
 800c8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8da:	4433      	add	r3, r6
 800c8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c8de:	e768      	b.n	800c7b2 <_svfiprintf_r+0x4e>
 800c8e0:	460c      	mov	r4, r1
 800c8e2:	2001      	movs	r0, #1
 800c8e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8e8:	e7a6      	b.n	800c838 <_svfiprintf_r+0xd4>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f04f 0c0a 	mov.w	ip, #10
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	3401      	adds	r4, #1
 800c8f4:	9305      	str	r3, [sp, #20]
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8fc:	3a30      	subs	r2, #48	; 0x30
 800c8fe:	2a09      	cmp	r2, #9
 800c900:	d903      	bls.n	800c90a <_svfiprintf_r+0x1a6>
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0c6      	beq.n	800c894 <_svfiprintf_r+0x130>
 800c906:	9105      	str	r1, [sp, #20]
 800c908:	e7c4      	b.n	800c894 <_svfiprintf_r+0x130>
 800c90a:	4604      	mov	r4, r0
 800c90c:	2301      	movs	r3, #1
 800c90e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c912:	e7f0      	b.n	800c8f6 <_svfiprintf_r+0x192>
 800c914:	ab03      	add	r3, sp, #12
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	462a      	mov	r2, r5
 800c91a:	4638      	mov	r0, r7
 800c91c:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <_svfiprintf_r+0x1f8>)
 800c91e:	a904      	add	r1, sp, #16
 800c920:	f3af 8000 	nop.w
 800c924:	1c42      	adds	r2, r0, #1
 800c926:	4606      	mov	r6, r0
 800c928:	d1d6      	bne.n	800c8d8 <_svfiprintf_r+0x174>
 800c92a:	89ab      	ldrh	r3, [r5, #12]
 800c92c:	065b      	lsls	r3, r3, #25
 800c92e:	f53f af2d 	bmi.w	800c78c <_svfiprintf_r+0x28>
 800c932:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c934:	b01d      	add	sp, #116	; 0x74
 800c936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93a:	ab03      	add	r3, sp, #12
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	462a      	mov	r2, r5
 800c940:	4638      	mov	r0, r7
 800c942:	4b06      	ldr	r3, [pc, #24]	; (800c95c <_svfiprintf_r+0x1f8>)
 800c944:	a904      	add	r1, sp, #16
 800c946:	f000 f87d 	bl	800ca44 <_printf_i>
 800c94a:	e7eb      	b.n	800c924 <_svfiprintf_r+0x1c0>
 800c94c:	0800dcb7 	.word	0x0800dcb7
 800c950:	0800dcbd 	.word	0x0800dcbd
 800c954:	0800dcc1 	.word	0x0800dcc1
 800c958:	00000000 	.word	0x00000000
 800c95c:	0800c6b1 	.word	0x0800c6b1

0800c960 <_printf_common>:
 800c960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c964:	4616      	mov	r6, r2
 800c966:	4699      	mov	r9, r3
 800c968:	688a      	ldr	r2, [r1, #8]
 800c96a:	690b      	ldr	r3, [r1, #16]
 800c96c:	4607      	mov	r7, r0
 800c96e:	4293      	cmp	r3, r2
 800c970:	bfb8      	it	lt
 800c972:	4613      	movlt	r3, r2
 800c974:	6033      	str	r3, [r6, #0]
 800c976:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c97a:	460c      	mov	r4, r1
 800c97c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c980:	b10a      	cbz	r2, 800c986 <_printf_common+0x26>
 800c982:	3301      	adds	r3, #1
 800c984:	6033      	str	r3, [r6, #0]
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	0699      	lsls	r1, r3, #26
 800c98a:	bf42      	ittt	mi
 800c98c:	6833      	ldrmi	r3, [r6, #0]
 800c98e:	3302      	addmi	r3, #2
 800c990:	6033      	strmi	r3, [r6, #0]
 800c992:	6825      	ldr	r5, [r4, #0]
 800c994:	f015 0506 	ands.w	r5, r5, #6
 800c998:	d106      	bne.n	800c9a8 <_printf_common+0x48>
 800c99a:	f104 0a19 	add.w	sl, r4, #25
 800c99e:	68e3      	ldr	r3, [r4, #12]
 800c9a0:	6832      	ldr	r2, [r6, #0]
 800c9a2:	1a9b      	subs	r3, r3, r2
 800c9a4:	42ab      	cmp	r3, r5
 800c9a6:	dc2b      	bgt.n	800ca00 <_printf_common+0xa0>
 800c9a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9ac:	1e13      	subs	r3, r2, #0
 800c9ae:	6822      	ldr	r2, [r4, #0]
 800c9b0:	bf18      	it	ne
 800c9b2:	2301      	movne	r3, #1
 800c9b4:	0692      	lsls	r2, r2, #26
 800c9b6:	d430      	bmi.n	800ca1a <_printf_common+0xba>
 800c9b8:	4649      	mov	r1, r9
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9c0:	47c0      	blx	r8
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	d023      	beq.n	800ca0e <_printf_common+0xae>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	6922      	ldr	r2, [r4, #16]
 800c9ca:	f003 0306 	and.w	r3, r3, #6
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	bf14      	ite	ne
 800c9d2:	2500      	movne	r5, #0
 800c9d4:	6833      	ldreq	r3, [r6, #0]
 800c9d6:	f04f 0600 	mov.w	r6, #0
 800c9da:	bf08      	it	eq
 800c9dc:	68e5      	ldreq	r5, [r4, #12]
 800c9de:	f104 041a 	add.w	r4, r4, #26
 800c9e2:	bf08      	it	eq
 800c9e4:	1aed      	subeq	r5, r5, r3
 800c9e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c9ea:	bf08      	it	eq
 800c9ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	bfc4      	itt	gt
 800c9f4:	1a9b      	subgt	r3, r3, r2
 800c9f6:	18ed      	addgt	r5, r5, r3
 800c9f8:	42b5      	cmp	r5, r6
 800c9fa:	d11a      	bne.n	800ca32 <_printf_common+0xd2>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e008      	b.n	800ca12 <_printf_common+0xb2>
 800ca00:	2301      	movs	r3, #1
 800ca02:	4652      	mov	r2, sl
 800ca04:	4649      	mov	r1, r9
 800ca06:	4638      	mov	r0, r7
 800ca08:	47c0      	blx	r8
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	d103      	bne.n	800ca16 <_printf_common+0xb6>
 800ca0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca16:	3501      	adds	r5, #1
 800ca18:	e7c1      	b.n	800c99e <_printf_common+0x3e>
 800ca1a:	2030      	movs	r0, #48	; 0x30
 800ca1c:	18e1      	adds	r1, r4, r3
 800ca1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca22:	1c5a      	adds	r2, r3, #1
 800ca24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca28:	4422      	add	r2, r4
 800ca2a:	3302      	adds	r3, #2
 800ca2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca30:	e7c2      	b.n	800c9b8 <_printf_common+0x58>
 800ca32:	2301      	movs	r3, #1
 800ca34:	4622      	mov	r2, r4
 800ca36:	4649      	mov	r1, r9
 800ca38:	4638      	mov	r0, r7
 800ca3a:	47c0      	blx	r8
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d0e6      	beq.n	800ca0e <_printf_common+0xae>
 800ca40:	3601      	adds	r6, #1
 800ca42:	e7d9      	b.n	800c9f8 <_printf_common+0x98>

0800ca44 <_printf_i>:
 800ca44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca48:	7e0f      	ldrb	r7, [r1, #24]
 800ca4a:	4691      	mov	r9, r2
 800ca4c:	2f78      	cmp	r7, #120	; 0x78
 800ca4e:	4680      	mov	r8, r0
 800ca50:	460c      	mov	r4, r1
 800ca52:	469a      	mov	sl, r3
 800ca54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca5a:	d807      	bhi.n	800ca6c <_printf_i+0x28>
 800ca5c:	2f62      	cmp	r7, #98	; 0x62
 800ca5e:	d80a      	bhi.n	800ca76 <_printf_i+0x32>
 800ca60:	2f00      	cmp	r7, #0
 800ca62:	f000 80d5 	beq.w	800cc10 <_printf_i+0x1cc>
 800ca66:	2f58      	cmp	r7, #88	; 0x58
 800ca68:	f000 80c1 	beq.w	800cbee <_printf_i+0x1aa>
 800ca6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca74:	e03a      	b.n	800caec <_printf_i+0xa8>
 800ca76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca7a:	2b15      	cmp	r3, #21
 800ca7c:	d8f6      	bhi.n	800ca6c <_printf_i+0x28>
 800ca7e:	a101      	add	r1, pc, #4	; (adr r1, 800ca84 <_printf_i+0x40>)
 800ca80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca84:	0800cadd 	.word	0x0800cadd
 800ca88:	0800caf1 	.word	0x0800caf1
 800ca8c:	0800ca6d 	.word	0x0800ca6d
 800ca90:	0800ca6d 	.word	0x0800ca6d
 800ca94:	0800ca6d 	.word	0x0800ca6d
 800ca98:	0800ca6d 	.word	0x0800ca6d
 800ca9c:	0800caf1 	.word	0x0800caf1
 800caa0:	0800ca6d 	.word	0x0800ca6d
 800caa4:	0800ca6d 	.word	0x0800ca6d
 800caa8:	0800ca6d 	.word	0x0800ca6d
 800caac:	0800ca6d 	.word	0x0800ca6d
 800cab0:	0800cbf7 	.word	0x0800cbf7
 800cab4:	0800cb1d 	.word	0x0800cb1d
 800cab8:	0800cbb1 	.word	0x0800cbb1
 800cabc:	0800ca6d 	.word	0x0800ca6d
 800cac0:	0800ca6d 	.word	0x0800ca6d
 800cac4:	0800cc19 	.word	0x0800cc19
 800cac8:	0800ca6d 	.word	0x0800ca6d
 800cacc:	0800cb1d 	.word	0x0800cb1d
 800cad0:	0800ca6d 	.word	0x0800ca6d
 800cad4:	0800ca6d 	.word	0x0800ca6d
 800cad8:	0800cbb9 	.word	0x0800cbb9
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	1d1a      	adds	r2, r3, #4
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	602a      	str	r2, [r5, #0]
 800cae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800caec:	2301      	movs	r3, #1
 800caee:	e0a0      	b.n	800cc32 <_printf_i+0x1ee>
 800caf0:	6820      	ldr	r0, [r4, #0]
 800caf2:	682b      	ldr	r3, [r5, #0]
 800caf4:	0607      	lsls	r7, r0, #24
 800caf6:	f103 0104 	add.w	r1, r3, #4
 800cafa:	6029      	str	r1, [r5, #0]
 800cafc:	d501      	bpl.n	800cb02 <_printf_i+0xbe>
 800cafe:	681e      	ldr	r6, [r3, #0]
 800cb00:	e003      	b.n	800cb0a <_printf_i+0xc6>
 800cb02:	0646      	lsls	r6, r0, #25
 800cb04:	d5fb      	bpl.n	800cafe <_printf_i+0xba>
 800cb06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb0a:	2e00      	cmp	r6, #0
 800cb0c:	da03      	bge.n	800cb16 <_printf_i+0xd2>
 800cb0e:	232d      	movs	r3, #45	; 0x2d
 800cb10:	4276      	negs	r6, r6
 800cb12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb16:	230a      	movs	r3, #10
 800cb18:	4859      	ldr	r0, [pc, #356]	; (800cc80 <_printf_i+0x23c>)
 800cb1a:	e012      	b.n	800cb42 <_printf_i+0xfe>
 800cb1c:	682b      	ldr	r3, [r5, #0]
 800cb1e:	6820      	ldr	r0, [r4, #0]
 800cb20:	1d19      	adds	r1, r3, #4
 800cb22:	6029      	str	r1, [r5, #0]
 800cb24:	0605      	lsls	r5, r0, #24
 800cb26:	d501      	bpl.n	800cb2c <_printf_i+0xe8>
 800cb28:	681e      	ldr	r6, [r3, #0]
 800cb2a:	e002      	b.n	800cb32 <_printf_i+0xee>
 800cb2c:	0641      	lsls	r1, r0, #25
 800cb2e:	d5fb      	bpl.n	800cb28 <_printf_i+0xe4>
 800cb30:	881e      	ldrh	r6, [r3, #0]
 800cb32:	2f6f      	cmp	r7, #111	; 0x6f
 800cb34:	bf0c      	ite	eq
 800cb36:	2308      	moveq	r3, #8
 800cb38:	230a      	movne	r3, #10
 800cb3a:	4851      	ldr	r0, [pc, #324]	; (800cc80 <_printf_i+0x23c>)
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb42:	6865      	ldr	r5, [r4, #4]
 800cb44:	2d00      	cmp	r5, #0
 800cb46:	bfa8      	it	ge
 800cb48:	6821      	ldrge	r1, [r4, #0]
 800cb4a:	60a5      	str	r5, [r4, #8]
 800cb4c:	bfa4      	itt	ge
 800cb4e:	f021 0104 	bicge.w	r1, r1, #4
 800cb52:	6021      	strge	r1, [r4, #0]
 800cb54:	b90e      	cbnz	r6, 800cb5a <_printf_i+0x116>
 800cb56:	2d00      	cmp	r5, #0
 800cb58:	d04b      	beq.n	800cbf2 <_printf_i+0x1ae>
 800cb5a:	4615      	mov	r5, r2
 800cb5c:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb60:	fb03 6711 	mls	r7, r3, r1, r6
 800cb64:	5dc7      	ldrb	r7, [r0, r7]
 800cb66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb6a:	4637      	mov	r7, r6
 800cb6c:	42bb      	cmp	r3, r7
 800cb6e:	460e      	mov	r6, r1
 800cb70:	d9f4      	bls.n	800cb5c <_printf_i+0x118>
 800cb72:	2b08      	cmp	r3, #8
 800cb74:	d10b      	bne.n	800cb8e <_printf_i+0x14a>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	07de      	lsls	r6, r3, #31
 800cb7a:	d508      	bpl.n	800cb8e <_printf_i+0x14a>
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	6861      	ldr	r1, [r4, #4]
 800cb80:	4299      	cmp	r1, r3
 800cb82:	bfde      	ittt	le
 800cb84:	2330      	movle	r3, #48	; 0x30
 800cb86:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb8a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cb8e:	1b52      	subs	r2, r2, r5
 800cb90:	6122      	str	r2, [r4, #16]
 800cb92:	464b      	mov	r3, r9
 800cb94:	4621      	mov	r1, r4
 800cb96:	4640      	mov	r0, r8
 800cb98:	f8cd a000 	str.w	sl, [sp]
 800cb9c:	aa03      	add	r2, sp, #12
 800cb9e:	f7ff fedf 	bl	800c960 <_printf_common>
 800cba2:	3001      	adds	r0, #1
 800cba4:	d14a      	bne.n	800cc3c <_printf_i+0x1f8>
 800cba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbaa:	b004      	add	sp, #16
 800cbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb0:	6823      	ldr	r3, [r4, #0]
 800cbb2:	f043 0320 	orr.w	r3, r3, #32
 800cbb6:	6023      	str	r3, [r4, #0]
 800cbb8:	2778      	movs	r7, #120	; 0x78
 800cbba:	4832      	ldr	r0, [pc, #200]	; (800cc84 <_printf_i+0x240>)
 800cbbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	6829      	ldr	r1, [r5, #0]
 800cbc4:	061f      	lsls	r7, r3, #24
 800cbc6:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbca:	d402      	bmi.n	800cbd2 <_printf_i+0x18e>
 800cbcc:	065f      	lsls	r7, r3, #25
 800cbce:	bf48      	it	mi
 800cbd0:	b2b6      	uxthmi	r6, r6
 800cbd2:	07df      	lsls	r7, r3, #31
 800cbd4:	bf48      	it	mi
 800cbd6:	f043 0320 	orrmi.w	r3, r3, #32
 800cbda:	6029      	str	r1, [r5, #0]
 800cbdc:	bf48      	it	mi
 800cbde:	6023      	strmi	r3, [r4, #0]
 800cbe0:	b91e      	cbnz	r6, 800cbea <_printf_i+0x1a6>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	f023 0320 	bic.w	r3, r3, #32
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	2310      	movs	r3, #16
 800cbec:	e7a6      	b.n	800cb3c <_printf_i+0xf8>
 800cbee:	4824      	ldr	r0, [pc, #144]	; (800cc80 <_printf_i+0x23c>)
 800cbf0:	e7e4      	b.n	800cbbc <_printf_i+0x178>
 800cbf2:	4615      	mov	r5, r2
 800cbf4:	e7bd      	b.n	800cb72 <_printf_i+0x12e>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	6826      	ldr	r6, [r4, #0]
 800cbfa:	1d18      	adds	r0, r3, #4
 800cbfc:	6961      	ldr	r1, [r4, #20]
 800cbfe:	6028      	str	r0, [r5, #0]
 800cc00:	0635      	lsls	r5, r6, #24
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	d501      	bpl.n	800cc0a <_printf_i+0x1c6>
 800cc06:	6019      	str	r1, [r3, #0]
 800cc08:	e002      	b.n	800cc10 <_printf_i+0x1cc>
 800cc0a:	0670      	lsls	r0, r6, #25
 800cc0c:	d5fb      	bpl.n	800cc06 <_printf_i+0x1c2>
 800cc0e:	8019      	strh	r1, [r3, #0]
 800cc10:	2300      	movs	r3, #0
 800cc12:	4615      	mov	r5, r2
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	e7bc      	b.n	800cb92 <_printf_i+0x14e>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	1d1a      	adds	r2, r3, #4
 800cc1e:	602a      	str	r2, [r5, #0]
 800cc20:	681d      	ldr	r5, [r3, #0]
 800cc22:	6862      	ldr	r2, [r4, #4]
 800cc24:	4628      	mov	r0, r5
 800cc26:	f000 f878 	bl	800cd1a <memchr>
 800cc2a:	b108      	cbz	r0, 800cc30 <_printf_i+0x1ec>
 800cc2c:	1b40      	subs	r0, r0, r5
 800cc2e:	6060      	str	r0, [r4, #4]
 800cc30:	6863      	ldr	r3, [r4, #4]
 800cc32:	6123      	str	r3, [r4, #16]
 800cc34:	2300      	movs	r3, #0
 800cc36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc3a:	e7aa      	b.n	800cb92 <_printf_i+0x14e>
 800cc3c:	462a      	mov	r2, r5
 800cc3e:	4649      	mov	r1, r9
 800cc40:	4640      	mov	r0, r8
 800cc42:	6923      	ldr	r3, [r4, #16]
 800cc44:	47d0      	blx	sl
 800cc46:	3001      	adds	r0, #1
 800cc48:	d0ad      	beq.n	800cba6 <_printf_i+0x162>
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	079b      	lsls	r3, r3, #30
 800cc4e:	d413      	bmi.n	800cc78 <_printf_i+0x234>
 800cc50:	68e0      	ldr	r0, [r4, #12]
 800cc52:	9b03      	ldr	r3, [sp, #12]
 800cc54:	4298      	cmp	r0, r3
 800cc56:	bfb8      	it	lt
 800cc58:	4618      	movlt	r0, r3
 800cc5a:	e7a6      	b.n	800cbaa <_printf_i+0x166>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	4632      	mov	r2, r6
 800cc60:	4649      	mov	r1, r9
 800cc62:	4640      	mov	r0, r8
 800cc64:	47d0      	blx	sl
 800cc66:	3001      	adds	r0, #1
 800cc68:	d09d      	beq.n	800cba6 <_printf_i+0x162>
 800cc6a:	3501      	adds	r5, #1
 800cc6c:	68e3      	ldr	r3, [r4, #12]
 800cc6e:	9903      	ldr	r1, [sp, #12]
 800cc70:	1a5b      	subs	r3, r3, r1
 800cc72:	42ab      	cmp	r3, r5
 800cc74:	dcf2      	bgt.n	800cc5c <_printf_i+0x218>
 800cc76:	e7eb      	b.n	800cc50 <_printf_i+0x20c>
 800cc78:	2500      	movs	r5, #0
 800cc7a:	f104 0619 	add.w	r6, r4, #25
 800cc7e:	e7f5      	b.n	800cc6c <_printf_i+0x228>
 800cc80:	0800dcc8 	.word	0x0800dcc8
 800cc84:	0800dcd9 	.word	0x0800dcd9

0800cc88 <_realloc_r>:
 800cc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8c:	4680      	mov	r8, r0
 800cc8e:	4614      	mov	r4, r2
 800cc90:	460e      	mov	r6, r1
 800cc92:	b921      	cbnz	r1, 800cc9e <_realloc_r+0x16>
 800cc94:	4611      	mov	r1, r2
 800cc96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9a:	f7ff bb77 	b.w	800c38c <_malloc_r>
 800cc9e:	b92a      	cbnz	r2, 800ccac <_realloc_r+0x24>
 800cca0:	f7ff fcbe 	bl	800c620 <_free_r>
 800cca4:	4625      	mov	r5, r4
 800cca6:	4628      	mov	r0, r5
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccac:	f000 f851 	bl	800cd52 <_malloc_usable_size_r>
 800ccb0:	4284      	cmp	r4, r0
 800ccb2:	4607      	mov	r7, r0
 800ccb4:	d802      	bhi.n	800ccbc <_realloc_r+0x34>
 800ccb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccba:	d812      	bhi.n	800cce2 <_realloc_r+0x5a>
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	f7ff fb64 	bl	800c38c <_malloc_r>
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d0ed      	beq.n	800cca6 <_realloc_r+0x1e>
 800ccca:	42bc      	cmp	r4, r7
 800cccc:	4622      	mov	r2, r4
 800ccce:	4631      	mov	r1, r6
 800ccd0:	bf28      	it	cs
 800ccd2:	463a      	movcs	r2, r7
 800ccd4:	f000 f82f 	bl	800cd36 <memcpy>
 800ccd8:	4631      	mov	r1, r6
 800ccda:	4640      	mov	r0, r8
 800ccdc:	f7ff fca0 	bl	800c620 <_free_r>
 800cce0:	e7e1      	b.n	800cca6 <_realloc_r+0x1e>
 800cce2:	4635      	mov	r5, r6
 800cce4:	e7df      	b.n	800cca6 <_realloc_r+0x1e>

0800cce6 <memmove>:
 800cce6:	4288      	cmp	r0, r1
 800cce8:	b510      	push	{r4, lr}
 800ccea:	eb01 0402 	add.w	r4, r1, r2
 800ccee:	d902      	bls.n	800ccf6 <memmove+0x10>
 800ccf0:	4284      	cmp	r4, r0
 800ccf2:	4623      	mov	r3, r4
 800ccf4:	d807      	bhi.n	800cd06 <memmove+0x20>
 800ccf6:	1e43      	subs	r3, r0, #1
 800ccf8:	42a1      	cmp	r1, r4
 800ccfa:	d008      	beq.n	800cd0e <memmove+0x28>
 800ccfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd00:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd04:	e7f8      	b.n	800ccf8 <memmove+0x12>
 800cd06:	4601      	mov	r1, r0
 800cd08:	4402      	add	r2, r0
 800cd0a:	428a      	cmp	r2, r1
 800cd0c:	d100      	bne.n	800cd10 <memmove+0x2a>
 800cd0e:	bd10      	pop	{r4, pc}
 800cd10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd18:	e7f7      	b.n	800cd0a <memmove+0x24>

0800cd1a <memchr>:
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	b510      	push	{r4, lr}
 800cd1e:	b2c9      	uxtb	r1, r1
 800cd20:	4402      	add	r2, r0
 800cd22:	4293      	cmp	r3, r2
 800cd24:	4618      	mov	r0, r3
 800cd26:	d101      	bne.n	800cd2c <memchr+0x12>
 800cd28:	2000      	movs	r0, #0
 800cd2a:	e003      	b.n	800cd34 <memchr+0x1a>
 800cd2c:	7804      	ldrb	r4, [r0, #0]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	428c      	cmp	r4, r1
 800cd32:	d1f6      	bne.n	800cd22 <memchr+0x8>
 800cd34:	bd10      	pop	{r4, pc}

0800cd36 <memcpy>:
 800cd36:	440a      	add	r2, r1
 800cd38:	4291      	cmp	r1, r2
 800cd3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cd3e:	d100      	bne.n	800cd42 <memcpy+0xc>
 800cd40:	4770      	bx	lr
 800cd42:	b510      	push	{r4, lr}
 800cd44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd48:	4291      	cmp	r1, r2
 800cd4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd4e:	d1f9      	bne.n	800cd44 <memcpy+0xe>
 800cd50:	bd10      	pop	{r4, pc}

0800cd52 <_malloc_usable_size_r>:
 800cd52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd56:	1f18      	subs	r0, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfbc      	itt	lt
 800cd5c:	580b      	ldrlt	r3, [r1, r0]
 800cd5e:	18c0      	addlt	r0, r0, r3
 800cd60:	4770      	bx	lr
	...

0800cd64 <_init>:
 800cd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd66:	bf00      	nop
 800cd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd6a:	bc08      	pop	{r3}
 800cd6c:	469e      	mov	lr, r3
 800cd6e:	4770      	bx	lr

0800cd70 <_fini>:
 800cd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd72:	bf00      	nop
 800cd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd76:	bc08      	pop	{r3}
 800cd78:	469e      	mov	lr, r3
 800cd7a:	4770      	bx	lr
