
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc18  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  0800cdfc  0800cdfc  0001cdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd6c  0800dd6c  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd6c  0800dd6c  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd6c  0800dd6c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd6c  0800dd6c  0001dd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd70  0800dd70  0001dd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800dd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000100  0800de74  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  0800de74  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125e9  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c3  00000000  00000000  00032755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00034e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfa  00000000  00000000  00035fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af30  00000000  00000000  00036dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f5a  00000000  00000000  00051cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ece8  00000000  00000000  00069c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005188  00000000  00000000  0010892c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010dab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000100 	.word	0x20000100
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cde4 	.word	0x0800cde4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000104 	.word	0x20000104
 8000220:	0800cde4 	.word	0x0800cde4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:

#include "ESP8266.h"

char queryBufferTX[250];

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(queryBufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c f96e 	bl	800c524 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b fb7e 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 faae 	bl	80087c0 <HAL_Delay>

	sprintf(queryBufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c f95c 	bl	800c524 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b fb6c 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 fa9c 	bl	80087c0 <HAL_Delay>

	sprintf(queryBufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c f94a 	bl	800c524 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b fb5a 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 fa8a 	bl	80087c0 <HAL_Delay>

	sprintf(queryBufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c f938 	bl	800c524 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b fb48 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 fa78 	bl	80087c0 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c f97d 	bl	800c5e8 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c f96a 	bl	800c5e8 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(queryBufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c f8f4 	bl	800c524 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b fb04 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 fa34 	bl	80087c0 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800cdfc 	.word	0x0800cdfc
 8000364:	2000011c 	.word	0x2000011c
 8000368:	0800ce0c 	.word	0x0800ce0c
 800036c:	0800ce18 	.word	0x0800ce18
 8000370:	0800ce20 	.word	0x0800ce20
 8000374:	0800ce30 	.word	0x0800ce30
 8000378:	0800ce3c 	.word	0x0800ce3c
 800037c:	0800ce40 	.word	0x0800ce40
 8000380:	0800ce44 	.word	0x0800ce44

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(queryBufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", serverIP);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c f8b9 	bl	800c524 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) queryBufferTX, strlen(queryBufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00b fac6 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 f9f6 	bl	80087c0 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c f897 	bl	800c524 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, serverIPWithPort);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c f887 	bl	800c524 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b fa91 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 f9c1 	bl	80087c0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b fa7d 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 f9ad 	bl	80087c0 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800ce48 	.word	0x0800ce48
 8000474:	0800ce58 	.word	0x0800ce58
 8000478:	2000011c 	.word	0x2000011c
 800047c:	0800ced4 	.word	0x0800ced4
 8000480:	0800ce78 	.word	0x0800ce78
 8000484:	0800cee8 	.word	0x0800cee8

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f009 fd71 	bl	8009fb2 <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f009 fd5d 	bl	8009f98 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 f8c0 	bl	80096d8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000039c 	.word	0x2000039c
 8000564:	20000216 	.word	0x20000216

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f009 fd01 	bl	8009fb2 <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f009 fced 	bl	8009f98 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 f850 	bl	80096d8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000039c 	.word	0x2000039c
 8000644:	20000216 	.word	0x20000216

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f009 fc7b 	bl	8009fb2 <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f009 fc67 	bl	8009f98 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f008 ffca 	bl	80096d8 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000039c 	.word	0x2000039c
 8000750:	20000216 	.word	0x20000216

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f007 ffd0 	bl	80087c0 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000216 	.word	0x20000216

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <getCharFromCursorPosition>:
void menu();
void printTemplate(int type, int page);
int checkSlideVal(int state);
void slideText(const char* text, int startPos, int startLine, int state);

char getCharFromCursorPosition(int cursorPosition) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <getCharFromCursorPosition+0x1c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	2000004c 	.word	0x2000004c

080008ec <readValFromEEPROM>:
			return i;
		}
	}
}

void readValFromEEPROM(int state) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d11c      	bne.n	8000934 <readValFromEEPROM+0x48>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <readValFromEEPROM+0x88>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharLimit; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	e012      	b.n	800092c <readValFromEEPROM+0x40>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <readValFromEEPROM+0x8c>)
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffdd 	bl	80008cc <getCharFromCursorPosition>
 8000912:	4603      	mov	r3, r0
 8000914:	4619      	mov	r1, r3
 8000916:	4a19      	ldr	r2, [pc, #100]	; (800097c <readValFromEEPROM+0x90>)
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4413      	add	r3, r2
 800091c:	460a      	mov	r2, r1
 800091e:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	3301      	adds	r3, #1
 8000924:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharLimit; i++) {
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	3301      	adds	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	2b13      	cmp	r3, #19
 8000930:	dde9      	ble.n	8000906 <readValFromEEPROM+0x1a>
		for(int i=0; i<wifiCharLimit; i++) {
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
			tempPassStartPos++;
		}
	}
}
 8000932:	e01b      	b.n	800096c <readValFromEEPROM+0x80>
		uint8_t tempPassStartPos = passStartPos;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <readValFromEEPROM+0x94>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharLimit; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	e012      	b.n	8000966 <readValFromEEPROM+0x7a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <readValFromEEPROM+0x8c>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ffc0 	bl	80008cc <getCharFromCursorPosition>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <readValFromEEPROM+0x98>)
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	460a      	mov	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	3301      	adds	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharLimit; i++) {
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3301      	adds	r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	2b13      	cmp	r3, #19
 800096a:	dde9      	ble.n	8000940 <readValFromEEPROM+0x54>
}
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000009e 	.word	0x2000009e
 8000978:	20000218 	.word	0x20000218
 800097c:	200002bc 	.word	0x200002bc
 8000980:	2000009f 	.word	0x2000009f
 8000984:	200002d0 	.word	0x200002d0

08000988 <takeMachineID>:

void takeMachineID(int state) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b08b      	sub	sp, #44	; 0x2c
 800098c:	af04      	add	r7, sp, #16
 800098e:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff ff6f 	bl	8000874 <lcd_cursor>

    int cursorPosition = 3;
 8000996:	2303      	movs	r3, #3
 8000998:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 800099e:	2305      	movs	r3, #5
 80009a0:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 80009a8:	220c      	movs	r2, #12
 80009aa:	2100      	movs	r1, #0
 80009ac:	4899      	ldr	r0, [pc, #612]	; (8000c14 <takeMachineID+0x28c>)
 80009ae:	f00b fe2a 	bl	800c606 <memset>
    }
    HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f007 ff04 	bl	80087c0 <HAL_Delay>

    printTemplate(1, 0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2001      	movs	r0, #1
 80009bc:	f004 f840 	bl	8004a40 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80009c0:	2108      	movs	r1, #8
 80009c2:	4895      	ldr	r0, [pc, #596]	; (8000c18 <takeMachineID+0x290>)
 80009c4:	f008 fccc 	bl	8009360 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d138      	bne.n	8000a40 <takeMachineID+0xb8>
        	lcd_cursor(0);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff ff50 	bl	8000874 <lcd_cursor>

        	if(machineID[11] == '\0') {
 80009d4:	4b8f      	ldr	r3, [pc, #572]	; (8000c14 <takeMachineID+0x28c>)
 80009d6:	7adb      	ldrb	r3, [r3, #11]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d110      	bne.n	80009fe <takeMachineID+0x76>
        		lcd_clear();
 80009dc:	f7ff ff18 	bl	8000810 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 80009e0:	4a8e      	ldr	r2, [pc, #568]	; (8000c1c <takeMachineID+0x294>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff fee7 	bl	80007b8 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 80009ea:	4a8d      	ldr	r2, [pc, #564]	; (8000c20 <takeMachineID+0x298>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	2002      	movs	r0, #2
 80009f0:	f7ff fee2 	bl	80007b8 <lcd_print>
        		HAL_Delay(1200);
 80009f4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80009f8:	f007 fee2 	bl	80087c0 <HAL_Delay>
        		goto mainSection;
 80009fc:	e7c8      	b.n	8000990 <takeMachineID+0x8>
        	}

        	memcpy(&eepromData[idStartPos], machineID, 12);
 80009fe:	4b89      	ldr	r3, [pc, #548]	; (8000c24 <takeMachineID+0x29c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b88      	ldr	r3, [pc, #544]	; (8000c28 <takeMachineID+0x2a0>)
 8000a06:	4413      	add	r3, r2
 8000a08:	4a82      	ldr	r2, [pc, #520]	; (8000c14 <takeMachineID+0x28c>)
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a10:	6020      	str	r0, [r4, #0]
 8000a12:	6061      	str	r1, [r4, #4]
 8000a14:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000a16:	20c8      	movs	r0, #200	; 0xc8
 8000a18:	f007 fed2 	bl	80087c0 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000a1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a20:	9302      	str	r3, [sp, #8]
 8000a22:	236e      	movs	r3, #110	; 0x6e
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	4b80      	ldr	r3, [pc, #512]	; (8000c28 <takeMachineID+0x2a0>)
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	236e      	movs	r3, #110	; 0x6e
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	21a0      	movs	r1, #160	; 0xa0
 8000a30:	487e      	ldr	r0, [pc, #504]	; (8000c2c <takeMachineID+0x2a4>)
 8000a32:	f008 ff4f 	bl	80098d4 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a3a:	f007 fec1 	bl	80087c0 <HAL_Delay>

            break;
 8000a3e:	e0e5      	b.n	8000c0c <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000a40:	2101      	movs	r1, #1
 8000a42:	4875      	ldr	r0, [pc, #468]	; (8000c18 <takeMachineID+0x290>)
 8000a44:	f008 fc8c 	bl	8009360 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d112      	bne.n	8000a74 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2b07      	cmp	r3, #7
 8000a52:	d102      	bne.n	8000a5a <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000a54:	230a      	movs	r3, #10
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e008      	b.n	8000a6c <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2b0e      	cmp	r3, #14
 8000a5e:	d102      	bne.n	8000a66 <takeMachineID+0xde>
                cursorPosition = 3;
 8000a60:	2303      	movs	r3, #3
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e002      	b.n	8000a6c <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000a6c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000a70:	f007 fea6 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000a74:	2108      	movs	r1, #8
 8000a76:	486e      	ldr	r0, [pc, #440]	; (8000c30 <takeMachineID+0x2a8>)
 8000a78:	f008 fc72 	bl	8009360 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d112      	bne.n	8000aa8 <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d102      	bne.n	8000a8e <takeMachineID+0x106>
                cursorPosition = 14;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e008      	b.n	8000aa0 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2b0a      	cmp	r3, #10
 8000a92:	d102      	bne.n	8000a9a <takeMachineID+0x112>
            	cursorPosition = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e002      	b.n	8000aa0 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000aa0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000aa4:	f007 fe8c 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	485b      	ldr	r0, [pc, #364]	; (8000c18 <takeMachineID+0x290>)
 8000aac:	f008 fc58 	bl	8009360 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d16c      	bne.n	8000b90 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d105      	bne.n	8000ac8 <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000abc:	4a55      	ldr	r2, [pc, #340]	; (8000c14 <takeMachineID+0x28c>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2230      	movs	r2, #48	; 0x30
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e04f      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d105      	bne.n	8000ada <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000ace:	4a51      	ldr	r2, [pc, #324]	; (8000c14 <takeMachineID+0x28c>)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	2231      	movs	r2, #49	; 0x31
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e046      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	d105      	bne.n	8000aec <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000ae0:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <takeMachineID+0x28c>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2232      	movs	r2, #50	; 0x32
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	e03d      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d105      	bne.n	8000afe <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000af2:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <takeMachineID+0x28c>)
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4413      	add	r3, r2
 8000af8:	2233      	movs	r2, #51	; 0x33
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e034      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	d105      	bne.n	8000b10 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000b04:	4a43      	ldr	r2, [pc, #268]	; (8000c14 <takeMachineID+0x28c>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4413      	add	r3, r2
 8000b0a:	2234      	movs	r2, #52	; 0x34
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e02b      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d105      	bne.n	8000b22 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000b16:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <takeMachineID+0x28c>)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2235      	movs	r2, #53	; 0x35
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e022      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	2b0b      	cmp	r3, #11
 8000b26:	d105      	bne.n	8000b34 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000b28:	4a3a      	ldr	r2, [pc, #232]	; (8000c14 <takeMachineID+0x28c>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2236      	movs	r2, #54	; 0x36
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e019      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b0c      	cmp	r3, #12
 8000b38:	d105      	bne.n	8000b46 <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000b3a:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <takeMachineID+0x28c>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4413      	add	r3, r2
 8000b40:	2237      	movs	r2, #55	; 0x37
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e010      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2b0d      	cmp	r3, #13
 8000b4a:	d105      	bne.n	8000b58 <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000b4c:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <takeMachineID+0x28c>)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4413      	add	r3, r2
 8000b52:	2238      	movs	r2, #56	; 0x38
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e007      	b.n	8000b68 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	2b0e      	cmp	r3, #14
 8000b5c:	d104      	bne.n	8000b68 <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000b5e:	4a2d      	ldr	r2, [pc, #180]	; (8000c14 <takeMachineID+0x28c>)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4413      	add	r3, r2
 8000b64:	2239      	movs	r2, #57	; 0x39
 8000b66:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	b2d9      	uxtb	r1, r3
 8000b6c:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <takeMachineID+0x28c>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff fe33 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	3301      	adds	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000b88:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000b8c:	f007 fe18 	bl	80087c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000b90:	2104      	movs	r1, #4
 8000b92:	4821      	ldr	r0, [pc, #132]	; (8000c18 <takeMachineID+0x290>)
 8000b94:	f008 fbe4 	bl	8009360 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d12f      	bne.n	8000bfe <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <takeMachineID+0x28c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d027      	beq.n	8000bf6 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <takeMachineID+0x28c>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4413      	add	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fe32 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8000bc0:	2032      	movs	r0, #50	; 0x32
 8000bc2:	f007 fdfd 	bl	80087c0 <HAL_Delay>

                if(writeLoc > 5) {
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	dd03      	ble.n	8000bd4 <takeMachineID+0x24c>
                	writeLoc--;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e004      	b.n	8000bde <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	dc01      	bgt.n	8000bde <takeMachineID+0x256>
                	writeLoc = 5;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dd03      	ble.n	8000bec <takeMachineID+0x264>
                	machineIDLoc--;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	e004      	b.n	8000bf6 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da01      	bge.n	8000bf6 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000bf6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bfa:	f007 fde1 	bl	80087c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	2002      	movs	r0, #2
 8000c06:	f7ff fdb8 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c0a:	e6d9      	b.n	80009c0 <takeMachineID+0x38>
    }
}
 8000c0c:	bf00      	nop
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	200002b0 	.word	0x200002b0
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	0800cf74 	.word	0x0800cf74
 8000c20:	0800cf88 	.word	0x0800cf88
 8000c24:	2000009d 	.word	0x2000009d
 8000c28:	20000218 	.word	0x20000218
 8000c2c:	2000039c 	.word	0x2000039c
 8000c30:	40011000 	.word	0x40011000

08000c34 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fe19 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000c48:	2214      	movs	r2, #20
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4899      	ldr	r0, [pc, #612]	; (8000eb4 <takeWifiSSID+0x280>)
 8000c4e:	f00b fcda 	bl	800c606 <memset>
    }

    int realCharPos = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
    cursorPosition = 1;
 8000c56:	4b98      	ldr	r3, [pc, #608]	; (8000eb8 <takeWifiSSID+0x284>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
    page = 1;
 8000c5c:	4b97      	ldr	r3, [pc, #604]	; (8000ebc <takeWifiSSID+0x288>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
    int writeLoc = 7;
 8000c66:	2307      	movs	r3, #7
 8000c68:	617b      	str	r3, [r7, #20]

    int characterSavePos = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]

    printTemplate(2, 1);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2002      	movs	r0, #2
 8000c72:	f003 fee5 	bl	8004a40 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c76:	2108      	movs	r1, #8
 8000c78:	4891      	ldr	r0, [pc, #580]	; (8000ec0 <takeWifiSSID+0x28c>)
 8000c7a:	f008 fb71 	bl	8009360 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d14b      	bne.n	8000d1c <takeWifiSSID+0xe8>
            lcd_cursor(0);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff fdf5 	bl	8000874 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000c8a:	488a      	ldr	r0, [pc, #552]	; (8000eb4 <takeWifiSSID+0x280>)
 8000c8c:	f7ff faca 	bl	8000224 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b14      	cmp	r3, #20
 8000c94:	d910      	bls.n	8000cb8 <takeWifiSSID+0x84>
                lcd_clear();
 8000c96:	f7ff fdbb 	bl	8000810 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000c9a:	4a8a      	ldr	r2, [pc, #552]	; (8000ec4 <takeWifiSSID+0x290>)
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff fd8a 	bl	80007b8 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000ca4:	4a88      	ldr	r2, [pc, #544]	; (8000ec8 <takeWifiSSID+0x294>)
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f7ff fd85 	bl	80007b8 <lcd_print>
                HAL_Delay(1200);
 8000cae:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000cb2:	f007 fd85 	bl	80087c0 <HAL_Delay>
                goto mainSSIDSection;
 8000cb6:	e7c1      	b.n	8000c3c <takeWifiSSID+0x8>
            }

            for(int i=characterSavePos; i<wifiCharLimit; i++) {
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	e007      	b.n	8000cce <takeWifiSSID+0x9a>
            	wifiSSIDLoc[i] = '\0';
 8000cbe:	4a83      	ldr	r2, [pc, #524]	; (8000ecc <takeWifiSSID+0x298>)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
            for(int i=characterSavePos; i<wifiCharLimit; i++) {
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b13      	cmp	r3, #19
 8000cd2:	ddf4      	ble.n	8000cbe <takeWifiSSID+0x8a>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, 20);
 8000cd4:	4b7e      	ldr	r3, [pc, #504]	; (8000ed0 <takeWifiSSID+0x29c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b7e      	ldr	r3, [pc, #504]	; (8000ed4 <takeWifiSSID+0x2a0>)
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a7b      	ldr	r2, [pc, #492]	; (8000ecc <takeWifiSSID+0x298>)
 8000ce0:	461d      	mov	r5, r3
 8000ce2:	4614      	mov	r4, r2
 8000ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce6:	6028      	str	r0, [r5, #0]
 8000ce8:	6069      	str	r1, [r5, #4]
 8000cea:	60aa      	str	r2, [r5, #8]
 8000cec:	60eb      	str	r3, [r5, #12]
 8000cee:	6820      	ldr	r0, [r4, #0]
 8000cf0:	6128      	str	r0, [r5, #16]
            HAL_Delay(250);
 8000cf2:	20fa      	movs	r0, #250	; 0xfa
 8000cf4:	f007 fd64 	bl	80087c0 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000cf8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	236e      	movs	r3, #110	; 0x6e
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	4b74      	ldr	r3, [pc, #464]	; (8000ed4 <takeWifiSSID+0x2a0>)
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	236e      	movs	r3, #110	; 0x6e
 8000d08:	2200      	movs	r2, #0
 8000d0a:	21a0      	movs	r1, #160	; 0xa0
 8000d0c:	4872      	ldr	r0, [pc, #456]	; (8000ed8 <takeWifiSSID+0x2a4>)
 8000d0e:	f008 fde1 	bl	80098d4 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d16:	f007 fd53 	bl	80087c0 <HAL_Delay>

            break;
 8000d1a:	e159      	b.n	8000fd0 <takeWifiSSID+0x39c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4868      	ldr	r0, [pc, #416]	; (8000ec0 <takeWifiSSID+0x28c>)
 8000d20:	f008 fb1e 	bl	8009360 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d166      	bne.n	8000df8 <takeWifiSSID+0x1c4>
        	realCharPos++;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
        	if(realCharPos > 80) {
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	2b50      	cmp	r3, #80	; 0x50
 8000d34:	dd01      	ble.n	8000d3a <takeWifiSSID+0x106>
        		realCharPos = 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
        	}
            if (cursorPosition == 16) {
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <takeWifiSSID+0x284>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b10      	cmp	r3, #16
 8000d40:	d152      	bne.n	8000de8 <takeWifiSSID+0x1b4>
            	if(page == 1) {
 8000d42:	4b5e      	ldr	r3, [pc, #376]	; (8000ebc <takeWifiSSID+0x288>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d10c      	bne.n	8000d64 <takeWifiSSID+0x130>
            		cursorPosition = 1;
 8000d4a:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <takeWifiSSID+0x284>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
            		page++;
 8000d50:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <takeWifiSSID+0x288>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a59      	ldr	r2, [pc, #356]	; (8000ebc <takeWifiSSID+0x288>)
 8000d58:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f003 fe6f 	bl	8004a40 <printTemplate>
 8000d62:	e046      	b.n	8000df2 <takeWifiSSID+0x1be>
            	} else if(page == 2) {
 8000d64:	4b55      	ldr	r3, [pc, #340]	; (8000ebc <takeWifiSSID+0x288>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d10c      	bne.n	8000d86 <takeWifiSSID+0x152>
            		cursorPosition = 1;
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <takeWifiSSID+0x284>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
            		page++;
 8000d72:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <takeWifiSSID+0x288>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	4a50      	ldr	r2, [pc, #320]	; (8000ebc <takeWifiSSID+0x288>)
 8000d7a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f003 fe5e 	bl	8004a40 <printTemplate>
 8000d84:	e035      	b.n	8000df2 <takeWifiSSID+0x1be>
            	} else if(page == 3) {
 8000d86:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <takeWifiSSID+0x288>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d10c      	bne.n	8000da8 <takeWifiSSID+0x174>
            		cursorPosition = 1;
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <takeWifiSSID+0x284>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
            		page++;
 8000d94:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <takeWifiSSID+0x288>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a48      	ldr	r2, [pc, #288]	; (8000ebc <takeWifiSSID+0x288>)
 8000d9c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000d9e:	2104      	movs	r1, #4
 8000da0:	2002      	movs	r0, #2
 8000da2:	f003 fe4d 	bl	8004a40 <printTemplate>
 8000da6:	e024      	b.n	8000df2 <takeWifiSSID+0x1be>
            	} else if(page == 4) {
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <takeWifiSSID+0x288>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d10c      	bne.n	8000dca <takeWifiSSID+0x196>
            		cursorPosition = 1;
 8000db0:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <takeWifiSSID+0x284>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
            		page++;
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <takeWifiSSID+0x288>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <takeWifiSSID+0x288>)
 8000dbe:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f003 fe3c 	bl	8004a40 <printTemplate>
 8000dc8:	e013      	b.n	8000df2 <takeWifiSSID+0x1be>
            	} else if(page == 5) {
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <takeWifiSSID+0x288>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b05      	cmp	r3, #5
 8000dd0:	d10f      	bne.n	8000df2 <takeWifiSSID+0x1be>
            		cursorPosition = 1;
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <takeWifiSSID+0x284>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <takeWifiSSID+0x288>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000dde:	2101      	movs	r1, #1
 8000de0:	2002      	movs	r0, #2
 8000de2:	f003 fe2d 	bl	8004a40 <printTemplate>
 8000de6:	e004      	b.n	8000df2 <takeWifiSSID+0x1be>
            	}
            } else {
            	cursorPosition++;
 8000de8:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <takeWifiSSID+0x284>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a32      	ldr	r2, [pc, #200]	; (8000eb8 <takeWifiSSID+0x284>)
 8000df0:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000df2:	20fa      	movs	r0, #250	; 0xfa
 8000df4:	f007 fce4 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000df8:	2108      	movs	r1, #8
 8000dfa:	4838      	ldr	r0, [pc, #224]	; (8000edc <takeWifiSSID+0x2a8>)
 8000dfc:	f008 fab0 	bl	8009360 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d174      	bne.n	8000ef0 <takeWifiSSID+0x2bc>
        	realCharPos--;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
        	if(realCharPos < 1) {
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	dc01      	bgt.n	8000e16 <takeWifiSSID+0x1e2>
        		realCharPos = 80;
 8000e12:	2350      	movs	r3, #80	; 0x50
 8000e14:	61fb      	str	r3, [r7, #28]
        	}
            if(cursorPosition == 1) {
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <takeWifiSSID+0x284>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d160      	bne.n	8000ee0 <takeWifiSSID+0x2ac>
            	if(page == 1) {
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <takeWifiSSID+0x288>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10a      	bne.n	8000e3c <takeWifiSSID+0x208>
            		cursorPosition = 16;
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <takeWifiSSID+0x284>)
 8000e28:	2210      	movs	r2, #16
 8000e2a:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <takeWifiSSID+0x288>)
 8000e2e:	2205      	movs	r2, #5
 8000e30:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000e32:	2105      	movs	r1, #5
 8000e34:	2002      	movs	r0, #2
 8000e36:	f003 fe03 	bl	8004a40 <printTemplate>
 8000e3a:	e056      	b.n	8000eea <takeWifiSSID+0x2b6>
            	} else if(page == 2) {
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <takeWifiSSID+0x288>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d10a      	bne.n	8000e5a <takeWifiSSID+0x226>
            		cursorPosition = 16;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <takeWifiSSID+0x284>)
 8000e46:	2210      	movs	r2, #16
 8000e48:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <takeWifiSSID+0x288>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e50:	2101      	movs	r1, #1
 8000e52:	2002      	movs	r0, #2
 8000e54:	f003 fdf4 	bl	8004a40 <printTemplate>
 8000e58:	e047      	b.n	8000eea <takeWifiSSID+0x2b6>
            	} else if(page == 3) {
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <takeWifiSSID+0x288>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d10a      	bne.n	8000e78 <takeWifiSSID+0x244>
            		cursorPosition = 16;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <takeWifiSSID+0x284>)
 8000e64:	2210      	movs	r2, #16
 8000e66:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <takeWifiSSID+0x288>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000e6e:	2102      	movs	r1, #2
 8000e70:	2002      	movs	r0, #2
 8000e72:	f003 fde5 	bl	8004a40 <printTemplate>
 8000e76:	e038      	b.n	8000eea <takeWifiSSID+0x2b6>
            	} else if(page == 4) {
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <takeWifiSSID+0x288>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d10a      	bne.n	8000e96 <takeWifiSSID+0x262>
            		cursorPosition = 16;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <takeWifiSSID+0x284>)
 8000e82:	2210      	movs	r2, #16
 8000e84:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <takeWifiSSID+0x288>)
 8000e88:	2203      	movs	r2, #3
 8000e8a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000e8c:	2103      	movs	r1, #3
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f003 fdd6 	bl	8004a40 <printTemplate>
 8000e94:	e029      	b.n	8000eea <takeWifiSSID+0x2b6>
            	} else if(page == 5) {
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <takeWifiSSID+0x288>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d125      	bne.n	8000eea <takeWifiSSID+0x2b6>
            		cursorPosition = 16;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <takeWifiSSID+0x284>)
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <takeWifiSSID+0x288>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000eaa:	2104      	movs	r1, #4
 8000eac:	2002      	movs	r0, #2
 8000eae:	f003 fdc7 	bl	8004a40 <printTemplate>
 8000eb2:	e01a      	b.n	8000eea <takeWifiSSID+0x2b6>
 8000eb4:	200002bc 	.word	0x200002bc
 8000eb8:	20000030 	.word	0x20000030
 8000ebc:	20000034 	.word	0x20000034
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	0800cf9c 	.word	0x0800cf9c
 8000ec8:	0800cfb0 	.word	0x0800cfb0
 8000ecc:	200002e4 	.word	0x200002e4
 8000ed0:	2000009e 	.word	0x2000009e
 8000ed4:	20000218 	.word	0x20000218
 8000ed8:	2000039c 	.word	0x2000039c
 8000edc:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000ee0:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <takeWifiSSID+0x3a4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	4a3c      	ldr	r2, [pc, #240]	; (8000fd8 <takeWifiSSID+0x3a4>)
 8000ee8:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000eea:	20fa      	movs	r0, #250	; 0xfa
 8000eec:	f007 fc68 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	483a      	ldr	r0, [pc, #232]	; (8000fdc <takeWifiSSID+0x3a8>)
 8000ef4:	f008 fa34 	bl	8009360 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d12a      	bne.n	8000f54 <takeWifiSSID+0x320>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fce2 	bl	80008cc <getCharFromCursorPosition>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4a34      	ldr	r2, [pc, #208]	; (8000fe0 <takeWifiSSID+0x3ac>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4413      	add	r3, r2
 8000f12:	460a      	mov	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]

            wifiSSIDLoc[characterSavePos] = realCharPos - 1;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <takeWifiSSID+0x3b0>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4413      	add	r3, r2
 8000f24:	460a      	mov	r2, r1
 8000f26:	701a      	strb	r2, [r3, #0]


            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	b2d9      	uxtb	r1, r3
 8000f2c:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <takeWifiSSID+0x3ac>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fc53 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
            wifiNameLoc++;
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
            characterSavePos++;
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000f4e:	20fa      	movs	r0, #250	; 0xfa
 8000f50:	f007 fc36 	bl	80087c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f54:	2104      	movs	r1, #4
 8000f56:	4821      	ldr	r0, [pc, #132]	; (8000fdc <takeWifiSSID+0x3a8>)
 8000f58:	f008 fa02 	bl	8009360 <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d12e      	bne.n	8000fc0 <takeWifiSSID+0x38c>
        	if(strlen(wifiSSID) >= 1) {
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <takeWifiSSID+0x3ac>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d027      	beq.n	8000fba <takeWifiSSID+0x386>
        		wifiSSID[wifiNameLoc] = '\0';
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <takeWifiSSID+0x3ac>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4413      	add	r3, r2
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	3306      	adds	r3, #6
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff fc50 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 8000f84:	2032      	movs	r0, #50	; 0x32
 8000f86:	f007 fc1b 	bl	80087c0 <HAL_Delay>
        		if(writeLoc > 7) {
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b07      	cmp	r3, #7
 8000f8e:	dd03      	ble.n	8000f98 <takeWifiSSID+0x364>
        			writeLoc--;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e004      	b.n	8000fa2 <takeWifiSSID+0x36e>
        		} else if(writeLoc < 7) {
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	dc01      	bgt.n	8000fa2 <takeWifiSSID+0x36e>
        			writeLoc = 7;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	617b      	str	r3, [r7, #20]
        		}

        		if(wifiNameLoc > 0) {
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dd03      	ble.n	8000fb0 <takeWifiSSID+0x37c>
        			wifiNameLoc--;
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	e004      	b.n	8000fba <takeWifiSSID+0x386>
        		} else if(wifiNameLoc < 0) {
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da01      	bge.n	8000fba <takeWifiSSID+0x386>
        			wifiNameLoc = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
        		}
        	}

        	HAL_Delay(250);
 8000fba:	20fa      	movs	r0, #250	; 0xfa
 8000fbc:	f007 fc00 	bl	80087c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <takeWifiSSID+0x3a4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f7ff fbd6 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fce:	e652      	b.n	8000c76 <takeWifiSSID+0x42>
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd8:	20000030 	.word	0x20000030
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	200002bc 	.word	0x200002bc
 8000fe4:	200002e4 	.word	0x200002e4

08000fe8 <takeWifiPass>:

void takeWifiPass(int state) {
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff fc3f 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8000ffc:	2214      	movs	r2, #20
 8000ffe:	2100      	movs	r1, #0
 8001000:	4899      	ldr	r0, [pc, #612]	; (8001268 <takeWifiPass+0x280>)
 8001002:	f00b fb00 	bl	800c606 <memset>
    }

    int realCharPos = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
    cursorPosition = 1;
 800100a:	4b98      	ldr	r3, [pc, #608]	; (800126c <takeWifiPass+0x284>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
    page = 1;
 8001010:	4b97      	ldr	r3, [pc, #604]	; (8001270 <takeWifiPass+0x288>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
    int writeLoc = 7;
 800101a:	2307      	movs	r3, #7
 800101c:	617b      	str	r3, [r7, #20]

    int characterSavePos = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]

    printTemplate(3, 1);
 8001022:	2101      	movs	r1, #1
 8001024:	2003      	movs	r0, #3
 8001026:	f003 fd0b 	bl	8004a40 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800102a:	2108      	movs	r1, #8
 800102c:	4891      	ldr	r0, [pc, #580]	; (8001274 <takeWifiPass+0x28c>)
 800102e:	f008 f997 	bl	8009360 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d14b      	bne.n	80010d0 <takeWifiPass+0xe8>
            lcd_cursor(0);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fc1b 	bl	8000874 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800103e:	488a      	ldr	r0, [pc, #552]	; (8001268 <takeWifiPass+0x280>)
 8001040:	f7ff f8f0 	bl	8000224 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	2b14      	cmp	r3, #20
 8001048:	d910      	bls.n	800106c <takeWifiPass+0x84>
                lcd_clear();
 800104a:	f7ff fbe1 	bl	8000810 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800104e:	4a8a      	ldr	r2, [pc, #552]	; (8001278 <takeWifiPass+0x290>)
 8001050:	2101      	movs	r1, #1
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fbb0 	bl	80007b8 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8001058:	4a88      	ldr	r2, [pc, #544]	; (800127c <takeWifiPass+0x294>)
 800105a:	2101      	movs	r1, #1
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff fbab 	bl	80007b8 <lcd_print>
                HAL_Delay(1200);
 8001062:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001066:	f007 fbab 	bl	80087c0 <HAL_Delay>
                goto mainPASSSection;
 800106a:	e7c1      	b.n	8000ff0 <takeWifiPass+0x8>
            }

            for(int i=characterSavePos; i<wifiCharLimit; i++) {
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e007      	b.n	8001082 <takeWifiPass+0x9a>
            	wifiPassLocArr[i] = '\0';
 8001072:	4a83      	ldr	r2, [pc, #524]	; (8001280 <takeWifiPass+0x298>)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
            for(int i=characterSavePos; i<wifiCharLimit; i++) {
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3301      	adds	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b13      	cmp	r3, #19
 8001086:	ddf4      	ble.n	8001072 <takeWifiPass+0x8a>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, 20);
 8001088:	4b7e      	ldr	r3, [pc, #504]	; (8001284 <takeWifiPass+0x29c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b7e      	ldr	r3, [pc, #504]	; (8001288 <takeWifiPass+0x2a0>)
 8001090:	4413      	add	r3, r2
 8001092:	4a7b      	ldr	r2, [pc, #492]	; (8001280 <takeWifiPass+0x298>)
 8001094:	461d      	mov	r5, r3
 8001096:	4614      	mov	r4, r2
 8001098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109a:	6028      	str	r0, [r5, #0]
 800109c:	6069      	str	r1, [r5, #4]
 800109e:	60aa      	str	r2, [r5, #8]
 80010a0:	60eb      	str	r3, [r5, #12]
 80010a2:	6820      	ldr	r0, [r4, #0]
 80010a4:	6128      	str	r0, [r5, #16]
            HAL_Delay(250);
 80010a6:	20fa      	movs	r0, #250	; 0xfa
 80010a8:	f007 fb8a 	bl	80087c0 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80010ac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	236e      	movs	r3, #110	; 0x6e
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	4b74      	ldr	r3, [pc, #464]	; (8001288 <takeWifiPass+0x2a0>)
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	236e      	movs	r3, #110	; 0x6e
 80010bc:	2200      	movs	r2, #0
 80010be:	21a0      	movs	r1, #160	; 0xa0
 80010c0:	4872      	ldr	r0, [pc, #456]	; (800128c <takeWifiPass+0x2a4>)
 80010c2:	f008 fc07 	bl	80098d4 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80010c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ca:	f007 fb79 	bl	80087c0 <HAL_Delay>

            break;
 80010ce:	e159      	b.n	8001384 <takeWifiPass+0x39c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010d0:	2101      	movs	r1, #1
 80010d2:	4868      	ldr	r0, [pc, #416]	; (8001274 <takeWifiPass+0x28c>)
 80010d4:	f008 f944 	bl	8009360 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d166      	bne.n	80011ac <takeWifiPass+0x1c4>
        	realCharPos++;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
        	if(realCharPos > 80) {
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b50      	cmp	r3, #80	; 0x50
 80010e8:	dd01      	ble.n	80010ee <takeWifiPass+0x106>
        	    realCharPos = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
        	}
            if (cursorPosition == 16) {
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <takeWifiPass+0x284>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d152      	bne.n	800119c <takeWifiPass+0x1b4>
            	if(page == 1) {
 80010f6:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <takeWifiPass+0x288>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10c      	bne.n	8001118 <takeWifiPass+0x130>
            		cursorPosition = 1;
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <takeWifiPass+0x284>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
            		page++;
 8001104:	4b5a      	ldr	r3, [pc, #360]	; (8001270 <takeWifiPass+0x288>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a59      	ldr	r2, [pc, #356]	; (8001270 <takeWifiPass+0x288>)
 800110c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 800110e:	2102      	movs	r1, #2
 8001110:	2003      	movs	r0, #3
 8001112:	f003 fc95 	bl	8004a40 <printTemplate>
 8001116:	e046      	b.n	80011a6 <takeWifiPass+0x1be>
            	} else if(page == 2) {
 8001118:	4b55      	ldr	r3, [pc, #340]	; (8001270 <takeWifiPass+0x288>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d10c      	bne.n	800113a <takeWifiPass+0x152>
            		cursorPosition = 1;
 8001120:	4b52      	ldr	r3, [pc, #328]	; (800126c <takeWifiPass+0x284>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]
            		page++;
 8001126:	4b52      	ldr	r3, [pc, #328]	; (8001270 <takeWifiPass+0x288>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a50      	ldr	r2, [pc, #320]	; (8001270 <takeWifiPass+0x288>)
 800112e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001130:	2103      	movs	r1, #3
 8001132:	2003      	movs	r0, #3
 8001134:	f003 fc84 	bl	8004a40 <printTemplate>
 8001138:	e035      	b.n	80011a6 <takeWifiPass+0x1be>
            	} else if(page == 3) {
 800113a:	4b4d      	ldr	r3, [pc, #308]	; (8001270 <takeWifiPass+0x288>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d10c      	bne.n	800115c <takeWifiPass+0x174>
            		cursorPosition = 1;
 8001142:	4b4a      	ldr	r3, [pc, #296]	; (800126c <takeWifiPass+0x284>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
            		page++;
 8001148:	4b49      	ldr	r3, [pc, #292]	; (8001270 <takeWifiPass+0x288>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a48      	ldr	r2, [pc, #288]	; (8001270 <takeWifiPass+0x288>)
 8001150:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001152:	2104      	movs	r1, #4
 8001154:	2003      	movs	r0, #3
 8001156:	f003 fc73 	bl	8004a40 <printTemplate>
 800115a:	e024      	b.n	80011a6 <takeWifiPass+0x1be>
            	} else if(page == 4) {
 800115c:	4b44      	ldr	r3, [pc, #272]	; (8001270 <takeWifiPass+0x288>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b04      	cmp	r3, #4
 8001162:	d10c      	bne.n	800117e <takeWifiPass+0x196>
            		cursorPosition = 1;
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <takeWifiPass+0x284>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
            		page++;
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <takeWifiPass+0x288>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	4a3f      	ldr	r2, [pc, #252]	; (8001270 <takeWifiPass+0x288>)
 8001172:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001174:	2105      	movs	r1, #5
 8001176:	2003      	movs	r0, #3
 8001178:	f003 fc62 	bl	8004a40 <printTemplate>
 800117c:	e013      	b.n	80011a6 <takeWifiPass+0x1be>
            	} else if(page == 5) {
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <takeWifiPass+0x288>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d10f      	bne.n	80011a6 <takeWifiPass+0x1be>
            		cursorPosition = 1;
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <takeWifiPass+0x284>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]
            		page = 1;
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <takeWifiPass+0x288>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001192:	2101      	movs	r1, #1
 8001194:	2003      	movs	r0, #3
 8001196:	f003 fc53 	bl	8004a40 <printTemplate>
 800119a:	e004      	b.n	80011a6 <takeWifiPass+0x1be>
            	}
            } else {
            	cursorPosition++;
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <takeWifiPass+0x284>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a32      	ldr	r2, [pc, #200]	; (800126c <takeWifiPass+0x284>)
 80011a4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80011a6:	20fa      	movs	r0, #250	; 0xfa
 80011a8:	f007 fb0a 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011ac:	2108      	movs	r1, #8
 80011ae:	4838      	ldr	r0, [pc, #224]	; (8001290 <takeWifiPass+0x2a8>)
 80011b0:	f008 f8d6 	bl	8009360 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d174      	bne.n	80012a4 <takeWifiPass+0x2bc>
        	realCharPos--;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b01      	subs	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
        	if(realCharPos < 1) {
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	dc01      	bgt.n	80011ca <takeWifiPass+0x1e2>
        	    realCharPos = 80;
 80011c6:	2350      	movs	r3, #80	; 0x50
 80011c8:	61fb      	str	r3, [r7, #28]
        	}
            if(cursorPosition == 1) {
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <takeWifiPass+0x284>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d160      	bne.n	8001294 <takeWifiPass+0x2ac>
            	if(page == 1) {
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <takeWifiPass+0x288>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10a      	bne.n	80011f0 <takeWifiPass+0x208>
            		cursorPosition = 16;
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <takeWifiPass+0x284>)
 80011dc:	2210      	movs	r2, #16
 80011de:	601a      	str	r2, [r3, #0]
            		page = 5;
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <takeWifiPass+0x288>)
 80011e2:	2205      	movs	r2, #5
 80011e4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80011e6:	2105      	movs	r1, #5
 80011e8:	2003      	movs	r0, #3
 80011ea:	f003 fc29 	bl	8004a40 <printTemplate>
 80011ee:	e056      	b.n	800129e <takeWifiPass+0x2b6>
            	} else if(page == 2) {
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <takeWifiPass+0x288>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d10a      	bne.n	800120e <takeWifiPass+0x226>
            		cursorPosition = 16;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <takeWifiPass+0x284>)
 80011fa:	2210      	movs	r2, #16
 80011fc:	601a      	str	r2, [r3, #0]
            		page = 1;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <takeWifiPass+0x288>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001204:	2101      	movs	r1, #1
 8001206:	2003      	movs	r0, #3
 8001208:	f003 fc1a 	bl	8004a40 <printTemplate>
 800120c:	e047      	b.n	800129e <takeWifiPass+0x2b6>
            	} else if(page == 3) {
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <takeWifiPass+0x288>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d10a      	bne.n	800122c <takeWifiPass+0x244>
            		cursorPosition = 16;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <takeWifiPass+0x284>)
 8001218:	2210      	movs	r2, #16
 800121a:	601a      	str	r2, [r3, #0]
            		page = 2;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <takeWifiPass+0x288>)
 800121e:	2202      	movs	r2, #2
 8001220:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001222:	2102      	movs	r1, #2
 8001224:	2003      	movs	r0, #3
 8001226:	f003 fc0b 	bl	8004a40 <printTemplate>
 800122a:	e038      	b.n	800129e <takeWifiPass+0x2b6>
            	} else if(page == 4) {
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <takeWifiPass+0x288>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d10a      	bne.n	800124a <takeWifiPass+0x262>
            		cursorPosition = 16;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <takeWifiPass+0x284>)
 8001236:	2210      	movs	r2, #16
 8001238:	601a      	str	r2, [r3, #0]
            		page = 3;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <takeWifiPass+0x288>)
 800123c:	2203      	movs	r2, #3
 800123e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001240:	2103      	movs	r1, #3
 8001242:	2003      	movs	r0, #3
 8001244:	f003 fbfc 	bl	8004a40 <printTemplate>
 8001248:	e029      	b.n	800129e <takeWifiPass+0x2b6>
            	} else if(page == 5) {
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <takeWifiPass+0x288>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d125      	bne.n	800129e <takeWifiPass+0x2b6>
            		cursorPosition = 16;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <takeWifiPass+0x284>)
 8001254:	2210      	movs	r2, #16
 8001256:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <takeWifiPass+0x288>)
 800125a:	2204      	movs	r2, #4
 800125c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800125e:	2104      	movs	r1, #4
 8001260:	2003      	movs	r0, #3
 8001262:	f003 fbed 	bl	8004a40 <printTemplate>
 8001266:	e01a      	b.n	800129e <takeWifiPass+0x2b6>
 8001268:	200002d0 	.word	0x200002d0
 800126c:	20000030 	.word	0x20000030
 8001270:	20000034 	.word	0x20000034
 8001274:	40010800 	.word	0x40010800
 8001278:	0800cf9c 	.word	0x0800cf9c
 800127c:	0800cfc4 	.word	0x0800cfc4
 8001280:	200002f8 	.word	0x200002f8
 8001284:	2000009f 	.word	0x2000009f
 8001288:	20000218 	.word	0x20000218
 800128c:	2000039c 	.word	0x2000039c
 8001290:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001294:	4b3d      	ldr	r3, [pc, #244]	; (800138c <takeWifiPass+0x3a4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	4a3c      	ldr	r2, [pc, #240]	; (800138c <takeWifiPass+0x3a4>)
 800129c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800129e:	20fa      	movs	r0, #250	; 0xfa
 80012a0:	f007 fa8e 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80012a4:	2102      	movs	r1, #2
 80012a6:	483a      	ldr	r0, [pc, #232]	; (8001390 <takeWifiPass+0x3a8>)
 80012a8:	f008 f85a 	bl	8009360 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d12a      	bne.n	8001308 <takeWifiPass+0x320>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fb08 	bl	80008cc <getCharFromCursorPosition>
 80012bc:	4603      	mov	r3, r0
 80012be:	4619      	mov	r1, r3
 80012c0:	4a34      	ldr	r2, [pc, #208]	; (8001394 <takeWifiPass+0x3ac>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]

        	wifiPassLocArr[characterSavePos] = realCharPos - 1;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b2d9      	uxtb	r1, r3
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <takeWifiPass+0x3b0>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4413      	add	r3, r2
 80012d8:	460a      	mov	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	b2d9      	uxtb	r1, r3
 80012e0:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <takeWifiPass+0x3ac>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff fa79 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
            wifiPassLoc++;
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
            characterSavePos++;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	3301      	adds	r3, #1
 8001300:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001302:	20fa      	movs	r0, #250	; 0xfa
 8001304:	f007 fa5c 	bl	80087c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001308:	2104      	movs	r1, #4
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <takeWifiPass+0x3a8>)
 800130c:	f008 f828 	bl	8009360 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12e      	bne.n	8001374 <takeWifiPass+0x38c>
            if(strlen(wifiPass) >= 1) {
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <takeWifiPass+0x3ac>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d027      	beq.n	800136e <takeWifiPass+0x386>
            	wifiPass[wifiPassLoc] = '\0';
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <takeWifiPass+0x3ac>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	4413      	add	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	3306      	adds	r3, #6
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fa76 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 8001338:	2032      	movs	r0, #50	; 0x32
 800133a:	f007 fa41 	bl	80087c0 <HAL_Delay>

            	if(writeLoc > 7) {
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b07      	cmp	r3, #7
 8001342:	dd03      	ble.n	800134c <takeWifiPass+0x364>
            		writeLoc--;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3b01      	subs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e004      	b.n	8001356 <takeWifiPass+0x36e>
            	} else if(writeLoc < 7) {
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2b06      	cmp	r3, #6
 8001350:	dc01      	bgt.n	8001356 <takeWifiPass+0x36e>
            		writeLoc = 7;
 8001352:	2307      	movs	r3, #7
 8001354:	617b      	str	r3, [r7, #20]
            	}

            	if(wifiPassLoc > 0) {
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	dd03      	ble.n	8001364 <takeWifiPass+0x37c>
            		wifiPassLoc--;
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	3b01      	subs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	e004      	b.n	800136e <takeWifiPass+0x386>
            	} else if(wifiPassLoc < 0) {
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	da01      	bge.n	800136e <takeWifiPass+0x386>
            		wifiPassLoc = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
            	}
            }

            HAL_Delay(250);
 800136e:	20fa      	movs	r0, #250	; 0xfa
 8001370:	f007 fa26 	bl	80087c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <takeWifiPass+0x3a4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	2002      	movs	r0, #2
 800137e:	f7ff f9fc 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001382:	e652      	b.n	800102a <takeWifiPass+0x42>
    }
}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bdb0      	pop	{r4, r5, r7, pc}
 800138c:	20000030 	.word	0x20000030
 8001390:	40010800 	.word	0x40010800
 8001394:	200002d0 	.word	0x200002d0
 8001398:	200002f8 	.word	0x200002f8

0800139c <menu>:


void menu() {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013a0:	2101      	movs	r1, #1
 80013a2:	488f      	ldr	r0, [pc, #572]	; (80015e0 <menu+0x244>)
 80013a4:	f007 ffdc 	bl	8009360 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 808e 	bne.w	80014cc <menu+0x130>
 80013b0:	4b8c      	ldr	r3, [pc, #560]	; (80015e4 <menu+0x248>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8086 	beq.w	80014cc <menu+0x130>
		menuSayac = menuSayac+1;
 80013c0:	4b89      	ldr	r3, [pc, #548]	; (80015e8 <menu+0x24c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b87      	ldr	r3, [pc, #540]	; (80015e8 <menu+0x24c>)
 80013ca:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80013cc:	4b86      	ldr	r3, [pc, #536]	; (80015e8 <menu+0x24c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b24      	cmp	r3, #36	; 0x24
 80013d2:	d102      	bne.n	80013da <menu+0x3e>
			menuSayac = 1;
 80013d4:	4b84      	ldr	r3, [pc, #528]	; (80015e8 <menu+0x24c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013da:	4b83      	ldr	r3, [pc, #524]	; (80015e8 <menu+0x24c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d106      	bne.n	80013f0 <menu+0x54>
 80013e2:	4b82      	ldr	r3, [pc, #520]	; (80015ec <menu+0x250>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <menu+0x54>
			menuSayac = 21;
 80013ea:	4b7f      	ldr	r3, [pc, #508]	; (80015e8 <menu+0x24c>)
 80013ec:	2215      	movs	r2, #21
 80013ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80013f0:	4b7d      	ldr	r3, [pc, #500]	; (80015e8 <menu+0x24c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d106      	bne.n	8001406 <menu+0x6a>
 80013f8:	4b7d      	ldr	r3, [pc, #500]	; (80015f0 <menu+0x254>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <menu+0x6a>
			menuSayac = 16;
 8001400:	4b79      	ldr	r3, [pc, #484]	; (80015e8 <menu+0x24c>)
 8001402:	2210      	movs	r2, #16
 8001404:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001406:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <menu+0x24c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b0d      	cmp	r3, #13
 800140c:	d106      	bne.n	800141c <menu+0x80>
 800140e:	4b78      	ldr	r3, [pc, #480]	; (80015f0 <menu+0x254>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d102      	bne.n	800141c <menu+0x80>
			menuSayac = 16;
 8001416:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <menu+0x24c>)
 8001418:	2210      	movs	r2, #16
 800141a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800141c:	4b72      	ldr	r3, [pc, #456]	; (80015e8 <menu+0x24c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b09      	cmp	r3, #9
 8001422:	d106      	bne.n	8001432 <menu+0x96>
 8001424:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <menu+0x254>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d102      	bne.n	8001432 <menu+0x96>
			menuSayac = 13;
 800142c:	4b6e      	ldr	r3, [pc, #440]	; (80015e8 <menu+0x24c>)
 800142e:	220d      	movs	r2, #13
 8001430:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001432:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <menu+0x24c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b0a      	cmp	r3, #10
 8001438:	d10a      	bne.n	8001450 <menu+0xb4>
 800143a:	4b6e      	ldr	r3, [pc, #440]	; (80015f4 <menu+0x258>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d003      	beq.n	800144a <menu+0xae>
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <menu+0x258>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d102      	bne.n	8001450 <menu+0xb4>
			menuSayac = 11;
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <menu+0x24c>)
 800144c:	220b      	movs	r2, #11
 800144e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001450:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <menu+0x24c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d10e      	bne.n	8001476 <menu+0xda>
 8001458:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <menu+0x25c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d003      	beq.n	8001468 <menu+0xcc>
 8001460:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <menu+0x25c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d106      	bne.n	8001476 <menu+0xda>
 8001468:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <menu+0x254>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d102      	bne.n	8001476 <menu+0xda>
			menuSayac = 16;
 8001470:	4b5d      	ldr	r3, [pc, #372]	; (80015e8 <menu+0x24c>)
 8001472:	2210      	movs	r2, #16
 8001474:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001476:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <menu+0x24c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d10e      	bne.n	800149c <menu+0x100>
 800147e:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <menu+0x25c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d003      	beq.n	800148e <menu+0xf2>
 8001486:	4b5c      	ldr	r3, [pc, #368]	; (80015f8 <menu+0x25c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d106      	bne.n	800149c <menu+0x100>
 800148e:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <menu+0x254>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d102      	bne.n	800149c <menu+0x100>
			menuSayac = 13;
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <menu+0x24c>)
 8001498:	220d      	movs	r2, #13
 800149a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800149c:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <menu+0x24c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d106      	bne.n	80014b2 <menu+0x116>
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <menu+0x260>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d102      	bne.n	80014b2 <menu+0x116>
			menuSayac = 16;
 80014ac:	4b4e      	ldr	r3, [pc, #312]	; (80015e8 <menu+0x24c>)
 80014ae:	2210      	movs	r2, #16
 80014b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80014b2:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <menu+0x24c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b18      	cmp	r3, #24
 80014b8:	d106      	bne.n	80014c8 <menu+0x12c>
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <menu+0x250>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <menu+0x12c>
			menuSayac = 26;
 80014c2:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <menu+0x24c>)
 80014c4:	221a      	movs	r2, #26
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014c8:	f004 f974 	bl	80057b4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014cc:	2108      	movs	r1, #8
 80014ce:	484c      	ldr	r0, [pc, #304]	; (8001600 <menu+0x264>)
 80014d0:	f007 ff46 	bl	8009360 <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d175      	bne.n	80015c6 <menu+0x22a>
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <menu+0x248>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f083 0301 	eor.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d06e      	beq.n	80015c6 <menu+0x22a>
		if (menuSayac <= 1) {
 80014e8:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <menu+0x24c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d802      	bhi.n	80014f6 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80014f0:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <menu+0x24c>)
 80014f2:	2224      	movs	r2, #36	; 0x24
 80014f4:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <menu+0x24c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <menu+0x24c>)
 8001500:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <menu+0x24c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b14      	cmp	r3, #20
 8001508:	d106      	bne.n	8001518 <menu+0x17c>
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <menu+0x250>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <menu+0x17c>
			menuSayac = 17;
 8001512:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <menu+0x24c>)
 8001514:	2211      	movs	r2, #17
 8001516:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001518:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <menu+0x24c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d106      	bne.n	800152e <menu+0x192>
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <menu+0x254>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <menu+0x192>
			menuSayac = 7;
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <menu+0x24c>)
 800152a:	2207      	movs	r2, #7
 800152c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <menu+0x24c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	d106      	bne.n	8001544 <menu+0x1a8>
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <menu+0x254>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d102      	bne.n	8001544 <menu+0x1a8>
			menuSayac = 12;
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <menu+0x24c>)
 8001540:	220c      	movs	r2, #12
 8001542:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <menu+0x24c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b0c      	cmp	r3, #12
 800154a:	d106      	bne.n	800155a <menu+0x1be>
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <menu+0x254>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d102      	bne.n	800155a <menu+0x1be>
			menuSayac = 8;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <menu+0x24c>)
 8001556:	2208      	movs	r2, #8
 8001558:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <menu+0x24c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b0a      	cmp	r3, #10
 8001560:	d10a      	bne.n	8001578 <menu+0x1dc>
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <menu+0x258>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d003      	beq.n	8001572 <menu+0x1d6>
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <menu+0x258>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d102      	bne.n	8001578 <menu+0x1dc>
			menuSayac = 9;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <menu+0x24c>)
 8001574:	2209      	movs	r2, #9
 8001576:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <menu+0x24c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b0c      	cmp	r3, #12
 800157e:	d10a      	bne.n	8001596 <menu+0x1fa>
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <menu+0x25c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d003      	beq.n	8001590 <menu+0x1f4>
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <menu+0x25c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d102      	bne.n	8001596 <menu+0x1fa>
			menuSayac = 11;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <menu+0x24c>)
 8001592:	220b      	movs	r2, #11
 8001594:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <menu+0x24c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	d106      	bne.n	80015ac <menu+0x210>
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <menu+0x260>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d102      	bne.n	80015ac <menu+0x210>
			menuSayac = 14;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <menu+0x24c>)
 80015a8:	220e      	movs	r2, #14
 80015aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <menu+0x24c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b19      	cmp	r3, #25
 80015b2:	d106      	bne.n	80015c2 <menu+0x226>
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <menu+0x250>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <menu+0x226>
			menuSayac = 23;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <menu+0x24c>)
 80015be:	2217      	movs	r2, #23
 80015c0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015c2:	f004 f8f7 	bl	80057b4 <bekle>
	}

	if (menuSayac == 0) {
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <menu+0x24c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d134      	bne.n	8001638 <menu+0x29c>
		if(dilSecim == 0) {
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <menu+0x268>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d122      	bne.n	800161c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <menu+0x26c>)
 80015d8:	2101      	movs	r1, #1
 80015da:	2001      	movs	r0, #1
 80015dc:	e016      	b.n	800160c <menu+0x270>
 80015de:	bf00      	nop
 80015e0:	40010800 	.word	0x40010800
 80015e4:	2000033f 	.word	0x2000033f
 80015e8:	20000310 	.word	0x20000310
 80015ec:	2000031f 	.word	0x2000031f
 80015f0:	20000318 	.word	0x20000318
 80015f4:	20000319 	.word	0x20000319
 80015f8:	2000031a 	.word	0x2000031a
 80015fc:	2000031b 	.word	0x2000031b
 8001600:	40011000 	.word	0x40011000
 8001604:	20000331 	.word	0x20000331
 8001608:	0800cfd8 	.word	0x0800cfd8
 800160c:	f7ff f8d4 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001610:	4a94      	ldr	r2, [pc, #592]	; (8001864 <menu+0x4c8>)
 8001612:	2101      	movs	r1, #1
 8001614:	2002      	movs	r0, #2
 8001616:	f7ff f8cf 	bl	80007b8 <lcd_print>
 800161a:	e00d      	b.n	8001638 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800161c:	4b92      	ldr	r3, [pc, #584]	; (8001868 <menu+0x4cc>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d109      	bne.n	8001638 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001624:	4a91      	ldr	r2, [pc, #580]	; (800186c <menu+0x4d0>)
 8001626:	2101      	movs	r1, #1
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff f8c5 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800162e:	4a90      	ldr	r2, [pc, #576]	; (8001870 <menu+0x4d4>)
 8001630:	2101      	movs	r1, #1
 8001632:	2002      	movs	r0, #2
 8001634:	f7ff f8c0 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001638:	4b8e      	ldr	r3, [pc, #568]	; (8001874 <menu+0x4d8>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	f040 82b5 	bne.w	8001bac <menu+0x810>
		if(dilSecim == 0) {
 8001642:	4b89      	ldr	r3, [pc, #548]	; (8001868 <menu+0x4cc>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800164a:	4a8b      	ldr	r2, [pc, #556]	; (8001878 <menu+0x4dc>)
 800164c:	2101      	movs	r1, #1
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff f8b2 	bl	80007b8 <lcd_print>
 8001654:	e008      	b.n	8001668 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001656:	4b84      	ldr	r3, [pc, #528]	; (8001868 <menu+0x4cc>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d104      	bne.n	8001668 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800165e:	4a87      	ldr	r2, [pc, #540]	; (800187c <menu+0x4e0>)
 8001660:	2101      	movs	r1, #1
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff f8a8 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001668:	4b85      	ldr	r3, [pc, #532]	; (8001880 <menu+0x4e4>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d123      	bne.n	80016b8 <menu+0x31c>
			if(dilSecim == 0) {
 8001670:	4b7d      	ldr	r3, [pc, #500]	; (8001868 <menu+0x4cc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001678:	4a82      	ldr	r2, [pc, #520]	; (8001884 <menu+0x4e8>)
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f7ff f89b 	bl	80007b8 <lcd_print>
 8001682:	e008      	b.n	8001696 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001684:	4b78      	ldr	r3, [pc, #480]	; (8001868 <menu+0x4cc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d104      	bne.n	8001696 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 800168c:	4a7e      	ldr	r2, [pc, #504]	; (8001888 <menu+0x4ec>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f7ff f891 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001696:	4a7d      	ldr	r2, [pc, #500]	; (800188c <menu+0x4f0>)
 8001698:	210f      	movs	r1, #15
 800169a:	2002      	movs	r0, #2
 800169c:	f7ff f88c 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80016a0:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <menu+0x4f4>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	220a      	movs	r2, #10
 80016a6:	497b      	ldr	r1, [pc, #492]	; (8001894 <menu+0x4f8>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00a fe85 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 80016ae:	4a79      	ldr	r2, [pc, #484]	; (8001894 <menu+0x4f8>)
 80016b0:	210e      	movs	r1, #14
 80016b2:	2002      	movs	r0, #2
 80016b4:	f7ff f880 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80016b8:	4b71      	ldr	r3, [pc, #452]	; (8001880 <menu+0x4e4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d123      	bne.n	8001708 <menu+0x36c>
			if(dilSecim == 0) {
 80016c0:	4b69      	ldr	r3, [pc, #420]	; (8001868 <menu+0x4cc>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80016c8:	4a73      	ldr	r2, [pc, #460]	; (8001898 <menu+0x4fc>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	2002      	movs	r0, #2
 80016ce:	f7ff f873 	bl	80007b8 <lcd_print>
 80016d2:	e008      	b.n	80016e6 <menu+0x34a>
			} else if(dilSecim == 1) {
 80016d4:	4b64      	ldr	r3, [pc, #400]	; (8001868 <menu+0x4cc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d104      	bne.n	80016e6 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80016dc:	4a6f      	ldr	r2, [pc, #444]	; (800189c <menu+0x500>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f7ff f869 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016e6:	4a6e      	ldr	r2, [pc, #440]	; (80018a0 <menu+0x504>)
 80016e8:	210f      	movs	r1, #15
 80016ea:	2002      	movs	r0, #2
 80016ec:	f7ff f864 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80016f0:	4b6c      	ldr	r3, [pc, #432]	; (80018a4 <menu+0x508>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	220a      	movs	r2, #10
 80016f6:	4967      	ldr	r1, [pc, #412]	; (8001894 <menu+0x4f8>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00a fe5d 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 80016fe:	4a65      	ldr	r2, [pc, #404]	; (8001894 <menu+0x4f8>)
 8001700:	210e      	movs	r1, #14
 8001702:	2002      	movs	r0, #2
 8001704:	f7ff f858 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001708:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <menu+0x4e4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d123      	bne.n	8001758 <menu+0x3bc>
			if(dilSecim == 0) {
 8001710:	4b55      	ldr	r3, [pc, #340]	; (8001868 <menu+0x4cc>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001718:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <menu+0x50c>)
 800171a:	2101      	movs	r1, #1
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff f84b 	bl	80007b8 <lcd_print>
 8001722:	e008      	b.n	8001736 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <menu+0x4cc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d104      	bne.n	8001736 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 800172c:	4a5f      	ldr	r2, [pc, #380]	; (80018ac <menu+0x510>)
 800172e:	2101      	movs	r1, #1
 8001730:	2002      	movs	r0, #2
 8001732:	f7ff f841 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001736:	4a5a      	ldr	r2, [pc, #360]	; (80018a0 <menu+0x504>)
 8001738:	210f      	movs	r1, #15
 800173a:	2002      	movs	r0, #2
 800173c:	f7ff f83c 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001740:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <menu+0x514>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	220a      	movs	r2, #10
 8001746:	4953      	ldr	r1, [pc, #332]	; (8001894 <menu+0x4f8>)
 8001748:	4618      	mov	r0, r3
 800174a:	f00a fe35 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 800174e:	4a51      	ldr	r2, [pc, #324]	; (8001894 <menu+0x4f8>)
 8001750:	210e      	movs	r1, #14
 8001752:	2002      	movs	r0, #2
 8001754:	f7ff f830 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001758:	4b49      	ldr	r3, [pc, #292]	; (8001880 <menu+0x4e4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d123      	bne.n	80017a8 <menu+0x40c>
			if(dilSecim == 0) {
 8001760:	4b41      	ldr	r3, [pc, #260]	; (8001868 <menu+0x4cc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <menu+0x518>)
 800176a:	2101      	movs	r1, #1
 800176c:	2002      	movs	r0, #2
 800176e:	f7ff f823 	bl	80007b8 <lcd_print>
 8001772:	e008      	b.n	8001786 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001774:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <menu+0x4cc>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d104      	bne.n	8001786 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 800177c:	4a4e      	ldr	r2, [pc, #312]	; (80018b8 <menu+0x51c>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f7ff f819 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001786:	4a46      	ldr	r2, [pc, #280]	; (80018a0 <menu+0x504>)
 8001788:	210f      	movs	r1, #15
 800178a:	2002      	movs	r0, #2
 800178c:	f7ff f814 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <menu+0x520>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	220a      	movs	r2, #10
 8001796:	493f      	ldr	r1, [pc, #252]	; (8001894 <menu+0x4f8>)
 8001798:	4618      	mov	r0, r3
 800179a:	f00a fe0d 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 800179e:	4a3d      	ldr	r2, [pc, #244]	; (8001894 <menu+0x4f8>)
 80017a0:	210e      	movs	r1, #14
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7ff f808 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <menu+0x4e4>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d123      	bne.n	80017f8 <menu+0x45c>
			if(dilSecim == 0) {
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <menu+0x4cc>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80017b8:	4a41      	ldr	r2, [pc, #260]	; (80018c0 <menu+0x524>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	2002      	movs	r0, #2
 80017be:	f7fe fffb 	bl	80007b8 <lcd_print>
 80017c2:	e008      	b.n	80017d6 <menu+0x43a>
			} else if(dilSecim == 1) {
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <menu+0x4cc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d104      	bne.n	80017d6 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80017cc:	4a3d      	ldr	r2, [pc, #244]	; (80018c4 <menu+0x528>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	2002      	movs	r0, #2
 80017d2:	f7fe fff1 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017d6:	4a32      	ldr	r2, [pc, #200]	; (80018a0 <menu+0x504>)
 80017d8:	210f      	movs	r1, #15
 80017da:	2002      	movs	r0, #2
 80017dc:	f7fe ffec 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <menu+0x52c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	220a      	movs	r2, #10
 80017e6:	492b      	ldr	r1, [pc, #172]	; (8001894 <menu+0x4f8>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f00a fde5 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 80017ee:	4a29      	ldr	r2, [pc, #164]	; (8001894 <menu+0x4f8>)
 80017f0:	210e      	movs	r1, #14
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7fe ffe0 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <menu+0x4e4>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d123      	bne.n	8001848 <menu+0x4ac>
			if(dilSecim == 0) {
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <menu+0x4cc>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001808:	4a30      	ldr	r2, [pc, #192]	; (80018cc <menu+0x530>)
 800180a:	2101      	movs	r1, #1
 800180c:	2002      	movs	r0, #2
 800180e:	f7fe ffd3 	bl	80007b8 <lcd_print>
 8001812:	e008      	b.n	8001826 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <menu+0x4cc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d104      	bne.n	8001826 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 800181c:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <menu+0x534>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f7fe ffc9 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001826:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <menu+0x504>)
 8001828:	210f      	movs	r1, #15
 800182a:	2002      	movs	r0, #2
 800182c:	f7fe ffc4 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <menu+0x538>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	220a      	movs	r2, #10
 8001836:	4917      	ldr	r1, [pc, #92]	; (8001894 <menu+0x4f8>)
 8001838:	4618      	mov	r0, r3
 800183a:	f00a fdbd 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 800183e:	4a15      	ldr	r2, [pc, #84]	; (8001894 <menu+0x4f8>)
 8001840:	210e      	movs	r1, #14
 8001842:	2002      	movs	r0, #2
 8001844:	f7fe ffb8 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <menu+0x4e4>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b06      	cmp	r3, #6
 800184e:	d15f      	bne.n	8001910 <menu+0x574>
			if(dilSecim == 0) {
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <menu+0x4cc>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d141      	bne.n	80018dc <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <menu+0x53c>)
 800185a:	2101      	movs	r1, #1
 800185c:	2002      	movs	r0, #2
 800185e:	f7fe ffab 	bl	80007b8 <lcd_print>
 8001862:	e044      	b.n	80018ee <menu+0x552>
 8001864:	0800cfec 	.word	0x0800cfec
 8001868:	20000331 	.word	0x20000331
 800186c:	0800d000 	.word	0x0800d000
 8001870:	0800d014 	.word	0x0800d014
 8001874:	20000310 	.word	0x20000310
 8001878:	0800d028 	.word	0x0800d028
 800187c:	0800d03c 	.word	0x0800d03c
 8001880:	20000312 	.word	0x20000312
 8001884:	0800d050 	.word	0x0800d050
 8001888:	0800d060 	.word	0x0800d060
 800188c:	0800d070 	.word	0x0800d070
 8001890:	20000332 	.word	0x20000332
 8001894:	20000288 	.word	0x20000288
 8001898:	0800d074 	.word	0x0800d074
 800189c:	0800d084 	.word	0x0800d084
 80018a0:	0800d094 	.word	0x0800d094
 80018a4:	20000333 	.word	0x20000333
 80018a8:	0800d098 	.word	0x0800d098
 80018ac:	0800d0a8 	.word	0x0800d0a8
 80018b0:	20000334 	.word	0x20000334
 80018b4:	0800d0b8 	.word	0x0800d0b8
 80018b8:	0800d0c8 	.word	0x0800d0c8
 80018bc:	20000335 	.word	0x20000335
 80018c0:	0800d0d8 	.word	0x0800d0d8
 80018c4:	0800d0e8 	.word	0x0800d0e8
 80018c8:	20000336 	.word	0x20000336
 80018cc:	0800d0f8 	.word	0x0800d0f8
 80018d0:	0800d108 	.word	0x0800d108
 80018d4:	20000337 	.word	0x20000337
 80018d8:	0800d118 	.word	0x0800d118
			} else if(dilSecim == 1) {
 80018dc:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <menu+0x680>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d104      	bne.n	80018ee <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80018e4:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <menu+0x684>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	2002      	movs	r0, #2
 80018ea:	f7fe ff65 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018ee:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <menu+0x688>)
 80018f0:	210f      	movs	r1, #15
 80018f2:	2002      	movs	r0, #2
 80018f4:	f7fe ff60 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80018f8:	4b4b      	ldr	r3, [pc, #300]	; (8001a28 <menu+0x68c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	220a      	movs	r2, #10
 80018fe:	494b      	ldr	r1, [pc, #300]	; (8001a2c <menu+0x690>)
 8001900:	4618      	mov	r0, r3
 8001902:	f00a fd59 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 8001906:	4a49      	ldr	r2, [pc, #292]	; (8001a2c <menu+0x690>)
 8001908:	210e      	movs	r1, #14
 800190a:	2002      	movs	r0, #2
 800190c:	f7fe ff54 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001910:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <menu+0x694>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b07      	cmp	r3, #7
 8001916:	d123      	bne.n	8001960 <menu+0x5c4>
			if(dilSecim == 0) {
 8001918:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <menu+0x680>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001920:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <menu+0x698>)
 8001922:	2101      	movs	r1, #1
 8001924:	2002      	movs	r0, #2
 8001926:	f7fe ff47 	bl	80007b8 <lcd_print>
 800192a:	e008      	b.n	800193e <menu+0x5a2>
			} else if(dilSecim == 1) {
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <menu+0x680>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d104      	bne.n	800193e <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001934:	4a40      	ldr	r2, [pc, #256]	; (8001a38 <menu+0x69c>)
 8001936:	2101      	movs	r1, #1
 8001938:	2002      	movs	r0, #2
 800193a:	f7fe ff3d 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800193e:	4a39      	ldr	r2, [pc, #228]	; (8001a24 <menu+0x688>)
 8001940:	210f      	movs	r1, #15
 8001942:	2002      	movs	r0, #2
 8001944:	f7fe ff38 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <menu+0x6a0>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	220a      	movs	r2, #10
 800194e:	4937      	ldr	r1, [pc, #220]	; (8001a2c <menu+0x690>)
 8001950:	4618      	mov	r0, r3
 8001952:	f00a fd31 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 8001956:	4a35      	ldr	r2, [pc, #212]	; (8001a2c <menu+0x690>)
 8001958:	210e      	movs	r1, #14
 800195a:	2002      	movs	r0, #2
 800195c:	f7fe ff2c 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001960:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <menu+0x694>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b08      	cmp	r3, #8
 8001966:	d123      	bne.n	80019b0 <menu+0x614>
			if(dilSecim == 0) {
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <menu+0x680>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001970:	4a33      	ldr	r2, [pc, #204]	; (8001a40 <menu+0x6a4>)
 8001972:	2101      	movs	r1, #1
 8001974:	2002      	movs	r0, #2
 8001976:	f7fe ff1f 	bl	80007b8 <lcd_print>
 800197a:	e008      	b.n	800198e <menu+0x5f2>
			} else if(dilSecim == 1) {
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <menu+0x680>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d104      	bne.n	800198e <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001984:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <menu+0x6a8>)
 8001986:	2101      	movs	r1, #1
 8001988:	2002      	movs	r0, #2
 800198a:	f7fe ff15 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <menu+0x688>)
 8001990:	210f      	movs	r1, #15
 8001992:	2002      	movs	r0, #2
 8001994:	f7fe ff10 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <menu+0x6ac>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	220a      	movs	r2, #10
 800199e:	4923      	ldr	r1, [pc, #140]	; (8001a2c <menu+0x690>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00a fd09 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 80019a6:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <menu+0x690>)
 80019a8:	210e      	movs	r1, #14
 80019aa:	2002      	movs	r0, #2
 80019ac:	f7fe ff04 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <menu+0x694>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d123      	bne.n	8001a00 <menu+0x664>
			if(dilSecim == 0) {
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <menu+0x680>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80019c0:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <menu+0x6b0>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	2002      	movs	r0, #2
 80019c6:	f7fe fef7 	bl	80007b8 <lcd_print>
 80019ca:	e008      	b.n	80019de <menu+0x642>
			} else if(dilSecim == 1) {
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <menu+0x680>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d104      	bne.n	80019de <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80019d4:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <menu+0x6b4>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f7fe feed 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <menu+0x6b8>)
 80019e0:	2110      	movs	r1, #16
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7fe fee8 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <menu+0x6bc>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	220a      	movs	r2, #10
 80019ee:	490f      	ldr	r1, [pc, #60]	; (8001a2c <menu+0x690>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00a fce1 	bl	800c3b8 <itoa>
			lcd_print(2, 15, snum);
 80019f6:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <menu+0x690>)
 80019f8:	210f      	movs	r1, #15
 80019fa:	2002      	movs	r0, #2
 80019fc:	f7fe fedc 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <menu+0x694>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b0a      	cmp	r3, #10
 8001a06:	d134      	bne.n	8001a72 <menu+0x6d6>
			if(dilSecim == 0) {
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <menu+0x680>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d127      	bne.n	8001a60 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <menu+0x6c0>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	2002      	movs	r0, #2
 8001a16:	f7fe fecf 	bl	80007b8 <lcd_print>
 8001a1a:	e02a      	b.n	8001a72 <menu+0x6d6>
 8001a1c:	20000331 	.word	0x20000331
 8001a20:	0800d128 	.word	0x0800d128
 8001a24:	0800d094 	.word	0x0800d094
 8001a28:	20000338 	.word	0x20000338
 8001a2c:	20000288 	.word	0x20000288
 8001a30:	20000312 	.word	0x20000312
 8001a34:	0800d138 	.word	0x0800d138
 8001a38:	0800d148 	.word	0x0800d148
 8001a3c:	20000339 	.word	0x20000339
 8001a40:	0800d158 	.word	0x0800d158
 8001a44:	0800d168 	.word	0x0800d168
 8001a48:	2000033a 	.word	0x2000033a
 8001a4c:	0800d178 	.word	0x0800d178
 8001a50:	0800d188 	.word	0x0800d188
 8001a54:	0800d198 	.word	0x0800d198
 8001a58:	2000033b 	.word	0x2000033b
 8001a5c:	0800d19c 	.word	0x0800d19c
			} else if(dilSecim == 1) {
 8001a60:	4b82      	ldr	r3, [pc, #520]	; (8001c6c <menu+0x8d0>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d104      	bne.n	8001a72 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001a68:	4a81      	ldr	r2, [pc, #516]	; (8001c70 <menu+0x8d4>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7fe fea3 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a72:	2102      	movs	r1, #2
 8001a74:	487f      	ldr	r0, [pc, #508]	; (8001c74 <menu+0x8d8>)
 8001a76:	f007 fc73 	bl	8009360 <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d119      	bne.n	8001ab4 <menu+0x718>
 8001a80:	4b7d      	ldr	r3, [pc, #500]	; (8001c78 <menu+0x8dc>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f083 0301 	eor.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <menu+0x718>
 8001a8e:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <menu+0x8e0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10e      	bne.n	8001ab4 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a96:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <menu+0x8e4>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b78      	ldr	r3, [pc, #480]	; (8001c80 <menu+0x8e4>)
 8001aa0:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001aa2:	4b77      	ldr	r3, [pc, #476]	; (8001c80 <menu+0x8e4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b0a      	cmp	r3, #10
 8001aa8:	d902      	bls.n	8001ab0 <menu+0x714>
				hataGostermeSirasi = 0;
 8001aaa:	4b75      	ldr	r3, [pc, #468]	; (8001c80 <menu+0x8e4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ab0:	f003 fe80 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	486f      	ldr	r0, [pc, #444]	; (8001c74 <menu+0x8d8>)
 8001ab8:	f007 fc52 	bl	8009360 <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d119      	bne.n	8001af6 <menu+0x75a>
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <menu+0x8dc>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	f083 0301 	eor.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d012      	beq.n	8001af6 <menu+0x75a>
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <menu+0x8e0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10e      	bne.n	8001af6 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001ad8:	4b69      	ldr	r3, [pc, #420]	; (8001c80 <menu+0x8e4>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <menu+0x8e4>)
 8001ae2:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001ae4:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <menu+0x8e4>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b0b      	cmp	r3, #11
 8001aea:	d902      	bls.n	8001af2 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001aec:	4b64      	ldr	r3, [pc, #400]	; (8001c80 <menu+0x8e4>)
 8001aee:	220a      	movs	r2, #10
 8001af0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001af2:	f003 fe5f 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001af6:	2108      	movs	r1, #8
 8001af8:	485e      	ldr	r0, [pc, #376]	; (8001c74 <menu+0x8d8>)
 8001afa:	f007 fc31 	bl	8009360 <HAL_GPIO_ReadPin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d153      	bne.n	8001bac <menu+0x810>
 8001b04:	4b5c      	ldr	r3, [pc, #368]	; (8001c78 <menu+0x8dc>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d04c      	beq.n	8001bac <menu+0x810>
 8001b12:	4b5b      	ldr	r3, [pc, #364]	; (8001c80 <menu+0x8e4>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b0a      	cmp	r3, #10
 8001b18:	d148      	bne.n	8001bac <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b1a:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <menu+0x8e8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <menu+0x8ec>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b28:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <menu+0x8f0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	4b56      	ldr	r3, [pc, #344]	; (8001c88 <menu+0x8ec>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <menu+0x8f4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	4b52      	ldr	r3, [pc, #328]	; (8001c88 <menu+0x8ec>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <menu+0x8f8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <menu+0x8ec>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b52:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <menu+0x8fc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <menu+0x8ec>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <menu+0x900>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <menu+0x8ec>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001b6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <menu+0x904>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <menu+0x8ec>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b7c:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <menu+0x908>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <menu+0x8ec>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <menu+0x90c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <menu+0x8ec>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <menu+0x910>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <menu+0x8ec>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <menu+0x914>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001bac:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <menu+0x918>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	f040 80fc 	bne.w	8001dae <menu+0xa12>
		if(dilSecim == 0) {
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <menu+0x8d0>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001bbe:	4a3e      	ldr	r2, [pc, #248]	; (8001cb8 <menu+0x91c>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f7fe fdf8 	bl	80007b8 <lcd_print>
 8001bc8:	e008      	b.n	8001bdc <menu+0x840>
		} else if(dilSecim == 1) {
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <menu+0x8d0>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d104      	bne.n	8001bdc <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001bd2:	4a3a      	ldr	r2, [pc, #232]	; (8001cbc <menu+0x920>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7fe fdee 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <menu+0x8e0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d003      	beq.n	8001bec <menu+0x850>
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <menu+0x8e0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d112      	bne.n	8001c12 <menu+0x876>
			if(dilSecim == 0) {
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <menu+0x8d0>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001bf4:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <menu+0x924>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f7fe fddd 	bl	80007b8 <lcd_print>
 8001bfe:	e008      	b.n	8001c12 <menu+0x876>
			} else if(dilSecim == 1) {
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <menu+0x8d0>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d104      	bne.n	8001c12 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001c08:	4a2e      	ldr	r2, [pc, #184]	; (8001cc4 <menu+0x928>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f7fe fdd3 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <menu+0x92c>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <menu+0x8ac>
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <menu+0x8e0>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d112      	bne.n	8001c48 <menu+0x8ac>
			if(dilSecim == 0) {
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <menu+0x8d0>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <menu+0x930>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f7fe fdc2 	bl	80007b8 <lcd_print>
 8001c34:	e008      	b.n	8001c48 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <menu+0x8d0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d104      	bne.n	8001c48 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001c3e:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <menu+0x934>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	2002      	movs	r0, #2
 8001c44:	f7fe fdb8 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <menu+0x92c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d14c      	bne.n	8001cea <menu+0x94e>
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <menu+0x8e0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d148      	bne.n	8001cea <menu+0x94e>
			if(dilSecim == 0) {
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <menu+0x8d0>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d13b      	bne.n	8001cd8 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <menu+0x938>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7fe fda7 	bl	80007b8 <lcd_print>
 8001c6a:	e03e      	b.n	8001cea <menu+0x94e>
 8001c6c:	20000331 	.word	0x20000331
 8001c70:	0800d1b0 	.word	0x0800d1b0
 8001c74:	40010800 	.word	0x40010800
 8001c78:	2000033f 	.word	0x2000033f
 8001c7c:	2000031f 	.word	0x2000031f
 8001c80:	20000312 	.word	0x20000312
 8001c84:	20000332 	.word	0x20000332
 8001c88:	20000218 	.word	0x20000218
 8001c8c:	20000333 	.word	0x20000333
 8001c90:	20000334 	.word	0x20000334
 8001c94:	20000335 	.word	0x20000335
 8001c98:	20000336 	.word	0x20000336
 8001c9c:	20000337 	.word	0x20000337
 8001ca0:	20000338 	.word	0x20000338
 8001ca4:	20000339 	.word	0x20000339
 8001ca8:	2000033a 	.word	0x2000033a
 8001cac:	2000033b 	.word	0x2000033b
 8001cb0:	2000033c 	.word	0x2000033c
 8001cb4:	20000310 	.word	0x20000310
 8001cb8:	0800d1c4 	.word	0x0800d1c4
 8001cbc:	0800d1d8 	.word	0x0800d1d8
 8001cc0:	0800d1ec 	.word	0x0800d1ec
 8001cc4:	0800d200 	.word	0x0800d200
 8001cc8:	20000311 	.word	0x20000311
 8001ccc:	0800d214 	.word	0x0800d214
 8001cd0:	0800d224 	.word	0x0800d224
 8001cd4:	0800d234 	.word	0x0800d234
			} else if(dilSecim == 1) {
 8001cd8:	4b98      	ldr	r3, [pc, #608]	; (8001f3c <menu+0xba0>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d104      	bne.n	8001cea <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001ce0:	4a97      	ldr	r2, [pc, #604]	; (8001f40 <menu+0xba4>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7fe fd67 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cea:	2102      	movs	r1, #2
 8001cec:	4895      	ldr	r0, [pc, #596]	; (8001f44 <menu+0xba8>)
 8001cee:	f007 fb37 	bl	8009360 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d119      	bne.n	8001d2c <menu+0x990>
 8001cf8:	4b93      	ldr	r3, [pc, #588]	; (8001f48 <menu+0xbac>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d012      	beq.n	8001d2c <menu+0x990>
 8001d06:	4b91      	ldr	r3, [pc, #580]	; (8001f4c <menu+0xbb0>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10e      	bne.n	8001d2c <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001d0e:	4b90      	ldr	r3, [pc, #576]	; (8001f50 <menu+0xbb4>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4b8e      	ldr	r3, [pc, #568]	; (8001f50 <menu+0xbb4>)
 8001d18:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001d1a:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <menu+0xbb4>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d902      	bls.n	8001d28 <menu+0x98c>
				calismaSekli = 0;
 8001d22:	4b8b      	ldr	r3, [pc, #556]	; (8001f50 <menu+0xbb4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d28:	f003 fd44 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4885      	ldr	r0, [pc, #532]	; (8001f44 <menu+0xba8>)
 8001d30:	f007 fb16 	bl	8009360 <HAL_GPIO_ReadPin>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d119      	bne.n	8001d6e <menu+0x9d2>
 8001d3a:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <menu+0xbac>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f083 0301 	eor.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <menu+0x9d2>
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <menu+0xbb0>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10e      	bne.n	8001d6e <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d50:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <menu+0xbb4>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <menu+0xbb4>)
 8001d5a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d5c:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <menu+0xbb4>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <menu+0x9ce>
	    		calismaSekli = 1;
 8001d64:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <menu+0xbb4>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d6a:	f003 fd23 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d6e:	2108      	movs	r1, #8
 8001d70:	4874      	ldr	r0, [pc, #464]	; (8001f44 <menu+0xba8>)
 8001d72:	f007 faf5 	bl	8009360 <HAL_GPIO_ReadPin>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d118      	bne.n	8001dae <menu+0xa12>
 8001d7c:	4b72      	ldr	r3, [pc, #456]	; (8001f48 <menu+0xbac>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	f083 0301 	eor.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d011      	beq.n	8001dae <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <menu+0xbb4>)
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <menu+0xbb8>)
 8001d90:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d92:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <menu+0xbb4>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d106      	bne.n	8001da8 <menu+0xa0c>
				altLimit = 1;
 8001d9a:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <menu+0xbbc>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001da0:	4b6d      	ldr	r3, [pc, #436]	; (8001f58 <menu+0xbbc>)
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <menu+0xbb8>)
 8001da6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001da8:	4b6c      	ldr	r3, [pc, #432]	; (8001f5c <menu+0xbc0>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001dae:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <menu+0xbc4>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	f040 8083 	bne.w	8001ebe <menu+0xb22>
		if(dilSecim == 0) {
 8001db8:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <menu+0xba0>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001dc0:	4a68      	ldr	r2, [pc, #416]	; (8001f64 <menu+0xbc8>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7fe fcf7 	bl	80007b8 <lcd_print>
 8001dca:	e008      	b.n	8001dde <menu+0xa42>
		} else if(dilSecim == 1) {
 8001dcc:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <menu+0xba0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d104      	bne.n	8001dde <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001dd4:	4a64      	ldr	r2, [pc, #400]	; (8001f68 <menu+0xbcc>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7fe fced 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <menu+0xbd0>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d113      	bne.n	8001e0e <menu+0xa72>
			if(dilSecim == 0) {
 8001de6:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <menu+0xba0>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001dee:	4a60      	ldr	r2, [pc, #384]	; (8001f70 <menu+0xbd4>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	2002      	movs	r0, #2
 8001df4:	f7fe fce0 	bl	80007b8 <lcd_print>
 8001df8:	e012      	b.n	8001e20 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001dfa:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <menu+0xba0>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10e      	bne.n	8001e20 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001e02:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <menu+0xbd8>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	2002      	movs	r0, #2
 8001e08:	f7fe fcd6 	bl	80007b8 <lcd_print>
 8001e0c:	e008      	b.n	8001e20 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001e0e:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <menu+0xbd0>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d104      	bne.n	8001e20 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001e16:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <menu+0xbdc>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f7fe fccc 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e20:	2102      	movs	r1, #2
 8001e22:	4848      	ldr	r0, [pc, #288]	; (8001f44 <menu+0xba8>)
 8001e24:	f007 fa9c 	bl	8009360 <HAL_GPIO_ReadPin>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d115      	bne.n	8001e5a <menu+0xabe>
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <menu+0xbac>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f083 0301 	eor.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e3c:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <menu+0xbd0>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b49      	ldr	r3, [pc, #292]	; (8001f6c <menu+0xbd0>)
 8001e46:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e48:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <menu+0xbd0>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d902      	bls.n	8001e56 <menu+0xaba>
				emniyetCercevesi = 0;
 8001e50:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <menu+0xbd0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e56:	f003 fcad 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4839      	ldr	r0, [pc, #228]	; (8001f44 <menu+0xba8>)
 8001e5e:	f007 fa7f 	bl	8009360 <HAL_GPIO_ReadPin>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d115      	bne.n	8001e94 <menu+0xaf8>
 8001e68:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <menu+0xbac>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	f083 0301 	eor.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00e      	beq.n	8001e94 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <menu+0xbd0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <menu+0xbd0>)
 8001e80:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <menu+0xbd0>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <menu+0xbd0>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e90:	f003 fc90 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e94:	2108      	movs	r1, #8
 8001e96:	482b      	ldr	r0, [pc, #172]	; (8001f44 <menu+0xba8>)
 8001e98:	f007 fa62 	bl	8009360 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d10d      	bne.n	8001ebe <menu+0xb22>
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <menu+0xbac>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	f083 0301 	eor.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <menu+0xbd0>)
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <menu+0xbb8>)
 8001eb6:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <menu+0xbc0>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <menu+0xbc4>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	f040 80ba 	bne.w	800203c <menu+0xca0>
		if(dilSecim == 0) {
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <menu+0xba0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	; (8001f7c <menu+0xbe0>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7fe fc6f 	bl	80007b8 <lcd_print>
 8001eda:	e008      	b.n	8001eee <menu+0xb52>
		} else if(dilSecim == 1) {
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <menu+0xba0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d104      	bne.n	8001eee <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001ee4:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <menu+0xbe4>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7fe fc65 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <menu+0xbe8>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d113      	bne.n	8001f1e <menu+0xb82>
			if(dilSecim == 0) {
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <menu+0xba0>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <menu+0xbd4>)
 8001f00:	2101      	movs	r1, #1
 8001f02:	2002      	movs	r0, #2
 8001f04:	f7fe fc58 	bl	80007b8 <lcd_print>
 8001f08:	e049      	b.n	8001f9e <menu+0xc02>
			} else if(dilSecim == 1) {
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <menu+0xba0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d145      	bne.n	8001f9e <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <menu+0xbd8>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	2002      	movs	r0, #2
 8001f18:	f7fe fc4e 	bl	80007b8 <lcd_print>
 8001f1c:	e03f      	b.n	8001f9e <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <menu+0xbe8>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d13b      	bne.n	8001f9e <menu+0xc02>
			if(dilSecim == 0) {
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <menu+0xba0>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d12e      	bne.n	8001f8c <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <menu+0xbec>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	2002      	movs	r0, #2
 8001f34:	f7fe fc40 	bl	80007b8 <lcd_print>
 8001f38:	e031      	b.n	8001f9e <menu+0xc02>
 8001f3a:	bf00      	nop
 8001f3c:	20000331 	.word	0x20000331
 8001f40:	0800d244 	.word	0x0800d244
 8001f44:	40010800 	.word	0x40010800
 8001f48:	2000033f 	.word	0x2000033f
 8001f4c:	2000031f 	.word	0x2000031f
 8001f50:	20000311 	.word	0x20000311
 8001f54:	20000218 	.word	0x20000218
 8001f58:	20000316 	.word	0x20000316
 8001f5c:	2000033c 	.word	0x2000033c
 8001f60:	20000310 	.word	0x20000310
 8001f64:	0800d254 	.word	0x0800d254
 8001f68:	0800d268 	.word	0x0800d268
 8001f6c:	20000314 	.word	0x20000314
 8001f70:	0800d27c 	.word	0x0800d27c
 8001f74:	0800d290 	.word	0x0800d290
 8001f78:	0800d2a4 	.word	0x0800d2a4
 8001f7c:	0800d2b4 	.word	0x0800d2b4
 8001f80:	0800d2c8 	.word	0x0800d2c8
 8001f84:	20000315 	.word	0x20000315
 8001f88:	0800d2dc 	.word	0x0800d2dc
			} else if(dilSecim == 1) {
 8001f8c:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <menu+0xe3c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d104      	bne.n	8001f9e <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001f94:	4a91      	ldr	r2, [pc, #580]	; (80021dc <menu+0xe40>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	2002      	movs	r0, #2
 8001f9a:	f7fe fc0d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	488f      	ldr	r0, [pc, #572]	; (80021e0 <menu+0xe44>)
 8001fa2:	f007 f9dd 	bl	8009360 <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d115      	bne.n	8001fd8 <menu+0xc3c>
 8001fac:	4b8d      	ldr	r3, [pc, #564]	; (80021e4 <menu+0xe48>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	f083 0301 	eor.w	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00e      	beq.n	8001fd8 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001fba:	4b8b      	ldr	r3, [pc, #556]	; (80021e8 <menu+0xe4c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b89      	ldr	r3, [pc, #548]	; (80021e8 <menu+0xe4c>)
 8001fc4:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001fc6:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <menu+0xe4c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d902      	bls.n	8001fd4 <menu+0xc38>
				yavaslamaLimit = 0;
 8001fce:	4b86      	ldr	r3, [pc, #536]	; (80021e8 <menu+0xe4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fd4:	f003 fbee 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fd8:	2104      	movs	r1, #4
 8001fda:	4881      	ldr	r0, [pc, #516]	; (80021e0 <menu+0xe44>)
 8001fdc:	f007 f9c0 	bl	8009360 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d115      	bne.n	8002012 <menu+0xc76>
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	; (80021e4 <menu+0xe48>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <menu+0xe4c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <menu+0xe4c>)
 8001ffe:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002000:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <menu+0xe4c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002008:	4b77      	ldr	r3, [pc, #476]	; (80021e8 <menu+0xe4c>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800200e:	f003 fbd1 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002012:	2108      	movs	r1, #8
 8002014:	4872      	ldr	r0, [pc, #456]	; (80021e0 <menu+0xe44>)
 8002016:	f007 f9a3 	bl	8009360 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	2b01      	cmp	r3, #1
 800201e:	d10d      	bne.n	800203c <menu+0xca0>
 8002020:	4b70      	ldr	r3, [pc, #448]	; (80021e4 <menu+0xe48>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	f083 0301 	eor.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800202e:	4b6e      	ldr	r3, [pc, #440]	; (80021e8 <menu+0xe4c>)
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	4b6e      	ldr	r3, [pc, #440]	; (80021ec <menu+0xe50>)
 8002034:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <menu+0xe54>)
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 800203c:	4b6d      	ldr	r3, [pc, #436]	; (80021f4 <menu+0xe58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b05      	cmp	r3, #5
 8002042:	f040 80b9 	bne.w	80021b8 <menu+0xe1c>
		if(dilSecim == 0) {
 8002046:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <menu+0xe3c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800204e:	4a6a      	ldr	r2, [pc, #424]	; (80021f8 <menu+0xe5c>)
 8002050:	2101      	movs	r1, #1
 8002052:	2001      	movs	r0, #1
 8002054:	f7fe fbb0 	bl	80007b8 <lcd_print>
 8002058:	e008      	b.n	800206c <menu+0xcd0>
		} else if(dilSecim == 1) {
 800205a:	4b5f      	ldr	r3, [pc, #380]	; (80021d8 <menu+0xe3c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d104      	bne.n	800206c <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002062:	4a66      	ldr	r2, [pc, #408]	; (80021fc <menu+0xe60>)
 8002064:	2101      	movs	r1, #1
 8002066:	2001      	movs	r0, #1
 8002068:	f7fe fba6 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 800206c:	4b64      	ldr	r3, [pc, #400]	; (8002200 <menu+0xe64>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d113      	bne.n	800209c <menu+0xd00>
			if(dilSecim == 0) {
 8002074:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <menu+0xe3c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 800207c:	4a61      	ldr	r2, [pc, #388]	; (8002204 <menu+0xe68>)
 800207e:	2101      	movs	r1, #1
 8002080:	2002      	movs	r0, #2
 8002082:	f7fe fb99 	bl	80007b8 <lcd_print>
 8002086:	e020      	b.n	80020ca <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <menu+0xe3c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d11c      	bne.n	80020ca <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002090:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <menu+0xe6c>)
 8002092:	2101      	movs	r1, #1
 8002094:	2002      	movs	r0, #2
 8002096:	f7fe fb8f 	bl	80007b8 <lcd_print>
 800209a:	e016      	b.n	80020ca <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 800209c:	4b58      	ldr	r3, [pc, #352]	; (8002200 <menu+0xe64>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d112      	bne.n	80020ca <menu+0xd2e>
			if(dilSecim == 0){
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <menu+0xe3c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80020ac:	4a57      	ldr	r2, [pc, #348]	; (800220c <menu+0xe70>)
 80020ae:	2101      	movs	r1, #1
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7fe fb81 	bl	80007b8 <lcd_print>
 80020b6:	e008      	b.n	80020ca <menu+0xd2e>
			} else if(dilSecim == 1){
 80020b8:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <menu+0xe3c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d104      	bne.n	80020ca <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80020c0:	4a46      	ldr	r2, [pc, #280]	; (80021dc <menu+0xe40>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2002      	movs	r0, #2
 80020c6:	f7fe fb77 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80020ca:	2102      	movs	r1, #2
 80020cc:	4844      	ldr	r0, [pc, #272]	; (80021e0 <menu+0xe44>)
 80020ce:	f007 f947 	bl	8009360 <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d119      	bne.n	800210c <menu+0xd70>
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <menu+0xe48>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	f083 0301 	eor.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <menu+0xd70>
 80020e6:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <menu+0xe74>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10e      	bne.n	800210c <menu+0xd70>
			altLimit = altLimit + 1;
 80020ee:	4b44      	ldr	r3, [pc, #272]	; (8002200 <menu+0xe64>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b42      	ldr	r3, [pc, #264]	; (8002200 <menu+0xe64>)
 80020f8:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <menu+0xe64>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d902      	bls.n	8002108 <menu+0xd6c>
				altLimit = 0;
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <menu+0xe64>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002108:	f003 fb54 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800210c:	2104      	movs	r1, #4
 800210e:	4834      	ldr	r0, [pc, #208]	; (80021e0 <menu+0xe44>)
 8002110:	f007 f926 	bl	8009360 <HAL_GPIO_ReadPin>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d119      	bne.n	800214e <menu+0xdb2>
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <menu+0xe48>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	f083 0301 	eor.w	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <menu+0xdb2>
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <menu+0xe74>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10e      	bne.n	800214e <menu+0xdb2>
			altLimit = altLimit - 1;
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <menu+0xe64>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	3b01      	subs	r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b31      	ldr	r3, [pc, #196]	; (8002200 <menu+0xe64>)
 800213a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <menu+0xe64>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <menu+0xdae>
		   		altLimit = 1;
 8002144:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <menu+0xe64>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800214a:	f003 fb33 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800214e:	2108      	movs	r1, #8
 8002150:	4823      	ldr	r0, [pc, #140]	; (80021e0 <menu+0xe44>)
 8002152:	f007 f905 	bl	8009360 <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	2b01      	cmp	r3, #1
 800215a:	d12d      	bne.n	80021b8 <menu+0xe1c>
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <menu+0xe48>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d026      	beq.n	80021b8 <menu+0xe1c>
			eepromData[5] = altLimit;
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <menu+0xe64>)
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <menu+0xe50>)
 8002170:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <menu+0xe64>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d110      	bne.n	800219c <menu+0xe00>
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <menu+0xe78>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <menu+0xdee>
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <menu+0xe78>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d108      	bne.n	800219c <menu+0xe00>
				kapiTablaAcKonum = 3;
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <menu+0xe78>)
 800218c:	2203      	movs	r2, #3
 800218e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002190:	4b20      	ldr	r3, [pc, #128]	; (8002214 <menu+0xe78>)
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <menu+0xe50>)
 8002196:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800219a:	e00a      	b.n	80021b2 <menu+0xe16>
			} else if(altLimit == 0) {
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <menu+0xe64>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <menu+0xe16>
				platformSilindirTipi = 0;
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <menu+0xe7c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <menu+0xe7c>)
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <menu+0xe50>)
 80021b0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <menu+0xe54>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <menu+0xe58>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b06      	cmp	r3, #6
 80021be:	f040 80b6 	bne.w	800232e <menu+0xf92>
		if(dilSecim == 0) {
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <menu+0xe3c>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d12a      	bne.n	8002220 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80021ca:	4a14      	ldr	r2, [pc, #80]	; (800221c <menu+0xe80>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7fe faf2 	bl	80007b8 <lcd_print>
 80021d4:	e02d      	b.n	8002232 <menu+0xe96>
 80021d6:	bf00      	nop
 80021d8:	20000331 	.word	0x20000331
 80021dc:	0800d2f0 	.word	0x0800d2f0
 80021e0:	40010800 	.word	0x40010800
 80021e4:	2000033f 	.word	0x2000033f
 80021e8:	20000315 	.word	0x20000315
 80021ec:	20000218 	.word	0x20000218
 80021f0:	2000033c 	.word	0x2000033c
 80021f4:	20000310 	.word	0x20000310
 80021f8:	0800d304 	.word	0x0800d304
 80021fc:	0800d318 	.word	0x0800d318
 8002200:	20000316 	.word	0x20000316
 8002204:	0800d27c 	.word	0x0800d27c
 8002208:	0800d290 	.word	0x0800d290
 800220c:	0800d2dc 	.word	0x0800d2dc
 8002210:	20000311 	.word	0x20000311
 8002214:	2000031d 	.word	0x2000031d
 8002218:	20000323 	.word	0x20000323
 800221c:	0800d32c 	.word	0x0800d32c
		} else if(dilSecim == 1){
 8002220:	4b7a      	ldr	r3, [pc, #488]	; (800240c <menu+0x1070>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d104      	bne.n	8002232 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002228:	4a79      	ldr	r2, [pc, #484]	; (8002410 <menu+0x1074>)
 800222a:	2101      	movs	r1, #1
 800222c:	2001      	movs	r0, #1
 800222e:	f7fe fac3 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 8002232:	4b78      	ldr	r3, [pc, #480]	; (8002414 <menu+0x1078>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d113      	bne.n	8002262 <menu+0xec6>
			if(dilSecim == 0) {
 800223a:	4b74      	ldr	r3, [pc, #464]	; (800240c <menu+0x1070>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002242:	4a75      	ldr	r2, [pc, #468]	; (8002418 <menu+0x107c>)
 8002244:	2101      	movs	r1, #1
 8002246:	2002      	movs	r0, #2
 8002248:	f7fe fab6 	bl	80007b8 <lcd_print>
 800224c:	e020      	b.n	8002290 <menu+0xef4>
			} else if(dilSecim == 1){
 800224e:	4b6f      	ldr	r3, [pc, #444]	; (800240c <menu+0x1070>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d11c      	bne.n	8002290 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002256:	4a71      	ldr	r2, [pc, #452]	; (800241c <menu+0x1080>)
 8002258:	2101      	movs	r1, #1
 800225a:	2002      	movs	r0, #2
 800225c:	f7fe faac 	bl	80007b8 <lcd_print>
 8002260:	e016      	b.n	8002290 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002262:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <menu+0x1078>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d112      	bne.n	8002290 <menu+0xef4>
			if(dilSecim == 0) {
 800226a:	4b68      	ldr	r3, [pc, #416]	; (800240c <menu+0x1070>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002272:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <menu+0x1084>)
 8002274:	2101      	movs	r1, #1
 8002276:	2002      	movs	r0, #2
 8002278:	f7fe fa9e 	bl	80007b8 <lcd_print>
 800227c:	e008      	b.n	8002290 <menu+0xef4>
			} else if(dilSecim == 1) {
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <menu+0x1070>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d104      	bne.n	8002290 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002286:	4a67      	ldr	r2, [pc, #412]	; (8002424 <menu+0x1088>)
 8002288:	2101      	movs	r1, #1
 800228a:	2002      	movs	r0, #2
 800228c:	f7fe fa94 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002290:	2102      	movs	r1, #2
 8002292:	4865      	ldr	r0, [pc, #404]	; (8002428 <menu+0x108c>)
 8002294:	f007 f864 	bl	8009360 <HAL_GPIO_ReadPin>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d115      	bne.n	80022ca <menu+0xf2e>
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <menu+0x1090>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <menu+0x1078>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b57      	ldr	r3, [pc, #348]	; (8002414 <menu+0x1078>)
 80022b6:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80022b8:	4b56      	ldr	r3, [pc, #344]	; (8002414 <menu+0x1078>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d902      	bls.n	80022c6 <menu+0xf2a>
				basincSalteri = 0;
 80022c0:	4b54      	ldr	r3, [pc, #336]	; (8002414 <menu+0x1078>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022c6:	f003 fa75 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ca:	2104      	movs	r1, #4
 80022cc:	4856      	ldr	r0, [pc, #344]	; (8002428 <menu+0x108c>)
 80022ce:	f007 f847 	bl	8009360 <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d115      	bne.n	8002304 <menu+0xf68>
 80022d8:	4b54      	ldr	r3, [pc, #336]	; (800242c <menu+0x1090>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f083 0301 	eor.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00e      	beq.n	8002304 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80022e6:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <menu+0x1078>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b49      	ldr	r3, [pc, #292]	; (8002414 <menu+0x1078>)
 80022f0:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80022f2:	4b48      	ldr	r3, [pc, #288]	; (8002414 <menu+0x1078>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <menu+0xf64>
		   		basincSalteri = 1;
 80022fa:	4b46      	ldr	r3, [pc, #280]	; (8002414 <menu+0x1078>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002300:	f003 fa58 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002304:	2108      	movs	r1, #8
 8002306:	4848      	ldr	r0, [pc, #288]	; (8002428 <menu+0x108c>)
 8002308:	f007 f82a 	bl	8009360 <HAL_GPIO_ReadPin>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10d      	bne.n	800232e <menu+0xf92>
 8002312:	4b46      	ldr	r3, [pc, #280]	; (800242c <menu+0x1090>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f083 0301 	eor.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002320:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <menu+0x1078>)
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <menu+0x1094>)
 8002326:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <menu+0x1098>)
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800232e:	4b42      	ldr	r3, [pc, #264]	; (8002438 <menu+0x109c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b07      	cmp	r3, #7
 8002334:	f040 80f5 	bne.w	8002522 <menu+0x1186>
		if(dilSecim == 0) {
 8002338:	4b34      	ldr	r3, [pc, #208]	; (800240c <menu+0x1070>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002340:	4a3e      	ldr	r2, [pc, #248]	; (800243c <menu+0x10a0>)
 8002342:	2101      	movs	r1, #1
 8002344:	2001      	movs	r0, #1
 8002346:	f7fe fa37 	bl	80007b8 <lcd_print>
 800234a:	e008      	b.n	800235e <menu+0xfc2>
		} else if(dilSecim == 1){
 800234c:	4b2f      	ldr	r3, [pc, #188]	; (800240c <menu+0x1070>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d104      	bne.n	800235e <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002354:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <menu+0x10a4>)
 8002356:	2101      	movs	r1, #1
 8002358:	2001      	movs	r0, #1
 800235a:	f7fe fa2d 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <menu+0x10a8>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d113      	bne.n	800238e <menu+0xff2>
			if(dilSecim == 0) {
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <menu+0x1070>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800236e:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <menu+0x107c>)
 8002370:	2101      	movs	r1, #1
 8002372:	2002      	movs	r0, #2
 8002374:	f7fe fa20 	bl	80007b8 <lcd_print>
 8002378:	e079      	b.n	800246e <menu+0x10d2>
			} else if(dilSecim == 1){
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <menu+0x1070>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d175      	bne.n	800246e <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002382:	4a26      	ldr	r2, [pc, #152]	; (800241c <menu+0x1080>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f7fe fa16 	bl	80007b8 <lcd_print>
 800238c:	e06f      	b.n	800246e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <menu+0x10a8>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d113      	bne.n	80023be <menu+0x1022>
			if(dilSecim == 0) {
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <menu+0x1070>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d105      	bne.n	80023aa <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800239e:	4a2a      	ldr	r2, [pc, #168]	; (8002448 <menu+0x10ac>)
 80023a0:	2101      	movs	r1, #1
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7fe fa08 	bl	80007b8 <lcd_print>
 80023a8:	e061      	b.n	800246e <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <menu+0x1070>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d15d      	bne.n	800246e <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80023b2:	4a26      	ldr	r2, [pc, #152]	; (800244c <menu+0x10b0>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	2002      	movs	r0, #2
 80023b8:	f7fe f9fe 	bl	80007b8 <lcd_print>
 80023bc:	e057      	b.n	800246e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <menu+0x10a8>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d113      	bne.n	80023ee <menu+0x1052>
			if(dilSecim == 0) {
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <menu+0x1070>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80023ce:	4a20      	ldr	r2, [pc, #128]	; (8002450 <menu+0x10b4>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2002      	movs	r0, #2
 80023d4:	f7fe f9f0 	bl	80007b8 <lcd_print>
 80023d8:	e049      	b.n	800246e <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <menu+0x1070>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d145      	bne.n	800246e <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80023e2:	4a1c      	ldr	r2, [pc, #112]	; (8002454 <menu+0x10b8>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f7fe f9e6 	bl	80007b8 <lcd_print>
 80023ec:	e03f      	b.n	800246e <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <menu+0x10a8>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d13b      	bne.n	800246e <menu+0x10d2>
			if(dilSecim == 0) {
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <menu+0x1070>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d12e      	bne.n	800245c <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80023fe:	4a16      	ldr	r2, [pc, #88]	; (8002458 <menu+0x10bc>)
 8002400:	2101      	movs	r1, #1
 8002402:	2002      	movs	r0, #2
 8002404:	f7fe f9d8 	bl	80007b8 <lcd_print>
 8002408:	e031      	b.n	800246e <menu+0x10d2>
 800240a:	bf00      	nop
 800240c:	20000331 	.word	0x20000331
 8002410:	0800d33c 	.word	0x0800d33c
 8002414:	20000317 	.word	0x20000317
 8002418:	0800d27c 	.word	0x0800d27c
 800241c:	0800d290 	.word	0x0800d290
 8002420:	0800d2dc 	.word	0x0800d2dc
 8002424:	0800d2f0 	.word	0x0800d2f0
 8002428:	40010800 	.word	0x40010800
 800242c:	2000033f 	.word	0x2000033f
 8002430:	20000218 	.word	0x20000218
 8002434:	2000033c 	.word	0x2000033c
 8002438:	20000310 	.word	0x20000310
 800243c:	0800d34c 	.word	0x0800d34c
 8002440:	0800d360 	.word	0x0800d360
 8002444:	20000318 	.word	0x20000318
 8002448:	0800d374 	.word	0x0800d374
 800244c:	0800d388 	.word	0x0800d388
 8002450:	0800d39c 	.word	0x0800d39c
 8002454:	0800d3b0 	.word	0x0800d3b0
 8002458:	0800d3c4 	.word	0x0800d3c4
			} else if(dilSecim == 1){
 800245c:	4b99      	ldr	r3, [pc, #612]	; (80026c4 <menu+0x1328>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d104      	bne.n	800246e <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002464:	4a98      	ldr	r2, [pc, #608]	; (80026c8 <menu+0x132c>)
 8002466:	2101      	movs	r1, #1
 8002468:	2002      	movs	r0, #2
 800246a:	f7fe f9a5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800246e:	2102      	movs	r1, #2
 8002470:	4896      	ldr	r0, [pc, #600]	; (80026cc <menu+0x1330>)
 8002472:	f006 ff75 	bl	8009360 <HAL_GPIO_ReadPin>
 8002476:	4603      	mov	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d115      	bne.n	80024a8 <menu+0x110c>
 800247c:	4b94      	ldr	r3, [pc, #592]	; (80026d0 <menu+0x1334>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f083 0301 	eor.w	r3, r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00e      	beq.n	80024a8 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800248a:	4b92      	ldr	r3, [pc, #584]	; (80026d4 <menu+0x1338>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b90      	ldr	r3, [pc, #576]	; (80026d4 <menu+0x1338>)
 8002494:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002496:	4b8f      	ldr	r3, [pc, #572]	; (80026d4 <menu+0x1338>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d902      	bls.n	80024a4 <menu+0x1108>
				kapiSecimleri = 0;
 800249e:	4b8d      	ldr	r3, [pc, #564]	; (80026d4 <menu+0x1338>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024a4:	f003 f986 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024a8:	2104      	movs	r1, #4
 80024aa:	4888      	ldr	r0, [pc, #544]	; (80026cc <menu+0x1330>)
 80024ac:	f006 ff58 	bl	8009360 <HAL_GPIO_ReadPin>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d115      	bne.n	80024e2 <menu+0x1146>
 80024b6:	4b86      	ldr	r3, [pc, #536]	; (80026d0 <menu+0x1334>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f083 0301 	eor.w	r3, r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00e      	beq.n	80024e2 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80024c4:	4b83      	ldr	r3, [pc, #524]	; (80026d4 <menu+0x1338>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b81      	ldr	r3, [pc, #516]	; (80026d4 <menu+0x1338>)
 80024ce:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80024d0:	4b80      	ldr	r3, [pc, #512]	; (80026d4 <menu+0x1338>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d902      	bls.n	80024de <menu+0x1142>
		   		kapiSecimleri = 3;
 80024d8:	4b7e      	ldr	r3, [pc, #504]	; (80026d4 <menu+0x1338>)
 80024da:	2203      	movs	r2, #3
 80024dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024de:	f003 f969 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024e2:	2108      	movs	r1, #8
 80024e4:	4879      	ldr	r0, [pc, #484]	; (80026cc <menu+0x1330>)
 80024e6:	f006 ff3b 	bl	8009360 <HAL_GPIO_ReadPin>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d118      	bne.n	8002522 <menu+0x1186>
 80024f0:	4b77      	ldr	r3, [pc, #476]	; (80026d0 <menu+0x1334>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	f083 0301 	eor.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d011      	beq.n	8002522 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80024fe:	4b75      	ldr	r3, [pc, #468]	; (80026d4 <menu+0x1338>)
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	4b75      	ldr	r3, [pc, #468]	; (80026d8 <menu+0x133c>)
 8002504:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <menu+0x1338>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <menu+0x1180>
				altLimit = 1;
 800250e:	4b73      	ldr	r3, [pc, #460]	; (80026dc <menu+0x1340>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002514:	4b71      	ldr	r3, [pc, #452]	; (80026dc <menu+0x1340>)
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <menu+0x133c>)
 800251a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800251c:	4b70      	ldr	r3, [pc, #448]	; (80026e0 <menu+0x1344>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002522:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <menu+0x1348>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b08      	cmp	r3, #8
 8002528:	f040 8092 	bne.w	8002650 <menu+0x12b4>
		if(dilSecim == 0) {
 800252c:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <menu+0x1328>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002534:	4a6c      	ldr	r2, [pc, #432]	; (80026e8 <menu+0x134c>)
 8002536:	2101      	movs	r1, #1
 8002538:	2001      	movs	r0, #1
 800253a:	f7fe f93d 	bl	80007b8 <lcd_print>
 800253e:	e008      	b.n	8002552 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002540:	4b60      	ldr	r3, [pc, #384]	; (80026c4 <menu+0x1328>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d104      	bne.n	8002552 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002548:	4a68      	ldr	r2, [pc, #416]	; (80026ec <menu+0x1350>)
 800254a:	2101      	movs	r1, #1
 800254c:	2001      	movs	r0, #1
 800254e:	f7fe f933 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <menu+0x1354>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d113      	bne.n	8002582 <menu+0x11e6>
			if(dilSecim == 0) {
 800255a:	4b5a      	ldr	r3, [pc, #360]	; (80026c4 <menu+0x1328>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002562:	4a64      	ldr	r2, [pc, #400]	; (80026f4 <menu+0x1358>)
 8002564:	2101      	movs	r1, #1
 8002566:	2002      	movs	r0, #2
 8002568:	f7fe f926 	bl	80007b8 <lcd_print>
 800256c:	e020      	b.n	80025b0 <menu+0x1214>
			} else if(dilSecim == 1) {
 800256e:	4b55      	ldr	r3, [pc, #340]	; (80026c4 <menu+0x1328>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d11c      	bne.n	80025b0 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002576:	4a60      	ldr	r2, [pc, #384]	; (80026f8 <menu+0x135c>)
 8002578:	2101      	movs	r1, #1
 800257a:	2002      	movs	r0, #2
 800257c:	f7fe f91c 	bl	80007b8 <lcd_print>
 8002580:	e016      	b.n	80025b0 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002582:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <menu+0x1354>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d112      	bne.n	80025b0 <menu+0x1214>
			if(dilSecim == 0){
 800258a:	4b4e      	ldr	r3, [pc, #312]	; (80026c4 <menu+0x1328>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002592:	4a5a      	ldr	r2, [pc, #360]	; (80026fc <menu+0x1360>)
 8002594:	2101      	movs	r1, #1
 8002596:	2002      	movs	r0, #2
 8002598:	f7fe f90e 	bl	80007b8 <lcd_print>
 800259c:	e008      	b.n	80025b0 <menu+0x1214>
			} else if(dilSecim == 1){
 800259e:	4b49      	ldr	r3, [pc, #292]	; (80026c4 <menu+0x1328>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d104      	bne.n	80025b0 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80025a6:	4a56      	ldr	r2, [pc, #344]	; (8002700 <menu+0x1364>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	2002      	movs	r0, #2
 80025ac:	f7fe f904 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025b0:	2102      	movs	r1, #2
 80025b2:	4846      	ldr	r0, [pc, #280]	; (80026cc <menu+0x1330>)
 80025b4:	f006 fed4 	bl	8009360 <HAL_GPIO_ReadPin>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d115      	bne.n	80025ea <menu+0x124e>
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <menu+0x1334>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <menu+0x1354>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <menu+0x1354>)
 80025d6:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80025d8:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <menu+0x1354>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d902      	bls.n	80025e6 <menu+0x124a>
				kapiAcTipi = 0;
 80025e0:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <menu+0x1354>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025e6:	f003 f8e5 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ea:	2104      	movs	r1, #4
 80025ec:	4837      	ldr	r0, [pc, #220]	; (80026cc <menu+0x1330>)
 80025ee:	f006 feb7 	bl	8009360 <HAL_GPIO_ReadPin>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d115      	bne.n	8002624 <menu+0x1288>
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <menu+0x1334>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002606:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <menu+0x1354>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	3b01      	subs	r3, #1
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <menu+0x1354>)
 8002610:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <menu+0x1354>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <menu+0x1284>
		   		kapiAcTipi = 1;
 800261a:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <menu+0x1354>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002620:	f003 f8c8 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002624:	2108      	movs	r1, #8
 8002626:	4829      	ldr	r0, [pc, #164]	; (80026cc <menu+0x1330>)
 8002628:	f006 fe9a 	bl	8009360 <HAL_GPIO_ReadPin>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10e      	bne.n	8002650 <menu+0x12b4>
 8002632:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <menu+0x1334>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <menu+0x1354>)
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <menu+0x133c>)
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <menu+0x1344>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <menu+0x1348>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b09      	cmp	r3, #9
 8002656:	f040 80b9 	bne.w	80027cc <menu+0x1430>
		if(dilSecim == 0){
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <menu+0x1328>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002662:	4a28      	ldr	r2, [pc, #160]	; (8002704 <menu+0x1368>)
 8002664:	2101      	movs	r1, #1
 8002666:	2001      	movs	r0, #1
 8002668:	f7fe f8a6 	bl	80007b8 <lcd_print>
 800266c:	e008      	b.n	8002680 <menu+0x12e4>
		} else if(dilSecim == 1) {
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <menu+0x1328>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d104      	bne.n	8002680 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <menu+0x136c>)
 8002678:	2101      	movs	r1, #1
 800267a:	2001      	movs	r0, #1
 800267c:	f7fe f89c 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <menu+0x1370>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002688:	4a21      	ldr	r2, [pc, #132]	; (8002710 <menu+0x1374>)
 800268a:	2101      	movs	r1, #1
 800268c:	2002      	movs	r0, #2
 800268e:	f7fe f893 	bl	80007b8 <lcd_print>
 8002692:	e04c      	b.n	800272e <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <menu+0x1370>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d13f      	bne.n	800271c <menu+0x1380>
			if(dilSecim == 0){
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <menu+0x1328>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <menu+0x1378>)
 80026a6:	2101      	movs	r1, #1
 80026a8:	2002      	movs	r0, #2
 80026aa:	f7fe f885 	bl	80007b8 <lcd_print>
 80026ae:	e03e      	b.n	800272e <menu+0x1392>
			} else if(dilSecim == 1) {
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <menu+0x1328>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d13a      	bne.n	800272e <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <menu+0x137c>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	2002      	movs	r0, #2
 80026be:	f7fe f87b 	bl	80007b8 <lcd_print>
 80026c2:	e034      	b.n	800272e <menu+0x1392>
 80026c4:	20000331 	.word	0x20000331
 80026c8:	0800d3d8 	.word	0x0800d3d8
 80026cc:	40010800 	.word	0x40010800
 80026d0:	2000033f 	.word	0x2000033f
 80026d4:	20000318 	.word	0x20000318
 80026d8:	20000218 	.word	0x20000218
 80026dc:	20000316 	.word	0x20000316
 80026e0:	2000033c 	.word	0x2000033c
 80026e4:	20000310 	.word	0x20000310
 80026e8:	0800d3ec 	.word	0x0800d3ec
 80026ec:	0800d400 	.word	0x0800d400
 80026f0:	2000031c 	.word	0x2000031c
 80026f4:	0800d414 	.word	0x0800d414
 80026f8:	0800d424 	.word	0x0800d424
 80026fc:	0800d434 	.word	0x0800d434
 8002700:	0800d448 	.word	0x0800d448
 8002704:	0800d45c 	.word	0x0800d45c
 8002708:	0800d470 	.word	0x0800d470
 800270c:	20000319 	.word	0x20000319
 8002710:	0800d484 	.word	0x0800d484
 8002714:	0800d498 	.word	0x0800d498
 8002718:	0800d4a8 	.word	0x0800d4a8
			}
		} else if(kapi1Tip == 2) {
 800271c:	4b8a      	ldr	r3, [pc, #552]	; (8002948 <menu+0x15ac>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d104      	bne.n	800272e <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002724:	4a89      	ldr	r2, [pc, #548]	; (800294c <menu+0x15b0>)
 8002726:	2101      	movs	r1, #1
 8002728:	2002      	movs	r0, #2
 800272a:	f7fe f845 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800272e:	2102      	movs	r1, #2
 8002730:	4887      	ldr	r0, [pc, #540]	; (8002950 <menu+0x15b4>)
 8002732:	f006 fe15 	bl	8009360 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d115      	bne.n	8002768 <menu+0x13cc>
 800273c:	4b85      	ldr	r3, [pc, #532]	; (8002954 <menu+0x15b8>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00e      	beq.n	8002768 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800274a:	4b7f      	ldr	r3, [pc, #508]	; (8002948 <menu+0x15ac>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b7d      	ldr	r3, [pc, #500]	; (8002948 <menu+0x15ac>)
 8002754:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002756:	4b7c      	ldr	r3, [pc, #496]	; (8002948 <menu+0x15ac>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d902      	bls.n	8002764 <menu+0x13c8>
				kapi1Tip = 0;
 800275e:	4b7a      	ldr	r3, [pc, #488]	; (8002948 <menu+0x15ac>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002764:	f003 f826 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002768:	2104      	movs	r1, #4
 800276a:	4879      	ldr	r0, [pc, #484]	; (8002950 <menu+0x15b4>)
 800276c:	f006 fdf8 	bl	8009360 <HAL_GPIO_ReadPin>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d115      	bne.n	80027a2 <menu+0x1406>
 8002776:	4b77      	ldr	r3, [pc, #476]	; (8002954 <menu+0x15b8>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00e      	beq.n	80027a2 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002784:	4b70      	ldr	r3, [pc, #448]	; (8002948 <menu+0x15ac>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	3b01      	subs	r3, #1
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b6e      	ldr	r3, [pc, #440]	; (8002948 <menu+0x15ac>)
 800278e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002790:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <menu+0x15ac>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d902      	bls.n	800279e <menu+0x1402>
		   		kapi1Tip = 2;
 8002798:	4b6b      	ldr	r3, [pc, #428]	; (8002948 <menu+0x15ac>)
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800279e:	f003 f809 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a2:	2108      	movs	r1, #8
 80027a4:	486a      	ldr	r0, [pc, #424]	; (8002950 <menu+0x15b4>)
 80027a6:	f006 fddb 	bl	8009360 <HAL_GPIO_ReadPin>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10d      	bne.n	80027cc <menu+0x1430>
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <menu+0x15b8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	f083 0301 	eor.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80027be:	4b62      	ldr	r3, [pc, #392]	; (8002948 <menu+0x15ac>)
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	4b65      	ldr	r3, [pc, #404]	; (8002958 <menu+0x15bc>)
 80027c4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80027c6:	4b65      	ldr	r3, [pc, #404]	; (800295c <menu+0x15c0>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80027cc:	4b64      	ldr	r3, [pc, #400]	; (8002960 <menu+0x15c4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b0a      	cmp	r3, #10
 80027d2:	d17f      	bne.n	80028d4 <menu+0x1538>
		if(dilSecim == 0) {
 80027d4:	4b63      	ldr	r3, [pc, #396]	; (8002964 <menu+0x15c8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80027dc:	4a62      	ldr	r2, [pc, #392]	; (8002968 <menu+0x15cc>)
 80027de:	2101      	movs	r1, #1
 80027e0:	2001      	movs	r0, #1
 80027e2:	f7fd ffe9 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027e6:	4a61      	ldr	r2, [pc, #388]	; (800296c <menu+0x15d0>)
 80027e8:	2101      	movs	r1, #1
 80027ea:	2002      	movs	r0, #2
 80027ec:	f7fd ffe4 	bl	80007b8 <lcd_print>
 80027f0:	e00d      	b.n	800280e <menu+0x1472>
		} else if(dilSecim == 1) {
 80027f2:	4b5c      	ldr	r3, [pc, #368]	; (8002964 <menu+0x15c8>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d109      	bne.n	800280e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80027fa:	4a5d      	ldr	r2, [pc, #372]	; (8002970 <menu+0x15d4>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	2001      	movs	r0, #1
 8002800:	f7fd ffda 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002804:	4a5b      	ldr	r2, [pc, #364]	; (8002974 <menu+0x15d8>)
 8002806:	2101      	movs	r1, #1
 8002808:	2002      	movs	r0, #2
 800280a:	f7fd ffd5 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800280e:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <menu+0x15dc>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	220a      	movs	r2, #10
 8002814:	4959      	ldr	r1, [pc, #356]	; (800297c <menu+0x15e0>)
 8002816:	4618      	mov	r0, r3
 8002818:	f009 fdce 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 800281c:	4a57      	ldr	r2, [pc, #348]	; (800297c <menu+0x15e0>)
 800281e:	2110      	movs	r1, #16
 8002820:	2002      	movs	r0, #2
 8002822:	f7fd ffc9 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002826:	2102      	movs	r1, #2
 8002828:	4849      	ldr	r0, [pc, #292]	; (8002950 <menu+0x15b4>)
 800282a:	f006 fd99 	bl	8009360 <HAL_GPIO_ReadPin>
 800282e:	4603      	mov	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	d119      	bne.n	8002868 <menu+0x14cc>
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <menu+0x15b8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <menu+0x14cc>
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <menu+0x15ac>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10e      	bne.n	8002868 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800284a:	4b4b      	ldr	r3, [pc, #300]	; (8002978 <menu+0x15dc>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b49      	ldr	r3, [pc, #292]	; (8002978 <menu+0x15dc>)
 8002854:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002856:	4b48      	ldr	r3, [pc, #288]	; (8002978 <menu+0x15dc>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b05      	cmp	r3, #5
 800285c:	d902      	bls.n	8002864 <menu+0x14c8>
				kapi1AcSure = 0;
 800285e:	4b46      	ldr	r3, [pc, #280]	; (8002978 <menu+0x15dc>)
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002864:	f002 ffa6 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002868:	2104      	movs	r1, #4
 800286a:	4839      	ldr	r0, [pc, #228]	; (8002950 <menu+0x15b4>)
 800286c:	f006 fd78 	bl	8009360 <HAL_GPIO_ReadPin>
 8002870:	4603      	mov	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	d119      	bne.n	80028aa <menu+0x150e>
 8002876:	4b37      	ldr	r3, [pc, #220]	; (8002954 <menu+0x15b8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <menu+0x150e>
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <menu+0x15ac>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10e      	bne.n	80028aa <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 800288c:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <menu+0x15dc>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	3b01      	subs	r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b38      	ldr	r3, [pc, #224]	; (8002978 <menu+0x15dc>)
 8002896:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002898:	4b37      	ldr	r3, [pc, #220]	; (8002978 <menu+0x15dc>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d902      	bls.n	80028a6 <menu+0x150a>
		   		kapi1AcSure = 5;
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <menu+0x15dc>)
 80028a2:	2205      	movs	r2, #5
 80028a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028a6:	f002 ff85 	bl	80057b4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028aa:	2108      	movs	r1, #8
 80028ac:	4828      	ldr	r0, [pc, #160]	; (8002950 <menu+0x15b4>)
 80028ae:	f006 fd57 	bl	8009360 <HAL_GPIO_ReadPin>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10d      	bne.n	80028d4 <menu+0x1538>
 80028b8:	4b26      	ldr	r3, [pc, #152]	; (8002954 <menu+0x15b8>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	f083 0301 	eor.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <menu+0x15dc>)
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <menu+0x15bc>)
 80028cc:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <menu+0x15c0>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <menu+0x15c4>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b0b      	cmp	r3, #11
 80028da:	f040 80b5 	bne.w	8002a48 <menu+0x16ac>
		if(dilSecim == 0) {
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <menu+0x15c8>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80028e6:	4a26      	ldr	r2, [pc, #152]	; (8002980 <menu+0x15e4>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fd ff64 	bl	80007b8 <lcd_print>
 80028f0:	e008      	b.n	8002904 <menu+0x1568>
		} else if(dilSecim == 1) {
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <menu+0x15c8>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d104      	bne.n	8002904 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80028fa:	4a22      	ldr	r2, [pc, #136]	; (8002984 <menu+0x15e8>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	2001      	movs	r0, #1
 8002900:	f7fd ff5a 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002904:	4b20      	ldr	r3, [pc, #128]	; (8002988 <menu+0x15ec>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <menu+0x15f0>)
 800290e:	2101      	movs	r1, #1
 8002910:	2002      	movs	r0, #2
 8002912:	f7fd ff51 	bl	80007b8 <lcd_print>
 8002916:	e048      	b.n	80029aa <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <menu+0x15ec>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d13b      	bne.n	8002998 <menu+0x15fc>
			if(dilSecim == 0) {
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <menu+0x15c8>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <menu+0x15f4>)
 800292a:	2101      	movs	r1, #1
 800292c:	2002      	movs	r0, #2
 800292e:	f7fd ff43 	bl	80007b8 <lcd_print>
 8002932:	e03a      	b.n	80029aa <menu+0x160e>
			} else if(dilSecim == 1) {
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <menu+0x15c8>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d136      	bne.n	80029aa <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <menu+0x15f8>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f7fd ff39 	bl	80007b8 <lcd_print>
 8002946:	e030      	b.n	80029aa <menu+0x160e>
 8002948:	20000319 	.word	0x20000319
 800294c:	0800d4bc 	.word	0x0800d4bc
 8002950:	40010800 	.word	0x40010800
 8002954:	2000033f 	.word	0x2000033f
 8002958:	20000218 	.word	0x20000218
 800295c:	2000033c 	.word	0x2000033c
 8002960:	20000310 	.word	0x20000310
 8002964:	20000331 	.word	0x20000331
 8002968:	0800d4cc 	.word	0x0800d4cc
 800296c:	0800d4e0 	.word	0x0800d4e0
 8002970:	0800d4f0 	.word	0x0800d4f0
 8002974:	0800d504 	.word	0x0800d504
 8002978:	20000329 	.word	0x20000329
 800297c:	20000288 	.word	0x20000288
 8002980:	0800d514 	.word	0x0800d514
 8002984:	0800d528 	.word	0x0800d528
 8002988:	2000031a 	.word	0x2000031a
 800298c:	0800d484 	.word	0x0800d484
 8002990:	0800d498 	.word	0x0800d498
 8002994:	0800d4a8 	.word	0x0800d4a8
			}
		} else if(kapi2Tip == 2) {
 8002998:	4b8a      	ldr	r3, [pc, #552]	; (8002bc4 <menu+0x1828>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d104      	bne.n	80029aa <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80029a0:	4a89      	ldr	r2, [pc, #548]	; (8002bc8 <menu+0x182c>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7fd ff07 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029aa:	2102      	movs	r1, #2
 80029ac:	4887      	ldr	r0, [pc, #540]	; (8002bcc <menu+0x1830>)
 80029ae:	f006 fcd7 	bl	8009360 <HAL_GPIO_ReadPin>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d115      	bne.n	80029e4 <menu+0x1648>
 80029b8:	4b85      	ldr	r3, [pc, #532]	; (8002bd0 <menu+0x1834>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	f083 0301 	eor.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00e      	beq.n	80029e4 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <menu+0x1828>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <menu+0x1828>)
 80029d0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80029d2:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <menu+0x1828>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d902      	bls.n	80029e0 <menu+0x1644>
				kapi2Tip = 0;
 80029da:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <menu+0x1828>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029e0:	f002 fee8 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e4:	2104      	movs	r1, #4
 80029e6:	4879      	ldr	r0, [pc, #484]	; (8002bcc <menu+0x1830>)
 80029e8:	f006 fcba 	bl	8009360 <HAL_GPIO_ReadPin>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d115      	bne.n	8002a1e <menu+0x1682>
 80029f2:	4b77      	ldr	r3, [pc, #476]	; (8002bd0 <menu+0x1834>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	f083 0301 	eor.w	r3, r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002a00:	4b70      	ldr	r3, [pc, #448]	; (8002bc4 <menu+0x1828>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <menu+0x1828>)
 8002a0a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002a0c:	4b6d      	ldr	r3, [pc, #436]	; (8002bc4 <menu+0x1828>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d902      	bls.n	8002a1a <menu+0x167e>
		   		kapi2Tip = 2;
 8002a14:	4b6b      	ldr	r3, [pc, #428]	; (8002bc4 <menu+0x1828>)
 8002a16:	2202      	movs	r2, #2
 8002a18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a1a:	f002 fecb 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a1e:	2108      	movs	r1, #8
 8002a20:	486a      	ldr	r0, [pc, #424]	; (8002bcc <menu+0x1830>)
 8002a22:	f006 fc9d 	bl	8009360 <HAL_GPIO_ReadPin>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10d      	bne.n	8002a48 <menu+0x16ac>
 8002a2c:	4b68      	ldr	r3, [pc, #416]	; (8002bd0 <menu+0x1834>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	f083 0301 	eor.w	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <menu+0x1828>)
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	4b65      	ldr	r3, [pc, #404]	; (8002bd4 <menu+0x1838>)
 8002a40:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002a42:	4b65      	ldr	r3, [pc, #404]	; (8002bd8 <menu+0x183c>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <menu+0x1840>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d17f      	bne.n	8002b50 <menu+0x17b4>
		if(dilSecim == 0) {
 8002a50:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <menu+0x1844>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a58:	4a62      	ldr	r2, [pc, #392]	; (8002be4 <menu+0x1848>)
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7fd feab 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a62:	4a61      	ldr	r2, [pc, #388]	; (8002be8 <menu+0x184c>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7fd fea6 	bl	80007b8 <lcd_print>
 8002a6c:	e00d      	b.n	8002a8a <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <menu+0x1844>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d109      	bne.n	8002a8a <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002a76:	4a5d      	ldr	r2, [pc, #372]	; (8002bec <menu+0x1850>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f7fd fe9c 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a80:	4a5b      	ldr	r2, [pc, #364]	; (8002bf0 <menu+0x1854>)
 8002a82:	2101      	movs	r1, #1
 8002a84:	2002      	movs	r0, #2
 8002a86:	f7fd fe97 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <menu+0x1858>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	220a      	movs	r2, #10
 8002a90:	4959      	ldr	r1, [pc, #356]	; (8002bf8 <menu+0x185c>)
 8002a92:	4618      	mov	r0, r3
 8002a94:	f009 fc90 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8002a98:	4a57      	ldr	r2, [pc, #348]	; (8002bf8 <menu+0x185c>)
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f7fd fe8b 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4849      	ldr	r0, [pc, #292]	; (8002bcc <menu+0x1830>)
 8002aa6:	f006 fc5b 	bl	8009360 <HAL_GPIO_ReadPin>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d119      	bne.n	8002ae4 <menu+0x1748>
 8002ab0:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <menu+0x1834>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d012      	beq.n	8002ae4 <menu+0x1748>
 8002abe:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <menu+0x1828>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <menu+0x1858>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <menu+0x1858>)
 8002ad0:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002ad2:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <menu+0x1858>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d902      	bls.n	8002ae0 <menu+0x1744>
				kapi2AcSure = 0;
 8002ada:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <menu+0x1858>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ae0:	f002 fe68 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	4839      	ldr	r0, [pc, #228]	; (8002bcc <menu+0x1830>)
 8002ae8:	f006 fc3a 	bl	8009360 <HAL_GPIO_ReadPin>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d119      	bne.n	8002b26 <menu+0x178a>
 8002af2:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <menu+0x1834>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d012      	beq.n	8002b26 <menu+0x178a>
 8002b00:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <menu+0x1828>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10e      	bne.n	8002b26 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002b08:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <menu+0x1858>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <menu+0x1858>)
 8002b12:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002b14:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <menu+0x1858>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b06      	cmp	r3, #6
 8002b1a:	d902      	bls.n	8002b22 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002b1c:	4b35      	ldr	r3, [pc, #212]	; (8002bf4 <menu+0x1858>)
 8002b1e:	2205      	movs	r2, #5
 8002b20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b22:	f002 fe47 	bl	80057b4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b26:	2108      	movs	r1, #8
 8002b28:	4828      	ldr	r0, [pc, #160]	; (8002bcc <menu+0x1830>)
 8002b2a:	f006 fc19 	bl	8009360 <HAL_GPIO_ReadPin>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10d      	bne.n	8002b50 <menu+0x17b4>
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <menu+0x1834>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d006      	beq.n	8002b50 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <menu+0x1858>)
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <menu+0x1838>)
 8002b48:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <menu+0x183c>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <menu+0x1840>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b0d      	cmp	r3, #13
 8002b56:	f040 80b5 	bne.w	8002cc4 <menu+0x1928>
		if(dilSecim == 0) {
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <menu+0x1844>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002b62:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <menu+0x1860>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7fd fe26 	bl	80007b8 <lcd_print>
 8002b6c:	e008      	b.n	8002b80 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <menu+0x1844>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d104      	bne.n	8002b80 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002b76:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <menu+0x1864>)
 8002b78:	2101      	movs	r1, #1
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7fd fe1c 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b80:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <menu+0x1868>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b88:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <menu+0x186c>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f7fd fe13 	bl	80007b8 <lcd_print>
 8002b92:	e048      	b.n	8002c26 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <menu+0x1868>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d13b      	bne.n	8002c14 <menu+0x1878>
			if(dilSecim == 0) {
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <menu+0x1844>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002ba4:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <menu+0x1870>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	2002      	movs	r0, #2
 8002baa:	f7fd fe05 	bl	80007b8 <lcd_print>
 8002bae:	e03a      	b.n	8002c26 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <menu+0x1844>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d136      	bne.n	8002c26 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002bb8:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <menu+0x1874>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f7fd fdfb 	bl	80007b8 <lcd_print>
 8002bc2:	e030      	b.n	8002c26 <menu+0x188a>
 8002bc4:	2000031a 	.word	0x2000031a
 8002bc8:	0800d4bc 	.word	0x0800d4bc
 8002bcc:	40010800 	.word	0x40010800
 8002bd0:	2000033f 	.word	0x2000033f
 8002bd4:	20000218 	.word	0x20000218
 8002bd8:	2000033c 	.word	0x2000033c
 8002bdc:	20000310 	.word	0x20000310
 8002be0:	20000331 	.word	0x20000331
 8002be4:	0800d53c 	.word	0x0800d53c
 8002be8:	0800d4e0 	.word	0x0800d4e0
 8002bec:	0800d550 	.word	0x0800d550
 8002bf0:	0800d504 	.word	0x0800d504
 8002bf4:	2000032a 	.word	0x2000032a
 8002bf8:	20000288 	.word	0x20000288
 8002bfc:	0800d564 	.word	0x0800d564
 8002c00:	0800d578 	.word	0x0800d578
 8002c04:	2000031b 	.word	0x2000031b
 8002c08:	0800d484 	.word	0x0800d484
 8002c0c:	0800d498 	.word	0x0800d498
 8002c10:	0800d4a8 	.word	0x0800d4a8
			}
		} else if(kapitablaTip == 2) {
 8002c14:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <menu+0x19e8>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d104      	bne.n	8002c26 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002c1c:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <menu+0x19ec>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2002      	movs	r0, #2
 8002c22:	f7fd fdc9 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c26:	2102      	movs	r1, #2
 8002c28:	4858      	ldr	r0, [pc, #352]	; (8002d8c <menu+0x19f0>)
 8002c2a:	f006 fb99 	bl	8009360 <HAL_GPIO_ReadPin>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d115      	bne.n	8002c60 <menu+0x18c4>
 8002c34:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <menu+0x19f4>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	f083 0301 	eor.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00e      	beq.n	8002c60 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002c42:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <menu+0x19e8>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b4e      	ldr	r3, [pc, #312]	; (8002d84 <menu+0x19e8>)
 8002c4c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c4e:	4b4d      	ldr	r3, [pc, #308]	; (8002d84 <menu+0x19e8>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <menu+0x18c0>
				kapitablaTip = 0;
 8002c56:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <menu+0x19e8>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c5c:	f002 fdaa 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c60:	2104      	movs	r1, #4
 8002c62:	484a      	ldr	r0, [pc, #296]	; (8002d8c <menu+0x19f0>)
 8002c64:	f006 fb7c 	bl	8009360 <HAL_GPIO_ReadPin>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d115      	bne.n	8002c9a <menu+0x18fe>
 8002c6e:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <menu+0x19f4>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f083 0301 	eor.w	r3, r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c7c:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <menu+0x19e8>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <menu+0x19e8>)
 8002c86:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c88:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <menu+0x19e8>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d902      	bls.n	8002c96 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002c90:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <menu+0x19e8>)
 8002c92:	2202      	movs	r2, #2
 8002c94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c96:	f002 fd8d 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c9a:	2108      	movs	r1, #8
 8002c9c:	483b      	ldr	r0, [pc, #236]	; (8002d8c <menu+0x19f0>)
 8002c9e:	f006 fb5f 	bl	8009360 <HAL_GPIO_ReadPin>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10d      	bne.n	8002cc4 <menu+0x1928>
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <menu+0x19f4>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	f083 0301 	eor.w	r3, r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <menu+0x19e8>)
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <menu+0x19f8>)
 8002cbc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <menu+0x19fc>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <menu+0x1a00>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b0e      	cmp	r3, #14
 8002cca:	f040 80f2 	bne.w	8002eb2 <menu+0x1b16>
		if(dilSecim == 0) {
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <menu+0x1a04>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002cd6:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <menu+0x1a08>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f7fd fd6c 	bl	80007b8 <lcd_print>
 8002ce0:	e008      	b.n	8002cf4 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <menu+0x1a04>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d104      	bne.n	8002cf4 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <menu+0x1a0c>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f7fd fd62 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <menu+0x1a10>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d113      	bne.n	8002d24 <menu+0x1988>
			if(dilSecim == 0){
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <menu+0x1a04>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002d04:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <menu+0x1a14>)
 8002d06:	2101      	movs	r1, #1
 8002d08:	2002      	movs	r0, #2
 8002d0a:	f7fd fd55 	bl	80007b8 <lcd_print>
 8002d0e:	e071      	b.n	8002df4 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <menu+0x1a04>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d16d      	bne.n	8002df4 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <menu+0x1a18>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f7fd fd4b 	bl	80007b8 <lcd_print>
 8002d22:	e067      	b.n	8002df4 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <menu+0x1a10>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d112      	bne.n	8002d52 <menu+0x19b6>
			if(dilSecim == 0){
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <menu+0x1a04>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002d34:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <menu+0x1a1c>)
 8002d36:	2101      	movs	r1, #1
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f7fd fd3d 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 8002d3e:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <menu+0x1a04>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d156      	bne.n	8002df4 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <menu+0x1a20>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	f7fd fd34 	bl	80007b8 <lcd_print>
 8002d50:	e050      	b.n	8002df4 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <menu+0x1a10>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d136      	bne.n	8002dc8 <menu+0x1a2c>
			if(dilSecim == 0){
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <menu+0x1a04>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002d62:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <menu+0x1a24>)
 8002d64:	2101      	movs	r1, #1
 8002d66:	2002      	movs	r0, #2
 8002d68:	f7fd fd26 	bl	80007b8 <lcd_print>
 8002d6c:	e042      	b.n	8002df4 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <menu+0x1a04>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d13e      	bne.n	8002df4 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <menu+0x1a28>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f7fd fd1c 	bl	80007b8 <lcd_print>
 8002d80:	e038      	b.n	8002df4 <menu+0x1a58>
 8002d82:	bf00      	nop
 8002d84:	2000031b 	.word	0x2000031b
 8002d88:	0800d4bc 	.word	0x0800d4bc
 8002d8c:	40010800 	.word	0x40010800
 8002d90:	2000033f 	.word	0x2000033f
 8002d94:	20000218 	.word	0x20000218
 8002d98:	2000033c 	.word	0x2000033c
 8002d9c:	20000310 	.word	0x20000310
 8002da0:	20000331 	.word	0x20000331
 8002da4:	0800d58c 	.word	0x0800d58c
 8002da8:	0800d5a0 	.word	0x0800d5a0
 8002dac:	2000031d 	.word	0x2000031d
 8002db0:	0800d5b4 	.word	0x0800d5b4
 8002db4:	0800d5c4 	.word	0x0800d5c4
 8002db8:	0800d5d4 	.word	0x0800d5d4
 8002dbc:	0800d5e4 	.word	0x0800d5e4
 8002dc0:	0800d5f4 	.word	0x0800d5f4
 8002dc4:	0800d608 	.word	0x0800d608
			}
		} else if(kapiTablaAcKonum == 3) {
 8002dc8:	4b9b      	ldr	r3, [pc, #620]	; (8003038 <menu+0x1c9c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d111      	bne.n	8002df4 <menu+0x1a58>
			if(dilSecim == 0) {
 8002dd0:	4b9a      	ldr	r3, [pc, #616]	; (800303c <menu+0x1ca0>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002dd8:	4a99      	ldr	r2, [pc, #612]	; (8003040 <menu+0x1ca4>)
 8002dda:	2101      	movs	r1, #1
 8002ddc:	2002      	movs	r0, #2
 8002dde:	f7fd fceb 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002de2:	4b96      	ldr	r3, [pc, #600]	; (800303c <menu+0x1ca0>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d104      	bne.n	8002df4 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002dea:	4a96      	ldr	r2, [pc, #600]	; (8003044 <menu+0x1ca8>)
 8002dec:	2101      	movs	r1, #1
 8002dee:	2002      	movs	r0, #2
 8002df0:	f7fd fce2 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df4:	2102      	movs	r1, #2
 8002df6:	4894      	ldr	r0, [pc, #592]	; (8003048 <menu+0x1cac>)
 8002df8:	f006 fab2 	bl	8009360 <HAL_GPIO_ReadPin>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d115      	bne.n	8002e2e <menu+0x1a92>
 8002e02:	4b92      	ldr	r3, [pc, #584]	; (800304c <menu+0x1cb0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f083 0301 	eor.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002e10:	4b89      	ldr	r3, [pc, #548]	; (8003038 <menu+0x1c9c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	4b87      	ldr	r3, [pc, #540]	; (8003038 <menu+0x1c9c>)
 8002e1a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002e1c:	4b86      	ldr	r3, [pc, #536]	; (8003038 <menu+0x1c9c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d902      	bls.n	8002e2a <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002e24:	4b84      	ldr	r3, [pc, #528]	; (8003038 <menu+0x1c9c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e2a:	f002 fcc3 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2e:	2104      	movs	r1, #4
 8002e30:	4885      	ldr	r0, [pc, #532]	; (8003048 <menu+0x1cac>)
 8002e32:	f006 fa95 	bl	8009360 <HAL_GPIO_ReadPin>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d115      	bne.n	8002e68 <menu+0x1acc>
 8002e3c:	4b83      	ldr	r3, [pc, #524]	; (800304c <menu+0x1cb0>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <menu+0x1c9c>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b79      	ldr	r3, [pc, #484]	; (8003038 <menu+0x1c9c>)
 8002e54:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e56:	4b78      	ldr	r3, [pc, #480]	; (8003038 <menu+0x1c9c>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d902      	bls.n	8002e64 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e5e:	4b76      	ldr	r3, [pc, #472]	; (8003038 <menu+0x1c9c>)
 8002e60:	2202      	movs	r2, #2
 8002e62:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e64:	f002 fca6 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e68:	2108      	movs	r1, #8
 8002e6a:	4877      	ldr	r0, [pc, #476]	; (8003048 <menu+0x1cac>)
 8002e6c:	f006 fa78 	bl	8009360 <HAL_GPIO_ReadPin>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d11d      	bne.n	8002eb2 <menu+0x1b16>
 8002e76:	4b75      	ldr	r3, [pc, #468]	; (800304c <menu+0x1cb0>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	f083 0301 	eor.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d016      	beq.n	8002eb2 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e84:	4b6c      	ldr	r3, [pc, #432]	; (8003038 <menu+0x1c9c>)
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	4b71      	ldr	r3, [pc, #452]	; (8003050 <menu+0x1cb4>)
 8002e8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <menu+0x1c9c>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <menu+0x1b02>
 8002e96:	4b68      	ldr	r3, [pc, #416]	; (8003038 <menu+0x1c9c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d106      	bne.n	8002eac <menu+0x1b10>
				altLimit = 1;
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <menu+0x1cb8>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	; (8003054 <menu+0x1cb8>)
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	4b69      	ldr	r3, [pc, #420]	; (8003050 <menu+0x1cb4>)
 8002eaa:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <menu+0x1cbc>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <menu+0x1cc0>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	d17f      	bne.n	8002fba <menu+0x1c1e>
		if(dilSecim == 0) {
 8002eba:	4b60      	ldr	r3, [pc, #384]	; (800303c <menu+0x1ca0>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002ec2:	4a67      	ldr	r2, [pc, #412]	; (8003060 <menu+0x1cc4>)
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7fd fc76 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ecc:	4a65      	ldr	r2, [pc, #404]	; (8003064 <menu+0x1cc8>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	f7fd fc71 	bl	80007b8 <lcd_print>
 8002ed6:	e00d      	b.n	8002ef4 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002ed8:	4b58      	ldr	r3, [pc, #352]	; (800303c <menu+0x1ca0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d109      	bne.n	8002ef4 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ee0:	4a61      	ldr	r2, [pc, #388]	; (8003068 <menu+0x1ccc>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7fd fc67 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002eea:	4a60      	ldr	r2, [pc, #384]	; (800306c <menu+0x1cd0>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	2002      	movs	r0, #2
 8002ef0:	f7fd fc62 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002ef4:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <menu+0x1cd4>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	220a      	movs	r2, #10
 8002efa:	495e      	ldr	r1, [pc, #376]	; (8003074 <menu+0x1cd8>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f009 fa5b 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8002f02:	4a5c      	ldr	r2, [pc, #368]	; (8003074 <menu+0x1cd8>)
 8002f04:	2110      	movs	r1, #16
 8002f06:	2002      	movs	r0, #2
 8002f08:	f7fd fc56 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	484e      	ldr	r0, [pc, #312]	; (8003048 <menu+0x1cac>)
 8002f10:	f006 fa26 	bl	8009360 <HAL_GPIO_ReadPin>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d119      	bne.n	8002f4e <menu+0x1bb2>
 8002f1a:	4b4c      	ldr	r3, [pc, #304]	; (800304c <menu+0x1cb0>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	f083 0301 	eor.w	r3, r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d012      	beq.n	8002f4e <menu+0x1bb2>
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <menu+0x1cdc>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10e      	bne.n	8002f4e <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <menu+0x1cd4>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <menu+0x1cd4>)
 8002f3a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002f3c:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <menu+0x1cd4>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d902      	bls.n	8002f4a <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002f44:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <menu+0x1cd4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f4a:	f002 fc33 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f4e:	2104      	movs	r1, #4
 8002f50:	483d      	ldr	r0, [pc, #244]	; (8003048 <menu+0x1cac>)
 8002f52:	f006 fa05 	bl	8009360 <HAL_GPIO_ReadPin>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d119      	bne.n	8002f90 <menu+0x1bf4>
 8002f5c:	4b3b      	ldr	r3, [pc, #236]	; (800304c <menu+0x1cb0>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f083 0301 	eor.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <menu+0x1bf4>
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <menu+0x1cdc>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10e      	bne.n	8002f90 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <menu+0x1cd4>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <menu+0x1cd4>)
 8002f7c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f7e:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <menu+0x1cd4>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d902      	bls.n	8002f8c <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f86:	4b3a      	ldr	r3, [pc, #232]	; (8003070 <menu+0x1cd4>)
 8002f88:	2205      	movs	r2, #5
 8002f8a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002f8c:	f002 fc12 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f90:	2108      	movs	r1, #8
 8002f92:	482d      	ldr	r0, [pc, #180]	; (8003048 <menu+0x1cac>)
 8002f94:	f006 f9e4 	bl	8009360 <HAL_GPIO_ReadPin>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10d      	bne.n	8002fba <menu+0x1c1e>
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <menu+0x1cb0>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	f083 0301 	eor.w	r3, r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002fac:	4b30      	ldr	r3, [pc, #192]	; (8003070 <menu+0x1cd4>)
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <menu+0x1cb4>)
 8002fb2:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <menu+0x1cbc>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <menu+0x1cc0>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	f040 80bc 	bne.w	800313c <menu+0x1da0>
		if(dilSecim == 0) {
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <menu+0x1ca0>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	; (800307c <menu+0x1ce0>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fd fbf1 	bl	80007b8 <lcd_print>
 8002fd6:	e008      	b.n	8002fea <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <menu+0x1ca0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d104      	bne.n	8002fea <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002fe0:	4a27      	ldr	r2, [pc, #156]	; (8003080 <menu+0x1ce4>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7fd fbe7 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <menu+0x1ce8>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d113      	bne.n	800301a <menu+0x1c7e>
			if(dilSecim == 0) {
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <menu+0x1ca0>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002ffa:	4a11      	ldr	r2, [pc, #68]	; (8003040 <menu+0x1ca4>)
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	2002      	movs	r0, #2
 8003000:	f7fd fbda 	bl	80007b8 <lcd_print>
 8003004:	e04b      	b.n	800309e <menu+0x1d02>
			} else if(dilSecim == 1) {
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <menu+0x1ca0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d147      	bne.n	800309e <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <menu+0x1ca8>)
 8003010:	2101      	movs	r1, #1
 8003012:	2002      	movs	r0, #2
 8003014:	f7fd fbd0 	bl	80007b8 <lcd_print>
 8003018:	e041      	b.n	800309e <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <menu+0x1ce8>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d13d      	bne.n	800309e <menu+0x1d02>
			if(dilSecim == 0) {
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <menu+0x1ca0>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d130      	bne.n	800308c <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <menu+0x1cec>)
 800302c:	2101      	movs	r1, #1
 800302e:	2002      	movs	r0, #2
 8003030:	f7fd fbc2 	bl	80007b8 <lcd_print>
 8003034:	e033      	b.n	800309e <menu+0x1d02>
 8003036:	bf00      	nop
 8003038:	2000031d 	.word	0x2000031d
 800303c:	20000331 	.word	0x20000331
 8003040:	0800d27c 	.word	0x0800d27c
 8003044:	0800d290 	.word	0x0800d290
 8003048:	40010800 	.word	0x40010800
 800304c:	2000033f 	.word	0x2000033f
 8003050:	20000218 	.word	0x20000218
 8003054:	20000316 	.word	0x20000316
 8003058:	2000033c 	.word	0x2000033c
 800305c:	20000310 	.word	0x20000310
 8003060:	0800d61c 	.word	0x0800d61c
 8003064:	0800d4e0 	.word	0x0800d4e0
 8003068:	0800d630 	.word	0x0800d630
 800306c:	0800d504 	.word	0x0800d504
 8003070:	2000032b 	.word	0x2000032b
 8003074:	20000288 	.word	0x20000288
 8003078:	2000031b 	.word	0x2000031b
 800307c:	0800d644 	.word	0x0800d644
 8003080:	0800d658 	.word	0x0800d658
 8003084:	2000031e 	.word	0x2000031e
 8003088:	0800d2dc 	.word	0x0800d2dc
			} else if(dilSecim == 1) {
 800308c:	4b99      	ldr	r3, [pc, #612]	; (80032f4 <menu+0x1f58>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d104      	bne.n	800309e <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003094:	4a98      	ldr	r2, [pc, #608]	; (80032f8 <menu+0x1f5c>)
 8003096:	2101      	movs	r1, #1
 8003098:	2002      	movs	r0, #2
 800309a:	f7fd fb8d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800309e:	2102      	movs	r1, #2
 80030a0:	4896      	ldr	r0, [pc, #600]	; (80032fc <menu+0x1f60>)
 80030a2:	f006 f95d 	bl	8009360 <HAL_GPIO_ReadPin>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d115      	bne.n	80030d8 <menu+0x1d3c>
 80030ac:	4b94      	ldr	r3, [pc, #592]	; (8003300 <menu+0x1f64>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	f083 0301 	eor.w	r3, r3, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80030ba:	4b92      	ldr	r3, [pc, #584]	; (8003304 <menu+0x1f68>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4b90      	ldr	r3, [pc, #576]	; (8003304 <menu+0x1f68>)
 80030c4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80030c6:	4b8f      	ldr	r3, [pc, #572]	; (8003304 <menu+0x1f68>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d902      	bls.n	80030d4 <menu+0x1d38>
				yukariYavasLimit = 0;
 80030ce:	4b8d      	ldr	r3, [pc, #564]	; (8003304 <menu+0x1f68>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030d4:	f002 fb6e 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030d8:	2104      	movs	r1, #4
 80030da:	4888      	ldr	r0, [pc, #544]	; (80032fc <menu+0x1f60>)
 80030dc:	f006 f940 	bl	8009360 <HAL_GPIO_ReadPin>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d115      	bne.n	8003112 <menu+0x1d76>
 80030e6:	4b86      	ldr	r3, [pc, #536]	; (8003300 <menu+0x1f64>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	f083 0301 	eor.w	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80030f4:	4b83      	ldr	r3, [pc, #524]	; (8003304 <menu+0x1f68>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b81      	ldr	r3, [pc, #516]	; (8003304 <menu+0x1f68>)
 80030fe:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003100:	4b80      	ldr	r3, [pc, #512]	; (8003304 <menu+0x1f68>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003108:	4b7e      	ldr	r3, [pc, #504]	; (8003304 <menu+0x1f68>)
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800310e:	f002 fb51 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003112:	2108      	movs	r1, #8
 8003114:	4879      	ldr	r0, [pc, #484]	; (80032fc <menu+0x1f60>)
 8003116:	f006 f923 	bl	8009360 <HAL_GPIO_ReadPin>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10d      	bne.n	800313c <menu+0x1da0>
 8003120:	4b77      	ldr	r3, [pc, #476]	; (8003300 <menu+0x1f64>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800312e:	4b75      	ldr	r3, [pc, #468]	; (8003304 <menu+0x1f68>)
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	4b75      	ldr	r3, [pc, #468]	; (8003308 <menu+0x1f6c>)
 8003134:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003136:	4b75      	ldr	r3, [pc, #468]	; (800330c <menu+0x1f70>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800313c:	4b74      	ldr	r3, [pc, #464]	; (8003310 <menu+0x1f74>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b11      	cmp	r3, #17
 8003142:	f040 80c3 	bne.w	80032cc <menu+0x1f30>
		if(dilSecim == 0) {
 8003146:	4b6b      	ldr	r3, [pc, #428]	; (80032f4 <menu+0x1f58>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800314e:	4a71      	ldr	r2, [pc, #452]	; (8003314 <menu+0x1f78>)
 8003150:	2101      	movs	r1, #1
 8003152:	2001      	movs	r0, #1
 8003154:	f7fd fb30 	bl	80007b8 <lcd_print>
 8003158:	e008      	b.n	800316c <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800315a:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <menu+0x1f58>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d104      	bne.n	800316c <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003162:	4a6d      	ldr	r2, [pc, #436]	; (8003318 <menu+0x1f7c>)
 8003164:	2101      	movs	r1, #1
 8003166:	2001      	movs	r0, #1
 8003168:	f7fd fb26 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 800316c:	4b6b      	ldr	r3, [pc, #428]	; (800331c <menu+0x1f80>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d113      	bne.n	800319c <menu+0x1e00>
			if(dilSecim == 0){
 8003174:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <menu+0x1f58>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d105      	bne.n	8003188 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 800317c:	4a68      	ldr	r2, [pc, #416]	; (8003320 <menu+0x1f84>)
 800317e:	2101      	movs	r1, #1
 8003180:	2002      	movs	r0, #2
 8003182:	f7fd fb19 	bl	80007b8 <lcd_print>
 8003186:	e038      	b.n	80031fa <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003188:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <menu+0x1f58>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d134      	bne.n	80031fa <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003190:	4a64      	ldr	r2, [pc, #400]	; (8003324 <menu+0x1f88>)
 8003192:	2101      	movs	r1, #1
 8003194:	2002      	movs	r0, #2
 8003196:	f7fd fb0f 	bl	80007b8 <lcd_print>
 800319a:	e02e      	b.n	80031fa <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800319c:	4b5f      	ldr	r3, [pc, #380]	; (800331c <menu+0x1f80>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d113      	bne.n	80031cc <menu+0x1e30>
			if(dilSecim == 0){
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <menu+0x1f58>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80031ac:	4a5e      	ldr	r2, [pc, #376]	; (8003328 <menu+0x1f8c>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	2002      	movs	r0, #2
 80031b2:	f7fd fb01 	bl	80007b8 <lcd_print>
 80031b6:	e020      	b.n	80031fa <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031b8:	4b4e      	ldr	r3, [pc, #312]	; (80032f4 <menu+0x1f58>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d11c      	bne.n	80031fa <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80031c0:	4a5a      	ldr	r2, [pc, #360]	; (800332c <menu+0x1f90>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f7fd faf7 	bl	80007b8 <lcd_print>
 80031ca:	e016      	b.n	80031fa <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <menu+0x1f80>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d112      	bne.n	80031fa <menu+0x1e5e>
			if(dilSecim == 0) {
 80031d4:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <menu+0x1f58>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80031dc:	4a54      	ldr	r2, [pc, #336]	; (8003330 <menu+0x1f94>)
 80031de:	2101      	movs	r1, #1
 80031e0:	2002      	movs	r0, #2
 80031e2:	f7fd fae9 	bl	80007b8 <lcd_print>
 80031e6:	e008      	b.n	80031fa <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <menu+0x1f58>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d104      	bne.n	80031fa <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80031f0:	4a50      	ldr	r2, [pc, #320]	; (8003334 <menu+0x1f98>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	2002      	movs	r0, #2
 80031f6:	f7fd fadf 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fa:	2102      	movs	r1, #2
 80031fc:	483f      	ldr	r0, [pc, #252]	; (80032fc <menu+0x1f60>)
 80031fe:	f006 f8af 	bl	8009360 <HAL_GPIO_ReadPin>
 8003202:	4603      	mov	r3, r0
 8003204:	2b01      	cmp	r3, #1
 8003206:	d115      	bne.n	8003234 <menu+0x1e98>
 8003208:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <menu+0x1f64>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00e      	beq.n	8003234 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <menu+0x1f80>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b3f      	ldr	r3, [pc, #252]	; (800331c <menu+0x1f80>)
 8003220:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003222:	4b3e      	ldr	r3, [pc, #248]	; (800331c <menu+0x1f80>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d902      	bls.n	8003230 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800322a:	4b3c      	ldr	r3, [pc, #240]	; (800331c <menu+0x1f80>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003230:	f002 fac0 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003234:	2104      	movs	r1, #4
 8003236:	4831      	ldr	r0, [pc, #196]	; (80032fc <menu+0x1f60>)
 8003238:	f006 f892 	bl	8009360 <HAL_GPIO_ReadPin>
 800323c:	4603      	mov	r3, r0
 800323e:	2b01      	cmp	r3, #1
 8003240:	d115      	bne.n	800326e <menu+0x1ed2>
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <menu+0x1f64>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f083 0301 	eor.w	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <menu+0x1f80>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	3b01      	subs	r3, #1
 8003256:	b2da      	uxtb	r2, r3
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <menu+0x1f80>)
 800325a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800325c:	4b2f      	ldr	r3, [pc, #188]	; (800331c <menu+0x1f80>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d902      	bls.n	800326a <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003264:	4b2d      	ldr	r3, [pc, #180]	; (800331c <menu+0x1f80>)
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800326a:	f002 faa3 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800326e:	2108      	movs	r1, #8
 8003270:	4822      	ldr	r0, [pc, #136]	; (80032fc <menu+0x1f60>)
 8003272:	f006 f875 	bl	8009360 <HAL_GPIO_ReadPin>
 8003276:	4603      	mov	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d127      	bne.n	80032cc <menu+0x1f30>
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <menu+0x1f64>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	f083 0301 	eor.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d020      	beq.n	80032cc <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <menu+0x1f80>)
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <menu+0x1f6c>)
 8003290:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <menu+0x1f80>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d003      	beq.n	80032a2 <menu+0x1f06>
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <menu+0x1f80>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d106      	bne.n	80032b0 <menu+0x1f14>
				calismaSekli = 0;
 80032a2:	4b25      	ldr	r3, [pc, #148]	; (8003338 <menu+0x1f9c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <menu+0x1f9c>)
 80032aa:	781a      	ldrb	r2, [r3, #0]
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <menu+0x1f6c>)
 80032ae:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <menu+0x1f80>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d106      	bne.n	80032c6 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80032b8:	4b20      	ldr	r3, [pc, #128]	; (800333c <menu+0x1fa0>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <menu+0x1fa0>)
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <menu+0x1f6c>)
 80032c4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <menu+0x1f70>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <menu+0x1f74>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b12      	cmp	r3, #18
 80032d2:	f040 80d5 	bne.w	8003480 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <menu+0x1f80>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d13c      	bne.n	8003358 <menu+0x1fbc>
			if(dilSecim == 0) {
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <menu+0x1f58>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d12e      	bne.n	8003344 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <menu+0x1fa4>)
 80032e8:	2101      	movs	r1, #1
 80032ea:	2001      	movs	r0, #1
 80032ec:	f7fd fa64 	bl	80007b8 <lcd_print>
 80032f0:	e048      	b.n	8003384 <menu+0x1fe8>
 80032f2:	bf00      	nop
 80032f4:	20000331 	.word	0x20000331
 80032f8:	0800d2f0 	.word	0x0800d2f0
 80032fc:	40010800 	.word	0x40010800
 8003300:	2000033f 	.word	0x2000033f
 8003304:	2000031e 	.word	0x2000031e
 8003308:	20000218 	.word	0x20000218
 800330c:	2000033c 	.word	0x2000033c
 8003310:	20000310 	.word	0x20000310
 8003314:	0800d66c 	.word	0x0800d66c
 8003318:	0800d680 	.word	0x0800d680
 800331c:	2000031f 	.word	0x2000031f
 8003320:	0800d694 	.word	0x0800d694
 8003324:	0800d6a4 	.word	0x0800d6a4
 8003328:	0800d6b4 	.word	0x0800d6b4
 800332c:	0800d6c4 	.word	0x0800d6c4
 8003330:	0800d27c 	.word	0x0800d27c
 8003334:	0800d290 	.word	0x0800d290
 8003338:	20000311 	.word	0x20000311
 800333c:	20000322 	.word	0x20000322
 8003340:	0800d6d4 	.word	0x0800d6d4
			} else if(dilSecim == 1) {
 8003344:	4b7b      	ldr	r3, [pc, #492]	; (8003534 <menu+0x2198>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d11b      	bne.n	8003384 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 800334c:	4a7a      	ldr	r2, [pc, #488]	; (8003538 <menu+0x219c>)
 800334e:	2101      	movs	r1, #1
 8003350:	2001      	movs	r0, #1
 8003352:	f7fd fa31 	bl	80007b8 <lcd_print>
 8003356:	e015      	b.n	8003384 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003358:	4b78      	ldr	r3, [pc, #480]	; (800353c <menu+0x21a0>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d111      	bne.n	8003384 <menu+0x1fe8>
			if(dilSecim == 0){
 8003360:	4b74      	ldr	r3, [pc, #464]	; (8003534 <menu+0x2198>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003368:	4a75      	ldr	r2, [pc, #468]	; (8003540 <menu+0x21a4>)
 800336a:	2101      	movs	r1, #1
 800336c:	2001      	movs	r0, #1
 800336e:	f7fd fa23 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 8003372:	4b70      	ldr	r3, [pc, #448]	; (8003534 <menu+0x2198>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d104      	bne.n	8003384 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800337a:	4a72      	ldr	r2, [pc, #456]	; (8003544 <menu+0x21a8>)
 800337c:	2101      	movs	r1, #1
 800337e:	2001      	movs	r0, #1
 8003380:	f7fd fa1a 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003384:	4b70      	ldr	r3, [pc, #448]	; (8003548 <menu+0x21ac>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d113      	bne.n	80033b4 <menu+0x2018>
			if(dilSecim == 0) {
 800338c:	4b69      	ldr	r3, [pc, #420]	; (8003534 <menu+0x2198>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003394:	4a6d      	ldr	r2, [pc, #436]	; (800354c <menu+0x21b0>)
 8003396:	2101      	movs	r1, #1
 8003398:	2002      	movs	r0, #2
 800339a:	f7fd fa0d 	bl	80007b8 <lcd_print>
 800339e:	e020      	b.n	80033e2 <menu+0x2046>
			} else if(dilSecim == 1){
 80033a0:	4b64      	ldr	r3, [pc, #400]	; (8003534 <menu+0x2198>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d11c      	bne.n	80033e2 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80033a8:	4a69      	ldr	r2, [pc, #420]	; (8003550 <menu+0x21b4>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	2002      	movs	r0, #2
 80033ae:	f7fd fa03 	bl	80007b8 <lcd_print>
 80033b2:	e016      	b.n	80033e2 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80033b4:	4b64      	ldr	r3, [pc, #400]	; (8003548 <menu+0x21ac>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d112      	bne.n	80033e2 <menu+0x2046>
			if(dilSecim == 0){
 80033bc:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <menu+0x2198>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80033c4:	4a63      	ldr	r2, [pc, #396]	; (8003554 <menu+0x21b8>)
 80033c6:	2101      	movs	r1, #1
 80033c8:	2002      	movs	r0, #2
 80033ca:	f7fd f9f5 	bl	80007b8 <lcd_print>
 80033ce:	e008      	b.n	80033e2 <menu+0x2046>
			} else if(dilSecim == 1){
 80033d0:	4b58      	ldr	r3, [pc, #352]	; (8003534 <menu+0x2198>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d104      	bne.n	80033e2 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80033d8:	4a5f      	ldr	r2, [pc, #380]	; (8003558 <menu+0x21bc>)
 80033da:	2101      	movs	r1, #1
 80033dc:	2002      	movs	r0, #2
 80033de:	f7fd f9eb 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033e2:	2102      	movs	r1, #2
 80033e4:	485d      	ldr	r0, [pc, #372]	; (800355c <menu+0x21c0>)
 80033e6:	f005 ffbb 	bl	8009360 <HAL_GPIO_ReadPin>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d115      	bne.n	800341c <menu+0x2080>
 80033f0:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <menu+0x21c4>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f083 0301 	eor.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80033fe:	4b52      	ldr	r3, [pc, #328]	; (8003548 <menu+0x21ac>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4b50      	ldr	r3, [pc, #320]	; (8003548 <menu+0x21ac>)
 8003408:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800340a:	4b4f      	ldr	r3, [pc, #316]	; (8003548 <menu+0x21ac>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d902      	bls.n	8003418 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003412:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <menu+0x21ac>)
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003418:	f002 f9cc 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800341c:	2104      	movs	r1, #4
 800341e:	484f      	ldr	r0, [pc, #316]	; (800355c <menu+0x21c0>)
 8003420:	f005 ff9e 	bl	8009360 <HAL_GPIO_ReadPin>
 8003424:	4603      	mov	r3, r0
 8003426:	2b01      	cmp	r3, #1
 8003428:	d115      	bne.n	8003456 <menu+0x20ba>
 800342a:	4b4d      	ldr	r3, [pc, #308]	; (8003560 <menu+0x21c4>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	f083 0301 	eor.w	r3, r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <menu+0x21ac>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	3b01      	subs	r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	4b41      	ldr	r3, [pc, #260]	; (8003548 <menu+0x21ac>)
 8003442:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <menu+0x21ac>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 800344c:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <menu+0x21ac>)
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003452:	f002 f9af 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003456:	2108      	movs	r1, #8
 8003458:	4840      	ldr	r0, [pc, #256]	; (800355c <menu+0x21c0>)
 800345a:	f005 ff81 	bl	8009360 <HAL_GPIO_ReadPin>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10d      	bne.n	8003480 <menu+0x20e4>
 8003464:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <menu+0x21c4>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	f083 0301 	eor.w	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d006      	beq.n	8003480 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003472:	4b35      	ldr	r3, [pc, #212]	; (8003548 <menu+0x21ac>)
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <menu+0x21c8>)
 8003478:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800347a:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <menu+0x21cc>)
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003480:	4b3a      	ldr	r3, [pc, #232]	; (800356c <menu+0x21d0>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b13      	cmp	r3, #19
 8003486:	f040 80d5 	bne.w	8003634 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800348a:	4b2c      	ldr	r3, [pc, #176]	; (800353c <menu+0x21a0>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d113      	bne.n	80034ba <menu+0x211e>
			if(dilSecim == 0) {
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <menu+0x2198>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800349a:	4a35      	ldr	r2, [pc, #212]	; (8003570 <menu+0x21d4>)
 800349c:	2101      	movs	r1, #1
 800349e:	2001      	movs	r0, #1
 80034a0:	f7fd f98a 	bl	80007b8 <lcd_print>
 80034a4:	e01f      	b.n	80034e6 <menu+0x214a>
			} else if(dilSecim == 1) {
 80034a6:	4b23      	ldr	r3, [pc, #140]	; (8003534 <menu+0x2198>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d11b      	bne.n	80034e6 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80034ae:	4a31      	ldr	r2, [pc, #196]	; (8003574 <menu+0x21d8>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	2001      	movs	r0, #1
 80034b4:	f7fd f980 	bl	80007b8 <lcd_print>
 80034b8:	e015      	b.n	80034e6 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <menu+0x21a0>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d111      	bne.n	80034e6 <menu+0x214a>
			if(dilSecim == 0) {
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <menu+0x2198>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80034ca:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <menu+0x21dc>)
 80034cc:	2101      	movs	r1, #1
 80034ce:	2001      	movs	r0, #1
 80034d0:	f7fd f972 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <menu+0x2198>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d104      	bne.n	80034e6 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <menu+0x21e0>)
 80034de:	2101      	movs	r1, #1
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7fd f969 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <menu+0x21e4>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d113      	bne.n	8003516 <menu+0x217a>
			if(dilSecim == 0) {
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <menu+0x2198>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <menu+0x21b0>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	2002      	movs	r0, #2
 80034fc:	f7fd f95c 	bl	80007b8 <lcd_print>
 8003500:	e049      	b.n	8003596 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <menu+0x2198>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d145      	bne.n	8003596 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800350a:	4a11      	ldr	r2, [pc, #68]	; (8003550 <menu+0x21b4>)
 800350c:	2101      	movs	r1, #1
 800350e:	2002      	movs	r0, #2
 8003510:	f7fd f952 	bl	80007b8 <lcd_print>
 8003514:	e03f      	b.n	8003596 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <menu+0x21e4>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d13b      	bne.n	8003596 <menu+0x21fa>
			if(dilSecim == 0) {
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <menu+0x2198>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d12e      	bne.n	8003584 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003526:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <menu+0x21b8>)
 8003528:	2101      	movs	r1, #1
 800352a:	2002      	movs	r0, #2
 800352c:	f7fd f944 	bl	80007b8 <lcd_print>
 8003530:	e031      	b.n	8003596 <menu+0x21fa>
 8003532:	bf00      	nop
 8003534:	20000331 	.word	0x20000331
 8003538:	0800d6e8 	.word	0x0800d6e8
 800353c:	2000031f 	.word	0x2000031f
 8003540:	0800d6f8 	.word	0x0800d6f8
 8003544:	0800d70c 	.word	0x0800d70c
 8003548:	20000320 	.word	0x20000320
 800354c:	0800d27c 	.word	0x0800d27c
 8003550:	0800d290 	.word	0x0800d290
 8003554:	0800d2dc 	.word	0x0800d2dc
 8003558:	0800d2f0 	.word	0x0800d2f0
 800355c:	40010800 	.word	0x40010800
 8003560:	2000033f 	.word	0x2000033f
 8003564:	20000218 	.word	0x20000218
 8003568:	2000033c 	.word	0x2000033c
 800356c:	20000310 	.word	0x20000310
 8003570:	0800d720 	.word	0x0800d720
 8003574:	0800d734 	.word	0x0800d734
 8003578:	0800d748 	.word	0x0800d748
 800357c:	0800d75c 	.word	0x0800d75c
 8003580:	20000321 	.word	0x20000321
			} else if(dilSecim == 1) {
 8003584:	4b90      	ldr	r3, [pc, #576]	; (80037c8 <menu+0x242c>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d104      	bne.n	8003596 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 800358c:	4a8f      	ldr	r2, [pc, #572]	; (80037cc <menu+0x2430>)
 800358e:	2101      	movs	r1, #1
 8003590:	2002      	movs	r0, #2
 8003592:	f7fd f911 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003596:	2102      	movs	r1, #2
 8003598:	488d      	ldr	r0, [pc, #564]	; (80037d0 <menu+0x2434>)
 800359a:	f005 fee1 	bl	8009360 <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d115      	bne.n	80035d0 <menu+0x2234>
 80035a4:	4b8b      	ldr	r3, [pc, #556]	; (80037d4 <menu+0x2438>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80035b2:	4b89      	ldr	r3, [pc, #548]	; (80037d8 <menu+0x243c>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b87      	ldr	r3, [pc, #540]	; (80037d8 <menu+0x243c>)
 80035bc:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80035be:	4b86      	ldr	r3, [pc, #536]	; (80037d8 <menu+0x243c>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d902      	bls.n	80035cc <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80035c6:	4b84      	ldr	r3, [pc, #528]	; (80037d8 <menu+0x243c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035cc:	f002 f8f2 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035d0:	2104      	movs	r1, #4
 80035d2:	487f      	ldr	r0, [pc, #508]	; (80037d0 <menu+0x2434>)
 80035d4:	f005 fec4 	bl	8009360 <HAL_GPIO_ReadPin>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d115      	bne.n	800360a <menu+0x226e>
 80035de:	4b7d      	ldr	r3, [pc, #500]	; (80037d4 <menu+0x2438>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	f083 0301 	eor.w	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80035ec:	4b7a      	ldr	r3, [pc, #488]	; (80037d8 <menu+0x243c>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	4b78      	ldr	r3, [pc, #480]	; (80037d8 <menu+0x243c>)
 80035f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80035f8:	4b77      	ldr	r3, [pc, #476]	; (80037d8 <menu+0x243c>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003600:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <menu+0x243c>)
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003606:	f002 f8d5 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800360a:	2108      	movs	r1, #8
 800360c:	4870      	ldr	r0, [pc, #448]	; (80037d0 <menu+0x2434>)
 800360e:	f005 fea7 	bl	8009360 <HAL_GPIO_ReadPin>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10d      	bne.n	8003634 <menu+0x2298>
 8003618:	4b6e      	ldr	r3, [pc, #440]	; (80037d4 <menu+0x2438>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f083 0301 	eor.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003626:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <menu+0x243c>)
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <menu+0x2440>)
 800362c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800362e:	4b6c      	ldr	r3, [pc, #432]	; (80037e0 <menu+0x2444>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003634:	4b6b      	ldr	r3, [pc, #428]	; (80037e4 <menu+0x2448>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b14      	cmp	r3, #20
 800363a:	f040 80b5 	bne.w	80037a8 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800363e:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <menu+0x244c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d113      	bne.n	800366e <menu+0x22d2>
			if(dilSecim == 0) {
 8003646:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <menu+0x242c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800364e:	4a67      	ldr	r2, [pc, #412]	; (80037ec <menu+0x2450>)
 8003650:	2101      	movs	r1, #1
 8003652:	2001      	movs	r0, #1
 8003654:	f7fd f8b0 	bl	80007b8 <lcd_print>
 8003658:	e020      	b.n	800369c <menu+0x2300>
			} else if(dilSecim == 1) {
 800365a:	4b5b      	ldr	r3, [pc, #364]	; (80037c8 <menu+0x242c>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d11c      	bne.n	800369c <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003662:	4a63      	ldr	r2, [pc, #396]	; (80037f0 <menu+0x2454>)
 8003664:	2101      	movs	r1, #1
 8003666:	2001      	movs	r0, #1
 8003668:	f7fd f8a6 	bl	80007b8 <lcd_print>
 800366c:	e016      	b.n	800369c <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800366e:	4b5e      	ldr	r3, [pc, #376]	; (80037e8 <menu+0x244c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d112      	bne.n	800369c <menu+0x2300>
			if(dilSecim == 0) {
 8003676:	4b54      	ldr	r3, [pc, #336]	; (80037c8 <menu+0x242c>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800367e:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <menu+0x2458>)
 8003680:	2101      	movs	r1, #1
 8003682:	2001      	movs	r0, #1
 8003684:	f7fd f898 	bl	80007b8 <lcd_print>
 8003688:	e008      	b.n	800369c <menu+0x2300>
			} else if(dilSecim == 1) {
 800368a:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <menu+0x242c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d104      	bne.n	800369c <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003692:	4a59      	ldr	r2, [pc, #356]	; (80037f8 <menu+0x245c>)
 8003694:	2101      	movs	r1, #1
 8003696:	2001      	movs	r0, #1
 8003698:	f7fd f88e 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 800369c:	4b57      	ldr	r3, [pc, #348]	; (80037fc <menu+0x2460>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d113      	bne.n	80036cc <menu+0x2330>
			if(dilSecim == 0) {
 80036a4:	4b48      	ldr	r3, [pc, #288]	; (80037c8 <menu+0x242c>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80036ac:	4a54      	ldr	r2, [pc, #336]	; (8003800 <menu+0x2464>)
 80036ae:	2101      	movs	r1, #1
 80036b0:	2002      	movs	r0, #2
 80036b2:	f7fd f881 	bl	80007b8 <lcd_print>
 80036b6:	e020      	b.n	80036fa <menu+0x235e>
			} else if(dilSecim == 1) {
 80036b8:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <menu+0x242c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d11c      	bne.n	80036fa <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80036c0:	4a50      	ldr	r2, [pc, #320]	; (8003804 <menu+0x2468>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	2002      	movs	r0, #2
 80036c6:	f7fd f877 	bl	80007b8 <lcd_print>
 80036ca:	e016      	b.n	80036fa <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80036cc:	4b4b      	ldr	r3, [pc, #300]	; (80037fc <menu+0x2460>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d112      	bne.n	80036fa <menu+0x235e>
			if(dilSecim == 0) {
 80036d4:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <menu+0x242c>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80036dc:	4a4a      	ldr	r2, [pc, #296]	; (8003808 <menu+0x246c>)
 80036de:	2101      	movs	r1, #1
 80036e0:	2002      	movs	r0, #2
 80036e2:	f7fd f869 	bl	80007b8 <lcd_print>
 80036e6:	e008      	b.n	80036fa <menu+0x235e>
			} else if(dilSecim == 1) {
 80036e8:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <menu+0x242c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d104      	bne.n	80036fa <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80036f0:	4a46      	ldr	r2, [pc, #280]	; (800380c <menu+0x2470>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	2002      	movs	r0, #2
 80036f6:	f7fd f85f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036fa:	2102      	movs	r1, #2
 80036fc:	4834      	ldr	r0, [pc, #208]	; (80037d0 <menu+0x2434>)
 80036fe:	f005 fe2f 	bl	8009360 <HAL_GPIO_ReadPin>
 8003702:	4603      	mov	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d119      	bne.n	800373c <menu+0x23a0>
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <menu+0x2438>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	f083 0301 	eor.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d012      	beq.n	800373c <menu+0x23a0>
 8003716:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <menu+0x244c>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d10e      	bne.n	800373c <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800371e:	4b37      	ldr	r3, [pc, #220]	; (80037fc <menu+0x2460>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	3301      	adds	r3, #1
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4b35      	ldr	r3, [pc, #212]	; (80037fc <menu+0x2460>)
 8003728:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <menu+0x2460>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d902      	bls.n	8003738 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003732:	4b32      	ldr	r3, [pc, #200]	; (80037fc <menu+0x2460>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003738:	f002 f83c 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800373c:	2104      	movs	r1, #4
 800373e:	4824      	ldr	r0, [pc, #144]	; (80037d0 <menu+0x2434>)
 8003740:	f005 fe0e 	bl	8009360 <HAL_GPIO_ReadPin>
 8003744:	4603      	mov	r3, r0
 8003746:	2b01      	cmp	r3, #1
 8003748:	d119      	bne.n	800377e <menu+0x23e2>
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <menu+0x2438>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	f083 0301 	eor.w	r3, r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <menu+0x23e2>
 8003758:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <menu+0x244c>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d10e      	bne.n	800377e <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003760:	4b26      	ldr	r3, [pc, #152]	; (80037fc <menu+0x2460>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	3b01      	subs	r3, #1
 8003766:	b2da      	uxtb	r2, r3
 8003768:	4b24      	ldr	r3, [pc, #144]	; (80037fc <menu+0x2460>)
 800376a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <menu+0x2460>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <menu+0x2460>)
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800377a:	f002 f81b 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800377e:	2108      	movs	r1, #8
 8003780:	4813      	ldr	r0, [pc, #76]	; (80037d0 <menu+0x2434>)
 8003782:	f005 fded 	bl	8009360 <HAL_GPIO_ReadPin>
 8003786:	4603      	mov	r3, r0
 8003788:	2b01      	cmp	r3, #1
 800378a:	d10d      	bne.n	80037a8 <menu+0x240c>
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <menu+0x2438>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	f083 0301 	eor.w	r3, r3, #1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d006      	beq.n	80037a8 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <menu+0x2460>)
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <menu+0x2440>)
 80037a0:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <menu+0x2444>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <menu+0x2448>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b15      	cmp	r3, #21
 80037ae:	f040 80c2 	bne.w	8003936 <menu+0x259a>
		if(dilSecim == 0) {
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <menu+0x242c>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d12c      	bne.n	8003814 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <menu+0x2474>)
 80037bc:	2101      	movs	r1, #1
 80037be:	2001      	movs	r0, #1
 80037c0:	f7fc fffa 	bl	80007b8 <lcd_print>
 80037c4:	e02f      	b.n	8003826 <menu+0x248a>
 80037c6:	bf00      	nop
 80037c8:	20000331 	.word	0x20000331
 80037cc:	0800d2f0 	.word	0x0800d2f0
 80037d0:	40010800 	.word	0x40010800
 80037d4:	2000033f 	.word	0x2000033f
 80037d8:	20000321 	.word	0x20000321
 80037dc:	20000218 	.word	0x20000218
 80037e0:	2000033c 	.word	0x2000033c
 80037e4:	20000310 	.word	0x20000310
 80037e8:	2000031f 	.word	0x2000031f
 80037ec:	0800d770 	.word	0x0800d770
 80037f0:	0800d784 	.word	0x0800d784
 80037f4:	0800d798 	.word	0x0800d798
 80037f8:	0800d7ac 	.word	0x0800d7ac
 80037fc:	20000322 	.word	0x20000322
 8003800:	0800d7c0 	.word	0x0800d7c0
 8003804:	0800d7d4 	.word	0x0800d7d4
 8003808:	0800d7e4 	.word	0x0800d7e4
 800380c:	0800d7f8 	.word	0x0800d7f8
 8003810:	0800d808 	.word	0x0800d808
		} else if(dilSecim == 1) {
 8003814:	4b9c      	ldr	r3, [pc, #624]	; (8003a88 <menu+0x26ec>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d104      	bne.n	8003826 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800381c:	4a9b      	ldr	r2, [pc, #620]	; (8003a8c <menu+0x26f0>)
 800381e:	2101      	movs	r1, #1
 8003820:	2001      	movs	r0, #1
 8003822:	f7fc ffc9 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003826:	4b9a      	ldr	r3, [pc, #616]	; (8003a90 <menu+0x26f4>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d112      	bne.n	8003854 <menu+0x24b8>
			if(dilSecim == 0) {
 800382e:	4b96      	ldr	r3, [pc, #600]	; (8003a88 <menu+0x26ec>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003836:	4a97      	ldr	r2, [pc, #604]	; (8003a94 <menu+0x26f8>)
 8003838:	2101      	movs	r1, #1
 800383a:	2002      	movs	r0, #2
 800383c:	f7fc ffbc 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003840:	4b91      	ldr	r3, [pc, #580]	; (8003a88 <menu+0x26ec>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d11c      	bne.n	8003882 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003848:	4a93      	ldr	r2, [pc, #588]	; (8003a98 <menu+0x26fc>)
 800384a:	2101      	movs	r1, #1
 800384c:	2002      	movs	r0, #2
 800384e:	f7fc ffb3 	bl	80007b8 <lcd_print>
 8003852:	e016      	b.n	8003882 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003854:	4b8e      	ldr	r3, [pc, #568]	; (8003a90 <menu+0x26f4>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d112      	bne.n	8003882 <menu+0x24e6>
			if(dilSecim == 0) {
 800385c:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <menu+0x26ec>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003864:	4a8d      	ldr	r2, [pc, #564]	; (8003a9c <menu+0x2700>)
 8003866:	2101      	movs	r1, #1
 8003868:	2002      	movs	r0, #2
 800386a:	f7fc ffa5 	bl	80007b8 <lcd_print>
 800386e:	e008      	b.n	8003882 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003870:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <menu+0x26ec>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d104      	bne.n	8003882 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003878:	4a89      	ldr	r2, [pc, #548]	; (8003aa0 <menu+0x2704>)
 800387a:	2101      	movs	r1, #1
 800387c:	2002      	movs	r0, #2
 800387e:	f7fc ff9b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003882:	2102      	movs	r1, #2
 8003884:	4887      	ldr	r0, [pc, #540]	; (8003aa4 <menu+0x2708>)
 8003886:	f005 fd6b 	bl	8009360 <HAL_GPIO_ReadPin>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d115      	bne.n	80038bc <menu+0x2520>
 8003890:	4b85      	ldr	r3, [pc, #532]	; (8003aa8 <menu+0x270c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00e      	beq.n	80038bc <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800389e:	4b7c      	ldr	r3, [pc, #496]	; (8003a90 <menu+0x26f4>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <menu+0x26f4>)
 80038a8:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80038aa:	4b79      	ldr	r3, [pc, #484]	; (8003a90 <menu+0x26f4>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d902      	bls.n	80038b8 <menu+0x251c>
				platformSilindirTipi = 0;
 80038b2:	4b77      	ldr	r3, [pc, #476]	; (8003a90 <menu+0x26f4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038b8:	f001 ff7c 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038bc:	2104      	movs	r1, #4
 80038be:	4879      	ldr	r0, [pc, #484]	; (8003aa4 <menu+0x2708>)
 80038c0:	f005 fd4e 	bl	8009360 <HAL_GPIO_ReadPin>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d115      	bne.n	80038f6 <menu+0x255a>
 80038ca:	4b77      	ldr	r3, [pc, #476]	; (8003aa8 <menu+0x270c>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	f083 0301 	eor.w	r3, r3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80038d8:	4b6d      	ldr	r3, [pc, #436]	; (8003a90 <menu+0x26f4>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	3b01      	subs	r3, #1
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	4b6b      	ldr	r3, [pc, #428]	; (8003a90 <menu+0x26f4>)
 80038e2:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80038e4:	4b6a      	ldr	r3, [pc, #424]	; (8003a90 <menu+0x26f4>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80038ec:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <menu+0x26f4>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038f2:	f001 ff5f 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038f6:	2108      	movs	r1, #8
 80038f8:	486a      	ldr	r0, [pc, #424]	; (8003aa4 <menu+0x2708>)
 80038fa:	f005 fd31 	bl	8009360 <HAL_GPIO_ReadPin>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d118      	bne.n	8003936 <menu+0x259a>
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <menu+0x270c>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	f083 0301 	eor.w	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d011      	beq.n	8003936 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003912:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <menu+0x26f4>)
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <menu+0x2710>)
 8003918:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800391a:	4b5d      	ldr	r3, [pc, #372]	; (8003a90 <menu+0x26f4>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <menu+0x2594>
				altLimit = 1;
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <menu+0x2714>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003928:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <menu+0x2714>)
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <menu+0x2710>)
 800392e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003930:	4b60      	ldr	r3, [pc, #384]	; (8003ab4 <menu+0x2718>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003936:	4b60      	ldr	r3, [pc, #384]	; (8003ab8 <menu+0x271c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b16      	cmp	r3, #22
 800393c:	f040 8081 	bne.w	8003a42 <menu+0x26a6>
		if(dilSecim == 0) {
 8003940:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <menu+0x26ec>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003948:	4a5c      	ldr	r2, [pc, #368]	; (8003abc <menu+0x2720>)
 800394a:	2101      	movs	r1, #1
 800394c:	2001      	movs	r0, #1
 800394e:	f7fc ff33 	bl	80007b8 <lcd_print>
 8003952:	e008      	b.n	8003966 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003954:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <menu+0x26ec>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d104      	bne.n	8003966 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 800395c:	4a58      	ldr	r2, [pc, #352]	; (8003ac0 <menu+0x2724>)
 800395e:	2101      	movs	r1, #1
 8003960:	2001      	movs	r0, #1
 8003962:	f7fc ff29 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003966:	4b48      	ldr	r3, [pc, #288]	; (8003a88 <menu+0x26ec>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800396e:	4a55      	ldr	r2, [pc, #340]	; (8003ac4 <menu+0x2728>)
 8003970:	2101      	movs	r1, #1
 8003972:	2002      	movs	r0, #2
 8003974:	f7fc ff20 	bl	80007b8 <lcd_print>
 8003978:	e008      	b.n	800398c <menu+0x25f0>
			} else if(dilSecim == 1){
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <menu+0x26ec>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d104      	bne.n	800398c <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003982:	4a51      	ldr	r2, [pc, #324]	; (8003ac8 <menu+0x272c>)
 8003984:	2101      	movs	r1, #1
 8003986:	2002      	movs	r0, #2
 8003988:	f7fc ff16 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 800398c:	4b4f      	ldr	r3, [pc, #316]	; (8003acc <menu+0x2730>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	220a      	movs	r2, #10
 8003992:	494f      	ldr	r1, [pc, #316]	; (8003ad0 <menu+0x2734>)
 8003994:	4618      	mov	r0, r3
 8003996:	f008 fd0f 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 800399a:	4a4d      	ldr	r2, [pc, #308]	; (8003ad0 <menu+0x2734>)
 800399c:	2110      	movs	r1, #16
 800399e:	2002      	movs	r0, #2
 80039a0:	f7fc ff0a 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a4:	2102      	movs	r1, #2
 80039a6:	483f      	ldr	r0, [pc, #252]	; (8003aa4 <menu+0x2708>)
 80039a8:	f005 fcda 	bl	8009360 <HAL_GPIO_ReadPin>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d115      	bne.n	80039de <menu+0x2642>
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <menu+0x270c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f083 0301 	eor.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80039c0:	4b42      	ldr	r3, [pc, #264]	; (8003acc <menu+0x2730>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	4b40      	ldr	r3, [pc, #256]	; (8003acc <menu+0x2730>)
 80039ca:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80039cc:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <menu+0x2730>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	d902      	bls.n	80039da <menu+0x263e>
				yukariValfTmr = 0;
 80039d4:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <menu+0x2730>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039da:	f001 feeb 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039de:	2104      	movs	r1, #4
 80039e0:	4830      	ldr	r0, [pc, #192]	; (8003aa4 <menu+0x2708>)
 80039e2:	f005 fcbd 	bl	8009360 <HAL_GPIO_ReadPin>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d115      	bne.n	8003a18 <menu+0x267c>
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <menu+0x270c>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00e      	beq.n	8003a18 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80039fa:	4b34      	ldr	r3, [pc, #208]	; (8003acc <menu+0x2730>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4b32      	ldr	r3, [pc, #200]	; (8003acc <menu+0x2730>)
 8003a04:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <menu+0x2730>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d902      	bls.n	8003a14 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003a0e:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <menu+0x2730>)
 8003a10:	2205      	movs	r2, #5
 8003a12:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a14:	f001 fece 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a18:	2108      	movs	r1, #8
 8003a1a:	4822      	ldr	r0, [pc, #136]	; (8003aa4 <menu+0x2708>)
 8003a1c:	f005 fca0 	bl	8009360 <HAL_GPIO_ReadPin>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d10d      	bne.n	8003a42 <menu+0x26a6>
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <menu+0x270c>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	f083 0301 	eor.w	r3, r3, #1
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <menu+0x2730>)
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <menu+0x2710>)
 8003a3a:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <menu+0x2718>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <menu+0x271c>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b17      	cmp	r3, #23
 8003a48:	f040 80ac 	bne.w	8003ba4 <menu+0x2808>
		if(dilSecim == 0) {
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <menu+0x26ec>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <menu+0x2738>)
 8003a56:	2101      	movs	r1, #1
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f7fc fead 	bl	80007b8 <lcd_print>
 8003a5e:	e008      	b.n	8003a72 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <menu+0x26ec>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d104      	bne.n	8003a72 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003a68:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <menu+0x273c>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7fc fea3 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <menu+0x26ec>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d130      	bne.n	8003adc <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <menu+0x2728>)
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	2002      	movs	r0, #2
 8003a80:	f7fc fe9a 	bl	80007b8 <lcd_print>
 8003a84:	e033      	b.n	8003aee <menu+0x2752>
 8003a86:	bf00      	nop
 8003a88:	20000331 	.word	0x20000331
 8003a8c:	0800d81c 	.word	0x0800d81c
 8003a90:	20000323 	.word	0x20000323
 8003a94:	0800d7c0 	.word	0x0800d7c0
 8003a98:	0800d7d4 	.word	0x0800d7d4
 8003a9c:	0800d7e4 	.word	0x0800d7e4
 8003aa0:	0800d7f8 	.word	0x0800d7f8
 8003aa4:	40010800 	.word	0x40010800
 8003aa8:	2000033f 	.word	0x2000033f
 8003aac:	20000218 	.word	0x20000218
 8003ab0:	20000316 	.word	0x20000316
 8003ab4:	2000033c 	.word	0x2000033c
 8003ab8:	20000310 	.word	0x20000310
 8003abc:	0800d82c 	.word	0x0800d82c
 8003ac0:	0800d840 	.word	0x0800d840
 8003ac4:	0800d4e0 	.word	0x0800d4e0
 8003ac8:	0800d854 	.word	0x0800d854
 8003acc:	20000324 	.word	0x20000324
 8003ad0:	20000288 	.word	0x20000288
 8003ad4:	0800d864 	.word	0x0800d864
 8003ad8:	0800d878 	.word	0x0800d878
			} else if(dilSecim == 1) {
 8003adc:	4b98      	ldr	r3, [pc, #608]	; (8003d40 <menu+0x29a4>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d104      	bne.n	8003aee <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003ae4:	4a97      	ldr	r2, [pc, #604]	; (8003d44 <menu+0x29a8>)
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f7fc fe65 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003aee:	4b96      	ldr	r3, [pc, #600]	; (8003d48 <menu+0x29ac>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	220a      	movs	r2, #10
 8003af4:	4995      	ldr	r1, [pc, #596]	; (8003d4c <menu+0x29b0>)
 8003af6:	4618      	mov	r0, r3
 8003af8:	f008 fc5e 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8003afc:	4a93      	ldr	r2, [pc, #588]	; (8003d4c <menu+0x29b0>)
 8003afe:	2110      	movs	r1, #16
 8003b00:	2002      	movs	r0, #2
 8003b02:	f7fc fe59 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b06:	2102      	movs	r1, #2
 8003b08:	4891      	ldr	r0, [pc, #580]	; (8003d50 <menu+0x29b4>)
 8003b0a:	f005 fc29 	bl	8009360 <HAL_GPIO_ReadPin>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d115      	bne.n	8003b40 <menu+0x27a4>
 8003b14:	4b8f      	ldr	r3, [pc, #572]	; (8003d54 <menu+0x29b8>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	f083 0301 	eor.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003b22:	4b89      	ldr	r3, [pc, #548]	; (8003d48 <menu+0x29ac>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4b87      	ldr	r3, [pc, #540]	; (8003d48 <menu+0x29ac>)
 8003b2c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003b2e:	4b86      	ldr	r3, [pc, #536]	; (8003d48 <menu+0x29ac>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d902      	bls.n	8003b3c <menu+0x27a0>
				asagiValfTmr = 0;
 8003b36:	4b84      	ldr	r3, [pc, #528]	; (8003d48 <menu+0x29ac>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b3c:	f001 fe3a 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b40:	2104      	movs	r1, #4
 8003b42:	4883      	ldr	r0, [pc, #524]	; (8003d50 <menu+0x29b4>)
 8003b44:	f005 fc0c 	bl	8009360 <HAL_GPIO_ReadPin>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d115      	bne.n	8003b7a <menu+0x27de>
 8003b4e:	4b81      	ldr	r3, [pc, #516]	; (8003d54 <menu+0x29b8>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	f083 0301 	eor.w	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00e      	beq.n	8003b7a <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b5c:	4b7a      	ldr	r3, [pc, #488]	; (8003d48 <menu+0x29ac>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b78      	ldr	r3, [pc, #480]	; (8003d48 <menu+0x29ac>)
 8003b66:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003b68:	4b77      	ldr	r3, [pc, #476]	; (8003d48 <menu+0x29ac>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b06      	cmp	r3, #6
 8003b6e:	d902      	bls.n	8003b76 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003b70:	4b75      	ldr	r3, [pc, #468]	; (8003d48 <menu+0x29ac>)
 8003b72:	2205      	movs	r2, #5
 8003b74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b76:	f001 fe1d 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	4874      	ldr	r0, [pc, #464]	; (8003d50 <menu+0x29b4>)
 8003b7e:	f005 fbef 	bl	8009360 <HAL_GPIO_ReadPin>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10d      	bne.n	8003ba4 <menu+0x2808>
 8003b88:	4b72      	ldr	r3, [pc, #456]	; (8003d54 <menu+0x29b8>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	f083 0301 	eor.w	r3, r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003b96:	4b6c      	ldr	r3, [pc, #432]	; (8003d48 <menu+0x29ac>)
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <menu+0x29bc>)
 8003b9c:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003b9e:	4b6f      	ldr	r3, [pc, #444]	; (8003d5c <menu+0x29c0>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003ba4:	4b6e      	ldr	r3, [pc, #440]	; (8003d60 <menu+0x29c4>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b18      	cmp	r3, #24
 8003baa:	f040 809d 	bne.w	8003ce8 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003bae:	4b6d      	ldr	r3, [pc, #436]	; (8003d64 <menu+0x29c8>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d113      	bne.n	8003bde <menu+0x2842>
			if(dilSecim == 0) {
 8003bb6:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <menu+0x29a4>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003bbe:	4a6a      	ldr	r2, [pc, #424]	; (8003d68 <menu+0x29cc>)
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f7fc fdf8 	bl	80007b8 <lcd_print>
 8003bc8:	e020      	b.n	8003c0c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003bca:	4b5d      	ldr	r3, [pc, #372]	; (8003d40 <menu+0x29a4>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d11c      	bne.n	8003c0c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003bd2:	4a66      	ldr	r2, [pc, #408]	; (8003d6c <menu+0x29d0>)
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f7fc fdee 	bl	80007b8 <lcd_print>
 8003bdc:	e016      	b.n	8003c0c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003bde:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <menu+0x29c8>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d112      	bne.n	8003c0c <menu+0x2870>
			if(dilSecim == 0) {
 8003be6:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <menu+0x29a4>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003bee:	4a60      	ldr	r2, [pc, #384]	; (8003d70 <menu+0x29d4>)
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f7fc fde0 	bl	80007b8 <lcd_print>
 8003bf8:	e008      	b.n	8003c0c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003bfa:	4b51      	ldr	r3, [pc, #324]	; (8003d40 <menu+0x29a4>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d104      	bne.n	8003c0c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <menu+0x29d8>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	2001      	movs	r0, #1
 8003c08:	f7fc fdd6 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <menu+0x29a4>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c14:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <menu+0x29dc>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	2002      	movs	r0, #2
 8003c1a:	f7fc fdcd 	bl	80007b8 <lcd_print>
 8003c1e:	e008      	b.n	8003c32 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003c20:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <menu+0x29a4>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d104      	bne.n	8003c32 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003c28:	4a46      	ldr	r2, [pc, #280]	; (8003d44 <menu+0x29a8>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f7fc fdc3 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003c32:	4b52      	ldr	r3, [pc, #328]	; (8003d7c <menu+0x29e0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	220a      	movs	r2, #10
 8003c38:	4944      	ldr	r1, [pc, #272]	; (8003d4c <menu+0x29b0>)
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f008 fbbc 	bl	800c3b8 <itoa>
		lcd_print(2, 16, snum);
 8003c40:	4a42      	ldr	r2, [pc, #264]	; (8003d4c <menu+0x29b0>)
 8003c42:	2110      	movs	r1, #16
 8003c44:	2002      	movs	r0, #2
 8003c46:	f7fc fdb7 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	4840      	ldr	r0, [pc, #256]	; (8003d50 <menu+0x29b4>)
 8003c4e:	f005 fb87 	bl	8009360 <HAL_GPIO_ReadPin>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d115      	bne.n	8003c84 <menu+0x28e8>
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <menu+0x29b8>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	f083 0301 	eor.w	r3, r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00e      	beq.n	8003c84 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003c66:	4b45      	ldr	r3, [pc, #276]	; (8003d7c <menu+0x29e0>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <menu+0x29e0>)
 8003c70:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003c72:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <menu+0x29e0>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d902      	bls.n	8003c80 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003c7a:	4b40      	ldr	r3, [pc, #256]	; (8003d7c <menu+0x29e0>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c80:	f001 fd98 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c84:	2104      	movs	r1, #4
 8003c86:	4832      	ldr	r0, [pc, #200]	; (8003d50 <menu+0x29b4>)
 8003c88:	f005 fb6a 	bl	8009360 <HAL_GPIO_ReadPin>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d115      	bne.n	8003cbe <menu+0x2922>
 8003c92:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <menu+0x29b8>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	f083 0301 	eor.w	r3, r3, #1
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <menu+0x29e0>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <menu+0x29e0>)
 8003caa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <menu+0x29e0>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b06      	cmp	r3, #6
 8003cb2:	d902      	bls.n	8003cba <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <menu+0x29e0>)
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cba:	f001 fd7b 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cbe:	2108      	movs	r1, #8
 8003cc0:	4823      	ldr	r0, [pc, #140]	; (8003d50 <menu+0x29b4>)
 8003cc2:	f005 fb4d 	bl	8009360 <HAL_GPIO_ReadPin>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10d      	bne.n	8003ce8 <menu+0x294c>
 8003ccc:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <menu+0x29b8>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f083 0301 	eor.w	r3, r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d006      	beq.n	8003ce8 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003cda:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <menu+0x29e0>)
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <menu+0x29bc>)
 8003ce0:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	; (8003d5c <menu+0x29c0>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <menu+0x29c4>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b19      	cmp	r3, #25
 8003cee:	f040 80c4 	bne.w	8003e7a <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <menu+0x29c8>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d113      	bne.n	8003d22 <menu+0x2986>
			if(dilSecim == 0) {
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <menu+0x29a4>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d105      	bne.n	8003d0e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <menu+0x29e4>)
 8003d04:	2101      	movs	r1, #1
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7fc fd56 	bl	80007b8 <lcd_print>
 8003d0c:	e047      	b.n	8003d9e <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <menu+0x29a4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d143      	bne.n	8003d9e <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003d16:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <menu+0x29e8>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f7fc fd4c 	bl	80007b8 <lcd_print>
 8003d20:	e03d      	b.n	8003d9e <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <menu+0x29c8>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d139      	bne.n	8003d9e <menu+0x2a02>
			if(dilSecim == 0) {
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <menu+0x29a4>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d12c      	bne.n	8003d8c <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <menu+0x29ec>)
 8003d34:	2101      	movs	r1, #1
 8003d36:	2001      	movs	r0, #1
 8003d38:	f7fc fd3e 	bl	80007b8 <lcd_print>
 8003d3c:	e02f      	b.n	8003d9e <menu+0x2a02>
 8003d3e:	bf00      	nop
 8003d40:	20000331 	.word	0x20000331
 8003d44:	0800d854 	.word	0x0800d854
 8003d48:	20000325 	.word	0x20000325
 8003d4c:	20000288 	.word	0x20000288
 8003d50:	40010800 	.word	0x40010800
 8003d54:	2000033f 	.word	0x2000033f
 8003d58:	20000218 	.word	0x20000218
 8003d5c:	2000033c 	.word	0x2000033c
 8003d60:	20000310 	.word	0x20000310
 8003d64:	2000031f 	.word	0x2000031f
 8003d68:	0800d88c 	.word	0x0800d88c
 8003d6c:	0800d8a0 	.word	0x0800d8a0
 8003d70:	0800d8b4 	.word	0x0800d8b4
 8003d74:	0800d8c8 	.word	0x0800d8c8
 8003d78:	0800d4e0 	.word	0x0800d4e0
 8003d7c:	20000326 	.word	0x20000326
 8003d80:	0800d8dc 	.word	0x0800d8dc
 8003d84:	0800d8f0 	.word	0x0800d8f0
 8003d88:	0800d904 	.word	0x0800d904
			} else if(dilSecim == 1) {
 8003d8c:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <menu+0x2bc0>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d104      	bne.n	8003d9e <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003d94:	4a72      	ldr	r2, [pc, #456]	; (8003f60 <menu+0x2bc4>)
 8003d96:	2101      	movs	r1, #1
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7fc fd0d 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003d9e:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <menu+0x2bc0>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003da6:	4a6f      	ldr	r2, [pc, #444]	; (8003f64 <menu+0x2bc8>)
 8003da8:	2101      	movs	r1, #1
 8003daa:	2002      	movs	r0, #2
 8003dac:	f7fc fd04 	bl	80007b8 <lcd_print>
 8003db0:	e008      	b.n	8003dc4 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003db2:	4b6a      	ldr	r3, [pc, #424]	; (8003f5c <menu+0x2bc0>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d104      	bne.n	8003dc4 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003dba:	4a6b      	ldr	r2, [pc, #428]	; (8003f68 <menu+0x2bcc>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f7fc fcfa 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003dc4:	4b69      	ldr	r3, [pc, #420]	; (8003f6c <menu+0x2bd0>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	220a      	movs	r2, #10
 8003dca:	4969      	ldr	r1, [pc, #420]	; (8003f70 <menu+0x2bd4>)
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f008 faf3 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8003dd2:	4a67      	ldr	r2, [pc, #412]	; (8003f70 <menu+0x2bd4>)
 8003dd4:	2110      	movs	r1, #16
 8003dd6:	2002      	movs	r0, #2
 8003dd8:	f7fc fcee 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4865      	ldr	r0, [pc, #404]	; (8003f74 <menu+0x2bd8>)
 8003de0:	f005 fabe 	bl	8009360 <HAL_GPIO_ReadPin>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d115      	bne.n	8003e16 <menu+0x2a7a>
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <menu+0x2bdc>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	f083 0301 	eor.w	r3, r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003df8:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <menu+0x2bd0>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	4b5a      	ldr	r3, [pc, #360]	; (8003f6c <menu+0x2bd0>)
 8003e02:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003e04:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <menu+0x2bd0>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d902      	bls.n	8003e12 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003e0c:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <menu+0x2bd0>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e12:	f001 fccf 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e16:	2104      	movs	r1, #4
 8003e18:	4856      	ldr	r0, [pc, #344]	; (8003f74 <menu+0x2bd8>)
 8003e1a:	f005 faa1 	bl	8009360 <HAL_GPIO_ReadPin>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d115      	bne.n	8003e50 <menu+0x2ab4>
 8003e24:	4b54      	ldr	r3, [pc, #336]	; (8003f78 <menu+0x2bdc>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f083 0301 	eor.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00e      	beq.n	8003e50 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003e32:	4b4e      	ldr	r3, [pc, #312]	; (8003f6c <menu+0x2bd0>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <menu+0x2bd0>)
 8003e3c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003e3e:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <menu+0x2bd0>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b06      	cmp	r3, #6
 8003e44:	d902      	bls.n	8003e4c <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003e46:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <menu+0x2bd0>)
 8003e48:	2205      	movs	r2, #5
 8003e4a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e4c:	f001 fcb2 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e50:	2108      	movs	r1, #8
 8003e52:	4848      	ldr	r0, [pc, #288]	; (8003f74 <menu+0x2bd8>)
 8003e54:	f005 fa84 	bl	8009360 <HAL_GPIO_ReadPin>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10d      	bne.n	8003e7a <menu+0x2ade>
 8003e5e:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <menu+0x2bdc>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	f083 0301 	eor.w	r3, r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d006      	beq.n	8003e7a <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003e6c:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <menu+0x2bd0>)
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	4b42      	ldr	r3, [pc, #264]	; (8003f7c <menu+0x2be0>)
 8003e72:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003e74:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <menu+0x2be4>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <menu+0x2be8>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b1a      	cmp	r3, #26
 8003e80:	f040 80ec 	bne.w	800405c <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e84:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <menu+0x2bc0>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003e8c:	4a3e      	ldr	r2, [pc, #248]	; (8003f88 <menu+0x2bec>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2001      	movs	r0, #1
 8003e92:	f7fc fc91 	bl	80007b8 <lcd_print>
 8003e96:	e008      	b.n	8003eaa <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003e98:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <menu+0x2bc0>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d104      	bne.n	8003eaa <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003ea0:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <menu+0x2bf0>)
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f7fc fc87 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <menu+0x2bf4>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b63      	cmp	r3, #99	; 0x63
 8003eb0:	d91e      	bls.n	8003ef0 <menu+0x2b54>
			if(dilSecim == 0) {
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <menu+0x2bc0>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d104      	bne.n	8003ec4 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <menu+0x2bc8>)
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	2002      	movs	r0, #2
 8003ec0:	f7fc fc7a 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <menu+0x2bc0>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d104      	bne.n	8003ed6 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003ecc:	4a26      	ldr	r2, [pc, #152]	; (8003f68 <menu+0x2bcc>)
 8003ece:	2101      	movs	r1, #1
 8003ed0:	2002      	movs	r0, #2
 8003ed2:	f7fc fc71 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ed6:	4b2e      	ldr	r3, [pc, #184]	; (8003f90 <menu+0x2bf4>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	220a      	movs	r2, #10
 8003edc:	4924      	ldr	r1, [pc, #144]	; (8003f70 <menu+0x2bd4>)
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f008 fa6a 	bl	800c3b8 <itoa>
			lcd_print(2,14,snum);
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <menu+0x2bd4>)
 8003ee6:	210e      	movs	r1, #14
 8003ee8:	2002      	movs	r0, #2
 8003eea:	f7fc fc65 	bl	80007b8 <lcd_print>
 8003eee:	e066      	b.n	8003fbe <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <menu+0x2bf4>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b09      	cmp	r3, #9
 8003ef6:	d923      	bls.n	8003f40 <menu+0x2ba4>
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <menu+0x2bf4>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b63      	cmp	r3, #99	; 0x63
 8003efe:	d81f      	bhi.n	8003f40 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <menu+0x2bc0>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f08:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <menu+0x2bc8>)
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f7fc fc53 	bl	80007b8 <lcd_print>
 8003f12:	e008      	b.n	8003f26 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <menu+0x2bc0>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d104      	bne.n	8003f26 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003f1c:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <menu+0x2bcc>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	2002      	movs	r0, #2
 8003f22:	f7fc fc49 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <menu+0x2bf4>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	220a      	movs	r2, #10
 8003f2c:	4910      	ldr	r1, [pc, #64]	; (8003f70 <menu+0x2bd4>)
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f008 fa42 	bl	800c3b8 <itoa>
			lcd_print(2, 15, snum);
 8003f34:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <menu+0x2bd4>)
 8003f36:	210f      	movs	r1, #15
 8003f38:	2002      	movs	r0, #2
 8003f3a:	f7fc fc3d 	bl	80007b8 <lcd_print>
 8003f3e:	e03e      	b.n	8003fbe <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <menu+0x2bf4>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b09      	cmp	r3, #9
 8003f46:	d83a      	bhi.n	8003fbe <menu+0x2c22>
			if(dilSecim == 0) {
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <menu+0x2bc0>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d121      	bne.n	8003f94 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <menu+0x2bc8>)
 8003f52:	2101      	movs	r1, #1
 8003f54:	2002      	movs	r0, #2
 8003f56:	f7fc fc2f 	bl	80007b8 <lcd_print>
 8003f5a:	e024      	b.n	8003fa6 <menu+0x2c0a>
 8003f5c:	20000331 	.word	0x20000331
 8003f60:	0800d918 	.word	0x0800d918
 8003f64:	0800d4e0 	.word	0x0800d4e0
 8003f68:	0800d854 	.word	0x0800d854
 8003f6c:	20000327 	.word	0x20000327
 8003f70:	20000288 	.word	0x20000288
 8003f74:	40010800 	.word	0x40010800
 8003f78:	2000033f 	.word	0x2000033f
 8003f7c:	20000218 	.word	0x20000218
 8003f80:	2000033c 	.word	0x2000033c
 8003f84:	20000310 	.word	0x20000310
 8003f88:	0800d92c 	.word	0x0800d92c
 8003f8c:	0800d940 	.word	0x0800d940
 8003f90:	20000328 	.word	0x20000328
			} else if(dilSecim == 1) {
 8003f94:	4b8f      	ldr	r3, [pc, #572]	; (80041d4 <menu+0x2e38>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d104      	bne.n	8003fa6 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003f9c:	4a8e      	ldr	r2, [pc, #568]	; (80041d8 <menu+0x2e3c>)
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	2002      	movs	r0, #2
 8003fa2:	f7fc fc09 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fa6:	4b8d      	ldr	r3, [pc, #564]	; (80041dc <menu+0x2e40>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	220a      	movs	r2, #10
 8003fac:	498c      	ldr	r1, [pc, #560]	; (80041e0 <menu+0x2e44>)
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f008 fa02 	bl	800c3b8 <itoa>
			lcd_print(2, 16, snum);
 8003fb4:	4a8a      	ldr	r2, [pc, #552]	; (80041e0 <menu+0x2e44>)
 8003fb6:	2110      	movs	r1, #16
 8003fb8:	2002      	movs	r0, #2
 8003fba:	f7fc fbfd 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4888      	ldr	r0, [pc, #544]	; (80041e4 <menu+0x2e48>)
 8003fc2:	f005 f9cd 	bl	8009360 <HAL_GPIO_ReadPin>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d115      	bne.n	8003ff8 <menu+0x2c5c>
 8003fcc:	4b86      	ldr	r3, [pc, #536]	; (80041e8 <menu+0x2e4c>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f083 0301 	eor.w	r3, r3, #1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003fda:	4b80      	ldr	r3, [pc, #512]	; (80041dc <menu+0x2e40>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4b7e      	ldr	r3, [pc, #504]	; (80041dc <menu+0x2e40>)
 8003fe4:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003fe6:	4b7d      	ldr	r3, [pc, #500]	; (80041dc <menu+0x2e40>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2bb4      	cmp	r3, #180	; 0xb4
 8003fec:	d902      	bls.n	8003ff4 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003fee:	4b7b      	ldr	r3, [pc, #492]	; (80041dc <menu+0x2e40>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ff4:	f001 fbde 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ff8:	2104      	movs	r1, #4
 8003ffa:	487a      	ldr	r0, [pc, #488]	; (80041e4 <menu+0x2e48>)
 8003ffc:	f005 f9b0 	bl	8009360 <HAL_GPIO_ReadPin>
 8004000:	4603      	mov	r3, r0
 8004002:	2b01      	cmp	r3, #1
 8004004:	d115      	bne.n	8004032 <menu+0x2c96>
 8004006:	4b78      	ldr	r3, [pc, #480]	; (80041e8 <menu+0x2e4c>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	f083 0301 	eor.w	r3, r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00e      	beq.n	8004032 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004014:	4b71      	ldr	r3, [pc, #452]	; (80041dc <menu+0x2e40>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	4b6f      	ldr	r3, [pc, #444]	; (80041dc <menu+0x2e40>)
 800401e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004020:	4b6e      	ldr	r3, [pc, #440]	; (80041dc <menu+0x2e40>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2bb5      	cmp	r3, #181	; 0xb5
 8004026:	d902      	bls.n	800402e <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004028:	4b6c      	ldr	r3, [pc, #432]	; (80041dc <menu+0x2e40>)
 800402a:	22b4      	movs	r2, #180	; 0xb4
 800402c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800402e:	f001 fbc1 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004032:	2108      	movs	r1, #8
 8004034:	486b      	ldr	r0, [pc, #428]	; (80041e4 <menu+0x2e48>)
 8004036:	f005 f993 	bl	8009360 <HAL_GPIO_ReadPin>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10d      	bne.n	800405c <menu+0x2cc0>
 8004040:	4b69      	ldr	r3, [pc, #420]	; (80041e8 <menu+0x2e4c>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f083 0301 	eor.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800404e:	4b63      	ldr	r3, [pc, #396]	; (80041dc <menu+0x2e40>)
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	4b66      	ldr	r3, [pc, #408]	; (80041ec <menu+0x2e50>)
 8004054:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004056:	4b66      	ldr	r3, [pc, #408]	; (80041f0 <menu+0x2e54>)
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 800405c:	4b65      	ldr	r3, [pc, #404]	; (80041f4 <menu+0x2e58>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b1b      	cmp	r3, #27
 8004062:	f040 8083 	bne.w	800416c <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8004066:	4a64      	ldr	r2, [pc, #400]	; (80041f8 <menu+0x2e5c>)
 8004068:	2101      	movs	r1, #1
 800406a:	2001      	movs	r0, #1
 800406c:	f7fc fba4 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 8004070:	4b62      	ldr	r3, [pc, #392]	; (80041fc <menu+0x2e60>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d113      	bne.n	80040a0 <menu+0x2d04>
			if(dilSecim == 0) {
 8004078:	4b56      	ldr	r3, [pc, #344]	; (80041d4 <menu+0x2e38>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004080:	4a5f      	ldr	r2, [pc, #380]	; (8004200 <menu+0x2e64>)
 8004082:	2101      	movs	r1, #1
 8004084:	2002      	movs	r0, #2
 8004086:	f7fc fb97 	bl	80007b8 <lcd_print>
 800408a:	e020      	b.n	80040ce <menu+0x2d32>
			} else if(dilSecim == 1) {
 800408c:	4b51      	ldr	r3, [pc, #324]	; (80041d4 <menu+0x2e38>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d11c      	bne.n	80040ce <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004094:	4a5b      	ldr	r2, [pc, #364]	; (8004204 <menu+0x2e68>)
 8004096:	2101      	movs	r1, #1
 8004098:	2002      	movs	r0, #2
 800409a:	f7fc fb8d 	bl	80007b8 <lcd_print>
 800409e:	e016      	b.n	80040ce <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80040a0:	4b56      	ldr	r3, [pc, #344]	; (80041fc <menu+0x2e60>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d112      	bne.n	80040ce <menu+0x2d32>
			if(dilSecim == 0) {
 80040a8:	4b4a      	ldr	r3, [pc, #296]	; (80041d4 <menu+0x2e38>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80040b0:	4a55      	ldr	r2, [pc, #340]	; (8004208 <menu+0x2e6c>)
 80040b2:	2101      	movs	r1, #1
 80040b4:	2002      	movs	r0, #2
 80040b6:	f7fc fb7f 	bl	80007b8 <lcd_print>
 80040ba:	e008      	b.n	80040ce <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040bc:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <menu+0x2e38>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d104      	bne.n	80040ce <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80040c4:	4a51      	ldr	r2, [pc, #324]	; (800420c <menu+0x2e70>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	2002      	movs	r0, #2
 80040ca:	f7fc fb75 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040ce:	2102      	movs	r1, #2
 80040d0:	4844      	ldr	r0, [pc, #272]	; (80041e4 <menu+0x2e48>)
 80040d2:	f005 f945 	bl	8009360 <HAL_GPIO_ReadPin>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d115      	bne.n	8004108 <menu+0x2d6c>
 80040dc:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <menu+0x2e4c>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	f083 0301 	eor.w	r3, r3, #1
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00e      	beq.n	8004108 <menu+0x2d6c>
			buzzer = buzzer + 1;
 80040ea:	4b44      	ldr	r3, [pc, #272]	; (80041fc <menu+0x2e60>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b42      	ldr	r3, [pc, #264]	; (80041fc <menu+0x2e60>)
 80040f4:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <menu+0x2e60>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d902      	bls.n	8004104 <menu+0x2d68>
				buzzer = 0;
 80040fe:	4b3f      	ldr	r3, [pc, #252]	; (80041fc <menu+0x2e60>)
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004104:	f001 fb56 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004108:	2104      	movs	r1, #4
 800410a:	4836      	ldr	r0, [pc, #216]	; (80041e4 <menu+0x2e48>)
 800410c:	f005 f928 	bl	8009360 <HAL_GPIO_ReadPin>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d115      	bne.n	8004142 <menu+0x2da6>
 8004116:	4b34      	ldr	r3, [pc, #208]	; (80041e8 <menu+0x2e4c>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	f083 0301 	eor.w	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00e      	beq.n	8004142 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004124:	4b35      	ldr	r3, [pc, #212]	; (80041fc <menu+0x2e60>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	3b01      	subs	r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <menu+0x2e60>)
 800412e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004130:	4b32      	ldr	r3, [pc, #200]	; (80041fc <menu+0x2e60>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <menu+0x2da2>
		   		buzzer = 1;
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <menu+0x2e60>)
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800413e:	f001 fb39 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004142:	2108      	movs	r1, #8
 8004144:	4827      	ldr	r0, [pc, #156]	; (80041e4 <menu+0x2e48>)
 8004146:	f005 f90b 	bl	8009360 <HAL_GPIO_ReadPin>
 800414a:	4603      	mov	r3, r0
 800414c:	2b01      	cmp	r3, #1
 800414e:	d10d      	bne.n	800416c <menu+0x2dd0>
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <menu+0x2e4c>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	f083 0301 	eor.w	r3, r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d006      	beq.n	800416c <menu+0x2dd0>
			eepromData[25] = buzzer;
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <menu+0x2e60>)
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	4b22      	ldr	r3, [pc, #136]	; (80041ec <menu+0x2e50>)
 8004164:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <menu+0x2e54>)
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <menu+0x2e58>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b1c      	cmp	r3, #28
 8004172:	f040 80ab 	bne.w	80042cc <menu+0x2f30>
		calismaSayModu = 0;
 8004176:	4b26      	ldr	r3, [pc, #152]	; (8004210 <menu+0x2e74>)
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 800417c:	4a25      	ldr	r2, [pc, #148]	; (8004214 <menu+0x2e78>)
 800417e:	2101      	movs	r1, #1
 8004180:	2001      	movs	r0, #1
 8004182:	f7fc fb19 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 8004186:	4b24      	ldr	r3, [pc, #144]	; (8004218 <menu+0x2e7c>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d113      	bne.n	80041b6 <menu+0x2e1a>
			if(dilSecim == 0) {
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <menu+0x2e38>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004196:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <menu+0x2e64>)
 8004198:	2101      	movs	r1, #1
 800419a:	2002      	movs	r0, #2
 800419c:	f7fc fb0c 	bl	80007b8 <lcd_print>
 80041a0:	e045      	b.n	800422e <menu+0x2e92>
			} else if(dilSecim == 1) {
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <menu+0x2e38>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d141      	bne.n	800422e <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80041aa:	4a16      	ldr	r2, [pc, #88]	; (8004204 <menu+0x2e68>)
 80041ac:	2101      	movs	r1, #1
 80041ae:	2002      	movs	r0, #2
 80041b0:	f7fc fb02 	bl	80007b8 <lcd_print>
 80041b4:	e03b      	b.n	800422e <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <menu+0x2e7c>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d137      	bne.n	800422e <menu+0x2e92>
			if(dilSecim == 0){
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <menu+0x2e38>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d12a      	bne.n	800421c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <menu+0x2e6c>)
 80041c8:	2101      	movs	r1, #1
 80041ca:	2002      	movs	r0, #2
 80041cc:	f7fc faf4 	bl	80007b8 <lcd_print>
 80041d0:	e02d      	b.n	800422e <menu+0x2e92>
 80041d2:	bf00      	nop
 80041d4:	20000331 	.word	0x20000331
 80041d8:	0800d854 	.word	0x0800d854
 80041dc:	20000328 	.word	0x20000328
 80041e0:	20000288 	.word	0x20000288
 80041e4:	40010800 	.word	0x40010800
 80041e8:	2000033f 	.word	0x2000033f
 80041ec:	20000218 	.word	0x20000218
 80041f0:	2000033c 	.word	0x2000033c
 80041f4:	20000310 	.word	0x20000310
 80041f8:	0800d954 	.word	0x0800d954
 80041fc:	2000032c 	.word	0x2000032c
 8004200:	0800d27c 	.word	0x0800d27c
 8004204:	0800d290 	.word	0x0800d290
 8004208:	0800d2dc 	.word	0x0800d2dc
 800420c:	0800d2f0 	.word	0x0800d2f0
 8004210:	20000330 	.word	0x20000330
 8004214:	0800d968 	.word	0x0800d968
 8004218:	2000032e 	.word	0x2000032e
			} else if(dilSecim == 1) {
 800421c:	4b71      	ldr	r3, [pc, #452]	; (80043e4 <menu+0x3048>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d104      	bne.n	800422e <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004224:	4a70      	ldr	r2, [pc, #448]	; (80043e8 <menu+0x304c>)
 8004226:	2101      	movs	r1, #1
 8004228:	2002      	movs	r0, #2
 800422a:	f7fc fac5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800422e:	2102      	movs	r1, #2
 8004230:	486e      	ldr	r0, [pc, #440]	; (80043ec <menu+0x3050>)
 8004232:	f005 f895 	bl	8009360 <HAL_GPIO_ReadPin>
 8004236:	4603      	mov	r3, r0
 8004238:	2b01      	cmp	r3, #1
 800423a:	d115      	bne.n	8004268 <menu+0x2ecc>
 800423c:	4b6c      	ldr	r3, [pc, #432]	; (80043f0 <menu+0x3054>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f083 0301 	eor.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00e      	beq.n	8004268 <menu+0x2ecc>
			demoMode = demoMode + 1;
 800424a:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <menu+0x3058>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	b2da      	uxtb	r2, r3
 8004252:	4b68      	ldr	r3, [pc, #416]	; (80043f4 <menu+0x3058>)
 8004254:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004256:	4b67      	ldr	r3, [pc, #412]	; (80043f4 <menu+0x3058>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d902      	bls.n	8004264 <menu+0x2ec8>
				demoMode = 0;
 800425e:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <menu+0x3058>)
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004264:	f001 faa6 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004268:	2104      	movs	r1, #4
 800426a:	4860      	ldr	r0, [pc, #384]	; (80043ec <menu+0x3050>)
 800426c:	f005 f878 	bl	8009360 <HAL_GPIO_ReadPin>
 8004270:	4603      	mov	r3, r0
 8004272:	2b01      	cmp	r3, #1
 8004274:	d115      	bne.n	80042a2 <menu+0x2f06>
 8004276:	4b5e      	ldr	r3, [pc, #376]	; (80043f0 <menu+0x3054>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	f083 0301 	eor.w	r3, r3, #1
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004284:	4b5b      	ldr	r3, [pc, #364]	; (80043f4 <menu+0x3058>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	3b01      	subs	r3, #1
 800428a:	b2da      	uxtb	r2, r3
 800428c:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <menu+0x3058>)
 800428e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004290:	4b58      	ldr	r3, [pc, #352]	; (80043f4 <menu+0x3058>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <menu+0x2f02>
		   		demoMode = 1;
 8004298:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <menu+0x3058>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800429e:	f001 fa89 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042a2:	2108      	movs	r1, #8
 80042a4:	4851      	ldr	r0, [pc, #324]	; (80043ec <menu+0x3050>)
 80042a6:	f005 f85b 	bl	8009360 <HAL_GPIO_ReadPin>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10d      	bne.n	80042cc <menu+0x2f30>
 80042b0:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <menu+0x3054>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f083 0301 	eor.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d006      	beq.n	80042cc <menu+0x2f30>
			eepromData[26] = demoMode;
 80042be:	4b4d      	ldr	r3, [pc, #308]	; (80043f4 <menu+0x3058>)
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	4b4d      	ldr	r3, [pc, #308]	; (80043f8 <menu+0x305c>)
 80042c4:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80042c6:	4b4d      	ldr	r3, [pc, #308]	; (80043fc <menu+0x3060>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80042cc:	4b4c      	ldr	r3, [pc, #304]	; (8004400 <menu+0x3064>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b1d      	cmp	r3, #29
 80042d2:	f040 8132 	bne.w	800453a <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80042d6:	4b4b      	ldr	r3, [pc, #300]	; (8004404 <menu+0x3068>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d113      	bne.n	8004306 <menu+0x2f6a>
 80042de:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <menu+0x306c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <menu+0x2f6a>
 80042e6:	4b49      	ldr	r3, [pc, #292]	; (800440c <menu+0x3070>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <menu+0x2f6a>
 80042ee:	4b48      	ldr	r3, [pc, #288]	; (8004410 <menu+0x3074>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d107      	bne.n	8004306 <menu+0x2f6a>
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <menu+0x3078>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80042fe:	4b46      	ldr	r3, [pc, #280]	; (8004418 <menu+0x307c>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e002      	b.n	800430c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004306:	4b44      	ldr	r3, [pc, #272]	; (8004418 <menu+0x307c>)
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800430c:	4b43      	ldr	r3, [pc, #268]	; (800441c <menu+0x3080>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d154      	bne.n	80043be <menu+0x3022>
			if(dilSecim == 0) {
 8004314:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <menu+0x3048>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800431c:	4a40      	ldr	r2, [pc, #256]	; (8004420 <menu+0x3084>)
 800431e:	2101      	movs	r1, #1
 8004320:	2001      	movs	r0, #1
 8004322:	f7fc fa49 	bl	80007b8 <lcd_print>
 8004326:	e008      	b.n	800433a <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <menu+0x3048>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d104      	bne.n	800433a <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004330:	4a3c      	ldr	r2, [pc, #240]	; (8004424 <menu+0x3088>)
 8004332:	2101      	movs	r1, #1
 8004334:	2001      	movs	r0, #1
 8004336:	f7fc fa3f 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <menu+0x3078>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	220a      	movs	r2, #10
 8004340:	4939      	ldr	r1, [pc, #228]	; (8004428 <menu+0x308c>)
 8004342:	4618      	mov	r0, r3
 8004344:	f008 f838 	bl	800c3b8 <itoa>
			lcd_print(2, 12, snum);
 8004348:	4a37      	ldr	r2, [pc, #220]	; (8004428 <menu+0x308c>)
 800434a:	210c      	movs	r1, #12
 800434c:	2002      	movs	r0, #2
 800434e:	f7fc fa33 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004352:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <menu+0x3074>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	220a      	movs	r2, #10
 8004358:	4933      	ldr	r1, [pc, #204]	; (8004428 <menu+0x308c>)
 800435a:	4618      	mov	r0, r3
 800435c:	f008 f82c 	bl	800c3b8 <itoa>
			lcd_print(2, 13, snum);
 8004360:	4a31      	ldr	r2, [pc, #196]	; (8004428 <menu+0x308c>)
 8004362:	210d      	movs	r1, #13
 8004364:	2002      	movs	r0, #2
 8004366:	f7fc fa27 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <menu+0x3070>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	220a      	movs	r2, #10
 8004370:	492d      	ldr	r1, [pc, #180]	; (8004428 <menu+0x308c>)
 8004372:	4618      	mov	r0, r3
 8004374:	f008 f820 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 8004378:	4a2b      	ldr	r2, [pc, #172]	; (8004428 <menu+0x308c>)
 800437a:	210e      	movs	r1, #14
 800437c:	2002      	movs	r0, #2
 800437e:	f7fc fa1b 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004382:	4b21      	ldr	r3, [pc, #132]	; (8004408 <menu+0x306c>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	220a      	movs	r2, #10
 8004388:	4927      	ldr	r1, [pc, #156]	; (8004428 <menu+0x308c>)
 800438a:	4618      	mov	r0, r3
 800438c:	f008 f814 	bl	800c3b8 <itoa>
			lcd_print(2, 15, snum);
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <menu+0x308c>)
 8004392:	210f      	movs	r1, #15
 8004394:	2002      	movs	r0, #2
 8004396:	f7fc fa0f 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <menu+0x3068>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	220a      	movs	r2, #10
 80043a0:	4921      	ldr	r1, [pc, #132]	; (8004428 <menu+0x308c>)
 80043a2:	4618      	mov	r0, r3
 80043a4:	f008 f808 	bl	800c3b8 <itoa>
			lcd_print(2, 16, snum);
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <menu+0x308c>)
 80043aa:	2110      	movs	r1, #16
 80043ac:	2002      	movs	r0, #2
 80043ae:	f7fc fa03 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <menu+0x3090>)
 80043b4:	2101      	movs	r1, #1
 80043b6:	2002      	movs	r0, #2
 80043b8:	f7fc f9fe 	bl	80007b8 <lcd_print>
 80043bc:	e048      	b.n	8004450 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <menu+0x3080>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d144      	bne.n	8004450 <menu+0x30b4>
			if(dilSecim == 0) {
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <menu+0x3048>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d132      	bne.n	8004434 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043ce:	4a14      	ldr	r2, [pc, #80]	; (8004420 <menu+0x3084>)
 80043d0:	2101      	movs	r1, #1
 80043d2:	2001      	movs	r0, #1
 80043d4:	f7fc f9f0 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80043d8:	4a15      	ldr	r2, [pc, #84]	; (8004430 <menu+0x3094>)
 80043da:	2101      	movs	r1, #1
 80043dc:	2002      	movs	r0, #2
 80043de:	f7fc f9eb 	bl	80007b8 <lcd_print>
 80043e2:	e035      	b.n	8004450 <menu+0x30b4>
 80043e4:	20000331 	.word	0x20000331
 80043e8:	0800d2f0 	.word	0x0800d2f0
 80043ec:	40010800 	.word	0x40010800
 80043f0:	2000033f 	.word	0x2000033f
 80043f4:	2000032e 	.word	0x2000032e
 80043f8:	20000218 	.word	0x20000218
 80043fc:	2000033c 	.word	0x2000033c
 8004400:	20000310 	.word	0x20000310
 8004404:	2000030d 	.word	0x2000030d
 8004408:	2000030e 	.word	0x2000030e
 800440c:	200000a1 	.word	0x200000a1
 8004410:	200000a2 	.word	0x200000a2
 8004414:	2000030f 	.word	0x2000030f
 8004418:	20000351 	.word	0x20000351
 800441c:	20000330 	.word	0x20000330
 8004420:	0800d978 	.word	0x0800d978
 8004424:	0800d98c 	.word	0x0800d98c
 8004428:	20000288 	.word	0x20000288
 800442c:	0800d9a0 	.word	0x0800d9a0
 8004430:	0800d9ac 	.word	0x0800d9ac
			} else if(dilSecim == 1) {
 8004434:	4b94      	ldr	r3, [pc, #592]	; (8004688 <menu+0x32ec>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d109      	bne.n	8004450 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 800443c:	4a93      	ldr	r2, [pc, #588]	; (800468c <menu+0x32f0>)
 800443e:	2101      	movs	r1, #1
 8004440:	2001      	movs	r0, #1
 8004442:	f7fc f9b9 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004446:	4a92      	ldr	r2, [pc, #584]	; (8004690 <menu+0x32f4>)
 8004448:	2101      	movs	r1, #1
 800444a:	2002      	movs	r0, #2
 800444c:	f7fc f9b4 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004450:	2102      	movs	r1, #2
 8004452:	4890      	ldr	r0, [pc, #576]	; (8004694 <menu+0x32f8>)
 8004454:	f004 ff84 	bl	8009360 <HAL_GPIO_ReadPin>
 8004458:	4603      	mov	r3, r0
 800445a:	2b01      	cmp	r3, #1
 800445c:	d119      	bne.n	8004492 <menu+0x30f6>
 800445e:	4b8e      	ldr	r3, [pc, #568]	; (8004698 <menu+0x32fc>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	f083 0301 	eor.w	r3, r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d012      	beq.n	8004492 <menu+0x30f6>
 800446c:	4b8b      	ldr	r3, [pc, #556]	; (800469c <menu+0x3300>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004474:	4b8a      	ldr	r3, [pc, #552]	; (80046a0 <menu+0x3304>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	4b88      	ldr	r3, [pc, #544]	; (80046a0 <menu+0x3304>)
 800447e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004480:	4b87      	ldr	r3, [pc, #540]	; (80046a0 <menu+0x3304>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d902      	bls.n	800448e <menu+0x30f2>
				calismaSayModu = 0;
 8004488:	4b85      	ldr	r3, [pc, #532]	; (80046a0 <menu+0x3304>)
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800448e:	f001 f991 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004492:	2104      	movs	r1, #4
 8004494:	487f      	ldr	r0, [pc, #508]	; (8004694 <menu+0x32f8>)
 8004496:	f004 ff63 	bl	8009360 <HAL_GPIO_ReadPin>
 800449a:	4603      	mov	r3, r0
 800449c:	2b01      	cmp	r3, #1
 800449e:	d119      	bne.n	80044d4 <menu+0x3138>
 80044a0:	4b7d      	ldr	r3, [pc, #500]	; (8004698 <menu+0x32fc>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f083 0301 	eor.w	r3, r3, #1
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d012      	beq.n	80044d4 <menu+0x3138>
 80044ae:	4b7b      	ldr	r3, [pc, #492]	; (800469c <menu+0x3300>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00e      	beq.n	80044d4 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80044b6:	4b7a      	ldr	r3, [pc, #488]	; (80046a0 <menu+0x3304>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	4b78      	ldr	r3, [pc, #480]	; (80046a0 <menu+0x3304>)
 80044c0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80044c2:	4b77      	ldr	r3, [pc, #476]	; (80046a0 <menu+0x3304>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <menu+0x3134>
		   		calismaSayModu = 1;
 80044ca:	4b75      	ldr	r3, [pc, #468]	; (80046a0 <menu+0x3304>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044d0:	f001 f970 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044d4:	2108      	movs	r1, #8
 80044d6:	486f      	ldr	r0, [pc, #444]	; (8004694 <menu+0x32f8>)
 80044d8:	f004 ff42 	bl	8009360 <HAL_GPIO_ReadPin>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d12b      	bne.n	800453a <menu+0x319e>
 80044e2:	4b6d      	ldr	r3, [pc, #436]	; (8004698 <menu+0x32fc>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	f083 0301 	eor.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d024      	beq.n	800453a <menu+0x319e>
			eepromData[32] = 0;
 80044f0:	4b6c      	ldr	r3, [pc, #432]	; (80046a4 <menu+0x3308>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80044f8:	4b6a      	ldr	r3, [pc, #424]	; (80046a4 <menu+0x3308>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80044fe:	4b69      	ldr	r3, [pc, #420]	; (80046a4 <menu+0x3308>)
 8004500:	2200      	movs	r2, #0
 8004502:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004504:	4b67      	ldr	r3, [pc, #412]	; (80046a4 <menu+0x3308>)
 8004506:	2200      	movs	r2, #0
 8004508:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800450a:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <menu+0x3308>)
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004510:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <menu+0x330c>)
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <menu+0x3310>)
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800451c:	4b64      	ldr	r3, [pc, #400]	; (80046b0 <menu+0x3314>)
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004522:	4b64      	ldr	r3, [pc, #400]	; (80046b4 <menu+0x3318>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004528:	4b63      	ldr	r3, [pc, #396]	; (80046b8 <menu+0x331c>)
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800452e:	4b5c      	ldr	r3, [pc, #368]	; (80046a0 <menu+0x3304>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004534:	4b61      	ldr	r3, [pc, #388]	; (80046bc <menu+0x3320>)
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800453a:	4b61      	ldr	r3, [pc, #388]	; (80046c0 <menu+0x3324>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b1e      	cmp	r3, #30
 8004540:	d16f      	bne.n	8004622 <menu+0x3286>
		calismaSayModu = 0;
 8004542:	4b57      	ldr	r3, [pc, #348]	; (80046a0 <menu+0x3304>)
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004548:	4b4f      	ldr	r3, [pc, #316]	; (8004688 <menu+0x32ec>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004550:	4a5c      	ldr	r2, [pc, #368]	; (80046c4 <menu+0x3328>)
 8004552:	2101      	movs	r1, #1
 8004554:	2001      	movs	r0, #1
 8004556:	f7fc f92f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800455a:	4a5b      	ldr	r2, [pc, #364]	; (80046c8 <menu+0x332c>)
 800455c:	2101      	movs	r1, #1
 800455e:	2002      	movs	r0, #2
 8004560:	f7fc f92a 	bl	80007b8 <lcd_print>
 8004564:	e00d      	b.n	8004582 <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004566:	4b48      	ldr	r3, [pc, #288]	; (8004688 <menu+0x32ec>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d109      	bne.n	8004582 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800456e:	4a57      	ldr	r2, [pc, #348]	; (80046cc <menu+0x3330>)
 8004570:	2101      	movs	r1, #1
 8004572:	2001      	movs	r0, #1
 8004574:	f7fc f920 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004578:	4a55      	ldr	r2, [pc, #340]	; (80046d0 <menu+0x3334>)
 800457a:	2101      	movs	r1, #1
 800457c:	2002      	movs	r0, #2
 800457e:	f7fc f91b 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004582:	2102      	movs	r1, #2
 8004584:	4843      	ldr	r0, [pc, #268]	; (8004694 <menu+0x32f8>)
 8004586:	f004 feeb 	bl	8009360 <HAL_GPIO_ReadPin>
 800458a:	4603      	mov	r3, r0
 800458c:	2b01      	cmp	r3, #1
 800458e:	d115      	bne.n	80045bc <menu+0x3220>
 8004590:	4b41      	ldr	r3, [pc, #260]	; (8004698 <menu+0x32fc>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f083 0301 	eor.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00e      	beq.n	80045bc <menu+0x3220>
			dilSecim = dilSecim + 1;
 800459e:	4b3a      	ldr	r3, [pc, #232]	; (8004688 <menu+0x32ec>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4b38      	ldr	r3, [pc, #224]	; (8004688 <menu+0x32ec>)
 80045a8:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80045aa:	4b37      	ldr	r3, [pc, #220]	; (8004688 <menu+0x32ec>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d902      	bls.n	80045b8 <menu+0x321c>
				dilSecim = 0;
 80045b2:	4b35      	ldr	r3, [pc, #212]	; (8004688 <menu+0x32ec>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80045b8:	f001 f8fc 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045bc:	2104      	movs	r1, #4
 80045be:	4835      	ldr	r0, [pc, #212]	; (8004694 <menu+0x32f8>)
 80045c0:	f004 fece 	bl	8009360 <HAL_GPIO_ReadPin>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d115      	bne.n	80045f6 <menu+0x325a>
 80045ca:	4b33      	ldr	r3, [pc, #204]	; (8004698 <menu+0x32fc>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f083 0301 	eor.w	r3, r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00e      	beq.n	80045f6 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <menu+0x32ec>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	3b01      	subs	r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	4b29      	ldr	r3, [pc, #164]	; (8004688 <menu+0x32ec>)
 80045e2:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80045e4:	4b28      	ldr	r3, [pc, #160]	; (8004688 <menu+0x32ec>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <menu+0x3256>
		   		dilSecim = 1;
 80045ec:	4b26      	ldr	r3, [pc, #152]	; (8004688 <menu+0x32ec>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80045f2:	f001 f8df 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045f6:	2108      	movs	r1, #8
 80045f8:	4826      	ldr	r0, [pc, #152]	; (8004694 <menu+0x32f8>)
 80045fa:	f004 feb1 	bl	8009360 <HAL_GPIO_ReadPin>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d10e      	bne.n	8004622 <menu+0x3286>
 8004604:	4b24      	ldr	r3, [pc, #144]	; (8004698 <menu+0x32fc>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004612:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <menu+0x32ec>)
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <menu+0x3308>)
 8004618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800461c:	4b27      	ldr	r3, [pc, #156]	; (80046bc <menu+0x3320>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <menu+0x3324>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b1f      	cmp	r3, #31
 8004628:	f040 80b7 	bne.w	800479a <menu+0x33fe>
		calismaSayModu = 0;
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <menu+0x3304>)
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004632:	4a28      	ldr	r2, [pc, #160]	; (80046d4 <menu+0x3338>)
 8004634:	2101      	movs	r1, #1
 8004636:	2001      	movs	r0, #1
 8004638:	f7fc f8be 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 800463c:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <menu+0x333c>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d113      	bne.n	800466c <menu+0x32d0>
			if(dilSecim == 0) {
 8004644:	4b10      	ldr	r3, [pc, #64]	; (8004688 <menu+0x32ec>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d105      	bne.n	8004658 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 800464c:	4a23      	ldr	r2, [pc, #140]	; (80046dc <menu+0x3340>)
 800464e:	2101      	movs	r1, #1
 8004650:	2002      	movs	r0, #2
 8004652:	f7fc f8b1 	bl	80007b8 <lcd_print>
 8004656:	e050      	b.n	80046fa <menu+0x335e>
			} else if(dilSecim == 1) {
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <menu+0x32ec>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d14c      	bne.n	80046fa <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004660:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <menu+0x3344>)
 8004662:	2101      	movs	r1, #1
 8004664:	2002      	movs	r0, #2
 8004666:	f7fc f8a7 	bl	80007b8 <lcd_print>
 800466a:	e046      	b.n	80046fa <menu+0x335e>
			}
		} else if(iotMode == 1) {
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <menu+0x333c>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d142      	bne.n	80046fa <menu+0x335e>
			if(dilSecim == 0){
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <menu+0x32ec>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d135      	bne.n	80046e8 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <menu+0x3348>)
 800467e:	2101      	movs	r1, #1
 8004680:	2002      	movs	r0, #2
 8004682:	f7fc f899 	bl	80007b8 <lcd_print>
 8004686:	e038      	b.n	80046fa <menu+0x335e>
 8004688:	20000331 	.word	0x20000331
 800468c:	0800d98c 	.word	0x0800d98c
 8004690:	0800d9c0 	.word	0x0800d9c0
 8004694:	40010800 	.word	0x40010800
 8004698:	2000033f 	.word	0x2000033f
 800469c:	20000351 	.word	0x20000351
 80046a0:	20000330 	.word	0x20000330
 80046a4:	20000218 	.word	0x20000218
 80046a8:	2000030f 	.word	0x2000030f
 80046ac:	200000a2 	.word	0x200000a2
 80046b0:	200000a1 	.word	0x200000a1
 80046b4:	2000030e 	.word	0x2000030e
 80046b8:	2000030d 	.word	0x2000030d
 80046bc:	2000033c 	.word	0x2000033c
 80046c0:	20000310 	.word	0x20000310
 80046c4:	0800d9d4 	.word	0x0800d9d4
 80046c8:	0800d9e8 	.word	0x0800d9e8
 80046cc:	0800d9fc 	.word	0x0800d9fc
 80046d0:	0800da10 	.word	0x0800da10
 80046d4:	0800da24 	.word	0x0800da24
 80046d8:	2000032f 	.word	0x2000032f
 80046dc:	0800d27c 	.word	0x0800d27c
 80046e0:	0800d290 	.word	0x0800d290
 80046e4:	0800d2dc 	.word	0x0800d2dc
			} else if(dilSecim == 1) {
 80046e8:	4bac      	ldr	r3, [pc, #688]	; (800499c <menu+0x3600>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d104      	bne.n	80046fa <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80046f0:	4aab      	ldr	r2, [pc, #684]	; (80049a0 <menu+0x3604>)
 80046f2:	2101      	movs	r1, #1
 80046f4:	2002      	movs	r0, #2
 80046f6:	f7fc f85f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046fa:	2102      	movs	r1, #2
 80046fc:	48a9      	ldr	r0, [pc, #676]	; (80049a4 <menu+0x3608>)
 80046fe:	f004 fe2f 	bl	8009360 <HAL_GPIO_ReadPin>
 8004702:	4603      	mov	r3, r0
 8004704:	2b01      	cmp	r3, #1
 8004706:	d115      	bne.n	8004734 <menu+0x3398>
 8004708:	4ba7      	ldr	r3, [pc, #668]	; (80049a8 <menu+0x360c>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f083 0301 	eor.w	r3, r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00e      	beq.n	8004734 <menu+0x3398>
			iotMode = iotMode + 1;
 8004716:	4ba5      	ldr	r3, [pc, #660]	; (80049ac <menu+0x3610>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4ba3      	ldr	r3, [pc, #652]	; (80049ac <menu+0x3610>)
 8004720:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004722:	4ba2      	ldr	r3, [pc, #648]	; (80049ac <menu+0x3610>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d902      	bls.n	8004730 <menu+0x3394>
				iotMode = 0;
 800472a:	4ba0      	ldr	r3, [pc, #640]	; (80049ac <menu+0x3610>)
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004730:	f001 f840 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004734:	2104      	movs	r1, #4
 8004736:	489b      	ldr	r0, [pc, #620]	; (80049a4 <menu+0x3608>)
 8004738:	f004 fe12 	bl	8009360 <HAL_GPIO_ReadPin>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d115      	bne.n	800476e <menu+0x33d2>
 8004742:	4b99      	ldr	r3, [pc, #612]	; (80049a8 <menu+0x360c>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f083 0301 	eor.w	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <menu+0x33d2>
			iotMode = iotMode - 1;
 8004750:	4b96      	ldr	r3, [pc, #600]	; (80049ac <menu+0x3610>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	3b01      	subs	r3, #1
 8004756:	b2da      	uxtb	r2, r3
 8004758:	4b94      	ldr	r3, [pc, #592]	; (80049ac <menu+0x3610>)
 800475a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 800475c:	4b93      	ldr	r3, [pc, #588]	; (80049ac <menu+0x3610>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <menu+0x33ce>
		   		iotMode = 1;
 8004764:	4b91      	ldr	r3, [pc, #580]	; (80049ac <menu+0x3610>)
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800476a:	f001 f823 	bl	80057b4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800476e:	2108      	movs	r1, #8
 8004770:	488c      	ldr	r0, [pc, #560]	; (80049a4 <menu+0x3608>)
 8004772:	f004 fdf5 	bl	8009360 <HAL_GPIO_ReadPin>
 8004776:	4603      	mov	r3, r0
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10e      	bne.n	800479a <menu+0x33fe>
 800477c:	4b8a      	ldr	r3, [pc, #552]	; (80049a8 <menu+0x360c>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f083 0301 	eor.w	r3, r3, #1
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <menu+0x33fe>
			eepromData[48] = iotMode;
 800478a:	4b88      	ldr	r3, [pc, #544]	; (80049ac <menu+0x3610>)
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <menu+0x3614>)
 8004790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004794:	4b87      	ldr	r3, [pc, #540]	; (80049b4 <menu+0x3618>)
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800479a:	4b87      	ldr	r3, [pc, #540]	; (80049b8 <menu+0x361c>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d138      	bne.n	8004814 <menu+0x3478>
		calismaSayModu = 0;
 80047a2:	4b86      	ldr	r3, [pc, #536]	; (80049bc <menu+0x3620>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80047a8:	4a85      	ldr	r2, [pc, #532]	; (80049c0 <menu+0x3624>)
 80047aa:	2101      	movs	r1, #1
 80047ac:	2001      	movs	r0, #1
 80047ae:	f7fc f803 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 80047b2:	4a84      	ldr	r2, [pc, #528]	; (80049c4 <menu+0x3628>)
 80047b4:	2101      	movs	r1, #1
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7fb fffe 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "    ");
 80047bc:	4a82      	ldr	r2, [pc, #520]	; (80049c8 <menu+0x362c>)
 80047be:	210d      	movs	r1, #13
 80047c0:	2002      	movs	r0, #2
 80047c2:	f7fb fff9 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047c6:	2102      	movs	r1, #2
 80047c8:	4876      	ldr	r0, [pc, #472]	; (80049a4 <menu+0x3608>)
 80047ca:	f004 fdc9 	bl	8009360 <HAL_GPIO_ReadPin>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d11f      	bne.n	8004814 <menu+0x3478>
 80047d4:	2104      	movs	r1, #4
 80047d6:	4873      	ldr	r0, [pc, #460]	; (80049a4 <menu+0x3608>)
 80047d8:	f004 fdc2 	bl	8009360 <HAL_GPIO_ReadPin>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d118      	bne.n	8004814 <menu+0x3478>
 80047e2:	4b71      	ldr	r3, [pc, #452]	; (80049a8 <menu+0x360c>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	f083 0301 	eor.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d011      	beq.n	8004814 <menu+0x3478>
			takeMachineID(0);
 80047f0:	2000      	movs	r0, #0
 80047f2:	f7fc f8c9 	bl	8000988 <takeMachineID>

			HAL_Delay(50);
 80047f6:	2032      	movs	r0, #50	; 0x32
 80047f8:	f003 ffe2 	bl	80087c0 <HAL_Delay>

			lcd_print(2, 1, machineID);
 80047fc:	4a71      	ldr	r2, [pc, #452]	; (80049c4 <menu+0x3628>)
 80047fe:	2101      	movs	r1, #1
 8004800:	2002      	movs	r0, #2
 8004802:	f7fb ffd9 	bl	80007b8 <lcd_print>
			lcd_print(2, 13, "    ");
 8004806:	4a70      	ldr	r2, [pc, #448]	; (80049c8 <menu+0x362c>)
 8004808:	210d      	movs	r1, #13
 800480a:	2002      	movs	r0, #2
 800480c:	f7fb ffd4 	bl	80007b8 <lcd_print>

			bekle();
 8004810:	f000 ffd0 	bl	80057b4 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004814:	4b68      	ldr	r3, [pc, #416]	; (80049b8 <menu+0x361c>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b21      	cmp	r3, #33	; 0x21
 800481a:	d153      	bne.n	80048c4 <menu+0x3528>
		calismaSayModu = 0;
 800481c:	4b67      	ldr	r3, [pc, #412]	; (80049bc <menu+0x3620>)
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004822:	4a6a      	ldr	r2, [pc, #424]	; (80049cc <menu+0x3630>)
 8004824:	2101      	movs	r1, #1
 8004826:	2001      	movs	r0, #1
 8004828:	f7fb ffc6 	bl	80007b8 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 800482c:	4868      	ldr	r0, [pc, #416]	; (80049d0 <menu+0x3634>)
 800482e:	f7fb fcf9 	bl	8000224 <strlen>
 8004832:	4603      	mov	r3, r0
 8004834:	2b10      	cmp	r3, #16
 8004836:	d811      	bhi.n	800485c <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004838:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <menu+0x3634>)
 800483a:	2101      	movs	r1, #1
 800483c:	2002      	movs	r0, #2
 800483e:	f7fb ffbb 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004842:	4863      	ldr	r0, [pc, #396]	; (80049d0 <menu+0x3634>)
 8004844:	f7fb fcee 	bl	8000224 <strlen>
 8004848:	4603      	mov	r3, r0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	3301      	adds	r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4a60      	ldr	r2, [pc, #384]	; (80049d4 <menu+0x3638>)
 8004852:	4619      	mov	r1, r3
 8004854:	2002      	movs	r0, #2
 8004856:	f7fb ffaf 	bl	80007b8 <lcd_print>
 800485a:	e005      	b.n	8004868 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 800485c:	2300      	movs	r3, #0
 800485e:	2202      	movs	r2, #2
 8004860:	2101      	movs	r1, #1
 8004862:	485b      	ldr	r0, [pc, #364]	; (80049d0 <menu+0x3634>)
 8004864:	f000 fa96 	bl	8004d94 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004868:	2102      	movs	r1, #2
 800486a:	484e      	ldr	r0, [pc, #312]	; (80049a4 <menu+0x3608>)
 800486c:	f004 fd78 	bl	8009360 <HAL_GPIO_ReadPin>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d126      	bne.n	80048c4 <menu+0x3528>
 8004876:	2104      	movs	r1, #4
 8004878:	484a      	ldr	r0, [pc, #296]	; (80049a4 <menu+0x3608>)
 800487a:	f004 fd71 	bl	8009360 <HAL_GPIO_ReadPin>
 800487e:	4603      	mov	r3, r0
 8004880:	2b01      	cmp	r3, #1
 8004882:	d11f      	bne.n	80048c4 <menu+0x3528>
 8004884:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <menu+0x360c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f083 0301 	eor.w	r3, r3, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <menu+0x3528>
			takeWifiSSID(0);
 8004892:	2000      	movs	r0, #0
 8004894:	f7fc f9ce 	bl	8000c34 <takeWifiSSID>

			HAL_Delay(100);
 8004898:	2064      	movs	r0, #100	; 0x64
 800489a:	f003 ff91 	bl	80087c0 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 800489e:	4a4c      	ldr	r2, [pc, #304]	; (80049d0 <menu+0x3634>)
 80048a0:	2101      	movs	r1, #1
 80048a2:	2002      	movs	r0, #2
 80048a4:	f7fb ff88 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80048a8:	4849      	ldr	r0, [pc, #292]	; (80049d0 <menu+0x3634>)
 80048aa:	f7fb fcbb 	bl	8000224 <strlen>
 80048ae:	4603      	mov	r3, r0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	4a47      	ldr	r2, [pc, #284]	; (80049d4 <menu+0x3638>)
 80048b8:	4619      	mov	r1, r3
 80048ba:	2002      	movs	r0, #2
 80048bc:	f7fb ff7c 	bl	80007b8 <lcd_print>

			bekle();
 80048c0:	f000 ff78 	bl	80057b4 <bekle>
		}
	}

	if (menuSayac == 34) {
 80048c4:	4b3c      	ldr	r3, [pc, #240]	; (80049b8 <menu+0x361c>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b22      	cmp	r3, #34	; 0x22
 80048ca:	d153      	bne.n	8004974 <menu+0x35d8>
		calismaSayModu = 0;
 80048cc:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <menu+0x3620>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80048d2:	4a41      	ldr	r2, [pc, #260]	; (80049d8 <menu+0x363c>)
 80048d4:	2101      	movs	r1, #1
 80048d6:	2001      	movs	r0, #1
 80048d8:	f7fb ff6e 	bl	80007b8 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80048dc:	483f      	ldr	r0, [pc, #252]	; (80049dc <menu+0x3640>)
 80048de:	f7fb fca1 	bl	8000224 <strlen>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d811      	bhi.n	800490c <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 80048e8:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <menu+0x3640>)
 80048ea:	2101      	movs	r1, #1
 80048ec:	2002      	movs	r0, #2
 80048ee:	f7fb ff63 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80048f2:	483a      	ldr	r0, [pc, #232]	; (80049dc <menu+0x3640>)
 80048f4:	f7fb fc96 	bl	8000224 <strlen>
 80048f8:	4603      	mov	r3, r0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	4a34      	ldr	r2, [pc, #208]	; (80049d4 <menu+0x3638>)
 8004902:	4619      	mov	r1, r3
 8004904:	2002      	movs	r0, #2
 8004906:	f7fb ff57 	bl	80007b8 <lcd_print>
 800490a:	e005      	b.n	8004918 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 800490c:	2301      	movs	r3, #1
 800490e:	2202      	movs	r2, #2
 8004910:	2101      	movs	r1, #1
 8004912:	4832      	ldr	r0, [pc, #200]	; (80049dc <menu+0x3640>)
 8004914:	f000 fa3e 	bl	8004d94 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004918:	2102      	movs	r1, #2
 800491a:	4822      	ldr	r0, [pc, #136]	; (80049a4 <menu+0x3608>)
 800491c:	f004 fd20 	bl	8009360 <HAL_GPIO_ReadPin>
 8004920:	4603      	mov	r3, r0
 8004922:	2b01      	cmp	r3, #1
 8004924:	d126      	bne.n	8004974 <menu+0x35d8>
 8004926:	2104      	movs	r1, #4
 8004928:	481e      	ldr	r0, [pc, #120]	; (80049a4 <menu+0x3608>)
 800492a:	f004 fd19 	bl	8009360 <HAL_GPIO_ReadPin>
 800492e:	4603      	mov	r3, r0
 8004930:	2b01      	cmp	r3, #1
 8004932:	d11f      	bne.n	8004974 <menu+0x35d8>
 8004934:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <menu+0x360c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f083 0301 	eor.w	r3, r3, #1
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d018      	beq.n	8004974 <menu+0x35d8>
			takeWifiPass(0);
 8004942:	2000      	movs	r0, #0
 8004944:	f7fc fb50 	bl	8000fe8 <takeWifiPass>

			HAL_Delay(50);
 8004948:	2032      	movs	r0, #50	; 0x32
 800494a:	f003 ff39 	bl	80087c0 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <menu+0x3640>)
 8004950:	2101      	movs	r1, #1
 8004952:	2002      	movs	r0, #2
 8004954:	f7fb ff30 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004958:	4820      	ldr	r0, [pc, #128]	; (80049dc <menu+0x3640>)
 800495a:	f7fb fc63 	bl	8000224 <strlen>
 800495e:	4603      	mov	r3, r0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	3301      	adds	r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <menu+0x3638>)
 8004968:	4619      	mov	r1, r3
 800496a:	2002      	movs	r0, #2
 800496c:	f7fb ff24 	bl	80007b8 <lcd_print>

			bekle();
 8004970:	f000 ff20 	bl	80057b4 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <menu+0x361c>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b23      	cmp	r3, #35	; 0x23
 800497a:	d155      	bne.n	8004a28 <menu+0x368c>
		if(dilSecim == 0) {
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <menu+0x3600>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d131      	bne.n	80049e8 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <menu+0x3644>)
 8004986:	2101      	movs	r1, #1
 8004988:	2001      	movs	r0, #1
 800498a:	f7fb ff15 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800498e:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <menu+0x3648>)
 8004990:	2101      	movs	r1, #1
 8004992:	2002      	movs	r0, #2
 8004994:	f7fb ff10 	bl	80007b8 <lcd_print>
 8004998:	e034      	b.n	8004a04 <menu+0x3668>
 800499a:	bf00      	nop
 800499c:	20000331 	.word	0x20000331
 80049a0:	0800d2f0 	.word	0x0800d2f0
 80049a4:	40010800 	.word	0x40010800
 80049a8:	2000033f 	.word	0x2000033f
 80049ac:	2000032f 	.word	0x2000032f
 80049b0:	20000218 	.word	0x20000218
 80049b4:	2000033c 	.word	0x2000033c
 80049b8:	20000310 	.word	0x20000310
 80049bc:	20000330 	.word	0x20000330
 80049c0:	0800da38 	.word	0x0800da38
 80049c4:	200002b0 	.word	0x200002b0
 80049c8:	0800da4c 	.word	0x0800da4c
 80049cc:	0800da54 	.word	0x0800da54
 80049d0:	200002bc 	.word	0x200002bc
 80049d4:	20000038 	.word	0x20000038
 80049d8:	0800da68 	.word	0x0800da68
 80049dc:	200002d0 	.word	0x200002d0
 80049e0:	0800da7c 	.word	0x0800da7c
 80049e4:	0800da90 	.word	0x0800da90
		} else if(dilSecim == 1) {
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <menu+0x3690>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d109      	bne.n	8004a04 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80049f0:	4a0f      	ldr	r2, [pc, #60]	; (8004a30 <menu+0x3694>)
 80049f2:	2101      	movs	r1, #1
 80049f4:	2001      	movs	r0, #1
 80049f6:	f7fb fedf 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <menu+0x3698>)
 80049fc:	2101      	movs	r1, #1
 80049fe:	2002      	movs	r0, #2
 8004a00:	f7fb feda 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004a04:	2108      	movs	r1, #8
 8004a06:	480c      	ldr	r0, [pc, #48]	; (8004a38 <menu+0x369c>)
 8004a08:	f004 fcaa 	bl	8009360 <HAL_GPIO_ReadPin>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10a      	bne.n	8004a28 <menu+0x368c>
			menuGiris = 0;
 8004a12:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <menu+0x36a0>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004a18:	f7fb fefa 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8004a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a20:	f003 fece 	bl	80087c0 <HAL_Delay>
			NVIC_SystemReset();
 8004a24:	f7fb ff3c 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000331 	.word	0x20000331
 8004a30:	0800daa4 	.word	0x0800daa4
 8004a34:	0800dab8 	.word	0x0800dab8
 8004a38:	40010800 	.word	0x40010800
 8004a3c:	2000032d 	.word	0x2000032d

08004a40 <printTemplate>:

void printTemplate(int type, int page) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8004a4a:	20c8      	movs	r0, #200	; 0xc8
 8004a4c:	f003 feb8 	bl	80087c0 <HAL_Delay>
	lcd_clear();
 8004a50:	f7fb fede 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d143      	bne.n	8004ae2 <printTemplate+0xa2>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d140      	bne.n	8004ae2 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8004a60:	4a9d      	ldr	r2, [pc, #628]	; (8004cd8 <printTemplate+0x298>)
 8004a62:	2101      	movs	r1, #1
 8004a64:	2001      	movs	r0, #1
 8004a66:	f7fb fea7 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 8004a6a:	4a9c      	ldr	r2, [pc, #624]	; (8004cdc <printTemplate+0x29c>)
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	2002      	movs	r0, #2
 8004a70:	f7fb fea2 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 8004a74:	4a9a      	ldr	r2, [pc, #616]	; (8004ce0 <printTemplate+0x2a0>)
 8004a76:	2104      	movs	r1, #4
 8004a78:	2002      	movs	r0, #2
 8004a7a:	f7fb fe9d 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 8004a7e:	4a99      	ldr	r2, [pc, #612]	; (8004ce4 <printTemplate+0x2a4>)
 8004a80:	2105      	movs	r1, #5
 8004a82:	2002      	movs	r0, #2
 8004a84:	f7fb fe98 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8004a88:	4a97      	ldr	r2, [pc, #604]	; (8004ce8 <printTemplate+0x2a8>)
 8004a8a:	2106      	movs	r1, #6
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	f7fb fe93 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 8004a92:	4a96      	ldr	r2, [pc, #600]	; (8004cec <printTemplate+0x2ac>)
 8004a94:	2107      	movs	r1, #7
 8004a96:	2002      	movs	r0, #2
 8004a98:	f7fb fe8e 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 8004a9c:	4a94      	ldr	r2, [pc, #592]	; (8004cf0 <printTemplate+0x2b0>)
 8004a9e:	210a      	movs	r1, #10
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f7fb fe89 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 8004aa6:	4a93      	ldr	r2, [pc, #588]	; (8004cf4 <printTemplate+0x2b4>)
 8004aa8:	210b      	movs	r1, #11
 8004aaa:	2002      	movs	r0, #2
 8004aac:	f7fb fe84 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 8004ab0:	4a91      	ldr	r2, [pc, #580]	; (8004cf8 <printTemplate+0x2b8>)
 8004ab2:	210c      	movs	r1, #12
 8004ab4:	2002      	movs	r0, #2
 8004ab6:	f7fb fe7f 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 8004aba:	4a90      	ldr	r2, [pc, #576]	; (8004cfc <printTemplate+0x2bc>)
 8004abc:	210d      	movs	r1, #13
 8004abe:	2002      	movs	r0, #2
 8004ac0:	f7fb fe7a 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 8004ac4:	4a8e      	ldr	r2, [pc, #568]	; (8004d00 <printTemplate+0x2c0>)
 8004ac6:	210e      	movs	r1, #14
 8004ac8:	2002      	movs	r0, #2
 8004aca:	f7fb fe75 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 8004ace:	4a8d      	ldr	r2, [pc, #564]	; (8004d04 <printTemplate+0x2c4>)
 8004ad0:	2105      	movs	r1, #5
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	f7fb fe70 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8004ad8:	2103      	movs	r1, #3
 8004ada:	2002      	movs	r0, #2
 8004adc:	f7fb fe4d 	bl	800077a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8004ae0:	e0f5      	b.n	8004cce <printTemplate+0x28e>
	} else if(type == 2) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d178      	bne.n	8004bda <printTemplate+0x19a>
		if(page == 1) {
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d114      	bne.n	8004b18 <printTemplate+0xd8>
			lcd_clear();
 8004aee:	f7fb fe8f 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004af2:	2064      	movs	r0, #100	; 0x64
 8004af4:	f003 fe64 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004af8:	4a83      	ldr	r2, [pc, #524]	; (8004d08 <printTemplate+0x2c8>)
 8004afa:	2101      	movs	r1, #1
 8004afc:	2001      	movs	r0, #1
 8004afe:	f7fb fe5b 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004b02:	4a82      	ldr	r2, [pc, #520]	; (8004d0c <printTemplate+0x2cc>)
 8004b04:	2107      	movs	r1, #7
 8004b06:	2001      	movs	r0, #1
 8004b08:	f7fb fe56 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8004b0c:	4a80      	ldr	r2, [pc, #512]	; (8004d10 <printTemplate+0x2d0>)
 8004b0e:	2101      	movs	r1, #1
 8004b10:	2002      	movs	r0, #2
 8004b12:	f7fb fe51 	bl	80007b8 <lcd_print>
}
 8004b16:	e0da      	b.n	8004cce <printTemplate+0x28e>
		} else if(page == 2) {
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d114      	bne.n	8004b48 <printTemplate+0x108>
			lcd_clear();
 8004b1e:	f7fb fe77 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004b22:	2064      	movs	r0, #100	; 0x64
 8004b24:	f003 fe4c 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004b28:	4a77      	ldr	r2, [pc, #476]	; (8004d08 <printTemplate+0x2c8>)
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	f7fb fe43 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004b32:	4a76      	ldr	r2, [pc, #472]	; (8004d0c <printTemplate+0x2cc>)
 8004b34:	2107      	movs	r1, #7
 8004b36:	2001      	movs	r0, #1
 8004b38:	f7fb fe3e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8004b3c:	4a75      	ldr	r2, [pc, #468]	; (8004d14 <printTemplate+0x2d4>)
 8004b3e:	2101      	movs	r1, #1
 8004b40:	2002      	movs	r0, #2
 8004b42:	f7fb fe39 	bl	80007b8 <lcd_print>
}
 8004b46:	e0c2      	b.n	8004cce <printTemplate+0x28e>
		} else if(page == 3) {
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d114      	bne.n	8004b78 <printTemplate+0x138>
			lcd_clear();
 8004b4e:	f7fb fe5f 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004b52:	2064      	movs	r0, #100	; 0x64
 8004b54:	f003 fe34 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004b58:	4a6b      	ldr	r2, [pc, #428]	; (8004d08 <printTemplate+0x2c8>)
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7fb fe2b 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004b62:	4a6a      	ldr	r2, [pc, #424]	; (8004d0c <printTemplate+0x2cc>)
 8004b64:	2107      	movs	r1, #7
 8004b66:	2001      	movs	r0, #1
 8004b68:	f7fb fe26 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8004b6c:	4a6a      	ldr	r2, [pc, #424]	; (8004d18 <printTemplate+0x2d8>)
 8004b6e:	2101      	movs	r1, #1
 8004b70:	2002      	movs	r0, #2
 8004b72:	f7fb fe21 	bl	80007b8 <lcd_print>
}
 8004b76:	e0aa      	b.n	8004cce <printTemplate+0x28e>
		} else if(page == 4) {
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d114      	bne.n	8004ba8 <printTemplate+0x168>
			lcd_clear();
 8004b7e:	f7fb fe47 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004b82:	2064      	movs	r0, #100	; 0x64
 8004b84:	f003 fe1c 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004b88:	4a5f      	ldr	r2, [pc, #380]	; (8004d08 <printTemplate+0x2c8>)
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f7fb fe13 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004b92:	4a5e      	ldr	r2, [pc, #376]	; (8004d0c <printTemplate+0x2cc>)
 8004b94:	2107      	movs	r1, #7
 8004b96:	2001      	movs	r0, #1
 8004b98:	f7fb fe0e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8004b9c:	4a5f      	ldr	r2, [pc, #380]	; (8004d1c <printTemplate+0x2dc>)
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	2002      	movs	r0, #2
 8004ba2:	f7fb fe09 	bl	80007b8 <lcd_print>
}
 8004ba6:	e092      	b.n	8004cce <printTemplate+0x28e>
		} else if(page == 5) {
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	f040 808f 	bne.w	8004cce <printTemplate+0x28e>
			lcd_clear();
 8004bb0:	f7fb fe2e 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004bb4:	2064      	movs	r0, #100	; 0x64
 8004bb6:	f003 fe03 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8004bba:	4a53      	ldr	r2, [pc, #332]	; (8004d08 <printTemplate+0x2c8>)
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	2001      	movs	r0, #1
 8004bc0:	f7fb fdfa 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8004bc4:	4a51      	ldr	r2, [pc, #324]	; (8004d0c <printTemplate+0x2cc>)
 8004bc6:	2107      	movs	r1, #7
 8004bc8:	2001      	movs	r0, #1
 8004bca:	f7fb fdf5 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8004bce:	4a54      	ldr	r2, [pc, #336]	; (8004d20 <printTemplate+0x2e0>)
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	2002      	movs	r0, #2
 8004bd4:	f7fb fdf0 	bl	80007b8 <lcd_print>
}
 8004bd8:	e079      	b.n	8004cce <printTemplate+0x28e>
	} else if(type == 3) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d176      	bne.n	8004cce <printTemplate+0x28e>
		if(page == 1) {
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d114      	bne.n	8004c10 <printTemplate+0x1d0>
			lcd_clear();
 8004be6:	f7fb fe13 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004bea:	2064      	movs	r0, #100	; 0x64
 8004bec:	f003 fde8 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004bf0:	4a4c      	ldr	r2, [pc, #304]	; (8004d24 <printTemplate+0x2e4>)
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	f7fb fddf 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004bfa:	4a4b      	ldr	r2, [pc, #300]	; (8004d28 <printTemplate+0x2e8>)
 8004bfc:	2107      	movs	r1, #7
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f7fb fdda 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8004c04:	4a42      	ldr	r2, [pc, #264]	; (8004d10 <printTemplate+0x2d0>)
 8004c06:	2101      	movs	r1, #1
 8004c08:	2002      	movs	r0, #2
 8004c0a:	f7fb fdd5 	bl	80007b8 <lcd_print>
}
 8004c0e:	e05e      	b.n	8004cce <printTemplate+0x28e>
		} else if(page == 2) {
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d114      	bne.n	8004c40 <printTemplate+0x200>
			lcd_clear();
 8004c16:	f7fb fdfb 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004c1a:	2064      	movs	r0, #100	; 0x64
 8004c1c:	f003 fdd0 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004c20:	4a40      	ldr	r2, [pc, #256]	; (8004d24 <printTemplate+0x2e4>)
 8004c22:	2101      	movs	r1, #1
 8004c24:	2001      	movs	r0, #1
 8004c26:	f7fb fdc7 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004c2a:	4a3f      	ldr	r2, [pc, #252]	; (8004d28 <printTemplate+0x2e8>)
 8004c2c:	2107      	movs	r1, #7
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f7fb fdc2 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8004c34:	4a37      	ldr	r2, [pc, #220]	; (8004d14 <printTemplate+0x2d4>)
 8004c36:	2101      	movs	r1, #1
 8004c38:	2002      	movs	r0, #2
 8004c3a:	f7fb fdbd 	bl	80007b8 <lcd_print>
}
 8004c3e:	e046      	b.n	8004cce <printTemplate+0x28e>
		} else if(page == 3) {
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d114      	bne.n	8004c70 <printTemplate+0x230>
			lcd_clear();
 8004c46:	f7fb fde3 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004c4a:	2064      	movs	r0, #100	; 0x64
 8004c4c:	f003 fdb8 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004c50:	4a34      	ldr	r2, [pc, #208]	; (8004d24 <printTemplate+0x2e4>)
 8004c52:	2101      	movs	r1, #1
 8004c54:	2001      	movs	r0, #1
 8004c56:	f7fb fdaf 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004c5a:	4a33      	ldr	r2, [pc, #204]	; (8004d28 <printTemplate+0x2e8>)
 8004c5c:	2107      	movs	r1, #7
 8004c5e:	2001      	movs	r0, #1
 8004c60:	f7fb fdaa 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8004c64:	4a2c      	ldr	r2, [pc, #176]	; (8004d18 <printTemplate+0x2d8>)
 8004c66:	2101      	movs	r1, #1
 8004c68:	2002      	movs	r0, #2
 8004c6a:	f7fb fda5 	bl	80007b8 <lcd_print>
}
 8004c6e:	e02e      	b.n	8004cce <printTemplate+0x28e>
		} else if(page == 4) {
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d114      	bne.n	8004ca0 <printTemplate+0x260>
			lcd_clear();
 8004c76:	f7fb fdcb 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004c7a:	2064      	movs	r0, #100	; 0x64
 8004c7c:	f003 fda0 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004c80:	4a28      	ldr	r2, [pc, #160]	; (8004d24 <printTemplate+0x2e4>)
 8004c82:	2101      	movs	r1, #1
 8004c84:	2001      	movs	r0, #1
 8004c86:	f7fb fd97 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004c8a:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <printTemplate+0x2e8>)
 8004c8c:	2107      	movs	r1, #7
 8004c8e:	2001      	movs	r0, #1
 8004c90:	f7fb fd92 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8004c94:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <printTemplate+0x2dc>)
 8004c96:	2101      	movs	r1, #1
 8004c98:	2002      	movs	r0, #2
 8004c9a:	f7fb fd8d 	bl	80007b8 <lcd_print>
}
 8004c9e:	e016      	b.n	8004cce <printTemplate+0x28e>
		} else if(page == 5) {
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d113      	bne.n	8004cce <printTemplate+0x28e>
			lcd_clear();
 8004ca6:	f7fb fdb3 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8004caa:	2064      	movs	r0, #100	; 0x64
 8004cac:	f003 fd88 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8004cb0:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <printTemplate+0x2e4>)
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	f7fb fd7f 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8004cba:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <printTemplate+0x2e8>)
 8004cbc:	2107      	movs	r1, #7
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f7fb fd7a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8004cc4:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <printTemplate+0x2e0>)
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	2002      	movs	r0, #2
 8004cca:	f7fb fd75 	bl	80007b8 <lcd_print>
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	0800dacc 	.word	0x0800dacc
 8004cdc:	0800dad4 	.word	0x0800dad4
 8004ce0:	0800dad8 	.word	0x0800dad8
 8004ce4:	0800dadc 	.word	0x0800dadc
 8004ce8:	0800dae0 	.word	0x0800dae0
 8004cec:	0800dae4 	.word	0x0800dae4
 8004cf0:	0800dae8 	.word	0x0800dae8
 8004cf4:	0800daec 	.word	0x0800daec
 8004cf8:	0800daf0 	.word	0x0800daf0
 8004cfc:	0800daf4 	.word	0x0800daf4
 8004d00:	0800daf8 	.word	0x0800daf8
 8004d04:	200002b0 	.word	0x200002b0
 8004d08:	0800dafc 	.word	0x0800dafc
 8004d0c:	200002bc 	.word	0x200002bc
 8004d10:	0800db04 	.word	0x0800db04
 8004d14:	0800db18 	.word	0x0800db18
 8004d18:	0800db2c 	.word	0x0800db2c
 8004d1c:	0800db40 	.word	0x0800db40
 8004d20:	0800db54 	.word	0x0800db54
 8004d24:	0800db68 	.word	0x0800db68
 8004d28:	200002d0 	.word	0x200002d0

08004d2c <checkSlideVal>:

int checkSlideVal(int state) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d111      	bne.n	8004d5e <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	4813      	ldr	r0, [pc, #76]	; (8004d8c <checkSlideVal+0x60>)
 8004d3e:	f004 fb0f 	bl	8009360 <HAL_GPIO_ReadPin>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <checkSlideVal+0x20>
			return 34;
 8004d48:	2322      	movs	r3, #34	; 0x22
 8004d4a:	e01b      	b.n	8004d84 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8004d4c:	2108      	movs	r1, #8
 8004d4e:	4810      	ldr	r0, [pc, #64]	; (8004d90 <checkSlideVal+0x64>)
 8004d50:	f004 fb06 	bl	8009360 <HAL_GPIO_ReadPin>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d113      	bne.n	8004d82 <checkSlideVal+0x56>
			return 32;
 8004d5a:	2320      	movs	r3, #32
 8004d5c:	e012      	b.n	8004d84 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8004d5e:	2101      	movs	r1, #1
 8004d60:	480a      	ldr	r0, [pc, #40]	; (8004d8c <checkSlideVal+0x60>)
 8004d62:	f004 fafd 	bl	8009360 <HAL_GPIO_ReadPin>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <checkSlideVal+0x44>
			return 35;
 8004d6c:	2323      	movs	r3, #35	; 0x23
 8004d6e:	e009      	b.n	8004d84 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8004d70:	2108      	movs	r1, #8
 8004d72:	4807      	ldr	r0, [pc, #28]	; (8004d90 <checkSlideVal+0x64>)
 8004d74:	f004 faf4 	bl	8009360 <HAL_GPIO_ReadPin>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <checkSlideVal+0x56>
			return 33;
 8004d7e:	2321      	movs	r3, #33	; 0x21
 8004d80:	e000      	b.n	8004d84 <checkSlideVal+0x58>
		}
	}
	return 0;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40010800 	.word	0x40010800
 8004d90:	40011000 	.word	0x40011000

08004d94 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7fb fa3e 	bl	8000224 <strlen>
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8004dac:	2301      	movs	r3, #1
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8004db0:	e08a      	b.n	8004ec8 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8004db2:	6838      	ldr	r0, [r7, #0]
 8004db4:	f7ff ffba 	bl	8004d2c <checkSlideVal>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dd07      	ble.n	8004dce <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8004dbe:	6838      	ldr	r0, [r7, #0]
 8004dc0:	f7ff ffb4 	bl	8004d2c <checkSlideVal>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	4b44      	ldr	r3, [pc, #272]	; (8004edc <slideText+0x148>)
 8004dca:	701a      	strb	r2, [r3, #0]
			break;
 8004dcc:	e081      	b.n	8004ed2 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8004dce:	2300      	movs	r3, #0
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	e075      	b.n	8004ec0 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8004dd4:	6838      	ldr	r0, [r7, #0]
 8004dd6:	f7ff ffa9 	bl	8004d2c <checkSlideVal>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	dd09      	ble.n	8004df4 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8004de0:	6838      	ldr	r0, [r7, #0]
 8004de2:	f7ff ffa3 	bl	8004d2c <checkSlideVal>
 8004de6:	4603      	mov	r3, r0
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <slideText+0x148>)
 8004dec:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004df2:	e069      	b.n	8004ec8 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	4413      	add	r3, r2
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	e029      	b.n	8004e52 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8004dfe:	6838      	ldr	r0, [r7, #0]
 8004e00:	f7ff ff94 	bl	8004d2c <checkSlideVal>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dd0b      	ble.n	8004e22 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8004e0a:	6838      	ldr	r0, [r7, #0]
 8004e0c:	f7ff ff8e 	bl	8004d2c <checkSlideVal>
 8004e10:	4603      	mov	r3, r0
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	4b31      	ldr	r3, [pc, #196]	; (8004edc <slideText+0x148>)
 8004e16:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
 8004e1a:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004e20:	e01d      	b.n	8004e5e <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	b2d8      	uxtb	r0, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	b2d9      	uxtb	r1, r3
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f7fb fcce 	bl	80007e2 <lcd_print_char>
				HAL_Delay(30);
 8004e46:	201e      	movs	r0, #30
 8004e48:	f003 fcba 	bl	80087c0 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	7dfa      	ldrb	r2, [r7, #23]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4413      	add	r3, r2
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	dbcf      	blt.n	8004dfe <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	61bb      	str	r3, [r7, #24]
 8004e64:	e023      	b.n	8004eae <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8004e66:	6838      	ldr	r0, [r7, #0]
 8004e68:	f7ff ff60 	bl	8004d2c <checkSlideVal>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dd0b      	ble.n	8004e8a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8004e72:	6838      	ldr	r0, [r7, #0]
 8004e74:	f7ff ff5a 	bl	8004d2c <checkSlideVal>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	4b17      	ldr	r3, [pc, #92]	; (8004edc <slideText+0x148>)
 8004e7e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004e88:	e017      	b.n	8004eba <slideText+0x126>
				}
			     if(j >= startPos) {
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	db0a      	blt.n	8004ea8 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	b2d1      	uxtb	r1, r2
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb fca0 	bl	80007e2 <lcd_print_char>
			    	 HAL_Delay(30);
 8004ea2:	201e      	movs	r0, #30
 8004ea4:	f003 fc8c 	bl	80087c0 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	7dfa      	ldrb	r2, [r7, #23]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	dad5      	bge.n	8004e66 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	db85      	blt.n	8004dd4 <slideText+0x40>
	while(mainLoopVal == 1) {
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	f43f af71 	beq.w	8004db2 <slideText+0x1e>
			     }
			}
		}
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3728      	adds	r7, #40	; 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000310 	.word	0x20000310

08004ee0 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004ef0:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <lcdUpdate+0x9c>)
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	2002      	movs	r0, #2
 8004ef6:	f7fb fc5f 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004efa:	e03b      	b.n	8004f74 <lcdUpdate+0x94>
	} else if(y==2) {
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d105      	bne.n	8004f0e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <lcdUpdate+0x9c>)
 8004f04:	2102      	movs	r1, #2
 8004f06:	2002      	movs	r0, #2
 8004f08:	f7fb fc56 	bl	80007b8 <lcd_print>
}
 8004f0c:	e032      	b.n	8004f74 <lcdUpdate+0x94>
	} else if(y==3) {
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d105      	bne.n	8004f20 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004f14:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <lcdUpdate+0x9c>)
 8004f16:	2103      	movs	r1, #3
 8004f18:	2002      	movs	r0, #2
 8004f1a:	f7fb fc4d 	bl	80007b8 <lcd_print>
}
 8004f1e:	e029      	b.n	8004f74 <lcdUpdate+0x94>
	} else if(y==4) {
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d105      	bne.n	8004f32 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004f26:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <lcdUpdate+0x9c>)
 8004f28:	2104      	movs	r1, #4
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	f7fb fc44 	bl	80007b8 <lcd_print>
}
 8004f30:	e020      	b.n	8004f74 <lcdUpdate+0x94>
	} else if(y==5) {
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d105      	bne.n	8004f44 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004f38:	4a10      	ldr	r2, [pc, #64]	; (8004f7c <lcdUpdate+0x9c>)
 8004f3a:	2105      	movs	r1, #5
 8004f3c:	2002      	movs	r0, #2
 8004f3e:	f7fb fc3b 	bl	80007b8 <lcd_print>
}
 8004f42:	e017      	b.n	8004f74 <lcdUpdate+0x94>
	} else if(y==6) {
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d105      	bne.n	8004f56 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <lcdUpdate+0x9c>)
 8004f4c:	2106      	movs	r1, #6
 8004f4e:	2002      	movs	r0, #2
 8004f50:	f7fb fc32 	bl	80007b8 <lcd_print>
}
 8004f54:	e00e      	b.n	8004f74 <lcdUpdate+0x94>
	} else if (y==7) {
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	d10b      	bne.n	8004f74 <lcdUpdate+0x94>
		lcd_clear();
 8004f5c:	f7fb fc58 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004f60:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <lcdUpdate+0xa0>)
 8004f62:	2101      	movs	r1, #1
 8004f64:	2001      	movs	r0, #1
 8004f66:	f7fb fc27 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8004f6a:	4a06      	ldr	r2, [pc, #24]	; (8004f84 <lcdUpdate+0xa4>)
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	2002      	movs	r0, #2
 8004f70:	f7fb fc22 	bl	80007b8 <lcd_print>
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	0800d198 	.word	0x0800d198
 8004f80:	0800db70 	.word	0x0800db70
 8004f84:	0800db84 	.word	0x0800db84

08004f88 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d11d      	bne.n	8004fd4 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004f98:	4b62      	ldr	r3, [pc, #392]	; (8005124 <hataKoduLcdGoster+0x19c>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d105      	bne.n	8004fac <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004fa0:	4a61      	ldr	r2, [pc, #388]	; (8005128 <hataKoduLcdGoster+0x1a0>)
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fb fc07 	bl	80007b8 <lcd_print>
 8004faa:	e008      	b.n	8004fbe <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004fac:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <hataKoduLcdGoster+0x19c>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d104      	bne.n	8004fbe <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004fb4:	4a5d      	ldr	r2, [pc, #372]	; (800512c <hataKoduLcdGoster+0x1a4>)
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f7fb fbfd 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004fbe:	4a5c      	ldr	r2, [pc, #368]	; (8005130 <hataKoduLcdGoster+0x1a8>)
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	2002      	movs	r0, #2
 8004fc4:	f7fb fbf8 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004fc8:	4a5a      	ldr	r2, [pc, #360]	; (8005134 <hataKoduLcdGoster+0x1ac>)
 8004fca:	2107      	movs	r1, #7
 8004fcc:	2002      	movs	r0, #2
 8004fce:	f7fb fbf3 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004fd2:	e0a3      	b.n	800511c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d11d      	bne.n	8005016 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004fda:	4b52      	ldr	r3, [pc, #328]	; (8005124 <hataKoduLcdGoster+0x19c>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d105      	bne.n	8004fee <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004fe2:	4a51      	ldr	r2, [pc, #324]	; (8005128 <hataKoduLcdGoster+0x1a0>)
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	f7fb fbe6 	bl	80007b8 <lcd_print>
 8004fec:	e008      	b.n	8005000 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8004fee:	4b4d      	ldr	r3, [pc, #308]	; (8005124 <hataKoduLcdGoster+0x19c>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d104      	bne.n	8005000 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004ff6:	4a4d      	ldr	r2, [pc, #308]	; (800512c <hataKoduLcdGoster+0x1a4>)
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f7fb fbdc 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 8005000:	4a4d      	ldr	r2, [pc, #308]	; (8005138 <hataKoduLcdGoster+0x1b0>)
 8005002:	2102      	movs	r1, #2
 8005004:	2002      	movs	r0, #2
 8005006:	f7fb fbd7 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 800500a:	4a4a      	ldr	r2, [pc, #296]	; (8005134 <hataKoduLcdGoster+0x1ac>)
 800500c:	2107      	movs	r1, #7
 800500e:	2002      	movs	r0, #2
 8005010:	f7fb fbd2 	bl	80007b8 <lcd_print>
}
 8005014:	e082      	b.n	800511c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d11d      	bne.n	8005058 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 800501c:	4b41      	ldr	r3, [pc, #260]	; (8005124 <hataKoduLcdGoster+0x19c>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005024:	4a40      	ldr	r2, [pc, #256]	; (8005128 <hataKoduLcdGoster+0x1a0>)
 8005026:	2101      	movs	r1, #1
 8005028:	2001      	movs	r0, #1
 800502a:	f7fb fbc5 	bl	80007b8 <lcd_print>
 800502e:	e008      	b.n	8005042 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005030:	4b3c      	ldr	r3, [pc, #240]	; (8005124 <hataKoduLcdGoster+0x19c>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d104      	bne.n	8005042 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005038:	4a3c      	ldr	r2, [pc, #240]	; (800512c <hataKoduLcdGoster+0x1a4>)
 800503a:	2101      	movs	r1, #1
 800503c:	2001      	movs	r0, #1
 800503e:	f7fb fbbb 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 8005042:	4a3e      	ldr	r2, [pc, #248]	; (800513c <hataKoduLcdGoster+0x1b4>)
 8005044:	2103      	movs	r1, #3
 8005046:	2002      	movs	r0, #2
 8005048:	f7fb fbb6 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 800504c:	4a39      	ldr	r2, [pc, #228]	; (8005134 <hataKoduLcdGoster+0x1ac>)
 800504e:	2107      	movs	r1, #7
 8005050:	2002      	movs	r0, #2
 8005052:	f7fb fbb1 	bl	80007b8 <lcd_print>
}
 8005056:	e061      	b.n	800511c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	2b04      	cmp	r3, #4
 800505c:	d11d      	bne.n	800509a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <hataKoduLcdGoster+0x19c>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d105      	bne.n	8005072 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005066:	4a30      	ldr	r2, [pc, #192]	; (8005128 <hataKoduLcdGoster+0x1a0>)
 8005068:	2101      	movs	r1, #1
 800506a:	2001      	movs	r0, #1
 800506c:	f7fb fba4 	bl	80007b8 <lcd_print>
 8005070:	e008      	b.n	8005084 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005072:	4b2c      	ldr	r3, [pc, #176]	; (8005124 <hataKoduLcdGoster+0x19c>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d104      	bne.n	8005084 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800507a:	4a2c      	ldr	r2, [pc, #176]	; (800512c <hataKoduLcdGoster+0x1a4>)
 800507c:	2101      	movs	r1, #1
 800507e:	2001      	movs	r0, #1
 8005080:	f7fb fb9a 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 8005084:	4a2e      	ldr	r2, [pc, #184]	; (8005140 <hataKoduLcdGoster+0x1b8>)
 8005086:	2104      	movs	r1, #4
 8005088:	2002      	movs	r0, #2
 800508a:	f7fb fb95 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 800508e:	4a29      	ldr	r2, [pc, #164]	; (8005134 <hataKoduLcdGoster+0x1ac>)
 8005090:	2107      	movs	r1, #7
 8005092:	2002      	movs	r0, #2
 8005094:	f7fb fb90 	bl	80007b8 <lcd_print>
}
 8005098:	e040      	b.n	800511c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	2b05      	cmp	r3, #5
 800509e:	d11d      	bne.n	80050dc <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80050a0:	4b20      	ldr	r3, [pc, #128]	; (8005124 <hataKoduLcdGoster+0x19c>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <hataKoduLcdGoster+0x1a0>)
 80050aa:	2101      	movs	r1, #1
 80050ac:	2001      	movs	r0, #1
 80050ae:	f7fb fb83 	bl	80007b8 <lcd_print>
 80050b2:	e008      	b.n	80050c6 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80050b4:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <hataKoduLcdGoster+0x19c>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d104      	bne.n	80050c6 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80050bc:	4a1b      	ldr	r2, [pc, #108]	; (800512c <hataKoduLcdGoster+0x1a4>)
 80050be:	2101      	movs	r1, #1
 80050c0:	2001      	movs	r0, #1
 80050c2:	f7fb fb79 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 80050c6:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <hataKoduLcdGoster+0x1bc>)
 80050c8:	2105      	movs	r1, #5
 80050ca:	2002      	movs	r0, #2
 80050cc:	f7fb fb74 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80050d0:	4a18      	ldr	r2, [pc, #96]	; (8005134 <hataKoduLcdGoster+0x1ac>)
 80050d2:	2107      	movs	r1, #7
 80050d4:	2002      	movs	r0, #2
 80050d6:	f7fb fb6f 	bl	80007b8 <lcd_print>
}
 80050da:	e01f      	b.n	800511c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	2b06      	cmp	r3, #6
 80050e0:	d11c      	bne.n	800511c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <hataKoduLcdGoster+0x19c>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80050ea:	4a0f      	ldr	r2, [pc, #60]	; (8005128 <hataKoduLcdGoster+0x1a0>)
 80050ec:	2101      	movs	r1, #1
 80050ee:	2001      	movs	r0, #1
 80050f0:	f7fb fb62 	bl	80007b8 <lcd_print>
 80050f4:	e008      	b.n	8005108 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <hataKoduLcdGoster+0x19c>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d104      	bne.n	8005108 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80050fe:	4a0b      	ldr	r2, [pc, #44]	; (800512c <hataKoduLcdGoster+0x1a4>)
 8005100:	2101      	movs	r1, #1
 8005102:	2001      	movs	r0, #1
 8005104:	f7fb fb58 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8005108:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <hataKoduLcdGoster+0x1c0>)
 800510a:	2106      	movs	r1, #6
 800510c:	2002      	movs	r0, #2
 800510e:	f7fb fb53 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005112:	4a08      	ldr	r2, [pc, #32]	; (8005134 <hataKoduLcdGoster+0x1ac>)
 8005114:	2107      	movs	r1, #7
 8005116:	2002      	movs	r0, #2
 8005118:	f7fb fb4e 	bl	80007b8 <lcd_print>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000331 	.word	0x20000331
 8005128:	0800db98 	.word	0x0800db98
 800512c:	0800dbac 	.word	0x0800dbac
 8005130:	0800dad8 	.word	0x0800dad8
 8005134:	0800dbc0 	.word	0x0800dbc0
 8005138:	0800dadc 	.word	0x0800dadc
 800513c:	0800dae0 	.word	0x0800dae0
 8005140:	0800dae4 	.word	0x0800dae4
 8005144:	0800dae8 	.word	0x0800dae8
 8005148:	0800daec 	.word	0x0800daec

0800514c <convertAndSendData>:

void convertAndSendData() {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <convertAndSendData+0x58>)
 8005154:	2101      	movs	r1, #1
 8005156:	2001      	movs	r0, #1
 8005158:	f7fb fb2e 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <convertAndSendData+0x5c>)
 800515e:	2101      	movs	r1, #1
 8005160:	2002      	movs	r0, #2
 8005162:	f7fb fb29 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 8005166:	2300      	movs	r3, #0
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	e00a      	b.n	8005182 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 800516c:	f002 fb4e 	bl	800780c <mergeData>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	490d      	ldr	r1, [pc, #52]	; (80051ac <convertAndSendData+0x60>)
 8005176:	480e      	ldr	r0, [pc, #56]	; (80051b0 <convertAndSendData+0x64>)
 8005178:	f7fb f904 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3301      	adds	r3, #1
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b01      	cmp	r3, #1
 8005186:	ddf1      	ble.n	800516c <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800518c:	f003 fb18 	bl	80087c0 <HAL_Delay>
	lcd_clear();
 8005190:	f7fb fb3e 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005198:	f003 fb12 	bl	80087c0 <HAL_Delay>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	0800dbcc 	.word	0x0800dbcc
 80051a8:	0800dbd8 	.word	0x0800dbd8
 80051ac:	200002b0 	.word	0x200002b0
 80051b0:	20000438 	.word	0x20000438

080051b4 <eepromKontrol>:

void eepromKontrol(int type) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af04      	add	r7, sp, #16
 80051ba:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80051bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	236e      	movs	r3, #110	; 0x6e
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	4b9c      	ldr	r3, [pc, #624]	; (8005438 <eepromKontrol+0x284>)
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	236e      	movs	r3, #110	; 0x6e
 80051cc:	2200      	movs	r2, #0
 80051ce:	21a0      	movs	r1, #160	; 0xa0
 80051d0:	489a      	ldr	r0, [pc, #616]	; (800543c <eepromKontrol+0x288>)
 80051d2:	f004 fc79 	bl	8009ac8 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 80051d6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80051da:	f003 faf1 	bl	80087c0 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80051de:	4b96      	ldr	r3, [pc, #600]	; (8005438 <eepromKontrol+0x284>)
 80051e0:	78da      	ldrb	r2, [r3, #3]
 80051e2:	4b97      	ldr	r3, [pc, #604]	; (8005440 <eepromKontrol+0x28c>)
 80051e4:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80051e6:	4b94      	ldr	r3, [pc, #592]	; (8005438 <eepromKontrol+0x284>)
 80051e8:	785a      	ldrb	r2, [r3, #1]
 80051ea:	4b96      	ldr	r3, [pc, #600]	; (8005444 <eepromKontrol+0x290>)
 80051ec:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80051ee:	4b92      	ldr	r3, [pc, #584]	; (8005438 <eepromKontrol+0x284>)
 80051f0:	789a      	ldrb	r2, [r3, #2]
 80051f2:	4b95      	ldr	r3, [pc, #596]	; (8005448 <eepromKontrol+0x294>)
 80051f4:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80051f6:	4b90      	ldr	r3, [pc, #576]	; (8005438 <eepromKontrol+0x284>)
 80051f8:	791a      	ldrb	r2, [r3, #4]
 80051fa:	4b94      	ldr	r3, [pc, #592]	; (800544c <eepromKontrol+0x298>)
 80051fc:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80051fe:	4b8e      	ldr	r3, [pc, #568]	; (8005438 <eepromKontrol+0x284>)
 8005200:	795a      	ldrb	r2, [r3, #5]
 8005202:	4b93      	ldr	r3, [pc, #588]	; (8005450 <eepromKontrol+0x29c>)
 8005204:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005206:	4b8c      	ldr	r3, [pc, #560]	; (8005438 <eepromKontrol+0x284>)
 8005208:	799a      	ldrb	r2, [r3, #6]
 800520a:	4b92      	ldr	r3, [pc, #584]	; (8005454 <eepromKontrol+0x2a0>)
 800520c:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800520e:	4b8a      	ldr	r3, [pc, #552]	; (8005438 <eepromKontrol+0x284>)
 8005210:	79da      	ldrb	r2, [r3, #7]
 8005212:	4b91      	ldr	r3, [pc, #580]	; (8005458 <eepromKontrol+0x2a4>)
 8005214:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005216:	4b88      	ldr	r3, [pc, #544]	; (8005438 <eepromKontrol+0x284>)
 8005218:	7a1a      	ldrb	r2, [r3, #8]
 800521a:	4b90      	ldr	r3, [pc, #576]	; (800545c <eepromKontrol+0x2a8>)
 800521c:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800521e:	4b86      	ldr	r3, [pc, #536]	; (8005438 <eepromKontrol+0x284>)
 8005220:	7a5a      	ldrb	r2, [r3, #9]
 8005222:	4b8f      	ldr	r3, [pc, #572]	; (8005460 <eepromKontrol+0x2ac>)
 8005224:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005226:	4b84      	ldr	r3, [pc, #528]	; (8005438 <eepromKontrol+0x284>)
 8005228:	7a9a      	ldrb	r2, [r3, #10]
 800522a:	4b8e      	ldr	r3, [pc, #568]	; (8005464 <eepromKontrol+0x2b0>)
 800522c:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 800522e:	4b82      	ldr	r3, [pc, #520]	; (8005438 <eepromKontrol+0x284>)
 8005230:	7ada      	ldrb	r2, [r3, #11]
 8005232:	4b8d      	ldr	r3, [pc, #564]	; (8005468 <eepromKontrol+0x2b4>)
 8005234:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005236:	4b80      	ldr	r3, [pc, #512]	; (8005438 <eepromKontrol+0x284>)
 8005238:	7b1a      	ldrb	r2, [r3, #12]
 800523a:	4b8c      	ldr	r3, [pc, #560]	; (800546c <eepromKontrol+0x2b8>)
 800523c:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 800523e:	4b7e      	ldr	r3, [pc, #504]	; (8005438 <eepromKontrol+0x284>)
 8005240:	7b5a      	ldrb	r2, [r3, #13]
 8005242:	4b8b      	ldr	r3, [pc, #556]	; (8005470 <eepromKontrol+0x2bc>)
 8005244:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005246:	4b7c      	ldr	r3, [pc, #496]	; (8005438 <eepromKontrol+0x284>)
 8005248:	7b9a      	ldrb	r2, [r3, #14]
 800524a:	4b8a      	ldr	r3, [pc, #552]	; (8005474 <eepromKontrol+0x2c0>)
 800524c:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 800524e:	4b7a      	ldr	r3, [pc, #488]	; (8005438 <eepromKontrol+0x284>)
 8005250:	7bda      	ldrb	r2, [r3, #15]
 8005252:	4b89      	ldr	r3, [pc, #548]	; (8005478 <eepromKontrol+0x2c4>)
 8005254:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005256:	4b78      	ldr	r3, [pc, #480]	; (8005438 <eepromKontrol+0x284>)
 8005258:	7c1a      	ldrb	r2, [r3, #16]
 800525a:	4b88      	ldr	r3, [pc, #544]	; (800547c <eepromKontrol+0x2c8>)
 800525c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 800525e:	4b76      	ldr	r3, [pc, #472]	; (8005438 <eepromKontrol+0x284>)
 8005260:	7c5a      	ldrb	r2, [r3, #17]
 8005262:	4b87      	ldr	r3, [pc, #540]	; (8005480 <eepromKontrol+0x2cc>)
 8005264:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005266:	4b74      	ldr	r3, [pc, #464]	; (8005438 <eepromKontrol+0x284>)
 8005268:	7c9a      	ldrb	r2, [r3, #18]
 800526a:	4b86      	ldr	r3, [pc, #536]	; (8005484 <eepromKontrol+0x2d0>)
 800526c:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 800526e:	4b72      	ldr	r3, [pc, #456]	; (8005438 <eepromKontrol+0x284>)
 8005270:	7cda      	ldrb	r2, [r3, #19]
 8005272:	4b85      	ldr	r3, [pc, #532]	; (8005488 <eepromKontrol+0x2d4>)
 8005274:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005276:	4b70      	ldr	r3, [pc, #448]	; (8005438 <eepromKontrol+0x284>)
 8005278:	7d1a      	ldrb	r2, [r3, #20]
 800527a:	4b84      	ldr	r3, [pc, #528]	; (800548c <eepromKontrol+0x2d8>)
 800527c:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 800527e:	4b6e      	ldr	r3, [pc, #440]	; (8005438 <eepromKontrol+0x284>)
 8005280:	7d5a      	ldrb	r2, [r3, #21]
 8005282:	4b83      	ldr	r3, [pc, #524]	; (8005490 <eepromKontrol+0x2dc>)
 8005284:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005286:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <eepromKontrol+0x284>)
 8005288:	7d9a      	ldrb	r2, [r3, #22]
 800528a:	4b82      	ldr	r3, [pc, #520]	; (8005494 <eepromKontrol+0x2e0>)
 800528c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800528e:	4b6a      	ldr	r3, [pc, #424]	; (8005438 <eepromKontrol+0x284>)
 8005290:	7dda      	ldrb	r2, [r3, #23]
 8005292:	4b81      	ldr	r3, [pc, #516]	; (8005498 <eepromKontrol+0x2e4>)
 8005294:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005296:	4b68      	ldr	r3, [pc, #416]	; (8005438 <eepromKontrol+0x284>)
 8005298:	7e1a      	ldrb	r2, [r3, #24]
 800529a:	4b80      	ldr	r3, [pc, #512]	; (800549c <eepromKontrol+0x2e8>)
 800529c:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800529e:	4b66      	ldr	r3, [pc, #408]	; (8005438 <eepromKontrol+0x284>)
 80052a0:	7e5a      	ldrb	r2, [r3, #25]
 80052a2:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <eepromKontrol+0x2ec>)
 80052a4:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80052a6:	4b64      	ldr	r3, [pc, #400]	; (8005438 <eepromKontrol+0x284>)
 80052a8:	7e9a      	ldrb	r2, [r3, #26]
 80052aa:	4b7e      	ldr	r3, [pc, #504]	; (80054a4 <eepromKontrol+0x2f0>)
 80052ac:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80052ae:	4b62      	ldr	r3, [pc, #392]	; (8005438 <eepromKontrol+0x284>)
 80052b0:	7eda      	ldrb	r2, [r3, #27]
 80052b2:	4b7d      	ldr	r3, [pc, #500]	; (80054a8 <eepromKontrol+0x2f4>)
 80052b4:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80052b6:	4b60      	ldr	r3, [pc, #384]	; (8005438 <eepromKontrol+0x284>)
 80052b8:	7f1a      	ldrb	r2, [r3, #28]
 80052ba:	4b7c      	ldr	r3, [pc, #496]	; (80054ac <eepromKontrol+0x2f8>)
 80052bc:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80052be:	4b5e      	ldr	r3, [pc, #376]	; (8005438 <eepromKontrol+0x284>)
 80052c0:	7f5a      	ldrb	r2, [r3, #29]
 80052c2:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <eepromKontrol+0x2fc>)
 80052c4:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80052c6:	4b5c      	ldr	r3, [pc, #368]	; (8005438 <eepromKontrol+0x284>)
 80052c8:	7f9a      	ldrb	r2, [r3, #30]
 80052ca:	4b7a      	ldr	r3, [pc, #488]	; (80054b4 <eepromKontrol+0x300>)
 80052cc:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 80052ce:	4b5a      	ldr	r3, [pc, #360]	; (8005438 <eepromKontrol+0x284>)
 80052d0:	7fda      	ldrb	r2, [r3, #31]
 80052d2:	4b79      	ldr	r3, [pc, #484]	; (80054b8 <eepromKontrol+0x304>)
 80052d4:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 80052d6:	4b58      	ldr	r3, [pc, #352]	; (8005438 <eepromKontrol+0x284>)
 80052d8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80052dc:	4b77      	ldr	r3, [pc, #476]	; (80054bc <eepromKontrol+0x308>)
 80052de:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 80052e0:	4b55      	ldr	r3, [pc, #340]	; (8005438 <eepromKontrol+0x284>)
 80052e2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80052e6:	4b76      	ldr	r3, [pc, #472]	; (80054c0 <eepromKontrol+0x30c>)
 80052e8:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 80052ea:	4b53      	ldr	r3, [pc, #332]	; (8005438 <eepromKontrol+0x284>)
 80052ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80052f0:	4b74      	ldr	r3, [pc, #464]	; (80054c4 <eepromKontrol+0x310>)
 80052f2:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 80052f4:	4b50      	ldr	r3, [pc, #320]	; (8005438 <eepromKontrol+0x284>)
 80052f6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80052fa:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <eepromKontrol+0x314>)
 80052fc:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 80052fe:	4b4e      	ldr	r3, [pc, #312]	; (8005438 <eepromKontrol+0x284>)
 8005300:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005304:	4b71      	ldr	r3, [pc, #452]	; (80054cc <eepromKontrol+0x318>)
 8005306:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005308:	4b4b      	ldr	r3, [pc, #300]	; (8005438 <eepromKontrol+0x284>)
 800530a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800530e:	4b70      	ldr	r3, [pc, #448]	; (80054d0 <eepromKontrol+0x31c>)
 8005310:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005312:	4b49      	ldr	r3, [pc, #292]	; (8005438 <eepromKontrol+0x284>)
 8005314:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005318:	4b6e      	ldr	r3, [pc, #440]	; (80054d4 <eepromKontrol+0x320>)
 800531a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800531c:	4b46      	ldr	r3, [pc, #280]	; (8005438 <eepromKontrol+0x284>)
 800531e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005322:	4b6d      	ldr	r3, [pc, #436]	; (80054d8 <eepromKontrol+0x324>)
 8005324:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005326:	4b44      	ldr	r3, [pc, #272]	; (8005438 <eepromKontrol+0x284>)
 8005328:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800532c:	4b6b      	ldr	r3, [pc, #428]	; (80054dc <eepromKontrol+0x328>)
 800532e:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005330:	4b41      	ldr	r3, [pc, #260]	; (8005438 <eepromKontrol+0x284>)
 8005332:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005336:	4b6a      	ldr	r3, [pc, #424]	; (80054e0 <eepromKontrol+0x32c>)
 8005338:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 800533a:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <eepromKontrol+0x284>)
 800533c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005340:	4b68      	ldr	r3, [pc, #416]	; (80054e4 <eepromKontrol+0x330>)
 8005342:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005344:	4b3c      	ldr	r3, [pc, #240]	; (8005438 <eepromKontrol+0x284>)
 8005346:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800534a:	4b67      	ldr	r3, [pc, #412]	; (80054e8 <eepromKontrol+0x334>)
 800534c:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 800534e:	4b3a      	ldr	r3, [pc, #232]	; (8005438 <eepromKontrol+0x284>)
 8005350:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005354:	4b65      	ldr	r3, [pc, #404]	; (80054ec <eepromKontrol+0x338>)
 8005356:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005358:	4b37      	ldr	r3, [pc, #220]	; (8005438 <eepromKontrol+0x284>)
 800535a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800535e:	4b64      	ldr	r3, [pc, #400]	; (80054f0 <eepromKontrol+0x33c>)
 8005360:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005362:	4b35      	ldr	r3, [pc, #212]	; (8005438 <eepromKontrol+0x284>)
 8005364:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005368:	4b62      	ldr	r3, [pc, #392]	; (80054f4 <eepromKontrol+0x340>)
 800536a:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 800536c:	4b32      	ldr	r3, [pc, #200]	; (8005438 <eepromKontrol+0x284>)
 800536e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005372:	4b61      	ldr	r3, [pc, #388]	; (80054f8 <eepromKontrol+0x344>)
 8005374:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 8005376:	4b51      	ldr	r3, [pc, #324]	; (80054bc <eepromKontrol+0x308>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b09      	cmp	r3, #9
 800537c:	d902      	bls.n	8005384 <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 800537e:	4b4f      	ldr	r3, [pc, #316]	; (80054bc <eepromKontrol+0x308>)
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005384:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <eepromKontrol+0x304>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b09      	cmp	r3, #9
 800538a:	d902      	bls.n	8005392 <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 800538c:	4b4a      	ldr	r3, [pc, #296]	; (80054b8 <eepromKontrol+0x304>)
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005392:	4b48      	ldr	r3, [pc, #288]	; (80054b4 <eepromKontrol+0x300>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b09      	cmp	r3, #9
 8005398:	d902      	bls.n	80053a0 <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 800539a:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <eepromKontrol+0x300>)
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80053a0:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <eepromKontrol+0x2fc>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b09      	cmp	r3, #9
 80053a6:	d902      	bls.n	80053ae <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 80053a8:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <eepromKontrol+0x2fc>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80053ae:	4b3f      	ldr	r3, [pc, #252]	; (80054ac <eepromKontrol+0x2f8>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b09      	cmp	r3, #9
 80053b4:	d902      	bls.n	80053bc <eepromKontrol+0x208>
	    calismaSayisi1=0;
 80053b6:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <eepromKontrol+0x2f8>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80053bc:	4b21      	ldr	r3, [pc, #132]	; (8005444 <eepromKontrol+0x290>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d902      	bls.n	80053ca <eepromKontrol+0x216>
	    calismaSekli=0;
 80053c4:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <eepromKontrol+0x290>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80053ca:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <eepromKontrol+0x294>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d902      	bls.n	80053d8 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 80053d2:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <eepromKontrol+0x294>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80053d8:	4b1c      	ldr	r3, [pc, #112]	; (800544c <eepromKontrol+0x298>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d902      	bls.n	80053e6 <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 80053e0:	4b1a      	ldr	r3, [pc, #104]	; (800544c <eepromKontrol+0x298>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80053e6:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <eepromKontrol+0x29c>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d902      	bls.n	80053f4 <eepromKontrol+0x240>
	    altLimit=1;
 80053ee:	4b18      	ldr	r3, [pc, #96]	; (8005450 <eepromKontrol+0x29c>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 80053f4:	4b17      	ldr	r3, [pc, #92]	; (8005454 <eepromKontrol+0x2a0>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d902      	bls.n	8005402 <eepromKontrol+0x24e>
	    basincSalteri=1;
 80053fc:	4b15      	ldr	r3, [pc, #84]	; (8005454 <eepromKontrol+0x2a0>)
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <eepromKontrol+0x2a4>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b03      	cmp	r3, #3
 8005408:	d902      	bls.n	8005410 <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <eepromKontrol+0x2a4>)
 800540c:	2203      	movs	r2, #3
 800540e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005410:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <eepromKontrol+0x31c>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d902      	bls.n	800541e <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8005418:	4b2d      	ldr	r3, [pc, #180]	; (80054d0 <eepromKontrol+0x31c>)
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800541e:	4b0f      	ldr	r3, [pc, #60]	; (800545c <eepromKontrol+0x2a8>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d902      	bls.n	800542c <eepromKontrol+0x278>
	    kapi1Tip=1;
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <eepromKontrol+0x2a8>)
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <eepromKontrol+0x2ac>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b05      	cmp	r3, #5
 8005432:	d966      	bls.n	8005502 <eepromKontrol+0x34e>
 8005434:	e062      	b.n	80054fc <eepromKontrol+0x348>
 8005436:	bf00      	nop
 8005438:	20000218 	.word	0x20000218
 800543c:	2000039c 	.word	0x2000039c
 8005440:	20000286 	.word	0x20000286
 8005444:	20000311 	.word	0x20000311
 8005448:	20000314 	.word	0x20000314
 800544c:	20000315 	.word	0x20000315
 8005450:	20000316 	.word	0x20000316
 8005454:	20000317 	.word	0x20000317
 8005458:	20000318 	.word	0x20000318
 800545c:	20000319 	.word	0x20000319
 8005460:	20000329 	.word	0x20000329
 8005464:	2000031a 	.word	0x2000031a
 8005468:	2000032a 	.word	0x2000032a
 800546c:	2000031b 	.word	0x2000031b
 8005470:	2000032b 	.word	0x2000032b
 8005474:	2000031e 	.word	0x2000031e
 8005478:	2000031f 	.word	0x2000031f
 800547c:	20000320 	.word	0x20000320
 8005480:	20000321 	.word	0x20000321
 8005484:	20000322 	.word	0x20000322
 8005488:	20000323 	.word	0x20000323
 800548c:	20000324 	.word	0x20000324
 8005490:	20000325 	.word	0x20000325
 8005494:	20000326 	.word	0x20000326
 8005498:	20000327 	.word	0x20000327
 800549c:	20000328 	.word	0x20000328
 80054a0:	2000032c 	.word	0x2000032c
 80054a4:	2000032e 	.word	0x2000032e
 80054a8:	2000030c 	.word	0x2000030c
 80054ac:	2000030d 	.word	0x2000030d
 80054b0:	2000030e 	.word	0x2000030e
 80054b4:	200000a1 	.word	0x200000a1
 80054b8:	200000a2 	.word	0x200000a2
 80054bc:	2000030f 	.word	0x2000030f
 80054c0:	20000331 	.word	0x20000331
 80054c4:	2000032f 	.word	0x2000032f
 80054c8:	2000031d 	.word	0x2000031d
 80054cc:	20000330 	.word	0x20000330
 80054d0:	2000031c 	.word	0x2000031c
 80054d4:	20000332 	.word	0x20000332
 80054d8:	20000333 	.word	0x20000333
 80054dc:	20000334 	.word	0x20000334
 80054e0:	20000335 	.word	0x20000335
 80054e4:	20000336 	.word	0x20000336
 80054e8:	20000337 	.word	0x20000337
 80054ec:	20000338 	.word	0x20000338
 80054f0:	20000339 	.word	0x20000339
 80054f4:	2000033a 	.word	0x2000033a
 80054f8:	2000033b 	.word	0x2000033b
	    kapi1AcSure=5;
 80054fc:	4b56      	ldr	r3, [pc, #344]	; (8005658 <eepromKontrol+0x4a4>)
 80054fe:	2205      	movs	r2, #5
 8005500:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005502:	4b56      	ldr	r3, [pc, #344]	; (800565c <eepromKontrol+0x4a8>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d902      	bls.n	8005510 <eepromKontrol+0x35c>
	    kapi2Tip=1;
 800550a:	4b54      	ldr	r3, [pc, #336]	; (800565c <eepromKontrol+0x4a8>)
 800550c:	2201      	movs	r2, #1
 800550e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005510:	4b53      	ldr	r3, [pc, #332]	; (8005660 <eepromKontrol+0x4ac>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b05      	cmp	r3, #5
 8005516:	d902      	bls.n	800551e <eepromKontrol+0x36a>
	    kapi2AcSure=5;
 8005518:	4b51      	ldr	r3, [pc, #324]	; (8005660 <eepromKontrol+0x4ac>)
 800551a:	2205      	movs	r2, #5
 800551c:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800551e:	4b51      	ldr	r3, [pc, #324]	; (8005664 <eepromKontrol+0x4b0>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d902      	bls.n	800552c <eepromKontrol+0x378>
	    kapitablaTip=1;
 8005526:	4b4f      	ldr	r3, [pc, #316]	; (8005664 <eepromKontrol+0x4b0>)
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800552c:	4b4e      	ldr	r3, [pc, #312]	; (8005668 <eepromKontrol+0x4b4>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d902      	bls.n	800553a <eepromKontrol+0x386>
	    kapiTablaAcKonum=2;
 8005534:	4b4c      	ldr	r3, [pc, #304]	; (8005668 <eepromKontrol+0x4b4>)
 8005536:	2202      	movs	r2, #2
 8005538:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 800553a:	4b4c      	ldr	r3, [pc, #304]	; (800566c <eepromKontrol+0x4b8>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b05      	cmp	r3, #5
 8005540:	d902      	bls.n	8005548 <eepromKontrol+0x394>
	    kapiTablaAcSure=5;
 8005542:	4b4a      	ldr	r3, [pc, #296]	; (800566c <eepromKontrol+0x4b8>)
 8005544:	2205      	movs	r2, #5
 8005546:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005548:	4b49      	ldr	r3, [pc, #292]	; (8005670 <eepromKontrol+0x4bc>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d902      	bls.n	8005556 <eepromKontrol+0x3a2>
	    yukariYavasLimit=0;
 8005550:	4b47      	ldr	r3, [pc, #284]	; (8005670 <eepromKontrol+0x4bc>)
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005556:	4b47      	ldr	r3, [pc, #284]	; (8005674 <eepromKontrol+0x4c0>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d902      	bls.n	8005564 <eepromKontrol+0x3b0>
	    devirmeYuruyusSecim=0;
 800555e:	4b45      	ldr	r3, [pc, #276]	; (8005674 <eepromKontrol+0x4c0>)
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005564:	4b44      	ldr	r3, [pc, #272]	; (8005678 <eepromKontrol+0x4c4>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d902      	bls.n	8005572 <eepromKontrol+0x3be>
	    devirmeYukariIleriLimit=1;
 800556c:	4b42      	ldr	r3, [pc, #264]	; (8005678 <eepromKontrol+0x4c4>)
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005572:	4b42      	ldr	r3, [pc, #264]	; (800567c <eepromKontrol+0x4c8>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d902      	bls.n	8005580 <eepromKontrol+0x3cc>
	    devirmeAsagiGeriLimit=1;
 800557a:	4b40      	ldr	r3, [pc, #256]	; (800567c <eepromKontrol+0x4c8>)
 800557c:	2201      	movs	r2, #1
 800557e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005580:	4b3f      	ldr	r3, [pc, #252]	; (8005680 <eepromKontrol+0x4cc>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d902      	bls.n	800558e <eepromKontrol+0x3da>
	    devirmeSilindirTipi=0;
 8005588:	4b3d      	ldr	r3, [pc, #244]	; (8005680 <eepromKontrol+0x4cc>)
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800558e:	4b3d      	ldr	r3, [pc, #244]	; (8005684 <eepromKontrol+0x4d0>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d902      	bls.n	800559c <eepromKontrol+0x3e8>
	    platformSilindirTipi=0;
 8005596:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <eepromKontrol+0x4d0>)
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 800559c:	4b3a      	ldr	r3, [pc, #232]	; (8005688 <eepromKontrol+0x4d4>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b05      	cmp	r3, #5
 80055a2:	d902      	bls.n	80055aa <eepromKontrol+0x3f6>
	    yukariValfTmr=0;
 80055a4:	4b38      	ldr	r3, [pc, #224]	; (8005688 <eepromKontrol+0x4d4>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80055aa:	4b38      	ldr	r3, [pc, #224]	; (800568c <eepromKontrol+0x4d8>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	d902      	bls.n	80055b8 <eepromKontrol+0x404>
	    asagiValfTmr=0;
 80055b2:	4b36      	ldr	r3, [pc, #216]	; (800568c <eepromKontrol+0x4d8>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <eepromKontrol+0x4dc>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b05      	cmp	r3, #5
 80055be:	d902      	bls.n	80055c6 <eepromKontrol+0x412>
	    devirmeYukariIleriTmr=0;
 80055c0:	4b33      	ldr	r3, [pc, #204]	; (8005690 <eepromKontrol+0x4dc>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80055c6:	4b33      	ldr	r3, [pc, #204]	; (8005694 <eepromKontrol+0x4e0>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d902      	bls.n	80055d4 <eepromKontrol+0x420>
	    devirmeAsagiGeriTmr=0;
 80055ce:	4b31      	ldr	r3, [pc, #196]	; (8005694 <eepromKontrol+0x4e0>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80055d4:	4b30      	ldr	r3, [pc, #192]	; (8005698 <eepromKontrol+0x4e4>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2bb4      	cmp	r3, #180	; 0xb4
 80055da:	d902      	bls.n	80055e2 <eepromKontrol+0x42e>
	    makineCalismaTmr=60;
 80055dc:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <eepromKontrol+0x4e4>)
 80055de:	223c      	movs	r2, #60	; 0x3c
 80055e0:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80055e2:	4b2e      	ldr	r3, [pc, #184]	; (800569c <eepromKontrol+0x4e8>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d902      	bls.n	80055f0 <eepromKontrol+0x43c>
	    buzzer=0;
 80055ea:	4b2c      	ldr	r3, [pc, #176]	; (800569c <eepromKontrol+0x4e8>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80055f0:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <eepromKontrol+0x4ec>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d902      	bls.n	80055fe <eepromKontrol+0x44a>
	    demoMode=0;
 80055f8:	4b29      	ldr	r3, [pc, #164]	; (80056a0 <eepromKontrol+0x4ec>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 80055fe:	4b29      	ldr	r3, [pc, #164]	; (80056a4 <eepromKontrol+0x4f0>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d902      	bls.n	800560c <eepromKontrol+0x458>
	    calismaSayModu=0;
 8005606:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <eepromKontrol+0x4f0>)
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800560c:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <eepromKontrol+0x4f4>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d902      	bls.n	800561a <eepromKontrol+0x466>
	    dilSecim=0;
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <eepromKontrol+0x4f4>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 800561a:	4b24      	ldr	r3, [pc, #144]	; (80056ac <eepromKontrol+0x4f8>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d902      	bls.n	8005628 <eepromKontrol+0x474>
		iotMode=0;
 8005622:	4b22      	ldr	r3, [pc, #136]	; (80056ac <eepromKontrol+0x4f8>)
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005628:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <eepromKontrol+0x4fc>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <eepromKontrol+0x500>)
 8005630:	441a      	add	r2, r3
 8005632:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <eepromKontrol+0x504>)
 8005634:	6810      	ldr	r0, [r2, #0]
 8005636:	6851      	ldr	r1, [r2, #4]
 8005638:	6892      	ldr	r2, [r2, #8]
 800563a:	c307      	stmia	r3!, {r0, r1, r2}
	readValFromEEPROM(1); //SSID Okuma
 800563c:	2001      	movs	r0, #1
 800563e:	f7fb f955 	bl	80008ec <readValFromEEPROM>
	HAL_Delay(250);
 8005642:	20fa      	movs	r0, #250	; 0xfa
 8005644:	f003 f8bc 	bl	80087c0 <HAL_Delay>
	readValFromEEPROM(2); //Pass Okuma
 8005648:	2002      	movs	r0, #2
 800564a:	f7fb f94f 	bl	80008ec <readValFromEEPROM>
	//readWiFiCredentialsFromEEPROM(wifiSSID, wifiPass);
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000329 	.word	0x20000329
 800565c:	2000031a 	.word	0x2000031a
 8005660:	2000032a 	.word	0x2000032a
 8005664:	2000031b 	.word	0x2000031b
 8005668:	2000031d 	.word	0x2000031d
 800566c:	2000032b 	.word	0x2000032b
 8005670:	2000031e 	.word	0x2000031e
 8005674:	2000031f 	.word	0x2000031f
 8005678:	20000320 	.word	0x20000320
 800567c:	20000321 	.word	0x20000321
 8005680:	20000322 	.word	0x20000322
 8005684:	20000323 	.word	0x20000323
 8005688:	20000324 	.word	0x20000324
 800568c:	20000325 	.word	0x20000325
 8005690:	20000326 	.word	0x20000326
 8005694:	20000327 	.word	0x20000327
 8005698:	20000328 	.word	0x20000328
 800569c:	2000032c 	.word	0x2000032c
 80056a0:	2000032e 	.word	0x2000032e
 80056a4:	20000330 	.word	0x20000330
 80056a8:	20000331 	.word	0x20000331
 80056ac:	2000032f 	.word	0x2000032f
 80056b0:	2000009d 	.word	0x2000009d
 80056b4:	20000218 	.word	0x20000218
 80056b8:	200002b0 	.word	0x200002b0

080056bc <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b089      	sub	sp, #36	; 0x24
 80056c0:	af04      	add	r7, sp, #16
 80056c2:	4603      	mov	r3, r0
 80056c4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80056c6:	4b26      	ldr	r3, [pc, #152]	; (8005760 <hata2EEPROM+0xa4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	1e5a      	subs	r2, r3, #1
 80056cc:	4b25      	ldr	r3, [pc, #148]	; (8005764 <hata2EEPROM+0xa8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	4a25      	ldr	r2, [pc, #148]	; (8005768 <hata2EEPROM+0xac>)
 80056d4:	5cd3      	ldrb	r3, [r2, r3]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80056da:	f000 f849 	bl	8005770 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80056de:	e000      	b.n	80056e2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80056e0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e012      	b.n	800570e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80056e8:	4b1e      	ldr	r3, [pc, #120]	; (8005764 <hata2EEPROM+0xa8>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	4a1d      	ldr	r2, [pc, #116]	; (8005768 <hata2EEPROM+0xac>)
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80056f8:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <hata2EEPROM+0xa8>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	4919      	ldr	r1, [pc, #100]	; (8005768 <hata2EEPROM+0xac>)
 8005702:	79fa      	ldrb	r2, [r7, #7]
 8005704:	54ca      	strb	r2, [r1, r3]
					break;
 8005706:	e007      	b.n	8005718 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	4b14      	ldr	r3, [pc, #80]	; (8005760 <hata2EEPROM+0xa4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	429a      	cmp	r2, r3
 8005716:	dbe7      	blt.n	80056e8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005718:	4b12      	ldr	r3, [pc, #72]	; (8005764 <hata2EEPROM+0xa8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b299      	uxth	r1, r3
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <hata2EEPROM+0xa4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	b298      	uxth	r0, r3
 8005724:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <hata2EEPROM+0xa8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a0f      	ldr	r2, [pc, #60]	; (8005768 <hata2EEPROM+0xac>)
 800572a:	4413      	add	r3, r2
 800572c:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <hata2EEPROM+0xa4>)
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	b292      	uxth	r2, r2
 8005732:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005736:	9402      	str	r4, [sp, #8]
 8005738:	9201      	str	r2, [sp, #4]
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	4603      	mov	r3, r0
 800573e:	460a      	mov	r2, r1
 8005740:	21a0      	movs	r1, #160	; 0xa0
 8005742:	480a      	ldr	r0, [pc, #40]	; (800576c <hata2EEPROM+0xb0>)
 8005744:	f004 f8c6 	bl	80098d4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800574c:	f003 f838 	bl	80087c0 <HAL_Delay>
	eepromKontrol(1);
 8005750:	2001      	movs	r0, #1
 8005752:	f7ff fd2f 	bl	80051b4 <eepromKontrol>
}
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}
 800575e:	bf00      	nop
 8005760:	20000028 	.word	0x20000028
 8005764:	2000002c 	.word	0x2000002c
 8005768:	20000218 	.word	0x20000218
 800576c:	2000039c 	.word	0x2000039c

08005770 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
 800577a:	e009      	b.n	8005790 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 800577c:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <eepromDataFillWithEmpty+0x38>)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005784:	4a09      	ldr	r2, [pc, #36]	; (80057ac <eepromDataFillWithEmpty+0x3c>)
 8005786:	2100      	movs	r1, #0
 8005788:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3301      	adds	r3, #1
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <eepromDataFillWithEmpty+0x40>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	429a      	cmp	r2, r3
 8005798:	dbf0      	blt.n	800577c <eepromDataFillWithEmpty+0xc>
	}
}
 800579a:	bf00      	nop
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000000 	.word	0x20000000
 80057ac:	20000218 	.word	0x20000218
 80057b0:	20000028 	.word	0x20000028

080057b4 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
	timer1=millis;
 80057b8:	4b47      	ldr	r3, [pc, #284]	; (80058d8 <bekle+0x124>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a47      	ldr	r2, [pc, #284]	; (80058dc <bekle+0x128>)
 80057be:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057c0:	e002      	b.n	80057c8 <bekle+0x14>
    	butonKontrol = 1;
 80057c2:	4b47      	ldr	r3, [pc, #284]	; (80058e0 <bekle+0x12c>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057c8:	2101      	movs	r1, #1
 80057ca:	4846      	ldr	r0, [pc, #280]	; (80058e4 <bekle+0x130>)
 80057cc:	f003 fdc8 	bl	8009360 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d109      	bne.n	80057ea <bekle+0x36>
 80057d6:	4b40      	ldr	r3, [pc, #256]	; (80058d8 <bekle+0x124>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b40      	ldr	r3, [pc, #256]	; (80058dc <bekle+0x128>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d0ef      	beq.n	80057c2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057e2:	e002      	b.n	80057ea <bekle+0x36>
    	butonKontrol = 1;
 80057e4:	4b3e      	ldr	r3, [pc, #248]	; (80058e0 <bekle+0x12c>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80057ea:	2108      	movs	r1, #8
 80057ec:	483e      	ldr	r0, [pc, #248]	; (80058e8 <bekle+0x134>)
 80057ee:	f003 fdb7 	bl	8009360 <HAL_GPIO_ReadPin>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d109      	bne.n	800580c <bekle+0x58>
 80057f8:	4b37      	ldr	r3, [pc, #220]	; (80058d8 <bekle+0x124>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	4b37      	ldr	r3, [pc, #220]	; (80058dc <bekle+0x128>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d0ef      	beq.n	80057e4 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005804:	e002      	b.n	800580c <bekle+0x58>
    	butonKontrol = 1;
 8005806:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <bekle+0x12c>)
 8005808:	2201      	movs	r2, #1
 800580a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800580c:	2102      	movs	r1, #2
 800580e:	4835      	ldr	r0, [pc, #212]	; (80058e4 <bekle+0x130>)
 8005810:	f003 fda6 	bl	8009360 <HAL_GPIO_ReadPin>
 8005814:	4603      	mov	r3, r0
 8005816:	2b01      	cmp	r3, #1
 8005818:	d109      	bne.n	800582e <bekle+0x7a>
 800581a:	4b2f      	ldr	r3, [pc, #188]	; (80058d8 <bekle+0x124>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b2f      	ldr	r3, [pc, #188]	; (80058dc <bekle+0x128>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d0ef      	beq.n	8005806 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005826:	e002      	b.n	800582e <bekle+0x7a>
    	butonKontrol = 1;
 8005828:	4b2d      	ldr	r3, [pc, #180]	; (80058e0 <bekle+0x12c>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800582e:	2104      	movs	r1, #4
 8005830:	482c      	ldr	r0, [pc, #176]	; (80058e4 <bekle+0x130>)
 8005832:	f003 fd95 	bl	8009360 <HAL_GPIO_ReadPin>
 8005836:	4603      	mov	r3, r0
 8005838:	2b01      	cmp	r3, #1
 800583a:	d109      	bne.n	8005850 <bekle+0x9c>
 800583c:	4b26      	ldr	r3, [pc, #152]	; (80058d8 <bekle+0x124>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b26      	ldr	r3, [pc, #152]	; (80058dc <bekle+0x128>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d0ef      	beq.n	8005828 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005848:	e002      	b.n	8005850 <bekle+0x9c>
    	butonKontrol = 1;
 800584a:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <bekle+0x12c>)
 800584c:	2201      	movs	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005850:	2108      	movs	r1, #8
 8005852:	4824      	ldr	r0, [pc, #144]	; (80058e4 <bekle+0x130>)
 8005854:	f003 fd84 	bl	8009360 <HAL_GPIO_ReadPin>
 8005858:	4603      	mov	r3, r0
 800585a:	2b01      	cmp	r3, #1
 800585c:	d109      	bne.n	8005872 <bekle+0xbe>
 800585e:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <bekle+0x124>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <bekle+0x128>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d0ef      	beq.n	800584a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800586a:	e002      	b.n	8005872 <bekle+0xbe>
    	butonKontrol = 1;
 800586c:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <bekle+0x12c>)
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005872:	2180      	movs	r1, #128	; 0x80
 8005874:	481c      	ldr	r0, [pc, #112]	; (80058e8 <bekle+0x134>)
 8005876:	f003 fd73 	bl	8009360 <HAL_GPIO_ReadPin>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d109      	bne.n	8005894 <bekle+0xe0>
 8005880:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <bekle+0x124>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4b15      	ldr	r3, [pc, #84]	; (80058dc <bekle+0x128>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d0ef      	beq.n	800586c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800588c:	e002      	b.n	8005894 <bekle+0xe0>
    	butonKontrol = 1;
 800588e:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <bekle+0x12c>)
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005898:	4813      	ldr	r0, [pc, #76]	; (80058e8 <bekle+0x134>)
 800589a:	f003 fd61 	bl	8009360 <HAL_GPIO_ReadPin>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <bekle+0x104>
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <bekle+0x124>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <bekle+0x128>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d0ee      	beq.n	800588e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80058b0:	e002      	b.n	80058b8 <bekle+0x104>
    	butonKontrol = 1;
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <bekle+0x12c>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80058b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058bc:	480a      	ldr	r0, [pc, #40]	; (80058e8 <bekle+0x134>)
 80058be:	f003 fd4f 	bl	8009360 <HAL_GPIO_ReadPin>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <bekle+0x120>
 80058c8:	4b03      	ldr	r3, [pc, #12]	; (80058d8 <bekle+0x124>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <bekle+0x128>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d0ee      	beq.n	80058b2 <bekle+0xfe>
    }

}
 80058d4:	bf00      	nop
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000290 	.word	0x20000290
 80058dc:	20000298 	.word	0x20000298
 80058e0:	2000033f 	.word	0x2000033f
 80058e4:	40010800 	.word	0x40010800
 80058e8:	40011000 	.word	0x40011000

080058ec <i2cTest>:

void i2cTest() {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80058f2:	463b      	mov	r3, r7
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	605a      	str	r2, [r3, #4]
 80058fa:	609a      	str	r2, [r3, #8]
 80058fc:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80058fe:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <i2cTest+0x154>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	4b4e      	ldr	r3, [pc, #312]	; (8005a40 <i2cTest+0x154>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0201 	bic.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800590e:	484c      	ldr	r0, [pc, #304]	; (8005a40 <i2cTest+0x154>)
 8005910:	f003 feb2 	bl	8009678 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005914:	23c0      	movs	r3, #192	; 0xc0
 8005916:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005918:	2311      	movs	r3, #17
 800591a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800591c:	2301      	movs	r3, #1
 800591e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005920:	2303      	movs	r3, #3
 8005922:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005924:	463b      	mov	r3, r7
 8005926:	4619      	mov	r1, r3
 8005928:	4846      	ldr	r0, [pc, #280]	; (8005a44 <i2cTest+0x158>)
 800592a:	f003 fab9 	bl	8008ea0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800592e:	2201      	movs	r2, #1
 8005930:	2140      	movs	r1, #64	; 0x40
 8005932:	4844      	ldr	r0, [pc, #272]	; (8005a44 <i2cTest+0x158>)
 8005934:	f003 fd2b 	bl	800938e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005938:	2201      	movs	r2, #1
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	4841      	ldr	r0, [pc, #260]	; (8005a44 <i2cTest+0x158>)
 800593e:	f003 fd26 	bl	800938e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8005942:	200a      	movs	r0, #10
 8005944:	f002 ff3c 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005948:	bf00      	nop
 800594a:	2140      	movs	r1, #64	; 0x40
 800594c:	483d      	ldr	r0, [pc, #244]	; (8005a44 <i2cTest+0x158>)
 800594e:	f003 fd07 	bl	8009360 <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b01      	cmp	r3, #1
 8005956:	d006      	beq.n	8005966 <i2cTest+0x7a>
 8005958:	2180      	movs	r1, #128	; 0x80
 800595a:	483a      	ldr	r0, [pc, #232]	; (8005a44 <i2cTest+0x158>)
 800595c:	f003 fd00 	bl	8009360 <HAL_GPIO_ReadPin>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d1f1      	bne.n	800594a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005966:	2200      	movs	r2, #0
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	4836      	ldr	r0, [pc, #216]	; (8005a44 <i2cTest+0x158>)
 800596c:	f003 fd0f 	bl	800938e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005970:	200a      	movs	r0, #10
 8005972:	f002 ff25 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8005976:	bf00      	nop
 8005978:	2180      	movs	r1, #128	; 0x80
 800597a:	4832      	ldr	r0, [pc, #200]	; (8005a44 <i2cTest+0x158>)
 800597c:	f003 fcf0 	bl	8009360 <HAL_GPIO_ReadPin>
 8005980:	4603      	mov	r3, r0
 8005982:	2b01      	cmp	r3, #1
 8005984:	d0f8      	beq.n	8005978 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005986:	2200      	movs	r2, #0
 8005988:	2140      	movs	r1, #64	; 0x40
 800598a:	482e      	ldr	r0, [pc, #184]	; (8005a44 <i2cTest+0x158>)
 800598c:	f003 fcff 	bl	800938e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005990:	200a      	movs	r0, #10
 8005992:	f002 ff15 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8005996:	bf00      	nop
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	482a      	ldr	r0, [pc, #168]	; (8005a44 <i2cTest+0x158>)
 800599c:	f003 fce0 	bl	8009360 <HAL_GPIO_ReadPin>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d0f8      	beq.n	8005998 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80059a6:	2201      	movs	r2, #1
 80059a8:	2140      	movs	r1, #64	; 0x40
 80059aa:	4826      	ldr	r0, [pc, #152]	; (8005a44 <i2cTest+0x158>)
 80059ac:	f003 fcef 	bl	800938e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80059b0:	200a      	movs	r0, #10
 80059b2:	f002 ff05 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80059b6:	bf00      	nop
 80059b8:	2140      	movs	r1, #64	; 0x40
 80059ba:	4822      	ldr	r0, [pc, #136]	; (8005a44 <i2cTest+0x158>)
 80059bc:	f003 fcd0 	bl	8009360 <HAL_GPIO_ReadPin>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d1f8      	bne.n	80059b8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80059c6:	2201      	movs	r2, #1
 80059c8:	2180      	movs	r1, #128	; 0x80
 80059ca:	481e      	ldr	r0, [pc, #120]	; (8005a44 <i2cTest+0x158>)
 80059cc:	f003 fcdf 	bl	800938e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80059d0:	200a      	movs	r0, #10
 80059d2:	f002 fef5 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80059d6:	bf00      	nop
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	481a      	ldr	r0, [pc, #104]	; (8005a44 <i2cTest+0x158>)
 80059dc:	f003 fcc0 	bl	8009360 <HAL_GPIO_ReadPin>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d1f8      	bne.n	80059d8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059e6:	23c0      	movs	r3, #192	; 0xc0
 80059e8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80059ea:	2312      	movs	r3, #18
 80059ec:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80059ee:	2301      	movs	r3, #1
 80059f0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80059f2:	2303      	movs	r3, #3
 80059f4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80059f6:	463b      	mov	r3, r7
 80059f8:	4619      	mov	r1, r3
 80059fa:	4812      	ldr	r0, [pc, #72]	; (8005a44 <i2cTest+0x158>)
 80059fc:	f003 fa50 	bl	8008ea0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <i2cTest+0x154>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <i2cTest+0x154>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a0e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <i2cTest+0x154>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <i2cTest+0x154>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a1e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <i2cTest+0x154>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <i2cTest+0x154>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8005a30:	4803      	ldr	r0, [pc, #12]	; (8005a40 <i2cTest+0x154>)
 8005a32:	f003 fcdd 	bl	80093f0 <HAL_I2C_Init>
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000039c 	.word	0x2000039c
 8005a44:	40010c00 	.word	0x40010c00

08005a48 <checkLCDBacklight>:

void checkLCDBacklight() {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <checkLCDBacklight+0x34>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <checkLCDBacklight+0x38>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	1ad2      	subs	r2, r2, r3
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <checkLCDBacklight+0x3c>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d303      	bcc.n	8005a70 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f7fa fef1 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8005a6e:	e002      	b.n	8005a76 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8005a70:	2001      	movs	r0, #1
 8005a72:	f7fa feed 	bl	8000850 <lcd_backlight>
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000290 	.word	0x20000290
 8005a80:	200002ac 	.word	0x200002ac
 8005a84:	200000a0 	.word	0x200000a0

08005a88 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005a8c:	4b13      	ldr	r3, [pc, #76]	; (8005adc <checkBasincSalteri+0x54>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <checkBasincSalteri+0x12>
		basincVar=1;
 8005a94:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <checkBasincSalteri+0x58>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <checkBasincSalteri+0x54>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d119      	bne.n	8005ad6 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8005aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005aa6:	480f      	ldr	r0, [pc, #60]	; (8005ae4 <checkBasincSalteri+0x5c>)
 8005aa8:	f003 fc5a 	bl	8009360 <HAL_GPIO_ReadPin>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <checkBasincSalteri+0x60>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <checkBasincSalteri+0x64>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d90a      	bls.n	8005ad6 <checkBasincSalteri+0x4e>
				basincVar=1;
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <checkBasincSalteri+0x58>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8005ac6:	e006      	b.n	8005ad6 <checkBasincSalteri+0x4e>
			timer5=millis;
 8005ac8:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <checkBasincSalteri+0x60>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a07      	ldr	r2, [pc, #28]	; (8005aec <checkBasincSalteri+0x64>)
 8005ace:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8005ad0:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <checkBasincSalteri+0x58>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000317 	.word	0x20000317
 8005ae0:	20000313 	.word	0x20000313
 8005ae4:	40011000 	.word	0x40011000
 8005ae8:	20000290 	.word	0x20000290
 8005aec:	200002a8 	.word	0x200002a8

08005af0 <checkBasGonder>:

void checkBasGonder() {
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005af4:	4b1b      	ldr	r3, [pc, #108]	; (8005b64 <checkBasGonder+0x74>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d10b      	bne.n	8005b14 <checkBasGonder+0x24>
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <checkBasGonder+0x78>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <checkBasGonder+0x24>
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <checkBasGonder+0x7c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8005b0c:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <checkBasGonder+0x80>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	e009      	b.n	8005b28 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005b14:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <checkBasGonder+0x78>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f083 0301 	eor.w	r3, r3, #1
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8005b22:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <checkBasGonder+0x80>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005b28:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <checkBasGonder+0x74>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10b      	bne.n	8005b48 <checkBasGonder+0x58>
 8005b30:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <checkBasGonder+0x84>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <checkBasGonder+0x58>
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <checkBasGonder+0x7c>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8005b40:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <checkBasGonder+0x88>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8005b46:	e009      	b.n	8005b5c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <checkBasGonder+0x84>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f083 0301 	eor.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <checkBasGonder+0x88>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr
 8005b64:	20000311 	.word	0x20000311
 8005b68:	20000345 	.word	0x20000345
 8005b6c:	2000031f 	.word	0x2000031f
 8005b70:	2000034c 	.word	0x2000034c
 8005b74:	20000348 	.word	0x20000348
 8005b78:	2000034d 	.word	0x2000034d

08005b7c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <checkKapiSecimleri+0x98>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8005b88:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <checkKapiSecimleri+0x9c>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8005b8e:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <checkKapiSecimleri+0x98>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d10e      	bne.n	8005bb4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b9a:	4820      	ldr	r0, [pc, #128]	; (8005c1c <checkKapiSecimleri+0xa0>)
 8005b9c:	f003 fbe0 	bl	8009360 <HAL_GPIO_ReadPin>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <checkKapiSecimleri+0x9c>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	e002      	b.n	8005bb4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8005bae:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <checkKapiSecimleri+0x9c>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8005bb4:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <checkKapiSecimleri+0x98>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d10e      	bne.n	8005bda <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8005bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bc0:	4816      	ldr	r0, [pc, #88]	; (8005c1c <checkKapiSecimleri+0xa0>)
 8005bc2:	f003 fbcd 	bl	8009360 <HAL_GPIO_ReadPin>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <checkKapiSecimleri+0x9c>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	e002      	b.n	8005bda <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8005bd4:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <checkKapiSecimleri+0x9c>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <checkKapiSecimleri+0x98>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d116      	bne.n	8005c10 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8005be2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005be6:	480d      	ldr	r0, [pc, #52]	; (8005c1c <checkKapiSecimleri+0xa0>)
 8005be8:	f003 fbba 	bl	8009360 <HAL_GPIO_ReadPin>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10b      	bne.n	8005c0a <checkKapiSecimleri+0x8e>
 8005bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bf6:	4809      	ldr	r0, [pc, #36]	; (8005c1c <checkKapiSecimleri+0xa0>)
 8005bf8:	f003 fbb2 	bl	8009360 <HAL_GPIO_ReadPin>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <checkKapiSecimleri+0x9c>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8005c08:	e002      	b.n	8005c10 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8005c0a:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <checkKapiSecimleri+0x9c>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000318 	.word	0x20000318
 8005c18:	20000363 	.word	0x20000363
 8005c1c:	40010800 	.word	0x40010800

08005c20 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005c24:	4b62      	ldr	r3, [pc, #392]	; (8005db0 <checkAktifCalisma+0x190>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f041 833e 	bne.w	80072aa <checkAktifCalisma+0x168a>
 8005c2e:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <checkAktifCalisma+0x194>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f041 8339 	bne.w	80072aa <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005c38:	4b5f      	ldr	r3, [pc, #380]	; (8005db8 <checkAktifCalisma+0x198>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d11a      	bne.n	8005c76 <checkAktifCalisma+0x56>
 8005c40:	4b5e      	ldr	r3, [pc, #376]	; (8005dbc <checkAktifCalisma+0x19c>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d116      	bne.n	8005c76 <checkAktifCalisma+0x56>
 8005c48:	4b5d      	ldr	r3, [pc, #372]	; (8005dc0 <checkAktifCalisma+0x1a0>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <checkAktifCalisma+0x46>
 8005c50:	4b5c      	ldr	r3, [pc, #368]	; (8005dc4 <checkAktifCalisma+0x1a4>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f083 0301 	eor.w	r3, r3, #1
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <checkAktifCalisma+0x46>
 8005c5e:	4b5a      	ldr	r3, [pc, #360]	; (8005dc8 <checkAktifCalisma+0x1a8>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d007      	beq.n	8005c76 <checkAktifCalisma+0x56>
 8005c66:	4b59      	ldr	r3, [pc, #356]	; (8005dcc <checkAktifCalisma+0x1ac>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d018      	beq.n	8005ca0 <checkAktifCalisma+0x80>
 8005c6e:	4b58      	ldr	r3, [pc, #352]	; (8005dd0 <checkAktifCalisma+0x1b0>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d114      	bne.n	8005ca0 <checkAktifCalisma+0x80>
 8005c76:	4b57      	ldr	r3, [pc, #348]	; (8005dd4 <checkAktifCalisma+0x1b4>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d010      	beq.n	8005ca0 <checkAktifCalisma+0x80>
 8005c7e:	4b56      	ldr	r3, [pc, #344]	; (8005dd8 <checkAktifCalisma+0x1b8>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005c86:	2201      	movs	r2, #1
 8005c88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c8c:	4853      	ldr	r0, [pc, #332]	; (8005ddc <checkAktifCalisma+0x1bc>)
 8005c8e:	f003 fb7e 	bl	800938e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8005c92:	4b53      	ldr	r3, [pc, #332]	; (8005de0 <checkAktifCalisma+0x1c0>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8005c98:	4b52      	ldr	r3, [pc, #328]	; (8005de4 <checkAktifCalisma+0x1c4>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	e008      	b.n	8005cb2 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ca6:	484d      	ldr	r0, [pc, #308]	; (8005ddc <checkAktifCalisma+0x1bc>)
 8005ca8:	f003 fb71 	bl	800938e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8005cac:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <checkAktifCalisma+0x1c0>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8005cb2:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <checkAktifCalisma+0x194>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d160      	bne.n	8005d7c <checkAktifCalisma+0x15c>
 8005cba:	4b46      	ldr	r3, [pc, #280]	; (8005dd4 <checkAktifCalisma+0x1b4>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d05c      	beq.n	8005d7c <checkAktifCalisma+0x15c>
 8005cc2:	4b45      	ldr	r3, [pc, #276]	; (8005dd8 <checkAktifCalisma+0x1b8>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d058      	beq.n	8005d7c <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cce:	4843      	ldr	r0, [pc, #268]	; (8005ddc <checkAktifCalisma+0x1bc>)
 8005cd0:	f003 fb46 	bl	8009360 <HAL_GPIO_ReadPin>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <checkAktifCalisma+0xc2>
 8005cda:	4b43      	ldr	r3, [pc, #268]	; (8005de8 <checkAktifCalisma+0x1c8>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d04c      	beq.n	8005d7c <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	4841      	ldr	r0, [pc, #260]	; (8005dec <checkAktifCalisma+0x1cc>)
 8005ce6:	f003 fb3b 	bl	8009360 <HAL_GPIO_ReadPin>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d145      	bne.n	8005d7c <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005cf0:	4b3f      	ldr	r3, [pc, #252]	; (8005df0 <checkAktifCalisma+0x1d0>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d041      	beq.n	8005d7c <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cfc:	4837      	ldr	r0, [pc, #220]	; (8005ddc <checkAktifCalisma+0x1bc>)
 8005cfe:	f003 fb2f 	bl	8009360 <HAL_GPIO_ReadPin>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d10e      	bne.n	8005d26 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d0c:	4833      	ldr	r0, [pc, #204]	; (8005ddc <checkAktifCalisma+0x1bc>)
 8005d0e:	f003 fb27 	bl	8009360 <HAL_GPIO_ReadPin>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d106      	bne.n	8005d26 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005d18:	2140      	movs	r1, #64	; 0x40
 8005d1a:	4834      	ldr	r0, [pc, #208]	; (8005dec <checkAktifCalisma+0x1cc>)
 8005d1c:	f003 fb20 	bl	8009360 <HAL_GPIO_ReadPin>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d003      	beq.n	8005d2e <checkAktifCalisma+0x10e>
 8005d26:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <checkAktifCalisma+0x198>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d026      	beq.n	8005d7c <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005d2e:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <checkAktifCalisma+0x1a0>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f083 0301 	eor.w	r3, r3, #1
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01f      	beq.n	8005d7c <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <checkAktifCalisma+0x19c>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f083 0301 	eor.w	r3, r3, #1
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8005d4a:	4b20      	ldr	r3, [pc, #128]	; (8005dcc <checkAktifCalisma+0x1ac>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f083 0301 	eor.w	r3, r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d011      	beq.n	8005d7c <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005d58:	4b26      	ldr	r3, [pc, #152]	; (8005df4 <checkAktifCalisma+0x1d4>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f083 0301 	eor.w	r3, r3, #1
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8005d66:	4b24      	ldr	r3, [pc, #144]	; (8005df8 <checkAktifCalisma+0x1d8>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f083 0301 	eor.w	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005d74:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <checkAktifCalisma+0x198>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e002      	b.n	8005d82 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <checkAktifCalisma+0x198>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005d82:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <checkAktifCalisma+0x198>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03a      	beq.n	8005e00 <checkAktifCalisma+0x1e0>
 8005d8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d8e:	4817      	ldr	r0, [pc, #92]	; (8005dec <checkAktifCalisma+0x1cc>)
 8005d90:	f003 fae6 	bl	8009360 <HAL_GPIO_ReadPin>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d132      	bne.n	8005e00 <checkAktifCalisma+0x1e0>
 8005d9a:	4b18      	ldr	r3, [pc, #96]	; (8005dfc <checkAktifCalisma+0x1dc>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02e      	beq.n	8005e00 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005da2:	2201      	movs	r2, #1
 8005da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005da8:	480c      	ldr	r0, [pc, #48]	; (8005ddc <checkAktifCalisma+0x1bc>)
 8005daa:	f003 faf0 	bl	800938e <HAL_GPIO_WritePin>
 8005dae:	e02d      	b.n	8005e0c <checkAktifCalisma+0x1ec>
 8005db0:	2000032e 	.word	0x2000032e
 8005db4:	2000032d 	.word	0x2000032d
 8005db8:	20000345 	.word	0x20000345
 8005dbc:	20000346 	.word	0x20000346
 8005dc0:	20000348 	.word	0x20000348
 8005dc4:	20000340 	.word	0x20000340
 8005dc8:	20000323 	.word	0x20000323
 8005dcc:	20000347 	.word	0x20000347
 8005dd0:	20000322 	.word	0x20000322
 8005dd4:	20000362 	.word	0x20000362
 8005dd8:	20000363 	.word	0x20000363
 8005ddc:	40010c00 	.word	0x40010c00
 8005de0:	20000364 	.word	0x20000364
 8005de4:	2000034f 	.word	0x2000034f
 8005de8:	2000034c 	.word	0x2000034c
 8005dec:	40011000 	.word	0x40011000
 8005df0:	20000313 	.word	0x20000313
 8005df4:	2000034a 	.word	0x2000034a
 8005df8:	2000034b 	.word	0x2000034b
 8005dfc:	2000031e 	.word	0x2000031e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005e00:	2200      	movs	r2, #0
 8005e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e06:	4860      	ldr	r0, [pc, #384]	; (8005f88 <checkAktifCalisma+0x368>)
 8005e08:	f003 fac1 	bl	800938e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005e0c:	4b5f      	ldr	r3, [pc, #380]	; (8005f8c <checkAktifCalisma+0x36c>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <checkAktifCalisma+0x21c>
 8005e14:	4b5e      	ldr	r3, [pc, #376]	; (8005f90 <checkAktifCalisma+0x370>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d007      	beq.n	8005e2c <checkAktifCalisma+0x20c>
 8005e1c:	4b5c      	ldr	r3, [pc, #368]	; (8005f90 <checkAktifCalisma+0x370>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d003      	beq.n	8005e2c <checkAktifCalisma+0x20c>
 8005e24:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <checkAktifCalisma+0x374>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d107      	bne.n	8005e3c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	2104      	movs	r1, #4
 8005e30:	4855      	ldr	r0, [pc, #340]	; (8005f88 <checkAktifCalisma+0x368>)
 8005e32:	f003 faac 	bl	800938e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005e36:	4b58      	ldr	r3, [pc, #352]	; (8005f98 <checkAktifCalisma+0x378>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005e3c:	4b56      	ldr	r3, [pc, #344]	; (8005f98 <checkAktifCalisma+0x378>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02f      	beq.n	8005ea4 <checkAktifCalisma+0x284>
 8005e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e48:	484f      	ldr	r0, [pc, #316]	; (8005f88 <checkAktifCalisma+0x368>)
 8005e4a:	f003 fa89 	bl	8009360 <HAL_GPIO_ReadPin>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d106      	bne.n	8005e62 <checkAktifCalisma+0x242>
 8005e54:	4b51      	ldr	r3, [pc, #324]	; (8005f9c <checkAktifCalisma+0x37c>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f083 0301 	eor.w	r3, r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <checkAktifCalisma+0x250>
 8005e62:	2102      	movs	r1, #2
 8005e64:	484e      	ldr	r0, [pc, #312]	; (8005fa0 <checkAktifCalisma+0x380>)
 8005e66:	f003 fa7b 	bl	8009360 <HAL_GPIO_ReadPin>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d119      	bne.n	8005ea4 <checkAktifCalisma+0x284>
 8005e70:	4b4c      	ldr	r3, [pc, #304]	; (8005fa4 <checkAktifCalisma+0x384>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d015      	beq.n	8005ea4 <checkAktifCalisma+0x284>
 8005e78:	4b4b      	ldr	r3, [pc, #300]	; (8005fa8 <checkAktifCalisma+0x388>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d011      	beq.n	8005ea4 <checkAktifCalisma+0x284>
 8005e80:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <checkAktifCalisma+0x38c>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <checkAktifCalisma+0x284>
 8005e88:	4b49      	ldr	r3, [pc, #292]	; (8005fb0 <checkAktifCalisma+0x390>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f083 0301 	eor.w	r3, r3, #1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <checkAktifCalisma+0x284>
			timer2=millis;
 8005e96:	4b47      	ldr	r3, [pc, #284]	; (8005fb4 <checkAktifCalisma+0x394>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a47      	ldr	r2, [pc, #284]	; (8005fb8 <checkAktifCalisma+0x398>)
 8005e9c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005e9e:	4b44      	ldr	r3, [pc, #272]	; (8005fb0 <checkAktifCalisma+0x390>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005ea4:	4b43      	ldr	r3, [pc, #268]	; (8005fb4 <checkAktifCalisma+0x394>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b43      	ldr	r3, [pc, #268]	; (8005fb8 <checkAktifCalisma+0x398>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	4a43      	ldr	r2, [pc, #268]	; (8005fbc <checkAktifCalisma+0x39c>)
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d303      	bcc.n	8005ebe <checkAktifCalisma+0x29e>
 8005eb6:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <checkAktifCalisma+0x390>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d111      	bne.n	8005ee2 <checkAktifCalisma+0x2c2>
 8005ebe:	4b39      	ldr	r3, [pc, #228]	; (8005fa4 <checkAktifCalisma+0x384>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f083 0301 	eor.w	r3, r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <checkAktifCalisma+0x2c2>
 8005ecc:	4b36      	ldr	r3, [pc, #216]	; (8005fa8 <checkAktifCalisma+0x388>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f083 0301 	eor.w	r3, r3, #1
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <checkAktifCalisma+0x2c2>
 8005eda:	4b34      	ldr	r3, [pc, #208]	; (8005fac <checkAktifCalisma+0x38c>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2104      	movs	r1, #4
 8005ee6:	4828      	ldr	r0, [pc, #160]	; (8005f88 <checkAktifCalisma+0x368>)
 8005ee8:	f003 fa51 	bl	800938e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005eec:	4b2a      	ldr	r3, [pc, #168]	; (8005f98 <checkAktifCalisma+0x378>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005ef2:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <checkAktifCalisma+0x390>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005ef8:	4b31      	ldr	r3, [pc, #196]	; (8005fc0 <checkAktifCalisma+0x3a0>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005f00:	4b30      	ldr	r3, [pc, #192]	; (8005fc4 <checkAktifCalisma+0x3a4>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005f06:	4b2e      	ldr	r3, [pc, #184]	; (8005fc0 <checkAktifCalisma+0x3a0>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d116      	bne.n	8005f3c <checkAktifCalisma+0x31c>
 8005f0e:	4b2e      	ldr	r3, [pc, #184]	; (8005fc8 <checkAktifCalisma+0x3a8>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d112      	bne.n	8005f3c <checkAktifCalisma+0x31c>
 8005f16:	2101      	movs	r1, #1
 8005f18:	4821      	ldr	r0, [pc, #132]	; (8005fa0 <checkAktifCalisma+0x380>)
 8005f1a:	f003 fa21 	bl	8009360 <HAL_GPIO_ReadPin>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <checkAktifCalisma+0x31c>
 8005f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f28:	4817      	ldr	r0, [pc, #92]	; (8005f88 <checkAktifCalisma+0x368>)
 8005f2a:	f003 fa19 	bl	8009360 <HAL_GPIO_ReadPin>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005f34:	4b23      	ldr	r3, [pc, #140]	; (8005fc4 <checkAktifCalisma+0x3a4>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e011      	b.n	8005f60 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005f3c:	4b20      	ldr	r3, [pc, #128]	; (8005fc0 <checkAktifCalisma+0x3a0>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d10d      	bne.n	8005f60 <checkAktifCalisma+0x340>
 8005f44:	2101      	movs	r1, #1
 8005f46:	4816      	ldr	r0, [pc, #88]	; (8005fa0 <checkAktifCalisma+0x380>)
 8005f48:	f003 fa0a 	bl	8009360 <HAL_GPIO_ReadPin>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d106      	bne.n	8005f60 <checkAktifCalisma+0x340>
 8005f52:	4b1d      	ldr	r3, [pc, #116]	; (8005fc8 <checkAktifCalisma+0x3a8>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <checkAktifCalisma+0x3a4>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <checkAktifCalisma+0x3a0>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d134      	bne.n	8005fd2 <checkAktifCalisma+0x3b2>
 8005f68:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <checkAktifCalisma+0x3a8>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d130      	bne.n	8005fd2 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005f70:	2101      	movs	r1, #1
 8005f72:	480b      	ldr	r0, [pc, #44]	; (8005fa0 <checkAktifCalisma+0x380>)
 8005f74:	f003 f9f4 	bl	8009360 <HAL_GPIO_ReadPin>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d126      	bne.n	8005fcc <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <checkAktifCalisma+0x3a4>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e025      	b.n	8005fd2 <checkAktifCalisma+0x3b2>
 8005f86:	bf00      	nop
 8005f88:	40010c00 	.word	0x40010c00
 8005f8c:	20000345 	.word	0x20000345
 8005f90:	2000031f 	.word	0x2000031f
 8005f94:	20000323 	.word	0x20000323
 8005f98:	20000349 	.word	0x20000349
 8005f9c:	2000034c 	.word	0x2000034c
 8005fa0:	40011000 	.word	0x40011000
 8005fa4:	20000362 	.word	0x20000362
 8005fa8:	20000363 	.word	0x20000363
 8005fac:	20000313 	.word	0x20000313
 8005fb0:	20000341 	.word	0x20000341
 8005fb4:	20000290 	.word	0x20000290
 8005fb8:	2000029c 	.word	0x2000029c
 8005fbc:	20000324 	.word	0x20000324
 8005fc0:	20000314 	.word	0x20000314
 8005fc4:	20000367 	.word	0x20000367
 8005fc8:	20000311 	.word	0x20000311
			} else {
				cerceveVar=0;
 8005fcc:	4b7f      	ldr	r3, [pc, #508]	; (80061cc <checkAktifCalisma+0x5ac>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005fd2:	4b7f      	ldr	r3, [pc, #508]	; (80061d0 <checkAktifCalisma+0x5b0>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d17c      	bne.n	80060d4 <checkAktifCalisma+0x4b4>
 8005fda:	4b7e      	ldr	r3, [pc, #504]	; (80061d4 <checkAktifCalisma+0x5b4>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d078      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
 8005fe2:	4b7d      	ldr	r3, [pc, #500]	; (80061d8 <checkAktifCalisma+0x5b8>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d074      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fee:	487b      	ldr	r0, [pc, #492]	; (80061dc <checkAktifCalisma+0x5bc>)
 8005ff0:	f003 f9b6 	bl	8009360 <HAL_GPIO_ReadPin>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <checkAktifCalisma+0x3e2>
 8005ffa:	4b79      	ldr	r3, [pc, #484]	; (80061e0 <checkAktifCalisma+0x5c0>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d068      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006002:	4b72      	ldr	r3, [pc, #456]	; (80061cc <checkAktifCalisma+0x5ac>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d064      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
 800600a:	4b76      	ldr	r3, [pc, #472]	; (80061e4 <checkAktifCalisma+0x5c4>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	f083 0301 	eor.w	r3, r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d05d      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006018:	2104      	movs	r1, #4
 800601a:	4873      	ldr	r0, [pc, #460]	; (80061e8 <checkAktifCalisma+0x5c8>)
 800601c:	f003 f9a0 	bl	8009360 <HAL_GPIO_ReadPin>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <checkAktifCalisma+0x40e>
 8006026:	4b71      	ldr	r3, [pc, #452]	; (80061ec <checkAktifCalisma+0x5cc>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d152      	bne.n	80060d4 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800602e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006032:	486a      	ldr	r0, [pc, #424]	; (80061dc <checkAktifCalisma+0x5bc>)
 8006034:	f003 f994 	bl	8009360 <HAL_GPIO_ReadPin>
 8006038:	4603      	mov	r3, r0
 800603a:	2b01      	cmp	r3, #1
 800603c:	d10e      	bne.n	800605c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800603e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006042:	4866      	ldr	r0, [pc, #408]	; (80061dc <checkAktifCalisma+0x5bc>)
 8006044:	f003 f98c 	bl	8009360 <HAL_GPIO_ReadPin>
 8006048:	4603      	mov	r3, r0
 800604a:	2b01      	cmp	r3, #1
 800604c:	d106      	bne.n	800605c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800604e:	2140      	movs	r1, #64	; 0x40
 8006050:	4865      	ldr	r0, [pc, #404]	; (80061e8 <checkAktifCalisma+0x5c8>)
 8006052:	f003 f985 	bl	8009360 <HAL_GPIO_ReadPin>
 8006056:	4603      	mov	r3, r0
 8006058:	2b01      	cmp	r3, #1
 800605a:	d003      	beq.n	8006064 <checkAktifCalisma+0x444>
 800605c:	4b64      	ldr	r3, [pc, #400]	; (80061f0 <checkAktifCalisma+0x5d0>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d037      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006064:	4b63      	ldr	r3, [pc, #396]	; (80061f4 <checkAktifCalisma+0x5d4>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f083 0301 	eor.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d030      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006072:	4b61      	ldr	r3, [pc, #388]	; (80061f8 <checkAktifCalisma+0x5d8>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f083 0301 	eor.w	r3, r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d029      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006080:	4b5e      	ldr	r3, [pc, #376]	; (80061fc <checkAktifCalisma+0x5dc>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f083 0301 	eor.w	r3, r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d022      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800608e:	4b5c      	ldr	r3, [pc, #368]	; (8006200 <checkAktifCalisma+0x5e0>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f083 0301 	eor.w	r3, r3, #1
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01b      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800609c:	4b59      	ldr	r3, [pc, #356]	; (8006204 <checkAktifCalisma+0x5e4>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f083 0301 	eor.w	r3, r3, #1
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80060aa:	4b57      	ldr	r3, [pc, #348]	; (8006208 <checkAktifCalisma+0x5e8>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00d      	beq.n	80060d4 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80060b8:	2201      	movs	r2, #1
 80060ba:	2102      	movs	r1, #2
 80060bc:	4847      	ldr	r0, [pc, #284]	; (80061dc <checkAktifCalisma+0x5bc>)
 80060be:	f003 f966 	bl	800938e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80060c2:	4b4b      	ldr	r3, [pc, #300]	; (80061f0 <checkAktifCalisma+0x5d0>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80060c8:	4b50      	ldr	r3, [pc, #320]	; (800620c <checkAktifCalisma+0x5ec>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80060ce:	4b50      	ldr	r3, [pc, #320]	; (8006210 <checkAktifCalisma+0x5f0>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80060d4:	4b46      	ldr	r3, [pc, #280]	; (80061f0 <checkAktifCalisma+0x5d0>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d033      	beq.n	8006144 <checkAktifCalisma+0x524>
 80060dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060e0:	483e      	ldr	r0, [pc, #248]	; (80061dc <checkAktifCalisma+0x5bc>)
 80060e2:	f003 f93d 	bl	8009360 <HAL_GPIO_ReadPin>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d106      	bne.n	80060fa <checkAktifCalisma+0x4da>
 80060ec:	4b3c      	ldr	r3, [pc, #240]	; (80061e0 <checkAktifCalisma+0x5c0>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f083 0301 	eor.w	r3, r3, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <checkAktifCalisma+0x4f0>
 80060fa:	2104      	movs	r1, #4
 80060fc:	483a      	ldr	r0, [pc, #232]	; (80061e8 <checkAktifCalisma+0x5c8>)
 80060fe:	f003 f92f 	bl	8009360 <HAL_GPIO_ReadPin>
 8006102:	4603      	mov	r3, r0
 8006104:	2b01      	cmp	r3, #1
 8006106:	d11d      	bne.n	8006144 <checkAktifCalisma+0x524>
 8006108:	4b38      	ldr	r3, [pc, #224]	; (80061ec <checkAktifCalisma+0x5cc>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d019      	beq.n	8006144 <checkAktifCalisma+0x524>
 8006110:	4b30      	ldr	r3, [pc, #192]	; (80061d4 <checkAktifCalisma+0x5b4>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d015      	beq.n	8006144 <checkAktifCalisma+0x524>
 8006118:	4b2f      	ldr	r3, [pc, #188]	; (80061d8 <checkAktifCalisma+0x5b8>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d011      	beq.n	8006144 <checkAktifCalisma+0x524>
 8006120:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <checkAktifCalisma+0x5ac>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00d      	beq.n	8006144 <checkAktifCalisma+0x524>
 8006128:	4b3a      	ldr	r3, [pc, #232]	; (8006214 <checkAktifCalisma+0x5f4>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f083 0301 	eor.w	r3, r3, #1
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d006      	beq.n	8006144 <checkAktifCalisma+0x524>
			timer2=millis;
 8006136:	4b38      	ldr	r3, [pc, #224]	; (8006218 <checkAktifCalisma+0x5f8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a38      	ldr	r2, [pc, #224]	; (800621c <checkAktifCalisma+0x5fc>)
 800613c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800613e:	4b35      	ldr	r3, [pc, #212]	; (8006214 <checkAktifCalisma+0x5f4>)
 8006140:	2201      	movs	r2, #1
 8006142:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006144:	4b34      	ldr	r3, [pc, #208]	; (8006218 <checkAktifCalisma+0x5f8>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b34      	ldr	r3, [pc, #208]	; (800621c <checkAktifCalisma+0x5fc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	4a34      	ldr	r2, [pc, #208]	; (8006220 <checkAktifCalisma+0x600>)
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	4293      	cmp	r3, r2
 8006154:	d303      	bcc.n	800615e <checkAktifCalisma+0x53e>
 8006156:	4b2f      	ldr	r3, [pc, #188]	; (8006214 <checkAktifCalisma+0x5f4>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d114      	bne.n	8006188 <checkAktifCalisma+0x568>
 800615e:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <checkAktifCalisma+0x5b4>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f083 0301 	eor.w	r3, r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10d      	bne.n	8006188 <checkAktifCalisma+0x568>
 800616c:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <checkAktifCalisma+0x5b8>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f083 0301 	eor.w	r3, r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <checkAktifCalisma+0x568>
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <checkAktifCalisma+0x5ac>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f083 0301 	eor.w	r3, r3, #1
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006188:	2200      	movs	r2, #0
 800618a:	2102      	movs	r1, #2
 800618c:	4813      	ldr	r0, [pc, #76]	; (80061dc <checkAktifCalisma+0x5bc>)
 800618e:	f003 f8fe 	bl	800938e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006192:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <checkAktifCalisma+0x5d0>)
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <checkAktifCalisma+0x5f4>)
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800619e:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <checkAktifCalisma+0x5d0>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d040      	beq.n	8006228 <checkAktifCalisma+0x608>
 80061a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061aa:	480f      	ldr	r0, [pc, #60]	; (80061e8 <checkAktifCalisma+0x5c8>)
 80061ac:	f003 f8d8 	bl	8009360 <HAL_GPIO_ReadPin>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d138      	bne.n	8006228 <checkAktifCalisma+0x608>
 80061b6:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <checkAktifCalisma+0x604>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d034      	beq.n	8006228 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80061be:	2201      	movs	r2, #1
 80061c0:	2101      	movs	r1, #1
 80061c2:	4806      	ldr	r0, [pc, #24]	; (80061dc <checkAktifCalisma+0x5bc>)
 80061c4:	f003 f8e3 	bl	800938e <HAL_GPIO_WritePin>
 80061c8:	e033      	b.n	8006232 <checkAktifCalisma+0x612>
 80061ca:	bf00      	nop
 80061cc:	20000367 	.word	0x20000367
 80061d0:	2000032d 	.word	0x2000032d
 80061d4:	20000362 	.word	0x20000362
 80061d8:	20000363 	.word	0x20000363
 80061dc:	40010c00 	.word	0x40010c00
 80061e0:	2000034d 	.word	0x2000034d
 80061e4:	20000361 	.word	0x20000361
 80061e8:	40011000 	.word	0x40011000
 80061ec:	20000316 	.word	0x20000316
 80061f0:	20000348 	.word	0x20000348
 80061f4:	20000345 	.word	0x20000345
 80061f8:	20000349 	.word	0x20000349
 80061fc:	20000346 	.word	0x20000346
 8006200:	20000347 	.word	0x20000347
 8006204:	2000034a 	.word	0x2000034a
 8006208:	2000034b 	.word	0x2000034b
 800620c:	20000350 	.word	0x20000350
 8006210:	20000371 	.word	0x20000371
 8006214:	20000340 	.word	0x20000340
 8006218:	20000290 	.word	0x20000290
 800621c:	2000029c 	.word	0x2000029c
 8006220:	20000325 	.word	0x20000325
 8006224:	20000315 	.word	0x20000315
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006228:	2200      	movs	r2, #0
 800622a:	2101      	movs	r1, #1
 800622c:	4836      	ldr	r0, [pc, #216]	; (8006308 <checkAktifCalisma+0x6e8>)
 800622e:	f003 f8ae 	bl	800938e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006232:	4b36      	ldr	r3, [pc, #216]	; (800630c <checkAktifCalisma+0x6ec>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 8080 	bne.w	800633c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800623c:	4b34      	ldr	r3, [pc, #208]	; (8006310 <checkAktifCalisma+0x6f0>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d003      	beq.n	800624c <checkAktifCalisma+0x62c>
 8006244:	4b32      	ldr	r3, [pc, #200]	; (8006310 <checkAktifCalisma+0x6f0>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d177      	bne.n	800633c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 800624c:	4b31      	ldr	r3, [pc, #196]	; (8006314 <checkAktifCalisma+0x6f4>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d073      	beq.n	800633c <checkAktifCalisma+0x71c>
 8006254:	4b30      	ldr	r3, [pc, #192]	; (8006318 <checkAktifCalisma+0x6f8>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d06f      	beq.n	800633c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 800625c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006260:	4829      	ldr	r0, [pc, #164]	; (8006308 <checkAktifCalisma+0x6e8>)
 8006262:	f003 f87d 	bl	8009360 <HAL_GPIO_ReadPin>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d167      	bne.n	800633c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 800626c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006270:	482a      	ldr	r0, [pc, #168]	; (800631c <checkAktifCalisma+0x6fc>)
 8006272:	f003 f875 	bl	8009360 <HAL_GPIO_ReadPin>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <checkAktifCalisma+0x664>
 800627c:	4b28      	ldr	r3, [pc, #160]	; (8006320 <checkAktifCalisma+0x700>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d15b      	bne.n	800633c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006284:	2140      	movs	r1, #64	; 0x40
 8006286:	4825      	ldr	r0, [pc, #148]	; (800631c <checkAktifCalisma+0x6fc>)
 8006288:	f003 f86a 	bl	8009360 <HAL_GPIO_ReadPin>
 800628c:	4603      	mov	r3, r0
 800628e:	2b01      	cmp	r3, #1
 8006290:	d10f      	bne.n	80062b2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006296:	481c      	ldr	r0, [pc, #112]	; (8006308 <checkAktifCalisma+0x6e8>)
 8006298:	f003 f862 	bl	8009360 <HAL_GPIO_ReadPin>
 800629c:	4603      	mov	r3, r0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d107      	bne.n	80062b2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80062a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062a6:	4818      	ldr	r0, [pc, #96]	; (8006308 <checkAktifCalisma+0x6e8>)
 80062a8:	f003 f85a 	bl	8009360 <HAL_GPIO_ReadPin>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d003      	beq.n	80062ba <checkAktifCalisma+0x69a>
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <checkAktifCalisma+0x704>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d040      	beq.n	800633c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <checkAktifCalisma+0x708>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f083 0301 	eor.w	r3, r3, #1
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d039      	beq.n	800633c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80062c8:	4b18      	ldr	r3, [pc, #96]	; (800632c <checkAktifCalisma+0x70c>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f083 0301 	eor.w	r3, r3, #1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d032      	beq.n	800633c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80062d6:	4b16      	ldr	r3, [pc, #88]	; (8006330 <checkAktifCalisma+0x710>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f083 0301 	eor.w	r3, r3, #1
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d02b      	beq.n	800633c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <checkAktifCalisma+0x714>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f083 0301 	eor.w	r3, r3, #1
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d024      	beq.n	800633c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80062f2:	4b11      	ldr	r3, [pc, #68]	; (8006338 <checkAktifCalisma+0x718>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f083 0301 	eor.w	r3, r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01d      	beq.n	800633c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006300:	4b08      	ldr	r3, [pc, #32]	; (8006324 <checkAktifCalisma+0x704>)
 8006302:	2201      	movs	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e01c      	b.n	8006342 <checkAktifCalisma+0x722>
 8006308:	40010c00 	.word	0x40010c00
 800630c:	2000032d 	.word	0x2000032d
 8006310:	2000031f 	.word	0x2000031f
 8006314:	20000362 	.word	0x20000362
 8006318:	20000363 	.word	0x20000363
 800631c:	40011000 	.word	0x40011000
 8006320:	20000320 	.word	0x20000320
 8006324:	20000346 	.word	0x20000346
 8006328:	20000345 	.word	0x20000345
 800632c:	20000349 	.word	0x20000349
 8006330:	20000348 	.word	0x20000348
 8006334:	20000347 	.word	0x20000347
 8006338:	2000034b 	.word	0x2000034b
		} else {
			devmotoryukaricalisiyor=0;
 800633c:	4b64      	ldr	r3, [pc, #400]	; (80064d0 <checkAktifCalisma+0x8b0>)
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006342:	4b63      	ldr	r3, [pc, #396]	; (80064d0 <checkAktifCalisma+0x8b0>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800634a:	2201      	movs	r2, #1
 800634c:	2120      	movs	r1, #32
 800634e:	4861      	ldr	r0, [pc, #388]	; (80064d4 <checkAktifCalisma+0x8b4>)
 8006350:	f003 f81d 	bl	800938e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006354:	4b60      	ldr	r3, [pc, #384]	; (80064d8 <checkAktifCalisma+0x8b8>)
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800635a:	4b5f      	ldr	r3, [pc, #380]	; (80064d8 <checkAktifCalisma+0x8b8>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d025      	beq.n	80063ae <checkAktifCalisma+0x78e>
 8006362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006366:	485d      	ldr	r0, [pc, #372]	; (80064dc <checkAktifCalisma+0x8bc>)
 8006368:	f002 fffa 	bl	8009360 <HAL_GPIO_ReadPin>
 800636c:	4603      	mov	r3, r0
 800636e:	2b01      	cmp	r3, #1
 8006370:	d007      	beq.n	8006382 <checkAktifCalisma+0x762>
 8006372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006376:	4857      	ldr	r0, [pc, #348]	; (80064d4 <checkAktifCalisma+0x8b4>)
 8006378:	f002 fff2 	bl	8009360 <HAL_GPIO_ReadPin>
 800637c:	4603      	mov	r3, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	d115      	bne.n	80063ae <checkAktifCalisma+0x78e>
 8006382:	4b57      	ldr	r3, [pc, #348]	; (80064e0 <checkAktifCalisma+0x8c0>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d011      	beq.n	80063ae <checkAktifCalisma+0x78e>
 800638a:	4b56      	ldr	r3, [pc, #344]	; (80064e4 <checkAktifCalisma+0x8c4>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00d      	beq.n	80063ae <checkAktifCalisma+0x78e>
 8006392:	4b55      	ldr	r3, [pc, #340]	; (80064e8 <checkAktifCalisma+0x8c8>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	f083 0301 	eor.w	r3, r3, #1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d006      	beq.n	80063ae <checkAktifCalisma+0x78e>
			timer2=millis;
 80063a0:	4b52      	ldr	r3, [pc, #328]	; (80064ec <checkAktifCalisma+0x8cc>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a52      	ldr	r2, [pc, #328]	; (80064f0 <checkAktifCalisma+0x8d0>)
 80063a6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80063a8:	4b4f      	ldr	r3, [pc, #316]	; (80064e8 <checkAktifCalisma+0x8c8>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80063ae:	4b4f      	ldr	r3, [pc, #316]	; (80064ec <checkAktifCalisma+0x8cc>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b4f      	ldr	r3, [pc, #316]	; (80064f0 <checkAktifCalisma+0x8d0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	4a4e      	ldr	r2, [pc, #312]	; (80064f4 <checkAktifCalisma+0x8d4>)
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	4293      	cmp	r3, r2
 80063be:	d303      	bcc.n	80063c8 <checkAktifCalisma+0x7a8>
 80063c0:	4b49      	ldr	r3, [pc, #292]	; (80064e8 <checkAktifCalisma+0x8c8>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <checkAktifCalisma+0x7c4>
 80063c8:	4b45      	ldr	r3, [pc, #276]	; (80064e0 <checkAktifCalisma+0x8c0>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f083 0301 	eor.w	r3, r3, #1
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <checkAktifCalisma+0x7c4>
 80063d6:	4b43      	ldr	r3, [pc, #268]	; (80064e4 <checkAktifCalisma+0x8c4>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f083 0301 	eor.w	r3, r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80063e4:	2200      	movs	r2, #0
 80063e6:	2120      	movs	r1, #32
 80063e8:	483a      	ldr	r0, [pc, #232]	; (80064d4 <checkAktifCalisma+0x8b4>)
 80063ea:	f002 ffd0 	bl	800938e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80063ee:	4b3a      	ldr	r3, [pc, #232]	; (80064d8 <checkAktifCalisma+0x8b8>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80063f4:	4b3c      	ldr	r3, [pc, #240]	; (80064e8 <checkAktifCalisma+0x8c8>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80063fa:	4b3f      	ldr	r3, [pc, #252]	; (80064f8 <checkAktifCalisma+0x8d8>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 8088 	bne.w	8006514 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006404:	4b3d      	ldr	r3, [pc, #244]	; (80064fc <checkAktifCalisma+0x8dc>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d003      	beq.n	8006414 <checkAktifCalisma+0x7f4>
 800640c:	4b3b      	ldr	r3, [pc, #236]	; (80064fc <checkAktifCalisma+0x8dc>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d17f      	bne.n	8006514 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006414:	4b32      	ldr	r3, [pc, #200]	; (80064e0 <checkAktifCalisma+0x8c0>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d07b      	beq.n	8006514 <checkAktifCalisma+0x8f4>
 800641c:	4b31      	ldr	r3, [pc, #196]	; (80064e4 <checkAktifCalisma+0x8c4>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d077      	beq.n	8006514 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006424:	2140      	movs	r1, #64	; 0x40
 8006426:	482b      	ldr	r0, [pc, #172]	; (80064d4 <checkAktifCalisma+0x8b4>)
 8006428:	f002 ff9a 	bl	8009360 <HAL_GPIO_ReadPin>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d170      	bne.n	8006514 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006436:	4827      	ldr	r0, [pc, #156]	; (80064d4 <checkAktifCalisma+0x8b4>)
 8006438:	f002 ff92 	bl	8009360 <HAL_GPIO_ReadPin>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <checkAktifCalisma+0x82a>
 8006442:	4b2f      	ldr	r3, [pc, #188]	; (8006500 <checkAktifCalisma+0x8e0>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d164      	bne.n	8006514 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800644a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800644e:	4823      	ldr	r0, [pc, #140]	; (80064dc <checkAktifCalisma+0x8bc>)
 8006450:	f002 ff86 	bl	8009360 <HAL_GPIO_ReadPin>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d10f      	bne.n	800647a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800645a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800645e:	481f      	ldr	r0, [pc, #124]	; (80064dc <checkAktifCalisma+0x8bc>)
 8006460:	f002 ff7e 	bl	8009360 <HAL_GPIO_ReadPin>
 8006464:	4603      	mov	r3, r0
 8006466:	2b01      	cmp	r3, #1
 8006468:	d107      	bne.n	800647a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800646a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800646e:	481b      	ldr	r0, [pc, #108]	; (80064dc <checkAktifCalisma+0x8bc>)
 8006470:	f002 ff76 	bl	8009360 <HAL_GPIO_ReadPin>
 8006474:	4603      	mov	r3, r0
 8006476:	2b01      	cmp	r3, #1
 8006478:	d003      	beq.n	8006482 <checkAktifCalisma+0x862>
 800647a:	4b22      	ldr	r3, [pc, #136]	; (8006504 <checkAktifCalisma+0x8e4>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d048      	beq.n	8006514 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006482:	4b21      	ldr	r3, [pc, #132]	; (8006508 <checkAktifCalisma+0x8e8>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f083 0301 	eor.w	r3, r3, #1
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d041      	beq.n	8006514 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006490:	4b1e      	ldr	r3, [pc, #120]	; (800650c <checkAktifCalisma+0x8ec>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f083 0301 	eor.w	r3, r3, #1
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d03a      	beq.n	8006514 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800649e:	4b1c      	ldr	r3, [pc, #112]	; (8006510 <checkAktifCalisma+0x8f0>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f083 0301 	eor.w	r3, r3, #1
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d033      	beq.n	8006514 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80064ac:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <checkAktifCalisma+0x8b8>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f083 0301 	eor.w	r3, r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d02c      	beq.n	8006514 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <checkAktifCalisma+0x8b0>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	f083 0301 	eor.w	r3, r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d025      	beq.n	8006514 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80064c8:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <checkAktifCalisma+0x8e4>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e024      	b.n	800651a <checkAktifCalisma+0x8fa>
 80064d0:	20000346 	.word	0x20000346
 80064d4:	40011000 	.word	0x40011000
 80064d8:	2000034a 	.word	0x2000034a
 80064dc:	40010c00 	.word	0x40010c00
 80064e0:	20000362 	.word	0x20000362
 80064e4:	20000363 	.word	0x20000363
 80064e8:	20000342 	.word	0x20000342
 80064ec:	20000290 	.word	0x20000290
 80064f0:	2000029c 	.word	0x2000029c
 80064f4:	20000326 	.word	0x20000326
 80064f8:	2000032d 	.word	0x2000032d
 80064fc:	2000031f 	.word	0x2000031f
 8006500:	20000321 	.word	0x20000321
 8006504:	20000347 	.word	0x20000347
 8006508:	20000345 	.word	0x20000345
 800650c:	20000349 	.word	0x20000349
 8006510:	20000348 	.word	0x20000348
		} else {
			devmotorasagicalisiyor=0;
 8006514:	4b96      	ldr	r3, [pc, #600]	; (8006770 <checkAktifCalisma+0xb50>)
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800651a:	4b95      	ldr	r3, [pc, #596]	; (8006770 <checkAktifCalisma+0xb50>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006522:	2201      	movs	r2, #1
 8006524:	2110      	movs	r1, #16
 8006526:	4893      	ldr	r0, [pc, #588]	; (8006774 <checkAktifCalisma+0xb54>)
 8006528:	f002 ff31 	bl	800938e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 800652c:	4b92      	ldr	r3, [pc, #584]	; (8006778 <checkAktifCalisma+0xb58>)
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006532:	4b91      	ldr	r3, [pc, #580]	; (8006778 <checkAktifCalisma+0xb58>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d024      	beq.n	8006584 <checkAktifCalisma+0x964>
 800653a:	2140      	movs	r1, #64	; 0x40
 800653c:	488d      	ldr	r0, [pc, #564]	; (8006774 <checkAktifCalisma+0xb54>)
 800653e:	f002 ff0f 	bl	8009360 <HAL_GPIO_ReadPin>
 8006542:	4603      	mov	r3, r0
 8006544:	2b01      	cmp	r3, #1
 8006546:	d007      	beq.n	8006558 <checkAktifCalisma+0x938>
 8006548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800654c:	4889      	ldr	r0, [pc, #548]	; (8006774 <checkAktifCalisma+0xb54>)
 800654e:	f002 ff07 	bl	8009360 <HAL_GPIO_ReadPin>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d115      	bne.n	8006584 <checkAktifCalisma+0x964>
 8006558:	4b88      	ldr	r3, [pc, #544]	; (800677c <checkAktifCalisma+0xb5c>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d011      	beq.n	8006584 <checkAktifCalisma+0x964>
 8006560:	4b87      	ldr	r3, [pc, #540]	; (8006780 <checkAktifCalisma+0xb60>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00d      	beq.n	8006584 <checkAktifCalisma+0x964>
 8006568:	4b86      	ldr	r3, [pc, #536]	; (8006784 <checkAktifCalisma+0xb64>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f083 0301 	eor.w	r3, r3, #1
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <checkAktifCalisma+0x964>
			timer2=millis;
 8006576:	4b84      	ldr	r3, [pc, #528]	; (8006788 <checkAktifCalisma+0xb68>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a84      	ldr	r2, [pc, #528]	; (800678c <checkAktifCalisma+0xb6c>)
 800657c:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800657e:	4b81      	ldr	r3, [pc, #516]	; (8006784 <checkAktifCalisma+0xb64>)
 8006580:	2201      	movs	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006584:	4b80      	ldr	r3, [pc, #512]	; (8006788 <checkAktifCalisma+0xb68>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	4b80      	ldr	r3, [pc, #512]	; (800678c <checkAktifCalisma+0xb6c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	4a80      	ldr	r2, [pc, #512]	; (8006790 <checkAktifCalisma+0xb70>)
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	4293      	cmp	r3, r2
 8006594:	d303      	bcc.n	800659e <checkAktifCalisma+0x97e>
 8006596:	4b7b      	ldr	r3, [pc, #492]	; (8006784 <checkAktifCalisma+0xb64>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10d      	bne.n	80065ba <checkAktifCalisma+0x99a>
 800659e:	4b77      	ldr	r3, [pc, #476]	; (800677c <checkAktifCalisma+0xb5c>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	f083 0301 	eor.w	r3, r3, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <checkAktifCalisma+0x99a>
 80065ac:	4b74      	ldr	r3, [pc, #464]	; (8006780 <checkAktifCalisma+0xb60>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f083 0301 	eor.w	r3, r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80065ba:	2200      	movs	r2, #0
 80065bc:	2110      	movs	r1, #16
 80065be:	486d      	ldr	r0, [pc, #436]	; (8006774 <checkAktifCalisma+0xb54>)
 80065c0:	f002 fee5 	bl	800938e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80065c4:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <checkAktifCalisma+0xb58>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80065ca:	4b6e      	ldr	r3, [pc, #440]	; (8006784 <checkAktifCalisma+0xb64>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80065d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065d4:	486f      	ldr	r0, [pc, #444]	; (8006794 <checkAktifCalisma+0xb74>)
 80065d6:	f002 fec3 	bl	8009360 <HAL_GPIO_ReadPin>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d120      	bne.n	8006622 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80065e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065e4:	486b      	ldr	r0, [pc, #428]	; (8006794 <checkAktifCalisma+0xb74>)
 80065e6:	f002 febb 	bl	8009360 <HAL_GPIO_ReadPin>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d118      	bne.n	8006622 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80065f0:	2104      	movs	r1, #4
 80065f2:	4868      	ldr	r0, [pc, #416]	; (8006794 <checkAktifCalisma+0xb74>)
 80065f4:	f002 feb4 	bl	8009360 <HAL_GPIO_ReadPin>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d111      	bne.n	8006622 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80065fe:	2102      	movs	r1, #2
 8006600:	4864      	ldr	r0, [pc, #400]	; (8006794 <checkAktifCalisma+0xb74>)
 8006602:	f002 fead 	bl	8009360 <HAL_GPIO_ReadPin>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800660c:	2101      	movs	r1, #1
 800660e:	4861      	ldr	r0, [pc, #388]	; (8006794 <checkAktifCalisma+0xb74>)
 8006610:	f002 fea6 	bl	8009360 <HAL_GPIO_ReadPin>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <checkAktifCalisma+0xa02>
			makineStop=1;
 800661a:	4b5f      	ldr	r3, [pc, #380]	; (8006798 <checkAktifCalisma+0xb78>)
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	e002      	b.n	8006628 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006622:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <checkAktifCalisma+0xb78>)
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006628:	4b5c      	ldr	r3, [pc, #368]	; (800679c <checkAktifCalisma+0xb7c>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d144      	bne.n	80066ba <checkAktifCalisma+0xa9a>
 8006630:	4b5b      	ldr	r3, [pc, #364]	; (80067a0 <checkAktifCalisma+0xb80>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d003      	beq.n	8006640 <checkAktifCalisma+0xa20>
 8006638:	4b59      	ldr	r3, [pc, #356]	; (80067a0 <checkAktifCalisma+0xb80>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b03      	cmp	r3, #3
 800663e:	d13c      	bne.n	80066ba <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006640:	2180      	movs	r1, #128	; 0x80
 8006642:	484c      	ldr	r0, [pc, #304]	; (8006774 <checkAktifCalisma+0xb54>)
 8006644:	f002 fe8c 	bl	8009360 <HAL_GPIO_ReadPin>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <checkAktifCalisma+0xa36>
 800664e:	4b55      	ldr	r3, [pc, #340]	; (80067a4 <checkAktifCalisma+0xb84>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <checkAktifCalisma+0xa4e>
 8006656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800665a:	484e      	ldr	r0, [pc, #312]	; (8006794 <checkAktifCalisma+0xb74>)
 800665c:	f002 fe80 	bl	8009360 <HAL_GPIO_ReadPin>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d129      	bne.n	80066ba <checkAktifCalisma+0xa9a>
 8006666:	4b4f      	ldr	r3, [pc, #316]	; (80067a4 <checkAktifCalisma+0xb84>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d125      	bne.n	80066ba <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800666e:	2104      	movs	r1, #4
 8006670:	4840      	ldr	r0, [pc, #256]	; (8006774 <checkAktifCalisma+0xb54>)
 8006672:	f002 fe75 	bl	8009360 <HAL_GPIO_ReadPin>
 8006676:	4603      	mov	r3, r0
 8006678:	2b01      	cmp	r3, #1
 800667a:	d003      	beq.n	8006684 <checkAktifCalisma+0xa64>
 800667c:	4b4a      	ldr	r3, [pc, #296]	; (80067a8 <checkAktifCalisma+0xb88>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11a      	bne.n	80066ba <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006684:	2102      	movs	r1, #2
 8006686:	483b      	ldr	r0, [pc, #236]	; (8006774 <checkAktifCalisma+0xb54>)
 8006688:	f002 fe6a 	bl	8009360 <HAL_GPIO_ReadPin>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d113      	bne.n	80066ba <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006692:	4b46      	ldr	r3, [pc, #280]	; (80067ac <checkAktifCalisma+0xb8c>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f083 0301 	eor.w	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80066a0:	4b3d      	ldr	r3, [pc, #244]	; (8006798 <checkAktifCalisma+0xb78>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80066a8:	4b41      	ldr	r3, [pc, #260]	; (80067b0 <checkAktifCalisma+0xb90>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80066ae:	4b36      	ldr	r3, [pc, #216]	; (8006788 <checkAktifCalisma+0xb68>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a40      	ldr	r2, [pc, #256]	; (80067b4 <checkAktifCalisma+0xb94>)
 80066b4:	6013      	str	r3, [r2, #0]
			bekle();
 80066b6:	f7ff f87d 	bl	80057b4 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80066ba:	4b33      	ldr	r3, [pc, #204]	; (8006788 <checkAktifCalisma+0xb68>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b3d      	ldr	r3, [pc, #244]	; (80067b4 <checkAktifCalisma+0xb94>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	4a3c      	ldr	r2, [pc, #240]	; (80067b8 <checkAktifCalisma+0xb98>)
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d211      	bcs.n	80066f0 <checkAktifCalisma+0xad0>
 80066cc:	2104      	movs	r1, #4
 80066ce:	4829      	ldr	r0, [pc, #164]	; (8006774 <checkAktifCalisma+0xb54>)
 80066d0:	f002 fe46 	bl	8009360 <HAL_GPIO_ReadPin>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <checkAktifCalisma+0xad0>
 80066da:	4b33      	ldr	r3, [pc, #204]	; (80067a8 <checkAktifCalisma+0xb88>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d006      	beq.n	80066f0 <checkAktifCalisma+0xad0>
 80066e2:	4b2d      	ldr	r3, [pc, #180]	; (8006798 <checkAktifCalisma+0xb78>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	f083 0301 	eor.w	r3, r3, #1
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80066f0:	4b2f      	ldr	r3, [pc, #188]	; (80067b0 <checkAktifCalisma+0xb90>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80066f6:	4b29      	ldr	r3, [pc, #164]	; (800679c <checkAktifCalisma+0xb7c>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d160      	bne.n	80067c0 <checkAktifCalisma+0xba0>
 80066fe:	4b28      	ldr	r3, [pc, #160]	; (80067a0 <checkAktifCalisma+0xb80>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d003      	beq.n	800670e <checkAktifCalisma+0xaee>
 8006706:	4b26      	ldr	r3, [pc, #152]	; (80067a0 <checkAktifCalisma+0xb80>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b03      	cmp	r3, #3
 800670c:	d158      	bne.n	80067c0 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800670e:	2104      	movs	r1, #4
 8006710:	4818      	ldr	r0, [pc, #96]	; (8006774 <checkAktifCalisma+0xb54>)
 8006712:	f002 fe25 	bl	8009360 <HAL_GPIO_ReadPin>
 8006716:	4603      	mov	r3, r0
 8006718:	2b01      	cmp	r3, #1
 800671a:	d003      	beq.n	8006724 <checkAktifCalisma+0xb04>
 800671c:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <checkAktifCalisma+0xb88>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d14d      	bne.n	80067c0 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006724:	2102      	movs	r1, #2
 8006726:	4813      	ldr	r0, [pc, #76]	; (8006774 <checkAktifCalisma+0xb54>)
 8006728:	f002 fe1a 	bl	8009360 <HAL_GPIO_ReadPin>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d146      	bne.n	80067c0 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006732:	2180      	movs	r1, #128	; 0x80
 8006734:	480f      	ldr	r0, [pc, #60]	; (8006774 <checkAktifCalisma+0xb54>)
 8006736:	f002 fe13 	bl	8009360 <HAL_GPIO_ReadPin>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <checkAktifCalisma+0xb28>
 8006740:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <checkAktifCalisma+0xb84>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <checkAktifCalisma+0xb40>
 8006748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800674c:	4811      	ldr	r0, [pc, #68]	; (8006794 <checkAktifCalisma+0xb74>)
 800674e:	f002 fe07 	bl	8009360 <HAL_GPIO_ReadPin>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d133      	bne.n	80067c0 <checkAktifCalisma+0xba0>
 8006758:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <checkAktifCalisma+0xb84>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d12f      	bne.n	80067c0 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006760:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <checkAktifCalisma+0xb78>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d02b      	beq.n	80067c0 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006768:	4b14      	ldr	r3, [pc, #80]	; (80067bc <checkAktifCalisma+0xb9c>)
 800676a:	2201      	movs	r2, #1
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e02a      	b.n	80067c6 <checkAktifCalisma+0xba6>
 8006770:	20000347 	.word	0x20000347
 8006774:	40011000 	.word	0x40011000
 8006778:	2000034b 	.word	0x2000034b
 800677c:	20000362 	.word	0x20000362
 8006780:	20000363 	.word	0x20000363
 8006784:	20000343 	.word	0x20000343
 8006788:	20000290 	.word	0x20000290
 800678c:	2000029c 	.word	0x2000029c
 8006790:	20000326 	.word	0x20000326
 8006794:	40010c00 	.word	0x40010c00
 8006798:	20000352 	.word	0x20000352
 800679c:	20000319 	.word	0x20000319
 80067a0:	20000318 	.word	0x20000318
 80067a4:	2000031c 	.word	0x2000031c
 80067a8:	20000316 	.word	0x20000316
 80067ac:	2000033f 	.word	0x2000033f
 80067b0:	20000353 	.word	0x20000353
 80067b4:	20000294 	.word	0x20000294
 80067b8:	20000329 	.word	0x20000329
 80067bc:	20000354 	.word	0x20000354
		} else {
			kapi1butonkontrol=0;
 80067c0:	4b8b      	ldr	r3, [pc, #556]	; (80069f0 <checkAktifCalisma+0xdd0>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80067c6:	4b8b      	ldr	r3, [pc, #556]	; (80069f4 <checkAktifCalisma+0xdd4>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d121      	bne.n	8006812 <checkAktifCalisma+0xbf2>
 80067ce:	4b8a      	ldr	r3, [pc, #552]	; (80069f8 <checkAktifCalisma+0xdd8>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d003      	beq.n	80067de <checkAktifCalisma+0xbbe>
 80067d6:	4b88      	ldr	r3, [pc, #544]	; (80069f8 <checkAktifCalisma+0xdd8>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d119      	bne.n	8006812 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80067de:	2104      	movs	r1, #4
 80067e0:	4886      	ldr	r0, [pc, #536]	; (80069fc <checkAktifCalisma+0xddc>)
 80067e2:	f002 fdbd 	bl	8009360 <HAL_GPIO_ReadPin>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d003      	beq.n	80067f4 <checkAktifCalisma+0xbd4>
 80067ec:	4b84      	ldr	r3, [pc, #528]	; (8006a00 <checkAktifCalisma+0xde0>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10e      	bne.n	8006812 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80067f4:	2102      	movs	r1, #2
 80067f6:	4881      	ldr	r0, [pc, #516]	; (80069fc <checkAktifCalisma+0xddc>)
 80067f8:	f002 fdb2 	bl	8009360 <HAL_GPIO_ReadPin>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d107      	bne.n	8006812 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006802:	4b80      	ldr	r3, [pc, #512]	; (8006a04 <checkAktifCalisma+0xde4>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800680a:	4b7f      	ldr	r3, [pc, #508]	; (8006a08 <checkAktifCalisma+0xde8>)
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e002      	b.n	8006818 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006812:	4b7d      	ldr	r3, [pc, #500]	; (8006a08 <checkAktifCalisma+0xde8>)
 8006814:	2200      	movs	r2, #0
 8006816:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006818:	4b75      	ldr	r3, [pc, #468]	; (80069f0 <checkAktifCalisma+0xdd0>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d107      	bne.n	8006830 <checkAktifCalisma+0xc10>
 8006820:	4b79      	ldr	r3, [pc, #484]	; (8006a08 <checkAktifCalisma+0xde8>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d103      	bne.n	8006830 <checkAktifCalisma+0xc10>
 8006828:	4b78      	ldr	r3, [pc, #480]	; (8006a0c <checkAktifCalisma+0xdec>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006830:	2201      	movs	r2, #1
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	4876      	ldr	r0, [pc, #472]	; (8006a10 <checkAktifCalisma+0xdf0>)
 8006836:	f002 fdaa 	bl	800938e <HAL_GPIO_WritePin>
 800683a:	e004      	b.n	8006846 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800683c:	2200      	movs	r2, #0
 800683e:	2180      	movs	r1, #128	; 0x80
 8006840:	4873      	ldr	r0, [pc, #460]	; (8006a10 <checkAktifCalisma+0xdf0>)
 8006842:	f002 fda4 	bl	800938e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006846:	4b73      	ldr	r3, [pc, #460]	; (8006a14 <checkAktifCalisma+0xdf4>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d141      	bne.n	80068d2 <checkAktifCalisma+0xcb2>
 800684e:	4b6a      	ldr	r3, [pc, #424]	; (80069f8 <checkAktifCalisma+0xdd8>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d003      	beq.n	800685e <checkAktifCalisma+0xc3e>
 8006856:	4b68      	ldr	r3, [pc, #416]	; (80069f8 <checkAktifCalisma+0xdd8>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b03      	cmp	r3, #3
 800685c:	d139      	bne.n	80068d2 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800685e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006862:	4866      	ldr	r0, [pc, #408]	; (80069fc <checkAktifCalisma+0xddc>)
 8006864:	f002 fd7c 	bl	8009360 <HAL_GPIO_ReadPin>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <checkAktifCalisma+0xc56>
 800686e:	4b6a      	ldr	r3, [pc, #424]	; (8006a18 <checkAktifCalisma+0xdf8>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <checkAktifCalisma+0xc6e>
 8006876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800687a:	4868      	ldr	r0, [pc, #416]	; (8006a1c <checkAktifCalisma+0xdfc>)
 800687c:	f002 fd70 	bl	8009360 <HAL_GPIO_ReadPin>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d125      	bne.n	80068d2 <checkAktifCalisma+0xcb2>
 8006886:	4b64      	ldr	r3, [pc, #400]	; (8006a18 <checkAktifCalisma+0xdf8>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d121      	bne.n	80068d2 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800688e:	2102      	movs	r1, #2
 8006890:	485a      	ldr	r0, [pc, #360]	; (80069fc <checkAktifCalisma+0xddc>)
 8006892:	f002 fd65 	bl	8009360 <HAL_GPIO_ReadPin>
 8006896:	4603      	mov	r3, r0
 8006898:	2b01      	cmp	r3, #1
 800689a:	d11a      	bne.n	80068d2 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800689c:	2104      	movs	r1, #4
 800689e:	4857      	ldr	r0, [pc, #348]	; (80069fc <checkAktifCalisma+0xddc>)
 80068a0:	f002 fd5e 	bl	8009360 <HAL_GPIO_ReadPin>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d113      	bne.n	80068d2 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80068aa:	4b56      	ldr	r3, [pc, #344]	; (8006a04 <checkAktifCalisma+0xde4>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00f      	beq.n	80068d2 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80068b2:	4b5b      	ldr	r3, [pc, #364]	; (8006a20 <checkAktifCalisma+0xe00>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f083 0301 	eor.w	r3, r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80068c0:	4b58      	ldr	r3, [pc, #352]	; (8006a24 <checkAktifCalisma+0xe04>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80068c6:	4b58      	ldr	r3, [pc, #352]	; (8006a28 <checkAktifCalisma+0xe08>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a58      	ldr	r2, [pc, #352]	; (8006a2c <checkAktifCalisma+0xe0c>)
 80068cc:	6013      	str	r3, [r2, #0]
			bekle();
 80068ce:	f7fe ff71 	bl	80057b4 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80068d2:	4b55      	ldr	r3, [pc, #340]	; (8006a28 <checkAktifCalisma+0xe08>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4b55      	ldr	r3, [pc, #340]	; (8006a2c <checkAktifCalisma+0xe0c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	4a54      	ldr	r2, [pc, #336]	; (8006a30 <checkAktifCalisma+0xe10>)
 80068de:	7812      	ldrb	r2, [r2, #0]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d20d      	bcs.n	8006900 <checkAktifCalisma+0xce0>
 80068e4:	2102      	movs	r1, #2
 80068e6:	4845      	ldr	r0, [pc, #276]	; (80069fc <checkAktifCalisma+0xddc>)
 80068e8:	f002 fd3a 	bl	8009360 <HAL_GPIO_ReadPin>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d006      	beq.n	8006900 <checkAktifCalisma+0xce0>
 80068f2:	4b44      	ldr	r3, [pc, #272]	; (8006a04 <checkAktifCalisma+0xde4>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f083 0301 	eor.w	r3, r3, #1
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8006900:	4b48      	ldr	r3, [pc, #288]	; (8006a24 <checkAktifCalisma+0xe04>)
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006906:	4b43      	ldr	r3, [pc, #268]	; (8006a14 <checkAktifCalisma+0xdf4>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d135      	bne.n	800697a <checkAktifCalisma+0xd5a>
 800690e:	4b3a      	ldr	r3, [pc, #232]	; (80069f8 <checkAktifCalisma+0xdd8>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d003      	beq.n	800691e <checkAktifCalisma+0xcfe>
 8006916:	4b38      	ldr	r3, [pc, #224]	; (80069f8 <checkAktifCalisma+0xdd8>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b03      	cmp	r3, #3
 800691c:	d12d      	bne.n	800697a <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800691e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006922:	4836      	ldr	r0, [pc, #216]	; (80069fc <checkAktifCalisma+0xddc>)
 8006924:	f002 fd1c 	bl	8009360 <HAL_GPIO_ReadPin>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <checkAktifCalisma+0xd16>
 800692e:	4b3a      	ldr	r3, [pc, #232]	; (8006a18 <checkAktifCalisma+0xdf8>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <checkAktifCalisma+0xd2e>
 8006936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800693a:	4838      	ldr	r0, [pc, #224]	; (8006a1c <checkAktifCalisma+0xdfc>)
 800693c:	f002 fd10 	bl	8009360 <HAL_GPIO_ReadPin>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d119      	bne.n	800697a <checkAktifCalisma+0xd5a>
 8006946:	4b34      	ldr	r3, [pc, #208]	; (8006a18 <checkAktifCalisma+0xdf8>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d115      	bne.n	800697a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800694e:	2102      	movs	r1, #2
 8006950:	482a      	ldr	r0, [pc, #168]	; (80069fc <checkAktifCalisma+0xddc>)
 8006952:	f002 fd05 	bl	8009360 <HAL_GPIO_ReadPin>
 8006956:	4603      	mov	r3, r0
 8006958:	2b01      	cmp	r3, #1
 800695a:	d10e      	bne.n	800697a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800695c:	2104      	movs	r1, #4
 800695e:	4827      	ldr	r0, [pc, #156]	; (80069fc <checkAktifCalisma+0xddc>)
 8006960:	f002 fcfe 	bl	8009360 <HAL_GPIO_ReadPin>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800696a:	4b26      	ldr	r3, [pc, #152]	; (8006a04 <checkAktifCalisma+0xde4>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8006972:	4b30      	ldr	r3, [pc, #192]	; (8006a34 <checkAktifCalisma+0xe14>)
 8006974:	2201      	movs	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	e002      	b.n	8006980 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800697a:	4b2e      	ldr	r3, [pc, #184]	; (8006a34 <checkAktifCalisma+0xe14>)
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006980:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <checkAktifCalisma+0xdf4>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d11d      	bne.n	80069c4 <checkAktifCalisma+0xda4>
 8006988:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <checkAktifCalisma+0xdd8>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d003      	beq.n	8006998 <checkAktifCalisma+0xd78>
 8006990:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <checkAktifCalisma+0xdd8>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b03      	cmp	r3, #3
 8006996:	d115      	bne.n	80069c4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006998:	2102      	movs	r1, #2
 800699a:	4818      	ldr	r0, [pc, #96]	; (80069fc <checkAktifCalisma+0xddc>)
 800699c:	f002 fce0 	bl	8009360 <HAL_GPIO_ReadPin>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d10e      	bne.n	80069c4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80069a6:	2104      	movs	r1, #4
 80069a8:	4814      	ldr	r0, [pc, #80]	; (80069fc <checkAktifCalisma+0xddc>)
 80069aa:	f002 fcd9 	bl	8009360 <HAL_GPIO_ReadPin>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d107      	bne.n	80069c4 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80069b4:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <checkAktifCalisma+0xde4>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80069bc:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <checkAktifCalisma+0xe18>)
 80069be:	2201      	movs	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e002      	b.n	80069ca <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80069c4:	4b1c      	ldr	r3, [pc, #112]	; (8006a38 <checkAktifCalisma+0xe18>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80069ca:	4b1a      	ldr	r3, [pc, #104]	; (8006a34 <checkAktifCalisma+0xe14>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d107      	bne.n	80069e2 <checkAktifCalisma+0xdc2>
 80069d2:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <checkAktifCalisma+0xe18>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d103      	bne.n	80069e2 <checkAktifCalisma+0xdc2>
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <checkAktifCalisma+0xe04>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d02c      	beq.n	8006a3c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80069e2:	2201      	movs	r2, #1
 80069e4:	2140      	movs	r1, #64	; 0x40
 80069e6:	480a      	ldr	r0, [pc, #40]	; (8006a10 <checkAktifCalisma+0xdf0>)
 80069e8:	f002 fcd1 	bl	800938e <HAL_GPIO_WritePin>
 80069ec:	e02b      	b.n	8006a46 <checkAktifCalisma+0xe26>
 80069ee:	bf00      	nop
 80069f0:	20000354 	.word	0x20000354
 80069f4:	20000319 	.word	0x20000319
 80069f8:	20000318 	.word	0x20000318
 80069fc:	40011000 	.word	0x40011000
 8006a00:	20000316 	.word	0x20000316
 8006a04:	20000352 	.word	0x20000352
 8006a08:	20000355 	.word	0x20000355
 8006a0c:	20000353 	.word	0x20000353
 8006a10:	40010800 	.word	0x40010800
 8006a14:	2000031a 	.word	0x2000031a
 8006a18:	2000031c 	.word	0x2000031c
 8006a1c:	40010c00 	.word	0x40010c00
 8006a20:	2000033f 	.word	0x2000033f
 8006a24:	20000356 	.word	0x20000356
 8006a28:	20000290 	.word	0x20000290
 8006a2c:	20000294 	.word	0x20000294
 8006a30:	2000032a 	.word	0x2000032a
 8006a34:	20000357 	.word	0x20000357
 8006a38:	20000358 	.word	0x20000358
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2140      	movs	r1, #64	; 0x40
 8006a40:	488d      	ldr	r0, [pc, #564]	; (8006c78 <checkAktifCalisma+0x1058>)
 8006a42:	f002 fca4 	bl	800938e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006a46:	4b8d      	ldr	r3, [pc, #564]	; (8006c7c <checkAktifCalisma+0x105c>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <checkAktifCalisma+0xe36>
 8006a4e:	4b8b      	ldr	r3, [pc, #556]	; (8006c7c <checkAktifCalisma+0x105c>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d115      	bne.n	8006a82 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006a56:	2104      	movs	r1, #4
 8006a58:	4889      	ldr	r0, [pc, #548]	; (8006c80 <checkAktifCalisma+0x1060>)
 8006a5a:	f002 fc81 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d003      	beq.n	8006a6c <checkAktifCalisma+0xe4c>
 8006a64:	4b87      	ldr	r3, [pc, #540]	; (8006c84 <checkAktifCalisma+0x1064>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006a6c:	2102      	movs	r1, #2
 8006a6e:	4884      	ldr	r0, [pc, #528]	; (8006c80 <checkAktifCalisma+0x1060>)
 8006a70:	f002 fc76 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8006a7a:	4b83      	ldr	r3, [pc, #524]	; (8006c88 <checkAktifCalisma+0x1068>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e002      	b.n	8006a88 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8006a82:	4b81      	ldr	r3, [pc, #516]	; (8006c88 <checkAktifCalisma+0x1068>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006a88:	4b7c      	ldr	r3, [pc, #496]	; (8006c7c <checkAktifCalisma+0x105c>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d003      	beq.n	8006a98 <checkAktifCalisma+0xe78>
 8006a90:	4b7a      	ldr	r3, [pc, #488]	; (8006c7c <checkAktifCalisma+0x105c>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d111      	bne.n	8006abc <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006a98:	2102      	movs	r1, #2
 8006a9a:	4879      	ldr	r0, [pc, #484]	; (8006c80 <checkAktifCalisma+0x1060>)
 8006a9c:	f002 fc60 	bl	8009360 <HAL_GPIO_ReadPin>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d10a      	bne.n	8006abc <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	4875      	ldr	r0, [pc, #468]	; (8006c80 <checkAktifCalisma+0x1060>)
 8006aaa:	f002 fc59 	bl	8009360 <HAL_GPIO_ReadPin>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8006ab4:	4b75      	ldr	r3, [pc, #468]	; (8006c8c <checkAktifCalisma+0x106c>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	e002      	b.n	8006ac2 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8006abc:	4b73      	ldr	r3, [pc, #460]	; (8006c8c <checkAktifCalisma+0x106c>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8006ac2:	4b71      	ldr	r3, [pc, #452]	; (8006c88 <checkAktifCalisma+0x1068>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00f      	beq.n	8006aea <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8006aca:	4b71      	ldr	r3, [pc, #452]	; (8006c90 <checkAktifCalisma+0x1070>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d10b      	bne.n	8006aea <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006ad2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ad6:	486f      	ldr	r0, [pc, #444]	; (8006c94 <checkAktifCalisma+0x1074>)
 8006ad8:	f002 fc42 	bl	8009360 <HAL_GPIO_ReadPin>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8006ae2:	4b6d      	ldr	r3, [pc, #436]	; (8006c98 <checkAktifCalisma+0x1078>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e002      	b.n	8006af0 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8006aea:	4b6b      	ldr	r3, [pc, #428]	; (8006c98 <checkAktifCalisma+0x1078>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8006af0:	4b66      	ldr	r3, [pc, #408]	; (8006c8c <checkAktifCalisma+0x106c>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00f      	beq.n	8006b18 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8006af8:	4b65      	ldr	r3, [pc, #404]	; (8006c90 <checkAktifCalisma+0x1070>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10b      	bne.n	8006b18 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b04:	4863      	ldr	r0, [pc, #396]	; (8006c94 <checkAktifCalisma+0x1074>)
 8006b06:	f002 fc2b 	bl	8009360 <HAL_GPIO_ReadPin>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006b10:	4b62      	ldr	r3, [pc, #392]	; (8006c9c <checkAktifCalisma+0x107c>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e002      	b.n	8006b1e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8006b18:	4b60      	ldr	r3, [pc, #384]	; (8006c9c <checkAktifCalisma+0x107c>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006b1e:	4b60      	ldr	r3, [pc, #384]	; (8006ca0 <checkAktifCalisma+0x1080>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d137      	bne.n	8006b96 <checkAktifCalisma+0xf76>
 8006b26:	4b5f      	ldr	r3, [pc, #380]	; (8006ca4 <checkAktifCalisma+0x1084>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d003      	beq.n	8006b36 <checkAktifCalisma+0xf16>
 8006b2e:	4b5d      	ldr	r3, [pc, #372]	; (8006ca4 <checkAktifCalisma+0x1084>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d12f      	bne.n	8006b96 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006b36:	4b54      	ldr	r3, [pc, #336]	; (8006c88 <checkAktifCalisma+0x1068>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <checkAktifCalisma+0xf26>
 8006b3e:	4b53      	ldr	r3, [pc, #332]	; (8006c8c <checkAktifCalisma+0x106c>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d027      	beq.n	8006b96 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b4a:	484d      	ldr	r0, [pc, #308]	; (8006c80 <checkAktifCalisma+0x1060>)
 8006b4c:	f002 fc08 	bl	8009360 <HAL_GPIO_ReadPin>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <checkAktifCalisma+0xf3e>
 8006b56:	4b4e      	ldr	r3, [pc, #312]	; (8006c90 <checkAktifCalisma+0x1070>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006b5e:	4b4e      	ldr	r3, [pc, #312]	; (8006c98 <checkAktifCalisma+0x1078>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d103      	bne.n	8006b6e <checkAktifCalisma+0xf4e>
 8006b66:	4b4d      	ldr	r3, [pc, #308]	; (8006c9c <checkAktifCalisma+0x107c>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d013      	beq.n	8006b96 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8006b6e:	4b4e      	ldr	r3, [pc, #312]	; (8006ca8 <checkAktifCalisma+0x1088>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00f      	beq.n	8006b96 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8006b76:	4b4d      	ldr	r3, [pc, #308]	; (8006cac <checkAktifCalisma+0x108c>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	f083 0301 	eor.w	r3, r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8006b84:	4b4a      	ldr	r3, [pc, #296]	; (8006cb0 <checkAktifCalisma+0x1090>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006b8a:	4b4a      	ldr	r3, [pc, #296]	; (8006cb4 <checkAktifCalisma+0x1094>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a4a      	ldr	r2, [pc, #296]	; (8006cb8 <checkAktifCalisma+0x1098>)
 8006b90:	6013      	str	r3, [r2, #0]
			bekle();
 8006b92:	f7fe fe0f 	bl	80057b4 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006b96:	4b47      	ldr	r3, [pc, #284]	; (8006cb4 <checkAktifCalisma+0x1094>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b47      	ldr	r3, [pc, #284]	; (8006cb8 <checkAktifCalisma+0x1098>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	4a46      	ldr	r2, [pc, #280]	; (8006cbc <checkAktifCalisma+0x109c>)
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d214      	bcs.n	8006bd2 <checkAktifCalisma+0xfb2>
 8006ba8:	4b37      	ldr	r3, [pc, #220]	; (8006c88 <checkAktifCalisma+0x1068>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f083 0301 	eor.w	r3, r3, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d006      	beq.n	8006bc4 <checkAktifCalisma+0xfa4>
 8006bb6:	4b35      	ldr	r3, [pc, #212]	; (8006c8c <checkAktifCalisma+0x106c>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f083 0301 	eor.w	r3, r3, #1
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <checkAktifCalisma+0xfb2>
 8006bc4:	4b38      	ldr	r3, [pc, #224]	; (8006ca8 <checkAktifCalisma+0x1088>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f083 0301 	eor.w	r3, r3, #1
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8006bd2:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <checkAktifCalisma+0x1090>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006bd8:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <checkAktifCalisma+0x1080>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d12b      	bne.n	8006c38 <checkAktifCalisma+0x1018>
 8006be0:	4b30      	ldr	r3, [pc, #192]	; (8006ca4 <checkAktifCalisma+0x1084>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d003      	beq.n	8006bf0 <checkAktifCalisma+0xfd0>
 8006be8:	4b2e      	ldr	r3, [pc, #184]	; (8006ca4 <checkAktifCalisma+0x1084>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d123      	bne.n	8006c38 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006bf0:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <checkAktifCalisma+0x1068>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <checkAktifCalisma+0xfe0>
 8006bf8:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <checkAktifCalisma+0x106c>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01b      	beq.n	8006c38 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c04:	481e      	ldr	r0, [pc, #120]	; (8006c80 <checkAktifCalisma+0x1060>)
 8006c06:	f002 fbab 	bl	8009360 <HAL_GPIO_ReadPin>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d103      	bne.n	8006c18 <checkAktifCalisma+0xff8>
 8006c10:	4b1f      	ldr	r3, [pc, #124]	; (8006c90 <checkAktifCalisma+0x1070>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006c18:	4b1f      	ldr	r3, [pc, #124]	; (8006c98 <checkAktifCalisma+0x1078>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d103      	bne.n	8006c28 <checkAktifCalisma+0x1008>
 8006c20:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <checkAktifCalisma+0x107c>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8006c28:	4b1f      	ldr	r3, [pc, #124]	; (8006ca8 <checkAktifCalisma+0x1088>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006c30:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <checkAktifCalisma+0x10a0>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e002      	b.n	8006c3e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <checkAktifCalisma+0x10a0>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006c3e:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <checkAktifCalisma+0x1080>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d140      	bne.n	8006cc8 <checkAktifCalisma+0x10a8>
 8006c46:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <checkAktifCalisma+0x1084>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d003      	beq.n	8006c56 <checkAktifCalisma+0x1036>
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <checkAktifCalisma+0x1084>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d138      	bne.n	8006cc8 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <checkAktifCalisma+0x1068>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <checkAktifCalisma+0x1046>
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <checkAktifCalisma+0x106c>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d030      	beq.n	8006cc8 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8006c66:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <checkAktifCalisma+0x1088>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02c      	beq.n	8006cc8 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006c6e:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <checkAktifCalisma+0x10a4>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	e02b      	b.n	8006cce <checkAktifCalisma+0x10ae>
 8006c76:	bf00      	nop
 8006c78:	40010800 	.word	0x40010800
 8006c7c:	2000031d 	.word	0x2000031d
 8006c80:	40011000 	.word	0x40011000
 8006c84:	20000316 	.word	0x20000316
 8006c88:	2000035c 	.word	0x2000035c
 8006c8c:	2000035d 	.word	0x2000035d
 8006c90:	2000031c 	.word	0x2000031c
 8006c94:	40010c00 	.word	0x40010c00
 8006c98:	2000036c 	.word	0x2000036c
 8006c9c:	2000036d 	.word	0x2000036d
 8006ca0:	2000031b 	.word	0x2000031b
 8006ca4:	20000318 	.word	0x20000318
 8006ca8:	20000352 	.word	0x20000352
 8006cac:	2000033f 	.word	0x2000033f
 8006cb0:	20000359 	.word	0x20000359
 8006cb4:	20000290 	.word	0x20000290
 8006cb8:	20000294 	.word	0x20000294
 8006cbc:	2000032b 	.word	0x2000032b
 8006cc0:	2000035a 	.word	0x2000035a
 8006cc4:	2000035b 	.word	0x2000035b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006cc8:	4b8b      	ldr	r3, [pc, #556]	; (8006ef8 <checkAktifCalisma+0x12d8>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006cce:	4b8b      	ldr	r3, [pc, #556]	; (8006efc <checkAktifCalisma+0x12dc>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d107      	bne.n	8006ce6 <checkAktifCalisma+0x10c6>
 8006cd6:	4b8a      	ldr	r3, [pc, #552]	; (8006f00 <checkAktifCalisma+0x12e0>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d103      	bne.n	8006ce6 <checkAktifCalisma+0x10c6>
 8006cde:	4b86      	ldr	r3, [pc, #536]	; (8006ef8 <checkAktifCalisma+0x12d8>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	2120      	movs	r1, #32
 8006cea:	4886      	ldr	r0, [pc, #536]	; (8006f04 <checkAktifCalisma+0x12e4>)
 8006cec:	f002 fb4f 	bl	800938e <HAL_GPIO_WritePin>
 8006cf0:	e004      	b.n	8006cfc <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2120      	movs	r1, #32
 8006cf6:	4883      	ldr	r0, [pc, #524]	; (8006f04 <checkAktifCalisma+0x12e4>)
 8006cf8:	f002 fb49 	bl	800938e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006cfc:	4b82      	ldr	r3, [pc, #520]	; (8006f08 <checkAktifCalisma+0x12e8>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00e      	beq.n	8006d22 <checkAktifCalisma+0x1102>
 8006d04:	2102      	movs	r1, #2
 8006d06:	4881      	ldr	r0, [pc, #516]	; (8006f0c <checkAktifCalisma+0x12ec>)
 8006d08:	f002 fb2a 	bl	8009360 <HAL_GPIO_ReadPin>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d107      	bne.n	8006d22 <checkAktifCalisma+0x1102>
 8006d12:	4b7f      	ldr	r3, [pc, #508]	; (8006f10 <checkAktifCalisma+0x12f0>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <checkAktifCalisma+0x1102>
 8006d1a:	4b7e      	ldr	r3, [pc, #504]	; (8006f14 <checkAktifCalisma+0x12f4>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d112      	bne.n	8006d48 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006d22:	4b7d      	ldr	r3, [pc, #500]	; (8006f18 <checkAktifCalisma+0x12f8>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d066      	beq.n	8006df8 <checkAktifCalisma+0x11d8>
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	4877      	ldr	r0, [pc, #476]	; (8006f0c <checkAktifCalisma+0x12ec>)
 8006d2e:	f002 fb17 	bl	8009360 <HAL_GPIO_ReadPin>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d15f      	bne.n	8006df8 <checkAktifCalisma+0x11d8>
 8006d38:	4b75      	ldr	r3, [pc, #468]	; (8006f10 <checkAktifCalisma+0x12f0>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d05b      	beq.n	8006df8 <checkAktifCalisma+0x11d8>
 8006d40:	4b74      	ldr	r3, [pc, #464]	; (8006f14 <checkAktifCalisma+0x12f4>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d057      	beq.n	8006df8 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006d48:	4b74      	ldr	r3, [pc, #464]	; (8006f1c <checkAktifCalisma+0x12fc>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	4b72      	ldr	r3, [pc, #456]	; (8006f1c <checkAktifCalisma+0x12fc>)
 8006d52:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006d54:	4b71      	ldr	r3, [pc, #452]	; (8006f1c <checkAktifCalisma+0x12fc>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b09      	cmp	r3, #9
 8006d5a:	d908      	bls.n	8006d6e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006d5c:	4b6f      	ldr	r3, [pc, #444]	; (8006f1c <checkAktifCalisma+0x12fc>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006d62:	4b6f      	ldr	r3, [pc, #444]	; (8006f20 <checkAktifCalisma+0x1300>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	3301      	adds	r3, #1
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	4b6d      	ldr	r3, [pc, #436]	; (8006f20 <checkAktifCalisma+0x1300>)
 8006d6c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006d6e:	4b6c      	ldr	r3, [pc, #432]	; (8006f20 <checkAktifCalisma+0x1300>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b09      	cmp	r3, #9
 8006d74:	d908      	bls.n	8006d88 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8006d76:	4b6a      	ldr	r3, [pc, #424]	; (8006f20 <checkAktifCalisma+0x1300>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006d7c:	4b69      	ldr	r3, [pc, #420]	; (8006f24 <checkAktifCalisma+0x1304>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	3301      	adds	r3, #1
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	4b67      	ldr	r3, [pc, #412]	; (8006f24 <checkAktifCalisma+0x1304>)
 8006d86:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006d88:	4b66      	ldr	r3, [pc, #408]	; (8006f24 <checkAktifCalisma+0x1304>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b09      	cmp	r3, #9
 8006d8e:	d908      	bls.n	8006da2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006d90:	4b64      	ldr	r3, [pc, #400]	; (8006f24 <checkAktifCalisma+0x1304>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006d96:	4b64      	ldr	r3, [pc, #400]	; (8006f28 <checkAktifCalisma+0x1308>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	4b62      	ldr	r3, [pc, #392]	; (8006f28 <checkAktifCalisma+0x1308>)
 8006da0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006da2:	4b61      	ldr	r3, [pc, #388]	; (8006f28 <checkAktifCalisma+0x1308>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b09      	cmp	r3, #9
 8006da8:	d908      	bls.n	8006dbc <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8006daa:	4b5f      	ldr	r3, [pc, #380]	; (8006f28 <checkAktifCalisma+0x1308>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006db0:	4b5e      	ldr	r3, [pc, #376]	; (8006f2c <checkAktifCalisma+0x130c>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	4b5c      	ldr	r3, [pc, #368]	; (8006f2c <checkAktifCalisma+0x130c>)
 8006dba:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006dbc:	4b5b      	ldr	r3, [pc, #364]	; (8006f2c <checkAktifCalisma+0x130c>)
 8006dbe:	781a      	ldrb	r2, [r3, #0]
 8006dc0:	4b5b      	ldr	r3, [pc, #364]	; (8006f30 <checkAktifCalisma+0x1310>)
 8006dc2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006dc6:	4b58      	ldr	r3, [pc, #352]	; (8006f28 <checkAktifCalisma+0x1308>)
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	4b59      	ldr	r3, [pc, #356]	; (8006f30 <checkAktifCalisma+0x1310>)
 8006dcc:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006dce:	4b55      	ldr	r3, [pc, #340]	; (8006f24 <checkAktifCalisma+0x1304>)
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	4b57      	ldr	r3, [pc, #348]	; (8006f30 <checkAktifCalisma+0x1310>)
 8006dd4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006dd6:	4b52      	ldr	r3, [pc, #328]	; (8006f20 <checkAktifCalisma+0x1300>)
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	4b55      	ldr	r3, [pc, #340]	; (8006f30 <checkAktifCalisma+0x1310>)
 8006ddc:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006dde:	4b4f      	ldr	r3, [pc, #316]	; (8006f1c <checkAktifCalisma+0x12fc>)
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	4b53      	ldr	r3, [pc, #332]	; (8006f30 <checkAktifCalisma+0x1310>)
 8006de4:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006de6:	4b53      	ldr	r3, [pc, #332]	; (8006f34 <checkAktifCalisma+0x1314>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006dec:	4b46      	ldr	r3, [pc, #280]	; (8006f08 <checkAktifCalisma+0x12e8>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006df2:	4b49      	ldr	r3, [pc, #292]	; (8006f18 <checkAktifCalisma+0x12f8>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006dfc:	484e      	ldr	r0, [pc, #312]	; (8006f38 <checkAktifCalisma+0x1318>)
 8006dfe:	f002 faaf 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d016      	beq.n	8006e36 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e0c:	484a      	ldr	r0, [pc, #296]	; (8006f38 <checkAktifCalisma+0x1318>)
 8006e0e:	f002 faa7 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00e      	beq.n	8006e36 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e1c:	4846      	ldr	r0, [pc, #280]	; (8006f38 <checkAktifCalisma+0x1318>)
 8006e1e:	f002 fa9f 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006e28:	2140      	movs	r1, #64	; 0x40
 8006e2a:	4838      	ldr	r0, [pc, #224]	; (8006f0c <checkAktifCalisma+0x12ec>)
 8006e2c:	f002 fa98 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <checkAktifCalisma+0x121e>
			startBasili=1;
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <checkAktifCalisma+0x131c>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e002      	b.n	8006e44 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006e3e:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <checkAktifCalisma+0x131c>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006e44:	4b3d      	ldr	r3, [pc, #244]	; (8006f3c <checkAktifCalisma+0x131c>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d016      	beq.n	8006e7a <checkAktifCalisma+0x125a>
 8006e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e50:	4839      	ldr	r0, [pc, #228]	; (8006f38 <checkAktifCalisma+0x1318>)
 8006e52:	f002 fa85 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10e      	bne.n	8006e7a <checkAktifCalisma+0x125a>
			hataVar=1;
 8006e5c:	4b38      	ldr	r3, [pc, #224]	; (8006f40 <checkAktifCalisma+0x1320>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006e62:	f7fe f973 	bl	800514c <convertAndSendData>
			hataKoduLcdGoster(1);
 8006e66:	2001      	movs	r0, #1
 8006e68:	f7fe f88e 	bl	8004f88 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	f7fe fc25 	bl	80056bc <hata2EEPROM>
			acilstophatasi=1;
 8006e72:	4b34      	ldr	r3, [pc, #208]	; (8006f44 <checkAktifCalisma+0x1324>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e018      	b.n	8006eac <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006e7a:	4b32      	ldr	r3, [pc, #200]	; (8006f44 <checkAktifCalisma+0x1324>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d014      	beq.n	8006eac <checkAktifCalisma+0x128c>
 8006e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e86:	482c      	ldr	r0, [pc, #176]	; (8006f38 <checkAktifCalisma+0x1318>)
 8006e88:	f002 fa6a 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10c      	bne.n	8006eac <checkAktifCalisma+0x128c>
 8006e92:	4b2a      	ldr	r3, [pc, #168]	; (8006f3c <checkAktifCalisma+0x131c>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f083 0301 	eor.w	r3, r3, #1
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006ea0:	4b28      	ldr	r3, [pc, #160]	; (8006f44 <checkAktifCalisma+0x1324>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	f7fe f81a 	bl	8004ee0 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006eac:	4b26      	ldr	r3, [pc, #152]	; (8006f48 <checkAktifCalisma+0x1328>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f083 0301 	eor.w	r3, r3, #1
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d04e      	beq.n	8006f58 <checkAktifCalisma+0x1338>
 8006eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ebe:	481e      	ldr	r0, [pc, #120]	; (8006f38 <checkAktifCalisma+0x1318>)
 8006ec0:	f002 fa4e 	bl	8009360 <HAL_GPIO_ReadPin>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <checkAktifCalisma+0x12b2>
 8006eca:	4b20      	ldr	r3, [pc, #128]	; (8006f4c <checkAktifCalisma+0x132c>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d042      	beq.n	8006f58 <checkAktifCalisma+0x1338>
 8006ed2:	4b1f      	ldr	r3, [pc, #124]	; (8006f50 <checkAktifCalisma+0x1330>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d13e      	bne.n	8006f58 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006eda:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <checkAktifCalisma+0x1320>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006ee0:	f7fe f934 	bl	800514c <convertAndSendData>
			hataKoduLcdGoster(2);
 8006ee4:	2002      	movs	r0, #2
 8006ee6:	f7fe f84f 	bl	8004f88 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006eea:	2002      	movs	r0, #2
 8006eec:	f7fe fbe6 	bl	80056bc <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <checkAktifCalisma+0x1334>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e047      	b.n	8006f88 <checkAktifCalisma+0x1368>
 8006ef8:	2000035b 	.word	0x2000035b
 8006efc:	2000035a 	.word	0x2000035a
 8006f00:	20000359 	.word	0x20000359
 8006f04:	40010800 	.word	0x40010800
 8006f08:	2000034f 	.word	0x2000034f
 8006f0c:	40011000 	.word	0x40011000
 8006f10:	20000316 	.word	0x20000316
 8006f14:	20000352 	.word	0x20000352
 8006f18:	20000350 	.word	0x20000350
 8006f1c:	2000030d 	.word	0x2000030d
 8006f20:	2000030e 	.word	0x2000030e
 8006f24:	200000a1 	.word	0x200000a1
 8006f28:	200000a2 	.word	0x200000a2
 8006f2c:	2000030f 	.word	0x2000030f
 8006f30:	20000218 	.word	0x20000218
 8006f34:	2000033c 	.word	0x2000033c
 8006f38:	40010c00 	.word	0x40010c00
 8006f3c:	2000035e 	.word	0x2000035e
 8006f40:	20000365 	.word	0x20000365
 8006f44:	20000360 	.word	0x20000360
 8006f48:	20000367 	.word	0x20000367
 8006f4c:	20000371 	.word	0x20000371
 8006f50:	20000314 	.word	0x20000314
 8006f54:	20000361 	.word	0x20000361
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006f58:	4b9b      	ldr	r3, [pc, #620]	; (80071c8 <checkAktifCalisma+0x15a8>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d013      	beq.n	8006f88 <checkAktifCalisma+0x1368>
 8006f60:	4b9a      	ldr	r3, [pc, #616]	; (80071cc <checkAktifCalisma+0x15ac>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00f      	beq.n	8006f88 <checkAktifCalisma+0x1368>
 8006f68:	4b99      	ldr	r3, [pc, #612]	; (80071d0 <checkAktifCalisma+0x15b0>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f083 0301 	eor.w	r3, r3, #1
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006f76:	4b94      	ldr	r3, [pc, #592]	; (80071c8 <checkAktifCalisma+0x15a8>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006f7c:	4b95      	ldr	r3, [pc, #596]	; (80071d4 <checkAktifCalisma+0x15b4>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006f82:	2002      	movs	r0, #2
 8006f84:	f7fd ffac 	bl	8004ee0 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006f88:	4b93      	ldr	r3, [pc, #588]	; (80071d8 <checkAktifCalisma+0x15b8>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d11e      	bne.n	8006fce <checkAktifCalisma+0x13ae>
 8006f90:	4b92      	ldr	r3, [pc, #584]	; (80071dc <checkAktifCalisma+0x15bc>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d11a      	bne.n	8006fce <checkAktifCalisma+0x13ae>
 8006f98:	4b91      	ldr	r3, [pc, #580]	; (80071e0 <checkAktifCalisma+0x15c0>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d016      	beq.n	8006fce <checkAktifCalisma+0x13ae>
 8006fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fa4:	488f      	ldr	r0, [pc, #572]	; (80071e4 <checkAktifCalisma+0x15c4>)
 8006fa6:	f002 f9db 	bl	8009360 <HAL_GPIO_ReadPin>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d10e      	bne.n	8006fce <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006fb0:	4b8d      	ldr	r3, [pc, #564]	; (80071e8 <checkAktifCalisma+0x15c8>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8006fb6:	f7fe f8c9 	bl	800514c <convertAndSendData>
			hataKoduLcdGoster(3);
 8006fba:	2003      	movs	r0, #3
 8006fbc:	f7fd ffe4 	bl	8004f88 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006fc0:	2003      	movs	r0, #3
 8006fc2:	f7fe fb7b 	bl	80056bc <hata2EEPROM>
			basinchatasi=1;
 8006fc6:	4b89      	ldr	r3, [pc, #548]	; (80071ec <checkAktifCalisma+0x15cc>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e015      	b.n	8006ffa <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006fce:	4b87      	ldr	r3, [pc, #540]	; (80071ec <checkAktifCalisma+0x15cc>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d011      	beq.n	8006ffa <checkAktifCalisma+0x13da>
 8006fd6:	4b80      	ldr	r3, [pc, #512]	; (80071d8 <checkAktifCalisma+0x15b8>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d10d      	bne.n	8006ffa <checkAktifCalisma+0x13da>
 8006fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fe2:	4883      	ldr	r0, [pc, #524]	; (80071f0 <checkAktifCalisma+0x15d0>)
 8006fe4:	f002 f9bc 	bl	8009360 <HAL_GPIO_ReadPin>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d105      	bne.n	8006ffa <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006fee:	4b7f      	ldr	r3, [pc, #508]	; (80071ec <checkAktifCalisma+0x15cc>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006ff4:	2003      	movs	r0, #3
 8006ff6:	f7fd ff73 	bl	8004ee0 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006ffa:	4b7e      	ldr	r3, [pc, #504]	; (80071f4 <checkAktifCalisma+0x15d4>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <checkAktifCalisma+0x13ea>
 8007002:	4b7d      	ldr	r3, [pc, #500]	; (80071f8 <checkAktifCalisma+0x15d8>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01e      	beq.n	8007048 <checkAktifCalisma+0x1428>
 800700a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800700e:	487b      	ldr	r0, [pc, #492]	; (80071fc <checkAktifCalisma+0x15dc>)
 8007010:	f002 f9a6 	bl	8009360 <HAL_GPIO_ReadPin>
 8007014:	4603      	mov	r3, r0
 8007016:	2b01      	cmp	r3, #1
 8007018:	d116      	bne.n	8007048 <checkAktifCalisma+0x1428>
 800701a:	4b79      	ldr	r3, [pc, #484]	; (8007200 <checkAktifCalisma+0x15e0>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d003      	beq.n	800702a <checkAktifCalisma+0x140a>
 8007022:	4b77      	ldr	r3, [pc, #476]	; (8007200 <checkAktifCalisma+0x15e0>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d10e      	bne.n	8007048 <checkAktifCalisma+0x1428>
			hataVar=1;
 800702a:	4b6f      	ldr	r3, [pc, #444]	; (80071e8 <checkAktifCalisma+0x15c8>)
 800702c:	2201      	movs	r2, #1
 800702e:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 8007030:	f7fe f88c 	bl	800514c <convertAndSendData>
			hataKoduLcdGoster(4);
 8007034:	2004      	movs	r0, #4
 8007036:	f7fd ffa7 	bl	8004f88 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800703a:	2004      	movs	r0, #4
 800703c:	f7fe fb3e 	bl	80056bc <hata2EEPROM>
			katkapisivicihatasi=1;
 8007040:	4b70      	ldr	r3, [pc, #448]	; (8007204 <checkAktifCalisma+0x15e4>)
 8007042:	2201      	movs	r2, #1
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	e01f      	b.n	8007088 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007048:	4b6e      	ldr	r3, [pc, #440]	; (8007204 <checkAktifCalisma+0x15e4>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01b      	beq.n	8007088 <checkAktifCalisma+0x1468>
 8007050:	4b6d      	ldr	r3, [pc, #436]	; (8007208 <checkAktifCalisma+0x15e8>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d017      	beq.n	8007088 <checkAktifCalisma+0x1468>
 8007058:	4b66      	ldr	r3, [pc, #408]	; (80071f4 <checkAktifCalisma+0x15d4>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f083 0301 	eor.w	r3, r3, #1
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d010      	beq.n	8007088 <checkAktifCalisma+0x1468>
 8007066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800706a:	4864      	ldr	r0, [pc, #400]	; (80071fc <checkAktifCalisma+0x15dc>)
 800706c:	f002 f978 	bl	8009360 <HAL_GPIO_ReadPin>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8007076:	4b63      	ldr	r3, [pc, #396]	; (8007204 <checkAktifCalisma+0x15e4>)
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 800707c:	4b5e      	ldr	r3, [pc, #376]	; (80071f8 <checkAktifCalisma+0x15d8>)
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007082:	2004      	movs	r0, #4
 8007084:	f7fd ff2c 	bl	8004ee0 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007088:	4b5a      	ldr	r3, [pc, #360]	; (80071f4 <checkAktifCalisma+0x15d4>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <checkAktifCalisma+0x1478>
 8007090:	4b5e      	ldr	r3, [pc, #376]	; (800720c <checkAktifCalisma+0x15ec>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01e      	beq.n	80070d6 <checkAktifCalisma+0x14b6>
 8007098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800709c:	4857      	ldr	r0, [pc, #348]	; (80071fc <checkAktifCalisma+0x15dc>)
 800709e:	f002 f95f 	bl	8009360 <HAL_GPIO_ReadPin>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d116      	bne.n	80070d6 <checkAktifCalisma+0x14b6>
 80070a8:	4b55      	ldr	r3, [pc, #340]	; (8007200 <checkAktifCalisma+0x15e0>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d003      	beq.n	80070b8 <checkAktifCalisma+0x1498>
 80070b0:	4b53      	ldr	r3, [pc, #332]	; (8007200 <checkAktifCalisma+0x15e0>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d10e      	bne.n	80070d6 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80070b8:	4b4b      	ldr	r3, [pc, #300]	; (80071e8 <checkAktifCalisma+0x15c8>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	701a      	strb	r2, [r3, #0]
			convertAndSendData();
 80070be:	f7fe f845 	bl	800514c <convertAndSendData>
			hataKoduLcdGoster(5);
 80070c2:	2005      	movs	r0, #5
 80070c4:	f7fd ff60 	bl	8004f88 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80070c8:	2005      	movs	r0, #5
 80070ca:	f7fe faf7 	bl	80056bc <hata2EEPROM>
			tablakapisivicihatasi=1;
 80070ce:	4b50      	ldr	r3, [pc, #320]	; (8007210 <checkAktifCalisma+0x15f0>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	e023      	b.n	800711e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80070d6:	4b4e      	ldr	r3, [pc, #312]	; (8007210 <checkAktifCalisma+0x15f0>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01f      	beq.n	800711e <checkAktifCalisma+0x14fe>
 80070de:	4b4a      	ldr	r3, [pc, #296]	; (8007208 <checkAktifCalisma+0x15e8>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01b      	beq.n	800711e <checkAktifCalisma+0x14fe>
 80070e6:	4b43      	ldr	r3, [pc, #268]	; (80071f4 <checkAktifCalisma+0x15d4>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	f083 0301 	eor.w	r3, r3, #1
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d014      	beq.n	800711e <checkAktifCalisma+0x14fe>
 80070f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070f8:	4840      	ldr	r0, [pc, #256]	; (80071fc <checkAktifCalisma+0x15dc>)
 80070fa:	f002 f931 	bl	8009360 <HAL_GPIO_ReadPin>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10c      	bne.n	800711e <checkAktifCalisma+0x14fe>
 8007104:	4b40      	ldr	r3, [pc, #256]	; (8007208 <checkAktifCalisma+0x15e8>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d008      	beq.n	800711e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800710c:	4b40      	ldr	r3, [pc, #256]	; (8007210 <checkAktifCalisma+0x15f0>)
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007112:	4b3e      	ldr	r3, [pc, #248]	; (800720c <checkAktifCalisma+0x15ec>)
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007118:	2005      	movs	r0, #5
 800711a:	f7fd fee1 	bl	8004ee0 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800711e:	4b30      	ldr	r3, [pc, #192]	; (80071e0 <checkAktifCalisma+0x15c0>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d107      	bne.n	8007136 <checkAktifCalisma+0x1516>
 8007126:	4b2a      	ldr	r3, [pc, #168]	; (80071d0 <checkAktifCalisma+0x15b0>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d103      	bne.n	8007136 <checkAktifCalisma+0x1516>
 800712e:	4b39      	ldr	r3, [pc, #228]	; (8007214 <checkAktifCalisma+0x15f4>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d016      	beq.n	8007164 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8007136:	4b38      	ldr	r3, [pc, #224]	; (8007218 <checkAktifCalisma+0x15f8>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4b38      	ldr	r3, [pc, #224]	; (800721c <checkAktifCalisma+0x15fc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	4a37      	ldr	r2, [pc, #220]	; (8007220 <checkAktifCalisma+0x1600>)
 8007142:	7812      	ldrb	r2, [r2, #0]
 8007144:	4293      	cmp	r3, r2
 8007146:	d30d      	bcc.n	8007164 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8007148:	4b27      	ldr	r3, [pc, #156]	; (80071e8 <checkAktifCalisma+0x15c8>)
 800714a:	2201      	movs	r2, #1
 800714c:	701a      	strb	r2, [r3, #0]
			  	convertAndSendData();
 800714e:	f7fd fffd 	bl	800514c <convertAndSendData>
			  	hataKoduLcdGoster(6);
 8007152:	2006      	movs	r0, #6
 8007154:	f7fd ff18 	bl	8004f88 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007158:	2006      	movs	r0, #6
 800715a:	f7fe faaf 	bl	80056bc <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 800715e:	4b31      	ldr	r3, [pc, #196]	; (8007224 <checkAktifCalisma+0x1604>)
 8007160:	2201      	movs	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007164:	4b2f      	ldr	r3, [pc, #188]	; (8007224 <checkAktifCalisma+0x1604>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d013      	beq.n	8007194 <checkAktifCalisma+0x1574>
 800716c:	2108      	movs	r1, #8
 800716e:	4823      	ldr	r0, [pc, #140]	; (80071fc <checkAktifCalisma+0x15dc>)
 8007170:	f002 f8f6 	bl	8009360 <HAL_GPIO_ReadPin>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00c      	beq.n	8007194 <checkAktifCalisma+0x1574>
 800717a:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <checkAktifCalisma+0x15d4>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	f083 0301 	eor.w	r3, r3, #1
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8007188:	4b26      	ldr	r3, [pc, #152]	; (8007224 <checkAktifCalisma+0x1604>)
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800718e:	2006      	movs	r0, #6
 8007190:	f7fd fea6 	bl	8004ee0 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007194:	4b24      	ldr	r3, [pc, #144]	; (8007228 <checkAktifCalisma+0x1608>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <checkAktifCalisma+0x1594>
 800719c:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <checkAktifCalisma+0x15b0>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d107      	bne.n	80071b4 <checkAktifCalisma+0x1594>
 80071a4:	4b21      	ldr	r3, [pc, #132]	; (800722c <checkAktifCalisma+0x160c>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <checkAktifCalisma+0x1594>
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <checkAktifCalisma+0x15f4>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d03f      	beq.n	8007234 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80071b4:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <checkAktifCalisma+0x1610>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80071ba:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <checkAktifCalisma+0x15d8>)
 80071bc:	2201      	movs	r2, #1
 80071be:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80071c0:	4b12      	ldr	r3, [pc, #72]	; (800720c <checkAktifCalisma+0x15ec>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e03c      	b.n	8007242 <checkAktifCalisma+0x1622>
 80071c8:	20000361 	.word	0x20000361
 80071cc:	20000367 	.word	0x20000367
 80071d0:	20000348 	.word	0x20000348
 80071d4:	20000371 	.word	0x20000371
 80071d8:	20000313 	.word	0x20000313
 80071dc:	20000317 	.word	0x20000317
 80071e0:	20000364 	.word	0x20000364
 80071e4:	40011000 	.word	0x40011000
 80071e8:	20000365 	.word	0x20000365
 80071ec:	2000036e 	.word	0x2000036e
 80071f0:	40010c00 	.word	0x40010c00
 80071f4:	2000035e 	.word	0x2000035e
 80071f8:	20000372 	.word	0x20000372
 80071fc:	40010800 	.word	0x40010800
 8007200:	20000318 	.word	0x20000318
 8007204:	2000036f 	.word	0x2000036f
 8007208:	20000352 	.word	0x20000352
 800720c:	20000373 	.word	0x20000373
 8007210:	20000370 	.word	0x20000370
 8007214:	20000347 	.word	0x20000347
 8007218:	20000290 	.word	0x20000290
 800721c:	200002a4 	.word	0x200002a4
 8007220:	20000328 	.word	0x20000328
 8007224:	2000035f 	.word	0x2000035f
 8007228:	20000345 	.word	0x20000345
 800722c:	20000346 	.word	0x20000346
 8007230:	20000366 	.word	0x20000366
		} else {
			makineCalisiyor=1;
 8007234:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <checkAktifCalisma+0x1690>)
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800723a:	4b1e      	ldr	r3, [pc, #120]	; (80072b4 <checkAktifCalisma+0x1694>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1e      	ldr	r2, [pc, #120]	; (80072b8 <checkAktifCalisma+0x1698>)
 8007240:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007242:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <checkAktifCalisma+0x169c>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d02f      	beq.n	80072aa <checkAktifCalisma+0x168a>
 800724a:	4b1d      	ldr	r3, [pc, #116]	; (80072c0 <checkAktifCalisma+0x16a0>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f083 0301 	eor.w	r3, r3, #1
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d028      	beq.n	80072aa <checkAktifCalisma+0x168a>
 8007258:	4b1a      	ldr	r3, [pc, #104]	; (80072c4 <checkAktifCalisma+0x16a4>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f083 0301 	eor.w	r3, r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d021      	beq.n	80072aa <checkAktifCalisma+0x168a>
 8007266:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <checkAktifCalisma+0x16a8>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f083 0301 	eor.w	r3, r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01a      	beq.n	80072aa <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007274:	4b15      	ldr	r3, [pc, #84]	; (80072cc <checkAktifCalisma+0x16ac>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	f083 0301 	eor.w	r3, r3, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d013      	beq.n	80072aa <checkAktifCalisma+0x168a>
 8007282:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <checkAktifCalisma+0x16b0>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	f083 0301 	eor.w	r3, r3, #1
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00c      	beq.n	80072aa <checkAktifCalisma+0x168a>
 8007290:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <checkAktifCalisma+0x16b4>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f083 0301 	eor.w	r3, r3, #1
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <checkAktifCalisma+0x168a>
			hataVar=0;
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <checkAktifCalisma+0x169c>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80072a4:	2007      	movs	r0, #7
 80072a6:	f7fd fe1b 	bl	8004ee0 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000366 	.word	0x20000366
 80072b4:	20000290 	.word	0x20000290
 80072b8:	200002a4 	.word	0x200002a4
 80072bc:	20000365 	.word	0x20000365
 80072c0:	20000360 	.word	0x20000360
 80072c4:	20000361 	.word	0x20000361
 80072c8:	2000036e 	.word	0x2000036e
 80072cc:	2000036f 	.word	0x2000036f
 80072d0:	20000370 	.word	0x20000370
 80072d4:	2000035f 	.word	0x2000035f

080072d8 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80072dc:	4b8b      	ldr	r3, [pc, #556]	; (800750c <checkDemoModCalisma+0x234>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	f040 8229 	bne.w	8007738 <checkDemoModCalisma+0x460>
 80072e6:	4b8a      	ldr	r3, [pc, #552]	; (8007510 <checkDemoModCalisma+0x238>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8224 	beq.w	8007738 <checkDemoModCalisma+0x460>
 80072f0:	4b88      	ldr	r3, [pc, #544]	; (8007514 <checkDemoModCalisma+0x23c>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f040 821f 	bne.w	8007738 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80072fa:	2102      	movs	r1, #2
 80072fc:	4886      	ldr	r0, [pc, #536]	; (8007518 <checkDemoModCalisma+0x240>)
 80072fe:	f002 f82f 	bl	8009360 <HAL_GPIO_ReadPin>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d11d      	bne.n	8007344 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007308:	4b84      	ldr	r3, [pc, #528]	; (800751c <checkDemoModCalisma+0x244>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	f083 0301 	eor.w	r3, r3, #1
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d016      	beq.n	8007344 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007316:	4b82      	ldr	r3, [pc, #520]	; (8007520 <checkDemoModCalisma+0x248>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f083 0301 	eor.w	r3, r3, #1
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00f      	beq.n	8007344 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007324:	4b7f      	ldr	r3, [pc, #508]	; (8007524 <checkDemoModCalisma+0x24c>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f083 0301 	eor.w	r3, r3, #1
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007332:	2201      	movs	r2, #1
 8007334:	2104      	movs	r1, #4
 8007336:	487c      	ldr	r0, [pc, #496]	; (8007528 <checkDemoModCalisma+0x250>)
 8007338:	f002 f829 	bl	800938e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800733c:	4b7b      	ldr	r3, [pc, #492]	; (800752c <checkDemoModCalisma+0x254>)
 800733e:	2201      	movs	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
 8007342:	e00e      	b.n	8007362 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007344:	2102      	movs	r1, #2
 8007346:	4874      	ldr	r0, [pc, #464]	; (8007518 <checkDemoModCalisma+0x240>)
 8007348:	f002 f80a 	bl	8009360 <HAL_GPIO_ReadPin>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d107      	bne.n	8007362 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007352:	2200      	movs	r2, #0
 8007354:	2104      	movs	r1, #4
 8007356:	4874      	ldr	r0, [pc, #464]	; (8007528 <checkDemoModCalisma+0x250>)
 8007358:	f002 f819 	bl	800938e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 800735c:	4b73      	ldr	r3, [pc, #460]	; (800752c <checkDemoModCalisma+0x254>)
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007362:	4b72      	ldr	r3, [pc, #456]	; (800752c <checkDemoModCalisma+0x254>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <checkDemoModCalisma+0xaa>
 800736a:	4b6d      	ldr	r3, [pc, #436]	; (8007520 <checkDemoModCalisma+0x248>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d107      	bne.n	8007382 <checkDemoModCalisma+0xaa>
 8007372:	4b6c      	ldr	r3, [pc, #432]	; (8007524 <checkDemoModCalisma+0x24c>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d103      	bne.n	8007382 <checkDemoModCalisma+0xaa>
 800737a:	4b68      	ldr	r3, [pc, #416]	; (800751c <checkDemoModCalisma+0x244>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007382:	2201      	movs	r2, #1
 8007384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007388:	4867      	ldr	r0, [pc, #412]	; (8007528 <checkDemoModCalisma+0x250>)
 800738a:	f002 f800 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800738e:	2201      	movs	r2, #1
 8007390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007394:	4864      	ldr	r0, [pc, #400]	; (8007528 <checkDemoModCalisma+0x250>)
 8007396:	f001 fffa 	bl	800938e <HAL_GPIO_WritePin>
 800739a:	e00b      	b.n	80073b4 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800739c:	2200      	movs	r2, #0
 800739e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073a2:	4861      	ldr	r0, [pc, #388]	; (8007528 <checkDemoModCalisma+0x250>)
 80073a4:	f001 fff3 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80073a8:	2200      	movs	r2, #0
 80073aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073ae:	485e      	ldr	r0, [pc, #376]	; (8007528 <checkDemoModCalisma+0x250>)
 80073b0:	f001 ffed 	bl	800938e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80073b4:	2102      	movs	r1, #2
 80073b6:	4858      	ldr	r0, [pc, #352]	; (8007518 <checkDemoModCalisma+0x240>)
 80073b8:	f001 ffd2 	bl	8009360 <HAL_GPIO_ReadPin>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d10d      	bne.n	80073de <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80073c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073c6:	4854      	ldr	r0, [pc, #336]	; (8007518 <checkDemoModCalisma+0x240>)
 80073c8:	f001 ffca 	bl	8009360 <HAL_GPIO_ReadPin>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d105      	bne.n	80073de <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80073d2:	4b56      	ldr	r3, [pc, #344]	; (800752c <checkDemoModCalisma+0x254>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	f083 0301 	eor.w	r3, r3, #1
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80073de:	2102      	movs	r1, #2
 80073e0:	484d      	ldr	r0, [pc, #308]	; (8007518 <checkDemoModCalisma+0x240>)
 80073e2:	f001 ffbd 	bl	8009360 <HAL_GPIO_ReadPin>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d125      	bne.n	8007438 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80073ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073f0:	4849      	ldr	r0, [pc, #292]	; (8007518 <checkDemoModCalisma+0x240>)
 80073f2:	f001 ffb5 	bl	8009360 <HAL_GPIO_ReadPin>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d11d      	bne.n	8007438 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80073fc:	4b4b      	ldr	r3, [pc, #300]	; (800752c <checkDemoModCalisma+0x254>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	f083 0301 	eor.w	r3, r3, #1
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d016      	beq.n	8007438 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800740a:	4b44      	ldr	r3, [pc, #272]	; (800751c <checkDemoModCalisma+0x244>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	f083 0301 	eor.w	r3, r3, #1
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00f      	beq.n	8007438 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007418:	4b42      	ldr	r3, [pc, #264]	; (8007524 <checkDemoModCalisma+0x24c>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	f083 0301 	eor.w	r3, r3, #1
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007426:	2201      	movs	r2, #1
 8007428:	2120      	movs	r1, #32
 800742a:	483b      	ldr	r0, [pc, #236]	; (8007518 <checkDemoModCalisma+0x240>)
 800742c:	f001 ffaf 	bl	800938e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007430:	4b3b      	ldr	r3, [pc, #236]	; (8007520 <checkDemoModCalisma+0x248>)
 8007432:	2201      	movs	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e007      	b.n	8007448 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007438:	2200      	movs	r2, #0
 800743a:	2120      	movs	r1, #32
 800743c:	4836      	ldr	r0, [pc, #216]	; (8007518 <checkDemoModCalisma+0x240>)
 800743e:	f001 ffa6 	bl	800938e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007442:	4b37      	ldr	r3, [pc, #220]	; (8007520 <checkDemoModCalisma+0x248>)
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007448:	2102      	movs	r1, #2
 800744a:	4833      	ldr	r0, [pc, #204]	; (8007518 <checkDemoModCalisma+0x240>)
 800744c:	f001 ff88 	bl	8009360 <HAL_GPIO_ReadPin>
 8007450:	4603      	mov	r3, r0
 8007452:	2b01      	cmp	r3, #1
 8007454:	d125      	bne.n	80074a2 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800745a:	482f      	ldr	r0, [pc, #188]	; (8007518 <checkDemoModCalisma+0x240>)
 800745c:	f001 ff80 	bl	8009360 <HAL_GPIO_ReadPin>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d11d      	bne.n	80074a2 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007466:	4b31      	ldr	r3, [pc, #196]	; (800752c <checkDemoModCalisma+0x254>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f083 0301 	eor.w	r3, r3, #1
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d016      	beq.n	80074a2 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007474:	4b2a      	ldr	r3, [pc, #168]	; (8007520 <checkDemoModCalisma+0x248>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f083 0301 	eor.w	r3, r3, #1
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00f      	beq.n	80074a2 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007482:	4b26      	ldr	r3, [pc, #152]	; (800751c <checkDemoModCalisma+0x244>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f083 0301 	eor.w	r3, r3, #1
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007490:	2201      	movs	r2, #1
 8007492:	2110      	movs	r1, #16
 8007494:	4820      	ldr	r0, [pc, #128]	; (8007518 <checkDemoModCalisma+0x240>)
 8007496:	f001 ff7a 	bl	800938e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800749a:	4b22      	ldr	r3, [pc, #136]	; (8007524 <checkDemoModCalisma+0x24c>)
 800749c:	2201      	movs	r2, #1
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	e007      	b.n	80074b2 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80074a2:	2200      	movs	r2, #0
 80074a4:	2110      	movs	r1, #16
 80074a6:	481c      	ldr	r0, [pc, #112]	; (8007518 <checkDemoModCalisma+0x240>)
 80074a8:	f001 ff71 	bl	800938e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80074ac:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <checkDemoModCalisma+0x24c>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80074b2:	2104      	movs	r1, #4
 80074b4:	4818      	ldr	r0, [pc, #96]	; (8007518 <checkDemoModCalisma+0x240>)
 80074b6:	f001 ff53 	bl	8009360 <HAL_GPIO_ReadPin>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d139      	bne.n	8007534 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80074c0:	4b1a      	ldr	r3, [pc, #104]	; (800752c <checkDemoModCalisma+0x254>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f083 0301 	eor.w	r3, r3, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d032      	beq.n	8007534 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80074ce:	4b15      	ldr	r3, [pc, #84]	; (8007524 <checkDemoModCalisma+0x24c>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	f083 0301 	eor.w	r3, r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d02b      	beq.n	8007534 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80074dc:	4b10      	ldr	r3, [pc, #64]	; (8007520 <checkDemoModCalisma+0x248>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	f083 0301 	eor.w	r3, r3, #1
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d024      	beq.n	8007534 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80074ea:	2201      	movs	r2, #1
 80074ec:	2102      	movs	r1, #2
 80074ee:	480e      	ldr	r0, [pc, #56]	; (8007528 <checkDemoModCalisma+0x250>)
 80074f0:	f001 ff4d 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80074f4:	2201      	movs	r2, #1
 80074f6:	2101      	movs	r1, #1
 80074f8:	480b      	ldr	r0, [pc, #44]	; (8007528 <checkDemoModCalisma+0x250>)
 80074fa:	f001 ff48 	bl	800938e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80074fe:	4b07      	ldr	r3, [pc, #28]	; (800751c <checkDemoModCalisma+0x244>)
 8007500:	2201      	movs	r2, #1
 8007502:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <checkDemoModCalisma+0x258>)
 8007506:	2201      	movs	r2, #1
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	e027      	b.n	800755c <checkDemoModCalisma+0x284>
 800750c:	2000032e 	.word	0x2000032e
 8007510:	20000362 	.word	0x20000362
 8007514:	2000032d 	.word	0x2000032d
 8007518:	40011000 	.word	0x40011000
 800751c:	20000369 	.word	0x20000369
 8007520:	2000036a 	.word	0x2000036a
 8007524:	2000036b 	.word	0x2000036b
 8007528:	40010c00 	.word	0x40010c00
 800752c:	20000368 	.word	0x20000368
 8007530:	2000034e 	.word	0x2000034e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007534:	2104      	movs	r1, #4
 8007536:	48a0      	ldr	r0, [pc, #640]	; (80077b8 <checkDemoModCalisma+0x4e0>)
 8007538:	f001 ff12 	bl	8009360 <HAL_GPIO_ReadPin>
 800753c:	4603      	mov	r3, r0
 800753e:	2b01      	cmp	r3, #1
 8007540:	d10c      	bne.n	800755c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007542:	2200      	movs	r2, #0
 8007544:	2102      	movs	r1, #2
 8007546:	489d      	ldr	r0, [pc, #628]	; (80077bc <checkDemoModCalisma+0x4e4>)
 8007548:	f001 ff21 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800754c:	2200      	movs	r2, #0
 800754e:	2101      	movs	r1, #1
 8007550:	489a      	ldr	r0, [pc, #616]	; (80077bc <checkDemoModCalisma+0x4e4>)
 8007552:	f001 ff1c 	bl	800938e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007556:	4b9a      	ldr	r3, [pc, #616]	; (80077c0 <checkDemoModCalisma+0x4e8>)
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800755c:	2104      	movs	r1, #4
 800755e:	4896      	ldr	r0, [pc, #600]	; (80077b8 <checkDemoModCalisma+0x4e0>)
 8007560:	f001 fefe 	bl	8009360 <HAL_GPIO_ReadPin>
 8007564:	4603      	mov	r3, r0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d10d      	bne.n	8007586 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800756a:	2201      	movs	r2, #1
 800756c:	2180      	movs	r1, #128	; 0x80
 800756e:	4895      	ldr	r0, [pc, #596]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 8007570:	f001 ff0d 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007574:	2201      	movs	r2, #1
 8007576:	2120      	movs	r1, #32
 8007578:	4892      	ldr	r0, [pc, #584]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 800757a:	f001 ff08 	bl	800938e <HAL_GPIO_WritePin>
			timer3 = millis;
 800757e:	4b92      	ldr	r3, [pc, #584]	; (80077c8 <checkDemoModCalisma+0x4f0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a92      	ldr	r2, [pc, #584]	; (80077cc <checkDemoModCalisma+0x4f4>)
 8007584:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007586:	4b90      	ldr	r3, [pc, #576]	; (80077c8 <checkDemoModCalisma+0x4f0>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b90      	ldr	r3, [pc, #576]	; (80077cc <checkDemoModCalisma+0x4f4>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b04      	cmp	r3, #4
 8007592:	d909      	bls.n	80075a8 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007594:	2200      	movs	r2, #0
 8007596:	2180      	movs	r1, #128	; 0x80
 8007598:	488a      	ldr	r0, [pc, #552]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 800759a:	f001 fef8 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800759e:	2200      	movs	r2, #0
 80075a0:	2120      	movs	r1, #32
 80075a2:	4888      	ldr	r0, [pc, #544]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 80075a4:	f001 fef3 	bl	800938e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80075a8:	2102      	movs	r1, #2
 80075aa:	4883      	ldr	r0, [pc, #524]	; (80077b8 <checkDemoModCalisma+0x4e0>)
 80075ac:	f001 fed8 	bl	8009360 <HAL_GPIO_ReadPin>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d108      	bne.n	80075c8 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80075b6:	2201      	movs	r2, #1
 80075b8:	2140      	movs	r1, #64	; 0x40
 80075ba:	4882      	ldr	r0, [pc, #520]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 80075bc:	f001 fee7 	bl	800938e <HAL_GPIO_WritePin>
			timer3 = millis;
 80075c0:	4b81      	ldr	r3, [pc, #516]	; (80077c8 <checkDemoModCalisma+0x4f0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a81      	ldr	r2, [pc, #516]	; (80077cc <checkDemoModCalisma+0x4f4>)
 80075c6:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80075c8:	4b7f      	ldr	r3, [pc, #508]	; (80077c8 <checkDemoModCalisma+0x4f0>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4b7f      	ldr	r3, [pc, #508]	; (80077cc <checkDemoModCalisma+0x4f4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d904      	bls.n	80075e0 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80075d6:	2200      	movs	r2, #0
 80075d8:	2140      	movs	r1, #64	; 0x40
 80075da:	487a      	ldr	r0, [pc, #488]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 80075dc:	f001 fed7 	bl	800938e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80075e0:	4b7b      	ldr	r3, [pc, #492]	; (80077d0 <checkDemoModCalisma+0x4f8>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d058      	beq.n	800769a <checkDemoModCalisma+0x3c2>
 80075e8:	4b7a      	ldr	r3, [pc, #488]	; (80077d4 <checkDemoModCalisma+0x4fc>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d054      	beq.n	800769a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80075f0:	4b79      	ldr	r3, [pc, #484]	; (80077d8 <checkDemoModCalisma+0x500>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	4b77      	ldr	r3, [pc, #476]	; (80077d8 <checkDemoModCalisma+0x500>)
 80075fa:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80075fc:	4b76      	ldr	r3, [pc, #472]	; (80077d8 <checkDemoModCalisma+0x500>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b09      	cmp	r3, #9
 8007602:	d908      	bls.n	8007616 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007604:	4b74      	ldr	r3, [pc, #464]	; (80077d8 <checkDemoModCalisma+0x500>)
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800760a:	4b74      	ldr	r3, [pc, #464]	; (80077dc <checkDemoModCalisma+0x504>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	3301      	adds	r3, #1
 8007610:	b2da      	uxtb	r2, r3
 8007612:	4b72      	ldr	r3, [pc, #456]	; (80077dc <checkDemoModCalisma+0x504>)
 8007614:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007616:	4b71      	ldr	r3, [pc, #452]	; (80077dc <checkDemoModCalisma+0x504>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b09      	cmp	r3, #9
 800761c:	d908      	bls.n	8007630 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800761e:	4b6f      	ldr	r3, [pc, #444]	; (80077dc <checkDemoModCalisma+0x504>)
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007624:	4b6e      	ldr	r3, [pc, #440]	; (80077e0 <checkDemoModCalisma+0x508>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	b2da      	uxtb	r2, r3
 800762c:	4b6c      	ldr	r3, [pc, #432]	; (80077e0 <checkDemoModCalisma+0x508>)
 800762e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007630:	4b6b      	ldr	r3, [pc, #428]	; (80077e0 <checkDemoModCalisma+0x508>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b09      	cmp	r3, #9
 8007636:	d908      	bls.n	800764a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007638:	4b69      	ldr	r3, [pc, #420]	; (80077e0 <checkDemoModCalisma+0x508>)
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800763e:	4b69      	ldr	r3, [pc, #420]	; (80077e4 <checkDemoModCalisma+0x50c>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	b2da      	uxtb	r2, r3
 8007646:	4b67      	ldr	r3, [pc, #412]	; (80077e4 <checkDemoModCalisma+0x50c>)
 8007648:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800764a:	4b66      	ldr	r3, [pc, #408]	; (80077e4 <checkDemoModCalisma+0x50c>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b09      	cmp	r3, #9
 8007650:	d908      	bls.n	8007664 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007652:	4b64      	ldr	r3, [pc, #400]	; (80077e4 <checkDemoModCalisma+0x50c>)
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007658:	4b63      	ldr	r3, [pc, #396]	; (80077e8 <checkDemoModCalisma+0x510>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	3301      	adds	r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	4b61      	ldr	r3, [pc, #388]	; (80077e8 <checkDemoModCalisma+0x510>)
 8007662:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007664:	4b60      	ldr	r3, [pc, #384]	; (80077e8 <checkDemoModCalisma+0x510>)
 8007666:	781a      	ldrb	r2, [r3, #0]
 8007668:	4b60      	ldr	r3, [pc, #384]	; (80077ec <checkDemoModCalisma+0x514>)
 800766a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800766e:	4b5d      	ldr	r3, [pc, #372]	; (80077e4 <checkDemoModCalisma+0x50c>)
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	4b5e      	ldr	r3, [pc, #376]	; (80077ec <checkDemoModCalisma+0x514>)
 8007674:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007676:	4b5a      	ldr	r3, [pc, #360]	; (80077e0 <checkDemoModCalisma+0x508>)
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	4b5c      	ldr	r3, [pc, #368]	; (80077ec <checkDemoModCalisma+0x514>)
 800767c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800767e:	4b57      	ldr	r3, [pc, #348]	; (80077dc <checkDemoModCalisma+0x504>)
 8007680:	781a      	ldrb	r2, [r3, #0]
 8007682:	4b5a      	ldr	r3, [pc, #360]	; (80077ec <checkDemoModCalisma+0x514>)
 8007684:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007686:	4b54      	ldr	r3, [pc, #336]	; (80077d8 <checkDemoModCalisma+0x500>)
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	4b58      	ldr	r3, [pc, #352]	; (80077ec <checkDemoModCalisma+0x514>)
 800768c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800768e:	4b58      	ldr	r3, [pc, #352]	; (80077f0 <checkDemoModCalisma+0x518>)
 8007690:	2201      	movs	r2, #1
 8007692:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007694:	4b4f      	ldr	r3, [pc, #316]	; (80077d4 <checkDemoModCalisma+0x4fc>)
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800769a:	4b56      	ldr	r3, [pc, #344]	; (80077f4 <checkDemoModCalisma+0x51c>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f040 8087 	bne.w	80077b2 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80076a4:	4a54      	ldr	r2, [pc, #336]	; (80077f8 <checkDemoModCalisma+0x520>)
 80076a6:	2101      	movs	r1, #1
 80076a8:	2002      	movs	r0, #2
 80076aa:	f7f9 f885 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80076ae:	4a53      	ldr	r2, [pc, #332]	; (80077fc <checkDemoModCalisma+0x524>)
 80076b0:	2101      	movs	r1, #1
 80076b2:	2001      	movs	r0, #1
 80076b4:	f7f9 f880 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80076b8:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <checkDemoModCalisma+0x510>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	220a      	movs	r2, #10
 80076be:	4950      	ldr	r1, [pc, #320]	; (8007800 <checkDemoModCalisma+0x528>)
 80076c0:	4618      	mov	r0, r3
 80076c2:	f004 fe79 	bl	800c3b8 <itoa>
			lcd_print(2,12,snum);
 80076c6:	4a4e      	ldr	r2, [pc, #312]	; (8007800 <checkDemoModCalisma+0x528>)
 80076c8:	210c      	movs	r1, #12
 80076ca:	2002      	movs	r0, #2
 80076cc:	f7f9 f874 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80076d0:	4b44      	ldr	r3, [pc, #272]	; (80077e4 <checkDemoModCalisma+0x50c>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	220a      	movs	r2, #10
 80076d6:	494a      	ldr	r1, [pc, #296]	; (8007800 <checkDemoModCalisma+0x528>)
 80076d8:	4618      	mov	r0, r3
 80076da:	f004 fe6d 	bl	800c3b8 <itoa>
			lcd_print(2,13,snum);
 80076de:	4a48      	ldr	r2, [pc, #288]	; (8007800 <checkDemoModCalisma+0x528>)
 80076e0:	210d      	movs	r1, #13
 80076e2:	2002      	movs	r0, #2
 80076e4:	f7f9 f868 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80076e8:	4b3d      	ldr	r3, [pc, #244]	; (80077e0 <checkDemoModCalisma+0x508>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	220a      	movs	r2, #10
 80076ee:	4944      	ldr	r1, [pc, #272]	; (8007800 <checkDemoModCalisma+0x528>)
 80076f0:	4618      	mov	r0, r3
 80076f2:	f004 fe61 	bl	800c3b8 <itoa>
			lcd_print(2,14,snum);
 80076f6:	4a42      	ldr	r2, [pc, #264]	; (8007800 <checkDemoModCalisma+0x528>)
 80076f8:	210e      	movs	r1, #14
 80076fa:	2002      	movs	r0, #2
 80076fc:	f7f9 f85c 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007700:	4b36      	ldr	r3, [pc, #216]	; (80077dc <checkDemoModCalisma+0x504>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	220a      	movs	r2, #10
 8007706:	493e      	ldr	r1, [pc, #248]	; (8007800 <checkDemoModCalisma+0x528>)
 8007708:	4618      	mov	r0, r3
 800770a:	f004 fe55 	bl	800c3b8 <itoa>
			lcd_print(2,15,snum);
 800770e:	4a3c      	ldr	r2, [pc, #240]	; (8007800 <checkDemoModCalisma+0x528>)
 8007710:	210f      	movs	r1, #15
 8007712:	2002      	movs	r0, #2
 8007714:	f7f9 f850 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007718:	4b2f      	ldr	r3, [pc, #188]	; (80077d8 <checkDemoModCalisma+0x500>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	220a      	movs	r2, #10
 800771e:	4938      	ldr	r1, [pc, #224]	; (8007800 <checkDemoModCalisma+0x528>)
 8007720:	4618      	mov	r0, r3
 8007722:	f004 fe49 	bl	800c3b8 <itoa>
			lcd_print(2,16,snum);
 8007726:	4a36      	ldr	r2, [pc, #216]	; (8007800 <checkDemoModCalisma+0x528>)
 8007728:	2110      	movs	r1, #16
 800772a:	2002      	movs	r0, #2
 800772c:	f7f9 f844 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8007730:	4b34      	ldr	r3, [pc, #208]	; (8007804 <checkDemoModCalisma+0x52c>)
 8007732:	2201      	movs	r2, #1
 8007734:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007736:	e03c      	b.n	80077b2 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007738:	4b33      	ldr	r3, [pc, #204]	; (8007808 <checkDemoModCalisma+0x530>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d003      	beq.n	8007748 <checkDemoModCalisma+0x470>
 8007740:	4b2c      	ldr	r3, [pc, #176]	; (80077f4 <checkDemoModCalisma+0x51c>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d134      	bne.n	80077b2 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007748:	2200      	movs	r2, #0
 800774a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800774e:	481b      	ldr	r0, [pc, #108]	; (80077bc <checkDemoModCalisma+0x4e4>)
 8007750:	f001 fe1d 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007754:	2200      	movs	r2, #0
 8007756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800775a:	4818      	ldr	r0, [pc, #96]	; (80077bc <checkDemoModCalisma+0x4e4>)
 800775c:	f001 fe17 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007760:	2200      	movs	r2, #0
 8007762:	2104      	movs	r1, #4
 8007764:	4815      	ldr	r0, [pc, #84]	; (80077bc <checkDemoModCalisma+0x4e4>)
 8007766:	f001 fe12 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800776a:	2200      	movs	r2, #0
 800776c:	2102      	movs	r1, #2
 800776e:	4813      	ldr	r0, [pc, #76]	; (80077bc <checkDemoModCalisma+0x4e4>)
 8007770:	f001 fe0d 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007774:	2200      	movs	r2, #0
 8007776:	2101      	movs	r1, #1
 8007778:	4810      	ldr	r0, [pc, #64]	; (80077bc <checkDemoModCalisma+0x4e4>)
 800777a:	f001 fe08 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800777e:	2200      	movs	r2, #0
 8007780:	2120      	movs	r1, #32
 8007782:	480d      	ldr	r0, [pc, #52]	; (80077b8 <checkDemoModCalisma+0x4e0>)
 8007784:	f001 fe03 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007788:	2200      	movs	r2, #0
 800778a:	2110      	movs	r1, #16
 800778c:	480a      	ldr	r0, [pc, #40]	; (80077b8 <checkDemoModCalisma+0x4e0>)
 800778e:	f001 fdfe 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007792:	2200      	movs	r2, #0
 8007794:	2180      	movs	r1, #128	; 0x80
 8007796:	480b      	ldr	r0, [pc, #44]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 8007798:	f001 fdf9 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800779c:	2200      	movs	r2, #0
 800779e:	2140      	movs	r1, #64	; 0x40
 80077a0:	4808      	ldr	r0, [pc, #32]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 80077a2:	f001 fdf4 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80077a6:	2200      	movs	r2, #0
 80077a8:	2120      	movs	r1, #32
 80077aa:	4806      	ldr	r0, [pc, #24]	; (80077c4 <checkDemoModCalisma+0x4ec>)
 80077ac:	f001 fdef 	bl	800938e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80077b0:	e7ff      	b.n	80077b2 <checkDemoModCalisma+0x4da>
 80077b2:	bf00      	nop
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	40011000 	.word	0x40011000
 80077bc:	40010c00 	.word	0x40010c00
 80077c0:	20000369 	.word	0x20000369
 80077c4:	40010800 	.word	0x40010800
 80077c8:	20000290 	.word	0x20000290
 80077cc:	200002a0 	.word	0x200002a0
 80077d0:	20000368 	.word	0x20000368
 80077d4:	2000034e 	.word	0x2000034e
 80077d8:	2000030d 	.word	0x2000030d
 80077dc:	2000030e 	.word	0x2000030e
 80077e0:	200000a1 	.word	0x200000a1
 80077e4:	200000a2 	.word	0x200000a2
 80077e8:	2000030f 	.word	0x2000030f
 80077ec:	20000218 	.word	0x20000218
 80077f0:	2000033c 	.word	0x2000033c
 80077f4:	2000032d 	.word	0x2000032d
 80077f8:	0800dbe8 	.word	0x0800dbe8
 80077fc:	0800dbf4 	.word	0x0800dbf4
 8007800:	20000288 	.word	0x20000288
 8007804:	20000344 	.word	0x20000344
 8007808:	2000032e 	.word	0x2000032e

0800780c <mergeData>:

char* mergeData() {
 800780c:	b580      	push	{r7, lr}
 800780e:	b09e      	sub	sp, #120	; 0x78
 8007810:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007812:	2300      	movs	r3, #0
 8007814:	643b      	str	r3, [r7, #64]	; 0x40
 8007816:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800781a:	2229      	movs	r2, #41	; 0x29
 800781c:	2100      	movs	r1, #0
 800781e:	4618      	mov	r0, r3
 8007820:	f004 fef1 	bl	800c606 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007824:	4b6a      	ldr	r3, [pc, #424]	; (80079d0 <mergeData+0x1c4>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	713b      	strb	r3, [r7, #4]
 800782a:	4b6a      	ldr	r3, [pc, #424]	; (80079d4 <mergeData+0x1c8>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	717b      	strb	r3, [r7, #5]
 8007830:	4b69      	ldr	r3, [pc, #420]	; (80079d8 <mergeData+0x1cc>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	71bb      	strb	r3, [r7, #6]
 8007836:	4b69      	ldr	r3, [pc, #420]	; (80079dc <mergeData+0x1d0>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
 800783c:	4b68      	ldr	r3, [pc, #416]	; (80079e0 <mergeData+0x1d4>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	723b      	strb	r3, [r7, #8]
 8007842:	4b68      	ldr	r3, [pc, #416]	; (80079e4 <mergeData+0x1d8>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	727b      	strb	r3, [r7, #9]
 8007848:	4b67      	ldr	r3, [pc, #412]	; (80079e8 <mergeData+0x1dc>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	72bb      	strb	r3, [r7, #10]
 800784e:	4b67      	ldr	r3, [pc, #412]	; (80079ec <mergeData+0x1e0>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	72fb      	strb	r3, [r7, #11]
 8007854:	4b66      	ldr	r3, [pc, #408]	; (80079f0 <mergeData+0x1e4>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	733b      	strb	r3, [r7, #12]
 800785a:	4b66      	ldr	r3, [pc, #408]	; (80079f4 <mergeData+0x1e8>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	737b      	strb	r3, [r7, #13]
 8007860:	4b65      	ldr	r3, [pc, #404]	; (80079f8 <mergeData+0x1ec>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	73bb      	strb	r3, [r7, #14]
 8007866:	4b65      	ldr	r3, [pc, #404]	; (80079fc <mergeData+0x1f0>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	4b64      	ldr	r3, [pc, #400]	; (8007a00 <mergeData+0x1f4>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	743b      	strb	r3, [r7, #16]
 8007872:	4b64      	ldr	r3, [pc, #400]	; (8007a04 <mergeData+0x1f8>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	747b      	strb	r3, [r7, #17]
 8007878:	4b63      	ldr	r3, [pc, #396]	; (8007a08 <mergeData+0x1fc>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	74bb      	strb	r3, [r7, #18]
 800787e:	4b63      	ldr	r3, [pc, #396]	; (8007a0c <mergeData+0x200>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	74fb      	strb	r3, [r7, #19]
 8007884:	4b62      	ldr	r3, [pc, #392]	; (8007a10 <mergeData+0x204>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	753b      	strb	r3, [r7, #20]
 800788a:	4b62      	ldr	r3, [pc, #392]	; (8007a14 <mergeData+0x208>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	757b      	strb	r3, [r7, #21]
 8007890:	4b61      	ldr	r3, [pc, #388]	; (8007a18 <mergeData+0x20c>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	75bb      	strb	r3, [r7, #22]
 8007896:	4b61      	ldr	r3, [pc, #388]	; (8007a1c <mergeData+0x210>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	75fb      	strb	r3, [r7, #23]
 800789c:	4b60      	ldr	r3, [pc, #384]	; (8007a20 <mergeData+0x214>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	763b      	strb	r3, [r7, #24]
 80078a2:	4b60      	ldr	r3, [pc, #384]	; (8007a24 <mergeData+0x218>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	767b      	strb	r3, [r7, #25]
 80078a8:	4b5f      	ldr	r3, [pc, #380]	; (8007a28 <mergeData+0x21c>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	76bb      	strb	r3, [r7, #26]
 80078ae:	4b5f      	ldr	r3, [pc, #380]	; (8007a2c <mergeData+0x220>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	76fb      	strb	r3, [r7, #27]
 80078b4:	4b5e      	ldr	r3, [pc, #376]	; (8007a30 <mergeData+0x224>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	773b      	strb	r3, [r7, #28]
 80078ba:	4b5e      	ldr	r3, [pc, #376]	; (8007a34 <mergeData+0x228>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	777b      	strb	r3, [r7, #29]
 80078c0:	4b5d      	ldr	r3, [pc, #372]	; (8007a38 <mergeData+0x22c>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	77bb      	strb	r3, [r7, #30]
 80078c6:	4b5d      	ldr	r3, [pc, #372]	; (8007a3c <mergeData+0x230>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	4b5c      	ldr	r3, [pc, #368]	; (8007a40 <mergeData+0x234>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f887 3020 	strb.w	r3, [r7, #32]
 80078d4:	4b5b      	ldr	r3, [pc, #364]	; (8007a44 <mergeData+0x238>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80078dc:	4b5a      	ldr	r3, [pc, #360]	; (8007a48 <mergeData+0x23c>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078e4:	4b59      	ldr	r3, [pc, #356]	; (8007a4c <mergeData+0x240>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ec:	4b58      	ldr	r3, [pc, #352]	; (8007a50 <mergeData+0x244>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80078f4:	4b57      	ldr	r3, [pc, #348]	; (8007a54 <mergeData+0x248>)
 80078f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80078fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80078fe:	4b55      	ldr	r3, [pc, #340]	; (8007a54 <mergeData+0x248>)
 8007900:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8007908:	4b52      	ldr	r3, [pc, #328]	; (8007a54 <mergeData+0x248>)
 800790a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800790e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 8007912:	4b50      	ldr	r3, [pc, #320]	; (8007a54 <mergeData+0x248>)
 8007914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007918:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 800791c:	4b4d      	ldr	r3, [pc, #308]	; (8007a54 <mergeData+0x248>)
 800791e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007922:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8007926:	4b4b      	ldr	r3, [pc, #300]	; (8007a54 <mergeData+0x248>)
 8007928:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800792c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8007930:	4b48      	ldr	r3, [pc, #288]	; (8007a54 <mergeData+0x248>)
 8007932:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 800793a:	4b46      	ldr	r3, [pc, #280]	; (8007a54 <mergeData+0x248>)
 800793c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007940:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8007944:	4b43      	ldr	r3, [pc, #268]	; (8007a54 <mergeData+0x248>)
 8007946:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800794a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800794e:	4b41      	ldr	r3, [pc, #260]	; (8007a54 <mergeData+0x248>)
 8007950:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007954:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8007958:	4b3e      	ldr	r3, [pc, #248]	; (8007a54 <mergeData+0x248>)
 800795a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800795e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007962:	4b3d      	ldr	r3, [pc, #244]	; (8007a58 <mergeData+0x24c>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800796a:	2300      	movs	r3, #0
 800796c:	677b      	str	r3, [r7, #116]	; 0x74
 800796e:	e015      	b.n	800799c <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8007970:	1d3a      	adds	r2, r7, #4
 8007972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007974:	4413      	add	r3, r2
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800797e:	4937      	ldr	r1, [pc, #220]	; (8007a5c <mergeData+0x250>)
 8007980:	4618      	mov	r0, r3
 8007982:	f004 fdcf 	bl	800c524 <siprintf>
	    strcat(combinedString, temp);
 8007986:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800798a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800798e:	4611      	mov	r1, r2
 8007990:	4618      	mov	r0, r3
 8007992:	f004 fe29 	bl	800c5e8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007998:	3301      	adds	r3, #1
 800799a:	677b      	str	r3, [r7, #116]	; 0x74
 800799c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800799e:	2b2c      	cmp	r3, #44	; 0x2c
 80079a0:	d9e6      	bls.n	8007970 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80079a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7f8 fc3c 	bl	8000224 <strlen>
 80079ac:	4603      	mov	r3, r0
 80079ae:	3301      	adds	r3, #1
 80079b0:	4618      	mov	r0, r3
 80079b2:	f004 fd03 	bl	800c3bc <malloc>
 80079b6:	4603      	mov	r3, r0
 80079b8:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80079ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079be:	4619      	mov	r1, r3
 80079c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80079c2:	f004 fe65 	bl	800c690 <strcpy>
	return result;
 80079c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3778      	adds	r7, #120	; 0x78
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	2000031f 	.word	0x2000031f
 80079d4:	20000311 	.word	0x20000311
 80079d8:	20000314 	.word	0x20000314
 80079dc:	20000315 	.word	0x20000315
 80079e0:	20000316 	.word	0x20000316
 80079e4:	2000031d 	.word	0x2000031d
 80079e8:	20000317 	.word	0x20000317
 80079ec:	20000318 	.word	0x20000318
 80079f0:	2000031c 	.word	0x2000031c
 80079f4:	20000319 	.word	0x20000319
 80079f8:	20000329 	.word	0x20000329
 80079fc:	2000031a 	.word	0x2000031a
 8007a00:	2000032a 	.word	0x2000032a
 8007a04:	2000031b 	.word	0x2000031b
 8007a08:	2000032b 	.word	0x2000032b
 8007a0c:	2000031e 	.word	0x2000031e
 8007a10:	20000320 	.word	0x20000320
 8007a14:	20000321 	.word	0x20000321
 8007a18:	20000322 	.word	0x20000322
 8007a1c:	20000323 	.word	0x20000323
 8007a20:	20000324 	.word	0x20000324
 8007a24:	20000325 	.word	0x20000325
 8007a28:	20000326 	.word	0x20000326
 8007a2c:	20000327 	.word	0x20000327
 8007a30:	20000328 	.word	0x20000328
 8007a34:	2000032c 	.word	0x2000032c
 8007a38:	2000032e 	.word	0x2000032e
 8007a3c:	2000030d 	.word	0x2000030d
 8007a40:	2000030e 	.word	0x2000030e
 8007a44:	200000a1 	.word	0x200000a1
 8007a48:	200000a2 	.word	0x200000a2
 8007a4c:	2000030f 	.word	0x2000030f
 8007a50:	20000331 	.word	0x20000331
 8007a54:	20000218 	.word	0x20000218
 8007a58:	200000a0 	.word	0x200000a0
 8007a5c:	0800dc08 	.word	0x0800dc08

08007a60 <mainLoop>:

void mainLoop() {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007a66:	f7fd ffef 	bl	8005a48 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	48ad      	ldr	r0, [pc, #692]	; (8007d24 <mainLoop+0x2c4>)
 8007a6e:	f001 fc77 	bl	8009360 <HAL_GPIO_ReadPin>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d136      	bne.n	8007ae6 <mainLoop+0x86>
 8007a78:	2108      	movs	r1, #8
 8007a7a:	48ab      	ldr	r0, [pc, #684]	; (8007d28 <mainLoop+0x2c8>)
 8007a7c:	f001 fc70 	bl	8009360 <HAL_GPIO_ReadPin>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d12f      	bne.n	8007ae6 <mainLoop+0x86>
 8007a86:	2102      	movs	r1, #2
 8007a88:	48a6      	ldr	r0, [pc, #664]	; (8007d24 <mainLoop+0x2c4>)
 8007a8a:	f001 fc69 	bl	8009360 <HAL_GPIO_ReadPin>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d128      	bne.n	8007ae6 <mainLoop+0x86>
 8007a94:	2104      	movs	r1, #4
 8007a96:	48a3      	ldr	r0, [pc, #652]	; (8007d24 <mainLoop+0x2c4>)
 8007a98:	f001 fc62 	bl	8009360 <HAL_GPIO_ReadPin>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d121      	bne.n	8007ae6 <mainLoop+0x86>
 8007aa2:	2108      	movs	r1, #8
 8007aa4:	489f      	ldr	r0, [pc, #636]	; (8007d24 <mainLoop+0x2c4>)
 8007aa6:	f001 fc5b 	bl	8009360 <HAL_GPIO_ReadPin>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d11a      	bne.n	8007ae6 <mainLoop+0x86>
 8007ab0:	2180      	movs	r1, #128	; 0x80
 8007ab2:	489d      	ldr	r0, [pc, #628]	; (8007d28 <mainLoop+0x2c8>)
 8007ab4:	f001 fc54 	bl	8009360 <HAL_GPIO_ReadPin>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d113      	bne.n	8007ae6 <mainLoop+0x86>
 8007abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ac2:	4899      	ldr	r0, [pc, #612]	; (8007d28 <mainLoop+0x2c8>)
 8007ac4:	f001 fc4c 	bl	8009360 <HAL_GPIO_ReadPin>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d10b      	bne.n	8007ae6 <mainLoop+0x86>
 8007ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ad2:	4895      	ldr	r0, [pc, #596]	; (8007d28 <mainLoop+0x2c8>)
 8007ad4:	f001 fc44 	bl	8009360 <HAL_GPIO_ReadPin>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d103      	bne.n	8007ae6 <mainLoop+0x86>
			butonKontrol=0;
 8007ade:	4b93      	ldr	r3, [pc, #588]	; (8007d2c <mainLoop+0x2cc>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e003      	b.n	8007aee <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007ae6:	4b92      	ldr	r3, [pc, #584]	; (8007d30 <mainLoop+0x2d0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a92      	ldr	r2, [pc, #584]	; (8007d34 <mainLoop+0x2d4>)
 8007aec:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007aee:	4b92      	ldr	r3, [pc, #584]	; (8007d38 <mainLoop+0x2d8>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d03a      	beq.n	8007b6c <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007af6:	bf00      	nop
 8007af8:	4890      	ldr	r0, [pc, #576]	; (8007d3c <mainLoop+0x2dc>)
 8007afa:	f002 fa5a 	bl	8009fb2 <HAL_I2C_GetError>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d0f9      	beq.n	8007af8 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b04:	bf00      	nop
 8007b06:	488d      	ldr	r0, [pc, #564]	; (8007d3c <mainLoop+0x2dc>)
 8007b08:	f002 fa46 	bl	8009f98 <HAL_I2C_GetState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d1f9      	bne.n	8007b06 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007b12:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b16:	9302      	str	r3, [sp, #8]
 8007b18:	236e      	movs	r3, #110	; 0x6e
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	4b88      	ldr	r3, [pc, #544]	; (8007d40 <mainLoop+0x2e0>)
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	236e      	movs	r3, #110	; 0x6e
 8007b22:	2200      	movs	r2, #0
 8007b24:	21a0      	movs	r1, #160	; 0xa0
 8007b26:	4885      	ldr	r0, [pc, #532]	; (8007d3c <mainLoop+0x2dc>)
 8007b28:	f001 fed4 	bl	80098d4 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8007b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b30:	f000 fe46 	bl	80087c0 <HAL_Delay>

		  hafizaYaz=0;
 8007b34:	4b80      	ldr	r3, [pc, #512]	; (8007d38 <mainLoop+0x2d8>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8007b3a:	4b82      	ldr	r3, [pc, #520]	; (8007d44 <mainLoop+0x2e4>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8007b42:	4a81      	ldr	r2, [pc, #516]	; (8007d48 <mainLoop+0x2e8>)
 8007b44:	2101      	movs	r1, #1
 8007b46:	2002      	movs	r0, #2
 8007b48:	f7f8 fe36 	bl	80007b8 <lcd_print>
 8007b4c:	e008      	b.n	8007b60 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8007b4e:	4b7d      	ldr	r3, [pc, #500]	; (8007d44 <mainLoop+0x2e4>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d104      	bne.n	8007b60 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8007b56:	4a7d      	ldr	r2, [pc, #500]	; (8007d4c <mainLoop+0x2ec>)
 8007b58:	2101      	movs	r1, #1
 8007b5a:	2002      	movs	r0, #2
 8007b5c:	f7f8 fe2c 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 8007b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b64:	f000 fe2c 	bl	80087c0 <HAL_Delay>
		  lcd_clear();
 8007b68:	f7f8 fe52 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007b6c:	4b78      	ldr	r3, [pc, #480]	; (8007d50 <mainLoop+0x2f0>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f083 0301 	eor.w	r3, r3, #1
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d06e      	beq.n	8007c58 <mainLoop+0x1f8>
 8007b7a:	4870      	ldr	r0, [pc, #448]	; (8007d3c <mainLoop+0x2dc>)
 8007b7c:	f002 fa0c 	bl	8009f98 <HAL_I2C_GetState>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d168      	bne.n	8007c58 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8007b86:	4b73      	ldr	r3, [pc, #460]	; (8007d54 <mainLoop+0x2f4>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f083 0301 	eor.w	r3, r3, #1
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d044      	beq.n	8007c1e <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007b94:	4a70      	ldr	r2, [pc, #448]	; (8007d58 <mainLoop+0x2f8>)
 8007b96:	2101      	movs	r1, #1
 8007b98:	2001      	movs	r0, #1
 8007b9a:	f7f8 fe0d 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 8007b9e:	4b69      	ldr	r3, [pc, #420]	; (8007d44 <mainLoop+0x2e4>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8007ba6:	4a6d      	ldr	r2, [pc, #436]	; (8007d5c <mainLoop+0x2fc>)
 8007ba8:	2101      	movs	r1, #1
 8007baa:	2002      	movs	r0, #2
 8007bac:	f7f8 fe04 	bl	80007b8 <lcd_print>
 8007bb0:	e008      	b.n	8007bc4 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8007bb2:	4b64      	ldr	r3, [pc, #400]	; (8007d44 <mainLoop+0x2e4>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d104      	bne.n	8007bc4 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8007bba:	4a69      	ldr	r2, [pc, #420]	; (8007d60 <mainLoop+0x300>)
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	2002      	movs	r0, #2
 8007bc0:	f7f8 fdfa 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 8007bc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bc8:	f000 fdfa 	bl	80087c0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007bcc:	bf00      	nop
 8007bce:	485b      	ldr	r0, [pc, #364]	; (8007d3c <mainLoop+0x2dc>)
 8007bd0:	f002 f9ef 	bl	8009fb2 <HAL_I2C_GetError>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d0f9      	beq.n	8007bce <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007bda:	e003      	b.n	8007be4 <mainLoop+0x184>
				  HAL_Delay(1000);
 8007bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007be0:	f000 fdee 	bl	80087c0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007be4:	4855      	ldr	r0, [pc, #340]	; (8007d3c <mainLoop+0x2dc>)
 8007be6:	f002 f9d7 	bl	8009f98 <HAL_I2C_GetState>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d1f5      	bne.n	8007bdc <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8007bf0:	4b54      	ldr	r3, [pc, #336]	; (8007d44 <mainLoop+0x2e4>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8007bf8:	4a5a      	ldr	r2, [pc, #360]	; (8007d64 <mainLoop+0x304>)
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	2002      	movs	r0, #2
 8007bfe:	f7f8 fddb 	bl	80007b8 <lcd_print>
 8007c02:	e008      	b.n	8007c16 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8007c04:	4b4f      	ldr	r3, [pc, #316]	; (8007d44 <mainLoop+0x2e4>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d104      	bne.n	8007c16 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8007c0c:	4a56      	ldr	r2, [pc, #344]	; (8007d68 <mainLoop+0x308>)
 8007c0e:	2101      	movs	r1, #1
 8007c10:	2002      	movs	r0, #2
 8007c12:	f7f8 fdd1 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 8007c16:	4b4f      	ldr	r3, [pc, #316]	; (8007d54 <mainLoop+0x2f4>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	e014      	b.n	8007c48 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8007c1e:	4b49      	ldr	r3, [pc, #292]	; (8007d44 <mainLoop+0x2e4>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8007c26:	4a51      	ldr	r2, [pc, #324]	; (8007d6c <mainLoop+0x30c>)
 8007c28:	2101      	movs	r1, #1
 8007c2a:	2002      	movs	r0, #2
 8007c2c:	f7f8 fdc4 	bl	80007b8 <lcd_print>
 8007c30:	e008      	b.n	8007c44 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8007c32:	4b44      	ldr	r3, [pc, #272]	; (8007d44 <mainLoop+0x2e4>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d104      	bne.n	8007c44 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8007c3a:	4a4d      	ldr	r2, [pc, #308]	; (8007d70 <mainLoop+0x310>)
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	2002      	movs	r0, #2
 8007c40:	f7f8 fdba 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 8007c44:	f7f8 fde4 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 8007c48:	f7f8 fde2 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	f7fd fab1 	bl	80051b4 <eepromKontrol>
		  hafizaOku=1;
 8007c52:	4b3f      	ldr	r3, [pc, #252]	; (8007d50 <mainLoop+0x2f0>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007c58:	4b46      	ldr	r3, [pc, #280]	; (8007d74 <mainLoop+0x314>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d11c      	bne.n	8007c9a <mainLoop+0x23a>
 8007c60:	4b45      	ldr	r3, [pc, #276]	; (8007d78 <mainLoop+0x318>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f083 0301 	eor.w	r3, r3, #1
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d015      	beq.n	8007c9a <mainLoop+0x23a>
 8007c6e:	4b43      	ldr	r3, [pc, #268]	; (8007d7c <mainLoop+0x31c>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d111      	bne.n	8007c9a <mainLoop+0x23a>
			lcd_clear();
 8007c76:	f7f8 fdcb 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 8007c7a:	200a      	movs	r0, #10
 8007c7c:	f000 fda0 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8007c80:	4a3f      	ldr	r2, [pc, #252]	; (8007d80 <mainLoop+0x320>)
 8007c82:	2101      	movs	r1, #1
 8007c84:	2001      	movs	r0, #1
 8007c86:	f7f8 fd97 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8007c8a:	4a3e      	ldr	r2, [pc, #248]	; (8007d84 <mainLoop+0x324>)
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	2002      	movs	r0, #2
 8007c90:	f7f8 fd92 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8007c94:	4b38      	ldr	r3, [pc, #224]	; (8007d78 <mainLoop+0x318>)
 8007c96:	2201      	movs	r2, #1
 8007c98:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007c9a:	4b36      	ldr	r3, [pc, #216]	; (8007d74 <mainLoop+0x314>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d112      	bne.n	8007cc8 <mainLoop+0x268>
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	481f      	ldr	r0, [pc, #124]	; (8007d24 <mainLoop+0x2c4>)
 8007ca6:	f001 fb5b 	bl	8009360 <HAL_GPIO_ReadPin>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d10b      	bne.n	8007cc8 <mainLoop+0x268>
 8007cb0:	2104      	movs	r1, #4
 8007cb2:	481c      	ldr	r0, [pc, #112]	; (8007d24 <mainLoop+0x2c4>)
 8007cb4:	f001 fb54 	bl	8009360 <HAL_GPIO_ReadPin>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d104      	bne.n	8007cc8 <mainLoop+0x268>
			menuGiris=1;
 8007cbe:	4b2d      	ldr	r3, [pc, #180]	; (8007d74 <mainLoop+0x314>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007cc4:	f7f8 fda4 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 8007cc8:	4b2a      	ldr	r3, [pc, #168]	; (8007d74 <mainLoop+0x314>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d102      	bne.n	8007cd6 <mainLoop+0x276>
			menu(&hi2c1);
 8007cd0:	481a      	ldr	r0, [pc, #104]	; (8007d3c <mainLoop+0x2dc>)
 8007cd2:	f7f9 fb63 	bl	800139c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007cda:	4813      	ldr	r0, [pc, #76]	; (8007d28 <mainLoop+0x2c8>)
 8007cdc:	f001 fb6f 	bl	80093be <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ce4:	4828      	ldr	r0, [pc, #160]	; (8007d88 <mainLoop+0x328>)
 8007ce6:	f001 fb3b 	bl	8009360 <HAL_GPIO_ReadPin>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <mainLoop+0x2a6>
 8007cf0:	4b26      	ldr	r3, [pc, #152]	; (8007d8c <mainLoop+0x32c>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	f083 0301 	eor.w	r3, r3, #1
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <mainLoop+0x2a6>
			stopVar=1;
 8007cfe:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <mainLoop+0x330>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	e002      	b.n	8007d0c <mainLoop+0x2ac>
		} else {
			stopVar=0;
 8007d06:	4b22      	ldr	r3, [pc, #136]	; (8007d90 <mainLoop+0x330>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007d0c:	f7fd febc 	bl	8005a88 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007d10:	f7fd feee 	bl	8005af0 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007d14:	f7fd ff32 	bl	8005b7c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007d18:	f7fd ff82 	bl	8005c20 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007d1c:	f7ff fadc 	bl	80072d8 <checkDemoModCalisma>
		checkLCDBacklight();
 8007d20:	e6a1      	b.n	8007a66 <mainLoop+0x6>
 8007d22:	bf00      	nop
 8007d24:	40010800 	.word	0x40010800
 8007d28:	40011000 	.word	0x40011000
 8007d2c:	2000033f 	.word	0x2000033f
 8007d30:	20000290 	.word	0x20000290
 8007d34:	200002ac 	.word	0x200002ac
 8007d38:	2000033c 	.word	0x2000033c
 8007d3c:	2000039c 	.word	0x2000039c
 8007d40:	20000218 	.word	0x20000218
 8007d44:	20000331 	.word	0x20000331
 8007d48:	0800dc0c 	.word	0x0800dc0c
 8007d4c:	0800dc20 	.word	0x0800dc20
 8007d50:	2000033d 	.word	0x2000033d
 8007d54:	2000033e 	.word	0x2000033e
 8007d58:	0800dc34 	.word	0x0800dc34
 8007d5c:	0800dc48 	.word	0x0800dc48
 8007d60:	0800dc5c 	.word	0x0800dc5c
 8007d64:	0800dc70 	.word	0x0800dc70
 8007d68:	0800dc84 	.word	0x0800dc84
 8007d6c:	0800dc98 	.word	0x0800dc98
 8007d70:	0800dcac 	.word	0x0800dcac
 8007d74:	2000032d 	.word	0x2000032d
 8007d78:	20000344 	.word	0x20000344
 8007d7c:	2000032e 	.word	0x2000032e
 8007d80:	0800db70 	.word	0x0800db70
 8007d84:	0800db84 	.word	0x0800db84
 8007d88:	40010c00 	.word	0x40010c00
 8007d8c:	20000365 	.word	0x20000365
 8007d90:	20000362 	.word	0x20000362

08007d94 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3301      	adds	r3, #1
 8007da2:	4a03      	ldr	r2, [pc, #12]	; (8007db0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007da4:	6013      	str	r3, [r2, #0]
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr
 8007db0:	20000290 	.word	0x20000290

08007db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007db8:	f000 fca0 	bl	80086fc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007dbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dc0:	f000 fcfe 	bl	80087c0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007dc4:	f000 f8d0 	bl	8007f68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007dc8:	f000 f9f2 	bl	80081b0 <MX_GPIO_Init>
  MX_CAN_Init();
 8007dcc:	f000 f912 	bl	8007ff4 <MX_CAN_Init>
  MX_I2C1_Init();
 8007dd0:	f000 f944 	bl	800805c <MX_I2C1_Init>
  MX_TIM1_Init();
 8007dd4:	f000 f970 	bl	80080b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007dd8:	f000 f9c0 	bl	800815c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007ddc:	2201      	movs	r2, #1
 8007dde:	2140      	movs	r1, #64	; 0x40
 8007de0:	4853      	ldr	r0, [pc, #332]	; (8007f30 <main+0x17c>)
 8007de2:	f001 fad4 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007de6:	2201      	movs	r2, #1
 8007de8:	2180      	movs	r1, #128	; 0x80
 8007dea:	4851      	ldr	r0, [pc, #324]	; (8007f30 <main+0x17c>)
 8007dec:	f001 facf 	bl	800938e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007df0:	200a      	movs	r0, #10
 8007df2:	f000 fce5 	bl	80087c0 <HAL_Delay>
  lcd_init();
 8007df6:	f7f8 fcad 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 8007dfa:	200a      	movs	r0, #10
 8007dfc:	f000 fce0 	bl	80087c0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e00:	484c      	ldr	r0, [pc, #304]	; (8007f34 <main+0x180>)
 8007e02:	f003 f977 	bl	800b0f4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e06:	bf00      	nop
 8007e08:	484b      	ldr	r0, [pc, #300]	; (8007f38 <main+0x184>)
 8007e0a:	f002 f8d2 	bl	8009fb2 <HAL_I2C_GetError>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d0f9      	beq.n	8007e08 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e14:	bf00      	nop
 8007e16:	4848      	ldr	r0, [pc, #288]	; (8007f38 <main+0x184>)
 8007e18:	f002 f8be 	bl	8009f98 <HAL_I2C_GetState>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d1f9      	bne.n	8007e16 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e22:	2200      	movs	r2, #0
 8007e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e28:	4841      	ldr	r0, [pc, #260]	; (8007f30 <main+0x17c>)
 8007e2a:	f001 fab0 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e34:	483e      	ldr	r0, [pc, #248]	; (8007f30 <main+0x17c>)
 8007e36:	f001 faaa 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2104      	movs	r1, #4
 8007e3e:	483c      	ldr	r0, [pc, #240]	; (8007f30 <main+0x17c>)
 8007e40:	f001 faa5 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e44:	2200      	movs	r2, #0
 8007e46:	2102      	movs	r1, #2
 8007e48:	4839      	ldr	r0, [pc, #228]	; (8007f30 <main+0x17c>)
 8007e4a:	f001 faa0 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2101      	movs	r1, #1
 8007e52:	4837      	ldr	r0, [pc, #220]	; (8007f30 <main+0x17c>)
 8007e54:	f001 fa9b 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2120      	movs	r1, #32
 8007e5c:	4837      	ldr	r0, [pc, #220]	; (8007f3c <main+0x188>)
 8007e5e:	f001 fa96 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2110      	movs	r1, #16
 8007e66:	4835      	ldr	r0, [pc, #212]	; (8007f3c <main+0x188>)
 8007e68:	f001 fa91 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2180      	movs	r1, #128	; 0x80
 8007e70:	4833      	ldr	r0, [pc, #204]	; (8007f40 <main+0x18c>)
 8007e72:	f001 fa8c 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e76:	2200      	movs	r2, #0
 8007e78:	2140      	movs	r1, #64	; 0x40
 8007e7a:	4831      	ldr	r0, [pc, #196]	; (8007f40 <main+0x18c>)
 8007e7c:	f001 fa87 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e80:	2200      	movs	r2, #0
 8007e82:	2120      	movs	r1, #32
 8007e84:	482e      	ldr	r0, [pc, #184]	; (8007f40 <main+0x18c>)
 8007e86:	f001 fa82 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2110      	movs	r1, #16
 8007e8e:	482c      	ldr	r0, [pc, #176]	; (8007f40 <main+0x18c>)
 8007e90:	f001 fa7d 	bl	800938e <HAL_GPIO_WritePin>

  i2cTest();
 8007e94:	f7fd fd2a 	bl	80058ec <i2cTest>
  HAL_Delay(100);
 8007e98:	2064      	movs	r0, #100	; 0x64
 8007e9a:	f000 fc91 	bl	80087c0 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007e9e:	4a29      	ldr	r2, [pc, #164]	; (8007f44 <main+0x190>)
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	2001      	movs	r0, #1
 8007ea4:	f7f8 fc88 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007ea8:	4a27      	ldr	r2, [pc, #156]	; (8007f48 <main+0x194>)
 8007eaa:	2101      	movs	r1, #1
 8007eac:	2002      	movs	r0, #2
 8007eae:	f7f8 fc83 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 8007eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007eb6:	f000 fc83 	bl	80087c0 <HAL_Delay>
  lcd_clear();
 8007eba:	f7f8 fca9 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	f7fd f978 	bl	80051b4 <eepromKontrol>
  HAL_Delay(200);
 8007ec4:	20c8      	movs	r0, #200	; 0xc8
 8007ec6:	f000 fc7b 	bl	80087c0 <HAL_Delay>

  lcd_clear();
 8007eca:	f7f8 fca1 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 8007ece:	20c8      	movs	r0, #200	; 0xc8
 8007ed0:	f000 fc76 	bl	80087c0 <HAL_Delay>

  backLightTimer = millis;
 8007ed4:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <main+0x198>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a1d      	ldr	r2, [pc, #116]	; (8007f50 <main+0x19c>)
 8007eda:	6013      	str	r3, [r2, #0]

  if(iotMode != 0) {
 8007edc:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <main+0x1a0>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01c      	beq.n	8007f1e <main+0x16a>
	  if(machineID[11] == '\0') {
 8007ee4:	4b1c      	ldr	r3, [pc, #112]	; (8007f58 <main+0x1a4>)
 8007ee6:	7adb      	ldrb	r3, [r3, #11]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <main+0x13e>
	  	  takeMachineID(0);
 8007eec:	2000      	movs	r0, #0
 8007eee:	f7f8 fd4b 	bl	8000988 <takeMachineID>
	  }

	  if(wifiSSID[0] == '\0') {
 8007ef2:	4b1a      	ldr	r3, [pc, #104]	; (8007f5c <main+0x1a8>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <main+0x154>
		  takeWifiSSID(0);
 8007efa:	2000      	movs	r0, #0
 8007efc:	f7f8 fe9a 	bl	8000c34 <takeWifiSSID>
		  HAL_Delay(500);
 8007f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f04:	f000 fc5c 	bl	80087c0 <HAL_Delay>
	  }

	  if(wifiPass[0] == '\0') {
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <main+0x1ac>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <main+0x16a>
		  takeWifiPass(0);
 8007f10:	2000      	movs	r0, #0
 8007f12:	f7f9 f869 	bl	8000fe8 <takeWifiPass>
		  HAL_Delay(500);
 8007f16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f1a:	f000 fc51 	bl	80087c0 <HAL_Delay>
	  }
  }

  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007f1e:	4a10      	ldr	r2, [pc, #64]	; (8007f60 <main+0x1ac>)
 8007f20:	490e      	ldr	r1, [pc, #56]	; (8007f5c <main+0x1a8>)
 8007f22:	4810      	ldr	r0, [pc, #64]	; (8007f64 <main+0x1b0>)
 8007f24:	f7f8 f986 	bl	8000234 <ESP8266_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f28:	f7ff fd9a 	bl	8007a60 <mainLoop>
 8007f2c:	e7fc      	b.n	8007f28 <main+0x174>
 8007f2e:	bf00      	nop
 8007f30:	40010c00 	.word	0x40010c00
 8007f34:	200003f0 	.word	0x200003f0
 8007f38:	2000039c 	.word	0x2000039c
 8007f3c:	40011000 	.word	0x40011000
 8007f40:	40010800 	.word	0x40010800
 8007f44:	0800dcc0 	.word	0x0800dcc0
 8007f48:	0800dcd4 	.word	0x0800dcd4
 8007f4c:	20000290 	.word	0x20000290
 8007f50:	200002ac 	.word	0x200002ac
 8007f54:	2000032f 	.word	0x2000032f
 8007f58:	200002b0 	.word	0x200002b0
 8007f5c:	200002bc 	.word	0x200002bc
 8007f60:	200002d0 	.word	0x200002d0
 8007f64:	20000438 	.word	0x20000438

08007f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b090      	sub	sp, #64	; 0x40
 8007f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f6e:	f107 0318 	add.w	r3, r7, #24
 8007f72:	2228      	movs	r2, #40	; 0x28
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f004 fb45 	bl	800c606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f7c:	1d3b      	adds	r3, r7, #4
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	605a      	str	r2, [r3, #4]
 8007f84:	609a      	str	r2, [r3, #8]
 8007f86:	60da      	str	r2, [r3, #12]
 8007f88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f94:	2300      	movs	r3, #0
 8007f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fac:	f107 0318 	add.w	r3, r7, #24
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f002 fc3f 	bl	800a834 <HAL_RCC_OscConfig>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007fbc:	f000 f9a2 	bl	8008304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fc0:	230f      	movs	r3, #15
 8007fc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	2102      	movs	r1, #2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f002 feac 	bl	800ad38 <HAL_RCC_ClockConfig>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007fe6:	f000 f98d 	bl	8008304 <Error_Handler>
  }
}
 8007fea:	bf00      	nop
 8007fec:	3740      	adds	r7, #64	; 0x40
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007ff8:	4b16      	ldr	r3, [pc, #88]	; (8008054 <MX_CAN_Init+0x60>)
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <MX_CAN_Init+0x64>)
 8007ffc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007ffe:	4b15      	ldr	r3, [pc, #84]	; (8008054 <MX_CAN_Init+0x60>)
 8008000:	2210      	movs	r2, #16
 8008002:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008004:	4b13      	ldr	r3, [pc, #76]	; (8008054 <MX_CAN_Init+0x60>)
 8008006:	2200      	movs	r2, #0
 8008008:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <MX_CAN_Init+0x60>)
 800800c:	2200      	movs	r2, #0
 800800e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008010:	4b10      	ldr	r3, [pc, #64]	; (8008054 <MX_CAN_Init+0x60>)
 8008012:	2200      	movs	r2, #0
 8008014:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <MX_CAN_Init+0x60>)
 8008018:	2200      	movs	r2, #0
 800801a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800801c:	4b0d      	ldr	r3, [pc, #52]	; (8008054 <MX_CAN_Init+0x60>)
 800801e:	2200      	movs	r2, #0
 8008020:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008022:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <MX_CAN_Init+0x60>)
 8008024:	2200      	movs	r2, #0
 8008026:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <MX_CAN_Init+0x60>)
 800802a:	2200      	movs	r2, #0
 800802c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <MX_CAN_Init+0x60>)
 8008030:	2200      	movs	r2, #0
 8008032:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008034:	4b07      	ldr	r3, [pc, #28]	; (8008054 <MX_CAN_Init+0x60>)
 8008036:	2200      	movs	r2, #0
 8008038:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800803a:	4b06      	ldr	r3, [pc, #24]	; (8008054 <MX_CAN_Init+0x60>)
 800803c:	2200      	movs	r2, #0
 800803e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008040:	4804      	ldr	r0, [pc, #16]	; (8008054 <MX_CAN_Init+0x60>)
 8008042:	f000 fbe1 	bl	8008808 <HAL_CAN_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800804c:	f000 f95a 	bl	8008304 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008050:	bf00      	nop
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000374 	.word	0x20000374
 8008058:	40006400 	.word	0x40006400

0800805c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008060:	4b12      	ldr	r3, [pc, #72]	; (80080ac <MX_I2C1_Init+0x50>)
 8008062:	4a13      	ldr	r2, [pc, #76]	; (80080b0 <MX_I2C1_Init+0x54>)
 8008064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008066:	4b11      	ldr	r3, [pc, #68]	; (80080ac <MX_I2C1_Init+0x50>)
 8008068:	4a12      	ldr	r2, [pc, #72]	; (80080b4 <MX_I2C1_Init+0x58>)
 800806a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <MX_I2C1_Init+0x50>)
 800806e:	2200      	movs	r2, #0
 8008070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008072:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <MX_I2C1_Init+0x50>)
 8008074:	2200      	movs	r2, #0
 8008076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008078:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <MX_I2C1_Init+0x50>)
 800807a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800807e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <MX_I2C1_Init+0x50>)
 8008082:	2200      	movs	r2, #0
 8008084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008086:	4b09      	ldr	r3, [pc, #36]	; (80080ac <MX_I2C1_Init+0x50>)
 8008088:	2200      	movs	r2, #0
 800808a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800808c:	4b07      	ldr	r3, [pc, #28]	; (80080ac <MX_I2C1_Init+0x50>)
 800808e:	2200      	movs	r2, #0
 8008090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008092:	4b06      	ldr	r3, [pc, #24]	; (80080ac <MX_I2C1_Init+0x50>)
 8008094:	2200      	movs	r2, #0
 8008096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008098:	4804      	ldr	r0, [pc, #16]	; (80080ac <MX_I2C1_Init+0x50>)
 800809a:	f001 f9a9 	bl	80093f0 <HAL_I2C_Init>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080a4:	f000 f92e 	bl	8008304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80080a8:	bf00      	nop
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	2000039c 	.word	0x2000039c
 80080b0:	40005400 	.word	0x40005400
 80080b4:	00061a80 	.word	0x00061a80

080080b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	605a      	str	r2, [r3, #4]
 80080c8:	609a      	str	r2, [r3, #8]
 80080ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080cc:	463b      	mov	r3, r7
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80080d4:	4b1f      	ldr	r3, [pc, #124]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080d6:	4a20      	ldr	r2, [pc, #128]	; (8008158 <MX_TIM1_Init+0xa0>)
 80080d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80080da:	4b1e      	ldr	r3, [pc, #120]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080dc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80080e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080e2:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80080e8:	4b1a      	ldr	r3, [pc, #104]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080ea:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80080ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080f0:	4b18      	ldr	r3, [pc, #96]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080f6:	4b17      	ldr	r3, [pc, #92]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080fc:	4b15      	ldr	r3, [pc, #84]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080fe:	2200      	movs	r2, #0
 8008100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008102:	4814      	ldr	r0, [pc, #80]	; (8008154 <MX_TIM1_Init+0x9c>)
 8008104:	f002 ffa6 	bl	800b054 <HAL_TIM_Base_Init>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800810e:	f000 f8f9 	bl	8008304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008118:	f107 0308 	add.w	r3, r7, #8
 800811c:	4619      	mov	r1, r3
 800811e:	480d      	ldr	r0, [pc, #52]	; (8008154 <MX_TIM1_Init+0x9c>)
 8008120:	f003 f950 	bl	800b3c4 <HAL_TIM_ConfigClockSource>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800812a:	f000 f8eb 	bl	8008304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800812e:	2300      	movs	r3, #0
 8008130:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008136:	463b      	mov	r3, r7
 8008138:	4619      	mov	r1, r3
 800813a:	4806      	ldr	r0, [pc, #24]	; (8008154 <MX_TIM1_Init+0x9c>)
 800813c:	f003 fb3e 	bl	800b7bc <HAL_TIMEx_MasterConfigSynchronization>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008146:	f000 f8dd 	bl	8008304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800814a:	bf00      	nop
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200003f0 	.word	0x200003f0
 8008158:	40012c00 	.word	0x40012c00

0800815c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008160:	4b11      	ldr	r3, [pc, #68]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008162:	4a12      	ldr	r2, [pc, #72]	; (80081ac <MX_USART1_UART_Init+0x50>)
 8008164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008166:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800816c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800816e:	4b0e      	ldr	r3, [pc, #56]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008170:	2200      	movs	r2, #0
 8008172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008174:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008176:	2200      	movs	r2, #0
 8008178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800817a:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 800817c:	2200      	movs	r2, #0
 800817e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008182:	220c      	movs	r2, #12
 8008184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008186:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008188:	2200      	movs	r2, #0
 800818a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 800818e:	2200      	movs	r2, #0
 8008190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008192:	4805      	ldr	r0, [pc, #20]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008194:	f003 fb90 	bl	800b8b8 <HAL_UART_Init>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800819e:	f000 f8b1 	bl	8008304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081a2:	bf00      	nop
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000438 	.word	0x20000438
 80081ac:	40013800 	.word	0x40013800

080081b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	609a      	str	r2, [r3, #8]
 80081c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80081c4:	4b4b      	ldr	r3, [pc, #300]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	4a4a      	ldr	r2, [pc, #296]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081ca:	f043 0310 	orr.w	r3, r3, #16
 80081ce:	6193      	str	r3, [r2, #24]
 80081d0:	4b48      	ldr	r3, [pc, #288]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f003 0310 	and.w	r3, r3, #16
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081dc:	4b45      	ldr	r3, [pc, #276]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	4a44      	ldr	r2, [pc, #272]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081e2:	f043 0320 	orr.w	r3, r3, #32
 80081e6:	6193      	str	r3, [r2, #24]
 80081e8:	4b42      	ldr	r3, [pc, #264]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	60bb      	str	r3, [r7, #8]
 80081f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081f4:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	4a3e      	ldr	r2, [pc, #248]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081fa:	f043 0304 	orr.w	r3, r3, #4
 80081fe:	6193      	str	r3, [r2, #24]
 8008200:	4b3c      	ldr	r3, [pc, #240]	; (80082f4 <MX_GPIO_Init+0x144>)
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800820c:	4b39      	ldr	r3, [pc, #228]	; (80082f4 <MX_GPIO_Init+0x144>)
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	4a38      	ldr	r2, [pc, #224]	; (80082f4 <MX_GPIO_Init+0x144>)
 8008212:	f043 0308 	orr.w	r3, r3, #8
 8008216:	6193      	str	r3, [r2, #24]
 8008218:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <MX_GPIO_Init+0x144>)
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008224:	2200      	movs	r2, #0
 8008226:	21f0      	movs	r1, #240	; 0xf0
 8008228:	4833      	ldr	r0, [pc, #204]	; (80082f8 <MX_GPIO_Init+0x148>)
 800822a:	f001 f8b0 	bl	800938e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800822e:	2200      	movs	r2, #0
 8008230:	f241 0130 	movw	r1, #4144	; 0x1030
 8008234:	4831      	ldr	r0, [pc, #196]	; (80082fc <MX_GPIO_Init+0x14c>)
 8008236:	f001 f8aa 	bl	800938e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800823a:	2200      	movs	r2, #0
 800823c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008240:	482f      	ldr	r0, [pc, #188]	; (8008300 <MX_GPIO_Init+0x150>)
 8008242:	f001 f8a4 	bl	800938e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008246:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800824a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800824c:	2300      	movs	r3, #0
 800824e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008250:	2300      	movs	r3, #0
 8008252:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008254:	f107 0310 	add.w	r3, r7, #16
 8008258:	4619      	mov	r1, r3
 800825a:	4828      	ldr	r0, [pc, #160]	; (80082fc <MX_GPIO_Init+0x14c>)
 800825c:	f000 fe20 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008260:	f248 130f 	movw	r3, #33039	; 0x810f
 8008264:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826a:	2300      	movs	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800826e:	f107 0310 	add.w	r3, r7, #16
 8008272:	4619      	mov	r1, r3
 8008274:	4820      	ldr	r0, [pc, #128]	; (80082f8 <MX_GPIO_Init+0x148>)
 8008276:	f000 fe13 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800827a:	23f0      	movs	r3, #240	; 0xf0
 800827c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800827e:	2301      	movs	r3, #1
 8008280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008286:	2302      	movs	r3, #2
 8008288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800828a:	f107 0310 	add.w	r3, r7, #16
 800828e:	4619      	mov	r1, r3
 8008290:	4819      	ldr	r0, [pc, #100]	; (80082f8 <MX_GPIO_Init+0x148>)
 8008292:	f000 fe05 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008296:	f241 0330 	movw	r3, #4144	; 0x1030
 800829a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800829c:	2301      	movs	r3, #1
 800829e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082a4:	2302      	movs	r3, #2
 80082a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	4619      	mov	r1, r3
 80082ae:	4813      	ldr	r0, [pc, #76]	; (80082fc <MX_GPIO_Init+0x14c>)
 80082b0:	f000 fdf6 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082b4:	f640 4307 	movw	r3, #3079	; 0xc07
 80082b8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ba:	2301      	movs	r3, #1
 80082bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082c2:	2302      	movs	r3, #2
 80082c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082c6:	f107 0310 	add.w	r3, r7, #16
 80082ca:	4619      	mov	r1, r3
 80082cc:	480c      	ldr	r0, [pc, #48]	; (8008300 <MX_GPIO_Init+0x150>)
 80082ce:	f000 fde7 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80082d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80082d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082d8:	2300      	movs	r3, #0
 80082da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082e0:	f107 0310 	add.w	r3, r7, #16
 80082e4:	4619      	mov	r1, r3
 80082e6:	4806      	ldr	r0, [pc, #24]	; (8008300 <MX_GPIO_Init+0x150>)
 80082e8:	f000 fdda 	bl	8008ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80082ec:	bf00      	nop
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40021000 	.word	0x40021000
 80082f8:	40010800 	.word	0x40010800
 80082fc:	40011000 	.word	0x40011000
 8008300:	40010c00 	.word	0x40010c00

08008304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008308:	bf00      	nop
 800830a:	46bd      	mov	sp, r7
 800830c:	bc80      	pop	{r7}
 800830e:	4770      	bx	lr

08008310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008316:	4b15      	ldr	r3, [pc, #84]	; (800836c <HAL_MspInit+0x5c>)
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	4a14      	ldr	r2, [pc, #80]	; (800836c <HAL_MspInit+0x5c>)
 800831c:	f043 0301 	orr.w	r3, r3, #1
 8008320:	6193      	str	r3, [r2, #24]
 8008322:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_MspInit+0x5c>)
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800832e:	4b0f      	ldr	r3, [pc, #60]	; (800836c <HAL_MspInit+0x5c>)
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	4a0e      	ldr	r2, [pc, #56]	; (800836c <HAL_MspInit+0x5c>)
 8008334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008338:	61d3      	str	r3, [r2, #28]
 800833a:	4b0c      	ldr	r3, [pc, #48]	; (800836c <HAL_MspInit+0x5c>)
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008342:	607b      	str	r3, [r7, #4]
 8008344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008346:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <HAL_MspInit+0x60>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	4a04      	ldr	r2, [pc, #16]	; (8008370 <HAL_MspInit+0x60>)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr
 800836c:	40021000 	.word	0x40021000
 8008370:	40010000 	.word	0x40010000

08008374 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800837c:	f107 0310 	add.w	r3, r7, #16
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	605a      	str	r2, [r3, #4]
 8008386:	609a      	str	r2, [r3, #8]
 8008388:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1c      	ldr	r2, [pc, #112]	; (8008400 <HAL_CAN_MspInit+0x8c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d131      	bne.n	80083f8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008394:	4b1b      	ldr	r3, [pc, #108]	; (8008404 <HAL_CAN_MspInit+0x90>)
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	4a1a      	ldr	r2, [pc, #104]	; (8008404 <HAL_CAN_MspInit+0x90>)
 800839a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800839e:	61d3      	str	r3, [r2, #28]
 80083a0:	4b18      	ldr	r3, [pc, #96]	; (8008404 <HAL_CAN_MspInit+0x90>)
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ac:	4b15      	ldr	r3, [pc, #84]	; (8008404 <HAL_CAN_MspInit+0x90>)
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	4a14      	ldr	r2, [pc, #80]	; (8008404 <HAL_CAN_MspInit+0x90>)
 80083b2:	f043 0304 	orr.w	r3, r3, #4
 80083b6:	6193      	str	r3, [r2, #24]
 80083b8:	4b12      	ldr	r3, [pc, #72]	; (8008404 <HAL_CAN_MspInit+0x90>)
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	60bb      	str	r3, [r7, #8]
 80083c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80083c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083d2:	f107 0310 	add.w	r3, r7, #16
 80083d6:	4619      	mov	r1, r3
 80083d8:	480b      	ldr	r0, [pc, #44]	; (8008408 <HAL_CAN_MspInit+0x94>)
 80083da:	f000 fd61 	bl	8008ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80083de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e4:	2302      	movs	r3, #2
 80083e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083e8:	2303      	movs	r3, #3
 80083ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ec:	f107 0310 	add.w	r3, r7, #16
 80083f0:	4619      	mov	r1, r3
 80083f2:	4805      	ldr	r0, [pc, #20]	; (8008408 <HAL_CAN_MspInit+0x94>)
 80083f4:	f000 fd54 	bl	8008ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80083f8:	bf00      	nop
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40006400 	.word	0x40006400
 8008404:	40021000 	.word	0x40021000
 8008408:	40010800 	.word	0x40010800

0800840c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008414:	f107 0310 	add.w	r3, r7, #16
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	605a      	str	r2, [r3, #4]
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a15      	ldr	r2, [pc, #84]	; (800847c <HAL_I2C_MspInit+0x70>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d123      	bne.n	8008474 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800842c:	4b14      	ldr	r3, [pc, #80]	; (8008480 <HAL_I2C_MspInit+0x74>)
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	4a13      	ldr	r2, [pc, #76]	; (8008480 <HAL_I2C_MspInit+0x74>)
 8008432:	f043 0308 	orr.w	r3, r3, #8
 8008436:	6193      	str	r3, [r2, #24]
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <HAL_I2C_MspInit+0x74>)
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008444:	23c0      	movs	r3, #192	; 0xc0
 8008446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008448:	2312      	movs	r3, #18
 800844a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800844c:	2303      	movs	r3, #3
 800844e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	4619      	mov	r1, r3
 8008456:	480b      	ldr	r0, [pc, #44]	; (8008484 <HAL_I2C_MspInit+0x78>)
 8008458:	f000 fd22 	bl	8008ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <HAL_I2C_MspInit+0x74>)
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	4a07      	ldr	r2, [pc, #28]	; (8008480 <HAL_I2C_MspInit+0x74>)
 8008462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008466:	61d3      	str	r3, [r2, #28]
 8008468:	4b05      	ldr	r3, [pc, #20]	; (8008480 <HAL_I2C_MspInit+0x74>)
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008474:	bf00      	nop
 8008476:	3720      	adds	r7, #32
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40005400 	.word	0x40005400
 8008480:	40021000 	.word	0x40021000
 8008484:	40010c00 	.word	0x40010c00

08008488 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <HAL_I2C_MspDeInit+0x38>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d10d      	bne.n	80084b6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <HAL_I2C_MspDeInit+0x3c>)
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <HAL_I2C_MspDeInit+0x3c>)
 80084a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084a4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80084a6:	2140      	movs	r1, #64	; 0x40
 80084a8:	4807      	ldr	r0, [pc, #28]	; (80084c8 <HAL_I2C_MspDeInit+0x40>)
 80084aa:	f000 fe8d 	bl	80091c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80084ae:	2180      	movs	r1, #128	; 0x80
 80084b0:	4805      	ldr	r0, [pc, #20]	; (80084c8 <HAL_I2C_MspDeInit+0x40>)
 80084b2:	f000 fe89 	bl	80091c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	40005400 	.word	0x40005400
 80084c4:	40021000 	.word	0x40021000
 80084c8:	40010c00 	.word	0x40010c00

080084cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a0d      	ldr	r2, [pc, #52]	; (8008510 <HAL_TIM_Base_MspInit+0x44>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d113      	bne.n	8008506 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <HAL_TIM_Base_MspInit+0x48>)
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	4a0c      	ldr	r2, [pc, #48]	; (8008514 <HAL_TIM_Base_MspInit+0x48>)
 80084e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084e8:	6193      	str	r3, [r2, #24]
 80084ea:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <HAL_TIM_Base_MspInit+0x48>)
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80084f6:	2200      	movs	r2, #0
 80084f8:	2100      	movs	r1, #0
 80084fa:	2019      	movs	r0, #25
 80084fc:	f000 fb57 	bl	8008bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008500:	2019      	movs	r0, #25
 8008502:	f000 fb70 	bl	8008be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40012c00 	.word	0x40012c00
 8008514:	40021000 	.word	0x40021000

08008518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008520:	f107 0310 	add.w	r3, r7, #16
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	605a      	str	r2, [r3, #4]
 800852a:	609a      	str	r2, [r3, #8]
 800852c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a20      	ldr	r2, [pc, #128]	; (80085b4 <HAL_UART_MspInit+0x9c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d139      	bne.n	80085ac <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008538:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 800853e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008542:	6193      	str	r3, [r2, #24]
 8008544:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008550:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 8008556:	f043 0304 	orr.w	r3, r3, #4
 800855a:	6193      	str	r3, [r2, #24]
 800855c:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	60bb      	str	r3, [r7, #8]
 8008566:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800856c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800856e:	2302      	movs	r3, #2
 8008570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008572:	2303      	movs	r3, #3
 8008574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008576:	f107 0310 	add.w	r3, r7, #16
 800857a:	4619      	mov	r1, r3
 800857c:	480f      	ldr	r0, [pc, #60]	; (80085bc <HAL_UART_MspInit+0xa4>)
 800857e:	f000 fc8f 	bl	8008ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858c:	2300      	movs	r3, #0
 800858e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008590:	f107 0310 	add.w	r3, r7, #16
 8008594:	4619      	mov	r1, r3
 8008596:	4809      	ldr	r0, [pc, #36]	; (80085bc <HAL_UART_MspInit+0xa4>)
 8008598:	f000 fc82 	bl	8008ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800859c:	2200      	movs	r2, #0
 800859e:	2100      	movs	r1, #0
 80085a0:	2025      	movs	r0, #37	; 0x25
 80085a2:	f000 fb04 	bl	8008bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085a6:	2025      	movs	r0, #37	; 0x25
 80085a8:	f000 fb1d 	bl	8008be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085ac:	bf00      	nop
 80085ae:	3720      	adds	r7, #32
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40013800 	.word	0x40013800
 80085b8:	40021000 	.word	0x40021000
 80085bc:	40010800 	.word	0x40010800

080085c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80085c4:	e7fe      	b.n	80085c4 <NMI_Handler+0x4>

080085c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085c6:	b480      	push	{r7}
 80085c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085ca:	e7fe      	b.n	80085ca <HardFault_Handler+0x4>

080085cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085d0:	e7fe      	b.n	80085d0 <MemManage_Handler+0x4>

080085d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085d2:	b480      	push	{r7}
 80085d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085d6:	e7fe      	b.n	80085d6 <BusFault_Handler+0x4>

080085d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085dc:	e7fe      	b.n	80085dc <UsageFault_Handler+0x4>

080085de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085de:	b480      	push	{r7}
 80085e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085e2:	bf00      	nop
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr

080085ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085ea:	b480      	push	{r7}
 80085ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085ee:	bf00      	nop
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr

080085f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085f6:	b480      	push	{r7}
 80085f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085fa:	bf00      	nop
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr

08008602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008606:	f000 f8bf 	bl	8008788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800860a:	bf00      	nop
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008614:	4802      	ldr	r0, [pc, #8]	; (8008620 <TIM1_UP_IRQHandler+0x10>)
 8008616:	f002 fdcd 	bl	800b1b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800861a:	bf00      	nop
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	200003f0 	.word	0x200003f0

08008624 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008628:	4802      	ldr	r0, [pc, #8]	; (8008634 <USART1_IRQHandler+0x10>)
 800862a:	f003 f9cb 	bl	800b9c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800862e:	bf00      	nop
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000438 	.word	0x20000438

08008638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008640:	4a14      	ldr	r2, [pc, #80]	; (8008694 <_sbrk+0x5c>)
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <_sbrk+0x60>)
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800864c:	4b13      	ldr	r3, [pc, #76]	; (800869c <_sbrk+0x64>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008654:	4b11      	ldr	r3, [pc, #68]	; (800869c <_sbrk+0x64>)
 8008656:	4a12      	ldr	r2, [pc, #72]	; (80086a0 <_sbrk+0x68>)
 8008658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800865a:	4b10      	ldr	r3, [pc, #64]	; (800869c <_sbrk+0x64>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4413      	add	r3, r2
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	429a      	cmp	r2, r3
 8008666:	d207      	bcs.n	8008678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008668:	f003 ffe6 	bl	800c638 <__errno>
 800866c:	4603      	mov	r3, r0
 800866e:	220c      	movs	r2, #12
 8008670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008676:	e009      	b.n	800868c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008678:	4b08      	ldr	r3, [pc, #32]	; (800869c <_sbrk+0x64>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800867e:	4b07      	ldr	r3, [pc, #28]	; (800869c <_sbrk+0x64>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	4a05      	ldr	r2, [pc, #20]	; (800869c <_sbrk+0x64>)
 8008688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800868a:	68fb      	ldr	r3, [r7, #12]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	2000c000 	.word	0x2000c000
 8008698:	00000400 	.word	0x00000400
 800869c:	20000480 	.word	0x20000480
 80086a0:	200005d0 	.word	0x200005d0

080086a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086a8:	bf00      	nop
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr

080086b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086b0:	480c      	ldr	r0, [pc, #48]	; (80086e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80086b2:	490d      	ldr	r1, [pc, #52]	; (80086e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80086b4:	4a0d      	ldr	r2, [pc, #52]	; (80086ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80086b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086b8:	e002      	b.n	80086c0 <LoopCopyDataInit>

080086ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086be:	3304      	adds	r3, #4

080086c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086c4:	d3f9      	bcc.n	80086ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086c6:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80086c8:	4c0a      	ldr	r4, [pc, #40]	; (80086f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80086ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086cc:	e001      	b.n	80086d2 <LoopFillZerobss>

080086ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086d0:	3204      	adds	r2, #4

080086d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086d4:	d3fb      	bcc.n	80086ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80086d6:	f7ff ffe5 	bl	80086a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086da:	f003 ffb3 	bl	800c644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80086de:	f7ff fb69 	bl	8007db4 <main>
  bx lr
 80086e2:	4770      	bx	lr
  ldr r0, =_sdata
 80086e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086e8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80086ec:	0800dd74 	.word	0x0800dd74
  ldr r2, =_sbss
 80086f0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80086f4:	200005d0 	.word	0x200005d0

080086f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80086f8:	e7fe      	b.n	80086f8 <ADC1_2_IRQHandler>
	...

080086fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008700:	4b08      	ldr	r3, [pc, #32]	; (8008724 <HAL_Init+0x28>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a07      	ldr	r2, [pc, #28]	; (8008724 <HAL_Init+0x28>)
 8008706:	f043 0310 	orr.w	r3, r3, #16
 800870a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800870c:	2003      	movs	r0, #3
 800870e:	f000 fa43 	bl	8008b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008712:	200f      	movs	r0, #15
 8008714:	f000 f808 	bl	8008728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008718:	f7ff fdfa 	bl	8008310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	40022000 	.word	0x40022000

08008728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008730:	4b12      	ldr	r3, [pc, #72]	; (800877c <HAL_InitTick+0x54>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	4b12      	ldr	r3, [pc, #72]	; (8008780 <HAL_InitTick+0x58>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	4619      	mov	r1, r3
 800873a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800873e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008742:	fbb2 f3f3 	udiv	r3, r2, r3
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fa5b 	bl	8008c02 <HAL_SYSTICK_Config>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e00e      	b.n	8008774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b0f      	cmp	r3, #15
 800875a:	d80a      	bhi.n	8008772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800875c:	2200      	movs	r2, #0
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008764:	f000 fa23 	bl	8008bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008768:	4a06      	ldr	r2, [pc, #24]	; (8008784 <HAL_InitTick+0x5c>)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	e000      	b.n	8008774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	200000a4 	.word	0x200000a4
 8008780:	200000ac 	.word	0x200000ac
 8008784:	200000a8 	.word	0x200000a8

08008788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008788:	b480      	push	{r7}
 800878a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <HAL_IncTick+0x1c>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <HAL_IncTick+0x20>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4413      	add	r3, r2
 8008798:	4a03      	ldr	r2, [pc, #12]	; (80087a8 <HAL_IncTick+0x20>)
 800879a:	6013      	str	r3, [r2, #0]
}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr
 80087a4:	200000ac 	.word	0x200000ac
 80087a8:	20000484 	.word	0x20000484

080087ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
  return uwTick;
 80087b0:	4b02      	ldr	r3, [pc, #8]	; (80087bc <HAL_GetTick+0x10>)
 80087b2:	681b      	ldr	r3, [r3, #0]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr
 80087bc:	20000484 	.word	0x20000484

080087c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087c8:	f7ff fff0 	bl	80087ac <HAL_GetTick>
 80087cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d8:	d005      	beq.n	80087e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80087da:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <HAL_Delay+0x44>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087e6:	bf00      	nop
 80087e8:	f7ff ffe0 	bl	80087ac <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d8f7      	bhi.n	80087e8 <HAL_Delay+0x28>
  {
  }
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	200000ac 	.word	0x200000ac

08008808 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e0ed      	b.n	80089f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff fda4 	bl	8008374 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800883c:	f7ff ffb6 	bl	80087ac <HAL_GetTick>
 8008840:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008842:	e012      	b.n	800886a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008844:	f7ff ffb2 	bl	80087ac <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b0a      	cmp	r3, #10
 8008850:	d90b      	bls.n	800886a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2205      	movs	r2, #5
 8008862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e0c5      	b.n	80089f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0e5      	beq.n	8008844 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0202 	bic.w	r2, r2, #2
 8008886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008888:	f7ff ff90 	bl	80087ac <HAL_GetTick>
 800888c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800888e:	e012      	b.n	80088b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008890:	f7ff ff8c 	bl	80087ac <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b0a      	cmp	r3, #10
 800889c:	d90b      	bls.n	80088b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2205      	movs	r2, #5
 80088ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e09f      	b.n	80089f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e5      	bne.n	8008890 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7e1b      	ldrb	r3, [r3, #24]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d108      	bne.n	80088de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e007      	b.n	80088ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7e5b      	ldrb	r3, [r3, #25]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d108      	bne.n	8008908 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e007      	b.n	8008918 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008916:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7e9b      	ldrb	r3, [r3, #26]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d108      	bne.n	8008932 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0220 	orr.w	r2, r2, #32
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	e007      	b.n	8008942 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0220 	bic.w	r2, r2, #32
 8008940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7edb      	ldrb	r3, [r3, #27]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d108      	bne.n	800895c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0210 	bic.w	r2, r2, #16
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e007      	b.n	800896c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0210 	orr.w	r2, r2, #16
 800896a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7f1b      	ldrb	r3, [r3, #28]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d108      	bne.n	8008986 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0208 	orr.w	r2, r2, #8
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e007      	b.n	8008996 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0208 	bic.w	r2, r2, #8
 8008994:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7f5b      	ldrb	r3, [r3, #29]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d108      	bne.n	80089b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0204 	orr.w	r2, r2, #4
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e007      	b.n	80089c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0204 	bic.w	r2, r2, #4
 80089be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	ea42 0103 	orr.w	r1, r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	1e5a      	subs	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <__NVIC_SetPriorityGrouping>:
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a10:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <__NVIC_SetPriorityGrouping+0x44>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a32:	4a04      	ldr	r2, [pc, #16]	; (8008a44 <__NVIC_SetPriorityGrouping+0x44>)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	60d3      	str	r3, [r2, #12]
}
 8008a38:	bf00      	nop
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bc80      	pop	{r7}
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	e000ed00 	.word	0xe000ed00

08008a48 <__NVIC_GetPriorityGrouping>:
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a4c:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <__NVIC_GetPriorityGrouping+0x18>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	0a1b      	lsrs	r3, r3, #8
 8008a52:	f003 0307 	and.w	r3, r3, #7
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	e000ed00 	.word	0xe000ed00

08008a64 <__NVIC_EnableIRQ>:
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	db0b      	blt.n	8008a8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	f003 021f 	and.w	r2, r3, #31
 8008a7c:	4906      	ldr	r1, [pc, #24]	; (8008a98 <__NVIC_EnableIRQ+0x34>)
 8008a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	2001      	movs	r0, #1
 8008a86:	fa00 f202 	lsl.w	r2, r0, r2
 8008a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr
 8008a98:	e000e100 	.word	0xe000e100

08008a9c <__NVIC_SetPriority>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	db0a      	blt.n	8008ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	490c      	ldr	r1, [pc, #48]	; (8008ae8 <__NVIC_SetPriority+0x4c>)
 8008ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aba:	0112      	lsls	r2, r2, #4
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	440b      	add	r3, r1
 8008ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ac4:	e00a      	b.n	8008adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	4908      	ldr	r1, [pc, #32]	; (8008aec <__NVIC_SetPriority+0x50>)
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	3b04      	subs	r3, #4
 8008ad4:	0112      	lsls	r2, r2, #4
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	440b      	add	r3, r1
 8008ada:	761a      	strb	r2, [r3, #24]
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	e000e100 	.word	0xe000e100
 8008aec:	e000ed00 	.word	0xe000ed00

08008af0 <NVIC_EncodePriority>:
{
 8008af0:	b480      	push	{r7}
 8008af2:	b089      	sub	sp, #36	; 0x24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f1c3 0307 	rsb	r3, r3, #7
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	bf28      	it	cs
 8008b0e:	2304      	movcs	r3, #4
 8008b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	3304      	adds	r3, #4
 8008b16:	2b06      	cmp	r3, #6
 8008b18:	d902      	bls.n	8008b20 <NVIC_EncodePriority+0x30>
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3b03      	subs	r3, #3
 8008b1e:	e000      	b.n	8008b22 <NVIC_EncodePriority+0x32>
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43da      	mvns	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	401a      	ands	r2, r3
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b42:	43d9      	mvns	r1, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b48:	4313      	orrs	r3, r2
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3724      	adds	r7, #36	; 0x24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b64:	d301      	bcc.n	8008b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b66:	2301      	movs	r3, #1
 8008b68:	e00f      	b.n	8008b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b6a:	4a0a      	ldr	r2, [pc, #40]	; (8008b94 <SysTick_Config+0x40>)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b72:	210f      	movs	r1, #15
 8008b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b78:	f7ff ff90 	bl	8008a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b7c:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <SysTick_Config+0x40>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b82:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <SysTick_Config+0x40>)
 8008b84:	2207      	movs	r2, #7
 8008b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	e000e010 	.word	0xe000e010

08008b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff ff2d 	bl	8008a00 <__NVIC_SetPriorityGrouping>
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b086      	sub	sp, #24
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
 8008bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bc0:	f7ff ff42 	bl	8008a48 <__NVIC_GetPriorityGrouping>
 8008bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	6978      	ldr	r0, [r7, #20]
 8008bcc:	f7ff ff90 	bl	8008af0 <NVIC_EncodePriority>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff ff5f 	bl	8008a9c <__NVIC_SetPriority>
}
 8008bde:	bf00      	nop
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	4603      	mov	r3, r0
 8008bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff ff35 	bl	8008a64 <__NVIC_EnableIRQ>
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff ffa2 	bl	8008b54 <SysTick_Config>
 8008c10:	4603      	mov	r3, r0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d008      	beq.n	8008c44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2204      	movs	r2, #4
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e020      	b.n	8008c86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 020e 	bic.w	r2, r2, #14
 8008c52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0201 	bic.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8008c72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr

08008c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d005      	beq.n	8008cb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2204      	movs	r2, #4
 8008cac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]
 8008cb2:	e0d6      	b.n	8008e62 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 020e 	bic.w	r2, r2, #14
 8008cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0201 	bic.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4b64      	ldr	r3, [pc, #400]	; (8008e6c <HAL_DMA_Abort_IT+0x1dc>)
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d958      	bls.n	8008d92 <HAL_DMA_Abort_IT+0x102>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a62      	ldr	r2, [pc, #392]	; (8008e70 <HAL_DMA_Abort_IT+0x1e0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d04f      	beq.n	8008d8a <HAL_DMA_Abort_IT+0xfa>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a61      	ldr	r2, [pc, #388]	; (8008e74 <HAL_DMA_Abort_IT+0x1e4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d048      	beq.n	8008d86 <HAL_DMA_Abort_IT+0xf6>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a5f      	ldr	r2, [pc, #380]	; (8008e78 <HAL_DMA_Abort_IT+0x1e8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d040      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xf0>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a5e      	ldr	r2, [pc, #376]	; (8008e7c <HAL_DMA_Abort_IT+0x1ec>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d038      	beq.n	8008d7a <HAL_DMA_Abort_IT+0xea>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a5c      	ldr	r2, [pc, #368]	; (8008e80 <HAL_DMA_Abort_IT+0x1f0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d030      	beq.n	8008d74 <HAL_DMA_Abort_IT+0xe4>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a5b      	ldr	r2, [pc, #364]	; (8008e84 <HAL_DMA_Abort_IT+0x1f4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d028      	beq.n	8008d6e <HAL_DMA_Abort_IT+0xde>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a52      	ldr	r2, [pc, #328]	; (8008e6c <HAL_DMA_Abort_IT+0x1dc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d020      	beq.n	8008d68 <HAL_DMA_Abort_IT+0xd8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a57      	ldr	r2, [pc, #348]	; (8008e88 <HAL_DMA_Abort_IT+0x1f8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d019      	beq.n	8008d64 <HAL_DMA_Abort_IT+0xd4>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a55      	ldr	r2, [pc, #340]	; (8008e8c <HAL_DMA_Abort_IT+0x1fc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d012      	beq.n	8008d60 <HAL_DMA_Abort_IT+0xd0>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a54      	ldr	r2, [pc, #336]	; (8008e90 <HAL_DMA_Abort_IT+0x200>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d00a      	beq.n	8008d5a <HAL_DMA_Abort_IT+0xca>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a52      	ldr	r2, [pc, #328]	; (8008e94 <HAL_DMA_Abort_IT+0x204>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d102      	bne.n	8008d54 <HAL_DMA_Abort_IT+0xc4>
 8008d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d52:	e01b      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d58:	e018      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d5e:	e015      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d60:	2310      	movs	r3, #16
 8008d62:	e013      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e011      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d6c:	e00e      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d72:	e00b      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d78:	e008      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d7e:	e005      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d84:	e002      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d86:	2310      	movs	r3, #16
 8008d88:	e000      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4a42      	ldr	r2, [pc, #264]	; (8008e98 <HAL_DMA_Abort_IT+0x208>)
 8008d8e:	6053      	str	r3, [r2, #4]
 8008d90:	e057      	b.n	8008e42 <HAL_DMA_Abort_IT+0x1b2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a36      	ldr	r2, [pc, #216]	; (8008e70 <HAL_DMA_Abort_IT+0x1e0>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d04f      	beq.n	8008e3c <HAL_DMA_Abort_IT+0x1ac>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a34      	ldr	r2, [pc, #208]	; (8008e74 <HAL_DMA_Abort_IT+0x1e4>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d048      	beq.n	8008e38 <HAL_DMA_Abort_IT+0x1a8>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a33      	ldr	r2, [pc, #204]	; (8008e78 <HAL_DMA_Abort_IT+0x1e8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d040      	beq.n	8008e32 <HAL_DMA_Abort_IT+0x1a2>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a31      	ldr	r2, [pc, #196]	; (8008e7c <HAL_DMA_Abort_IT+0x1ec>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d038      	beq.n	8008e2c <HAL_DMA_Abort_IT+0x19c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a30      	ldr	r2, [pc, #192]	; (8008e80 <HAL_DMA_Abort_IT+0x1f0>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d030      	beq.n	8008e26 <HAL_DMA_Abort_IT+0x196>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a2e      	ldr	r2, [pc, #184]	; (8008e84 <HAL_DMA_Abort_IT+0x1f4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d028      	beq.n	8008e20 <HAL_DMA_Abort_IT+0x190>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a26      	ldr	r2, [pc, #152]	; (8008e6c <HAL_DMA_Abort_IT+0x1dc>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d020      	beq.n	8008e1a <HAL_DMA_Abort_IT+0x18a>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a2a      	ldr	r2, [pc, #168]	; (8008e88 <HAL_DMA_Abort_IT+0x1f8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d019      	beq.n	8008e16 <HAL_DMA_Abort_IT+0x186>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a29      	ldr	r2, [pc, #164]	; (8008e8c <HAL_DMA_Abort_IT+0x1fc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d012      	beq.n	8008e12 <HAL_DMA_Abort_IT+0x182>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a27      	ldr	r2, [pc, #156]	; (8008e90 <HAL_DMA_Abort_IT+0x200>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00a      	beq.n	8008e0c <HAL_DMA_Abort_IT+0x17c>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a26      	ldr	r2, [pc, #152]	; (8008e94 <HAL_DMA_Abort_IT+0x204>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d102      	bne.n	8008e06 <HAL_DMA_Abort_IT+0x176>
 8008e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e04:	e01b      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e0a:	e018      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e10:	e015      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e12:	2310      	movs	r3, #16
 8008e14:	e013      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e011      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e1e:	e00e      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e24:	e00b      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e2a:	e008      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e30:	e005      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e36:	e002      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	e000      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	4a17      	ldr	r2, [pc, #92]	; (8008e9c <HAL_DMA_Abort_IT+0x20c>)
 8008e40:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
    } 
  }
  return status;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	40020080 	.word	0x40020080
 8008e70:	40020008 	.word	0x40020008
 8008e74:	4002001c 	.word	0x4002001c
 8008e78:	40020030 	.word	0x40020030
 8008e7c:	40020044 	.word	0x40020044
 8008e80:	40020058 	.word	0x40020058
 8008e84:	4002006c 	.word	0x4002006c
 8008e88:	40020408 	.word	0x40020408
 8008e8c:	4002041c 	.word	0x4002041c
 8008e90:	40020430 	.word	0x40020430
 8008e94:	40020444 	.word	0x40020444
 8008e98:	40020400 	.word	0x40020400
 8008e9c:	40020000 	.word	0x40020000

08008ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b08b      	sub	sp, #44	; 0x2c
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008eb2:	e179      	b.n	80091a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	f040 8168 	bne.w	80091a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	4a96      	ldr	r2, [pc, #600]	; (8009130 <HAL_GPIO_Init+0x290>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d05e      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008edc:	4a94      	ldr	r2, [pc, #592]	; (8009130 <HAL_GPIO_Init+0x290>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d875      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008ee2:	4a94      	ldr	r2, [pc, #592]	; (8009134 <HAL_GPIO_Init+0x294>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d058      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008ee8:	4a92      	ldr	r2, [pc, #584]	; (8009134 <HAL_GPIO_Init+0x294>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d86f      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008eee:	4a92      	ldr	r2, [pc, #584]	; (8009138 <HAL_GPIO_Init+0x298>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d052      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008ef4:	4a90      	ldr	r2, [pc, #576]	; (8009138 <HAL_GPIO_Init+0x298>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d869      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008efa:	4a90      	ldr	r2, [pc, #576]	; (800913c <HAL_GPIO_Init+0x29c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d04c      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008f00:	4a8e      	ldr	r2, [pc, #568]	; (800913c <HAL_GPIO_Init+0x29c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d863      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008f06:	4a8e      	ldr	r2, [pc, #568]	; (8009140 <HAL_GPIO_Init+0x2a0>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d046      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008f0c:	4a8c      	ldr	r2, [pc, #560]	; (8009140 <HAL_GPIO_Init+0x2a0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d85d      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008f12:	2b12      	cmp	r3, #18
 8008f14:	d82a      	bhi.n	8008f6c <HAL_GPIO_Init+0xcc>
 8008f16:	2b12      	cmp	r3, #18
 8008f18:	d859      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008f1a:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <HAL_GPIO_Init+0x80>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f9b 	.word	0x08008f9b
 8008f24:	08008f75 	.word	0x08008f75
 8008f28:	08008f87 	.word	0x08008f87
 8008f2c:	08008fc9 	.word	0x08008fc9
 8008f30:	08008fcf 	.word	0x08008fcf
 8008f34:	08008fcf 	.word	0x08008fcf
 8008f38:	08008fcf 	.word	0x08008fcf
 8008f3c:	08008fcf 	.word	0x08008fcf
 8008f40:	08008fcf 	.word	0x08008fcf
 8008f44:	08008fcf 	.word	0x08008fcf
 8008f48:	08008fcf 	.word	0x08008fcf
 8008f4c:	08008fcf 	.word	0x08008fcf
 8008f50:	08008fcf 	.word	0x08008fcf
 8008f54:	08008fcf 	.word	0x08008fcf
 8008f58:	08008fcf 	.word	0x08008fcf
 8008f5c:	08008fcf 	.word	0x08008fcf
 8008f60:	08008fcf 	.word	0x08008fcf
 8008f64:	08008f7d 	.word	0x08008f7d
 8008f68:	08008f91 	.word	0x08008f91
 8008f6c:	4a75      	ldr	r2, [pc, #468]	; (8009144 <HAL_GPIO_Init+0x2a4>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d013      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f72:	e02c      	b.n	8008fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	623b      	str	r3, [r7, #32]
          break;
 8008f7a:	e029      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	3304      	adds	r3, #4
 8008f82:	623b      	str	r3, [r7, #32]
          break;
 8008f84:	e024      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	623b      	str	r3, [r7, #32]
          break;
 8008f8e:	e01f      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	330c      	adds	r3, #12
 8008f96:	623b      	str	r3, [r7, #32]
          break;
 8008f98:	e01a      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008fa2:	2304      	movs	r3, #4
 8008fa4:	623b      	str	r3, [r7, #32]
          break;
 8008fa6:	e013      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d105      	bne.n	8008fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	611a      	str	r2, [r3, #16]
          break;
 8008fba:	e009      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69fa      	ldr	r2, [r7, #28]
 8008fc4:	615a      	str	r2, [r3, #20]
          break;
 8008fc6:	e003      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	623b      	str	r3, [r7, #32]
          break;
 8008fcc:	e000      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          break;
 8008fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2bff      	cmp	r3, #255	; 0xff
 8008fd4:	d801      	bhi.n	8008fda <HAL_GPIO_Init+0x13a>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	e001      	b.n	8008fde <HAL_GPIO_Init+0x13e>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	2bff      	cmp	r3, #255	; 0xff
 8008fe4:	d802      	bhi.n	8008fec <HAL_GPIO_Init+0x14c>
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	e002      	b.n	8008ff2 <HAL_GPIO_Init+0x152>
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	3b08      	subs	r3, #8
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	210f      	movs	r1, #15
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8009000:	43db      	mvns	r3, r3
 8009002:	401a      	ands	r2, r3
 8009004:	6a39      	ldr	r1, [r7, #32]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	fa01 f303 	lsl.w	r3, r1, r3
 800900c:	431a      	orrs	r2, r3
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80c1 	beq.w	80091a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009020:	4b49      	ldr	r3, [pc, #292]	; (8009148 <HAL_GPIO_Init+0x2a8>)
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	4a48      	ldr	r2, [pc, #288]	; (8009148 <HAL_GPIO_Init+0x2a8>)
 8009026:	f043 0301 	orr.w	r3, r3, #1
 800902a:	6193      	str	r3, [r2, #24]
 800902c:	4b46      	ldr	r3, [pc, #280]	; (8009148 <HAL_GPIO_Init+0x2a8>)
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	60bb      	str	r3, [r7, #8]
 8009036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009038:	4a44      	ldr	r2, [pc, #272]	; (800914c <HAL_GPIO_Init+0x2ac>)
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	089b      	lsrs	r3, r3, #2
 800903e:	3302      	adds	r3, #2
 8009040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	220f      	movs	r2, #15
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4013      	ands	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a3c      	ldr	r2, [pc, #240]	; (8009150 <HAL_GPIO_Init+0x2b0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d01f      	beq.n	80090a4 <HAL_GPIO_Init+0x204>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a3b      	ldr	r2, [pc, #236]	; (8009154 <HAL_GPIO_Init+0x2b4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d019      	beq.n	80090a0 <HAL_GPIO_Init+0x200>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a3a      	ldr	r2, [pc, #232]	; (8009158 <HAL_GPIO_Init+0x2b8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d013      	beq.n	800909c <HAL_GPIO_Init+0x1fc>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a39      	ldr	r2, [pc, #228]	; (800915c <HAL_GPIO_Init+0x2bc>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00d      	beq.n	8009098 <HAL_GPIO_Init+0x1f8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a38      	ldr	r2, [pc, #224]	; (8009160 <HAL_GPIO_Init+0x2c0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d007      	beq.n	8009094 <HAL_GPIO_Init+0x1f4>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a37      	ldr	r2, [pc, #220]	; (8009164 <HAL_GPIO_Init+0x2c4>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d101      	bne.n	8009090 <HAL_GPIO_Init+0x1f0>
 800908c:	2305      	movs	r3, #5
 800908e:	e00a      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 8009090:	2306      	movs	r3, #6
 8009092:	e008      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 8009094:	2304      	movs	r3, #4
 8009096:	e006      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 8009098:	2303      	movs	r3, #3
 800909a:	e004      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 800909c:	2302      	movs	r3, #2
 800909e:	e002      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 80090a4:	2300      	movs	r3, #0
 80090a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a8:	f002 0203 	and.w	r2, r2, #3
 80090ac:	0092      	lsls	r2, r2, #2
 80090ae:	4093      	lsls	r3, r2
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80090b6:	4925      	ldr	r1, [pc, #148]	; (800914c <HAL_GPIO_Init+0x2ac>)
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	089b      	lsrs	r3, r3, #2
 80090bc:	3302      	adds	r3, #2
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d006      	beq.n	80090de <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80090d0:	4b25      	ldr	r3, [pc, #148]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	4924      	ldr	r1, [pc, #144]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	4313      	orrs	r3, r2
 80090da:	608b      	str	r3, [r1, #8]
 80090dc:	e006      	b.n	80090ec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80090de:	4b22      	ldr	r3, [pc, #136]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	43db      	mvns	r3, r3
 80090e6:	4920      	ldr	r1, [pc, #128]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090e8:	4013      	ands	r3, r2
 80090ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d006      	beq.n	8009106 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80090f8:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	491a      	ldr	r1, [pc, #104]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	4313      	orrs	r3, r2
 8009102:	60cb      	str	r3, [r1, #12]
 8009104:	e006      	b.n	8009114 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009106:	4b18      	ldr	r3, [pc, #96]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 8009108:	68da      	ldr	r2, [r3, #12]
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	43db      	mvns	r3, r3
 800910e:	4916      	ldr	r1, [pc, #88]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 8009110:	4013      	ands	r3, r2
 8009112:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d025      	beq.n	800916c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009120:	4b11      	ldr	r3, [pc, #68]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	4910      	ldr	r1, [pc, #64]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	4313      	orrs	r3, r2
 800912a:	604b      	str	r3, [r1, #4]
 800912c:	e025      	b.n	800917a <HAL_GPIO_Init+0x2da>
 800912e:	bf00      	nop
 8009130:	10320000 	.word	0x10320000
 8009134:	10310000 	.word	0x10310000
 8009138:	10220000 	.word	0x10220000
 800913c:	10210000 	.word	0x10210000
 8009140:	10120000 	.word	0x10120000
 8009144:	10110000 	.word	0x10110000
 8009148:	40021000 	.word	0x40021000
 800914c:	40010000 	.word	0x40010000
 8009150:	40010800 	.word	0x40010800
 8009154:	40010c00 	.word	0x40010c00
 8009158:	40011000 	.word	0x40011000
 800915c:	40011400 	.word	0x40011400
 8009160:	40011800 	.word	0x40011800
 8009164:	40011c00 	.word	0x40011c00
 8009168:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800916c:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <HAL_GPIO_Init+0x324>)
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	43db      	mvns	r3, r3
 8009174:	4913      	ldr	r1, [pc, #76]	; (80091c4 <HAL_GPIO_Init+0x324>)
 8009176:	4013      	ands	r3, r2
 8009178:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d006      	beq.n	8009194 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009186:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <HAL_GPIO_Init+0x324>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	490e      	ldr	r1, [pc, #56]	; (80091c4 <HAL_GPIO_Init+0x324>)
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	4313      	orrs	r3, r2
 8009190:	600b      	str	r3, [r1, #0]
 8009192:	e006      	b.n	80091a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009194:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <HAL_GPIO_Init+0x324>)
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	43db      	mvns	r3, r3
 800919c:	4909      	ldr	r1, [pc, #36]	; (80091c4 <HAL_GPIO_Init+0x324>)
 800919e:	4013      	ands	r3, r2
 80091a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	3301      	adds	r3, #1
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f47f ae7e 	bne.w	8008eb4 <HAL_GPIO_Init+0x14>
  }
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
 80091bc:	372c      	adds	r7, #44	; 0x2c
 80091be:	46bd      	mov	sp, r7
 80091c0:	bc80      	pop	{r7}
 80091c2:	4770      	bx	lr
 80091c4:	40010400 	.word	0x40010400

080091c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b089      	sub	sp, #36	; 0x24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80091d6:	e0a6      	b.n	8009326 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80091d8:	2201      	movs	r2, #1
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	fa02 f303 	lsl.w	r3, r2, r3
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	4013      	ands	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8099 	beq.w	8009320 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80091ee:	4a54      	ldr	r2, [pc, #336]	; (8009340 <HAL_GPIO_DeInit+0x178>)
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	089b      	lsrs	r3, r3, #2
 80091f4:	3302      	adds	r3, #2
 80091f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091fa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	220f      	movs	r2, #15
 8009206:	fa02 f303 	lsl.w	r3, r2, r3
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4013      	ands	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a4c      	ldr	r2, [pc, #304]	; (8009344 <HAL_GPIO_DeInit+0x17c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d01f      	beq.n	8009258 <HAL_GPIO_DeInit+0x90>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a4b      	ldr	r2, [pc, #300]	; (8009348 <HAL_GPIO_DeInit+0x180>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d019      	beq.n	8009254 <HAL_GPIO_DeInit+0x8c>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a4a      	ldr	r2, [pc, #296]	; (800934c <HAL_GPIO_DeInit+0x184>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d013      	beq.n	8009250 <HAL_GPIO_DeInit+0x88>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a49      	ldr	r2, [pc, #292]	; (8009350 <HAL_GPIO_DeInit+0x188>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d00d      	beq.n	800924c <HAL_GPIO_DeInit+0x84>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a48      	ldr	r2, [pc, #288]	; (8009354 <HAL_GPIO_DeInit+0x18c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d007      	beq.n	8009248 <HAL_GPIO_DeInit+0x80>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a47      	ldr	r2, [pc, #284]	; (8009358 <HAL_GPIO_DeInit+0x190>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d101      	bne.n	8009244 <HAL_GPIO_DeInit+0x7c>
 8009240:	2305      	movs	r3, #5
 8009242:	e00a      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009244:	2306      	movs	r3, #6
 8009246:	e008      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009248:	2304      	movs	r3, #4
 800924a:	e006      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 800924c:	2303      	movs	r3, #3
 800924e:	e004      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009250:	2302      	movs	r3, #2
 8009252:	e002      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009258:	2300      	movs	r3, #0
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	f002 0203 	and.w	r2, r2, #3
 8009260:	0092      	lsls	r2, r2, #2
 8009262:	4093      	lsls	r3, r2
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	429a      	cmp	r2, r3
 8009268:	d132      	bne.n	80092d0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800926a:	4b3c      	ldr	r3, [pc, #240]	; (800935c <HAL_GPIO_DeInit+0x194>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	43db      	mvns	r3, r3
 8009272:	493a      	ldr	r1, [pc, #232]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009274:	4013      	ands	r3, r2
 8009276:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009278:	4b38      	ldr	r3, [pc, #224]	; (800935c <HAL_GPIO_DeInit+0x194>)
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	43db      	mvns	r3, r3
 8009280:	4936      	ldr	r1, [pc, #216]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009282:	4013      	ands	r3, r2
 8009284:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009286:	4b35      	ldr	r3, [pc, #212]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	43db      	mvns	r3, r3
 800928e:	4933      	ldr	r1, [pc, #204]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009290:	4013      	ands	r3, r2
 8009292:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009294:	4b31      	ldr	r3, [pc, #196]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	43db      	mvns	r3, r3
 800929c:	492f      	ldr	r1, [pc, #188]	; (800935c <HAL_GPIO_DeInit+0x194>)
 800929e:	4013      	ands	r3, r2
 80092a0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	220f      	movs	r2, #15
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80092b2:	4a23      	ldr	r2, [pc, #140]	; (8009340 <HAL_GPIO_DeInit+0x178>)
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	089b      	lsrs	r3, r3, #2
 80092b8:	3302      	adds	r3, #2
 80092ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	43da      	mvns	r2, r3
 80092c2:	481f      	ldr	r0, [pc, #124]	; (8009340 <HAL_GPIO_DeInit+0x178>)
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	089b      	lsrs	r3, r3, #2
 80092c8:	400a      	ands	r2, r1
 80092ca:	3302      	adds	r3, #2
 80092cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2bff      	cmp	r3, #255	; 0xff
 80092d4:	d801      	bhi.n	80092da <HAL_GPIO_DeInit+0x112>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	e001      	b.n	80092de <HAL_GPIO_DeInit+0x116>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3304      	adds	r3, #4
 80092de:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	2bff      	cmp	r3, #255	; 0xff
 80092e4:	d802      	bhi.n	80092ec <HAL_GPIO_DeInit+0x124>
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	e002      	b.n	80092f2 <HAL_GPIO_DeInit+0x12a>
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	3b08      	subs	r3, #8
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	210f      	movs	r1, #15
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009300:	43db      	mvns	r3, r3
 8009302:	401a      	ands	r2, r3
 8009304:	2104      	movs	r1, #4
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	fa01 f303 	lsl.w	r3, r1, r3
 800930c:	431a      	orrs	r2, r3
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	43db      	mvns	r3, r3
 800931a:	401a      	ands	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	3301      	adds	r3, #1
 8009324:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	fa22 f303 	lsr.w	r3, r2, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	f47f af52 	bne.w	80091d8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	3724      	adds	r7, #36	; 0x24
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	40010000 	.word	0x40010000
 8009344:	40010800 	.word	0x40010800
 8009348:	40010c00 	.word	0x40010c00
 800934c:	40011000 	.word	0x40011000
 8009350:	40011400 	.word	0x40011400
 8009354:	40011800 	.word	0x40011800
 8009358:	40011c00 	.word	0x40011c00
 800935c:	40010400 	.word	0x40010400

08009360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	4013      	ands	r3, r2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009378:	2301      	movs	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
 800937c:	e001      	b.n	8009382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	bc80      	pop	{r7}
 800938c:	4770      	bx	lr

0800938e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	807b      	strh	r3, [r7, #2]
 800939a:	4613      	mov	r3, r2
 800939c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800939e:	787b      	ldrb	r3, [r7, #1]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093a4:	887a      	ldrh	r2, [r7, #2]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093aa:	e003      	b.n	80093b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093ac:	887b      	ldrh	r3, [r7, #2]
 80093ae:	041a      	lsls	r2, r3, #16
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	611a      	str	r2, [r3, #16]
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bc80      	pop	{r7}
 80093bc:	4770      	bx	lr

080093be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80093d0:	887a      	ldrh	r2, [r7, #2]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4013      	ands	r3, r2
 80093d6:	041a      	lsls	r2, r3, #16
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	43d9      	mvns	r1, r3
 80093dc:	887b      	ldrh	r3, [r7, #2]
 80093de:	400b      	ands	r3, r1
 80093e0:	431a      	orrs	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	611a      	str	r2, [r3, #16]
}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bc80      	pop	{r7}
 80093ee:	4770      	bx	lr

080093f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e12b      	b.n	800965a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7fe fff8 	bl	800840c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2224      	movs	r2, #36	; 0x24
 8009420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0201 	bic.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009454:	f001 fdb8 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8009458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	4a81      	ldr	r2, [pc, #516]	; (8009664 <HAL_I2C_Init+0x274>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d807      	bhi.n	8009474 <HAL_I2C_Init+0x84>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a80      	ldr	r2, [pc, #512]	; (8009668 <HAL_I2C_Init+0x278>)
 8009468:	4293      	cmp	r3, r2
 800946a:	bf94      	ite	ls
 800946c:	2301      	movls	r3, #1
 800946e:	2300      	movhi	r3, #0
 8009470:	b2db      	uxtb	r3, r3
 8009472:	e006      	b.n	8009482 <HAL_I2C_Init+0x92>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a7d      	ldr	r2, [pc, #500]	; (800966c <HAL_I2C_Init+0x27c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	bf94      	ite	ls
 800947c:	2301      	movls	r3, #1
 800947e:	2300      	movhi	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e0e7      	b.n	800965a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4a78      	ldr	r2, [pc, #480]	; (8009670 <HAL_I2C_Init+0x280>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	0c9b      	lsrs	r3, r3, #18
 8009494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	4a6a      	ldr	r2, [pc, #424]	; (8009664 <HAL_I2C_Init+0x274>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d802      	bhi.n	80094c4 <HAL_I2C_Init+0xd4>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	3301      	adds	r3, #1
 80094c2:	e009      	b.n	80094d8 <HAL_I2C_Init+0xe8>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094ca:	fb02 f303 	mul.w	r3, r2, r3
 80094ce:	4a69      	ldr	r2, [pc, #420]	; (8009674 <HAL_I2C_Init+0x284>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	099b      	lsrs	r3, r3, #6
 80094d6:	3301      	adds	r3, #1
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6812      	ldr	r2, [r2, #0]
 80094dc:	430b      	orrs	r3, r1
 80094de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80094ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	495c      	ldr	r1, [pc, #368]	; (8009664 <HAL_I2C_Init+0x274>)
 80094f4:	428b      	cmp	r3, r1
 80094f6:	d819      	bhi.n	800952c <HAL_I2C_Init+0x13c>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	1e59      	subs	r1, r3, #1
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	fbb1 f3f3 	udiv	r3, r1, r3
 8009506:	1c59      	adds	r1, r3, #1
 8009508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800950c:	400b      	ands	r3, r1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <HAL_I2C_Init+0x138>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	1e59      	subs	r1, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009520:	3301      	adds	r3, #1
 8009522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009526:	e051      	b.n	80095cc <HAL_I2C_Init+0x1dc>
 8009528:	2304      	movs	r3, #4
 800952a:	e04f      	b.n	80095cc <HAL_I2C_Init+0x1dc>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d111      	bne.n	8009558 <HAL_I2C_Init+0x168>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	1e58      	subs	r0, r3, #1
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6859      	ldr	r1, [r3, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	440b      	add	r3, r1
 8009542:	fbb0 f3f3 	udiv	r3, r0, r3
 8009546:	3301      	adds	r3, #1
 8009548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800954c:	2b00      	cmp	r3, #0
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	e012      	b.n	800957e <HAL_I2C_Init+0x18e>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	1e58      	subs	r0, r3, #1
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6859      	ldr	r1, [r3, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	0099      	lsls	r1, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	fbb0 f3f3 	udiv	r3, r0, r3
 800956e:	3301      	adds	r3, #1
 8009570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009574:	2b00      	cmp	r3, #0
 8009576:	bf0c      	ite	eq
 8009578:	2301      	moveq	r3, #1
 800957a:	2300      	movne	r3, #0
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <HAL_I2C_Init+0x196>
 8009582:	2301      	movs	r3, #1
 8009584:	e022      	b.n	80095cc <HAL_I2C_Init+0x1dc>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10e      	bne.n	80095ac <HAL_I2C_Init+0x1bc>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1e58      	subs	r0, r3, #1
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6859      	ldr	r1, [r3, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	440b      	add	r3, r1
 800959c:	fbb0 f3f3 	udiv	r3, r0, r3
 80095a0:	3301      	adds	r3, #1
 80095a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095aa:	e00f      	b.n	80095cc <HAL_I2C_Init+0x1dc>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	1e58      	subs	r0, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6859      	ldr	r1, [r3, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	0099      	lsls	r1, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	fbb0 f3f3 	udiv	r3, r0, r3
 80095c2:	3301      	adds	r3, #1
 80095c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	6809      	ldr	r1, [r1, #0]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	69da      	ldr	r2, [r3, #28]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80095fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	6911      	ldr	r1, [r2, #16]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	68d2      	ldr	r2, [r2, #12]
 8009606:	4311      	orrs	r1, r2
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	6812      	ldr	r2, [r2, #0]
 800960c:	430b      	orrs	r3, r1
 800960e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695a      	ldr	r2, [r3, #20]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	431a      	orrs	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0201 	orr.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	000186a0 	.word	0x000186a0
 8009668:	001e847f 	.word	0x001e847f
 800966c:	003d08ff 	.word	0x003d08ff
 8009670:	431bde83 	.word	0x431bde83
 8009674:	10624dd3 	.word	0x10624dd3

08009678 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e021      	b.n	80096ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2224      	movs	r2, #36	; 0x24
 800968e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0201 	bic.w	r2, r2, #1
 80096a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7fe fef0 	bl	8008488 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af02      	add	r7, sp, #8
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	607a      	str	r2, [r7, #4]
 80096e2:	461a      	mov	r2, r3
 80096e4:	460b      	mov	r3, r1
 80096e6:	817b      	strh	r3, [r7, #10]
 80096e8:	4613      	mov	r3, r2
 80096ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096ec:	f7ff f85e 	bl	80087ac <HAL_GetTick>
 80096f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	f040 80e0 	bne.w	80098c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	2319      	movs	r3, #25
 8009706:	2201      	movs	r2, #1
 8009708:	4970      	ldr	r1, [pc, #448]	; (80098cc <HAL_I2C_Master_Transmit+0x1f4>)
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 fe5c 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009716:	2302      	movs	r3, #2
 8009718:	e0d3      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009720:	2b01      	cmp	r3, #1
 8009722:	d101      	bne.n	8009728 <HAL_I2C_Master_Transmit+0x50>
 8009724:	2302      	movs	r3, #2
 8009726:	e0cc      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b01      	cmp	r3, #1
 800973c:	d007      	beq.n	800974e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f042 0201 	orr.w	r2, r2, #1
 800974c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800975c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2221      	movs	r2, #33	; 0x21
 8009762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2210      	movs	r2, #16
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	893a      	ldrh	r2, [r7, #8]
 800977e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009784:	b29a      	uxth	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a50      	ldr	r2, [pc, #320]	; (80098d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800978e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009790:	8979      	ldrh	r1, [r7, #10]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	6a3a      	ldr	r2, [r7, #32]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 fc16 	bl	8009fc8 <I2C_MasterRequestWrite>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e08d      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80097bc:	e066      	b.n	800988c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	6a39      	ldr	r1, [r7, #32]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 ff1a 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00d      	beq.n	80097ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d107      	bne.n	80097e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e06b      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	781a      	ldrb	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b04      	cmp	r3, #4
 8009826:	d11b      	bne.n	8009860 <HAL_I2C_Master_Transmit+0x188>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982c:	2b00      	cmp	r3, #0
 800982e:	d017      	beq.n	8009860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	781a      	ldrb	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984a:	b29b      	uxth	r3, r3
 800984c:	3b01      	subs	r3, #1
 800984e:	b29a      	uxth	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009858:	3b01      	subs	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	6a39      	ldr	r1, [r7, #32]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 ff11 	bl	800a68c <I2C_WaitOnBTFFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00d      	beq.n	800988c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009874:	2b04      	cmp	r3, #4
 8009876:	d107      	bne.n	8009888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e01a      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	d194      	bne.n	80097be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	e000      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80098c0:	2302      	movs	r3, #2
  }
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	00100002 	.word	0x00100002
 80098d0:	ffff0000 	.word	0xffff0000

080098d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af02      	add	r7, sp, #8
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	4608      	mov	r0, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	461a      	mov	r2, r3
 80098e2:	4603      	mov	r3, r0
 80098e4:	817b      	strh	r3, [r7, #10]
 80098e6:	460b      	mov	r3, r1
 80098e8:	813b      	strh	r3, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098ee:	f7fe ff5d 	bl	80087ac <HAL_GetTick>
 80098f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	f040 80d9 	bne.w	8009ab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	2319      	movs	r3, #25
 8009908:	2201      	movs	r2, #1
 800990a:	496d      	ldr	r1, [pc, #436]	; (8009ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fd5b 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009918:	2302      	movs	r3, #2
 800991a:	e0cc      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_I2C_Mem_Write+0x56>
 8009926:	2302      	movs	r3, #2
 8009928:	e0c5      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b01      	cmp	r3, #1
 800993e:	d007      	beq.n	8009950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800995e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2221      	movs	r2, #33	; 0x21
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2240      	movs	r2, #64	; 0x40
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a3a      	ldr	r2, [r7, #32]
 800997a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009986:	b29a      	uxth	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4a4d      	ldr	r2, [pc, #308]	; (8009ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8009990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009992:	88f8      	ldrh	r0, [r7, #6]
 8009994:	893a      	ldrh	r2, [r7, #8]
 8009996:	8979      	ldrh	r1, [r7, #10]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	9301      	str	r3, [sp, #4]
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	4603      	mov	r3, r0
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 fb92 	bl	800a0cc <I2C_RequestMemoryWrite>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d052      	beq.n	8009a54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e081      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fe20 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00d      	beq.n	80099de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d107      	bne.n	80099da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e06b      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	781a      	ldrb	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b04      	cmp	r3, #4
 8009a1a:	d11b      	bne.n	8009a54 <HAL_I2C_Mem_Write+0x180>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d017      	beq.n	8009a54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	781a      	ldrb	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1aa      	bne.n	80099b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fe13 	bl	800a68c <I2C_WaitOnBTFFlagUntilTimeout>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00d      	beq.n	8009a88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d107      	bne.n	8009a84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e016      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e000      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009ab4:	2302      	movs	r3, #2
  }
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	00100002 	.word	0x00100002
 8009ac4:	ffff0000 	.word	0xffff0000

08009ac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08c      	sub	sp, #48	; 0x30
 8009acc:	af02      	add	r7, sp, #8
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	817b      	strh	r3, [r7, #10]
 8009ada:	460b      	mov	r3, r1
 8009adc:	813b      	strh	r3, [r7, #8]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ae6:	f7fe fe61 	bl	80087ac <HAL_GetTick>
 8009aea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	f040 8244 	bne.w	8009f82 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	2319      	movs	r3, #25
 8009b00:	2201      	movs	r2, #1
 8009b02:	4982      	ldr	r1, [pc, #520]	; (8009d0c <HAL_I2C_Mem_Read+0x244>)
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 fc5f 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b10:	2302      	movs	r3, #2
 8009b12:	e237      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d101      	bne.n	8009b22 <HAL_I2C_Mem_Read+0x5a>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	e230      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d007      	beq.n	8009b48 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 0201 	orr.w	r2, r2, #1
 8009b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2222      	movs	r2, #34	; 0x22
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2240      	movs	r2, #64	; 0x40
 8009b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4a62      	ldr	r2, [pc, #392]	; (8009d10 <HAL_I2C_Mem_Read+0x248>)
 8009b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b8a:	88f8      	ldrh	r0, [r7, #6]
 8009b8c:	893a      	ldrh	r2, [r7, #8]
 8009b8e:	8979      	ldrh	r1, [r7, #10]
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	4603      	mov	r3, r0
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 fb2c 	bl	800a1f8 <I2C_RequestMemoryRead>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e1ec      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d113      	bne.n	8009bda <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	61fb      	str	r3, [r7, #28]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	61fb      	str	r3, [r7, #28]
 8009bc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	e1c0      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d11e      	bne.n	8009c20 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bf2:	b672      	cpsid	i
}
 8009bf4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61bb      	str	r3, [r7, #24]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c1c:	b662      	cpsie	i
}
 8009c1e:	e035      	b.n	8009c8c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d11e      	bne.n	8009c66 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c38:	b672      	cpsid	i
}
 8009c3a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	617b      	str	r3, [r7, #20]
 8009c50:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c62:	b662      	cpsie	i
}
 8009c64:	e012      	b.n	8009c8c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c74:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c76:	2300      	movs	r3, #0
 8009c78:	613b      	str	r3, [r7, #16]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	613b      	str	r3, [r7, #16]
 8009c8a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c8c:	e166      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	f200 811f 	bhi.w	8009ed6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d123      	bne.n	8009ce8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fd39 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e167      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ce6:	e139      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d152      	bne.n	8009d96 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4906      	ldr	r1, [pc, #24]	; (8009d14 <HAL_I2C_Mem_Read+0x24c>)
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fb64 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d008      	beq.n	8009d18 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e13c      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
 8009d0a:	bf00      	nop
 8009d0c:	00100002 	.word	0x00100002
 8009d10:	ffff0000 	.word	0xffff0000
 8009d14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d18:	b672      	cpsid	i
}
 8009d1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691a      	ldr	r2, [r3, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d5e:	b662      	cpsie	i
}
 8009d60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d94:	e0e2      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	497b      	ldr	r1, [pc, #492]	; (8009f8c <HAL_I2C_Mem_Read+0x4c4>)
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fb11 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0e9      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dc0:	b672      	cpsid	i
}
 8009dc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	691a      	ldr	r2, [r3, #16]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	b2d2      	uxtb	r2, r2
 8009dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de0:	3b01      	subs	r3, #1
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009df6:	4b66      	ldr	r3, [pc, #408]	; (8009f90 <HAL_I2C_Mem_Read+0x4c8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	08db      	lsrs	r3, r3, #3
 8009dfc:	4a65      	ldr	r2, [pc, #404]	; (8009f94 <HAL_I2C_Mem_Read+0x4cc>)
 8009dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009e02:	0a1a      	lsrs	r2, r3, #8
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	00da      	lsls	r2, r3, #3
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d118      	bne.n	8009e4e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	f043 0220 	orr.w	r2, r3, #32
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e3e:	b662      	cpsie	i
}
 8009e40:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e09a      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	f003 0304 	and.w	r3, r3, #4
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d1d9      	bne.n	8009e10 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	b2d2      	uxtb	r2, r2
 8009e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	3b01      	subs	r3, #1
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e9e:	b662      	cpsie	i
}
 8009ea0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	691a      	ldr	r2, [r3, #16]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ed4:	e042      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fc1e 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e04c      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	b2d2      	uxtb	r2, r2
 8009ef6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f06:	3b01      	subs	r3, #1
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d118      	bne.n	8009f5c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691a      	ldr	r2, [r3, #16]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	b2d2      	uxtb	r2, r2
 8009f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f46:	3b01      	subs	r3, #1
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f47f ae94 	bne.w	8009c8e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2220      	movs	r2, #32
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e000      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f82:	2302      	movs	r3, #2
  }
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3728      	adds	r7, #40	; 0x28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	00010004 	.word	0x00010004
 8009f90:	200000a4 	.word	0x200000a4
 8009f94:	14f8b589 	.word	0x14f8b589

08009f98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa6:	b2db      	uxtb	r3, r3
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr

08009fb2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bc80      	pop	{r7}
 8009fc6:	4770      	bx	lr

08009fc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d006      	beq.n	8009ff2 <I2C_MasterRequestWrite+0x2a>
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d003      	beq.n	8009ff2 <I2C_MasterRequestWrite+0x2a>
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ff0:	d108      	bne.n	800a004 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	e00b      	b.n	800a01c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a008:	2b12      	cmp	r3, #18
 800a00a:	d107      	bne.n	800a01c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a01a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f9cd 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00d      	beq.n	800a050 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a042:	d103      	bne.n	800a04c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a04a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e035      	b.n	800a0bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a058:	d108      	bne.n	800a06c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a05a:	897b      	ldrh	r3, [r7, #10]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	461a      	mov	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a068:	611a      	str	r2, [r3, #16]
 800a06a:	e01b      	b.n	800a0a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a06c:	897b      	ldrh	r3, [r7, #10]
 800a06e:	11db      	asrs	r3, r3, #7
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0306 	and.w	r3, r3, #6
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f063 030f 	orn	r3, r3, #15
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	490e      	ldr	r1, [pc, #56]	; (800a0c4 <I2C_MasterRequestWrite+0xfc>)
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fa16 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e010      	b.n	800a0bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a09a:	897b      	ldrh	r3, [r7, #10]
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	4907      	ldr	r1, [pc, #28]	; (800a0c8 <I2C_MasterRequestWrite+0x100>)
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 fa06 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e000      	b.n	800a0bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	00010008 	.word	0x00010008
 800a0c8:	00010002 	.word	0x00010002

0800a0cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4603      	mov	r3, r0
 800a0dc:	817b      	strh	r3, [r7, #10]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	813b      	strh	r3, [r7, #8]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 f960 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00d      	beq.n	800a12a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a11c:	d103      	bne.n	800a126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e05f      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a12a:	897b      	ldrh	r3, [r7, #10]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	6a3a      	ldr	r2, [r7, #32]
 800a13e:	492d      	ldr	r1, [pc, #180]	; (800a1f4 <I2C_RequestMemoryWrite+0x128>)
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f9bb 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e04c      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a168:	6a39      	ldr	r1, [r7, #32]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fa46 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00d      	beq.n	800a192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	d107      	bne.n	800a18e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a18c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e02b      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d105      	bne.n	800a1a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a198:	893b      	ldrh	r3, [r7, #8]
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	611a      	str	r2, [r3, #16]
 800a1a2:	e021      	b.n	800a1e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1a4:	893b      	ldrh	r3, [r7, #8]
 800a1a6:	0a1b      	lsrs	r3, r3, #8
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	6a39      	ldr	r1, [r7, #32]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fa20 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d107      	bne.n	800a1da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e005      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1de:	893b      	ldrh	r3, [r7, #8]
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	00010002 	.word	0x00010002

0800a1f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	4608      	mov	r0, r1
 800a202:	4611      	mov	r1, r2
 800a204:	461a      	mov	r2, r3
 800a206:	4603      	mov	r3, r0
 800a208:	817b      	strh	r3, [r7, #10]
 800a20a:	460b      	mov	r3, r1
 800a20c:	813b      	strh	r3, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	2200      	movs	r2, #0
 800a23a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f8c2 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00d      	beq.n	800a266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a258:	d103      	bne.n	800a262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e0aa      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a266:	897b      	ldrh	r3, [r7, #10]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	6a3a      	ldr	r2, [r7, #32]
 800a27a:	4952      	ldr	r1, [pc, #328]	; (800a3c4 <I2C_RequestMemoryRead+0x1cc>)
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f91d 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e097      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	617b      	str	r3, [r7, #20]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a4:	6a39      	ldr	r1, [r7, #32]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 f9a8 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00d      	beq.n	800a2ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d107      	bne.n	800a2ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e076      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d105      	bne.n	800a2e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2d4:	893b      	ldrh	r3, [r7, #8]
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	611a      	str	r2, [r3, #16]
 800a2de:	e021      	b.n	800a324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2e0:	893b      	ldrh	r3, [r7, #8]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	6a39      	ldr	r1, [r7, #32]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f982 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a302:	2b04      	cmp	r3, #4
 800a304:	d107      	bne.n	800a316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e050      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a31a:	893b      	ldrh	r3, [r7, #8]
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a326:	6a39      	ldr	r1, [r7, #32]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f967 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00d      	beq.n	800a350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d107      	bne.n	800a34c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a34a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e035      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a35e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	2200      	movs	r2, #0
 800a368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f82b 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00d      	beq.n	800a394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a386:	d103      	bne.n	800a390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a38e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e013      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a394:	897b      	ldrh	r3, [r7, #10]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f043 0301 	orr.w	r3, r3, #1
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	6a3a      	ldr	r2, [r7, #32]
 800a3a8:	4906      	ldr	r1, [pc, #24]	; (800a3c4 <I2C_RequestMemoryRead+0x1cc>)
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 f886 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	00010002 	.word	0x00010002

0800a3c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3d8:	e048      	b.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e0:	d044      	beq.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e2:	f7fe f9e3 	bl	80087ac <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d139      	bne.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	0c1b      	lsrs	r3, r3, #16
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d10d      	bne.n	800a41e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	43da      	mvns	r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	4013      	ands	r3, r2
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	bf0c      	ite	eq
 800a414:	2301      	moveq	r3, #1
 800a416:	2300      	movne	r3, #0
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	461a      	mov	r2, r3
 800a41c:	e00c      	b.n	800a438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	43da      	mvns	r2, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4013      	ands	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d116      	bne.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	f043 0220 	orr.w	r2, r3, #32
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e023      	b.n	800a4b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	0c1b      	lsrs	r3, r3, #16
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	d10d      	bne.n	800a492 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	43da      	mvns	r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4013      	ands	r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	bf0c      	ite	eq
 800a488:	2301      	moveq	r3, #1
 800a48a:	2300      	movne	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	e00c      	b.n	800a4ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	43da      	mvns	r2, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	4013      	ands	r3, r2
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	bf0c      	ite	eq
 800a4a4:	2301      	moveq	r3, #1
 800a4a6:	2300      	movne	r3, #0
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d093      	beq.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4ca:	e071      	b.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4da:	d123      	bne.n	800a524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a510:	f043 0204 	orr.w	r2, r3, #4
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e067      	b.n	800a5f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a52a:	d041      	beq.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52c:	f7fe f93e 	bl	80087ac <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d302      	bcc.n	800a542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d136      	bne.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	0c1b      	lsrs	r3, r3, #16
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10c      	bne.n	800a566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	43da      	mvns	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bf14      	ite	ne
 800a55e:	2301      	movne	r3, #1
 800a560:	2300      	moveq	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	e00b      	b.n	800a57e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	43da      	mvns	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	4013      	ands	r3, r2
 800a572:	b29b      	uxth	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	bf14      	ite	ne
 800a578:	2301      	movne	r3, #1
 800a57a:	2300      	moveq	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d016      	beq.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59c:	f043 0220 	orr.w	r2, r3, #32
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e021      	b.n	800a5f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	0c1b      	lsrs	r3, r3, #16
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d10c      	bne.n	800a5d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	43da      	mvns	r2, r3
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bf14      	ite	ne
 800a5cc:	2301      	movne	r3, #1
 800a5ce:	2300      	moveq	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	e00b      	b.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	43da      	mvns	r2, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	bf14      	ite	ne
 800a5e6:	2301      	movne	r3, #1
 800a5e8:	2300      	moveq	r3, #0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f47f af6d 	bne.w	800a4cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a608:	e034      	b.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 f8e3 	bl	800a7d6 <I2C_IsAcknowledgeFailed>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e034      	b.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a620:	d028      	beq.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a622:	f7fe f8c3 	bl	80087ac <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d302      	bcc.n	800a638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11d      	bne.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a642:	2b80      	cmp	r3, #128	; 0x80
 800a644:	d016      	beq.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	f043 0220 	orr.w	r2, r3, #32
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e007      	b.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a67e:	2b80      	cmp	r3, #128	; 0x80
 800a680:	d1c3      	bne.n	800a60a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a698:	e034      	b.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f89b 	bl	800a7d6 <I2C_IsAcknowledgeFailed>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e034      	b.n	800a714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b0:	d028      	beq.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6b2:	f7fe f87b 	bl	80087ac <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d302      	bcc.n	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11d      	bne.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d016      	beq.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	f043 0220 	orr.w	r2, r3, #32
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e007      	b.n	800a714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	f003 0304 	and.w	r3, r3, #4
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d1c3      	bne.n	800a69a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a728:	e049      	b.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b10      	cmp	r3, #16
 800a736:	d119      	bne.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f06f 0210 	mvn.w	r2, #16
 800a740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e030      	b.n	800a7ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76c:	f7fe f81e 	bl	80087ac <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d302      	bcc.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d11d      	bne.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a78c:	2b40      	cmp	r3, #64	; 0x40
 800a78e:	d016      	beq.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2220      	movs	r2, #32
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7aa:	f043 0220 	orr.w	r2, r3, #32
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e007      	b.n	800a7ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c8:	2b40      	cmp	r3, #64	; 0x40
 800a7ca:	d1ae      	bne.n	800a72a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ec:	d11b      	bne.n	800a826 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	f043 0204 	orr.w	r2, r3, #4
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bc80      	pop	{r7}
 800a830:	4770      	bx	lr
	...

0800a834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e272      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 8087 	beq.w	800a962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a854:	4b92      	ldr	r3, [pc, #584]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f003 030c 	and.w	r3, r3, #12
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d00c      	beq.n	800a87a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a860:	4b8f      	ldr	r3, [pc, #572]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f003 030c 	and.w	r3, r3, #12
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d112      	bne.n	800a892 <HAL_RCC_OscConfig+0x5e>
 800a86c:	4b8c      	ldr	r3, [pc, #560]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a878:	d10b      	bne.n	800a892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a87a:	4b89      	ldr	r3, [pc, #548]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d06c      	beq.n	800a960 <HAL_RCC_OscConfig+0x12c>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d168      	bne.n	800a960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e24c      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a89a:	d106      	bne.n	800a8aa <HAL_RCC_OscConfig+0x76>
 800a89c:	4b80      	ldr	r3, [pc, #512]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a7f      	ldr	r2, [pc, #508]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	e02e      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10c      	bne.n	800a8cc <HAL_RCC_OscConfig+0x98>
 800a8b2:	4b7b      	ldr	r3, [pc, #492]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a7a      	ldr	r2, [pc, #488]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	4b78      	ldr	r3, [pc, #480]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a77      	ldr	r2, [pc, #476]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	e01d      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8d4:	d10c      	bne.n	800a8f0 <HAL_RCC_OscConfig+0xbc>
 800a8d6:	4b72      	ldr	r3, [pc, #456]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a71      	ldr	r2, [pc, #452]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4b6f      	ldr	r3, [pc, #444]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a6e      	ldr	r2, [pc, #440]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	e00b      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8f0:	4b6b      	ldr	r3, [pc, #428]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a6a      	ldr	r2, [pc, #424]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	4b68      	ldr	r3, [pc, #416]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a67      	ldr	r2, [pc, #412]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d013      	beq.n	800a938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a910:	f7fd ff4c 	bl	80087ac <HAL_GetTick>
 800a914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a916:	e008      	b.n	800a92a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a918:	f7fd ff48 	bl	80087ac <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b64      	cmp	r3, #100	; 0x64
 800a924:	d901      	bls.n	800a92a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e200      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a92a:	4b5d      	ldr	r3, [pc, #372]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f0      	beq.n	800a918 <HAL_RCC_OscConfig+0xe4>
 800a936:	e014      	b.n	800a962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a938:	f7fd ff38 	bl	80087ac <HAL_GetTick>
 800a93c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a93e:	e008      	b.n	800a952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a940:	f7fd ff34 	bl	80087ac <HAL_GetTick>
 800a944:	4602      	mov	r2, r0
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	2b64      	cmp	r3, #100	; 0x64
 800a94c:	d901      	bls.n	800a952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e1ec      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a952:	4b53      	ldr	r3, [pc, #332]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1f0      	bne.n	800a940 <HAL_RCC_OscConfig+0x10c>
 800a95e:	e000      	b.n	800a962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d063      	beq.n	800aa36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a96e:	4b4c      	ldr	r3, [pc, #304]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f003 030c 	and.w	r3, r3, #12
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00b      	beq.n	800a992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a97a:	4b49      	ldr	r3, [pc, #292]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f003 030c 	and.w	r3, r3, #12
 800a982:	2b08      	cmp	r3, #8
 800a984:	d11c      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x18c>
 800a986:	4b46      	ldr	r3, [pc, #280]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d116      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a992:	4b43      	ldr	r3, [pc, #268]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <HAL_RCC_OscConfig+0x176>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d001      	beq.n	800a9aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e1c0      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9aa:	4b3d      	ldr	r3, [pc, #244]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	4939      	ldr	r1, [pc, #228]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9be:	e03a      	b.n	800aa36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d020      	beq.n	800aa0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9c8:	4b36      	ldr	r3, [pc, #216]	; (800aaa4 <HAL_RCC_OscConfig+0x270>)
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ce:	f7fd feed 	bl	80087ac <HAL_GetTick>
 800a9d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9d4:	e008      	b.n	800a9e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9d6:	f7fd fee9 	bl	80087ac <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d901      	bls.n	800a9e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e1a1      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9e8:	4b2d      	ldr	r3, [pc, #180]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0f0      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f4:	4b2a      	ldr	r3, [pc, #168]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4927      	ldr	r1, [pc, #156]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	600b      	str	r3, [r1, #0]
 800aa08:	e015      	b.n	800aa36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa0a:	4b26      	ldr	r3, [pc, #152]	; (800aaa4 <HAL_RCC_OscConfig+0x270>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa10:	f7fd fecc 	bl	80087ac <HAL_GetTick>
 800aa14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa16:	e008      	b.n	800aa2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa18:	f7fd fec8 	bl	80087ac <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d901      	bls.n	800aa2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e180      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa2a:	4b1d      	ldr	r3, [pc, #116]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f0      	bne.n	800aa18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0308 	and.w	r3, r3, #8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d03a      	beq.n	800aab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d019      	beq.n	800aa7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa4a:	4b17      	ldr	r3, [pc, #92]	; (800aaa8 <HAL_RCC_OscConfig+0x274>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa50:	f7fd feac 	bl	80087ac <HAL_GetTick>
 800aa54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa56:	e008      	b.n	800aa6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa58:	f7fd fea8 	bl	80087ac <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d901      	bls.n	800aa6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e160      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0f0      	beq.n	800aa58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa76:	2001      	movs	r0, #1
 800aa78:	f000 face 	bl	800b018 <RCC_Delay>
 800aa7c:	e01c      	b.n	800aab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <HAL_RCC_OscConfig+0x274>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa84:	f7fd fe92 	bl	80087ac <HAL_GetTick>
 800aa88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa8a:	e00f      	b.n	800aaac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa8c:	f7fd fe8e 	bl	80087ac <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d908      	bls.n	800aaac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e146      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
 800aa9e:	bf00      	nop
 800aaa0:	40021000 	.word	0x40021000
 800aaa4:	42420000 	.word	0x42420000
 800aaa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaac:	4b92      	ldr	r3, [pc, #584]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e9      	bne.n	800aa8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 80a6 	beq.w	800ac12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aaca:	4b8b      	ldr	r3, [pc, #556]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10d      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aad6:	4b88      	ldr	r3, [pc, #544]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	4a87      	ldr	r2, [pc, #540]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aadc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aae0:	61d3      	str	r3, [r2, #28]
 800aae2:	4b85      	ldr	r3, [pc, #532]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaea:	60bb      	str	r3, [r7, #8]
 800aaec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaf2:	4b82      	ldr	r3, [pc, #520]	; (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d118      	bne.n	800ab30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aafe:	4b7f      	ldr	r3, [pc, #508]	; (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a7e      	ldr	r2, [pc, #504]	; (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab0a:	f7fd fe4f 	bl	80087ac <HAL_GetTick>
 800ab0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab10:	e008      	b.n	800ab24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab12:	f7fd fe4b 	bl	80087ac <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b64      	cmp	r3, #100	; 0x64
 800ab1e:	d901      	bls.n	800ab24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e103      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab24:	4b75      	ldr	r3, [pc, #468]	; (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0f0      	beq.n	800ab12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d106      	bne.n	800ab46 <HAL_RCC_OscConfig+0x312>
 800ab38:	4b6f      	ldr	r3, [pc, #444]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	4a6e      	ldr	r2, [pc, #440]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	6213      	str	r3, [r2, #32]
 800ab44:	e02d      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10c      	bne.n	800ab68 <HAL_RCC_OscConfig+0x334>
 800ab4e:	4b6a      	ldr	r3, [pc, #424]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	4a69      	ldr	r2, [pc, #420]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	f023 0301 	bic.w	r3, r3, #1
 800ab58:	6213      	str	r3, [r2, #32]
 800ab5a:	4b67      	ldr	r3, [pc, #412]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	4a66      	ldr	r2, [pc, #408]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab60:	f023 0304 	bic.w	r3, r3, #4
 800ab64:	6213      	str	r3, [r2, #32]
 800ab66:	e01c      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b05      	cmp	r3, #5
 800ab6e:	d10c      	bne.n	800ab8a <HAL_RCC_OscConfig+0x356>
 800ab70:	4b61      	ldr	r3, [pc, #388]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	4a60      	ldr	r2, [pc, #384]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab76:	f043 0304 	orr.w	r3, r3, #4
 800ab7a:	6213      	str	r3, [r2, #32]
 800ab7c:	4b5e      	ldr	r3, [pc, #376]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	4a5d      	ldr	r2, [pc, #372]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab82:	f043 0301 	orr.w	r3, r3, #1
 800ab86:	6213      	str	r3, [r2, #32]
 800ab88:	e00b      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab8a:	4b5b      	ldr	r3, [pc, #364]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	4a5a      	ldr	r2, [pc, #360]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	6213      	str	r3, [r2, #32]
 800ab96:	4b58      	ldr	r3, [pc, #352]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	4a57      	ldr	r2, [pc, #348]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab9c:	f023 0304 	bic.w	r3, r3, #4
 800aba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d015      	beq.n	800abd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abaa:	f7fd fdff 	bl	80087ac <HAL_GetTick>
 800abae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abb0:	e00a      	b.n	800abc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abb2:	f7fd fdfb 	bl	80087ac <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d901      	bls.n	800abc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e0b1      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc8:	4b4b      	ldr	r3, [pc, #300]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0ee      	beq.n	800abb2 <HAL_RCC_OscConfig+0x37e>
 800abd4:	e014      	b.n	800ac00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abd6:	f7fd fde9 	bl	80087ac <HAL_GetTick>
 800abda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abdc:	e00a      	b.n	800abf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abde:	f7fd fde5 	bl	80087ac <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abec:	4293      	cmp	r3, r2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e09b      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abf4:	4b40      	ldr	r3, [pc, #256]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1ee      	bne.n	800abde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d105      	bne.n	800ac12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac06:	4b3c      	ldr	r3, [pc, #240]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	4a3b      	ldr	r2, [pc, #236]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 8087 	beq.w	800ad2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac1c:	4b36      	ldr	r3, [pc, #216]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f003 030c 	and.w	r3, r3, #12
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d061      	beq.n	800acec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	69db      	ldr	r3, [r3, #28]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d146      	bne.n	800acbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac30:	4b33      	ldr	r3, [pc, #204]	; (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac36:	f7fd fdb9 	bl	80087ac <HAL_GetTick>
 800ac3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac3c:	e008      	b.n	800ac50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac3e:	f7fd fdb5 	bl	80087ac <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d901      	bls.n	800ac50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e06d      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac50:	4b29      	ldr	r3, [pc, #164]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1f0      	bne.n	800ac3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac64:	d108      	bne.n	800ac78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac66:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	4921      	ldr	r1, [pc, #132]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac74:	4313      	orrs	r3, r2
 800ac76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac78:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a19      	ldr	r1, [r3, #32]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	491b      	ldr	r1, [pc, #108]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac90:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac96:	f7fd fd89 	bl	80087ac <HAL_GetTick>
 800ac9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac9c:	e008      	b.n	800acb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac9e:	f7fd fd85 	bl	80087ac <HAL_GetTick>
 800aca2:	4602      	mov	r2, r0
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d901      	bls.n	800acb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e03d      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acb0:	4b11      	ldr	r3, [pc, #68]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0f0      	beq.n	800ac9e <HAL_RCC_OscConfig+0x46a>
 800acbc:	e035      	b.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acbe:	4b10      	ldr	r3, [pc, #64]	; (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acc4:	f7fd fd72 	bl	80087ac <HAL_GetTick>
 800acc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acca:	e008      	b.n	800acde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800accc:	f7fd fd6e 	bl	80087ac <HAL_GetTick>
 800acd0:	4602      	mov	r2, r0
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d901      	bls.n	800acde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e026      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acde:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1f0      	bne.n	800accc <HAL_RCC_OscConfig+0x498>
 800acea:	e01e      	b.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d107      	bne.n	800ad04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e019      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
 800acf8:	40021000 	.word	0x40021000
 800acfc:	40007000 	.word	0x40007000
 800ad00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad04:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <HAL_RCC_OscConfig+0x500>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d106      	bne.n	800ad26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d001      	beq.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	40021000 	.word	0x40021000

0800ad38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e0d0      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad4c:	4b6a      	ldr	r3, [pc, #424]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d910      	bls.n	800ad7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad5a:	4b67      	ldr	r3, [pc, #412]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f023 0207 	bic.w	r2, r3, #7
 800ad62:	4965      	ldr	r1, [pc, #404]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad6a:	4b63      	ldr	r3, [pc, #396]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 0307 	and.w	r3, r3, #7
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d001      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e0b8      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d020      	beq.n	800adca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d005      	beq.n	800ada0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad94:	4b59      	ldr	r3, [pc, #356]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	4a58      	ldr	r2, [pc, #352]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ad9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0308 	and.w	r3, r3, #8
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adac:	4b53      	ldr	r3, [pc, #332]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	4a52      	ldr	r2, [pc, #328]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800adb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adb8:	4b50      	ldr	r3, [pc, #320]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	494d      	ldr	r1, [pc, #308]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d040      	beq.n	800ae58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d107      	bne.n	800adee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adde:	4b47      	ldr	r3, [pc, #284]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d115      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e07f      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d107      	bne.n	800ae06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adf6:	4b41      	ldr	r3, [pc, #260]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e073      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae06:	4b3d      	ldr	r3, [pc, #244]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e06b      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae16:	4b39      	ldr	r3, [pc, #228]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f023 0203 	bic.w	r2, r3, #3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4936      	ldr	r1, [pc, #216]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae28:	f7fd fcc0 	bl	80087ac <HAL_GetTick>
 800ae2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae2e:	e00a      	b.n	800ae46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae30:	f7fd fcbc 	bl	80087ac <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e053      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae46:	4b2d      	ldr	r3, [pc, #180]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	f003 020c 	and.w	r2, r3, #12
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d1eb      	bne.n	800ae30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae58:	4b27      	ldr	r3, [pc, #156]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0307 	and.w	r3, r3, #7
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d210      	bcs.n	800ae88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae66:	4b24      	ldr	r3, [pc, #144]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f023 0207 	bic.w	r2, r3, #7
 800ae6e:	4922      	ldr	r1, [pc, #136]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae76:	4b20      	ldr	r3, [pc, #128]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d001      	beq.n	800ae88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e032      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d008      	beq.n	800aea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae94:	4b19      	ldr	r3, [pc, #100]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	4916      	ldr	r1, [pc, #88]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0308 	and.w	r3, r3, #8
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d009      	beq.n	800aec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aeb2:	4b12      	ldr	r3, [pc, #72]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	490e      	ldr	r1, [pc, #56]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aec6:	f000 f821 	bl	800af0c <HAL_RCC_GetSysClockFreq>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	091b      	lsrs	r3, r3, #4
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	490a      	ldr	r1, [pc, #40]	; (800af00 <HAL_RCC_ClockConfig+0x1c8>)
 800aed8:	5ccb      	ldrb	r3, [r1, r3]
 800aeda:	fa22 f303 	lsr.w	r3, r2, r3
 800aede:	4a09      	ldr	r2, [pc, #36]	; (800af04 <HAL_RCC_ClockConfig+0x1cc>)
 800aee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aee2:	4b09      	ldr	r3, [pc, #36]	; (800af08 <HAL_RCC_ClockConfig+0x1d0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fd fc1e 	bl	8008728 <HAL_InitTick>

  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	40022000 	.word	0x40022000
 800aefc:	40021000 	.word	0x40021000
 800af00:	0800dce8 	.word	0x0800dce8
 800af04:	200000a4 	.word	0x200000a4
 800af08:	200000a8 	.word	0x200000a8

0800af0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	2300      	movs	r3, #0
 800af18:	60bb      	str	r3, [r7, #8]
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	2300      	movs	r3, #0
 800af20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af26:	4b1e      	ldr	r3, [pc, #120]	; (800afa0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f003 030c 	and.w	r3, r3, #12
 800af32:	2b04      	cmp	r3, #4
 800af34:	d002      	beq.n	800af3c <HAL_RCC_GetSysClockFreq+0x30>
 800af36:	2b08      	cmp	r3, #8
 800af38:	d003      	beq.n	800af42 <HAL_RCC_GetSysClockFreq+0x36>
 800af3a:	e027      	b.n	800af8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af3c:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af3e:	613b      	str	r3, [r7, #16]
      break;
 800af40:	e027      	b.n	800af92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	0c9b      	lsrs	r3, r3, #18
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	4a17      	ldr	r2, [pc, #92]	; (800afa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af4c:	5cd3      	ldrb	r3, [r2, r3]
 800af4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d010      	beq.n	800af7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af5a:	4b11      	ldr	r3, [pc, #68]	; (800afa0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	0c5b      	lsrs	r3, r3, #17
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	4a11      	ldr	r2, [pc, #68]	; (800afac <HAL_RCC_GetSysClockFreq+0xa0>)
 800af66:	5cd3      	ldrb	r3, [r2, r3]
 800af68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a0d      	ldr	r2, [pc, #52]	; (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af6e:	fb03 f202 	mul.w	r2, r3, r2
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	fbb2 f3f3 	udiv	r3, r2, r3
 800af78:	617b      	str	r3, [r7, #20]
 800af7a:	e004      	b.n	800af86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a0c      	ldr	r2, [pc, #48]	; (800afb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af80:	fb02 f303 	mul.w	r3, r2, r3
 800af84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	613b      	str	r3, [r7, #16]
      break;
 800af8a:	e002      	b.n	800af92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af8c:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af8e:	613b      	str	r3, [r7, #16]
      break;
 800af90:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af92:	693b      	ldr	r3, [r7, #16]
}
 800af94:	4618      	mov	r0, r3
 800af96:	371c      	adds	r7, #28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bc80      	pop	{r7}
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	40021000 	.word	0x40021000
 800afa4:	007a1200 	.word	0x007a1200
 800afa8:	0800dd00 	.word	0x0800dd00
 800afac:	0800dd10 	.word	0x0800dd10
 800afb0:	003d0900 	.word	0x003d0900

0800afb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afb8:	4b02      	ldr	r3, [pc, #8]	; (800afc4 <HAL_RCC_GetHCLKFreq+0x10>)
 800afba:	681b      	ldr	r3, [r3, #0]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc80      	pop	{r7}
 800afc2:	4770      	bx	lr
 800afc4:	200000a4 	.word	0x200000a4

0800afc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800afcc:	f7ff fff2 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800afd0:	4602      	mov	r2, r0
 800afd2:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	4903      	ldr	r1, [pc, #12]	; (800afec <HAL_RCC_GetPCLK1Freq+0x24>)
 800afde:	5ccb      	ldrb	r3, [r1, r3]
 800afe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	40021000 	.word	0x40021000
 800afec:	0800dcf8 	.word	0x0800dcf8

0800aff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aff4:	f7ff ffde 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800aff8:	4602      	mov	r2, r0
 800affa:	4b05      	ldr	r3, [pc, #20]	; (800b010 <HAL_RCC_GetPCLK2Freq+0x20>)
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	0adb      	lsrs	r3, r3, #11
 800b000:	f003 0307 	and.w	r3, r3, #7
 800b004:	4903      	ldr	r1, [pc, #12]	; (800b014 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b006:	5ccb      	ldrb	r3, [r1, r3]
 800b008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	40021000 	.word	0x40021000
 800b014:	0800dcf8 	.word	0x0800dcf8

0800b018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b020:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <RCC_Delay+0x34>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a0a      	ldr	r2, [pc, #40]	; (800b050 <RCC_Delay+0x38>)
 800b026:	fba2 2303 	umull	r2, r3, r2, r3
 800b02a:	0a5b      	lsrs	r3, r3, #9
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	fb02 f303 	mul.w	r3, r2, r3
 800b032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b034:	bf00      	nop
  }
  while (Delay --);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1e5a      	subs	r2, r3, #1
 800b03a:	60fa      	str	r2, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1f9      	bne.n	800b034 <RCC_Delay+0x1c>
}
 800b040:	bf00      	nop
 800b042:	bf00      	nop
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	bc80      	pop	{r7}
 800b04a:	4770      	bx	lr
 800b04c:	200000a4 	.word	0x200000a4
 800b050:	10624dd3 	.word	0x10624dd3

0800b054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e041      	b.n	800b0ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7fd fa26 	bl	80084cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3304      	adds	r3, #4
 800b090:	4619      	mov	r1, r3
 800b092:	4610      	mov	r0, r2
 800b094:	f000 fa82 	bl	800b59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b01      	cmp	r3, #1
 800b106:	d001      	beq.n	800b10c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e044      	b.n	800b196 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0201 	orr.w	r2, r2, #1
 800b122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a1d      	ldr	r2, [pc, #116]	; (800b1a0 <HAL_TIM_Base_Start_IT+0xac>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d018      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a1c      	ldr	r2, [pc, #112]	; (800b1a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d013      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b140:	d00e      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a18      	ldr	r2, [pc, #96]	; (800b1a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d009      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a16      	ldr	r2, [pc, #88]	; (800b1ac <HAL_TIM_Base_Start_IT+0xb8>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d004      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d111      	bne.n	800b184 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b06      	cmp	r3, #6
 800b170:	d010      	beq.n	800b194 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f042 0201 	orr.w	r2, r2, #1
 800b180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b182:	e007      	b.n	800b194 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f042 0201 	orr.w	r2, r2, #1
 800b192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bc80      	pop	{r7}
 800b19e:	4770      	bx	lr
 800b1a0:	40012c00 	.word	0x40012c00
 800b1a4:	40013400 	.word	0x40013400
 800b1a8:	40000400 	.word	0x40000400
 800b1ac:	40000800 	.word	0x40000800
 800b1b0:	40000c00 	.word	0x40000c00

0800b1b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d122      	bne.n	800b210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d11b      	bne.n	800b210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f06f 0202 	mvn.w	r2, #2
 800b1e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f9b4 	bl	800b564 <HAL_TIM_IC_CaptureCallback>
 800b1fc:	e005      	b.n	800b20a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f9a7 	bl	800b552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f9b6 	bl	800b576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0304 	and.w	r3, r3, #4
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d122      	bne.n	800b264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 0304 	and.w	r3, r3, #4
 800b228:	2b04      	cmp	r3, #4
 800b22a:	d11b      	bne.n	800b264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f06f 0204 	mvn.w	r2, #4
 800b234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2202      	movs	r2, #2
 800b23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f98a 	bl	800b564 <HAL_TIM_IC_CaptureCallback>
 800b250:	e005      	b.n	800b25e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f97d 	bl	800b552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f98c 	bl	800b576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0308 	and.w	r3, r3, #8
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d122      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0308 	and.w	r3, r3, #8
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d11b      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0208 	mvn.w	r2, #8
 800b288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2204      	movs	r2, #4
 800b28e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f003 0303 	and.w	r3, r3, #3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f960 	bl	800b564 <HAL_TIM_IC_CaptureCallback>
 800b2a4:	e005      	b.n	800b2b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f953 	bl	800b552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f962 	bl	800b576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0310 	and.w	r3, r3, #16
 800b2c2:	2b10      	cmp	r3, #16
 800b2c4:	d122      	bne.n	800b30c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f003 0310 	and.w	r3, r3, #16
 800b2d0:	2b10      	cmp	r3, #16
 800b2d2:	d11b      	bne.n	800b30c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0210 	mvn.w	r2, #16
 800b2dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2208      	movs	r2, #8
 800b2e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f936 	bl	800b564 <HAL_TIM_IC_CaptureCallback>
 800b2f8:	e005      	b.n	800b306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f929 	bl	800b552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f938 	bl	800b576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b01      	cmp	r3, #1
 800b318:	d10e      	bne.n	800b338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	2b01      	cmp	r3, #1
 800b326:	d107      	bne.n	800b338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f06f 0201 	mvn.w	r2, #1
 800b330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7fc fd2e 	bl	8007d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b342:	2b80      	cmp	r3, #128	; 0x80
 800b344:	d10e      	bne.n	800b364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b350:	2b80      	cmp	r3, #128	; 0x80
 800b352:	d107      	bne.n	800b364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 faa1 	bl	800b8a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36e:	2b40      	cmp	r3, #64	; 0x40
 800b370:	d10e      	bne.n	800b390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37c:	2b40      	cmp	r3, #64	; 0x40
 800b37e:	d107      	bne.n	800b390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f8fc 	bl	800b588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f003 0320 	and.w	r3, r3, #32
 800b39a:	2b20      	cmp	r3, #32
 800b39c:	d10e      	bne.n	800b3bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	2b20      	cmp	r3, #32
 800b3aa:	d107      	bne.n	800b3bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f06f 0220 	mvn.w	r2, #32
 800b3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa6c 	bl	800b894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3bc:	bf00      	nop
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d101      	bne.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	e0b4      	b.n	800b54a <HAL_TIM_ConfigClockSource+0x186>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b3fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b418:	d03e      	beq.n	800b498 <HAL_TIM_ConfigClockSource+0xd4>
 800b41a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b41e:	f200 8087 	bhi.w	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b426:	f000 8086 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x172>
 800b42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b42e:	d87f      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b430:	2b70      	cmp	r3, #112	; 0x70
 800b432:	d01a      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0xa6>
 800b434:	2b70      	cmp	r3, #112	; 0x70
 800b436:	d87b      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b438:	2b60      	cmp	r3, #96	; 0x60
 800b43a:	d050      	beq.n	800b4de <HAL_TIM_ConfigClockSource+0x11a>
 800b43c:	2b60      	cmp	r3, #96	; 0x60
 800b43e:	d877      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b440:	2b50      	cmp	r3, #80	; 0x50
 800b442:	d03c      	beq.n	800b4be <HAL_TIM_ConfigClockSource+0xfa>
 800b444:	2b50      	cmp	r3, #80	; 0x50
 800b446:	d873      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b448:	2b40      	cmp	r3, #64	; 0x40
 800b44a:	d058      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x13a>
 800b44c:	2b40      	cmp	r3, #64	; 0x40
 800b44e:	d86f      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b450:	2b30      	cmp	r3, #48	; 0x30
 800b452:	d064      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x15a>
 800b454:	2b30      	cmp	r3, #48	; 0x30
 800b456:	d86b      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b458:	2b20      	cmp	r3, #32
 800b45a:	d060      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x15a>
 800b45c:	2b20      	cmp	r3, #32
 800b45e:	d867      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b460:	2b00      	cmp	r3, #0
 800b462:	d05c      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x15a>
 800b464:	2b10      	cmp	r3, #16
 800b466:	d05a      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x15a>
 800b468:	e062      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b47a:	f000 f980 	bl	800b77e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b48c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	609a      	str	r2, [r3, #8]
      break;
 800b496:	e04f      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4a8:	f000 f969 	bl	800b77e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	689a      	ldr	r2, [r3, #8]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4ba:	609a      	str	r2, [r3, #8]
      break;
 800b4bc:	e03c      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f000 f8e0 	bl	800b690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2150      	movs	r1, #80	; 0x50
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 f937 	bl	800b74a <TIM_ITRx_SetConfig>
      break;
 800b4dc:	e02c      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f000 f8fe 	bl	800b6ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2160      	movs	r1, #96	; 0x60
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f927 	bl	800b74a <TIM_ITRx_SetConfig>
      break;
 800b4fc:	e01c      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b50a:	461a      	mov	r2, r3
 800b50c:	f000 f8c0 	bl	800b690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2140      	movs	r1, #64	; 0x40
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f917 	bl	800b74a <TIM_ITRx_SetConfig>
      break;
 800b51c:	e00c      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4619      	mov	r1, r3
 800b528:	4610      	mov	r0, r2
 800b52a:	f000 f90e 	bl	800b74a <TIM_ITRx_SetConfig>
      break;
 800b52e:	e003      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
      break;
 800b534:	e000      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b548:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	bc80      	pop	{r7}
 800b562:	4770      	bx	lr

0800b564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b56c:	bf00      	nop
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr

0800b576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b576:	b480      	push	{r7}
 800b578:	b083      	sub	sp, #12
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	bc80      	pop	{r7}
 800b586:	4770      	bx	lr

0800b588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	bc80      	pop	{r7}
 800b598:	4770      	bx	lr
	...

0800b59c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a33      	ldr	r2, [pc, #204]	; (800b67c <TIM_Base_SetConfig+0xe0>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d013      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a32      	ldr	r2, [pc, #200]	; (800b680 <TIM_Base_SetConfig+0xe4>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d00f      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c2:	d00b      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a2f      	ldr	r2, [pc, #188]	; (800b684 <TIM_Base_SetConfig+0xe8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d007      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a2e      	ldr	r2, [pc, #184]	; (800b688 <TIM_Base_SetConfig+0xec>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d003      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a2d      	ldr	r2, [pc, #180]	; (800b68c <TIM_Base_SetConfig+0xf0>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d108      	bne.n	800b5ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a22      	ldr	r2, [pc, #136]	; (800b67c <TIM_Base_SetConfig+0xe0>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d013      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a21      	ldr	r2, [pc, #132]	; (800b680 <TIM_Base_SetConfig+0xe4>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d00f      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b604:	d00b      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a1e      	ldr	r2, [pc, #120]	; (800b684 <TIM_Base_SetConfig+0xe8>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d007      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a1d      	ldr	r2, [pc, #116]	; (800b688 <TIM_Base_SetConfig+0xec>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d003      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a1c      	ldr	r2, [pc, #112]	; (800b68c <TIM_Base_SetConfig+0xf0>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d108      	bne.n	800b630 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	689a      	ldr	r2, [r3, #8]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a09      	ldr	r2, [pc, #36]	; (800b67c <TIM_Base_SetConfig+0xe0>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d003      	beq.n	800b664 <TIM_Base_SetConfig+0xc8>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a08      	ldr	r2, [pc, #32]	; (800b680 <TIM_Base_SetConfig+0xe4>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d103      	bne.n	800b66c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	691a      	ldr	r2, [r3, #16]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	615a      	str	r2, [r3, #20]
}
 800b672:	bf00      	nop
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	bc80      	pop	{r7}
 800b67a:	4770      	bx	lr
 800b67c:	40012c00 	.word	0x40012c00
 800b680:	40013400 	.word	0x40013400
 800b684:	40000400 	.word	0x40000400
 800b688:	40000800 	.word	0x40000800
 800b68c:	40000c00 	.word	0x40000c00

0800b690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b690:	b480      	push	{r7}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	f023 0201 	bic.w	r2, r3, #1
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	011b      	lsls	r3, r3, #4
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f023 030a 	bic.w	r3, r3, #10
 800b6cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	621a      	str	r2, [r3, #32]
}
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bc80      	pop	{r7}
 800b6ea:	4770      	bx	lr

0800b6ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	f023 0210 	bic.w	r2, r3, #16
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	031b      	lsls	r3, r3, #12
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	4313      	orrs	r3, r2
 800b720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b728:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	011b      	lsls	r3, r3, #4
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	4313      	orrs	r3, r2
 800b732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	621a      	str	r2, [r3, #32]
}
 800b740:	bf00      	nop
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr

0800b74a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b085      	sub	sp, #20
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4313      	orrs	r3, r2
 800b768:	f043 0307 	orr.w	r3, r3, #7
 800b76c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	609a      	str	r2, [r3, #8]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	bc80      	pop	{r7}
 800b77c:	4770      	bx	lr

0800b77e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b77e:	b480      	push	{r7}
 800b780:	b087      	sub	sp, #28
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	60b9      	str	r1, [r7, #8]
 800b788:	607a      	str	r2, [r7, #4]
 800b78a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b798:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	021a      	lsls	r2, r3, #8
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	609a      	str	r2, [r3, #8]
}
 800b7b2:	bf00      	nop
 800b7b4:	371c      	adds	r7, #28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bc80      	pop	{r7}
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d101      	bne.n	800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	e050      	b.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	4313      	orrs	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a1b      	ldr	r2, [pc, #108]	; (800b880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d018      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a19      	ldr	r2, [pc, #100]	; (800b884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d013      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82a:	d00e      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a15      	ldr	r2, [pc, #84]	; (800b888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d009      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a14      	ldr	r2, [pc, #80]	; (800b88c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d004      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a12      	ldr	r2, [pc, #72]	; (800b890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d10c      	bne.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	4313      	orrs	r3, r2
 800b85a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr
 800b880:	40012c00 	.word	0x40012c00
 800b884:	40013400 	.word	0x40013400
 800b888:	40000400 	.word	0x40000400
 800b88c:	40000800 	.word	0x40000800
 800b890:	40000c00 	.word	0x40000c00

0800b894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bc80      	pop	{r7}
 800b8a4:	4770      	bx	lr

0800b8a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8ae:	bf00      	nop
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bc80      	pop	{r7}
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e042      	b.n	800b950 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7fc fe1a 	bl	8008518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2224      	movs	r2, #36	; 0x24
 800b8e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68da      	ldr	r2, [r3, #12]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fcb5 	bl	800c26c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	691a      	ldr	r2, [r3, #16]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	695a      	ldr	r2, [r3, #20]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68da      	ldr	r2, [r3, #12]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2220      	movs	r2, #32
 800b944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b20      	cmp	r3, #32
 800b970:	d121      	bne.n	800b9b6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <HAL_UART_Transmit_IT+0x26>
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	e01a      	b.n	800b9b8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	88fa      	ldrh	r2, [r7, #6]
 800b98c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	88fa      	ldrh	r2, [r7, #6]
 800b992:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2221      	movs	r2, #33	; 0x21
 800b99e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e000      	b.n	800b9b8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b9b6:	2302      	movs	r3, #2
  }
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bc80      	pop	{r7}
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b0ba      	sub	sp, #232	; 0xe8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fa:	f003 030f 	and.w	r3, r3, #15
 800b9fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10f      	bne.n	800ba2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba0e:	f003 0320 	and.w	r3, r3, #32
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <HAL_UART_IRQHandler+0x66>
 800ba16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fb63 	bl	800c0ee <UART_Receive_IT>
      return;
 800ba28:	e25b      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 80de 	beq.w	800bbf0 <HAL_UART_IRQHandler+0x22c>
 800ba34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 80d1 	beq.w	800bbf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00b      	beq.n	800ba72 <HAL_UART_IRQHandler+0xae>
 800ba5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d005      	beq.n	800ba72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba6a:	f043 0201 	orr.w	r2, r3, #1
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba76:	f003 0304 	and.w	r3, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00b      	beq.n	800ba96 <HAL_UART_IRQHandler+0xd2>
 800ba7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8e:	f043 0202 	orr.w	r2, r3, #2
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba9a:	f003 0302 	and.w	r3, r3, #2
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00b      	beq.n	800baba <HAL_UART_IRQHandler+0xf6>
 800baa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d005      	beq.n	800baba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab2:	f043 0204 	orr.w	r2, r3, #4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800baba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800babe:	f003 0308 	and.w	r3, r3, #8
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d011      	beq.n	800baea <HAL_UART_IRQHandler+0x126>
 800bac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d105      	bne.n	800bade <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d005      	beq.n	800baea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bae2:	f043 0208 	orr.w	r2, r3, #8
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 81f2 	beq.w	800bed8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800baf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf8:	f003 0320 	and.w	r3, r3, #32
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d008      	beq.n	800bb12 <HAL_UART_IRQHandler+0x14e>
 800bb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 faee 	bl	800c0ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bf14      	ite	ne
 800bb20:	2301      	movne	r3, #1
 800bb22:	2300      	moveq	r3, #0
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <HAL_UART_IRQHandler+0x17a>
 800bb36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d04f      	beq.n	800bbde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f9f8 	bl	800bf34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d041      	beq.n	800bbd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3314      	adds	r3, #20
 800bb58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb60:	e853 3f00 	ldrex	r3, [r3]
 800bb64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3314      	adds	r3, #20
 800bb7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb8e:	e841 2300 	strex	r3, r2, [r1]
 800bb92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1d9      	bne.n	800bb52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d013      	beq.n	800bbce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbaa:	4a7e      	ldr	r2, [pc, #504]	; (800bda4 <HAL_UART_IRQHandler+0x3e0>)
 800bbac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd f86c 	bl	8008c90 <HAL_DMA_Abort_IT>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d016      	beq.n	800bbec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbcc:	e00e      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f99c 	bl	800bf0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd4:	e00a      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f998 	bl	800bf0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbdc:	e006      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f994 	bl	800bf0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bbea:	e175      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbec:	bf00      	nop
    return;
 800bbee:	e173      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	f040 814f 	bne.w	800be98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfe:	f003 0310 	and.w	r3, r3, #16
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 8148 	beq.w	800be98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc0c:	f003 0310 	and.w	r3, r3, #16
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 8141 	beq.w	800be98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc16:	2300      	movs	r3, #0
 800bc18:	60bb      	str	r3, [r7, #8]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60bb      	str	r3, [r7, #8]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	60bb      	str	r3, [r7, #8]
 800bc2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 80b6 	beq.w	800bda8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 8145 	beq.w	800bedc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	f080 813e 	bcs.w	800bedc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	f000 8088 	beq.w	800bd84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	330c      	adds	r3, #12
 800bc7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc82:	e853 3f00 	ldrex	r3, [r3]
 800bc86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	330c      	adds	r3, #12
 800bc9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bca0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bca4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bcac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bcb0:	e841 2300 	strex	r3, r2, [r1]
 800bcb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bcb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1d9      	bne.n	800bc74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcca:	e853 3f00 	ldrex	r3, [r3]
 800bcce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcd2:	f023 0301 	bic.w	r3, r3, #1
 800bcd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3314      	adds	r3, #20
 800bce0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bce4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bce8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcf0:	e841 2300 	strex	r3, r2, [r1]
 800bcf4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1e1      	bne.n	800bcc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3314      	adds	r3, #20
 800bd02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3314      	adds	r3, #20
 800bd1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd20:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e3      	bne.n	800bcfc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2220      	movs	r2, #32
 800bd38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	330c      	adds	r3, #12
 800bd48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4c:	e853 3f00 	ldrex	r3, [r3]
 800bd50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd54:	f023 0310 	bic.w	r3, r3, #16
 800bd58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	330c      	adds	r3, #12
 800bd62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd66:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd6e:	e841 2300 	strex	r3, r2, [r1]
 800bd72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1e3      	bne.n	800bd42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fc ff4b 	bl	8008c1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2202      	movs	r2, #2
 800bd88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f8bf 	bl	800bf1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bda0:	e09c      	b.n	800bedc <HAL_UART_IRQHandler+0x518>
 800bda2:	bf00      	nop
 800bda4:	0800bff9 	.word	0x0800bff9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 808e 	beq.w	800bee0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bdc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 8089 	beq.w	800bee0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	330c      	adds	r3, #12
 800bdd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd8:	e853 3f00 	ldrex	r3, [r3]
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bde4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	330c      	adds	r3, #12
 800bdee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdf2:	647a      	str	r2, [r7, #68]	; 0x44
 800bdf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e3      	bne.n	800bdce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3314      	adds	r3, #20
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	e853 3f00 	ldrex	r3, [r3]
 800be14:	623b      	str	r3, [r7, #32]
   return(result);
 800be16:	6a3b      	ldr	r3, [r7, #32]
 800be18:	f023 0301 	bic.w	r3, r3, #1
 800be1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3314      	adds	r3, #20
 800be26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be2a:	633a      	str	r2, [r7, #48]	; 0x30
 800be2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be32:	e841 2300 	strex	r3, r2, [r1]
 800be36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e3      	bne.n	800be06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2220      	movs	r2, #32
 800be42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	330c      	adds	r3, #12
 800be52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f023 0310 	bic.w	r3, r3, #16
 800be62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	330c      	adds	r3, #12
 800be6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be70:	61fa      	str	r2, [r7, #28]
 800be72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be74:	69b9      	ldr	r1, [r7, #24]
 800be76:	69fa      	ldr	r2, [r7, #28]
 800be78:	e841 2300 	strex	r3, r2, [r1]
 800be7c:	617b      	str	r3, [r7, #20]
   return(result);
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e3      	bne.n	800be4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f844 	bl	800bf1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be96:	e023      	b.n	800bee0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d009      	beq.n	800beb8 <HAL_UART_IRQHandler+0x4f4>
 800bea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f8b5 	bl	800c020 <UART_Transmit_IT>
    return;
 800beb6:	e014      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800beb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00e      	beq.n	800bee2 <HAL_UART_IRQHandler+0x51e>
 800bec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800becc:	2b00      	cmp	r3, #0
 800bece:	d008      	beq.n	800bee2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f8f4 	bl	800c0be <UART_EndTransmit_IT>
    return;
 800bed6:	e004      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
    return;
 800bed8:	bf00      	nop
 800beda:	e002      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bedc:	bf00      	nop
 800bede:	e000      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bee0:	bf00      	nop
  }
}
 800bee2:	37e8      	adds	r7, #232	; 0xe8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bc80      	pop	{r7}
 800bef8:	4770      	bx	lr

0800befa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800befa:	b480      	push	{r7}
 800befc:	b083      	sub	sp, #12
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf02:	bf00      	nop
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bc80      	pop	{r7}
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bc80      	pop	{r7}
 800bf1c:	4770      	bx	lr

0800bf1e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b083      	sub	sp, #12
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	460b      	mov	r3, r1
 800bf28:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf2a:	bf00      	nop
 800bf2c:	370c      	adds	r7, #12
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr

0800bf34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b095      	sub	sp, #84	; 0x54
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	330c      	adds	r3, #12
 800bf42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf46:	e853 3f00 	ldrex	r3, [r3]
 800bf4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	330c      	adds	r3, #12
 800bf5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf5c:	643a      	str	r2, [r7, #64]	; 0x40
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e5      	bne.n	800bf3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3314      	adds	r3, #20
 800bf76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	f023 0301 	bic.w	r3, r3, #1
 800bf86:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3314      	adds	r3, #20
 800bf8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf90:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e5      	bne.n	800bf70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d119      	bne.n	800bfe0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	330c      	adds	r3, #12
 800bfb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	e853 3f00 	ldrex	r3, [r3]
 800bfba:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f023 0310 	bic.w	r3, r3, #16
 800bfc2:	647b      	str	r3, [r7, #68]	; 0x44
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	330c      	adds	r3, #12
 800bfca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfcc:	61ba      	str	r2, [r7, #24]
 800bfce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	6979      	ldr	r1, [r7, #20]
 800bfd2:	69ba      	ldr	r2, [r7, #24]
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	613b      	str	r3, [r7, #16]
   return(result);
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e5      	bne.n	800bfac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfee:	bf00      	nop
 800bff0:	3754      	adds	r7, #84	; 0x54
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bc80      	pop	{r7}
 800bff6:	4770      	bx	lr

0800bff8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2200      	movs	r2, #0
 800c00a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff ff7a 	bl	800bf0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c018:	bf00      	nop
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b21      	cmp	r3, #33	; 0x21
 800c032:	d13e      	bne.n	800c0b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c03c:	d114      	bne.n	800c068 <UART_Transmit_IT+0x48>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d110      	bne.n	800c068 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	461a      	mov	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c05a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a1b      	ldr	r3, [r3, #32]
 800c060:	1c9a      	adds	r2, r3, #2
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	621a      	str	r2, [r3, #32]
 800c066:	e008      	b.n	800c07a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a1b      	ldr	r3, [r3, #32]
 800c06c:	1c59      	adds	r1, r3, #1
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	6211      	str	r1, [r2, #32]
 800c072:	781a      	ldrb	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c07e:	b29b      	uxth	r3, r3
 800c080:	3b01      	subs	r3, #1
 800c082:	b29b      	uxth	r3, r3
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	4619      	mov	r1, r3
 800c088:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10f      	bne.n	800c0ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68da      	ldr	r2, [r3, #12]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c09c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68da      	ldr	r2, [r3, #12]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e000      	b.n	800c0b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0b2:	2302      	movs	r3, #2
  }
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bc80      	pop	{r7}
 800c0bc:	4770      	bx	lr

0800c0be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2220      	movs	r2, #32
 800c0da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff ff02 	bl	800bee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b08c      	sub	sp, #48	; 0x30
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b22      	cmp	r3, #34	; 0x22
 800c100:	f040 80ae 	bne.w	800c260 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c10c:	d117      	bne.n	800c13e <UART_Receive_IT+0x50>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d113      	bne.n	800c13e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c116:	2300      	movs	r3, #0
 800c118:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	b29b      	uxth	r3, r3
 800c128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c136:	1c9a      	adds	r2, r3, #2
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	629a      	str	r2, [r3, #40]	; 0x28
 800c13c:	e026      	b.n	800c18c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c142:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c144:	2300      	movs	r3, #0
 800c146:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c150:	d007      	beq.n	800c162 <UART_Receive_IT+0x74>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <UART_Receive_IT+0x82>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	701a      	strb	r2, [r3, #0]
 800c16e:	e008      	b.n	800c182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c190:	b29b      	uxth	r3, r3
 800c192:	3b01      	subs	r3, #1
 800c194:	b29b      	uxth	r3, r3
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	4619      	mov	r1, r3
 800c19a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d15d      	bne.n	800c25c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68da      	ldr	r2, [r3, #12]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f022 0220 	bic.w	r2, r2, #32
 800c1ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	695a      	ldr	r2, [r3, #20]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 0201 	bic.w	r2, r2, #1
 800c1ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2220      	movs	r2, #32
 800c1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d135      	bne.n	800c252 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	330c      	adds	r3, #12
 800c1f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	e853 3f00 	ldrex	r3, [r3]
 800c1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	f023 0310 	bic.w	r3, r3, #16
 800c202:	627b      	str	r3, [r7, #36]	; 0x24
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	330c      	adds	r3, #12
 800c20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c20c:	623a      	str	r2, [r7, #32]
 800c20e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	6a3a      	ldr	r2, [r7, #32]
 800c214:	e841 2300 	strex	r3, r2, [r1]
 800c218:	61bb      	str	r3, [r7, #24]
   return(result);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e5      	bne.n	800c1ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f003 0310 	and.w	r3, r3, #16
 800c22a:	2b10      	cmp	r3, #16
 800c22c:	d10a      	bne.n	800c244 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c248:	4619      	mov	r1, r3
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff fe67 	bl	800bf1e <HAL_UARTEx_RxEventCallback>
 800c250:	e002      	b.n	800c258 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff fe51 	bl	800befa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	e002      	b.n	800c262 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	e000      	b.n	800c262 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c260:	2302      	movs	r3, #2
  }
}
 800c262:	4618      	mov	r0, r3
 800c264:	3730      	adds	r7, #48	; 0x30
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	68da      	ldr	r2, [r3, #12]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689a      	ldr	r2, [r3, #8]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	431a      	orrs	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	4313      	orrs	r3, r2
 800c29a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c2a6:	f023 030c 	bic.w	r3, r3, #12
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	68b9      	ldr	r1, [r7, #8]
 800c2b0:	430b      	orrs	r3, r1
 800c2b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	699a      	ldr	r2, [r3, #24]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a2c      	ldr	r2, [pc, #176]	; (800c380 <UART_SetConfig+0x114>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d103      	bne.n	800c2dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c2d4:	f7fe fe8c 	bl	800aff0 <HAL_RCC_GetPCLK2Freq>
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	e002      	b.n	800c2e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c2dc:	f7fe fe74 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 800c2e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009a      	lsls	r2, r3, #2
 800c2ec:	441a      	add	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f8:	4a22      	ldr	r2, [pc, #136]	; (800c384 <UART_SetConfig+0x118>)
 800c2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c2fe:	095b      	lsrs	r3, r3, #5
 800c300:	0119      	lsls	r1, r3, #4
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009a      	lsls	r2, r3, #2
 800c30c:	441a      	add	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	fbb2 f2f3 	udiv	r2, r2, r3
 800c318:	4b1a      	ldr	r3, [pc, #104]	; (800c384 <UART_SetConfig+0x118>)
 800c31a:	fba3 0302 	umull	r0, r3, r3, r2
 800c31e:	095b      	lsrs	r3, r3, #5
 800c320:	2064      	movs	r0, #100	; 0x64
 800c322:	fb00 f303 	mul.w	r3, r0, r3
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	3332      	adds	r3, #50	; 0x32
 800c32c:	4a15      	ldr	r2, [pc, #84]	; (800c384 <UART_SetConfig+0x118>)
 800c32e:	fba2 2303 	umull	r2, r3, r2, r3
 800c332:	095b      	lsrs	r3, r3, #5
 800c334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c338:	4419      	add	r1, r3
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	009a      	lsls	r2, r3, #2
 800c344:	441a      	add	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c350:	4b0c      	ldr	r3, [pc, #48]	; (800c384 <UART_SetConfig+0x118>)
 800c352:	fba3 0302 	umull	r0, r3, r3, r2
 800c356:	095b      	lsrs	r3, r3, #5
 800c358:	2064      	movs	r0, #100	; 0x64
 800c35a:	fb00 f303 	mul.w	r3, r0, r3
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	011b      	lsls	r3, r3, #4
 800c362:	3332      	adds	r3, #50	; 0x32
 800c364:	4a07      	ldr	r2, [pc, #28]	; (800c384 <UART_SetConfig+0x118>)
 800c366:	fba2 2303 	umull	r2, r3, r2, r3
 800c36a:	095b      	lsrs	r3, r3, #5
 800c36c:	f003 020f 	and.w	r2, r3, #15
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	440a      	add	r2, r1
 800c376:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c378:	bf00      	nop
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	40013800 	.word	0x40013800
 800c384:	51eb851f 	.word	0x51eb851f

0800c388 <__itoa>:
 800c388:	1e93      	subs	r3, r2, #2
 800c38a:	2b22      	cmp	r3, #34	; 0x22
 800c38c:	b510      	push	{r4, lr}
 800c38e:	460c      	mov	r4, r1
 800c390:	d904      	bls.n	800c39c <__itoa+0x14>
 800c392:	2300      	movs	r3, #0
 800c394:	461c      	mov	r4, r3
 800c396:	700b      	strb	r3, [r1, #0]
 800c398:	4620      	mov	r0, r4
 800c39a:	bd10      	pop	{r4, pc}
 800c39c:	2a0a      	cmp	r2, #10
 800c39e:	d109      	bne.n	800c3b4 <__itoa+0x2c>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	da07      	bge.n	800c3b4 <__itoa+0x2c>
 800c3a4:	232d      	movs	r3, #45	; 0x2d
 800c3a6:	700b      	strb	r3, [r1, #0]
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	4240      	negs	r0, r0
 800c3ac:	4421      	add	r1, r4
 800c3ae:	f000 f8d9 	bl	800c564 <__utoa>
 800c3b2:	e7f1      	b.n	800c398 <__itoa+0x10>
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	e7f9      	b.n	800c3ac <__itoa+0x24>

0800c3b8 <itoa>:
 800c3b8:	f7ff bfe6 	b.w	800c388 <__itoa>

0800c3bc <malloc>:
 800c3bc:	4b02      	ldr	r3, [pc, #8]	; (800c3c8 <malloc+0xc>)
 800c3be:	4601      	mov	r1, r0
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	f000 b823 	b.w	800c40c <_malloc_r>
 800c3c6:	bf00      	nop
 800c3c8:	200000fc 	.word	0x200000fc

0800c3cc <sbrk_aligned>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	4e0e      	ldr	r6, [pc, #56]	; (800c408 <sbrk_aligned+0x3c>)
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	6831      	ldr	r1, [r6, #0]
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	b911      	cbnz	r1, 800c3de <sbrk_aligned+0x12>
 800c3d8:	f000 f91e 	bl	800c618 <_sbrk_r>
 800c3dc:	6030      	str	r0, [r6, #0]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	f000 f919 	bl	800c618 <_sbrk_r>
 800c3e6:	1c43      	adds	r3, r0, #1
 800c3e8:	d00a      	beq.n	800c400 <sbrk_aligned+0x34>
 800c3ea:	1cc4      	adds	r4, r0, #3
 800c3ec:	f024 0403 	bic.w	r4, r4, #3
 800c3f0:	42a0      	cmp	r0, r4
 800c3f2:	d007      	beq.n	800c404 <sbrk_aligned+0x38>
 800c3f4:	1a21      	subs	r1, r4, r0
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f000 f90e 	bl	800c618 <_sbrk_r>
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d101      	bne.n	800c404 <sbrk_aligned+0x38>
 800c400:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c404:	4620      	mov	r0, r4
 800c406:	bd70      	pop	{r4, r5, r6, pc}
 800c408:	2000048c 	.word	0x2000048c

0800c40c <_malloc_r>:
 800c40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c410:	1ccd      	adds	r5, r1, #3
 800c412:	f025 0503 	bic.w	r5, r5, #3
 800c416:	3508      	adds	r5, #8
 800c418:	2d0c      	cmp	r5, #12
 800c41a:	bf38      	it	cc
 800c41c:	250c      	movcc	r5, #12
 800c41e:	2d00      	cmp	r5, #0
 800c420:	4607      	mov	r7, r0
 800c422:	db01      	blt.n	800c428 <_malloc_r+0x1c>
 800c424:	42a9      	cmp	r1, r5
 800c426:	d905      	bls.n	800c434 <_malloc_r+0x28>
 800c428:	230c      	movs	r3, #12
 800c42a:	2600      	movs	r6, #0
 800c42c:	603b      	str	r3, [r7, #0]
 800c42e:	4630      	mov	r0, r6
 800c430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c434:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c508 <_malloc_r+0xfc>
 800c438:	f000 f868 	bl	800c50c <__malloc_lock>
 800c43c:	f8d8 3000 	ldr.w	r3, [r8]
 800c440:	461c      	mov	r4, r3
 800c442:	bb5c      	cbnz	r4, 800c49c <_malloc_r+0x90>
 800c444:	4629      	mov	r1, r5
 800c446:	4638      	mov	r0, r7
 800c448:	f7ff ffc0 	bl	800c3cc <sbrk_aligned>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	4604      	mov	r4, r0
 800c450:	d155      	bne.n	800c4fe <_malloc_r+0xf2>
 800c452:	f8d8 4000 	ldr.w	r4, [r8]
 800c456:	4626      	mov	r6, r4
 800c458:	2e00      	cmp	r6, #0
 800c45a:	d145      	bne.n	800c4e8 <_malloc_r+0xdc>
 800c45c:	2c00      	cmp	r4, #0
 800c45e:	d048      	beq.n	800c4f2 <_malloc_r+0xe6>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	4631      	mov	r1, r6
 800c464:	4638      	mov	r0, r7
 800c466:	eb04 0903 	add.w	r9, r4, r3
 800c46a:	f000 f8d5 	bl	800c618 <_sbrk_r>
 800c46e:	4581      	cmp	r9, r0
 800c470:	d13f      	bne.n	800c4f2 <_malloc_r+0xe6>
 800c472:	6821      	ldr	r1, [r4, #0]
 800c474:	4638      	mov	r0, r7
 800c476:	1a6d      	subs	r5, r5, r1
 800c478:	4629      	mov	r1, r5
 800c47a:	f7ff ffa7 	bl	800c3cc <sbrk_aligned>
 800c47e:	3001      	adds	r0, #1
 800c480:	d037      	beq.n	800c4f2 <_malloc_r+0xe6>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	442b      	add	r3, r5
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	f8d8 3000 	ldr.w	r3, [r8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d038      	beq.n	800c502 <_malloc_r+0xf6>
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	42a2      	cmp	r2, r4
 800c494:	d12b      	bne.n	800c4ee <_malloc_r+0xe2>
 800c496:	2200      	movs	r2, #0
 800c498:	605a      	str	r2, [r3, #4]
 800c49a:	e00f      	b.n	800c4bc <_malloc_r+0xb0>
 800c49c:	6822      	ldr	r2, [r4, #0]
 800c49e:	1b52      	subs	r2, r2, r5
 800c4a0:	d41f      	bmi.n	800c4e2 <_malloc_r+0xd6>
 800c4a2:	2a0b      	cmp	r2, #11
 800c4a4:	d917      	bls.n	800c4d6 <_malloc_r+0xca>
 800c4a6:	1961      	adds	r1, r4, r5
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	6025      	str	r5, [r4, #0]
 800c4ac:	bf18      	it	ne
 800c4ae:	6059      	strne	r1, [r3, #4]
 800c4b0:	6863      	ldr	r3, [r4, #4]
 800c4b2:	bf08      	it	eq
 800c4b4:	f8c8 1000 	streq.w	r1, [r8]
 800c4b8:	5162      	str	r2, [r4, r5]
 800c4ba:	604b      	str	r3, [r1, #4]
 800c4bc:	4638      	mov	r0, r7
 800c4be:	f104 060b 	add.w	r6, r4, #11
 800c4c2:	f000 f829 	bl	800c518 <__malloc_unlock>
 800c4c6:	f026 0607 	bic.w	r6, r6, #7
 800c4ca:	1d23      	adds	r3, r4, #4
 800c4cc:	1af2      	subs	r2, r6, r3
 800c4ce:	d0ae      	beq.n	800c42e <_malloc_r+0x22>
 800c4d0:	1b9b      	subs	r3, r3, r6
 800c4d2:	50a3      	str	r3, [r4, r2]
 800c4d4:	e7ab      	b.n	800c42e <_malloc_r+0x22>
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	6862      	ldr	r2, [r4, #4]
 800c4da:	d1dd      	bne.n	800c498 <_malloc_r+0x8c>
 800c4dc:	f8c8 2000 	str.w	r2, [r8]
 800c4e0:	e7ec      	b.n	800c4bc <_malloc_r+0xb0>
 800c4e2:	4623      	mov	r3, r4
 800c4e4:	6864      	ldr	r4, [r4, #4]
 800c4e6:	e7ac      	b.n	800c442 <_malloc_r+0x36>
 800c4e8:	4634      	mov	r4, r6
 800c4ea:	6876      	ldr	r6, [r6, #4]
 800c4ec:	e7b4      	b.n	800c458 <_malloc_r+0x4c>
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	e7cc      	b.n	800c48c <_malloc_r+0x80>
 800c4f2:	230c      	movs	r3, #12
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	f000 f80e 	bl	800c518 <__malloc_unlock>
 800c4fc:	e797      	b.n	800c42e <_malloc_r+0x22>
 800c4fe:	6025      	str	r5, [r4, #0]
 800c500:	e7dc      	b.n	800c4bc <_malloc_r+0xb0>
 800c502:	605b      	str	r3, [r3, #4]
 800c504:	deff      	udf	#255	; 0xff
 800c506:	bf00      	nop
 800c508:	20000488 	.word	0x20000488

0800c50c <__malloc_lock>:
 800c50c:	4801      	ldr	r0, [pc, #4]	; (800c514 <__malloc_lock+0x8>)
 800c50e:	f000 b8bd 	b.w	800c68c <__retarget_lock_acquire_recursive>
 800c512:	bf00      	nop
 800c514:	200005c8 	.word	0x200005c8

0800c518 <__malloc_unlock>:
 800c518:	4801      	ldr	r0, [pc, #4]	; (800c520 <__malloc_unlock+0x8>)
 800c51a:	f000 b8b8 	b.w	800c68e <__retarget_lock_release_recursive>
 800c51e:	bf00      	nop
 800c520:	200005c8 	.word	0x200005c8

0800c524 <siprintf>:
 800c524:	b40e      	push	{r1, r2, r3}
 800c526:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c52a:	b500      	push	{lr}
 800c52c:	b09c      	sub	sp, #112	; 0x70
 800c52e:	ab1d      	add	r3, sp, #116	; 0x74
 800c530:	9002      	str	r0, [sp, #8]
 800c532:	9006      	str	r0, [sp, #24]
 800c534:	9107      	str	r1, [sp, #28]
 800c536:	9104      	str	r1, [sp, #16]
 800c538:	4808      	ldr	r0, [pc, #32]	; (800c55c <siprintf+0x38>)
 800c53a:	4909      	ldr	r1, [pc, #36]	; (800c560 <siprintf+0x3c>)
 800c53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c540:	9105      	str	r1, [sp, #20]
 800c542:	6800      	ldr	r0, [r0, #0]
 800c544:	a902      	add	r1, sp, #8
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	f000 f94c 	bl	800c7e4 <_svfiprintf_r>
 800c54c:	2200      	movs	r2, #0
 800c54e:	9b02      	ldr	r3, [sp, #8]
 800c550:	701a      	strb	r2, [r3, #0]
 800c552:	b01c      	add	sp, #112	; 0x70
 800c554:	f85d eb04 	ldr.w	lr, [sp], #4
 800c558:	b003      	add	sp, #12
 800c55a:	4770      	bx	lr
 800c55c:	200000fc 	.word	0x200000fc
 800c560:	ffff0208 	.word	0xffff0208

0800c564 <__utoa>:
 800c564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c566:	b08b      	sub	sp, #44	; 0x2c
 800c568:	4605      	mov	r5, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	466e      	mov	r6, sp
 800c56e:	4c1d      	ldr	r4, [pc, #116]	; (800c5e4 <__utoa+0x80>)
 800c570:	f104 0c20 	add.w	ip, r4, #32
 800c574:	4637      	mov	r7, r6
 800c576:	6820      	ldr	r0, [r4, #0]
 800c578:	6861      	ldr	r1, [r4, #4]
 800c57a:	3408      	adds	r4, #8
 800c57c:	c703      	stmia	r7!, {r0, r1}
 800c57e:	4564      	cmp	r4, ip
 800c580:	463e      	mov	r6, r7
 800c582:	d1f7      	bne.n	800c574 <__utoa+0x10>
 800c584:	7921      	ldrb	r1, [r4, #4]
 800c586:	6820      	ldr	r0, [r4, #0]
 800c588:	7139      	strb	r1, [r7, #4]
 800c58a:	1e91      	subs	r1, r2, #2
 800c58c:	2922      	cmp	r1, #34	; 0x22
 800c58e:	6038      	str	r0, [r7, #0]
 800c590:	f04f 0100 	mov.w	r1, #0
 800c594:	d904      	bls.n	800c5a0 <__utoa+0x3c>
 800c596:	7019      	strb	r1, [r3, #0]
 800c598:	460b      	mov	r3, r1
 800c59a:	4618      	mov	r0, r3
 800c59c:	b00b      	add	sp, #44	; 0x2c
 800c59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a0:	1e58      	subs	r0, r3, #1
 800c5a2:	4684      	mov	ip, r0
 800c5a4:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5a8:	fb02 5617 	mls	r6, r2, r7, r5
 800c5ac:	3628      	adds	r6, #40	; 0x28
 800c5ae:	446e      	add	r6, sp
 800c5b0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5ba:	462e      	mov	r6, r5
 800c5bc:	42b2      	cmp	r2, r6
 800c5be:	463d      	mov	r5, r7
 800c5c0:	f101 0101 	add.w	r1, r1, #1
 800c5c4:	d9ee      	bls.n	800c5a4 <__utoa+0x40>
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	545a      	strb	r2, [r3, r1]
 800c5ca:	1919      	adds	r1, r3, r4
 800c5cc:	1aa5      	subs	r5, r4, r2
 800c5ce:	42aa      	cmp	r2, r5
 800c5d0:	dae3      	bge.n	800c59a <__utoa+0x36>
 800c5d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5d6:	780e      	ldrb	r6, [r1, #0]
 800c5d8:	3201      	adds	r2, #1
 800c5da:	7006      	strb	r6, [r0, #0]
 800c5dc:	f801 5901 	strb.w	r5, [r1], #-1
 800c5e0:	e7f4      	b.n	800c5cc <__utoa+0x68>
 800c5e2:	bf00      	nop
 800c5e4:	0800dd12 	.word	0x0800dd12

0800c5e8 <strcat>:
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	7814      	ldrb	r4, [r2, #0]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	3201      	adds	r2, #1
 800c5f2:	2c00      	cmp	r4, #0
 800c5f4:	d1fa      	bne.n	800c5ec <strcat+0x4>
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c600:	2a00      	cmp	r2, #0
 800c602:	d1f9      	bne.n	800c5f8 <strcat+0x10>
 800c604:	bd10      	pop	{r4, pc}

0800c606 <memset>:
 800c606:	4603      	mov	r3, r0
 800c608:	4402      	add	r2, r0
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d100      	bne.n	800c610 <memset+0xa>
 800c60e:	4770      	bx	lr
 800c610:	f803 1b01 	strb.w	r1, [r3], #1
 800c614:	e7f9      	b.n	800c60a <memset+0x4>
	...

0800c618 <_sbrk_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	2300      	movs	r3, #0
 800c61c:	4d05      	ldr	r5, [pc, #20]	; (800c634 <_sbrk_r+0x1c>)
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7fc f808 	bl	8008638 <_sbrk>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_sbrk_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_sbrk_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	200005cc 	.word	0x200005cc

0800c638 <__errno>:
 800c638:	4b01      	ldr	r3, [pc, #4]	; (800c640 <__errno+0x8>)
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	200000fc 	.word	0x200000fc

0800c644 <__libc_init_array>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	2600      	movs	r6, #0
 800c648:	4d0c      	ldr	r5, [pc, #48]	; (800c67c <__libc_init_array+0x38>)
 800c64a:	4c0d      	ldr	r4, [pc, #52]	; (800c680 <__libc_init_array+0x3c>)
 800c64c:	1b64      	subs	r4, r4, r5
 800c64e:	10a4      	asrs	r4, r4, #2
 800c650:	42a6      	cmp	r6, r4
 800c652:	d109      	bne.n	800c668 <__libc_init_array+0x24>
 800c654:	f000 fbc6 	bl	800cde4 <_init>
 800c658:	2600      	movs	r6, #0
 800c65a:	4d0a      	ldr	r5, [pc, #40]	; (800c684 <__libc_init_array+0x40>)
 800c65c:	4c0a      	ldr	r4, [pc, #40]	; (800c688 <__libc_init_array+0x44>)
 800c65e:	1b64      	subs	r4, r4, r5
 800c660:	10a4      	asrs	r4, r4, #2
 800c662:	42a6      	cmp	r6, r4
 800c664:	d105      	bne.n	800c672 <__libc_init_array+0x2e>
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	f855 3b04 	ldr.w	r3, [r5], #4
 800c66c:	4798      	blx	r3
 800c66e:	3601      	adds	r6, #1
 800c670:	e7ee      	b.n	800c650 <__libc_init_array+0xc>
 800c672:	f855 3b04 	ldr.w	r3, [r5], #4
 800c676:	4798      	blx	r3
 800c678:	3601      	adds	r6, #1
 800c67a:	e7f2      	b.n	800c662 <__libc_init_array+0x1e>
 800c67c:	0800dd6c 	.word	0x0800dd6c
 800c680:	0800dd6c 	.word	0x0800dd6c
 800c684:	0800dd6c 	.word	0x0800dd6c
 800c688:	0800dd70 	.word	0x0800dd70

0800c68c <__retarget_lock_acquire_recursive>:
 800c68c:	4770      	bx	lr

0800c68e <__retarget_lock_release_recursive>:
 800c68e:	4770      	bx	lr

0800c690 <strcpy>:
 800c690:	4603      	mov	r3, r0
 800c692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c696:	f803 2b01 	strb.w	r2, [r3], #1
 800c69a:	2a00      	cmp	r2, #0
 800c69c:	d1f9      	bne.n	800c692 <strcpy+0x2>
 800c69e:	4770      	bx	lr

0800c6a0 <_free_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	2900      	cmp	r1, #0
 800c6a6:	d040      	beq.n	800c72a <_free_r+0x8a>
 800c6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ac:	1f0c      	subs	r4, r1, #4
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	bfb8      	it	lt
 800c6b2:	18e4      	addlt	r4, r4, r3
 800c6b4:	f7ff ff2a 	bl	800c50c <__malloc_lock>
 800c6b8:	4a1c      	ldr	r2, [pc, #112]	; (800c72c <_free_r+0x8c>)
 800c6ba:	6813      	ldr	r3, [r2, #0]
 800c6bc:	b933      	cbnz	r3, 800c6cc <_free_r+0x2c>
 800c6be:	6063      	str	r3, [r4, #4]
 800c6c0:	6014      	str	r4, [r2, #0]
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c8:	f7ff bf26 	b.w	800c518 <__malloc_unlock>
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	d908      	bls.n	800c6e2 <_free_r+0x42>
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	1821      	adds	r1, r4, r0
 800c6d4:	428b      	cmp	r3, r1
 800c6d6:	bf01      	itttt	eq
 800c6d8:	6819      	ldreq	r1, [r3, #0]
 800c6da:	685b      	ldreq	r3, [r3, #4]
 800c6dc:	1809      	addeq	r1, r1, r0
 800c6de:	6021      	streq	r1, [r4, #0]
 800c6e0:	e7ed      	b.n	800c6be <_free_r+0x1e>
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	b10b      	cbz	r3, 800c6ec <_free_r+0x4c>
 800c6e8:	42a3      	cmp	r3, r4
 800c6ea:	d9fa      	bls.n	800c6e2 <_free_r+0x42>
 800c6ec:	6811      	ldr	r1, [r2, #0]
 800c6ee:	1850      	adds	r0, r2, r1
 800c6f0:	42a0      	cmp	r0, r4
 800c6f2:	d10b      	bne.n	800c70c <_free_r+0x6c>
 800c6f4:	6820      	ldr	r0, [r4, #0]
 800c6f6:	4401      	add	r1, r0
 800c6f8:	1850      	adds	r0, r2, r1
 800c6fa:	4283      	cmp	r3, r0
 800c6fc:	6011      	str	r1, [r2, #0]
 800c6fe:	d1e0      	bne.n	800c6c2 <_free_r+0x22>
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	4408      	add	r0, r1
 800c706:	6010      	str	r0, [r2, #0]
 800c708:	6053      	str	r3, [r2, #4]
 800c70a:	e7da      	b.n	800c6c2 <_free_r+0x22>
 800c70c:	d902      	bls.n	800c714 <_free_r+0x74>
 800c70e:	230c      	movs	r3, #12
 800c710:	602b      	str	r3, [r5, #0]
 800c712:	e7d6      	b.n	800c6c2 <_free_r+0x22>
 800c714:	6820      	ldr	r0, [r4, #0]
 800c716:	1821      	adds	r1, r4, r0
 800c718:	428b      	cmp	r3, r1
 800c71a:	bf01      	itttt	eq
 800c71c:	6819      	ldreq	r1, [r3, #0]
 800c71e:	685b      	ldreq	r3, [r3, #4]
 800c720:	1809      	addeq	r1, r1, r0
 800c722:	6021      	streq	r1, [r4, #0]
 800c724:	6063      	str	r3, [r4, #4]
 800c726:	6054      	str	r4, [r2, #4]
 800c728:	e7cb      	b.n	800c6c2 <_free_r+0x22>
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20000488 	.word	0x20000488

0800c730 <__ssputs_r>:
 800c730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c734:	461f      	mov	r7, r3
 800c736:	688e      	ldr	r6, [r1, #8]
 800c738:	4682      	mov	sl, r0
 800c73a:	42be      	cmp	r6, r7
 800c73c:	460c      	mov	r4, r1
 800c73e:	4690      	mov	r8, r2
 800c740:	680b      	ldr	r3, [r1, #0]
 800c742:	d82c      	bhi.n	800c79e <__ssputs_r+0x6e>
 800c744:	898a      	ldrh	r2, [r1, #12]
 800c746:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c74a:	d026      	beq.n	800c79a <__ssputs_r+0x6a>
 800c74c:	6965      	ldr	r5, [r4, #20]
 800c74e:	6909      	ldr	r1, [r1, #16]
 800c750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c754:	eba3 0901 	sub.w	r9, r3, r1
 800c758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c75c:	1c7b      	adds	r3, r7, #1
 800c75e:	444b      	add	r3, r9
 800c760:	106d      	asrs	r5, r5, #1
 800c762:	429d      	cmp	r5, r3
 800c764:	bf38      	it	cc
 800c766:	461d      	movcc	r5, r3
 800c768:	0553      	lsls	r3, r2, #21
 800c76a:	d527      	bpl.n	800c7bc <__ssputs_r+0x8c>
 800c76c:	4629      	mov	r1, r5
 800c76e:	f7ff fe4d 	bl	800c40c <_malloc_r>
 800c772:	4606      	mov	r6, r0
 800c774:	b360      	cbz	r0, 800c7d0 <__ssputs_r+0xa0>
 800c776:	464a      	mov	r2, r9
 800c778:	6921      	ldr	r1, [r4, #16]
 800c77a:	f000 fb1c 	bl	800cdb6 <memcpy>
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c788:	81a3      	strh	r3, [r4, #12]
 800c78a:	6126      	str	r6, [r4, #16]
 800c78c:	444e      	add	r6, r9
 800c78e:	6026      	str	r6, [r4, #0]
 800c790:	463e      	mov	r6, r7
 800c792:	6165      	str	r5, [r4, #20]
 800c794:	eba5 0509 	sub.w	r5, r5, r9
 800c798:	60a5      	str	r5, [r4, #8]
 800c79a:	42be      	cmp	r6, r7
 800c79c:	d900      	bls.n	800c7a0 <__ssputs_r+0x70>
 800c79e:	463e      	mov	r6, r7
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	4641      	mov	r1, r8
 800c7a4:	6820      	ldr	r0, [r4, #0]
 800c7a6:	f000 fade 	bl	800cd66 <memmove>
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	68a3      	ldr	r3, [r4, #8]
 800c7ae:	1b9b      	subs	r3, r3, r6
 800c7b0:	60a3      	str	r3, [r4, #8]
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	4433      	add	r3, r6
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7bc:	462a      	mov	r2, r5
 800c7be:	f000 faa3 	bl	800cd08 <_realloc_r>
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d1e0      	bne.n	800c78a <__ssputs_r+0x5a>
 800c7c8:	4650      	mov	r0, sl
 800c7ca:	6921      	ldr	r1, [r4, #16]
 800c7cc:	f7ff ff68 	bl	800c6a0 <_free_r>
 800c7d0:	230c      	movs	r3, #12
 800c7d2:	f8ca 3000 	str.w	r3, [sl]
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7e0:	81a3      	strh	r3, [r4, #12]
 800c7e2:	e7e9      	b.n	800c7b8 <__ssputs_r+0x88>

0800c7e4 <_svfiprintf_r>:
 800c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	4698      	mov	r8, r3
 800c7ea:	898b      	ldrh	r3, [r1, #12]
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	061b      	lsls	r3, r3, #24
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	4614      	mov	r4, r2
 800c7f4:	b09d      	sub	sp, #116	; 0x74
 800c7f6:	d50e      	bpl.n	800c816 <_svfiprintf_r+0x32>
 800c7f8:	690b      	ldr	r3, [r1, #16]
 800c7fa:	b963      	cbnz	r3, 800c816 <_svfiprintf_r+0x32>
 800c7fc:	2140      	movs	r1, #64	; 0x40
 800c7fe:	f7ff fe05 	bl	800c40c <_malloc_r>
 800c802:	6028      	str	r0, [r5, #0]
 800c804:	6128      	str	r0, [r5, #16]
 800c806:	b920      	cbnz	r0, 800c812 <_svfiprintf_r+0x2e>
 800c808:	230c      	movs	r3, #12
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c810:	e0d0      	b.n	800c9b4 <_svfiprintf_r+0x1d0>
 800c812:	2340      	movs	r3, #64	; 0x40
 800c814:	616b      	str	r3, [r5, #20]
 800c816:	2300      	movs	r3, #0
 800c818:	9309      	str	r3, [sp, #36]	; 0x24
 800c81a:	2320      	movs	r3, #32
 800c81c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c820:	2330      	movs	r3, #48	; 0x30
 800c822:	f04f 0901 	mov.w	r9, #1
 800c826:	f8cd 800c 	str.w	r8, [sp, #12]
 800c82a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9cc <_svfiprintf_r+0x1e8>
 800c82e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c832:	4623      	mov	r3, r4
 800c834:	469a      	mov	sl, r3
 800c836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c83a:	b10a      	cbz	r2, 800c840 <_svfiprintf_r+0x5c>
 800c83c:	2a25      	cmp	r2, #37	; 0x25
 800c83e:	d1f9      	bne.n	800c834 <_svfiprintf_r+0x50>
 800c840:	ebba 0b04 	subs.w	fp, sl, r4
 800c844:	d00b      	beq.n	800c85e <_svfiprintf_r+0x7a>
 800c846:	465b      	mov	r3, fp
 800c848:	4622      	mov	r2, r4
 800c84a:	4629      	mov	r1, r5
 800c84c:	4638      	mov	r0, r7
 800c84e:	f7ff ff6f 	bl	800c730 <__ssputs_r>
 800c852:	3001      	adds	r0, #1
 800c854:	f000 80a9 	beq.w	800c9aa <_svfiprintf_r+0x1c6>
 800c858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c85a:	445a      	add	r2, fp
 800c85c:	9209      	str	r2, [sp, #36]	; 0x24
 800c85e:	f89a 3000 	ldrb.w	r3, [sl]
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80a1 	beq.w	800c9aa <_svfiprintf_r+0x1c6>
 800c868:	2300      	movs	r3, #0
 800c86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c872:	f10a 0a01 	add.w	sl, sl, #1
 800c876:	9304      	str	r3, [sp, #16]
 800c878:	9307      	str	r3, [sp, #28]
 800c87a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c87e:	931a      	str	r3, [sp, #104]	; 0x68
 800c880:	4654      	mov	r4, sl
 800c882:	2205      	movs	r2, #5
 800c884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c888:	4850      	ldr	r0, [pc, #320]	; (800c9cc <_svfiprintf_r+0x1e8>)
 800c88a:	f000 fa86 	bl	800cd9a <memchr>
 800c88e:	9a04      	ldr	r2, [sp, #16]
 800c890:	b9d8      	cbnz	r0, 800c8ca <_svfiprintf_r+0xe6>
 800c892:	06d0      	lsls	r0, r2, #27
 800c894:	bf44      	itt	mi
 800c896:	2320      	movmi	r3, #32
 800c898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c89c:	0711      	lsls	r1, r2, #28
 800c89e:	bf44      	itt	mi
 800c8a0:	232b      	movmi	r3, #43	; 0x2b
 800c8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ac:	d015      	beq.n	800c8da <_svfiprintf_r+0xf6>
 800c8ae:	4654      	mov	r4, sl
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	f04f 0c0a 	mov.w	ip, #10
 800c8b6:	9a07      	ldr	r2, [sp, #28]
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8be:	3b30      	subs	r3, #48	; 0x30
 800c8c0:	2b09      	cmp	r3, #9
 800c8c2:	d94d      	bls.n	800c960 <_svfiprintf_r+0x17c>
 800c8c4:	b1b0      	cbz	r0, 800c8f4 <_svfiprintf_r+0x110>
 800c8c6:	9207      	str	r2, [sp, #28]
 800c8c8:	e014      	b.n	800c8f4 <_svfiprintf_r+0x110>
 800c8ca:	eba0 0308 	sub.w	r3, r0, r8
 800c8ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	46a2      	mov	sl, r4
 800c8d6:	9304      	str	r3, [sp, #16]
 800c8d8:	e7d2      	b.n	800c880 <_svfiprintf_r+0x9c>
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	1d19      	adds	r1, r3, #4
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	9103      	str	r1, [sp, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	bfbb      	ittet	lt
 800c8e6:	425b      	neglt	r3, r3
 800c8e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c8ec:	9307      	strge	r3, [sp, #28]
 800c8ee:	9307      	strlt	r3, [sp, #28]
 800c8f0:	bfb8      	it	lt
 800c8f2:	9204      	strlt	r2, [sp, #16]
 800c8f4:	7823      	ldrb	r3, [r4, #0]
 800c8f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c8f8:	d10c      	bne.n	800c914 <_svfiprintf_r+0x130>
 800c8fa:	7863      	ldrb	r3, [r4, #1]
 800c8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fe:	d134      	bne.n	800c96a <_svfiprintf_r+0x186>
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	3402      	adds	r4, #2
 800c904:	1d1a      	adds	r2, r3, #4
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	9203      	str	r2, [sp, #12]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	bfb8      	it	lt
 800c90e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c912:	9305      	str	r3, [sp, #20]
 800c914:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c9d0 <_svfiprintf_r+0x1ec>
 800c918:	2203      	movs	r2, #3
 800c91a:	4650      	mov	r0, sl
 800c91c:	7821      	ldrb	r1, [r4, #0]
 800c91e:	f000 fa3c 	bl	800cd9a <memchr>
 800c922:	b138      	cbz	r0, 800c934 <_svfiprintf_r+0x150>
 800c924:	2240      	movs	r2, #64	; 0x40
 800c926:	9b04      	ldr	r3, [sp, #16]
 800c928:	eba0 000a 	sub.w	r0, r0, sl
 800c92c:	4082      	lsls	r2, r0
 800c92e:	4313      	orrs	r3, r2
 800c930:	3401      	adds	r4, #1
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c938:	2206      	movs	r2, #6
 800c93a:	4826      	ldr	r0, [pc, #152]	; (800c9d4 <_svfiprintf_r+0x1f0>)
 800c93c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c940:	f000 fa2b 	bl	800cd9a <memchr>
 800c944:	2800      	cmp	r0, #0
 800c946:	d038      	beq.n	800c9ba <_svfiprintf_r+0x1d6>
 800c948:	4b23      	ldr	r3, [pc, #140]	; (800c9d8 <_svfiprintf_r+0x1f4>)
 800c94a:	bb1b      	cbnz	r3, 800c994 <_svfiprintf_r+0x1b0>
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	3307      	adds	r3, #7
 800c950:	f023 0307 	bic.w	r3, r3, #7
 800c954:	3308      	adds	r3, #8
 800c956:	9303      	str	r3, [sp, #12]
 800c958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c95a:	4433      	add	r3, r6
 800c95c:	9309      	str	r3, [sp, #36]	; 0x24
 800c95e:	e768      	b.n	800c832 <_svfiprintf_r+0x4e>
 800c960:	460c      	mov	r4, r1
 800c962:	2001      	movs	r0, #1
 800c964:	fb0c 3202 	mla	r2, ip, r2, r3
 800c968:	e7a6      	b.n	800c8b8 <_svfiprintf_r+0xd4>
 800c96a:	2300      	movs	r3, #0
 800c96c:	f04f 0c0a 	mov.w	ip, #10
 800c970:	4619      	mov	r1, r3
 800c972:	3401      	adds	r4, #1
 800c974:	9305      	str	r3, [sp, #20]
 800c976:	4620      	mov	r0, r4
 800c978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c97c:	3a30      	subs	r2, #48	; 0x30
 800c97e:	2a09      	cmp	r2, #9
 800c980:	d903      	bls.n	800c98a <_svfiprintf_r+0x1a6>
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0c6      	beq.n	800c914 <_svfiprintf_r+0x130>
 800c986:	9105      	str	r1, [sp, #20]
 800c988:	e7c4      	b.n	800c914 <_svfiprintf_r+0x130>
 800c98a:	4604      	mov	r4, r0
 800c98c:	2301      	movs	r3, #1
 800c98e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c992:	e7f0      	b.n	800c976 <_svfiprintf_r+0x192>
 800c994:	ab03      	add	r3, sp, #12
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	462a      	mov	r2, r5
 800c99a:	4638      	mov	r0, r7
 800c99c:	4b0f      	ldr	r3, [pc, #60]	; (800c9dc <_svfiprintf_r+0x1f8>)
 800c99e:	a904      	add	r1, sp, #16
 800c9a0:	f3af 8000 	nop.w
 800c9a4:	1c42      	adds	r2, r0, #1
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	d1d6      	bne.n	800c958 <_svfiprintf_r+0x174>
 800c9aa:	89ab      	ldrh	r3, [r5, #12]
 800c9ac:	065b      	lsls	r3, r3, #25
 800c9ae:	f53f af2d 	bmi.w	800c80c <_svfiprintf_r+0x28>
 800c9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9b4:	b01d      	add	sp, #116	; 0x74
 800c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ba:	ab03      	add	r3, sp, #12
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	462a      	mov	r2, r5
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <_svfiprintf_r+0x1f8>)
 800c9c4:	a904      	add	r1, sp, #16
 800c9c6:	f000 f87d 	bl	800cac4 <_printf_i>
 800c9ca:	e7eb      	b.n	800c9a4 <_svfiprintf_r+0x1c0>
 800c9cc:	0800dd37 	.word	0x0800dd37
 800c9d0:	0800dd3d 	.word	0x0800dd3d
 800c9d4:	0800dd41 	.word	0x0800dd41
 800c9d8:	00000000 	.word	0x00000000
 800c9dc:	0800c731 	.word	0x0800c731

0800c9e0 <_printf_common>:
 800c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	4616      	mov	r6, r2
 800c9e6:	4699      	mov	r9, r3
 800c9e8:	688a      	ldr	r2, [r1, #8]
 800c9ea:	690b      	ldr	r3, [r1, #16]
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	bfb8      	it	lt
 800c9f2:	4613      	movlt	r3, r2
 800c9f4:	6033      	str	r3, [r6, #0]
 800c9f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca00:	b10a      	cbz	r2, 800ca06 <_printf_common+0x26>
 800ca02:	3301      	adds	r3, #1
 800ca04:	6033      	str	r3, [r6, #0]
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	0699      	lsls	r1, r3, #26
 800ca0a:	bf42      	ittt	mi
 800ca0c:	6833      	ldrmi	r3, [r6, #0]
 800ca0e:	3302      	addmi	r3, #2
 800ca10:	6033      	strmi	r3, [r6, #0]
 800ca12:	6825      	ldr	r5, [r4, #0]
 800ca14:	f015 0506 	ands.w	r5, r5, #6
 800ca18:	d106      	bne.n	800ca28 <_printf_common+0x48>
 800ca1a:	f104 0a19 	add.w	sl, r4, #25
 800ca1e:	68e3      	ldr	r3, [r4, #12]
 800ca20:	6832      	ldr	r2, [r6, #0]
 800ca22:	1a9b      	subs	r3, r3, r2
 800ca24:	42ab      	cmp	r3, r5
 800ca26:	dc2b      	bgt.n	800ca80 <_printf_common+0xa0>
 800ca28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca2c:	1e13      	subs	r3, r2, #0
 800ca2e:	6822      	ldr	r2, [r4, #0]
 800ca30:	bf18      	it	ne
 800ca32:	2301      	movne	r3, #1
 800ca34:	0692      	lsls	r2, r2, #26
 800ca36:	d430      	bmi.n	800ca9a <_printf_common+0xba>
 800ca38:	4649      	mov	r1, r9
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca40:	47c0      	blx	r8
 800ca42:	3001      	adds	r0, #1
 800ca44:	d023      	beq.n	800ca8e <_printf_common+0xae>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	6922      	ldr	r2, [r4, #16]
 800ca4a:	f003 0306 	and.w	r3, r3, #6
 800ca4e:	2b04      	cmp	r3, #4
 800ca50:	bf14      	ite	ne
 800ca52:	2500      	movne	r5, #0
 800ca54:	6833      	ldreq	r3, [r6, #0]
 800ca56:	f04f 0600 	mov.w	r6, #0
 800ca5a:	bf08      	it	eq
 800ca5c:	68e5      	ldreq	r5, [r4, #12]
 800ca5e:	f104 041a 	add.w	r4, r4, #26
 800ca62:	bf08      	it	eq
 800ca64:	1aed      	subeq	r5, r5, r3
 800ca66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca6a:	bf08      	it	eq
 800ca6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca70:	4293      	cmp	r3, r2
 800ca72:	bfc4      	itt	gt
 800ca74:	1a9b      	subgt	r3, r3, r2
 800ca76:	18ed      	addgt	r5, r5, r3
 800ca78:	42b5      	cmp	r5, r6
 800ca7a:	d11a      	bne.n	800cab2 <_printf_common+0xd2>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e008      	b.n	800ca92 <_printf_common+0xb2>
 800ca80:	2301      	movs	r3, #1
 800ca82:	4652      	mov	r2, sl
 800ca84:	4649      	mov	r1, r9
 800ca86:	4638      	mov	r0, r7
 800ca88:	47c0      	blx	r8
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	d103      	bne.n	800ca96 <_printf_common+0xb6>
 800ca8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca96:	3501      	adds	r5, #1
 800ca98:	e7c1      	b.n	800ca1e <_printf_common+0x3e>
 800ca9a:	2030      	movs	r0, #48	; 0x30
 800ca9c:	18e1      	adds	r1, r4, r3
 800ca9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800caa8:	4422      	add	r2, r4
 800caaa:	3302      	adds	r3, #2
 800caac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cab0:	e7c2      	b.n	800ca38 <_printf_common+0x58>
 800cab2:	2301      	movs	r3, #1
 800cab4:	4622      	mov	r2, r4
 800cab6:	4649      	mov	r1, r9
 800cab8:	4638      	mov	r0, r7
 800caba:	47c0      	blx	r8
 800cabc:	3001      	adds	r0, #1
 800cabe:	d0e6      	beq.n	800ca8e <_printf_common+0xae>
 800cac0:	3601      	adds	r6, #1
 800cac2:	e7d9      	b.n	800ca78 <_printf_common+0x98>

0800cac4 <_printf_i>:
 800cac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cac8:	7e0f      	ldrb	r7, [r1, #24]
 800caca:	4691      	mov	r9, r2
 800cacc:	2f78      	cmp	r7, #120	; 0x78
 800cace:	4680      	mov	r8, r0
 800cad0:	460c      	mov	r4, r1
 800cad2:	469a      	mov	sl, r3
 800cad4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cada:	d807      	bhi.n	800caec <_printf_i+0x28>
 800cadc:	2f62      	cmp	r7, #98	; 0x62
 800cade:	d80a      	bhi.n	800caf6 <_printf_i+0x32>
 800cae0:	2f00      	cmp	r7, #0
 800cae2:	f000 80d5 	beq.w	800cc90 <_printf_i+0x1cc>
 800cae6:	2f58      	cmp	r7, #88	; 0x58
 800cae8:	f000 80c1 	beq.w	800cc6e <_printf_i+0x1aa>
 800caec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caf4:	e03a      	b.n	800cb6c <_printf_i+0xa8>
 800caf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cafa:	2b15      	cmp	r3, #21
 800cafc:	d8f6      	bhi.n	800caec <_printf_i+0x28>
 800cafe:	a101      	add	r1, pc, #4	; (adr r1, 800cb04 <_printf_i+0x40>)
 800cb00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb04:	0800cb5d 	.word	0x0800cb5d
 800cb08:	0800cb71 	.word	0x0800cb71
 800cb0c:	0800caed 	.word	0x0800caed
 800cb10:	0800caed 	.word	0x0800caed
 800cb14:	0800caed 	.word	0x0800caed
 800cb18:	0800caed 	.word	0x0800caed
 800cb1c:	0800cb71 	.word	0x0800cb71
 800cb20:	0800caed 	.word	0x0800caed
 800cb24:	0800caed 	.word	0x0800caed
 800cb28:	0800caed 	.word	0x0800caed
 800cb2c:	0800caed 	.word	0x0800caed
 800cb30:	0800cc77 	.word	0x0800cc77
 800cb34:	0800cb9d 	.word	0x0800cb9d
 800cb38:	0800cc31 	.word	0x0800cc31
 800cb3c:	0800caed 	.word	0x0800caed
 800cb40:	0800caed 	.word	0x0800caed
 800cb44:	0800cc99 	.word	0x0800cc99
 800cb48:	0800caed 	.word	0x0800caed
 800cb4c:	0800cb9d 	.word	0x0800cb9d
 800cb50:	0800caed 	.word	0x0800caed
 800cb54:	0800caed 	.word	0x0800caed
 800cb58:	0800cc39 	.word	0x0800cc39
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	1d1a      	adds	r2, r3, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	602a      	str	r2, [r5, #0]
 800cb64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e0a0      	b.n	800ccb2 <_printf_i+0x1ee>
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	682b      	ldr	r3, [r5, #0]
 800cb74:	0607      	lsls	r7, r0, #24
 800cb76:	f103 0104 	add.w	r1, r3, #4
 800cb7a:	6029      	str	r1, [r5, #0]
 800cb7c:	d501      	bpl.n	800cb82 <_printf_i+0xbe>
 800cb7e:	681e      	ldr	r6, [r3, #0]
 800cb80:	e003      	b.n	800cb8a <_printf_i+0xc6>
 800cb82:	0646      	lsls	r6, r0, #25
 800cb84:	d5fb      	bpl.n	800cb7e <_printf_i+0xba>
 800cb86:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb8a:	2e00      	cmp	r6, #0
 800cb8c:	da03      	bge.n	800cb96 <_printf_i+0xd2>
 800cb8e:	232d      	movs	r3, #45	; 0x2d
 800cb90:	4276      	negs	r6, r6
 800cb92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb96:	230a      	movs	r3, #10
 800cb98:	4859      	ldr	r0, [pc, #356]	; (800cd00 <_printf_i+0x23c>)
 800cb9a:	e012      	b.n	800cbc2 <_printf_i+0xfe>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	6820      	ldr	r0, [r4, #0]
 800cba0:	1d19      	adds	r1, r3, #4
 800cba2:	6029      	str	r1, [r5, #0]
 800cba4:	0605      	lsls	r5, r0, #24
 800cba6:	d501      	bpl.n	800cbac <_printf_i+0xe8>
 800cba8:	681e      	ldr	r6, [r3, #0]
 800cbaa:	e002      	b.n	800cbb2 <_printf_i+0xee>
 800cbac:	0641      	lsls	r1, r0, #25
 800cbae:	d5fb      	bpl.n	800cba8 <_printf_i+0xe4>
 800cbb0:	881e      	ldrh	r6, [r3, #0]
 800cbb2:	2f6f      	cmp	r7, #111	; 0x6f
 800cbb4:	bf0c      	ite	eq
 800cbb6:	2308      	moveq	r3, #8
 800cbb8:	230a      	movne	r3, #10
 800cbba:	4851      	ldr	r0, [pc, #324]	; (800cd00 <_printf_i+0x23c>)
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbc2:	6865      	ldr	r5, [r4, #4]
 800cbc4:	2d00      	cmp	r5, #0
 800cbc6:	bfa8      	it	ge
 800cbc8:	6821      	ldrge	r1, [r4, #0]
 800cbca:	60a5      	str	r5, [r4, #8]
 800cbcc:	bfa4      	itt	ge
 800cbce:	f021 0104 	bicge.w	r1, r1, #4
 800cbd2:	6021      	strge	r1, [r4, #0]
 800cbd4:	b90e      	cbnz	r6, 800cbda <_printf_i+0x116>
 800cbd6:	2d00      	cmp	r5, #0
 800cbd8:	d04b      	beq.n	800cc72 <_printf_i+0x1ae>
 800cbda:	4615      	mov	r5, r2
 800cbdc:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbe0:	fb03 6711 	mls	r7, r3, r1, r6
 800cbe4:	5dc7      	ldrb	r7, [r0, r7]
 800cbe6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbea:	4637      	mov	r7, r6
 800cbec:	42bb      	cmp	r3, r7
 800cbee:	460e      	mov	r6, r1
 800cbf0:	d9f4      	bls.n	800cbdc <_printf_i+0x118>
 800cbf2:	2b08      	cmp	r3, #8
 800cbf4:	d10b      	bne.n	800cc0e <_printf_i+0x14a>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	07de      	lsls	r6, r3, #31
 800cbfa:	d508      	bpl.n	800cc0e <_printf_i+0x14a>
 800cbfc:	6923      	ldr	r3, [r4, #16]
 800cbfe:	6861      	ldr	r1, [r4, #4]
 800cc00:	4299      	cmp	r1, r3
 800cc02:	bfde      	ittt	le
 800cc04:	2330      	movle	r3, #48	; 0x30
 800cc06:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc0e:	1b52      	subs	r2, r2, r5
 800cc10:	6122      	str	r2, [r4, #16]
 800cc12:	464b      	mov	r3, r9
 800cc14:	4621      	mov	r1, r4
 800cc16:	4640      	mov	r0, r8
 800cc18:	f8cd a000 	str.w	sl, [sp]
 800cc1c:	aa03      	add	r2, sp, #12
 800cc1e:	f7ff fedf 	bl	800c9e0 <_printf_common>
 800cc22:	3001      	adds	r0, #1
 800cc24:	d14a      	bne.n	800ccbc <_printf_i+0x1f8>
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc2a:	b004      	add	sp, #16
 800cc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	f043 0320 	orr.w	r3, r3, #32
 800cc36:	6023      	str	r3, [r4, #0]
 800cc38:	2778      	movs	r7, #120	; 0x78
 800cc3a:	4832      	ldr	r0, [pc, #200]	; (800cd04 <_printf_i+0x240>)
 800cc3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	6829      	ldr	r1, [r5, #0]
 800cc44:	061f      	lsls	r7, r3, #24
 800cc46:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc4a:	d402      	bmi.n	800cc52 <_printf_i+0x18e>
 800cc4c:	065f      	lsls	r7, r3, #25
 800cc4e:	bf48      	it	mi
 800cc50:	b2b6      	uxthmi	r6, r6
 800cc52:	07df      	lsls	r7, r3, #31
 800cc54:	bf48      	it	mi
 800cc56:	f043 0320 	orrmi.w	r3, r3, #32
 800cc5a:	6029      	str	r1, [r5, #0]
 800cc5c:	bf48      	it	mi
 800cc5e:	6023      	strmi	r3, [r4, #0]
 800cc60:	b91e      	cbnz	r6, 800cc6a <_printf_i+0x1a6>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	f023 0320 	bic.w	r3, r3, #32
 800cc68:	6023      	str	r3, [r4, #0]
 800cc6a:	2310      	movs	r3, #16
 800cc6c:	e7a6      	b.n	800cbbc <_printf_i+0xf8>
 800cc6e:	4824      	ldr	r0, [pc, #144]	; (800cd00 <_printf_i+0x23c>)
 800cc70:	e7e4      	b.n	800cc3c <_printf_i+0x178>
 800cc72:	4615      	mov	r5, r2
 800cc74:	e7bd      	b.n	800cbf2 <_printf_i+0x12e>
 800cc76:	682b      	ldr	r3, [r5, #0]
 800cc78:	6826      	ldr	r6, [r4, #0]
 800cc7a:	1d18      	adds	r0, r3, #4
 800cc7c:	6961      	ldr	r1, [r4, #20]
 800cc7e:	6028      	str	r0, [r5, #0]
 800cc80:	0635      	lsls	r5, r6, #24
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	d501      	bpl.n	800cc8a <_printf_i+0x1c6>
 800cc86:	6019      	str	r1, [r3, #0]
 800cc88:	e002      	b.n	800cc90 <_printf_i+0x1cc>
 800cc8a:	0670      	lsls	r0, r6, #25
 800cc8c:	d5fb      	bpl.n	800cc86 <_printf_i+0x1c2>
 800cc8e:	8019      	strh	r1, [r3, #0]
 800cc90:	2300      	movs	r3, #0
 800cc92:	4615      	mov	r5, r2
 800cc94:	6123      	str	r3, [r4, #16]
 800cc96:	e7bc      	b.n	800cc12 <_printf_i+0x14e>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	1d1a      	adds	r2, r3, #4
 800cc9e:	602a      	str	r2, [r5, #0]
 800cca0:	681d      	ldr	r5, [r3, #0]
 800cca2:	6862      	ldr	r2, [r4, #4]
 800cca4:	4628      	mov	r0, r5
 800cca6:	f000 f878 	bl	800cd9a <memchr>
 800ccaa:	b108      	cbz	r0, 800ccb0 <_printf_i+0x1ec>
 800ccac:	1b40      	subs	r0, r0, r5
 800ccae:	6060      	str	r0, [r4, #4]
 800ccb0:	6863      	ldr	r3, [r4, #4]
 800ccb2:	6123      	str	r3, [r4, #16]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccba:	e7aa      	b.n	800cc12 <_printf_i+0x14e>
 800ccbc:	462a      	mov	r2, r5
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	47d0      	blx	sl
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	d0ad      	beq.n	800cc26 <_printf_i+0x162>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	079b      	lsls	r3, r3, #30
 800ccce:	d413      	bmi.n	800ccf8 <_printf_i+0x234>
 800ccd0:	68e0      	ldr	r0, [r4, #12]
 800ccd2:	9b03      	ldr	r3, [sp, #12]
 800ccd4:	4298      	cmp	r0, r3
 800ccd6:	bfb8      	it	lt
 800ccd8:	4618      	movlt	r0, r3
 800ccda:	e7a6      	b.n	800cc2a <_printf_i+0x166>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	4632      	mov	r2, r6
 800cce0:	4649      	mov	r1, r9
 800cce2:	4640      	mov	r0, r8
 800cce4:	47d0      	blx	sl
 800cce6:	3001      	adds	r0, #1
 800cce8:	d09d      	beq.n	800cc26 <_printf_i+0x162>
 800ccea:	3501      	adds	r5, #1
 800ccec:	68e3      	ldr	r3, [r4, #12]
 800ccee:	9903      	ldr	r1, [sp, #12]
 800ccf0:	1a5b      	subs	r3, r3, r1
 800ccf2:	42ab      	cmp	r3, r5
 800ccf4:	dcf2      	bgt.n	800ccdc <_printf_i+0x218>
 800ccf6:	e7eb      	b.n	800ccd0 <_printf_i+0x20c>
 800ccf8:	2500      	movs	r5, #0
 800ccfa:	f104 0619 	add.w	r6, r4, #25
 800ccfe:	e7f5      	b.n	800ccec <_printf_i+0x228>
 800cd00:	0800dd48 	.word	0x0800dd48
 800cd04:	0800dd59 	.word	0x0800dd59

0800cd08 <_realloc_r>:
 800cd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0c:	4680      	mov	r8, r0
 800cd0e:	4614      	mov	r4, r2
 800cd10:	460e      	mov	r6, r1
 800cd12:	b921      	cbnz	r1, 800cd1e <_realloc_r+0x16>
 800cd14:	4611      	mov	r1, r2
 800cd16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1a:	f7ff bb77 	b.w	800c40c <_malloc_r>
 800cd1e:	b92a      	cbnz	r2, 800cd2c <_realloc_r+0x24>
 800cd20:	f7ff fcbe 	bl	800c6a0 <_free_r>
 800cd24:	4625      	mov	r5, r4
 800cd26:	4628      	mov	r0, r5
 800cd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2c:	f000 f851 	bl	800cdd2 <_malloc_usable_size_r>
 800cd30:	4284      	cmp	r4, r0
 800cd32:	4607      	mov	r7, r0
 800cd34:	d802      	bhi.n	800cd3c <_realloc_r+0x34>
 800cd36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd3a:	d812      	bhi.n	800cd62 <_realloc_r+0x5a>
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	4640      	mov	r0, r8
 800cd40:	f7ff fb64 	bl	800c40c <_malloc_r>
 800cd44:	4605      	mov	r5, r0
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d0ed      	beq.n	800cd26 <_realloc_r+0x1e>
 800cd4a:	42bc      	cmp	r4, r7
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	4631      	mov	r1, r6
 800cd50:	bf28      	it	cs
 800cd52:	463a      	movcs	r2, r7
 800cd54:	f000 f82f 	bl	800cdb6 <memcpy>
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	f7ff fca0 	bl	800c6a0 <_free_r>
 800cd60:	e7e1      	b.n	800cd26 <_realloc_r+0x1e>
 800cd62:	4635      	mov	r5, r6
 800cd64:	e7df      	b.n	800cd26 <_realloc_r+0x1e>

0800cd66 <memmove>:
 800cd66:	4288      	cmp	r0, r1
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	eb01 0402 	add.w	r4, r1, r2
 800cd6e:	d902      	bls.n	800cd76 <memmove+0x10>
 800cd70:	4284      	cmp	r4, r0
 800cd72:	4623      	mov	r3, r4
 800cd74:	d807      	bhi.n	800cd86 <memmove+0x20>
 800cd76:	1e43      	subs	r3, r0, #1
 800cd78:	42a1      	cmp	r1, r4
 800cd7a:	d008      	beq.n	800cd8e <memmove+0x28>
 800cd7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd80:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd84:	e7f8      	b.n	800cd78 <memmove+0x12>
 800cd86:	4601      	mov	r1, r0
 800cd88:	4402      	add	r2, r0
 800cd8a:	428a      	cmp	r2, r1
 800cd8c:	d100      	bne.n	800cd90 <memmove+0x2a>
 800cd8e:	bd10      	pop	{r4, pc}
 800cd90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd98:	e7f7      	b.n	800cd8a <memmove+0x24>

0800cd9a <memchr>:
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	b2c9      	uxtb	r1, r1
 800cda0:	4402      	add	r2, r0
 800cda2:	4293      	cmp	r3, r2
 800cda4:	4618      	mov	r0, r3
 800cda6:	d101      	bne.n	800cdac <memchr+0x12>
 800cda8:	2000      	movs	r0, #0
 800cdaa:	e003      	b.n	800cdb4 <memchr+0x1a>
 800cdac:	7804      	ldrb	r4, [r0, #0]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	428c      	cmp	r4, r1
 800cdb2:	d1f6      	bne.n	800cda2 <memchr+0x8>
 800cdb4:	bd10      	pop	{r4, pc}

0800cdb6 <memcpy>:
 800cdb6:	440a      	add	r2, r1
 800cdb8:	4291      	cmp	r1, r2
 800cdba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdbe:	d100      	bne.n	800cdc2 <memcpy+0xc>
 800cdc0:	4770      	bx	lr
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdc8:	4291      	cmp	r1, r2
 800cdca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdce:	d1f9      	bne.n	800cdc4 <memcpy+0xe>
 800cdd0:	bd10      	pop	{r4, pc}

0800cdd2 <_malloc_usable_size_r>:
 800cdd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdd6:	1f18      	subs	r0, r3, #4
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	bfbc      	itt	lt
 800cddc:	580b      	ldrlt	r3, [r1, r0]
 800cdde:	18c0      	addlt	r0, r0, r3
 800cde0:	4770      	bx	lr
	...

0800cde4 <_init>:
 800cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde6:	bf00      	nop
 800cde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdea:	bc08      	pop	{r3}
 800cdec:	469e      	mov	lr, r3
 800cdee:	4770      	bx	lr

0800cdf0 <_fini>:
 800cdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf2:	bf00      	nop
 800cdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdf6:	bc08      	pop	{r3}
 800cdf8:	469e      	mov	lr, r3
 800cdfa:	4770      	bx	lr
