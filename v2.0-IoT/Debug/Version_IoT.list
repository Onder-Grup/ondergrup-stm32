
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800d6b4  0800d6b4  0001d6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5b8  0800e5b8  00020a20  2**0
                  CONTENTS
  4 .ARM          00000000  0800e5b8  0800e5b8  00020a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e5b8  0800e5b8  00020a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5b8  0800e5b8  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5bc  0800e5bc  0001e5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0800e5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000a20  0800efe0  00020a20  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  0800efe0  0002103c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013683  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c5  00000000  00000000  0003410f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  000367d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0e  00000000  00000000  00037998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef6  00000000  00000000  000387a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018953  00000000  00000000  0005369c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd40  00000000  00000000  0006bfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005208  00000000  00000000  0010bd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a20 	.word	0x20000a20
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d69c 	.word	0x0800d69c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a24 	.word	0x20000a24
 8000220:	0800d69c 	.word	0x0800d69c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f00c fdff 	bl	800ce60 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f00b ffca 	bl	800c210 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f008 fefa 	bl	8009078 <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f00c fddd 	bl	800ce60 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00c fdcd 	bl	800ce60 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f00b ff95 	bl	800c210 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f008 fec5 	bl	8009078 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f00b ff81 	bl	800c210 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f008 feb1 	bl	8009078 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800d700 	.word	0x0800d700
 8000324:	0800d710 	.word	0x0800d710
 8000328:	20000a3c 	.word	0x20000a3c
 800032c:	0800d78c 	.word	0x0800d78c
 8000330:	0800d730 	.word	0x0800d730
 8000334:	0800d7a0 	.word	0x0800d7a0

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f00a fa75 	bl	800a86a <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f00a fa61 	bl	800a850 <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f009 fdc4 	bl	8009f90 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000e08 	.word	0x20000e08
 8000414:	20000b36 	.word	0x20000b36

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f00a fa05 	bl	800a86a <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f00a f9f1 	bl	800a850 <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f009 fd54 	bl	8009f90 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000e08 	.word	0x20000e08
 80004f4:	20000b36 	.word	0x20000b36

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f00a f97f 	bl	800a86a <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f00a f96b 	bl	800a850 <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f009 fcce 	bl	8009f90 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000e08 	.word	0x20000e08
 8000600:	20000b36 	.word	0x20000b36

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f86d 	bl	8000700 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f008 fcd4 	bl	8009078 <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9d 	bl	800062a <lcd_gotoxy>

    lcd_send_char(' ');
 80006f0:	2020      	movs	r0, #32
 80006f2:	f7ff ff17 	bl	8000524 <lcd_send_char>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <lcd_backlight+0x20>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe11 	bl	8000338 <lcd_send_cmd>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000b36 	.word	0x20000b36

08000724 <lcd_cursor>:

void lcd_cursor(int state) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff fe00 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fdfd 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800073e:	e002      	b.n	8000746 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fdf9 	bl	8000338 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <__NVIC_SystemReset+0x24>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000762:	4904      	ldr	r1, [pc, #16]	; (8000774 <__NVIC_SystemReset+0x24>)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x28>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <__NVIC_SystemReset+0x20>
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	05fa0004 	.word	0x05fa0004

0800077c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3301      	adds	r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f00c fa70 	bl	800cc74 <malloc>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <copyText+0x2a>
        strcpy(result, text);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f00c fbd1 	bl	800cf48 <strcpy>
    }
    return result;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007ba:	20c8      	movs	r0, #200	; 0xc8
 80007bc:	f008 fc5c 	bl	8009078 <HAL_Delay>
	lcd_clear();
 80007c0:	f7ff ff7e 	bl	80006c0 <lcd_clear>
	if(type == 1 && page == 0) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d143      	bne.n	8000852 <printTemplate+0xa2>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d140      	bne.n	8000852 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007d0:	4ac1      	ldr	r2, [pc, #772]	; (8000ad8 <printTemplate+0x328>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff47 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 80007da:	4ac0      	ldr	r2, [pc, #768]	; (8000adc <printTemplate+0x32c>)
 80007dc:	2103      	movs	r1, #3
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff42 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 80007e4:	4abe      	ldr	r2, [pc, #760]	; (8000ae0 <printTemplate+0x330>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff3d 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 80007ee:	4abd      	ldr	r2, [pc, #756]	; (8000ae4 <printTemplate+0x334>)
 80007f0:	2105      	movs	r1, #5
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 80007f8:	4abb      	ldr	r2, [pc, #748]	; (8000ae8 <printTemplate+0x338>)
 80007fa:	2106      	movs	r1, #6
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8000802:	4aba      	ldr	r2, [pc, #744]	; (8000aec <printTemplate+0x33c>)
 8000804:	2107      	movs	r1, #7
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 800080c:	4ab8      	ldr	r2, [pc, #736]	; (8000af0 <printTemplate+0x340>)
 800080e:	210a      	movs	r1, #10
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff29 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8000816:	4ab7      	ldr	r2, [pc, #732]	; (8000af4 <printTemplate+0x344>)
 8000818:	210b      	movs	r1, #11
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff24 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8000820:	4ab5      	ldr	r2, [pc, #724]	; (8000af8 <printTemplate+0x348>)
 8000822:	210c      	movs	r1, #12
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff1f 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 800082a:	4ab4      	ldr	r2, [pc, #720]	; (8000afc <printTemplate+0x34c>)
 800082c:	210d      	movs	r1, #13
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff1a 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8000834:	4ab2      	ldr	r2, [pc, #712]	; (8000b00 <printTemplate+0x350>)
 8000836:	210e      	movs	r1, #14
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff15 	bl	8000668 <lcd_print>
		lcd_print(1, 5, machineID);
 800083e:	4ab1      	ldr	r2, [pc, #708]	; (8000b04 <printTemplate+0x354>)
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff10 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <lcd_gotoxy>
				slideText(wifiPass, 7, 1);
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000850:	e19a      	b.n	8000b88 <printTemplate+0x3d8>
	} else if(type == 2) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	f040 80b5 	bne.w	80009c4 <printTemplate+0x214>
		if(page == 1) {
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d120      	bne.n	80008a2 <printTemplate+0xf2>
			lcd_clear();
 8000860:	f7ff ff2e 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f008 fc07 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800086a:	4aa7      	ldr	r2, [pc, #668]	; (8000b08 <printTemplate+0x358>)
 800086c:	2101      	movs	r1, #1
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff fefa 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000874:	48a5      	ldr	r0, [pc, #660]	; (8000b0c <printTemplate+0x35c>)
 8000876:	f7ff fcd5 	bl	8000224 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	2b0a      	cmp	r3, #10
 800087e:	d805      	bhi.n	800088c <printTemplate+0xdc>
				lcd_print(1, 7, wifiSSID);
 8000880:	4aa2      	ldr	r2, [pc, #648]	; (8000b0c <printTemplate+0x35c>)
 8000882:	2107      	movs	r1, #7
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff feef 	bl	8000668 <lcd_print>
 800088a:	e004      	b.n	8000896 <printTemplate+0xe6>
				slideText(wifiSSID, 7, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	2107      	movs	r1, #7
 8000890:	489e      	ldr	r0, [pc, #632]	; (8000b0c <printTemplate+0x35c>)
 8000892:	f000 fda1 	bl	80013d8 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000896:	4a9e      	ldr	r2, [pc, #632]	; (8000b10 <printTemplate+0x360>)
 8000898:	2101      	movs	r1, #1
 800089a:	2002      	movs	r0, #2
 800089c:	f7ff fee4 	bl	8000668 <lcd_print>
}
 80008a0:	e172      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 2) {
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d120      	bne.n	80008ea <printTemplate+0x13a>
			lcd_clear();
 80008a8:	f7ff ff0a 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008ac:	2064      	movs	r0, #100	; 0x64
 80008ae:	f008 fbe3 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008b2:	4a95      	ldr	r2, [pc, #596]	; (8000b08 <printTemplate+0x358>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff fed6 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 80008bc:	4893      	ldr	r0, [pc, #588]	; (8000b0c <printTemplate+0x35c>)
 80008be:	f7ff fcb1 	bl	8000224 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b0a      	cmp	r3, #10
 80008c6:	d805      	bhi.n	80008d4 <printTemplate+0x124>
				lcd_print(1, 7, wifiSSID);
 80008c8:	4a90      	ldr	r2, [pc, #576]	; (8000b0c <printTemplate+0x35c>)
 80008ca:	2107      	movs	r1, #7
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fecb 	bl	8000668 <lcd_print>
 80008d2:	e004      	b.n	80008de <printTemplate+0x12e>
				slideText(wifiSSID, 7, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2107      	movs	r1, #7
 80008d8:	488c      	ldr	r0, [pc, #560]	; (8000b0c <printTemplate+0x35c>)
 80008da:	f000 fd7d 	bl	80013d8 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008de:	4a8d      	ldr	r2, [pc, #564]	; (8000b14 <printTemplate+0x364>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff fec0 	bl	8000668 <lcd_print>
}
 80008e8:	e14e      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 3) {
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d120      	bne.n	8000932 <printTemplate+0x182>
			lcd_clear();
 80008f0:	f7ff fee6 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008f4:	2064      	movs	r0, #100	; 0x64
 80008f6:	f008 fbbf 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008fa:	4a83      	ldr	r2, [pc, #524]	; (8000b08 <printTemplate+0x358>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff feb2 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000904:	4881      	ldr	r0, [pc, #516]	; (8000b0c <printTemplate+0x35c>)
 8000906:	f7ff fc8d 	bl	8000224 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	2b0a      	cmp	r3, #10
 800090e:	d805      	bhi.n	800091c <printTemplate+0x16c>
				lcd_print(1, 7, wifiSSID);
 8000910:	4a7e      	ldr	r2, [pc, #504]	; (8000b0c <printTemplate+0x35c>)
 8000912:	2107      	movs	r1, #7
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fea7 	bl	8000668 <lcd_print>
 800091a:	e004      	b.n	8000926 <printTemplate+0x176>
				slideText(wifiSSID, 7, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2107      	movs	r1, #7
 8000920:	487a      	ldr	r0, [pc, #488]	; (8000b0c <printTemplate+0x35c>)
 8000922:	f000 fd59 	bl	80013d8 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000926:	4a7c      	ldr	r2, [pc, #496]	; (8000b18 <printTemplate+0x368>)
 8000928:	2101      	movs	r1, #1
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fe9c 	bl	8000668 <lcd_print>
}
 8000930:	e12a      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d120      	bne.n	800097a <printTemplate+0x1ca>
			lcd_clear();
 8000938:	f7ff fec2 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f008 fb9b 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000942:	4a71      	ldr	r2, [pc, #452]	; (8000b08 <printTemplate+0x358>)
 8000944:	2101      	movs	r1, #1
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fe8e 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 800094c:	486f      	ldr	r0, [pc, #444]	; (8000b0c <printTemplate+0x35c>)
 800094e:	f7ff fc69 	bl	8000224 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	2b0a      	cmp	r3, #10
 8000956:	d805      	bhi.n	8000964 <printTemplate+0x1b4>
				lcd_print(1, 7, wifiSSID);
 8000958:	4a6c      	ldr	r2, [pc, #432]	; (8000b0c <printTemplate+0x35c>)
 800095a:	2107      	movs	r1, #7
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fe83 	bl	8000668 <lcd_print>
 8000962:	e004      	b.n	800096e <printTemplate+0x1be>
				slideText(wifiSSID, 7, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	2107      	movs	r1, #7
 8000968:	4868      	ldr	r0, [pc, #416]	; (8000b0c <printTemplate+0x35c>)
 800096a:	f000 fd35 	bl	80013d8 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800096e:	4a6b      	ldr	r2, [pc, #428]	; (8000b1c <printTemplate+0x36c>)
 8000970:	2101      	movs	r1, #1
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fe78 	bl	8000668 <lcd_print>
}
 8000978:	e106      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 5) {
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2b05      	cmp	r3, #5
 800097e:	f040 8103 	bne.w	8000b88 <printTemplate+0x3d8>
			lcd_clear();
 8000982:	f7ff fe9d 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000986:	2064      	movs	r0, #100	; 0x64
 8000988:	f008 fb76 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800098c:	4a5e      	ldr	r2, [pc, #376]	; (8000b08 <printTemplate+0x358>)
 800098e:	2101      	movs	r1, #1
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fe69 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000996:	485d      	ldr	r0, [pc, #372]	; (8000b0c <printTemplate+0x35c>)
 8000998:	f7ff fc44 	bl	8000224 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	2b0a      	cmp	r3, #10
 80009a0:	d805      	bhi.n	80009ae <printTemplate+0x1fe>
				lcd_print(1, 7, wifiSSID);
 80009a2:	4a5a      	ldr	r2, [pc, #360]	; (8000b0c <printTemplate+0x35c>)
 80009a4:	2107      	movs	r1, #7
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff fe5e 	bl	8000668 <lcd_print>
 80009ac:	e004      	b.n	80009b8 <printTemplate+0x208>
				slideText(wifiSSID, 7, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2107      	movs	r1, #7
 80009b2:	4856      	ldr	r0, [pc, #344]	; (8000b0c <printTemplate+0x35c>)
 80009b4:	f000 fd10 	bl	80013d8 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80009b8:	4a59      	ldr	r2, [pc, #356]	; (8000b20 <printTemplate+0x370>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff fe53 	bl	8000668 <lcd_print>
}
 80009c2:	e0e1      	b.n	8000b88 <printTemplate+0x3d8>
	} else if(type == 3) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	f040 80de 	bne.w	8000b88 <printTemplate+0x3d8>
		if(page == 1) {
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d120      	bne.n	8000a14 <printTemplate+0x264>
			lcd_clear();
 80009d2:	f7ff fe75 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f008 fb4e 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <printTemplate+0x374>)
 80009de:	2101      	movs	r1, #1
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff fe41 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 80009e6:	4850      	ldr	r0, [pc, #320]	; (8000b28 <printTemplate+0x378>)
 80009e8:	f7ff fc1c 	bl	8000224 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b0a      	cmp	r3, #10
 80009f0:	d805      	bhi.n	80009fe <printTemplate+0x24e>
				lcd_print(1, 7, wifiPass);
 80009f2:	4a4d      	ldr	r2, [pc, #308]	; (8000b28 <printTemplate+0x378>)
 80009f4:	2107      	movs	r1, #7
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fe36 	bl	8000668 <lcd_print>
 80009fc:	e004      	b.n	8000a08 <printTemplate+0x258>
				slideText(wifiPass, 7, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2107      	movs	r1, #7
 8000a02:	4849      	ldr	r0, [pc, #292]	; (8000b28 <printTemplate+0x378>)
 8000a04:	f000 fce8 	bl	80013d8 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000a08:	4a41      	ldr	r2, [pc, #260]	; (8000b10 <printTemplate+0x360>)
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff fe2b 	bl	8000668 <lcd_print>
}
 8000a12:	e0b9      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d120      	bne.n	8000a5c <printTemplate+0x2ac>
			lcd_clear();
 8000a1a:	f7ff fe51 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a1e:	2064      	movs	r0, #100	; 0x64
 8000a20:	f008 fb2a 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a24:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <printTemplate+0x374>)
 8000a26:	2101      	movs	r1, #1
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fe1d 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000a2e:	483e      	ldr	r0, [pc, #248]	; (8000b28 <printTemplate+0x378>)
 8000a30:	f7ff fbf8 	bl	8000224 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b0a      	cmp	r3, #10
 8000a38:	d805      	bhi.n	8000a46 <printTemplate+0x296>
				lcd_print(1, 7, wifiPass);
 8000a3a:	4a3b      	ldr	r2, [pc, #236]	; (8000b28 <printTemplate+0x378>)
 8000a3c:	2107      	movs	r1, #7
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff fe12 	bl	8000668 <lcd_print>
 8000a44:	e004      	b.n	8000a50 <printTemplate+0x2a0>
				slideText(wifiPass, 7, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2107      	movs	r1, #7
 8000a4a:	4837      	ldr	r0, [pc, #220]	; (8000b28 <printTemplate+0x378>)
 8000a4c:	f000 fcc4 	bl	80013d8 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000a50:	4a30      	ldr	r2, [pc, #192]	; (8000b14 <printTemplate+0x364>)
 8000a52:	2101      	movs	r1, #1
 8000a54:	2002      	movs	r0, #2
 8000a56:	f7ff fe07 	bl	8000668 <lcd_print>
}
 8000a5a:	e095      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d120      	bne.n	8000aa4 <printTemplate+0x2f4>
			lcd_clear();
 8000a62:	f7ff fe2d 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a66:	2064      	movs	r0, #100	; 0x64
 8000a68:	f008 fb06 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <printTemplate+0x374>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fdf9 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000a76:	482c      	ldr	r0, [pc, #176]	; (8000b28 <printTemplate+0x378>)
 8000a78:	f7ff fbd4 	bl	8000224 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b0a      	cmp	r3, #10
 8000a80:	d805      	bhi.n	8000a8e <printTemplate+0x2de>
				lcd_print(1, 7, wifiPass);
 8000a82:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <printTemplate+0x378>)
 8000a84:	2107      	movs	r1, #7
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fdee 	bl	8000668 <lcd_print>
 8000a8c:	e004      	b.n	8000a98 <printTemplate+0x2e8>
				slideText(wifiPass, 7, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2107      	movs	r1, #7
 8000a92:	4825      	ldr	r0, [pc, #148]	; (8000b28 <printTemplate+0x378>)
 8000a94:	f000 fca0 	bl	80013d8 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000a98:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <printTemplate+0x368>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f7ff fde3 	bl	8000668 <lcd_print>
}
 8000aa2:	e071      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d14b      	bne.n	8000b42 <printTemplate+0x392>
			lcd_clear();
 8000aaa:	f7ff fe09 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000aae:	2064      	movs	r0, #100	; 0x64
 8000ab0:	f008 fae2 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <printTemplate+0x374>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fdd5 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000abe:	481a      	ldr	r0, [pc, #104]	; (8000b28 <printTemplate+0x378>)
 8000ac0:	f7ff fbb0 	bl	8000224 <strlen>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	d830      	bhi.n	8000b2c <printTemplate+0x37c>
				lcd_print(1, 7, wifiPass);
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <printTemplate+0x378>)
 8000acc:	2107      	movs	r1, #7
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff fdca 	bl	8000668 <lcd_print>
 8000ad4:	e02f      	b.n	8000b36 <printTemplate+0x386>
 8000ad6:	bf00      	nop
 8000ad8:	0800d82c 	.word	0x0800d82c
 8000adc:	0800d834 	.word	0x0800d834
 8000ae0:	0800d838 	.word	0x0800d838
 8000ae4:	0800d83c 	.word	0x0800d83c
 8000ae8:	0800d840 	.word	0x0800d840
 8000aec:	0800d844 	.word	0x0800d844
 8000af0:	0800d848 	.word	0x0800d848
 8000af4:	0800d84c 	.word	0x0800d84c
 8000af8:	0800d850 	.word	0x0800d850
 8000afc:	0800d854 	.word	0x0800d854
 8000b00:	0800d858 	.word	0x0800d858
 8000b04:	20000bf4 	.word	0x20000bf4
 8000b08:	0800d85c 	.word	0x0800d85c
 8000b0c:	20000c00 	.word	0x20000c00
 8000b10:	0800d864 	.word	0x0800d864
 8000b14:	0800d878 	.word	0x0800d878
 8000b18:	0800d88c 	.word	0x0800d88c
 8000b1c:	0800d8a0 	.word	0x0800d8a0
 8000b20:	0800d8b4 	.word	0x0800d8b4
 8000b24:	0800d8c8 	.word	0x0800d8c8
 8000b28:	20000c24 	.word	0x20000c24
				slideText(wifiPass, 7, 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2107      	movs	r1, #7
 8000b30:	4817      	ldr	r0, [pc, #92]	; (8000b90 <printTemplate+0x3e0>)
 8000b32:	f000 fc51 	bl	80013d8 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <printTemplate+0x3e4>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fd94 	bl	8000668 <lcd_print>
}
 8000b40:	e022      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d11f      	bne.n	8000b88 <printTemplate+0x3d8>
			lcd_clear();
 8000b48:	f7ff fdba 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000b4c:	2064      	movs	r0, #100	; 0x64
 8000b4e:	f008 fa93 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <printTemplate+0x3e8>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fd86 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <printTemplate+0x3e0>)
 8000b5e:	f7ff fb61 	bl	8000224 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b0a      	cmp	r3, #10
 8000b66:	d805      	bhi.n	8000b74 <printTemplate+0x3c4>
				lcd_print(1, 7, wifiPass);
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <printTemplate+0x3e0>)
 8000b6a:	2107      	movs	r1, #7
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fd7b 	bl	8000668 <lcd_print>
 8000b72:	e004      	b.n	8000b7e <printTemplate+0x3ce>
				slideText(wifiPass, 7, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2107      	movs	r1, #7
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <printTemplate+0x3e0>)
 8000b7a:	f000 fc2d 	bl	80013d8 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <printTemplate+0x3ec>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fd70 	bl	8000668 <lcd_print>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000c24 	.word	0x20000c24
 8000b94:	0800d8a0 	.word	0x0800d8a0
 8000b98:	0800d8c8 	.word	0x0800d8c8
 8000b9c:	0800d8b4 	.word	0x0800d8b4

08000ba0 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <getCharFromCursorPosition+0x1c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000960 	.word	0x20000960

08000bc0 <getNumbersFromCursorPosition>:

char getNumbersFromCursorPosition(int cursorPosition) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	return numbersArray[cursorPosition];
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <getNumbersFromCursorPosition+0x1c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200009b4 	.word	0x200009b4

08000be0 <takeMachineID>:

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fd9a 	bl	8000724 <lcd_cursor>

	if(state == 0) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d104      	bne.n	8000c00 <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4880      	ldr	r0, [pc, #512]	; (8000dfc <takeMachineID+0x21c>)
 8000bfc:	f00c f950 	bl	800cea0 <memset>
	}

    int cursorPosition = 3;
 8000c00:	2303      	movs	r3, #3
 8000c02:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fdce 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c14:	2108      	movs	r1, #8
 8000c16:	487a      	ldr	r0, [pc, #488]	; (8000e00 <takeMachineID+0x220>)
 8000c18:	f008 fffe 	bl	8009c18 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d103      	bne.n	8000c2a <takeMachineID+0x4a>
        	lcd_cursor(0);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fd7e 	bl	8000724 <lcd_cursor>

            break;
 8000c28:	e0e4      	b.n	8000df4 <takeMachineID+0x214>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4874      	ldr	r0, [pc, #464]	; (8000e00 <takeMachineID+0x220>)
 8000c2e:	f008 fff3 	bl	8009c18 <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d112      	bne.n	8000c5e <takeMachineID+0x7e>
        	if(cursorPosition == 7) {
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b07      	cmp	r3, #7
 8000c3c:	d102      	bne.n	8000c44 <takeMachineID+0x64>
        		cursorPosition = 10;
 8000c3e:	230a      	movs	r3, #10
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e008      	b.n	8000c56 <takeMachineID+0x76>
        	} else if (cursorPosition == 14) {
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	2b0e      	cmp	r3, #14
 8000c48:	d102      	bne.n	8000c50 <takeMachineID+0x70>
                cursorPosition = 3;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e002      	b.n	8000c56 <takeMachineID+0x76>
            } else {
            	cursorPosition++;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000c56:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c5a:	f008 fa0d 	bl	8009078 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000c5e:	2108      	movs	r1, #8
 8000c60:	4868      	ldr	r0, [pc, #416]	; (8000e04 <takeMachineID+0x224>)
 8000c62:	f008 ffd9 	bl	8009c18 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d112      	bne.n	8000c92 <takeMachineID+0xb2>
            if (cursorPosition == 3) {
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d102      	bne.n	8000c78 <takeMachineID+0x98>
                cursorPosition = 14;
 8000c72:	230e      	movs	r3, #14
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e008      	b.n	8000c8a <takeMachineID+0xaa>
            } else if(cursorPosition == 10) {
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	d102      	bne.n	8000c84 <takeMachineID+0xa4>
            	cursorPosition = 7;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e002      	b.n	8000c8a <takeMachineID+0xaa>
            } else {
            	cursorPosition--;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000c8a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c8e:	f008 f9f3 	bl	8009078 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000c92:	2102      	movs	r1, #2
 8000c94:	485a      	ldr	r0, [pc, #360]	; (8000e00 <takeMachineID+0x220>)
 8000c96:	f008 ffbf 	bl	8009c18 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d16c      	bne.n	8000d7a <takeMachineID+0x19a>
        	if(cursorPosition == 3) {
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d105      	bne.n	8000cb2 <takeMachineID+0xd2>
        		machineID[machineIDLoc] = '0';
 8000ca6:	4a55      	ldr	r2, [pc, #340]	; (8000dfc <takeMachineID+0x21c>)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4413      	add	r3, r2
 8000cac:	2230      	movs	r2, #48	; 0x30
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e04f      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 4) {
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d105      	bne.n	8000cc4 <takeMachineID+0xe4>
        		machineID[machineIDLoc] = '1';
 8000cb8:	4a50      	ldr	r2, [pc, #320]	; (8000dfc <takeMachineID+0x21c>)
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	2231      	movs	r2, #49	; 0x31
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e046      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 5) {
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d105      	bne.n	8000cd6 <takeMachineID+0xf6>
        		machineID[machineIDLoc] = '2';
 8000cca:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <takeMachineID+0x21c>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4413      	add	r3, r2
 8000cd0:	2232      	movs	r2, #50	; 0x32
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e03d      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 6) {
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b06      	cmp	r3, #6
 8000cda:	d105      	bne.n	8000ce8 <takeMachineID+0x108>
        		machineID[machineIDLoc] = '3';
 8000cdc:	4a47      	ldr	r2, [pc, #284]	; (8000dfc <takeMachineID+0x21c>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	2233      	movs	r2, #51	; 0x33
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e034      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 7) {
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2b07      	cmp	r3, #7
 8000cec:	d105      	bne.n	8000cfa <takeMachineID+0x11a>
        		machineID[machineIDLoc] = '4';
 8000cee:	4a43      	ldr	r2, [pc, #268]	; (8000dfc <takeMachineID+0x21c>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	2234      	movs	r2, #52	; 0x34
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e02b      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 10) {
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b0a      	cmp	r3, #10
 8000cfe:	d105      	bne.n	8000d0c <takeMachineID+0x12c>
        		machineID[machineIDLoc] = '5';
 8000d00:	4a3e      	ldr	r2, [pc, #248]	; (8000dfc <takeMachineID+0x21c>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4413      	add	r3, r2
 8000d06:	2235      	movs	r2, #53	; 0x35
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e022      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 11) {
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2b0b      	cmp	r3, #11
 8000d10:	d105      	bne.n	8000d1e <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '6';
 8000d12:	4a3a      	ldr	r2, [pc, #232]	; (8000dfc <takeMachineID+0x21c>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4413      	add	r3, r2
 8000d18:	2236      	movs	r2, #54	; 0x36
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e019      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 12) {
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b0c      	cmp	r3, #12
 8000d22:	d105      	bne.n	8000d30 <takeMachineID+0x150>
        		machineID[machineIDLoc] = '7';
 8000d24:	4a35      	ldr	r2, [pc, #212]	; (8000dfc <takeMachineID+0x21c>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4413      	add	r3, r2
 8000d2a:	2237      	movs	r2, #55	; 0x37
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e010      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 13) {
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	2b0d      	cmp	r3, #13
 8000d34:	d105      	bne.n	8000d42 <takeMachineID+0x162>
        		machineID[machineIDLoc] = '8';
 8000d36:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <takeMachineID+0x21c>)
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2238      	movs	r2, #56	; 0x38
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <takeMachineID+0x172>
        	} else if(cursorPosition == 14) {
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2b0e      	cmp	r3, #14
 8000d46:	d104      	bne.n	8000d52 <takeMachineID+0x172>
        		machineID[machineIDLoc] = '9';
 8000d48:	4a2c      	ldr	r2, [pc, #176]	; (8000dfc <takeMachineID+0x21c>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2239      	movs	r2, #57	; 0x39
 8000d50:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	b2d9      	uxtb	r1, r3
 8000d56:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <takeMachineID+0x21c>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fc96 	bl	8000692 <lcd_print_char>

        	writeLoc++;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000d72:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d76:	f008 f97f 	bl	8009078 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4820      	ldr	r0, [pc, #128]	; (8000e00 <takeMachineID+0x220>)
 8000d7e:	f008 ff4b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d12e      	bne.n	8000de6 <takeMachineID+0x206>
            if(strlen(machineID) >= 1) {
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <takeMachineID+0x21c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d027      	beq.n	8000de0 <takeMachineID+0x200>

                machineID[machineIDLoc] = '\0';
 8000d90:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <takeMachineID+0x21c>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4413      	add	r3, r2
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3304      	adds	r3, #4
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fc95 	bl	80006d4 <lcd_delete_char>
                HAL_Delay(50);
 8000daa:	2032      	movs	r0, #50	; 0x32
 8000dac:	f008 f964 	bl	8009078 <HAL_Delay>

                if(writeLoc > 5) {
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b05      	cmp	r3, #5
 8000db4:	dd03      	ble.n	8000dbe <takeMachineID+0x1de>
                	writeLoc--;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	e004      	b.n	8000dc8 <takeMachineID+0x1e8>
                } else if(writeLoc < 5) {
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	dc01      	bgt.n	8000dc8 <takeMachineID+0x1e8>
                	writeLoc = 5;
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd03      	ble.n	8000dd6 <takeMachineID+0x1f6>
                	machineIDLoc--;
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	e004      	b.n	8000de0 <takeMachineID+0x200>
                } else if(machineIDLoc < 0) {
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da01      	bge.n	8000de0 <takeMachineID+0x200>
                	machineIDLoc = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000de0:	20fa      	movs	r0, #250	; 0xfa
 8000de2:	f008 f949 	bl	8009078 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	2002      	movs	r0, #2
 8000dee:	f7ff fc1c 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000df2:	e70f      	b.n	8000c14 <takeMachineID+0x34>
    }
}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000bf4 	.word	0x20000bf4
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40011000 	.word	0x40011000

08000e08 <takeWifiSSID>:

void takeWifiSSID(int state, I2C_HandleTypeDef *hi2c1) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff fc86 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d104      	bne.n	8000e28 <takeWifiSSID+0x20>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000e1e:	2221      	movs	r2, #33	; 0x21
 8000e20:	2100      	movs	r1, #0
 8000e22:	489d      	ldr	r0, [pc, #628]	; (8001098 <takeWifiSSID+0x290>)
 8000e24:	f00c f83c 	bl	800cea0 <memset>
    }

    int realCharPos = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000e2c:	4b9b      	ldr	r3, [pc, #620]	; (800109c <takeWifiSSID+0x294>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
    page = 1;
 8000e32:	4b9b      	ldr	r3, [pc, #620]	; (80010a0 <takeWifiSSID+0x298>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000e40:	2101      	movs	r1, #1
 8000e42:	2002      	movs	r0, #2
 8000e44:	f7ff fcb4 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000e48:	2108      	movs	r1, #8
 8000e4a:	4896      	ldr	r0, [pc, #600]	; (80010a4 <takeWifiSSID+0x29c>)
 8000e4c:	f008 fee4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d103      	bne.n	8000e5e <takeWifiSSID+0x56>
            lcd_cursor(0);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff fc64 	bl	8000724 <lcd_cursor>

            break;
 8000e5c:	e142      	b.n	80010e4 <takeWifiSSID+0x2dc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4890      	ldr	r0, [pc, #576]	; (80010a4 <takeWifiSSID+0x29c>)
 8000e62:	f008 fed9 	bl	8009c18 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d166      	bne.n	8000f3a <takeWifiSSID+0x132>
        	realCharPos++;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b50      	cmp	r3, #80	; 0x50
 8000e76:	dd01      	ble.n	8000e7c <takeWifiSSID+0x74>
        		realCharPos = 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000e7c:	4b87      	ldr	r3, [pc, #540]	; (800109c <takeWifiSSID+0x294>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b10      	cmp	r3, #16
 8000e82:	d152      	bne.n	8000f2a <takeWifiSSID+0x122>
            	if(page == 1) {
 8000e84:	4b86      	ldr	r3, [pc, #536]	; (80010a0 <takeWifiSSID+0x298>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d10c      	bne.n	8000ea6 <takeWifiSSID+0x9e>
            		cursorPosition = 1;
 8000e8c:	4b83      	ldr	r3, [pc, #524]	; (800109c <takeWifiSSID+0x294>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
            		page++;
 8000e92:	4b83      	ldr	r3, [pc, #524]	; (80010a0 <takeWifiSSID+0x298>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	4a81      	ldr	r2, [pc, #516]	; (80010a0 <takeWifiSSID+0x298>)
 8000e9a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f7ff fc86 	bl	80007b0 <printTemplate>
 8000ea4:	e046      	b.n	8000f34 <takeWifiSSID+0x12c>
            	} else if(page == 2) {
 8000ea6:	4b7e      	ldr	r3, [pc, #504]	; (80010a0 <takeWifiSSID+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d10c      	bne.n	8000ec8 <takeWifiSSID+0xc0>
            		cursorPosition = 1;
 8000eae:	4b7b      	ldr	r3, [pc, #492]	; (800109c <takeWifiSSID+0x294>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
            		page++;
 8000eb4:	4b7a      	ldr	r3, [pc, #488]	; (80010a0 <takeWifiSSID+0x298>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a79      	ldr	r2, [pc, #484]	; (80010a0 <takeWifiSSID+0x298>)
 8000ebc:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f7ff fc75 	bl	80007b0 <printTemplate>
 8000ec6:	e035      	b.n	8000f34 <takeWifiSSID+0x12c>
            	} else if(page == 3) {
 8000ec8:	4b75      	ldr	r3, [pc, #468]	; (80010a0 <takeWifiSSID+0x298>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d10c      	bne.n	8000eea <takeWifiSSID+0xe2>
            		cursorPosition = 1;
 8000ed0:	4b72      	ldr	r3, [pc, #456]	; (800109c <takeWifiSSID+0x294>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
            		page++;
 8000ed6:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <takeWifiSSID+0x298>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a70      	ldr	r2, [pc, #448]	; (80010a0 <takeWifiSSID+0x298>)
 8000ede:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff fc64 	bl	80007b0 <printTemplate>
 8000ee8:	e024      	b.n	8000f34 <takeWifiSSID+0x12c>
            	} else if(page == 4) {
 8000eea:	4b6d      	ldr	r3, [pc, #436]	; (80010a0 <takeWifiSSID+0x298>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d10c      	bne.n	8000f0c <takeWifiSSID+0x104>
            		cursorPosition = 1;
 8000ef2:	4b6a      	ldr	r3, [pc, #424]	; (800109c <takeWifiSSID+0x294>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
            		page++;
 8000ef8:	4b69      	ldr	r3, [pc, #420]	; (80010a0 <takeWifiSSID+0x298>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a68      	ldr	r2, [pc, #416]	; (80010a0 <takeWifiSSID+0x298>)
 8000f00:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000f02:	2105      	movs	r1, #5
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fc53 	bl	80007b0 <printTemplate>
 8000f0a:	e013      	b.n	8000f34 <takeWifiSSID+0x12c>
            	} else if(page == 5) {
 8000f0c:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <takeWifiSSID+0x298>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d10f      	bne.n	8000f34 <takeWifiSSID+0x12c>
            		cursorPosition = 1;
 8000f14:	4b61      	ldr	r3, [pc, #388]	; (800109c <takeWifiSSID+0x294>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f1a:	4b61      	ldr	r3, [pc, #388]	; (80010a0 <takeWifiSSID+0x298>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f20:	2101      	movs	r1, #1
 8000f22:	2002      	movs	r0, #2
 8000f24:	f7ff fc44 	bl	80007b0 <printTemplate>
 8000f28:	e004      	b.n	8000f34 <takeWifiSSID+0x12c>
            	}
            } else {
            	cursorPosition++;
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <takeWifiSSID+0x294>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a5a      	ldr	r2, [pc, #360]	; (800109c <takeWifiSSID+0x294>)
 8000f32:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f34:	20fa      	movs	r0, #250	; 0xfa
 8000f36:	f008 f89f 	bl	8009078 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	485a      	ldr	r0, [pc, #360]	; (80010a8 <takeWifiSSID+0x2a0>)
 8000f3e:	f008 fe6b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d15e      	bne.n	8001006 <takeWifiSSID+0x1fe>
        	realCharPos--;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dc01      	bgt.n	8000f58 <takeWifiSSID+0x150>
        		realCharPos = 80;
 8000f54:	2350      	movs	r3, #80	; 0x50
 8000f56:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000f58:	4b50      	ldr	r3, [pc, #320]	; (800109c <takeWifiSSID+0x294>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d14a      	bne.n	8000ff6 <takeWifiSSID+0x1ee>
            	if(page == 1) {
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <takeWifiSSID+0x298>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d10a      	bne.n	8000f7e <takeWifiSSID+0x176>
            		cursorPosition = 16;
 8000f68:	4b4c      	ldr	r3, [pc, #304]	; (800109c <takeWifiSSID+0x294>)
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <takeWifiSSID+0x298>)
 8000f70:	2205      	movs	r2, #5
 8000f72:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000f74:	2105      	movs	r1, #5
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff fc1a 	bl	80007b0 <printTemplate>
 8000f7c:	e040      	b.n	8001000 <takeWifiSSID+0x1f8>
            	} else if(page == 2) {
 8000f7e:	4b48      	ldr	r3, [pc, #288]	; (80010a0 <takeWifiSSID+0x298>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d10a      	bne.n	8000f9c <takeWifiSSID+0x194>
            		cursorPosition = 16;
 8000f86:	4b45      	ldr	r3, [pc, #276]	; (800109c <takeWifiSSID+0x294>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f8c:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <takeWifiSSID+0x298>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f92:	2101      	movs	r1, #1
 8000f94:	2002      	movs	r0, #2
 8000f96:	f7ff fc0b 	bl	80007b0 <printTemplate>
 8000f9a:	e031      	b.n	8001000 <takeWifiSSID+0x1f8>
            	} else if(page == 3) {
 8000f9c:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <takeWifiSSID+0x298>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d10a      	bne.n	8000fba <takeWifiSSID+0x1b2>
            		cursorPosition = 16;
 8000fa4:	4b3d      	ldr	r3, [pc, #244]	; (800109c <takeWifiSSID+0x294>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <takeWifiSSID+0x298>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f7ff fbfc 	bl	80007b0 <printTemplate>
 8000fb8:	e022      	b.n	8001000 <takeWifiSSID+0x1f8>
            	} else if(page == 4) {
 8000fba:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <takeWifiSSID+0x298>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d10a      	bne.n	8000fd8 <takeWifiSSID+0x1d0>
            		cursorPosition = 16;
 8000fc2:	4b36      	ldr	r3, [pc, #216]	; (800109c <takeWifiSSID+0x294>)
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <takeWifiSSID+0x298>)
 8000fca:	2203      	movs	r2, #3
 8000fcc:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000fce:	2103      	movs	r1, #3
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f7ff fbed 	bl	80007b0 <printTemplate>
 8000fd6:	e013      	b.n	8001000 <takeWifiSSID+0x1f8>
            	} else if(page == 5) {
 8000fd8:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <takeWifiSSID+0x298>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d10f      	bne.n	8001000 <takeWifiSSID+0x1f8>
            		cursorPosition = 16;
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <takeWifiSSID+0x294>)
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <takeWifiSSID+0x298>)
 8000fe8:	2204      	movs	r2, #4
 8000fea:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000fec:	2104      	movs	r1, #4
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff fbde 	bl	80007b0 <printTemplate>
 8000ff4:	e004      	b.n	8001000 <takeWifiSSID+0x1f8>
            	}
            } else {
            	cursorPosition--;
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <takeWifiSSID+0x294>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <takeWifiSSID+0x294>)
 8000ffe:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001000:	20fa      	movs	r0, #250	; 0xfa
 8001002:	f008 f839 	bl	8009078 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001006:	2102      	movs	r1, #2
 8001008:	4826      	ldr	r0, [pc, #152]	; (80010a4 <takeWifiSSID+0x29c>)
 800100a:	f008 fe05 	bl	8009c18 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d11e      	bne.n	8001052 <takeWifiSSID+0x24a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3b01      	subs	r3, #1
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fdc1 	bl	8000ba0 <getCharFromCursorPosition>
 800101e:	4603      	mov	r3, r0
 8001020:	4619      	mov	r1, r3
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <takeWifiSSID+0x290>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4413      	add	r3, r2
 8001028:	460a      	mov	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	b2d9      	uxtb	r1, r3
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <takeWifiSSID+0x290>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff fb29 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3301      	adds	r3, #1
 800104a:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800104c:	20fa      	movs	r0, #250	; 0xfa
 800104e:	f008 f813 	bl	8009078 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001052:	2104      	movs	r1, #4
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <takeWifiSSID+0x29c>)
 8001056:	f008 fddf 	bl	8009c18 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d139      	bne.n	80010d4 <takeWifiSSID+0x2cc>
        	if(strlen(wifiSSID) >= 1) {
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <takeWifiSSID+0x290>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d032      	beq.n	80010ce <takeWifiSSID+0x2c6>
        		wifiSSID[wifiNameLoc] = '\0';
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <takeWifiSSID+0x290>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4413      	add	r3, r2
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	3306      	adds	r3, #6
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff fb29 	bl	80006d4 <lcd_delete_char>
        		HAL_Delay(50);
 8001082:	2032      	movs	r0, #50	; 0x32
 8001084:	f007 fff8 	bl	8009078 <HAL_Delay>
        		if(writeLoc > 7) {
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b07      	cmp	r3, #7
 800108c:	dd0e      	ble.n	80010ac <takeWifiSSID+0x2a4>
        			writeLoc--;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3b01      	subs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e00f      	b.n	80010b6 <takeWifiSSID+0x2ae>
 8001096:	bf00      	nop
 8001098:	20000c00 	.word	0x20000c00
 800109c:	20000944 	.word	0x20000944
 80010a0:	20000948 	.word	0x20000948
 80010a4:	40010800 	.word	0x40010800
 80010a8:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	dc01      	bgt.n	80010b6 <takeWifiSSID+0x2ae>
        			writeLoc = 7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dd03      	ble.n	80010c4 <takeWifiSSID+0x2bc>
        			wifiNameLoc--;
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3b01      	subs	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e004      	b.n	80010ce <takeWifiSSID+0x2c6>
        		} else if(wifiNameLoc < 0) {
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	da01      	bge.n	80010ce <takeWifiSSID+0x2c6>
        			wifiNameLoc = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80010ce:	20fa      	movs	r0, #250	; 0xfa
 80010d0:	f007 ffd2 	bl	8009078 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <takeWifiSSID+0x2e4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	2002      	movs	r0, #2
 80010de:	f7ff faa4 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010e2:	e6b1      	b.n	8000e48 <takeWifiSSID+0x40>
    }
}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000944 	.word	0x20000944

080010f0 <takeWifiPass>:

void takeWifiPass(int state, I2C_HandleTypeDef *hi2c1) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff fb12 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d104      	bne.n	8001110 <takeWifiPass+0x20>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001106:	2221      	movs	r2, #33	; 0x21
 8001108:	2100      	movs	r1, #0
 800110a:	489d      	ldr	r0, [pc, #628]	; (8001380 <takeWifiPass+0x290>)
 800110c:	f00b fec8 	bl	800cea0 <memset>
    }

    int realCharPos = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8001114:	4b9b      	ldr	r3, [pc, #620]	; (8001384 <takeWifiPass+0x294>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
    page = 1;
 800111a:	4b9b      	ldr	r3, [pc, #620]	; (8001388 <takeWifiPass+0x298>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001124:	2307      	movs	r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 8001128:	2101      	movs	r1, #1
 800112a:	2003      	movs	r0, #3
 800112c:	f7ff fb40 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001130:	2108      	movs	r1, #8
 8001132:	4896      	ldr	r0, [pc, #600]	; (800138c <takeWifiPass+0x29c>)
 8001134:	f008 fd70 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d103      	bne.n	8001146 <takeWifiPass+0x56>
            lcd_cursor(0);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff faf0 	bl	8000724 <lcd_cursor>

            break;
 8001144:	e142      	b.n	80013cc <takeWifiPass+0x2dc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001146:	2101      	movs	r1, #1
 8001148:	4890      	ldr	r0, [pc, #576]	; (800138c <takeWifiPass+0x29c>)
 800114a:	f008 fd65 	bl	8009c18 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d166      	bne.n	8001222 <takeWifiPass+0x132>
        	realCharPos++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b50      	cmp	r3, #80	; 0x50
 800115e:	dd01      	ble.n	8001164 <takeWifiPass+0x74>
        	    realCharPos = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8001164:	4b87      	ldr	r3, [pc, #540]	; (8001384 <takeWifiPass+0x294>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b10      	cmp	r3, #16
 800116a:	d152      	bne.n	8001212 <takeWifiPass+0x122>
            	if(page == 1) {
 800116c:	4b86      	ldr	r3, [pc, #536]	; (8001388 <takeWifiPass+0x298>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10c      	bne.n	800118e <takeWifiPass+0x9e>
            		cursorPosition = 1;
 8001174:	4b83      	ldr	r3, [pc, #524]	; (8001384 <takeWifiPass+0x294>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
            		page++;
 800117a:	4b83      	ldr	r3, [pc, #524]	; (8001388 <takeWifiPass+0x298>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a81      	ldr	r2, [pc, #516]	; (8001388 <takeWifiPass+0x298>)
 8001182:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001184:	2102      	movs	r1, #2
 8001186:	2003      	movs	r0, #3
 8001188:	f7ff fb12 	bl	80007b0 <printTemplate>
 800118c:	e046      	b.n	800121c <takeWifiPass+0x12c>
            	} else if(page == 2) {
 800118e:	4b7e      	ldr	r3, [pc, #504]	; (8001388 <takeWifiPass+0x298>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d10c      	bne.n	80011b0 <takeWifiPass+0xc0>
            		cursorPosition = 1;
 8001196:	4b7b      	ldr	r3, [pc, #492]	; (8001384 <takeWifiPass+0x294>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
            		page++;
 800119c:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <takeWifiPass+0x298>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a79      	ldr	r2, [pc, #484]	; (8001388 <takeWifiPass+0x298>)
 80011a4:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80011a6:	2103      	movs	r1, #3
 80011a8:	2003      	movs	r0, #3
 80011aa:	f7ff fb01 	bl	80007b0 <printTemplate>
 80011ae:	e035      	b.n	800121c <takeWifiPass+0x12c>
            	} else if(page == 3) {
 80011b0:	4b75      	ldr	r3, [pc, #468]	; (8001388 <takeWifiPass+0x298>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d10c      	bne.n	80011d2 <takeWifiPass+0xe2>
            		cursorPosition = 1;
 80011b8:	4b72      	ldr	r3, [pc, #456]	; (8001384 <takeWifiPass+0x294>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
            		page++;
 80011be:	4b72      	ldr	r3, [pc, #456]	; (8001388 <takeWifiPass+0x298>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a70      	ldr	r2, [pc, #448]	; (8001388 <takeWifiPass+0x298>)
 80011c6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80011c8:	2104      	movs	r1, #4
 80011ca:	2003      	movs	r0, #3
 80011cc:	f7ff faf0 	bl	80007b0 <printTemplate>
 80011d0:	e024      	b.n	800121c <takeWifiPass+0x12c>
            	} else if(page == 4) {
 80011d2:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <takeWifiPass+0x298>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d10c      	bne.n	80011f4 <takeWifiPass+0x104>
            		cursorPosition = 1;
 80011da:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <takeWifiPass+0x294>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]
            		page++;
 80011e0:	4b69      	ldr	r3, [pc, #420]	; (8001388 <takeWifiPass+0x298>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a68      	ldr	r2, [pc, #416]	; (8001388 <takeWifiPass+0x298>)
 80011e8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80011ea:	2105      	movs	r1, #5
 80011ec:	2003      	movs	r0, #3
 80011ee:	f7ff fadf 	bl	80007b0 <printTemplate>
 80011f2:	e013      	b.n	800121c <takeWifiPass+0x12c>
            	} else if(page == 5) {
 80011f4:	4b64      	ldr	r3, [pc, #400]	; (8001388 <takeWifiPass+0x298>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d10f      	bne.n	800121c <takeWifiPass+0x12c>
            		cursorPosition = 1;
 80011fc:	4b61      	ldr	r3, [pc, #388]	; (8001384 <takeWifiPass+0x294>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001202:	4b61      	ldr	r3, [pc, #388]	; (8001388 <takeWifiPass+0x298>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001208:	2101      	movs	r1, #1
 800120a:	2003      	movs	r0, #3
 800120c:	f7ff fad0 	bl	80007b0 <printTemplate>
 8001210:	e004      	b.n	800121c <takeWifiPass+0x12c>
            	}
            } else {
            	cursorPosition++;
 8001212:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <takeWifiPass+0x294>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <takeWifiPass+0x294>)
 800121a:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800121c:	20fa      	movs	r0, #250	; 0xfa
 800121e:	f007 ff2b 	bl	8009078 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001222:	2108      	movs	r1, #8
 8001224:	485a      	ldr	r0, [pc, #360]	; (8001390 <takeWifiPass+0x2a0>)
 8001226:	f008 fcf7 	bl	8009c18 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d15e      	bne.n	80012ee <takeWifiPass+0x1fe>
        	realCharPos--;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3b01      	subs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b00      	cmp	r3, #0
 800123a:	dc01      	bgt.n	8001240 <takeWifiPass+0x150>
        	    realCharPos = 80;
 800123c:	2350      	movs	r3, #80	; 0x50
 800123e:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001240:	4b50      	ldr	r3, [pc, #320]	; (8001384 <takeWifiPass+0x294>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d14a      	bne.n	80012de <takeWifiPass+0x1ee>
            	if(page == 1) {
 8001248:	4b4f      	ldr	r3, [pc, #316]	; (8001388 <takeWifiPass+0x298>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d10a      	bne.n	8001266 <takeWifiPass+0x176>
            		cursorPosition = 16;
 8001250:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <takeWifiPass+0x294>)
 8001252:	2210      	movs	r2, #16
 8001254:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001256:	4b4c      	ldr	r3, [pc, #304]	; (8001388 <takeWifiPass+0x298>)
 8001258:	2205      	movs	r2, #5
 800125a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800125c:	2105      	movs	r1, #5
 800125e:	2003      	movs	r0, #3
 8001260:	f7ff faa6 	bl	80007b0 <printTemplate>
 8001264:	e040      	b.n	80012e8 <takeWifiPass+0x1f8>
            	} else if(page == 2) {
 8001266:	4b48      	ldr	r3, [pc, #288]	; (8001388 <takeWifiPass+0x298>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d10a      	bne.n	8001284 <takeWifiPass+0x194>
            		cursorPosition = 16;
 800126e:	4b45      	ldr	r3, [pc, #276]	; (8001384 <takeWifiPass+0x294>)
 8001270:	2210      	movs	r2, #16
 8001272:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001274:	4b44      	ldr	r3, [pc, #272]	; (8001388 <takeWifiPass+0x298>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800127a:	2101      	movs	r1, #1
 800127c:	2003      	movs	r0, #3
 800127e:	f7ff fa97 	bl	80007b0 <printTemplate>
 8001282:	e031      	b.n	80012e8 <takeWifiPass+0x1f8>
            	} else if(page == 3) {
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <takeWifiPass+0x298>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d10a      	bne.n	80012a2 <takeWifiPass+0x1b2>
            		cursorPosition = 16;
 800128c:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <takeWifiPass+0x294>)
 800128e:	2210      	movs	r2, #16
 8001290:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <takeWifiPass+0x298>)
 8001294:	2202      	movs	r2, #2
 8001296:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001298:	2102      	movs	r1, #2
 800129a:	2003      	movs	r0, #3
 800129c:	f7ff fa88 	bl	80007b0 <printTemplate>
 80012a0:	e022      	b.n	80012e8 <takeWifiPass+0x1f8>
            	} else if(page == 4) {
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <takeWifiPass+0x298>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d10a      	bne.n	80012c0 <takeWifiPass+0x1d0>
            		cursorPosition = 16;
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <takeWifiPass+0x294>)
 80012ac:	2210      	movs	r2, #16
 80012ae:	601a      	str	r2, [r3, #0]
            		page = 3;
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <takeWifiPass+0x298>)
 80012b2:	2203      	movs	r2, #3
 80012b4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80012b6:	2103      	movs	r1, #3
 80012b8:	2003      	movs	r0, #3
 80012ba:	f7ff fa79 	bl	80007b0 <printTemplate>
 80012be:	e013      	b.n	80012e8 <takeWifiPass+0x1f8>
            	} else if(page == 5) {
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <takeWifiPass+0x298>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d10f      	bne.n	80012e8 <takeWifiPass+0x1f8>
            		cursorPosition = 16;
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <takeWifiPass+0x294>)
 80012ca:	2210      	movs	r2, #16
 80012cc:	601a      	str	r2, [r3, #0]
            		page = 4;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <takeWifiPass+0x298>)
 80012d0:	2204      	movs	r2, #4
 80012d2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80012d4:	2104      	movs	r1, #4
 80012d6:	2003      	movs	r0, #3
 80012d8:	f7ff fa6a 	bl	80007b0 <printTemplate>
 80012dc:	e004      	b.n	80012e8 <takeWifiPass+0x1f8>
            	}
            } else {
            	cursorPosition--;
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <takeWifiPass+0x294>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a27      	ldr	r2, [pc, #156]	; (8001384 <takeWifiPass+0x294>)
 80012e6:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80012e8:	20fa      	movs	r0, #250	; 0xfa
 80012ea:	f007 fec5 	bl	8009078 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80012ee:	2102      	movs	r1, #2
 80012f0:	4826      	ldr	r0, [pc, #152]	; (800138c <takeWifiPass+0x29c>)
 80012f2:	f008 fc91 	bl	8009c18 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d11e      	bne.n	800133a <takeWifiPass+0x24a>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3b01      	subs	r3, #1
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fc4d 	bl	8000ba0 <getCharFromCursorPosition>
 8001306:	4603      	mov	r3, r0
 8001308:	4619      	mov	r1, r3
 800130a:	4a1d      	ldr	r2, [pc, #116]	; (8001380 <takeWifiPass+0x290>)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	b2d9      	uxtb	r1, r3
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <takeWifiPass+0x290>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff f9b5 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3301      	adds	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3301      	adds	r3, #1
 8001332:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001334:	20fa      	movs	r0, #250	; 0xfa
 8001336:	f007 fe9f 	bl	8009078 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800133a:	2104      	movs	r1, #4
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <takeWifiPass+0x29c>)
 800133e:	f008 fc6b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d139      	bne.n	80013bc <takeWifiPass+0x2cc>
            if(strlen(wifiPass) >= 1) {
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <takeWifiPass+0x290>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d032      	beq.n	80013b6 <takeWifiPass+0x2c6>
            	wifiPass[wifiPassLoc] = '\0';
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <takeWifiPass+0x290>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4413      	add	r3, r2
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3306      	adds	r3, #6
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4619      	mov	r1, r3
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff f9b5 	bl	80006d4 <lcd_delete_char>
            	HAL_Delay(50);
 800136a:	2032      	movs	r0, #50	; 0x32
 800136c:	f007 fe84 	bl	8009078 <HAL_Delay>

            	if(writeLoc > 7) {
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b07      	cmp	r3, #7
 8001374:	dd0e      	ble.n	8001394 <takeWifiPass+0x2a4>
            		writeLoc--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3b01      	subs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e00f      	b.n	800139e <takeWifiPass+0x2ae>
 800137e:	bf00      	nop
 8001380:	20000c24 	.word	0x20000c24
 8001384:	20000944 	.word	0x20000944
 8001388:	20000948 	.word	0x20000948
 800138c:	40010800 	.word	0x40010800
 8001390:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b06      	cmp	r3, #6
 8001398:	dc01      	bgt.n	800139e <takeWifiPass+0x2ae>
            		writeLoc = 7;
 800139a:	2307      	movs	r3, #7
 800139c:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd03      	ble.n	80013ac <takeWifiPass+0x2bc>
            		wifiPassLoc--;
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	e004      	b.n	80013b6 <takeWifiPass+0x2c6>
            	} else if(wifiPassLoc < 0) {
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da01      	bge.n	80013b6 <takeWifiPass+0x2c6>
            		wifiPassLoc = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80013b6:	20fa      	movs	r0, #250	; 0xfa
 80013b8:	f007 fe5e 	bl	8009078 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <takeWifiPass+0x2e4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	2002      	movs	r0, #2
 80013c6:	f7ff f930 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80013ca:	e6b1      	b.n	8001130 <takeWifiPass+0x40>
    }
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000944 	.word	0x20000944

080013d8 <slideText>:

void slideText(const char* text, int startPos, int startLine) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	uint8_t uzunluk = strlen(text);
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7fe ff1d 	bl	8000224 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	74fb      	strb	r3, [r7, #19]

	while(1) {
		for(int z=0; z < uzunluk; z++) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e041      	b.n	8001478 <slideText+0xa0>

			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	e017      	b.n	800142e <slideText+0x56>
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	b2d8      	uxtb	r0, r3
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	b2d9      	uxtb	r1, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	f7ff f938 	bl	8000692 <lcd_print_char>
				HAL_Delay(7);
 8001422:	2007      	movs	r0, #7
 8001424:	f007 fe28 	bl	8009078 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	3301      	adds	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	7cfa      	ldrb	r2, [r7, #19]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4413      	add	r3, r2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbe1      	blt.n	80013fe <slideText+0x26>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800143a:	7cfb      	ldrb	r3, [r7, #19]
 800143c:	3b01      	subs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e011      	b.n	8001466 <slideText+0x8e>
			     if(j >= startPos) {
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	429a      	cmp	r2, r3
 8001448:	db0a      	blt.n	8001460 <slideText+0x88>
			    	 lcd_print_char(startLine, j, ' ');
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	b2d1      	uxtb	r1, r2
 8001452:	2220      	movs	r2, #32
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f91c 	bl	8000692 <lcd_print_char>
			    	 HAL_Delay(7);
 800145a:	2007      	movs	r0, #7
 800145c:	f007 fe0c 	bl	8009078 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3b01      	subs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	7cfa      	ldrb	r2, [r7, #19]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	429a      	cmp	r2, r3
 8001470:	dae7      	bge.n	8001442 <slideText+0x6a>
		for(int z=0; z < uzunluk; z++) {
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	7cfb      	ldrb	r3, [r7, #19]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbb9      	blt.n	80013f4 <slideText+0x1c>
 8001480:	e7b5      	b.n	80013ee <slideText+0x16>
	...

08001484 <menu>:
			}
		}
	}
}

void menu(I2C_HandleTypeDef *hi2c1) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800148c:	2101      	movs	r1, #1
 800148e:	488f      	ldr	r0, [pc, #572]	; (80016cc <menu+0x248>)
 8001490:	f008 fbc2 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	f040 808e 	bne.w	80015b8 <menu+0x134>
 800149c:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <menu+0x24c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	f083 0301 	eor.w	r3, r3, #1
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8086 	beq.w	80015b8 <menu+0x134>
		menuSayac = menuSayac+1;
 80014ac:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <menu+0x250>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b87      	ldr	r3, [pc, #540]	; (80016d4 <menu+0x250>)
 80014b6:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80014b8:	4b86      	ldr	r3, [pc, #536]	; (80016d4 <menu+0x250>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b24      	cmp	r3, #36	; 0x24
 80014be:	d102      	bne.n	80014c6 <menu+0x42>
			menuSayac = 1;
 80014c0:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <menu+0x250>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80014c6:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <menu+0x250>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	d106      	bne.n	80014dc <menu+0x58>
 80014ce:	4b82      	ldr	r3, [pc, #520]	; (80016d8 <menu+0x254>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <menu+0x58>
			menuSayac = 21;
 80014d6:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <menu+0x250>)
 80014d8:	2215      	movs	r2, #21
 80014da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80014dc:	4b7d      	ldr	r3, [pc, #500]	; (80016d4 <menu+0x250>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d106      	bne.n	80014f2 <menu+0x6e>
 80014e4:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <menu+0x258>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <menu+0x6e>
			menuSayac = 16;
 80014ec:	4b79      	ldr	r3, [pc, #484]	; (80016d4 <menu+0x250>)
 80014ee:	2210      	movs	r2, #16
 80014f0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014f2:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <menu+0x250>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b0d      	cmp	r3, #13
 80014f8:	d106      	bne.n	8001508 <menu+0x84>
 80014fa:	4b78      	ldr	r3, [pc, #480]	; (80016dc <menu+0x258>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d102      	bne.n	8001508 <menu+0x84>
			menuSayac = 16;
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <menu+0x250>)
 8001504:	2210      	movs	r2, #16
 8001506:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001508:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <menu+0x250>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d106      	bne.n	800151e <menu+0x9a>
 8001510:	4b72      	ldr	r3, [pc, #456]	; (80016dc <menu+0x258>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d102      	bne.n	800151e <menu+0x9a>
			menuSayac = 13;
 8001518:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <menu+0x250>)
 800151a:	220d      	movs	r2, #13
 800151c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800151e:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <menu+0x250>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b0a      	cmp	r3, #10
 8001524:	d10a      	bne.n	800153c <menu+0xb8>
 8001526:	4b6e      	ldr	r3, [pc, #440]	; (80016e0 <menu+0x25c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d003      	beq.n	8001536 <menu+0xb2>
 800152e:	4b6c      	ldr	r3, [pc, #432]	; (80016e0 <menu+0x25c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d102      	bne.n	800153c <menu+0xb8>
			menuSayac = 11;
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <menu+0x250>)
 8001538:	220b      	movs	r2, #11
 800153a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800153c:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <menu+0x250>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d10e      	bne.n	8001562 <menu+0xde>
 8001544:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <menu+0x260>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d003      	beq.n	8001554 <menu+0xd0>
 800154c:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <menu+0x260>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d106      	bne.n	8001562 <menu+0xde>
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <menu+0x258>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d102      	bne.n	8001562 <menu+0xde>
			menuSayac = 16;
 800155c:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <menu+0x250>)
 800155e:	2210      	movs	r2, #16
 8001560:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <menu+0x250>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d10e      	bne.n	8001588 <menu+0x104>
 800156a:	4b5e      	ldr	r3, [pc, #376]	; (80016e4 <menu+0x260>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d003      	beq.n	800157a <menu+0xf6>
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <menu+0x260>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d106      	bne.n	8001588 <menu+0x104>
 800157a:	4b58      	ldr	r3, [pc, #352]	; (80016dc <menu+0x258>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d102      	bne.n	8001588 <menu+0x104>
			menuSayac = 13;
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <menu+0x250>)
 8001584:	220d      	movs	r2, #13
 8001586:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001588:	4b52      	ldr	r3, [pc, #328]	; (80016d4 <menu+0x250>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d106      	bne.n	800159e <menu+0x11a>
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <menu+0x264>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <menu+0x11a>
			menuSayac = 16;
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <menu+0x250>)
 800159a:	2210      	movs	r2, #16
 800159c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <menu+0x250>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b18      	cmp	r3, #24
 80015a4:	d106      	bne.n	80015b4 <menu+0x130>
 80015a6:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <menu+0x254>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <menu+0x130>
			menuSayac = 26;
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <menu+0x250>)
 80015b0:	221a      	movs	r2, #26
 80015b2:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015b4:	f004 fcf2 	bl	8005f9c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015b8:	2108      	movs	r1, #8
 80015ba:	484c      	ldr	r0, [pc, #304]	; (80016ec <menu+0x268>)
 80015bc:	f008 fb2c 	bl	8009c18 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d175      	bne.n	80016b2 <menu+0x22e>
 80015c6:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <menu+0x24c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d06e      	beq.n	80016b2 <menu+0x22e>
		if (menuSayac <= 1) {
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <menu+0x250>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d802      	bhi.n	80015e2 <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <menu+0x250>)
 80015de:	2224      	movs	r2, #36	; 0x24
 80015e0:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <menu+0x250>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <menu+0x250>)
 80015ec:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80015ee:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <menu+0x250>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b14      	cmp	r3, #20
 80015f4:	d106      	bne.n	8001604 <menu+0x180>
 80015f6:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <menu+0x254>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <menu+0x180>
			menuSayac = 17;
 80015fe:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <menu+0x250>)
 8001600:	2211      	movs	r2, #17
 8001602:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <menu+0x250>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d106      	bne.n	800161a <menu+0x196>
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <menu+0x258>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <menu+0x196>
			menuSayac = 7;
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <menu+0x250>)
 8001616:	2207      	movs	r2, #7
 8001618:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <menu+0x250>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d106      	bne.n	8001630 <menu+0x1ac>
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <menu+0x258>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d102      	bne.n	8001630 <menu+0x1ac>
			menuSayac = 12;
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <menu+0x250>)
 800162c:	220c      	movs	r2, #12
 800162e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <menu+0x250>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d106      	bne.n	8001646 <menu+0x1c2>
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <menu+0x258>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d102      	bne.n	8001646 <menu+0x1c2>
			menuSayac = 8;
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <menu+0x250>)
 8001642:	2208      	movs	r2, #8
 8001644:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <menu+0x250>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d10a      	bne.n	8001664 <menu+0x1e0>
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <menu+0x25c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d003      	beq.n	800165e <menu+0x1da>
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <menu+0x25c>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d102      	bne.n	8001664 <menu+0x1e0>
			menuSayac = 9;
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <menu+0x250>)
 8001660:	2209      	movs	r2, #9
 8001662:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <menu+0x250>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d10a      	bne.n	8001682 <menu+0x1fe>
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <menu+0x260>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d003      	beq.n	800167c <menu+0x1f8>
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <menu+0x260>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d102      	bne.n	8001682 <menu+0x1fe>
			menuSayac = 11;
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <menu+0x250>)
 800167e:	220b      	movs	r2, #11
 8001680:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <menu+0x250>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d106      	bne.n	8001698 <menu+0x214>
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <menu+0x264>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <menu+0x214>
			menuSayac = 14;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <menu+0x250>)
 8001694:	220e      	movs	r2, #14
 8001696:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <menu+0x250>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b19      	cmp	r3, #25
 800169e:	d106      	bne.n	80016ae <menu+0x22a>
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <menu+0x254>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <menu+0x22a>
			menuSayac = 23;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <menu+0x250>)
 80016aa:	2217      	movs	r2, #23
 80016ac:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016ae:	f004 fc75 	bl	8005f9c <bekle>
	}

	if (menuSayac == 0) {
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <menu+0x250>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d134      	bne.n	8001724 <menu+0x2a0>
		if(dilSecim == 0) {
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <menu+0x26c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d122      	bne.n	8001708 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <menu+0x270>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	2001      	movs	r0, #1
 80016c8:	e016      	b.n	80016f8 <menu+0x274>
 80016ca:	bf00      	nop
 80016cc:	40010800 	.word	0x40010800
 80016d0:	20000c78 	.word	0x20000c78
 80016d4:	20000c49 	.word	0x20000c49
 80016d8:	20000c58 	.word	0x20000c58
 80016dc:	20000c51 	.word	0x20000c51
 80016e0:	20000c52 	.word	0x20000c52
 80016e4:	20000c53 	.word	0x20000c53
 80016e8:	20000c54 	.word	0x20000c54
 80016ec:	40011000 	.word	0x40011000
 80016f0:	20000c6a 	.word	0x20000c6a
 80016f4:	0800d8d0 	.word	0x0800d8d0
 80016f8:	f7fe ffb6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80016fc:	4a94      	ldr	r2, [pc, #592]	; (8001950 <menu+0x4cc>)
 80016fe:	2101      	movs	r1, #1
 8001700:	2002      	movs	r0, #2
 8001702:	f7fe ffb1 	bl	8000668 <lcd_print>
 8001706:	e00d      	b.n	8001724 <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 8001708:	4b92      	ldr	r3, [pc, #584]	; (8001954 <menu+0x4d0>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d109      	bne.n	8001724 <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001710:	4a91      	ldr	r2, [pc, #580]	; (8001958 <menu+0x4d4>)
 8001712:	2101      	movs	r1, #1
 8001714:	2001      	movs	r0, #1
 8001716:	f7fe ffa7 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800171a:	4a90      	ldr	r2, [pc, #576]	; (800195c <menu+0x4d8>)
 800171c:	2101      	movs	r1, #1
 800171e:	2002      	movs	r0, #2
 8001720:	f7fe ffa2 	bl	8000668 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001724:	4b8e      	ldr	r3, [pc, #568]	; (8001960 <menu+0x4dc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	f040 82b5 	bne.w	8001c98 <menu+0x814>
		if(dilSecim == 0) {
 800172e:	4b89      	ldr	r3, [pc, #548]	; (8001954 <menu+0x4d0>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001736:	4a8b      	ldr	r2, [pc, #556]	; (8001964 <menu+0x4e0>)
 8001738:	2101      	movs	r1, #1
 800173a:	2001      	movs	r0, #1
 800173c:	f7fe ff94 	bl	8000668 <lcd_print>
 8001740:	e008      	b.n	8001754 <menu+0x2d0>
		} else if(dilSecim == 1) {
 8001742:	4b84      	ldr	r3, [pc, #528]	; (8001954 <menu+0x4d0>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d104      	bne.n	8001754 <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800174a:	4a87      	ldr	r2, [pc, #540]	; (8001968 <menu+0x4e4>)
 800174c:	2101      	movs	r1, #1
 800174e:	2001      	movs	r0, #1
 8001750:	f7fe ff8a 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001754:	4b85      	ldr	r3, [pc, #532]	; (800196c <menu+0x4e8>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d123      	bne.n	80017a4 <menu+0x320>
			if(dilSecim == 0) {
 800175c:	4b7d      	ldr	r3, [pc, #500]	; (8001954 <menu+0x4d0>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001764:	4a82      	ldr	r2, [pc, #520]	; (8001970 <menu+0x4ec>)
 8001766:	2101      	movs	r1, #1
 8001768:	2002      	movs	r0, #2
 800176a:	f7fe ff7d 	bl	8000668 <lcd_print>
 800176e:	e008      	b.n	8001782 <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001770:	4b78      	ldr	r3, [pc, #480]	; (8001954 <menu+0x4d0>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d104      	bne.n	8001782 <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 8001778:	4a7e      	ldr	r2, [pc, #504]	; (8001974 <menu+0x4f0>)
 800177a:	2101      	movs	r1, #1
 800177c:	2002      	movs	r0, #2
 800177e:	f7fe ff73 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001782:	4a7d      	ldr	r2, [pc, #500]	; (8001978 <menu+0x4f4>)
 8001784:	210f      	movs	r1, #15
 8001786:	2002      	movs	r0, #2
 8001788:	f7fe ff6e 	bl	8000668 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800178c:	4b7b      	ldr	r3, [pc, #492]	; (800197c <menu+0x4f8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	220a      	movs	r2, #10
 8001792:	497b      	ldr	r1, [pc, #492]	; (8001980 <menu+0x4fc>)
 8001794:	4618      	mov	r0, r3
 8001796:	f00b fa6b 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 800179a:	4a79      	ldr	r2, [pc, #484]	; (8001980 <menu+0x4fc>)
 800179c:	210e      	movs	r1, #14
 800179e:	2002      	movs	r0, #2
 80017a0:	f7fe ff62 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80017a4:	4b71      	ldr	r3, [pc, #452]	; (800196c <menu+0x4e8>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d123      	bne.n	80017f4 <menu+0x370>
			if(dilSecim == 0) {
 80017ac:	4b69      	ldr	r3, [pc, #420]	; (8001954 <menu+0x4d0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80017b4:	4a73      	ldr	r2, [pc, #460]	; (8001984 <menu+0x500>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7fe ff55 	bl	8000668 <lcd_print>
 80017be:	e008      	b.n	80017d2 <menu+0x34e>
			} else if(dilSecim == 1) {
 80017c0:	4b64      	ldr	r3, [pc, #400]	; (8001954 <menu+0x4d0>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d104      	bne.n	80017d2 <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 80017c8:	4a6f      	ldr	r2, [pc, #444]	; (8001988 <menu+0x504>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7fe ff4b 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017d2:	4a6e      	ldr	r2, [pc, #440]	; (800198c <menu+0x508>)
 80017d4:	210f      	movs	r1, #15
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7fe ff46 	bl	8000668 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80017dc:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <menu+0x50c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	220a      	movs	r2, #10
 80017e2:	4967      	ldr	r1, [pc, #412]	; (8001980 <menu+0x4fc>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00b fa43 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 80017ea:	4a65      	ldr	r2, [pc, #404]	; (8001980 <menu+0x4fc>)
 80017ec:	210e      	movs	r1, #14
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7fe ff3a 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80017f4:	4b5d      	ldr	r3, [pc, #372]	; (800196c <menu+0x4e8>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d123      	bne.n	8001844 <menu+0x3c0>
			if(dilSecim == 0) {
 80017fc:	4b55      	ldr	r3, [pc, #340]	; (8001954 <menu+0x4d0>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001804:	4a63      	ldr	r2, [pc, #396]	; (8001994 <menu+0x510>)
 8001806:	2101      	movs	r1, #1
 8001808:	2002      	movs	r0, #2
 800180a:	f7fe ff2d 	bl	8000668 <lcd_print>
 800180e:	e008      	b.n	8001822 <menu+0x39e>
			} else if(dilSecim == 1) {
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <menu+0x4d0>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d104      	bne.n	8001822 <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8001818:	4a5f      	ldr	r2, [pc, #380]	; (8001998 <menu+0x514>)
 800181a:	2101      	movs	r1, #1
 800181c:	2002      	movs	r0, #2
 800181e:	f7fe ff23 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001822:	4a5a      	ldr	r2, [pc, #360]	; (800198c <menu+0x508>)
 8001824:	210f      	movs	r1, #15
 8001826:	2002      	movs	r0, #2
 8001828:	f7fe ff1e 	bl	8000668 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800182c:	4b5b      	ldr	r3, [pc, #364]	; (800199c <menu+0x518>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	220a      	movs	r2, #10
 8001832:	4953      	ldr	r1, [pc, #332]	; (8001980 <menu+0x4fc>)
 8001834:	4618      	mov	r0, r3
 8001836:	f00b fa1b 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 800183a:	4a51      	ldr	r2, [pc, #324]	; (8001980 <menu+0x4fc>)
 800183c:	210e      	movs	r1, #14
 800183e:	2002      	movs	r0, #2
 8001840:	f7fe ff12 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001844:	4b49      	ldr	r3, [pc, #292]	; (800196c <menu+0x4e8>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d123      	bne.n	8001894 <menu+0x410>
			if(dilSecim == 0) {
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <menu+0x4d0>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <menu+0x51c>)
 8001856:	2101      	movs	r1, #1
 8001858:	2002      	movs	r0, #2
 800185a:	f7fe ff05 	bl	8000668 <lcd_print>
 800185e:	e008      	b.n	8001872 <menu+0x3ee>
			} else if(dilSecim == 1) {
 8001860:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <menu+0x4d0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d104      	bne.n	8001872 <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 8001868:	4a4e      	ldr	r2, [pc, #312]	; (80019a4 <menu+0x520>)
 800186a:	2101      	movs	r1, #1
 800186c:	2002      	movs	r0, #2
 800186e:	f7fe fefb 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001872:	4a46      	ldr	r2, [pc, #280]	; (800198c <menu+0x508>)
 8001874:	210f      	movs	r1, #15
 8001876:	2002      	movs	r0, #2
 8001878:	f7fe fef6 	bl	8000668 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800187c:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <menu+0x524>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	220a      	movs	r2, #10
 8001882:	493f      	ldr	r1, [pc, #252]	; (8001980 <menu+0x4fc>)
 8001884:	4618      	mov	r0, r3
 8001886:	f00b f9f3 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 800188a:	4a3d      	ldr	r2, [pc, #244]	; (8001980 <menu+0x4fc>)
 800188c:	210e      	movs	r1, #14
 800188e:	2002      	movs	r0, #2
 8001890:	f7fe feea 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <menu+0x4e8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d123      	bne.n	80018e4 <menu+0x460>
			if(dilSecim == 0) {
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <menu+0x4d0>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80018a4:	4a41      	ldr	r2, [pc, #260]	; (80019ac <menu+0x528>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	2002      	movs	r0, #2
 80018aa:	f7fe fedd 	bl	8000668 <lcd_print>
 80018ae:	e008      	b.n	80018c2 <menu+0x43e>
			} else if(dilSecim == 1) {
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <menu+0x4d0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d104      	bne.n	80018c2 <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 80018b8:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <menu+0x52c>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	2002      	movs	r0, #2
 80018be:	f7fe fed3 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018c2:	4a32      	ldr	r2, [pc, #200]	; (800198c <menu+0x508>)
 80018c4:	210f      	movs	r1, #15
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7fe fece 	bl	8000668 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80018cc:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <menu+0x530>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	220a      	movs	r2, #10
 80018d2:	492b      	ldr	r1, [pc, #172]	; (8001980 <menu+0x4fc>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00b f9cb 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 80018da:	4a29      	ldr	r2, [pc, #164]	; (8001980 <menu+0x4fc>)
 80018dc:	210e      	movs	r1, #14
 80018de:	2002      	movs	r0, #2
 80018e0:	f7fe fec2 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <menu+0x4e8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d123      	bne.n	8001934 <menu+0x4b0>
			if(dilSecim == 0) {
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <menu+0x4d0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80018f4:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <menu+0x534>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2002      	movs	r0, #2
 80018fa:	f7fe feb5 	bl	8000668 <lcd_print>
 80018fe:	e008      	b.n	8001912 <menu+0x48e>
			} else if(dilSecim == 1) {
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <menu+0x4d0>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d104      	bne.n	8001912 <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 8001908:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <menu+0x538>)
 800190a:	2101      	movs	r1, #1
 800190c:	2002      	movs	r0, #2
 800190e:	f7fe feab 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <menu+0x508>)
 8001914:	210f      	movs	r1, #15
 8001916:	2002      	movs	r0, #2
 8001918:	f7fe fea6 	bl	8000668 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <menu+0x53c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	220a      	movs	r2, #10
 8001922:	4917      	ldr	r1, [pc, #92]	; (8001980 <menu+0x4fc>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00b f9a3 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <menu+0x4fc>)
 800192c:	210e      	movs	r1, #14
 800192e:	2002      	movs	r0, #2
 8001930:	f7fe fe9a 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <menu+0x4e8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b06      	cmp	r3, #6
 800193a:	d15f      	bne.n	80019fc <menu+0x578>
			if(dilSecim == 0) {
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <menu+0x4d0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d141      	bne.n	80019c8 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <menu+0x540>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f7fe fe8d 	bl	8000668 <lcd_print>
 800194e:	e044      	b.n	80019da <menu+0x556>
 8001950:	0800d8e4 	.word	0x0800d8e4
 8001954:	20000c6a 	.word	0x20000c6a
 8001958:	0800d8f8 	.word	0x0800d8f8
 800195c:	0800d90c 	.word	0x0800d90c
 8001960:	20000c49 	.word	0x20000c49
 8001964:	0800d920 	.word	0x0800d920
 8001968:	0800d934 	.word	0x0800d934
 800196c:	20000c4b 	.word	0x20000c4b
 8001970:	0800d948 	.word	0x0800d948
 8001974:	0800d958 	.word	0x0800d958
 8001978:	0800d968 	.word	0x0800d968
 800197c:	20000c6b 	.word	0x20000c6b
 8001980:	20000bcc 	.word	0x20000bcc
 8001984:	0800d96c 	.word	0x0800d96c
 8001988:	0800d97c 	.word	0x0800d97c
 800198c:	0800d98c 	.word	0x0800d98c
 8001990:	20000c6c 	.word	0x20000c6c
 8001994:	0800d990 	.word	0x0800d990
 8001998:	0800d9a0 	.word	0x0800d9a0
 800199c:	20000c6d 	.word	0x20000c6d
 80019a0:	0800d9b0 	.word	0x0800d9b0
 80019a4:	0800d9c0 	.word	0x0800d9c0
 80019a8:	20000c6e 	.word	0x20000c6e
 80019ac:	0800d9d0 	.word	0x0800d9d0
 80019b0:	0800d9e0 	.word	0x0800d9e0
 80019b4:	20000c6f 	.word	0x20000c6f
 80019b8:	0800d9f0 	.word	0x0800d9f0
 80019bc:	0800da00 	.word	0x0800da00
 80019c0:	20000c70 	.word	0x20000c70
 80019c4:	0800da10 	.word	0x0800da10
			} else if(dilSecim == 1) {
 80019c8:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <menu+0x684>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d104      	bne.n	80019da <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 80019d0:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <menu+0x688>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	2002      	movs	r0, #2
 80019d6:	f7fe fe47 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019da:	4a4d      	ldr	r2, [pc, #308]	; (8001b10 <menu+0x68c>)
 80019dc:	210f      	movs	r1, #15
 80019de:	2002      	movs	r0, #2
 80019e0:	f7fe fe42 	bl	8000668 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80019e4:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <menu+0x690>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	220a      	movs	r2, #10
 80019ea:	494b      	ldr	r1, [pc, #300]	; (8001b18 <menu+0x694>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00b f93f 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 80019f2:	4a49      	ldr	r2, [pc, #292]	; (8001b18 <menu+0x694>)
 80019f4:	210e      	movs	r1, #14
 80019f6:	2002      	movs	r0, #2
 80019f8:	f7fe fe36 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <menu+0x698>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b07      	cmp	r3, #7
 8001a02:	d123      	bne.n	8001a4c <menu+0x5c8>
			if(dilSecim == 0) {
 8001a04:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <menu+0x684>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a0c:	4a44      	ldr	r2, [pc, #272]	; (8001b20 <menu+0x69c>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2002      	movs	r0, #2
 8001a12:	f7fe fe29 	bl	8000668 <lcd_print>
 8001a16:	e008      	b.n	8001a2a <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001a18:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <menu+0x684>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d104      	bne.n	8001a2a <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001a20:	4a40      	ldr	r2, [pc, #256]	; (8001b24 <menu+0x6a0>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	2002      	movs	r0, #2
 8001a26:	f7fe fe1f 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a2a:	4a39      	ldr	r2, [pc, #228]	; (8001b10 <menu+0x68c>)
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f7fe fe1a 	bl	8000668 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a34:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <menu+0x6a4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	220a      	movs	r2, #10
 8001a3a:	4937      	ldr	r1, [pc, #220]	; (8001b18 <menu+0x694>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00b f917 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 8001a42:	4a35      	ldr	r2, [pc, #212]	; (8001b18 <menu+0x694>)
 8001a44:	210e      	movs	r1, #14
 8001a46:	2002      	movs	r0, #2
 8001a48:	f7fe fe0e 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <menu+0x698>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d123      	bne.n	8001a9c <menu+0x618>
			if(dilSecim == 0) {
 8001a54:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <menu+0x684>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a5c:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <menu+0x6a8>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2002      	movs	r0, #2
 8001a62:	f7fe fe01 	bl	8000668 <lcd_print>
 8001a66:	e008      	b.n	8001a7a <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <menu+0x684>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d104      	bne.n	8001a7a <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001a70:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <menu+0x6ac>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7fe fdf7 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a7a:	4a25      	ldr	r2, [pc, #148]	; (8001b10 <menu+0x68c>)
 8001a7c:	210f      	movs	r1, #15
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7fe fdf2 	bl	8000668 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <menu+0x6b0>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	220a      	movs	r2, #10
 8001a8a:	4923      	ldr	r1, [pc, #140]	; (8001b18 <menu+0x694>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00b f8ef 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <menu+0x694>)
 8001a94:	210e      	movs	r1, #14
 8001a96:	2002      	movs	r0, #2
 8001a98:	f7fe fde6 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <menu+0x698>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	d123      	bne.n	8001aec <menu+0x668>
			if(dilSecim == 0) {
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <menu+0x684>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001aac:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <menu+0x6b4>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f7fe fdd9 	bl	8000668 <lcd_print>
 8001ab6:	e008      	b.n	8001aca <menu+0x646>
			} else if(dilSecim == 1) {
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <menu+0x684>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d104      	bne.n	8001aca <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <menu+0x6b8>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7fe fdcf 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001aca:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <menu+0x6bc>)
 8001acc:	2110      	movs	r1, #16
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f7fe fdca 	bl	8000668 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <menu+0x6c0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	220a      	movs	r2, #10
 8001ada:	490f      	ldr	r1, [pc, #60]	; (8001b18 <menu+0x694>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00b f8c7 	bl	800cc70 <itoa>
			lcd_print(2, 15, snum);
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <menu+0x694>)
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f7fe fdbe 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <menu+0x698>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b0a      	cmp	r3, #10
 8001af2:	d134      	bne.n	8001b5e <menu+0x6da>
			if(dilSecim == 0) {
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <menu+0x684>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d127      	bne.n	8001b4c <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <menu+0x6c4>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	2002      	movs	r0, #2
 8001b02:	f7fe fdb1 	bl	8000668 <lcd_print>
 8001b06:	e02a      	b.n	8001b5e <menu+0x6da>
 8001b08:	20000c6a 	.word	0x20000c6a
 8001b0c:	0800da20 	.word	0x0800da20
 8001b10:	0800d98c 	.word	0x0800d98c
 8001b14:	20000c71 	.word	0x20000c71
 8001b18:	20000bcc 	.word	0x20000bcc
 8001b1c:	20000c4b 	.word	0x20000c4b
 8001b20:	0800da30 	.word	0x0800da30
 8001b24:	0800da40 	.word	0x0800da40
 8001b28:	20000c72 	.word	0x20000c72
 8001b2c:	0800da50 	.word	0x0800da50
 8001b30:	0800da60 	.word	0x0800da60
 8001b34:	20000c73 	.word	0x20000c73
 8001b38:	0800da70 	.word	0x0800da70
 8001b3c:	0800da80 	.word	0x0800da80
 8001b40:	0800da90 	.word	0x0800da90
 8001b44:	20000c74 	.word	0x20000c74
 8001b48:	0800da94 	.word	0x0800da94
			} else if(dilSecim == 1) {
 8001b4c:	4b82      	ldr	r3, [pc, #520]	; (8001d58 <menu+0x8d4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d104      	bne.n	8001b5e <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001b54:	4a81      	ldr	r2, [pc, #516]	; (8001d5c <menu+0x8d8>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f7fe fd85 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b5e:	2102      	movs	r1, #2
 8001b60:	487f      	ldr	r0, [pc, #508]	; (8001d60 <menu+0x8dc>)
 8001b62:	f008 f859 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d119      	bne.n	8001ba0 <menu+0x71c>
 8001b6c:	4b7d      	ldr	r3, [pc, #500]	; (8001d64 <menu+0x8e0>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d012      	beq.n	8001ba0 <menu+0x71c>
 8001b7a:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <menu+0x8e4>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10e      	bne.n	8001ba0 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001b82:	4b7a      	ldr	r3, [pc, #488]	; (8001d6c <menu+0x8e8>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <menu+0x8e8>)
 8001b8c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001b8e:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <menu+0x8e8>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b0a      	cmp	r3, #10
 8001b94:	d902      	bls.n	8001b9c <menu+0x718>
				hataGostermeSirasi = 0;
 8001b96:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <menu+0x8e8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b9c:	f004 f9fe 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	486f      	ldr	r0, [pc, #444]	; (8001d60 <menu+0x8dc>)
 8001ba4:	f008 f838 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d119      	bne.n	8001be2 <menu+0x75e>
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <menu+0x8e0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d012      	beq.n	8001be2 <menu+0x75e>
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <menu+0x8e4>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10e      	bne.n	8001be2 <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001bc4:	4b69      	ldr	r3, [pc, #420]	; (8001d6c <menu+0x8e8>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b67      	ldr	r3, [pc, #412]	; (8001d6c <menu+0x8e8>)
 8001bce:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001bd0:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <menu+0x8e8>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b0b      	cmp	r3, #11
 8001bd6:	d902      	bls.n	8001bde <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8001bd8:	4b64      	ldr	r3, [pc, #400]	; (8001d6c <menu+0x8e8>)
 8001bda:	220a      	movs	r2, #10
 8001bdc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001bde:	f004 f9dd 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001be2:	2108      	movs	r1, #8
 8001be4:	485e      	ldr	r0, [pc, #376]	; (8001d60 <menu+0x8dc>)
 8001be6:	f008 f817 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d153      	bne.n	8001c98 <menu+0x814>
 8001bf0:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <menu+0x8e0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d04c      	beq.n	8001c98 <menu+0x814>
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <menu+0x8e8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b0a      	cmp	r3, #10
 8001c04:	d148      	bne.n	8001c98 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 8001c06:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <menu+0x8ec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <menu+0x8f0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <menu+0x8f4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <menu+0x8f0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001c22:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <menu+0x8f8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <menu+0x8f0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <menu+0x8fc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <menu+0x8f0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c3e:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <menu+0x900>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <menu+0x8f0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <menu+0x904>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <menu+0x8f0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c5a:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <menu+0x908>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <menu+0x8f0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c68:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <menu+0x90c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <menu+0x8f0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c76:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <menu+0x910>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <menu+0x8f0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c84:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <menu+0x914>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <menu+0x8f0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001c92:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <menu+0x918>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <menu+0x91c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	f040 80fc 	bne.w	8001e9a <menu+0xa16>
		if(dilSecim == 0) {
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <menu+0x8d4>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001caa:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <menu+0x920>)
 8001cac:	2101      	movs	r1, #1
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7fe fcda 	bl	8000668 <lcd_print>
 8001cb4:	e008      	b.n	8001cc8 <menu+0x844>
		} else if(dilSecim == 1) {
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <menu+0x8d4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d104      	bne.n	8001cc8 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001cbe:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <menu+0x924>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7fe fcd0 	bl	8000668 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <menu+0x8e4>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d003      	beq.n	8001cd8 <menu+0x854>
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <menu+0x8e4>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d112      	bne.n	8001cfe <menu+0x87a>
			if(dilSecim == 0) {
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <menu+0x8d4>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d105      	bne.n	8001cec <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001ce0:	4a32      	ldr	r2, [pc, #200]	; (8001dac <menu+0x928>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7fe fcbf 	bl	8000668 <lcd_print>
 8001cea:	e008      	b.n	8001cfe <menu+0x87a>
			} else if(dilSecim == 1) {
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <menu+0x8d4>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d104      	bne.n	8001cfe <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001cf4:	4a2e      	ldr	r2, [pc, #184]	; (8001db0 <menu+0x92c>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f7fe fcb5 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <menu+0x930>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <menu+0x8b0>
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <menu+0x8e4>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d112      	bne.n	8001d34 <menu+0x8b0>
			if(dilSecim == 0) {
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <menu+0x8d4>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001d16:	4a28      	ldr	r2, [pc, #160]	; (8001db8 <menu+0x934>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f7fe fca4 	bl	8000668 <lcd_print>
 8001d20:	e008      	b.n	8001d34 <menu+0x8b0>
			} else if(dilSecim == 1) {
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <menu+0x8d4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d104      	bne.n	8001d34 <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 8001d2a:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <menu+0x938>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7fe fc9a 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <menu+0x930>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d14c      	bne.n	8001dd6 <menu+0x952>
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <menu+0x8e4>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d148      	bne.n	8001dd6 <menu+0x952>
			if(dilSecim == 0) {
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <menu+0x8d4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d13b      	bne.n	8001dc4 <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <menu+0x93c>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2002      	movs	r0, #2
 8001d52:	f7fe fc89 	bl	8000668 <lcd_print>
 8001d56:	e03e      	b.n	8001dd6 <menu+0x952>
 8001d58:	20000c6a 	.word	0x20000c6a
 8001d5c:	0800daa8 	.word	0x0800daa8
 8001d60:	40010800 	.word	0x40010800
 8001d64:	20000c78 	.word	0x20000c78
 8001d68:	20000c58 	.word	0x20000c58
 8001d6c:	20000c4b 	.word	0x20000c4b
 8001d70:	20000c6b 	.word	0x20000c6b
 8001d74:	20000b38 	.word	0x20000b38
 8001d78:	20000c6c 	.word	0x20000c6c
 8001d7c:	20000c6d 	.word	0x20000c6d
 8001d80:	20000c6e 	.word	0x20000c6e
 8001d84:	20000c6f 	.word	0x20000c6f
 8001d88:	20000c70 	.word	0x20000c70
 8001d8c:	20000c71 	.word	0x20000c71
 8001d90:	20000c72 	.word	0x20000c72
 8001d94:	20000c73 	.word	0x20000c73
 8001d98:	20000c74 	.word	0x20000c74
 8001d9c:	20000c75 	.word	0x20000c75
 8001da0:	20000c49 	.word	0x20000c49
 8001da4:	0800dabc 	.word	0x0800dabc
 8001da8:	0800dad0 	.word	0x0800dad0
 8001dac:	0800dae4 	.word	0x0800dae4
 8001db0:	0800daf8 	.word	0x0800daf8
 8001db4:	20000c4a 	.word	0x20000c4a
 8001db8:	0800db0c 	.word	0x0800db0c
 8001dbc:	0800db1c 	.word	0x0800db1c
 8001dc0:	0800db2c 	.word	0x0800db2c
			} else if(dilSecim == 1) {
 8001dc4:	4b98      	ldr	r3, [pc, #608]	; (8002028 <menu+0xba4>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d104      	bne.n	8001dd6 <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 8001dcc:	4a97      	ldr	r2, [pc, #604]	; (800202c <menu+0xba8>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f7fe fc49 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	4895      	ldr	r0, [pc, #596]	; (8002030 <menu+0xbac>)
 8001dda:	f007 ff1d 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d119      	bne.n	8001e18 <menu+0x994>
 8001de4:	4b93      	ldr	r3, [pc, #588]	; (8002034 <menu+0xbb0>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f083 0301 	eor.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d012      	beq.n	8001e18 <menu+0x994>
 8001df2:	4b91      	ldr	r3, [pc, #580]	; (8002038 <menu+0xbb4>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 8001dfa:	4b90      	ldr	r3, [pc, #576]	; (800203c <menu+0xbb8>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b8e      	ldr	r3, [pc, #568]	; (800203c <menu+0xbb8>)
 8001e04:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001e06:	4b8d      	ldr	r3, [pc, #564]	; (800203c <menu+0xbb8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d902      	bls.n	8001e14 <menu+0x990>
				calismaSekli = 0;
 8001e0e:	4b8b      	ldr	r3, [pc, #556]	; (800203c <menu+0xbb8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e14:	f004 f8c2 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4885      	ldr	r0, [pc, #532]	; (8002030 <menu+0xbac>)
 8001e1c:	f007 fefc 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d119      	bne.n	8001e5a <menu+0x9d6>
 8001e26:	4b83      	ldr	r3, [pc, #524]	; (8002034 <menu+0xbb0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d012      	beq.n	8001e5a <menu+0x9d6>
 8001e34:	4b80      	ldr	r3, [pc, #512]	; (8002038 <menu+0xbb4>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10e      	bne.n	8001e5a <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 8001e3c:	4b7f      	ldr	r3, [pc, #508]	; (800203c <menu+0xbb8>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b7d      	ldr	r3, [pc, #500]	; (800203c <menu+0xbb8>)
 8001e46:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e48:	4b7c      	ldr	r3, [pc, #496]	; (800203c <menu+0xbb8>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <menu+0x9d2>
	    		calismaSekli = 1;
 8001e50:	4b7a      	ldr	r3, [pc, #488]	; (800203c <menu+0xbb8>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e56:	f004 f8a1 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	4874      	ldr	r0, [pc, #464]	; (8002030 <menu+0xbac>)
 8001e5e:	f007 fedb 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d118      	bne.n	8001e9a <menu+0xa16>
 8001e68:	4b72      	ldr	r3, [pc, #456]	; (8002034 <menu+0xbb0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	f083 0301 	eor.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d011      	beq.n	8001e9a <menu+0xa16>
			eepromData[1] = calismaSekli;
 8001e76:	4b71      	ldr	r3, [pc, #452]	; (800203c <menu+0xbb8>)
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	4b71      	ldr	r3, [pc, #452]	; (8002040 <menu+0xbbc>)
 8001e7c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e7e:	4b6f      	ldr	r3, [pc, #444]	; (800203c <menu+0xbb8>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d106      	bne.n	8001e94 <menu+0xa10>
				altLimit = 1;
 8001e86:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <menu+0xbc0>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e8c:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <menu+0xbc0>)
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	4b6b      	ldr	r3, [pc, #428]	; (8002040 <menu+0xbbc>)
 8001e92:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e94:	4b6c      	ldr	r3, [pc, #432]	; (8002048 <menu+0xbc4>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <menu+0xbc8>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	f040 8083 	bne.w	8001faa <menu+0xb26>
		if(dilSecim == 0) {
 8001ea4:	4b60      	ldr	r3, [pc, #384]	; (8002028 <menu+0xba4>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001eac:	4a68      	ldr	r2, [pc, #416]	; (8002050 <menu+0xbcc>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7fe fbd9 	bl	8000668 <lcd_print>
 8001eb6:	e008      	b.n	8001eca <menu+0xa46>
		} else if(dilSecim == 1) {
 8001eb8:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <menu+0xba4>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d104      	bne.n	8001eca <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ec0:	4a64      	ldr	r2, [pc, #400]	; (8002054 <menu+0xbd0>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7fe fbcf 	bl	8000668 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <menu+0xbd4>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d113      	bne.n	8001efa <menu+0xa76>
			if(dilSecim == 0) {
 8001ed2:	4b55      	ldr	r3, [pc, #340]	; (8002028 <menu+0xba4>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 8001eda:	4a60      	ldr	r2, [pc, #384]	; (800205c <menu+0xbd8>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f7fe fbc2 	bl	8000668 <lcd_print>
 8001ee4:	e012      	b.n	8001f0c <menu+0xa88>
			} else if(dilSecim == 1) {
 8001ee6:	4b50      	ldr	r3, [pc, #320]	; (8002028 <menu+0xba4>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10e      	bne.n	8001f0c <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 8001eee:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <menu+0xbdc>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f7fe fbb8 	bl	8000668 <lcd_print>
 8001ef8:	e008      	b.n	8001f0c <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <menu+0xbd4>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d104      	bne.n	8001f0c <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 8001f02:	4a58      	ldr	r2, [pc, #352]	; (8002064 <menu+0xbe0>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	2002      	movs	r0, #2
 8001f08:	f7fe fbae 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	4848      	ldr	r0, [pc, #288]	; (8002030 <menu+0xbac>)
 8001f10:	f007 fe82 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d115      	bne.n	8001f46 <menu+0xac2>
 8001f1a:	4b46      	ldr	r3, [pc, #280]	; (8002034 <menu+0xbb0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	f083 0301 	eor.w	r3, r3, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00e      	beq.n	8001f46 <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f28:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <menu+0xbd4>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b49      	ldr	r3, [pc, #292]	; (8002058 <menu+0xbd4>)
 8001f32:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f34:	4b48      	ldr	r3, [pc, #288]	; (8002058 <menu+0xbd4>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d902      	bls.n	8001f42 <menu+0xabe>
				emniyetCercevesi = 0;
 8001f3c:	4b46      	ldr	r3, [pc, #280]	; (8002058 <menu+0xbd4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f42:	f004 f82b 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f46:	2104      	movs	r1, #4
 8001f48:	4839      	ldr	r0, [pc, #228]	; (8002030 <menu+0xbac>)
 8001f4a:	f007 fe65 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d115      	bne.n	8001f80 <menu+0xafc>
 8001f54:	4b37      	ldr	r3, [pc, #220]	; (8002034 <menu+0xbb0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00e      	beq.n	8001f80 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <menu+0xbd4>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <menu+0xbd4>)
 8001f6c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <menu+0xbd4>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <menu+0xaf8>
		   		emniyetCercevesi = 1;
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <menu+0xbd4>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f7c:	f004 f80e 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f80:	2108      	movs	r1, #8
 8001f82:	482b      	ldr	r0, [pc, #172]	; (8002030 <menu+0xbac>)
 8001f84:	f007 fe48 	bl	8009c18 <HAL_GPIO_ReadPin>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d10d      	bne.n	8001faa <menu+0xb26>
 8001f8e:	4b29      	ldr	r3, [pc, #164]	; (8002034 <menu+0xbb0>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <menu+0xbd4>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <menu+0xbbc>)
 8001fa2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001fa4:	4b28      	ldr	r3, [pc, #160]	; (8002048 <menu+0xbc4>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <menu+0xbc8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	f040 80ba 	bne.w	8002128 <menu+0xca4>
		if(dilSecim == 0) {
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <menu+0xba4>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <menu+0xbe4>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7fe fb51 	bl	8000668 <lcd_print>
 8001fc6:	e008      	b.n	8001fda <menu+0xb56>
		} else if(dilSecim == 1) {
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <menu+0xba4>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d104      	bne.n	8001fda <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <menu+0xbe8>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7fe fb47 	bl	8000668 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <menu+0xbec>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d113      	bne.n	800200a <menu+0xb86>
			if(dilSecim == 0) {
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <menu+0xba4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <menu+0xbd8>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f7fe fb3a 	bl	8000668 <lcd_print>
 8001ff4:	e049      	b.n	800208a <menu+0xc06>
			} else if(dilSecim == 1) {
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <menu+0xba4>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d145      	bne.n	800208a <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <menu+0xbdc>)
 8002000:	2101      	movs	r1, #1
 8002002:	2002      	movs	r0, #2
 8002004:	f7fe fb30 	bl	8000668 <lcd_print>
 8002008:	e03f      	b.n	800208a <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <menu+0xbec>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d13b      	bne.n	800208a <menu+0xc06>
			if(dilSecim == 0) {
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <menu+0xba4>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d12e      	bne.n	8002078 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <menu+0xbf0>)
 800201c:	2101      	movs	r1, #1
 800201e:	2002      	movs	r0, #2
 8002020:	f7fe fb22 	bl	8000668 <lcd_print>
 8002024:	e031      	b.n	800208a <menu+0xc06>
 8002026:	bf00      	nop
 8002028:	20000c6a 	.word	0x20000c6a
 800202c:	0800db3c 	.word	0x0800db3c
 8002030:	40010800 	.word	0x40010800
 8002034:	20000c78 	.word	0x20000c78
 8002038:	20000c58 	.word	0x20000c58
 800203c:	20000c4a 	.word	0x20000c4a
 8002040:	20000b38 	.word	0x20000b38
 8002044:	20000c4f 	.word	0x20000c4f
 8002048:	20000c75 	.word	0x20000c75
 800204c:	20000c49 	.word	0x20000c49
 8002050:	0800db4c 	.word	0x0800db4c
 8002054:	0800db60 	.word	0x0800db60
 8002058:	20000c4d 	.word	0x20000c4d
 800205c:	0800db74 	.word	0x0800db74
 8002060:	0800db88 	.word	0x0800db88
 8002064:	0800db9c 	.word	0x0800db9c
 8002068:	0800dbac 	.word	0x0800dbac
 800206c:	0800dbc0 	.word	0x0800dbc0
 8002070:	20000c4e 	.word	0x20000c4e
 8002074:	0800dbd4 	.word	0x0800dbd4
			} else if(dilSecim == 1) {
 8002078:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <menu+0xe40>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d104      	bne.n	800208a <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 8002080:	4a91      	ldr	r2, [pc, #580]	; (80022c8 <menu+0xe44>)
 8002082:	2101      	movs	r1, #1
 8002084:	2002      	movs	r0, #2
 8002086:	f7fe faef 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800208a:	2102      	movs	r1, #2
 800208c:	488f      	ldr	r0, [pc, #572]	; (80022cc <menu+0xe48>)
 800208e:	f007 fdc3 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d115      	bne.n	80020c4 <menu+0xc40>
 8002098:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <menu+0xe4c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00e      	beq.n	80020c4 <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 80020a6:	4b8b      	ldr	r3, [pc, #556]	; (80022d4 <menu+0xe50>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <menu+0xe50>)
 80020b0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80020b2:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <menu+0xe50>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d902      	bls.n	80020c0 <menu+0xc3c>
				yavaslamaLimit = 0;
 80020ba:	4b86      	ldr	r3, [pc, #536]	; (80022d4 <menu+0xe50>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020c0:	f003 ff6c 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020c4:	2104      	movs	r1, #4
 80020c6:	4881      	ldr	r0, [pc, #516]	; (80022cc <menu+0xe48>)
 80020c8:	f007 fda6 	bl	8009c18 <HAL_GPIO_ReadPin>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d115      	bne.n	80020fe <menu+0xc7a>
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <menu+0xe4c>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	f083 0301 	eor.w	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00e      	beq.n	80020fe <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 80020e0:	4b7c      	ldr	r3, [pc, #496]	; (80022d4 <menu+0xe50>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <menu+0xe50>)
 80020ea:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80020ec:	4b79      	ldr	r3, [pc, #484]	; (80022d4 <menu+0xe50>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <menu+0xc76>
		   		yavaslamaLimit = 1;
 80020f4:	4b77      	ldr	r3, [pc, #476]	; (80022d4 <menu+0xe50>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020fa:	f003 ff4f 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020fe:	2108      	movs	r1, #8
 8002100:	4872      	ldr	r0, [pc, #456]	; (80022cc <menu+0xe48>)
 8002102:	f007 fd89 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002106:	4603      	mov	r3, r0
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10d      	bne.n	8002128 <menu+0xca4>
 800210c:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <menu+0xe4c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f083 0301 	eor.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 800211a:	4b6e      	ldr	r3, [pc, #440]	; (80022d4 <menu+0xe50>)
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	4b6e      	ldr	r3, [pc, #440]	; (80022d8 <menu+0xe54>)
 8002120:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002122:	4b6e      	ldr	r3, [pc, #440]	; (80022dc <menu+0xe58>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002128:	4b6d      	ldr	r3, [pc, #436]	; (80022e0 <menu+0xe5c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b05      	cmp	r3, #5
 800212e:	f040 80b9 	bne.w	80022a4 <menu+0xe20>
		if(dilSecim == 0) {
 8002132:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <menu+0xe40>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 800213a:	4a6a      	ldr	r2, [pc, #424]	; (80022e4 <menu+0xe60>)
 800213c:	2101      	movs	r1, #1
 800213e:	2001      	movs	r0, #1
 8002140:	f7fe fa92 	bl	8000668 <lcd_print>
 8002144:	e008      	b.n	8002158 <menu+0xcd4>
		} else if(dilSecim == 1) {
 8002146:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <menu+0xe40>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d104      	bne.n	8002158 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800214e:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <menu+0xe64>)
 8002150:	2101      	movs	r1, #1
 8002152:	2001      	movs	r0, #1
 8002154:	f7fe fa88 	bl	8000668 <lcd_print>
		}

		if(altLimit == 0) {
 8002158:	4b64      	ldr	r3, [pc, #400]	; (80022ec <menu+0xe68>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d113      	bne.n	8002188 <menu+0xd04>
			if(dilSecim == 0) {
 8002160:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <menu+0xe40>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 8002168:	4a61      	ldr	r2, [pc, #388]	; (80022f0 <menu+0xe6c>)
 800216a:	2101      	movs	r1, #1
 800216c:	2002      	movs	r0, #2
 800216e:	f7fe fa7b 	bl	8000668 <lcd_print>
 8002172:	e020      	b.n	80021b6 <menu+0xd32>
			} else if(dilSecim == 1) {
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <menu+0xe40>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d11c      	bne.n	80021b6 <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 800217c:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <menu+0xe70>)
 800217e:	2101      	movs	r1, #1
 8002180:	2002      	movs	r0, #2
 8002182:	f7fe fa71 	bl	8000668 <lcd_print>
 8002186:	e016      	b.n	80021b6 <menu+0xd32>
			}
		} else if(altLimit == 1) {
 8002188:	4b58      	ldr	r3, [pc, #352]	; (80022ec <menu+0xe68>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d112      	bne.n	80021b6 <menu+0xd32>
			if(dilSecim == 0){
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <menu+0xe40>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 8002198:	4a57      	ldr	r2, [pc, #348]	; (80022f8 <menu+0xe74>)
 800219a:	2101      	movs	r1, #1
 800219c:	2002      	movs	r0, #2
 800219e:	f7fe fa63 	bl	8000668 <lcd_print>
 80021a2:	e008      	b.n	80021b6 <menu+0xd32>
			} else if(dilSecim == 1){
 80021a4:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <menu+0xe40>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d104      	bne.n	80021b6 <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 80021ac:	4a46      	ldr	r2, [pc, #280]	; (80022c8 <menu+0xe44>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	2002      	movs	r0, #2
 80021b2:	f7fe fa59 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80021b6:	2102      	movs	r1, #2
 80021b8:	4844      	ldr	r0, [pc, #272]	; (80022cc <menu+0xe48>)
 80021ba:	f007 fd2d 	bl	8009c18 <HAL_GPIO_ReadPin>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d119      	bne.n	80021f8 <menu+0xd74>
 80021c4:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <menu+0xe4c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <menu+0xd74>
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <menu+0xe78>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10e      	bne.n	80021f8 <menu+0xd74>
			altLimit = altLimit + 1;
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <menu+0xe68>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b42      	ldr	r3, [pc, #264]	; (80022ec <menu+0xe68>)
 80021e4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <menu+0xe68>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d902      	bls.n	80021f4 <menu+0xd70>
				altLimit = 0;
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <menu+0xe68>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021f4:	f003 fed2 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80021f8:	2104      	movs	r1, #4
 80021fa:	4834      	ldr	r0, [pc, #208]	; (80022cc <menu+0xe48>)
 80021fc:	f007 fd0c 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002200:	4603      	mov	r3, r0
 8002202:	2b01      	cmp	r3, #1
 8002204:	d119      	bne.n	800223a <menu+0xdb6>
 8002206:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <menu+0xe4c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f083 0301 	eor.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d012      	beq.n	800223a <menu+0xdb6>
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <menu+0xe78>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10e      	bne.n	800223a <menu+0xdb6>
			altLimit = altLimit - 1;
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <menu+0xe68>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	3b01      	subs	r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <menu+0xe68>)
 8002226:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <menu+0xe68>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <menu+0xdb2>
		   		altLimit = 1;
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <menu+0xe68>)
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002236:	f003 feb1 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800223a:	2108      	movs	r1, #8
 800223c:	4823      	ldr	r0, [pc, #140]	; (80022cc <menu+0xe48>)
 800223e:	f007 fceb 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d12d      	bne.n	80022a4 <menu+0xe20>
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <menu+0xe4c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d026      	beq.n	80022a4 <menu+0xe20>
			eepromData[5] = altLimit;
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <menu+0xe68>)
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <menu+0xe54>)
 800225c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <menu+0xe68>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d110      	bne.n	8002288 <menu+0xe04>
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <menu+0xe7c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <menu+0xdf2>
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <menu+0xe7c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d108      	bne.n	8002288 <menu+0xe04>
				kapiTablaAcKonum = 3;
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <menu+0xe7c>)
 8002278:	2203      	movs	r2, #3
 800227a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <menu+0xe7c>)
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <menu+0xe54>)
 8002282:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002286:	e00a      	b.n	800229e <menu+0xe1a>
			} else if(altLimit == 0) {
 8002288:	4b18      	ldr	r3, [pc, #96]	; (80022ec <menu+0xe68>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d106      	bne.n	800229e <menu+0xe1a>
				platformSilindirTipi = 0;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <menu+0xe80>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <menu+0xe80>)
 8002298:	781a      	ldrb	r2, [r3, #0]
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <menu+0xe54>)
 800229c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <menu+0xe58>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <menu+0xe5c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	f040 80b6 	bne.w	800241a <menu+0xf96>
		if(dilSecim == 0) {
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <menu+0xe40>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12a      	bne.n	800230c <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <menu+0xe84>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7fe f9d4 	bl	8000668 <lcd_print>
 80022c0:	e02d      	b.n	800231e <menu+0xe9a>
 80022c2:	bf00      	nop
 80022c4:	20000c6a 	.word	0x20000c6a
 80022c8:	0800dbe8 	.word	0x0800dbe8
 80022cc:	40010800 	.word	0x40010800
 80022d0:	20000c78 	.word	0x20000c78
 80022d4:	20000c4e 	.word	0x20000c4e
 80022d8:	20000b38 	.word	0x20000b38
 80022dc:	20000c75 	.word	0x20000c75
 80022e0:	20000c49 	.word	0x20000c49
 80022e4:	0800dbfc 	.word	0x0800dbfc
 80022e8:	0800dc10 	.word	0x0800dc10
 80022ec:	20000c4f 	.word	0x20000c4f
 80022f0:	0800db74 	.word	0x0800db74
 80022f4:	0800db88 	.word	0x0800db88
 80022f8:	0800dbd4 	.word	0x0800dbd4
 80022fc:	20000c4a 	.word	0x20000c4a
 8002300:	20000c56 	.word	0x20000c56
 8002304:	20000c5c 	.word	0x20000c5c
 8002308:	0800dc24 	.word	0x0800dc24
		} else if(dilSecim == 1){
 800230c:	4b7a      	ldr	r3, [pc, #488]	; (80024f8 <menu+0x1074>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d104      	bne.n	800231e <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002314:	4a79      	ldr	r2, [pc, #484]	; (80024fc <menu+0x1078>)
 8002316:	2101      	movs	r1, #1
 8002318:	2001      	movs	r0, #1
 800231a:	f7fe f9a5 	bl	8000668 <lcd_print>
		}
		if(basincSalteri == 0){
 800231e:	4b78      	ldr	r3, [pc, #480]	; (8002500 <menu+0x107c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d113      	bne.n	800234e <menu+0xeca>
			if(dilSecim == 0) {
 8002326:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <menu+0x1074>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 800232e:	4a75      	ldr	r2, [pc, #468]	; (8002504 <menu+0x1080>)
 8002330:	2101      	movs	r1, #1
 8002332:	2002      	movs	r0, #2
 8002334:	f7fe f998 	bl	8000668 <lcd_print>
 8002338:	e020      	b.n	800237c <menu+0xef8>
			} else if(dilSecim == 1){
 800233a:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <menu+0x1074>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d11c      	bne.n	800237c <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 8002342:	4a71      	ldr	r2, [pc, #452]	; (8002508 <menu+0x1084>)
 8002344:	2101      	movs	r1, #1
 8002346:	2002      	movs	r0, #2
 8002348:	f7fe f98e 	bl	8000668 <lcd_print>
 800234c:	e016      	b.n	800237c <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <menu+0x107c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d112      	bne.n	800237c <menu+0xef8>
			if(dilSecim == 0) {
 8002356:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <menu+0x1074>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 800235e:	4a6b      	ldr	r2, [pc, #428]	; (800250c <menu+0x1088>)
 8002360:	2101      	movs	r1, #1
 8002362:	2002      	movs	r0, #2
 8002364:	f7fe f980 	bl	8000668 <lcd_print>
 8002368:	e008      	b.n	800237c <menu+0xef8>
			} else if(dilSecim == 1) {
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <menu+0x1074>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d104      	bne.n	800237c <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 8002372:	4a67      	ldr	r2, [pc, #412]	; (8002510 <menu+0x108c>)
 8002374:	2101      	movs	r1, #1
 8002376:	2002      	movs	r0, #2
 8002378:	f7fe f976 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800237c:	2102      	movs	r1, #2
 800237e:	4865      	ldr	r0, [pc, #404]	; (8002514 <menu+0x1090>)
 8002380:	f007 fc4a 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002384:	4603      	mov	r3, r0
 8002386:	2b01      	cmp	r3, #1
 8002388:	d115      	bne.n	80023b6 <menu+0xf32>
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <menu+0x1094>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f083 0301 	eor.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <menu+0x107c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b57      	ldr	r3, [pc, #348]	; (8002500 <menu+0x107c>)
 80023a2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80023a4:	4b56      	ldr	r3, [pc, #344]	; (8002500 <menu+0x107c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d902      	bls.n	80023b2 <menu+0xf2e>
				basincSalteri = 0;
 80023ac:	4b54      	ldr	r3, [pc, #336]	; (8002500 <menu+0x107c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023b2:	f003 fdf3 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b6:	2104      	movs	r1, #4
 80023b8:	4856      	ldr	r0, [pc, #344]	; (8002514 <menu+0x1090>)
 80023ba:	f007 fc2d 	bl	8009c18 <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d115      	bne.n	80023f0 <menu+0xf6c>
 80023c4:	4b54      	ldr	r3, [pc, #336]	; (8002518 <menu+0x1094>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00e      	beq.n	80023f0 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 80023d2:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <menu+0x107c>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b49      	ldr	r3, [pc, #292]	; (8002500 <menu+0x107c>)
 80023dc:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80023de:	4b48      	ldr	r3, [pc, #288]	; (8002500 <menu+0x107c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <menu+0xf68>
		   		basincSalteri = 1;
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <menu+0x107c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023ec:	f003 fdd6 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f0:	2108      	movs	r1, #8
 80023f2:	4848      	ldr	r0, [pc, #288]	; (8002514 <menu+0x1090>)
 80023f4:	f007 fc10 	bl	8009c18 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10d      	bne.n	800241a <menu+0xf96>
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <menu+0x1094>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <menu+0xf96>
			eepromData[6] = basincSalteri;
 800240c:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <menu+0x107c>)
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	4b42      	ldr	r3, [pc, #264]	; (800251c <menu+0x1098>)
 8002412:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <menu+0x109c>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800241a:	4b42      	ldr	r3, [pc, #264]	; (8002524 <menu+0x10a0>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b07      	cmp	r3, #7
 8002420:	f040 80f5 	bne.w	800260e <menu+0x118a>
		if(dilSecim == 0) {
 8002424:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <menu+0x1074>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800242c:	4a3e      	ldr	r2, [pc, #248]	; (8002528 <menu+0x10a4>)
 800242e:	2101      	movs	r1, #1
 8002430:	2001      	movs	r0, #1
 8002432:	f7fe f919 	bl	8000668 <lcd_print>
 8002436:	e008      	b.n	800244a <menu+0xfc6>
		} else if(dilSecim == 1){
 8002438:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <menu+0x1074>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d104      	bne.n	800244a <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002440:	4a3a      	ldr	r2, [pc, #232]	; (800252c <menu+0x10a8>)
 8002442:	2101      	movs	r1, #1
 8002444:	2001      	movs	r0, #1
 8002446:	f7fe f90f 	bl	8000668 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800244a:	4b39      	ldr	r3, [pc, #228]	; (8002530 <menu+0x10ac>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d113      	bne.n	800247a <menu+0xff6>
			if(dilSecim == 0) {
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <menu+0x1074>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 800245a:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <menu+0x1080>)
 800245c:	2101      	movs	r1, #1
 800245e:	2002      	movs	r0, #2
 8002460:	f7fe f902 	bl	8000668 <lcd_print>
 8002464:	e079      	b.n	800255a <menu+0x10d6>
			} else if(dilSecim == 1){
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <menu+0x1074>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d175      	bne.n	800255a <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 800246e:	4a26      	ldr	r2, [pc, #152]	; (8002508 <menu+0x1084>)
 8002470:	2101      	movs	r1, #1
 8002472:	2002      	movs	r0, #2
 8002474:	f7fe f8f8 	bl	8000668 <lcd_print>
 8002478:	e06f      	b.n	800255a <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <menu+0x10ac>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d113      	bne.n	80024aa <menu+0x1026>
			if(dilSecim == 0) {
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <menu+0x1074>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 800248a:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <menu+0x10b0>)
 800248c:	2101      	movs	r1, #1
 800248e:	2002      	movs	r0, #2
 8002490:	f7fe f8ea 	bl	8000668 <lcd_print>
 8002494:	e061      	b.n	800255a <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <menu+0x1074>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d15d      	bne.n	800255a <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 800249e:	4a26      	ldr	r2, [pc, #152]	; (8002538 <menu+0x10b4>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	2002      	movs	r0, #2
 80024a4:	f7fe f8e0 	bl	8000668 <lcd_print>
 80024a8:	e057      	b.n	800255a <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <menu+0x10ac>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d113      	bne.n	80024da <menu+0x1056>
			if(dilSecim == 0) {
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <menu+0x1074>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 80024ba:	4a20      	ldr	r2, [pc, #128]	; (800253c <menu+0x10b8>)
 80024bc:	2101      	movs	r1, #1
 80024be:	2002      	movs	r0, #2
 80024c0:	f7fe f8d2 	bl	8000668 <lcd_print>
 80024c4:	e049      	b.n	800255a <menu+0x10d6>
			} else if(dilSecim == 1) {
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <menu+0x1074>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d145      	bne.n	800255a <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 80024ce:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <menu+0x10bc>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	2002      	movs	r0, #2
 80024d4:	f7fe f8c8 	bl	8000668 <lcd_print>
 80024d8:	e03f      	b.n	800255a <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <menu+0x10ac>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d13b      	bne.n	800255a <menu+0x10d6>
			if(dilSecim == 0) {
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <menu+0x1074>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d12e      	bne.n	8002548 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <menu+0x10c0>)
 80024ec:	2101      	movs	r1, #1
 80024ee:	2002      	movs	r0, #2
 80024f0:	f7fe f8ba 	bl	8000668 <lcd_print>
 80024f4:	e031      	b.n	800255a <menu+0x10d6>
 80024f6:	bf00      	nop
 80024f8:	20000c6a 	.word	0x20000c6a
 80024fc:	0800dc34 	.word	0x0800dc34
 8002500:	20000c50 	.word	0x20000c50
 8002504:	0800db74 	.word	0x0800db74
 8002508:	0800db88 	.word	0x0800db88
 800250c:	0800dbd4 	.word	0x0800dbd4
 8002510:	0800dbe8 	.word	0x0800dbe8
 8002514:	40010800 	.word	0x40010800
 8002518:	20000c78 	.word	0x20000c78
 800251c:	20000b38 	.word	0x20000b38
 8002520:	20000c75 	.word	0x20000c75
 8002524:	20000c49 	.word	0x20000c49
 8002528:	0800dc44 	.word	0x0800dc44
 800252c:	0800dc58 	.word	0x0800dc58
 8002530:	20000c51 	.word	0x20000c51
 8002534:	0800dc6c 	.word	0x0800dc6c
 8002538:	0800dc80 	.word	0x0800dc80
 800253c:	0800dc94 	.word	0x0800dc94
 8002540:	0800dca8 	.word	0x0800dca8
 8002544:	0800dcbc 	.word	0x0800dcbc
			} else if(dilSecim == 1){
 8002548:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <menu+0x132c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d104      	bne.n	800255a <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002550:	4a98      	ldr	r2, [pc, #608]	; (80027b4 <menu+0x1330>)
 8002552:	2101      	movs	r1, #1
 8002554:	2002      	movs	r0, #2
 8002556:	f7fe f887 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800255a:	2102      	movs	r1, #2
 800255c:	4896      	ldr	r0, [pc, #600]	; (80027b8 <menu+0x1334>)
 800255e:	f007 fb5b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d115      	bne.n	8002594 <menu+0x1110>
 8002568:	4b94      	ldr	r3, [pc, #592]	; (80027bc <menu+0x1338>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 8002576:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <menu+0x133c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b90      	ldr	r3, [pc, #576]	; (80027c0 <menu+0x133c>)
 8002580:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002582:	4b8f      	ldr	r3, [pc, #572]	; (80027c0 <menu+0x133c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d902      	bls.n	8002590 <menu+0x110c>
				kapiSecimleri = 0;
 800258a:	4b8d      	ldr	r3, [pc, #564]	; (80027c0 <menu+0x133c>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002590:	f003 fd04 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002594:	2104      	movs	r1, #4
 8002596:	4888      	ldr	r0, [pc, #544]	; (80027b8 <menu+0x1334>)
 8002598:	f007 fb3e 	bl	8009c18 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d115      	bne.n	80025ce <menu+0x114a>
 80025a2:	4b86      	ldr	r3, [pc, #536]	; (80027bc <menu+0x1338>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 80025b0:	4b83      	ldr	r3, [pc, #524]	; (80027c0 <menu+0x133c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b81      	ldr	r3, [pc, #516]	; (80027c0 <menu+0x133c>)
 80025ba:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80025bc:	4b80      	ldr	r3, [pc, #512]	; (80027c0 <menu+0x133c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d902      	bls.n	80025ca <menu+0x1146>
		   		kapiSecimleri = 3;
 80025c4:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <menu+0x133c>)
 80025c6:	2203      	movs	r2, #3
 80025c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025ca:	f003 fce7 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ce:	2108      	movs	r1, #8
 80025d0:	4879      	ldr	r0, [pc, #484]	; (80027b8 <menu+0x1334>)
 80025d2:	f007 fb21 	bl	8009c18 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d118      	bne.n	800260e <menu+0x118a>
 80025dc:	4b77      	ldr	r3, [pc, #476]	; (80027bc <menu+0x1338>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	f083 0301 	eor.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 80025ea:	4b75      	ldr	r3, [pc, #468]	; (80027c0 <menu+0x133c>)
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <menu+0x1340>)
 80025f0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <menu+0x133c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <menu+0x1184>
				altLimit = 1;
 80025fa:	4b73      	ldr	r3, [pc, #460]	; (80027c8 <menu+0x1344>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002600:	4b71      	ldr	r3, [pc, #452]	; (80027c8 <menu+0x1344>)
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <menu+0x1340>)
 8002606:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002608:	4b70      	ldr	r3, [pc, #448]	; (80027cc <menu+0x1348>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <menu+0x134c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b08      	cmp	r3, #8
 8002614:	f040 8092 	bne.w	800273c <menu+0x12b8>
		if(dilSecim == 0) {
 8002618:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <menu+0x132c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002620:	4a6c      	ldr	r2, [pc, #432]	; (80027d4 <menu+0x1350>)
 8002622:	2101      	movs	r1, #1
 8002624:	2001      	movs	r0, #1
 8002626:	f7fe f81f 	bl	8000668 <lcd_print>
 800262a:	e008      	b.n	800263e <menu+0x11ba>
		} else if(dilSecim == 1) {
 800262c:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <menu+0x132c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d104      	bne.n	800263e <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002634:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <menu+0x1354>)
 8002636:	2101      	movs	r1, #1
 8002638:	2001      	movs	r0, #1
 800263a:	f7fe f815 	bl	8000668 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <menu+0x1358>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d113      	bne.n	800266e <menu+0x11ea>
			if(dilSecim == 0) {
 8002646:	4b5a      	ldr	r3, [pc, #360]	; (80027b0 <menu+0x132c>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 800264e:	4a64      	ldr	r2, [pc, #400]	; (80027e0 <menu+0x135c>)
 8002650:	2101      	movs	r1, #1
 8002652:	2002      	movs	r0, #2
 8002654:	f7fe f808 	bl	8000668 <lcd_print>
 8002658:	e020      	b.n	800269c <menu+0x1218>
			} else if(dilSecim == 1) {
 800265a:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <menu+0x132c>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d11c      	bne.n	800269c <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 8002662:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <menu+0x1360>)
 8002664:	2101      	movs	r1, #1
 8002666:	2002      	movs	r0, #2
 8002668:	f7fd fffe 	bl	8000668 <lcd_print>
 800266c:	e016      	b.n	800269c <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 800266e:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <menu+0x1358>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d112      	bne.n	800269c <menu+0x1218>
			if(dilSecim == 0){
 8002676:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <menu+0x132c>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800267e:	4a5a      	ldr	r2, [pc, #360]	; (80027e8 <menu+0x1364>)
 8002680:	2101      	movs	r1, #1
 8002682:	2002      	movs	r0, #2
 8002684:	f7fd fff0 	bl	8000668 <lcd_print>
 8002688:	e008      	b.n	800269c <menu+0x1218>
			} else if(dilSecim == 1){
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <menu+0x132c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d104      	bne.n	800269c <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 8002692:	4a56      	ldr	r2, [pc, #344]	; (80027ec <menu+0x1368>)
 8002694:	2101      	movs	r1, #1
 8002696:	2002      	movs	r0, #2
 8002698:	f7fd ffe6 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800269c:	2102      	movs	r1, #2
 800269e:	4846      	ldr	r0, [pc, #280]	; (80027b8 <menu+0x1334>)
 80026a0:	f007 faba 	bl	8009c18 <HAL_GPIO_ReadPin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d115      	bne.n	80026d6 <menu+0x1252>
 80026aa:	4b44      	ldr	r3, [pc, #272]	; (80027bc <menu+0x1338>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 80026b8:	4b48      	ldr	r3, [pc, #288]	; (80027dc <menu+0x1358>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b46      	ldr	r3, [pc, #280]	; (80027dc <menu+0x1358>)
 80026c2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80026c4:	4b45      	ldr	r3, [pc, #276]	; (80027dc <menu+0x1358>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d902      	bls.n	80026d2 <menu+0x124e>
				kapiAcTipi = 0;
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <menu+0x1358>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026d2:	f003 fc63 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d6:	2104      	movs	r1, #4
 80026d8:	4837      	ldr	r0, [pc, #220]	; (80027b8 <menu+0x1334>)
 80026da:	f007 fa9d 	bl	8009c18 <HAL_GPIO_ReadPin>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d115      	bne.n	8002710 <menu+0x128c>
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <menu+0x1338>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	f083 0301 	eor.w	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00e      	beq.n	8002710 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 80026f2:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <menu+0x1358>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <menu+0x1358>)
 80026fc:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80026fe:	4b37      	ldr	r3, [pc, #220]	; (80027dc <menu+0x1358>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <menu+0x1288>
		   		kapiAcTipi = 1;
 8002706:	4b35      	ldr	r3, [pc, #212]	; (80027dc <menu+0x1358>)
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800270c:	f003 fc46 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002710:	2108      	movs	r1, #8
 8002712:	4829      	ldr	r0, [pc, #164]	; (80027b8 <menu+0x1334>)
 8002714:	f007 fa80 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10e      	bne.n	800273c <menu+0x12b8>
 800271e:	4b27      	ldr	r3, [pc, #156]	; (80027bc <menu+0x1338>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	f083 0301 	eor.w	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <menu+0x1358>)
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <menu+0x1340>)
 8002732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002736:	4b25      	ldr	r3, [pc, #148]	; (80027cc <menu+0x1348>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <menu+0x134c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b09      	cmp	r3, #9
 8002742:	f040 80b9 	bne.w	80028b8 <menu+0x1434>
		if(dilSecim == 0){
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <menu+0x132c>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800274e:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <menu+0x136c>)
 8002750:	2101      	movs	r1, #1
 8002752:	2001      	movs	r0, #1
 8002754:	f7fd ff88 	bl	8000668 <lcd_print>
 8002758:	e008      	b.n	800276c <menu+0x12e8>
		} else if(dilSecim == 1) {
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <menu+0x132c>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d104      	bne.n	800276c <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002762:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <menu+0x1370>)
 8002764:	2101      	movs	r1, #1
 8002766:	2001      	movs	r0, #1
 8002768:	f7fd ff7e 	bl	8000668 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <menu+0x1374>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 8002774:	4a21      	ldr	r2, [pc, #132]	; (80027fc <menu+0x1378>)
 8002776:	2101      	movs	r1, #1
 8002778:	2002      	movs	r0, #2
 800277a:	f7fd ff75 	bl	8000668 <lcd_print>
 800277e:	e04c      	b.n	800281a <menu+0x1396>
		} else if(kapi1Tip == 1) {
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <menu+0x1374>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d13f      	bne.n	8002808 <menu+0x1384>
			if(dilSecim == 0){
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <menu+0x132c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <menu+0x137c>)
 8002792:	2101      	movs	r1, #1
 8002794:	2002      	movs	r0, #2
 8002796:	f7fd ff67 	bl	8000668 <lcd_print>
 800279a:	e03e      	b.n	800281a <menu+0x1396>
			} else if(dilSecim == 1) {
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <menu+0x132c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d13a      	bne.n	800281a <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <menu+0x1380>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	2002      	movs	r0, #2
 80027aa:	f7fd ff5d 	bl	8000668 <lcd_print>
 80027ae:	e034      	b.n	800281a <menu+0x1396>
 80027b0:	20000c6a 	.word	0x20000c6a
 80027b4:	0800dcd0 	.word	0x0800dcd0
 80027b8:	40010800 	.word	0x40010800
 80027bc:	20000c78 	.word	0x20000c78
 80027c0:	20000c51 	.word	0x20000c51
 80027c4:	20000b38 	.word	0x20000b38
 80027c8:	20000c4f 	.word	0x20000c4f
 80027cc:	20000c75 	.word	0x20000c75
 80027d0:	20000c49 	.word	0x20000c49
 80027d4:	0800dce4 	.word	0x0800dce4
 80027d8:	0800dcf8 	.word	0x0800dcf8
 80027dc:	20000c55 	.word	0x20000c55
 80027e0:	0800dd0c 	.word	0x0800dd0c
 80027e4:	0800dd1c 	.word	0x0800dd1c
 80027e8:	0800dd2c 	.word	0x0800dd2c
 80027ec:	0800dd40 	.word	0x0800dd40
 80027f0:	0800dd54 	.word	0x0800dd54
 80027f4:	0800dd68 	.word	0x0800dd68
 80027f8:	20000c52 	.word	0x20000c52
 80027fc:	0800dd7c 	.word	0x0800dd7c
 8002800:	0800dd90 	.word	0x0800dd90
 8002804:	0800dda0 	.word	0x0800dda0
			}
		} else if(kapi1Tip == 2) {
 8002808:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <menu+0x15b0>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d104      	bne.n	800281a <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8002810:	4a89      	ldr	r2, [pc, #548]	; (8002a38 <menu+0x15b4>)
 8002812:	2101      	movs	r1, #1
 8002814:	2002      	movs	r0, #2
 8002816:	f7fd ff27 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800281a:	2102      	movs	r1, #2
 800281c:	4887      	ldr	r0, [pc, #540]	; (8002a3c <menu+0x15b8>)
 800281e:	f007 f9fb 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d115      	bne.n	8002854 <menu+0x13d0>
 8002828:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <menu+0x15bc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00e      	beq.n	8002854 <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 8002836:	4b7f      	ldr	r3, [pc, #508]	; (8002a34 <menu+0x15b0>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <menu+0x15b0>)
 8002840:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002842:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <menu+0x15b0>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d902      	bls.n	8002850 <menu+0x13cc>
				kapi1Tip = 0;
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <menu+0x15b0>)
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002850:	f003 fba4 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002854:	2104      	movs	r1, #4
 8002856:	4879      	ldr	r0, [pc, #484]	; (8002a3c <menu+0x15b8>)
 8002858:	f007 f9de 	bl	8009c18 <HAL_GPIO_ReadPin>
 800285c:	4603      	mov	r3, r0
 800285e:	2b01      	cmp	r3, #1
 8002860:	d115      	bne.n	800288e <menu+0x140a>
 8002862:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <menu+0x15bc>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00e      	beq.n	800288e <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8002870:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <menu+0x15b0>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	3b01      	subs	r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b6e      	ldr	r3, [pc, #440]	; (8002a34 <menu+0x15b0>)
 800287a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800287c:	4b6d      	ldr	r3, [pc, #436]	; (8002a34 <menu+0x15b0>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d902      	bls.n	800288a <menu+0x1406>
		   		kapi1Tip = 2;
 8002884:	4b6b      	ldr	r3, [pc, #428]	; (8002a34 <menu+0x15b0>)
 8002886:	2202      	movs	r2, #2
 8002888:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800288a:	f003 fb87 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800288e:	2108      	movs	r1, #8
 8002890:	486a      	ldr	r0, [pc, #424]	; (8002a3c <menu+0x15b8>)
 8002892:	f007 f9c1 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002896:	4603      	mov	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10d      	bne.n	80028b8 <menu+0x1434>
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <menu+0x15bc>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	f083 0301 	eor.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 80028aa:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <menu+0x15b0>)
 80028ac:	781a      	ldrb	r2, [r3, #0]
 80028ae:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <menu+0x15c0>)
 80028b0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <menu+0x15c4>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80028b8:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <menu+0x15c8>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b0a      	cmp	r3, #10
 80028be:	d17f      	bne.n	80029c0 <menu+0x153c>
		if(dilSecim == 0) {
 80028c0:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <menu+0x15cc>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80028c8:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <menu+0x15d0>)
 80028ca:	2101      	movs	r1, #1
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7fd fecb 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028d2:	4a61      	ldr	r2, [pc, #388]	; (8002a58 <menu+0x15d4>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	2002      	movs	r0, #2
 80028d8:	f7fd fec6 	bl	8000668 <lcd_print>
 80028dc:	e00d      	b.n	80028fa <menu+0x1476>
		} else if(dilSecim == 1) {
 80028de:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <menu+0x15cc>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d109      	bne.n	80028fa <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80028e6:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <menu+0x15d8>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fd febc 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028f0:	4a5b      	ldr	r2, [pc, #364]	; (8002a60 <menu+0x15dc>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	2002      	movs	r0, #2
 80028f6:	f7fd feb7 	bl	8000668 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80028fa:	4b5a      	ldr	r3, [pc, #360]	; (8002a64 <menu+0x15e0>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	220a      	movs	r2, #10
 8002900:	4959      	ldr	r1, [pc, #356]	; (8002a68 <menu+0x15e4>)
 8002902:	4618      	mov	r0, r3
 8002904:	f00a f9b4 	bl	800cc70 <itoa>
		lcd_print(2,16,snum);
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <menu+0x15e4>)
 800290a:	2110      	movs	r1, #16
 800290c:	2002      	movs	r0, #2
 800290e:	f7fd feab 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002912:	2102      	movs	r1, #2
 8002914:	4849      	ldr	r0, [pc, #292]	; (8002a3c <menu+0x15b8>)
 8002916:	f007 f97f 	bl	8009c18 <HAL_GPIO_ReadPin>
 800291a:	4603      	mov	r3, r0
 800291c:	2b01      	cmp	r3, #1
 800291e:	d119      	bne.n	8002954 <menu+0x14d0>
 8002920:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <menu+0x15bc>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <menu+0x14d0>
 800292e:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <menu+0x15b0>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10e      	bne.n	8002954 <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 8002936:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <menu+0x15e0>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <menu+0x15e0>)
 8002940:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002942:	4b48      	ldr	r3, [pc, #288]	; (8002a64 <menu+0x15e0>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d902      	bls.n	8002950 <menu+0x14cc>
				kapi1AcSure = 0;
 800294a:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <menu+0x15e0>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002950:	f003 fb24 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002954:	2104      	movs	r1, #4
 8002956:	4839      	ldr	r0, [pc, #228]	; (8002a3c <menu+0x15b8>)
 8002958:	f007 f95e 	bl	8009c18 <HAL_GPIO_ReadPin>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d119      	bne.n	8002996 <menu+0x1512>
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <menu+0x15bc>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d012      	beq.n	8002996 <menu+0x1512>
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <menu+0x15b0>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10e      	bne.n	8002996 <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8002978:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <menu+0x15e0>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	3b01      	subs	r3, #1
 800297e:	b2da      	uxtb	r2, r3
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <menu+0x15e0>)
 8002982:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002984:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <menu+0x15e0>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d902      	bls.n	8002992 <menu+0x150e>
		   		kapi1AcSure = 5;
 800298c:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <menu+0x15e0>)
 800298e:	2205      	movs	r2, #5
 8002990:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002992:	f003 fb03 	bl	8005f9c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002996:	2108      	movs	r1, #8
 8002998:	4828      	ldr	r0, [pc, #160]	; (8002a3c <menu+0x15b8>)
 800299a:	f007 f93d 	bl	8009c18 <HAL_GPIO_ReadPin>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10d      	bne.n	80029c0 <menu+0x153c>
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <menu+0x15bc>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	f083 0301 	eor.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <menu+0x15e0>)
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <menu+0x15c0>)
 80029b8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <menu+0x15c4>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <menu+0x15c8>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b0b      	cmp	r3, #11
 80029c6:	f040 80b5 	bne.w	8002b34 <menu+0x16b0>
		if(dilSecim == 0) {
 80029ca:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <menu+0x15cc>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d105      	bne.n	80029de <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <menu+0x15e8>)
 80029d4:	2101      	movs	r1, #1
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fd fe46 	bl	8000668 <lcd_print>
 80029dc:	e008      	b.n	80029f0 <menu+0x156c>
		} else if(dilSecim == 1) {
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <menu+0x15cc>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d104      	bne.n	80029f0 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80029e6:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <menu+0x15ec>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7fd fe3c 	bl	8000668 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <menu+0x15f0>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 80029f8:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <menu+0x15f4>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	2002      	movs	r0, #2
 80029fe:	f7fd fe33 	bl	8000668 <lcd_print>
 8002a02:	e048      	b.n	8002a96 <menu+0x1612>
		} else if(kapi2Tip == 1) {
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <menu+0x15f0>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d13b      	bne.n	8002a84 <menu+0x1600>
			if(dilSecim == 0) {
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <menu+0x15cc>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <menu+0x15f8>)
 8002a16:	2101      	movs	r1, #1
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f7fd fe25 	bl	8000668 <lcd_print>
 8002a1e:	e03a      	b.n	8002a96 <menu+0x1612>
			} else if(dilSecim == 1) {
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <menu+0x15cc>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d136      	bne.n	8002a96 <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002a28:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <menu+0x15fc>)
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f7fd fe1b 	bl	8000668 <lcd_print>
 8002a32:	e030      	b.n	8002a96 <menu+0x1612>
 8002a34:	20000c52 	.word	0x20000c52
 8002a38:	0800ddb4 	.word	0x0800ddb4
 8002a3c:	40010800 	.word	0x40010800
 8002a40:	20000c78 	.word	0x20000c78
 8002a44:	20000b38 	.word	0x20000b38
 8002a48:	20000c75 	.word	0x20000c75
 8002a4c:	20000c49 	.word	0x20000c49
 8002a50:	20000c6a 	.word	0x20000c6a
 8002a54:	0800ddc4 	.word	0x0800ddc4
 8002a58:	0800ddd8 	.word	0x0800ddd8
 8002a5c:	0800dde8 	.word	0x0800dde8
 8002a60:	0800ddfc 	.word	0x0800ddfc
 8002a64:	20000c62 	.word	0x20000c62
 8002a68:	20000bcc 	.word	0x20000bcc
 8002a6c:	0800de0c 	.word	0x0800de0c
 8002a70:	0800de20 	.word	0x0800de20
 8002a74:	20000c53 	.word	0x20000c53
 8002a78:	0800dd7c 	.word	0x0800dd7c
 8002a7c:	0800dd90 	.word	0x0800dd90
 8002a80:	0800dda0 	.word	0x0800dda0
			}
		} else if(kapi2Tip == 2) {
 8002a84:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <menu+0x182c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d104      	bne.n	8002a96 <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002a8c:	4a89      	ldr	r2, [pc, #548]	; (8002cb4 <menu+0x1830>)
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7fd fde9 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a96:	2102      	movs	r1, #2
 8002a98:	4887      	ldr	r0, [pc, #540]	; (8002cb8 <menu+0x1834>)
 8002a9a:	f007 f8bd 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d115      	bne.n	8002ad0 <menu+0x164c>
 8002aa4:	4b85      	ldr	r3, [pc, #532]	; (8002cbc <menu+0x1838>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00e      	beq.n	8002ad0 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002ab2:	4b7f      	ldr	r3, [pc, #508]	; (8002cb0 <menu+0x182c>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b7d      	ldr	r3, [pc, #500]	; (8002cb0 <menu+0x182c>)
 8002abc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002abe:	4b7c      	ldr	r3, [pc, #496]	; (8002cb0 <menu+0x182c>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d902      	bls.n	8002acc <menu+0x1648>
				kapi2Tip = 0;
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <menu+0x182c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002acc:	f003 fa66 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad0:	2104      	movs	r1, #4
 8002ad2:	4879      	ldr	r0, [pc, #484]	; (8002cb8 <menu+0x1834>)
 8002ad4:	f007 f8a0 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d115      	bne.n	8002b0a <menu+0x1686>
 8002ade:	4b77      	ldr	r3, [pc, #476]	; (8002cbc <menu+0x1838>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002aec:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <menu+0x182c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b6e      	ldr	r3, [pc, #440]	; (8002cb0 <menu+0x182c>)
 8002af6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002af8:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <menu+0x182c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d902      	bls.n	8002b06 <menu+0x1682>
		   		kapi2Tip = 2;
 8002b00:	4b6b      	ldr	r3, [pc, #428]	; (8002cb0 <menu+0x182c>)
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b06:	f003 fa49 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0a:	2108      	movs	r1, #8
 8002b0c:	486a      	ldr	r0, [pc, #424]	; (8002cb8 <menu+0x1834>)
 8002b0e:	f007 f883 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10d      	bne.n	8002b34 <menu+0x16b0>
 8002b18:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <menu+0x1838>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002b26:	4b62      	ldr	r3, [pc, #392]	; (8002cb0 <menu+0x182c>)
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <menu+0x183c>)
 8002b2c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <menu+0x1840>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b34:	4b64      	ldr	r3, [pc, #400]	; (8002cc8 <menu+0x1844>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d17f      	bne.n	8002c3c <menu+0x17b8>
		if(dilSecim == 0) {
 8002b3c:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <menu+0x1848>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b44:	4a62      	ldr	r2, [pc, #392]	; (8002cd0 <menu+0x184c>)
 8002b46:	2101      	movs	r1, #1
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7fd fd8d 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b4e:	4a61      	ldr	r2, [pc, #388]	; (8002cd4 <menu+0x1850>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	2002      	movs	r0, #2
 8002b54:	f7fd fd88 	bl	8000668 <lcd_print>
 8002b58:	e00d      	b.n	8002b76 <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002b5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ccc <menu+0x1848>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d109      	bne.n	8002b76 <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b62:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <menu+0x1854>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7fd fd7e 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b6c:	4a5b      	ldr	r2, [pc, #364]	; (8002cdc <menu+0x1858>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	2002      	movs	r0, #2
 8002b72:	f7fd fd79 	bl	8000668 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002b76:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <menu+0x185c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	220a      	movs	r2, #10
 8002b7c:	4959      	ldr	r1, [pc, #356]	; (8002ce4 <menu+0x1860>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f00a f876 	bl	800cc70 <itoa>
		lcd_print(2,16,snum);
 8002b84:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <menu+0x1860>)
 8002b86:	2110      	movs	r1, #16
 8002b88:	2002      	movs	r0, #2
 8002b8a:	f7fd fd6d 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4849      	ldr	r0, [pc, #292]	; (8002cb8 <menu+0x1834>)
 8002b92:	f007 f841 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d119      	bne.n	8002bd0 <menu+0x174c>
 8002b9c:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <menu+0x1838>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	f083 0301 	eor.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <menu+0x174c>
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <menu+0x182c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8002bb2:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <menu+0x185c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <menu+0x185c>)
 8002bbc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002bbe:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <menu+0x185c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d902      	bls.n	8002bcc <menu+0x1748>
				kapi2AcSure = 0;
 8002bc6:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <menu+0x185c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bcc:	f003 f9e6 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	4839      	ldr	r0, [pc, #228]	; (8002cb8 <menu+0x1834>)
 8002bd4:	f007 f820 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d119      	bne.n	8002c12 <menu+0x178e>
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <menu+0x1838>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	f083 0301 	eor.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d012      	beq.n	8002c12 <menu+0x178e>
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <menu+0x182c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10e      	bne.n	8002c12 <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <menu+0x185c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <menu+0x185c>)
 8002bfe:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002c00:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <menu+0x185c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b06      	cmp	r3, #6
 8002c06:	d902      	bls.n	8002c0e <menu+0x178a>
		   		kapi2AcSure = 5;
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <menu+0x185c>)
 8002c0a:	2205      	movs	r2, #5
 8002c0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c0e:	f003 f9c5 	bl	8005f9c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c12:	2108      	movs	r1, #8
 8002c14:	4828      	ldr	r0, [pc, #160]	; (8002cb8 <menu+0x1834>)
 8002c16:	f006 ffff 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10d      	bne.n	8002c3c <menu+0x17b8>
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <menu+0x1838>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f083 0301 	eor.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <menu+0x185c>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <menu+0x183c>)
 8002c34:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <menu+0x1840>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <menu+0x1844>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b0d      	cmp	r3, #13
 8002c42:	f040 80b5 	bne.w	8002db0 <menu+0x192c>
		if(dilSecim == 0) {
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <menu+0x1848>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c4e:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <menu+0x1864>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	2001      	movs	r0, #1
 8002c54:	f7fd fd08 	bl	8000668 <lcd_print>
 8002c58:	e008      	b.n	8002c6c <menu+0x17e8>
		} else if(dilSecim == 1){
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <menu+0x1848>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d104      	bne.n	8002c6c <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <menu+0x1868>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7fd fcfe 	bl	8000668 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002c6c:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <menu+0x186c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8002c74:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <menu+0x1870>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f7fd fcf5 	bl	8000668 <lcd_print>
 8002c7e:	e048      	b.n	8002d12 <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <menu+0x186c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d13b      	bne.n	8002d00 <menu+0x187c>
			if(dilSecim == 0) {
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <menu+0x1848>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <menu+0x1874>)
 8002c92:	2101      	movs	r1, #1
 8002c94:	2002      	movs	r0, #2
 8002c96:	f7fd fce7 	bl	8000668 <lcd_print>
 8002c9a:	e03a      	b.n	8002d12 <menu+0x188e>
			} else if(dilSecim == 1) {
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <menu+0x1848>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d136      	bne.n	8002d12 <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8002ca4:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <menu+0x1878>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	2002      	movs	r0, #2
 8002caa:	f7fd fcdd 	bl	8000668 <lcd_print>
 8002cae:	e030      	b.n	8002d12 <menu+0x188e>
 8002cb0:	20000c53 	.word	0x20000c53
 8002cb4:	0800ddb4 	.word	0x0800ddb4
 8002cb8:	40010800 	.word	0x40010800
 8002cbc:	20000c78 	.word	0x20000c78
 8002cc0:	20000b38 	.word	0x20000b38
 8002cc4:	20000c75 	.word	0x20000c75
 8002cc8:	20000c49 	.word	0x20000c49
 8002ccc:	20000c6a 	.word	0x20000c6a
 8002cd0:	0800de34 	.word	0x0800de34
 8002cd4:	0800ddd8 	.word	0x0800ddd8
 8002cd8:	0800de48 	.word	0x0800de48
 8002cdc:	0800ddfc 	.word	0x0800ddfc
 8002ce0:	20000c63 	.word	0x20000c63
 8002ce4:	20000bcc 	.word	0x20000bcc
 8002ce8:	0800de5c 	.word	0x0800de5c
 8002cec:	0800de70 	.word	0x0800de70
 8002cf0:	20000c54 	.word	0x20000c54
 8002cf4:	0800dd7c 	.word	0x0800dd7c
 8002cf8:	0800dd90 	.word	0x0800dd90
 8002cfc:	0800dda0 	.word	0x0800dda0
			}
		} else if(kapitablaTip == 2) {
 8002d00:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <menu+0x19ec>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d104      	bne.n	8002d12 <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 8002d08:	4a5a      	ldr	r2, [pc, #360]	; (8002e74 <menu+0x19f0>)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	f7fd fcab 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d12:	2102      	movs	r1, #2
 8002d14:	4858      	ldr	r0, [pc, #352]	; (8002e78 <menu+0x19f4>)
 8002d16:	f006 ff7f 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d115      	bne.n	8002d4c <menu+0x18c8>
 8002d20:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <menu+0x19f8>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	f083 0301 	eor.w	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00e      	beq.n	8002d4c <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 8002d2e:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <menu+0x19ec>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <menu+0x19ec>)
 8002d38:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <menu+0x19ec>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d902      	bls.n	8002d48 <menu+0x18c4>
				kapitablaTip = 0;
 8002d42:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <menu+0x19ec>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d48:	f003 f928 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	484a      	ldr	r0, [pc, #296]	; (8002e78 <menu+0x19f4>)
 8002d50:	f006 ff62 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d115      	bne.n	8002d86 <menu+0x1902>
 8002d5a:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <menu+0x19f8>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	f083 0301 	eor.w	r3, r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8002d68:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <menu+0x19ec>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <menu+0x19ec>)
 8002d72:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002d74:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <menu+0x19ec>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d902      	bls.n	8002d82 <menu+0x18fe>
		   		kapitablaTip = 2;
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <menu+0x19ec>)
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d82:	f003 f90b 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d86:	2108      	movs	r1, #8
 8002d88:	483b      	ldr	r0, [pc, #236]	; (8002e78 <menu+0x19f4>)
 8002d8a:	f006 ff45 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10d      	bne.n	8002db0 <menu+0x192c>
 8002d94:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <menu+0x19f8>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8002da2:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <menu+0x19ec>)
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <menu+0x19fc>)
 8002da8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002daa:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <menu+0x1a00>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <menu+0x1a04>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b0e      	cmp	r3, #14
 8002db6:	f040 80f2 	bne.w	8002f9e <menu+0x1b1a>
		if(dilSecim == 0) {
 8002dba:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <menu+0x1a08>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002dc2:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <menu+0x1a0c>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f7fd fc4e 	bl	8000668 <lcd_print>
 8002dcc:	e008      	b.n	8002de0 <menu+0x195c>
		} else if(dilSecim == 1) {
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <menu+0x1a08>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d104      	bne.n	8002de0 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <menu+0x1a10>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f7fd fc44 	bl	8000668 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002de0:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <menu+0x1a14>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d113      	bne.n	8002e10 <menu+0x198c>
			if(dilSecim == 0){
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <menu+0x1a08>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8002df0:	4a2a      	ldr	r2, [pc, #168]	; (8002e9c <menu+0x1a18>)
 8002df2:	2101      	movs	r1, #1
 8002df4:	2002      	movs	r0, #2
 8002df6:	f7fd fc37 	bl	8000668 <lcd_print>
 8002dfa:	e071      	b.n	8002ee0 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <menu+0x1a08>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d16d      	bne.n	8002ee0 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 8002e04:	4a26      	ldr	r2, [pc, #152]	; (8002ea0 <menu+0x1a1c>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	2002      	movs	r0, #2
 8002e0a:	f7fd fc2d 	bl	8000668 <lcd_print>
 8002e0e:	e067      	b.n	8002ee0 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <menu+0x1a14>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d112      	bne.n	8002e3e <menu+0x19ba>
			if(dilSecim == 0){
 8002e18:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <menu+0x1a08>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 8002e20:	4a20      	ldr	r2, [pc, #128]	; (8002ea4 <menu+0x1a20>)
 8002e22:	2101      	movs	r1, #1
 8002e24:	2002      	movs	r0, #2
 8002e26:	f7fd fc1f 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <menu+0x1a08>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d156      	bne.n	8002ee0 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <menu+0x1a24>)
 8002e34:	2101      	movs	r1, #1
 8002e36:	2002      	movs	r0, #2
 8002e38:	f7fd fc16 	bl	8000668 <lcd_print>
 8002e3c:	e050      	b.n	8002ee0 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <menu+0x1a14>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d136      	bne.n	8002eb4 <menu+0x1a30>
			if(dilSecim == 0){
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <menu+0x1a08>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <menu+0x1a28>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	2002      	movs	r0, #2
 8002e54:	f7fd fc08 	bl	8000668 <lcd_print>
 8002e58:	e042      	b.n	8002ee0 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <menu+0x1a08>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d13e      	bne.n	8002ee0 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e62:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <menu+0x1a2c>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	2002      	movs	r0, #2
 8002e68:	f7fd fbfe 	bl	8000668 <lcd_print>
 8002e6c:	e038      	b.n	8002ee0 <menu+0x1a5c>
 8002e6e:	bf00      	nop
 8002e70:	20000c54 	.word	0x20000c54
 8002e74:	0800ddb4 	.word	0x0800ddb4
 8002e78:	40010800 	.word	0x40010800
 8002e7c:	20000c78 	.word	0x20000c78
 8002e80:	20000b38 	.word	0x20000b38
 8002e84:	20000c75 	.word	0x20000c75
 8002e88:	20000c49 	.word	0x20000c49
 8002e8c:	20000c6a 	.word	0x20000c6a
 8002e90:	0800de84 	.word	0x0800de84
 8002e94:	0800de98 	.word	0x0800de98
 8002e98:	20000c56 	.word	0x20000c56
 8002e9c:	0800deac 	.word	0x0800deac
 8002ea0:	0800debc 	.word	0x0800debc
 8002ea4:	0800decc 	.word	0x0800decc
 8002ea8:	0800dedc 	.word	0x0800dedc
 8002eac:	0800deec 	.word	0x0800deec
 8002eb0:	0800df00 	.word	0x0800df00
			}
		} else if(kapiTablaAcKonum == 3) {
 8002eb4:	4b9b      	ldr	r3, [pc, #620]	; (8003124 <menu+0x1ca0>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d111      	bne.n	8002ee0 <menu+0x1a5c>
			if(dilSecim == 0) {
 8002ebc:	4b9a      	ldr	r3, [pc, #616]	; (8003128 <menu+0x1ca4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 8002ec4:	4a99      	ldr	r2, [pc, #612]	; (800312c <menu+0x1ca8>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f7fd fbcd 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8002ece:	4b96      	ldr	r3, [pc, #600]	; (8003128 <menu+0x1ca4>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d104      	bne.n	8002ee0 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 8002ed6:	4a96      	ldr	r2, [pc, #600]	; (8003130 <menu+0x1cac>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2002      	movs	r0, #2
 8002edc:	f7fd fbc4 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	4894      	ldr	r0, [pc, #592]	; (8003134 <menu+0x1cb0>)
 8002ee4:	f006 fe98 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d115      	bne.n	8002f1a <menu+0x1a96>
 8002eee:	4b92      	ldr	r3, [pc, #584]	; (8003138 <menu+0x1cb4>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	f083 0301 	eor.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002efc:	4b89      	ldr	r3, [pc, #548]	; (8003124 <menu+0x1ca0>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b87      	ldr	r3, [pc, #540]	; (8003124 <menu+0x1ca0>)
 8002f06:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002f08:	4b86      	ldr	r3, [pc, #536]	; (8003124 <menu+0x1ca0>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d902      	bls.n	8002f16 <menu+0x1a92>
				kapiTablaAcKonum = 0;
 8002f10:	4b84      	ldr	r3, [pc, #528]	; (8003124 <menu+0x1ca0>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f16:	f003 f841 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1a:	2104      	movs	r1, #4
 8002f1c:	4885      	ldr	r0, [pc, #532]	; (8003134 <menu+0x1cb0>)
 8002f1e:	f006 fe7b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d115      	bne.n	8002f54 <menu+0x1ad0>
 8002f28:	4b83      	ldr	r3, [pc, #524]	; (8003138 <menu+0x1cb4>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00e      	beq.n	8002f54 <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f36:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <menu+0x1ca0>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4b79      	ldr	r3, [pc, #484]	; (8003124 <menu+0x1ca0>)
 8002f40:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f42:	4b78      	ldr	r3, [pc, #480]	; (8003124 <menu+0x1ca0>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d902      	bls.n	8002f50 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 8002f4a:	4b76      	ldr	r3, [pc, #472]	; (8003124 <menu+0x1ca0>)
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f50:	f003 f824 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f54:	2108      	movs	r1, #8
 8002f56:	4877      	ldr	r0, [pc, #476]	; (8003134 <menu+0x1cb0>)
 8002f58:	f006 fe5e 	bl	8009c18 <HAL_GPIO_ReadPin>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d11d      	bne.n	8002f9e <menu+0x1b1a>
 8002f62:	4b75      	ldr	r3, [pc, #468]	; (8003138 <menu+0x1cb4>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f083 0301 	eor.w	r3, r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d016      	beq.n	8002f9e <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8002f70:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <menu+0x1ca0>)
 8002f72:	781a      	ldrb	r2, [r3, #0]
 8002f74:	4b71      	ldr	r3, [pc, #452]	; (800313c <menu+0x1cb8>)
 8002f76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <menu+0x1ca0>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <menu+0x1b06>
 8002f82:	4b68      	ldr	r3, [pc, #416]	; (8003124 <menu+0x1ca0>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d106      	bne.n	8002f98 <menu+0x1b14>
				altLimit = 1;
 8002f8a:	4b6d      	ldr	r3, [pc, #436]	; (8003140 <menu+0x1cbc>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f90:	4b6b      	ldr	r3, [pc, #428]	; (8003140 <menu+0x1cbc>)
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	4b69      	ldr	r3, [pc, #420]	; (800313c <menu+0x1cb8>)
 8002f96:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <menu+0x1cc0>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002f9e:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <menu+0x1cc4>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	d17f      	bne.n	80030a6 <menu+0x1c22>
		if(dilSecim == 0) {
 8002fa6:	4b60      	ldr	r3, [pc, #384]	; (8003128 <menu+0x1ca4>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002fae:	4a67      	ldr	r2, [pc, #412]	; (800314c <menu+0x1cc8>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f7fd fb58 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002fb8:	4a65      	ldr	r2, [pc, #404]	; (8003150 <menu+0x1ccc>)
 8002fba:	2101      	movs	r1, #1
 8002fbc:	2002      	movs	r0, #2
 8002fbe:	f7fd fb53 	bl	8000668 <lcd_print>
 8002fc2:	e00d      	b.n	8002fe0 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 8002fc4:	4b58      	ldr	r3, [pc, #352]	; (8003128 <menu+0x1ca4>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d109      	bne.n	8002fe0 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002fcc:	4a61      	ldr	r2, [pc, #388]	; (8003154 <menu+0x1cd0>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fd fb49 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002fd6:	4a60      	ldr	r2, [pc, #384]	; (8003158 <menu+0x1cd4>)
 8002fd8:	2101      	movs	r1, #1
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f7fd fb44 	bl	8000668 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	; (800315c <menu+0x1cd8>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	220a      	movs	r2, #10
 8002fe6:	495e      	ldr	r1, [pc, #376]	; (8003160 <menu+0x1cdc>)
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f009 fe41 	bl	800cc70 <itoa>
		lcd_print(2,16,snum);
 8002fee:	4a5c      	ldr	r2, [pc, #368]	; (8003160 <menu+0x1cdc>)
 8002ff0:	2110      	movs	r1, #16
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	f7fd fb38 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	484e      	ldr	r0, [pc, #312]	; (8003134 <menu+0x1cb0>)
 8002ffc:	f006 fe0c 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d119      	bne.n	800303a <menu+0x1bb6>
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <menu+0x1cb4>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f083 0301 	eor.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <menu+0x1bb6>
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <menu+0x1ce0>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10e      	bne.n	800303a <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800301c:	4b4f      	ldr	r3, [pc, #316]	; (800315c <menu+0x1cd8>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	3301      	adds	r3, #1
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b4d      	ldr	r3, [pc, #308]	; (800315c <menu+0x1cd8>)
 8003026:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <menu+0x1cd8>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b05      	cmp	r3, #5
 800302e:	d902      	bls.n	8003036 <menu+0x1bb2>
				kapiTablaAcSure = 0;
 8003030:	4b4a      	ldr	r3, [pc, #296]	; (800315c <menu+0x1cd8>)
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003036:	f002 ffb1 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800303a:	2104      	movs	r1, #4
 800303c:	483d      	ldr	r0, [pc, #244]	; (8003134 <menu+0x1cb0>)
 800303e:	f006 fdeb 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003042:	4603      	mov	r3, r0
 8003044:	2b01      	cmp	r3, #1
 8003046:	d119      	bne.n	800307c <menu+0x1bf8>
 8003048:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <menu+0x1cb4>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f083 0301 	eor.w	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d012      	beq.n	800307c <menu+0x1bf8>
 8003056:	4b43      	ldr	r3, [pc, #268]	; (8003164 <menu+0x1ce0>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10e      	bne.n	800307c <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800305e:	4b3f      	ldr	r3, [pc, #252]	; (800315c <menu+0x1cd8>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	3b01      	subs	r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <menu+0x1cd8>)
 8003068:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800306a:	4b3c      	ldr	r3, [pc, #240]	; (800315c <menu+0x1cd8>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <menu+0x1cd8>)
 8003074:	2205      	movs	r2, #5
 8003076:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003078:	f002 ff90 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800307c:	2108      	movs	r1, #8
 800307e:	482d      	ldr	r0, [pc, #180]	; (8003134 <menu+0x1cb0>)
 8003080:	f006 fdca 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003084:	4603      	mov	r3, r0
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10d      	bne.n	80030a6 <menu+0x1c22>
 800308a:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <menu+0x1cb4>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	f083 0301 	eor.w	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 8003098:	4b30      	ldr	r3, [pc, #192]	; (800315c <menu+0x1cd8>)
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <menu+0x1cb8>)
 800309e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <menu+0x1cc0>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80030a6:	4b28      	ldr	r3, [pc, #160]	; (8003148 <menu+0x1cc4>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	f040 80bc 	bne.w	8003228 <menu+0x1da4>
		if(dilSecim == 0) {
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <menu+0x1ca4>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80030b8:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <menu+0x1ce4>)
 80030ba:	2101      	movs	r1, #1
 80030bc:	2001      	movs	r0, #1
 80030be:	f7fd fad3 	bl	8000668 <lcd_print>
 80030c2:	e008      	b.n	80030d6 <menu+0x1c52>
		} else if(dilSecim == 1) {
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <menu+0x1ca4>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d104      	bne.n	80030d6 <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80030cc:	4a27      	ldr	r2, [pc, #156]	; (800316c <menu+0x1ce8>)
 80030ce:	2101      	movs	r1, #1
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7fd fac9 	bl	8000668 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <menu+0x1cec>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d113      	bne.n	8003106 <menu+0x1c82>
			if(dilSecim == 0) {
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <menu+0x1ca4>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 80030e6:	4a11      	ldr	r2, [pc, #68]	; (800312c <menu+0x1ca8>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	2002      	movs	r0, #2
 80030ec:	f7fd fabc 	bl	8000668 <lcd_print>
 80030f0:	e04b      	b.n	800318a <menu+0x1d06>
			} else if(dilSecim == 1) {
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <menu+0x1ca4>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d147      	bne.n	800318a <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 80030fa:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <menu+0x1cac>)
 80030fc:	2101      	movs	r1, #1
 80030fe:	2002      	movs	r0, #2
 8003100:	f7fd fab2 	bl	8000668 <lcd_print>
 8003104:	e041      	b.n	800318a <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <menu+0x1cec>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d13d      	bne.n	800318a <menu+0x1d06>
			if(dilSecim == 0) {
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <menu+0x1ca4>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d130      	bne.n	8003178 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 8003116:	4a17      	ldr	r2, [pc, #92]	; (8003174 <menu+0x1cf0>)
 8003118:	2101      	movs	r1, #1
 800311a:	2002      	movs	r0, #2
 800311c:	f7fd faa4 	bl	8000668 <lcd_print>
 8003120:	e033      	b.n	800318a <menu+0x1d06>
 8003122:	bf00      	nop
 8003124:	20000c56 	.word	0x20000c56
 8003128:	20000c6a 	.word	0x20000c6a
 800312c:	0800db74 	.word	0x0800db74
 8003130:	0800db88 	.word	0x0800db88
 8003134:	40010800 	.word	0x40010800
 8003138:	20000c78 	.word	0x20000c78
 800313c:	20000b38 	.word	0x20000b38
 8003140:	20000c4f 	.word	0x20000c4f
 8003144:	20000c75 	.word	0x20000c75
 8003148:	20000c49 	.word	0x20000c49
 800314c:	0800df14 	.word	0x0800df14
 8003150:	0800ddd8 	.word	0x0800ddd8
 8003154:	0800df28 	.word	0x0800df28
 8003158:	0800ddfc 	.word	0x0800ddfc
 800315c:	20000c64 	.word	0x20000c64
 8003160:	20000bcc 	.word	0x20000bcc
 8003164:	20000c54 	.word	0x20000c54
 8003168:	0800df3c 	.word	0x0800df3c
 800316c:	0800df50 	.word	0x0800df50
 8003170:	20000c57 	.word	0x20000c57
 8003174:	0800dbd4 	.word	0x0800dbd4
			} else if(dilSecim == 1) {
 8003178:	4b99      	ldr	r3, [pc, #612]	; (80033e0 <menu+0x1f5c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d104      	bne.n	800318a <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 8003180:	4a98      	ldr	r2, [pc, #608]	; (80033e4 <menu+0x1f60>)
 8003182:	2101      	movs	r1, #1
 8003184:	2002      	movs	r0, #2
 8003186:	f7fd fa6f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800318a:	2102      	movs	r1, #2
 800318c:	4896      	ldr	r0, [pc, #600]	; (80033e8 <menu+0x1f64>)
 800318e:	f006 fd43 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003192:	4603      	mov	r3, r0
 8003194:	2b01      	cmp	r3, #1
 8003196:	d115      	bne.n	80031c4 <menu+0x1d40>
 8003198:	4b94      	ldr	r3, [pc, #592]	; (80033ec <menu+0x1f68>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	f083 0301 	eor.w	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00e      	beq.n	80031c4 <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 80031a6:	4b92      	ldr	r3, [pc, #584]	; (80033f0 <menu+0x1f6c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b90      	ldr	r3, [pc, #576]	; (80033f0 <menu+0x1f6c>)
 80031b0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80031b2:	4b8f      	ldr	r3, [pc, #572]	; (80033f0 <menu+0x1f6c>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d902      	bls.n	80031c0 <menu+0x1d3c>
				yukariYavasLimit = 0;
 80031ba:	4b8d      	ldr	r3, [pc, #564]	; (80033f0 <menu+0x1f6c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031c0:	f002 feec 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c4:	2104      	movs	r1, #4
 80031c6:	4888      	ldr	r0, [pc, #544]	; (80033e8 <menu+0x1f64>)
 80031c8:	f006 fd26 	bl	8009c18 <HAL_GPIO_ReadPin>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d115      	bne.n	80031fe <menu+0x1d7a>
 80031d2:	4b86      	ldr	r3, [pc, #536]	; (80033ec <menu+0x1f68>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 80031e0:	4b83      	ldr	r3, [pc, #524]	; (80033f0 <menu+0x1f6c>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b81      	ldr	r3, [pc, #516]	; (80033f0 <menu+0x1f6c>)
 80031ea:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80031ec:	4b80      	ldr	r3, [pc, #512]	; (80033f0 <menu+0x1f6c>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <menu+0x1d76>
		   		yukariYavasLimit = 1;
 80031f4:	4b7e      	ldr	r3, [pc, #504]	; (80033f0 <menu+0x1f6c>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031fa:	f002 fecf 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fe:	2108      	movs	r1, #8
 8003200:	4879      	ldr	r0, [pc, #484]	; (80033e8 <menu+0x1f64>)
 8003202:	f006 fd09 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10d      	bne.n	8003228 <menu+0x1da4>
 800320c:	4b77      	ldr	r3, [pc, #476]	; (80033ec <menu+0x1f68>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	f083 0301 	eor.w	r3, r3, #1
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 800321a:	4b75      	ldr	r3, [pc, #468]	; (80033f0 <menu+0x1f6c>)
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <menu+0x1f70>)
 8003220:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003222:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <menu+0x1f74>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003228:	4b74      	ldr	r3, [pc, #464]	; (80033fc <menu+0x1f78>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b11      	cmp	r3, #17
 800322e:	f040 80c3 	bne.w	80033b8 <menu+0x1f34>
		if(dilSecim == 0) {
 8003232:	4b6b      	ldr	r3, [pc, #428]	; (80033e0 <menu+0x1f5c>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800323a:	4a71      	ldr	r2, [pc, #452]	; (8003400 <menu+0x1f7c>)
 800323c:	2101      	movs	r1, #1
 800323e:	2001      	movs	r0, #1
 8003240:	f7fd fa12 	bl	8000668 <lcd_print>
 8003244:	e008      	b.n	8003258 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 8003246:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <menu+0x1f5c>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d104      	bne.n	8003258 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800324e:	4a6d      	ldr	r2, [pc, #436]	; (8003404 <menu+0x1f80>)
 8003250:	2101      	movs	r1, #1
 8003252:	2001      	movs	r0, #1
 8003254:	f7fd fa08 	bl	8000668 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003258:	4b6b      	ldr	r3, [pc, #428]	; (8003408 <menu+0x1f84>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d113      	bne.n	8003288 <menu+0x1e04>
			if(dilSecim == 0){
 8003260:	4b5f      	ldr	r3, [pc, #380]	; (80033e0 <menu+0x1f5c>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 8003268:	4a68      	ldr	r2, [pc, #416]	; (800340c <menu+0x1f88>)
 800326a:	2101      	movs	r1, #1
 800326c:	2002      	movs	r0, #2
 800326e:	f7fd f9fb 	bl	8000668 <lcd_print>
 8003272:	e038      	b.n	80032e6 <menu+0x1e62>
			} else if(dilSecim == 1){
 8003274:	4b5a      	ldr	r3, [pc, #360]	; (80033e0 <menu+0x1f5c>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d134      	bne.n	80032e6 <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 800327c:	4a64      	ldr	r2, [pc, #400]	; (8003410 <menu+0x1f8c>)
 800327e:	2101      	movs	r1, #1
 8003280:	2002      	movs	r0, #2
 8003282:	f7fd f9f1 	bl	8000668 <lcd_print>
 8003286:	e02e      	b.n	80032e6 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003288:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <menu+0x1f84>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d113      	bne.n	80032b8 <menu+0x1e34>
			if(dilSecim == 0){
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <menu+0x1f5c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003298:	4a5e      	ldr	r2, [pc, #376]	; (8003414 <menu+0x1f90>)
 800329a:	2101      	movs	r1, #1
 800329c:	2002      	movs	r0, #2
 800329e:	f7fd f9e3 	bl	8000668 <lcd_print>
 80032a2:	e020      	b.n	80032e6 <menu+0x1e62>
			} else if(dilSecim == 1) {
 80032a4:	4b4e      	ldr	r3, [pc, #312]	; (80033e0 <menu+0x1f5c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d11c      	bne.n	80032e6 <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 80032ac:	4a5a      	ldr	r2, [pc, #360]	; (8003418 <menu+0x1f94>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	2002      	movs	r0, #2
 80032b2:	f7fd f9d9 	bl	8000668 <lcd_print>
 80032b6:	e016      	b.n	80032e6 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <menu+0x1f84>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d112      	bne.n	80032e6 <menu+0x1e62>
			if(dilSecim == 0) {
 80032c0:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <menu+0x1f5c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <menu+0x1f98>)
 80032ca:	2101      	movs	r1, #1
 80032cc:	2002      	movs	r0, #2
 80032ce:	f7fd f9cb 	bl	8000668 <lcd_print>
 80032d2:	e008      	b.n	80032e6 <menu+0x1e62>
			} else if(dilSecim == 1) {
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <menu+0x1f5c>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d104      	bne.n	80032e6 <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 80032dc:	4a50      	ldr	r2, [pc, #320]	; (8003420 <menu+0x1f9c>)
 80032de:	2101      	movs	r1, #1
 80032e0:	2002      	movs	r0, #2
 80032e2:	f7fd f9c1 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032e6:	2102      	movs	r1, #2
 80032e8:	483f      	ldr	r0, [pc, #252]	; (80033e8 <menu+0x1f64>)
 80032ea:	f006 fc95 	bl	8009c18 <HAL_GPIO_ReadPin>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d115      	bne.n	8003320 <menu+0x1e9c>
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <menu+0x1f68>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	f083 0301 	eor.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00e      	beq.n	8003320 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <menu+0x1f84>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <menu+0x1f84>)
 800330c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800330e:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <menu+0x1f84>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d902      	bls.n	800331c <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 8003316:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <menu+0x1f84>)
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800331c:	f002 fe3e 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003320:	2104      	movs	r1, #4
 8003322:	4831      	ldr	r0, [pc, #196]	; (80033e8 <menu+0x1f64>)
 8003324:	f006 fc78 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003328:	4603      	mov	r3, r0
 800332a:	2b01      	cmp	r3, #1
 800332c:	d115      	bne.n	800335a <menu+0x1ed6>
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <menu+0x1f68>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	f083 0301 	eor.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800333c:	4b32      	ldr	r3, [pc, #200]	; (8003408 <menu+0x1f84>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	3b01      	subs	r3, #1
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <menu+0x1f84>)
 8003346:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003348:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <menu+0x1f84>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d902      	bls.n	8003356 <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <menu+0x1f84>)
 8003352:	2202      	movs	r2, #2
 8003354:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003356:	f002 fe21 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800335a:	2108      	movs	r1, #8
 800335c:	4822      	ldr	r0, [pc, #136]	; (80033e8 <menu+0x1f64>)
 800335e:	f006 fc5b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d127      	bne.n	80033b8 <menu+0x1f34>
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <menu+0x1f68>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	f083 0301 	eor.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d020      	beq.n	80033b8 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <menu+0x1f84>)
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <menu+0x1f70>)
 800337c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800337e:	4b22      	ldr	r3, [pc, #136]	; (8003408 <menu+0x1f84>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <menu+0x1f0a>
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <menu+0x1f84>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d106      	bne.n	800339c <menu+0x1f18>
				calismaSekli = 0;
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <menu+0x1fa0>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003394:	4b23      	ldr	r3, [pc, #140]	; (8003424 <menu+0x1fa0>)
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <menu+0x1f70>)
 800339a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <menu+0x1f84>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d106      	bne.n	80033b2 <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 80033a4:	4b20      	ldr	r3, [pc, #128]	; (8003428 <menu+0x1fa4>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80033aa:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <menu+0x1fa4>)
 80033ac:	781a      	ldrb	r2, [r3, #0]
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <menu+0x1f70>)
 80033b0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <menu+0x1f74>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <menu+0x1f78>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b12      	cmp	r3, #18
 80033be:	f040 80d5 	bne.w	800356c <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <menu+0x1f84>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d13c      	bne.n	8003444 <menu+0x1fc0>
			if(dilSecim == 0) {
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <menu+0x1f5c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d12e      	bne.n	8003430 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80033d2:	4a16      	ldr	r2, [pc, #88]	; (800342c <menu+0x1fa8>)
 80033d4:	2101      	movs	r1, #1
 80033d6:	2001      	movs	r0, #1
 80033d8:	f7fd f946 	bl	8000668 <lcd_print>
 80033dc:	e048      	b.n	8003470 <menu+0x1fec>
 80033de:	bf00      	nop
 80033e0:	20000c6a 	.word	0x20000c6a
 80033e4:	0800dbe8 	.word	0x0800dbe8
 80033e8:	40010800 	.word	0x40010800
 80033ec:	20000c78 	.word	0x20000c78
 80033f0:	20000c57 	.word	0x20000c57
 80033f4:	20000b38 	.word	0x20000b38
 80033f8:	20000c75 	.word	0x20000c75
 80033fc:	20000c49 	.word	0x20000c49
 8003400:	0800df64 	.word	0x0800df64
 8003404:	0800df78 	.word	0x0800df78
 8003408:	20000c58 	.word	0x20000c58
 800340c:	0800df8c 	.word	0x0800df8c
 8003410:	0800df9c 	.word	0x0800df9c
 8003414:	0800dfac 	.word	0x0800dfac
 8003418:	0800dfbc 	.word	0x0800dfbc
 800341c:	0800db74 	.word	0x0800db74
 8003420:	0800db88 	.word	0x0800db88
 8003424:	20000c4a 	.word	0x20000c4a
 8003428:	20000c5b 	.word	0x20000c5b
 800342c:	0800dfcc 	.word	0x0800dfcc
			} else if(dilSecim == 1) {
 8003430:	4b7b      	ldr	r3, [pc, #492]	; (8003620 <menu+0x219c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d11b      	bne.n	8003470 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003438:	4a7a      	ldr	r2, [pc, #488]	; (8003624 <menu+0x21a0>)
 800343a:	2101      	movs	r1, #1
 800343c:	2001      	movs	r0, #1
 800343e:	f7fd f913 	bl	8000668 <lcd_print>
 8003442:	e015      	b.n	8003470 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003444:	4b78      	ldr	r3, [pc, #480]	; (8003628 <menu+0x21a4>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d111      	bne.n	8003470 <menu+0x1fec>
			if(dilSecim == 0){
 800344c:	4b74      	ldr	r3, [pc, #464]	; (8003620 <menu+0x219c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003454:	4a75      	ldr	r2, [pc, #468]	; (800362c <menu+0x21a8>)
 8003456:	2101      	movs	r1, #1
 8003458:	2001      	movs	r0, #1
 800345a:	f7fd f905 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 800345e:	4b70      	ldr	r3, [pc, #448]	; (8003620 <menu+0x219c>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d104      	bne.n	8003470 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003466:	4a72      	ldr	r2, [pc, #456]	; (8003630 <menu+0x21ac>)
 8003468:	2101      	movs	r1, #1
 800346a:	2001      	movs	r0, #1
 800346c:	f7fd f8fc 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003470:	4b70      	ldr	r3, [pc, #448]	; (8003634 <menu+0x21b0>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d113      	bne.n	80034a0 <menu+0x201c>
			if(dilSecim == 0) {
 8003478:	4b69      	ldr	r3, [pc, #420]	; (8003620 <menu+0x219c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 8003480:	4a6d      	ldr	r2, [pc, #436]	; (8003638 <menu+0x21b4>)
 8003482:	2101      	movs	r1, #1
 8003484:	2002      	movs	r0, #2
 8003486:	f7fd f8ef 	bl	8000668 <lcd_print>
 800348a:	e020      	b.n	80034ce <menu+0x204a>
			} else if(dilSecim == 1){
 800348c:	4b64      	ldr	r3, [pc, #400]	; (8003620 <menu+0x219c>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d11c      	bne.n	80034ce <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 8003494:	4a69      	ldr	r2, [pc, #420]	; (800363c <menu+0x21b8>)
 8003496:	2101      	movs	r1, #1
 8003498:	2002      	movs	r0, #2
 800349a:	f7fd f8e5 	bl	8000668 <lcd_print>
 800349e:	e016      	b.n	80034ce <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80034a0:	4b64      	ldr	r3, [pc, #400]	; (8003634 <menu+0x21b0>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d112      	bne.n	80034ce <menu+0x204a>
			if(dilSecim == 0){
 80034a8:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <menu+0x219c>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 80034b0:	4a63      	ldr	r2, [pc, #396]	; (8003640 <menu+0x21bc>)
 80034b2:	2101      	movs	r1, #1
 80034b4:	2002      	movs	r0, #2
 80034b6:	f7fd f8d7 	bl	8000668 <lcd_print>
 80034ba:	e008      	b.n	80034ce <menu+0x204a>
			} else if(dilSecim == 1){
 80034bc:	4b58      	ldr	r3, [pc, #352]	; (8003620 <menu+0x219c>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d104      	bne.n	80034ce <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 80034c4:	4a5f      	ldr	r2, [pc, #380]	; (8003644 <menu+0x21c0>)
 80034c6:	2101      	movs	r1, #1
 80034c8:	2002      	movs	r0, #2
 80034ca:	f7fd f8cd 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ce:	2102      	movs	r1, #2
 80034d0:	485d      	ldr	r0, [pc, #372]	; (8003648 <menu+0x21c4>)
 80034d2:	f006 fba1 	bl	8009c18 <HAL_GPIO_ReadPin>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d115      	bne.n	8003508 <menu+0x2084>
 80034dc:	4b5b      	ldr	r3, [pc, #364]	; (800364c <menu+0x21c8>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f083 0301 	eor.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00e      	beq.n	8003508 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80034ea:	4b52      	ldr	r3, [pc, #328]	; (8003634 <menu+0x21b0>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b50      	ldr	r3, [pc, #320]	; (8003634 <menu+0x21b0>)
 80034f4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80034f6:	4b4f      	ldr	r3, [pc, #316]	; (8003634 <menu+0x21b0>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d902      	bls.n	8003504 <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 80034fe:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <menu+0x21b0>)
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003504:	f002 fd4a 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003508:	2104      	movs	r1, #4
 800350a:	484f      	ldr	r0, [pc, #316]	; (8003648 <menu+0x21c4>)
 800350c:	f006 fb84 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003510:	4603      	mov	r3, r0
 8003512:	2b01      	cmp	r3, #1
 8003514:	d115      	bne.n	8003542 <menu+0x20be>
 8003516:	4b4d      	ldr	r3, [pc, #308]	; (800364c <menu+0x21c8>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	f083 0301 	eor.w	r3, r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00e      	beq.n	8003542 <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003524:	4b43      	ldr	r3, [pc, #268]	; (8003634 <menu+0x21b0>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	3b01      	subs	r3, #1
 800352a:	b2da      	uxtb	r2, r3
 800352c:	4b41      	ldr	r3, [pc, #260]	; (8003634 <menu+0x21b0>)
 800352e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003530:	4b40      	ldr	r3, [pc, #256]	; (8003634 <menu+0x21b0>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 8003538:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <menu+0x21b0>)
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800353e:	f002 fd2d 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003542:	2108      	movs	r1, #8
 8003544:	4840      	ldr	r0, [pc, #256]	; (8003648 <menu+0x21c4>)
 8003546:	f006 fb67 	bl	8009c18 <HAL_GPIO_ReadPin>
 800354a:	4603      	mov	r3, r0
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10d      	bne.n	800356c <menu+0x20e8>
 8003550:	4b3e      	ldr	r3, [pc, #248]	; (800364c <menu+0x21c8>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	f083 0301 	eor.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d006      	beq.n	800356c <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 800355e:	4b35      	ldr	r3, [pc, #212]	; (8003634 <menu+0x21b0>)
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <menu+0x21cc>)
 8003564:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003566:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <menu+0x21d0>)
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800356c:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <menu+0x21d4>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b13      	cmp	r3, #19
 8003572:	f040 80d5 	bne.w	8003720 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <menu+0x21a4>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d113      	bne.n	80035a6 <menu+0x2122>
			if(dilSecim == 0) {
 800357e:	4b28      	ldr	r3, [pc, #160]	; (8003620 <menu+0x219c>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003586:	4a35      	ldr	r2, [pc, #212]	; (800365c <menu+0x21d8>)
 8003588:	2101      	movs	r1, #1
 800358a:	2001      	movs	r0, #1
 800358c:	f7fd f86c 	bl	8000668 <lcd_print>
 8003590:	e01f      	b.n	80035d2 <menu+0x214e>
			} else if(dilSecim == 1) {
 8003592:	4b23      	ldr	r3, [pc, #140]	; (8003620 <menu+0x219c>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d11b      	bne.n	80035d2 <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800359a:	4a31      	ldr	r2, [pc, #196]	; (8003660 <menu+0x21dc>)
 800359c:	2101      	movs	r1, #1
 800359e:	2001      	movs	r0, #1
 80035a0:	f7fd f862 	bl	8000668 <lcd_print>
 80035a4:	e015      	b.n	80035d2 <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <menu+0x21a4>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d111      	bne.n	80035d2 <menu+0x214e>
			if(dilSecim == 0) {
 80035ae:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <menu+0x219c>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80035b6:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <menu+0x21e0>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	2001      	movs	r0, #1
 80035bc:	f7fd f854 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 80035c0:	4b17      	ldr	r3, [pc, #92]	; (8003620 <menu+0x219c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d104      	bne.n	80035d2 <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <menu+0x21e4>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7fd f84b 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80035d2:	4b26      	ldr	r3, [pc, #152]	; (800366c <menu+0x21e8>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d113      	bne.n	8003602 <menu+0x217e>
			if(dilSecim == 0) {
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <menu+0x219c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <menu+0x21b4>)
 80035e4:	2101      	movs	r1, #1
 80035e6:	2002      	movs	r0, #2
 80035e8:	f7fd f83e 	bl	8000668 <lcd_print>
 80035ec:	e049      	b.n	8003682 <menu+0x21fe>
			} else if(dilSecim == 1) {
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <menu+0x219c>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d145      	bne.n	8003682 <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <menu+0x21b8>)
 80035f8:	2101      	movs	r1, #1
 80035fa:	2002      	movs	r0, #2
 80035fc:	f7fd f834 	bl	8000668 <lcd_print>
 8003600:	e03f      	b.n	8003682 <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <menu+0x21e8>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d13b      	bne.n	8003682 <menu+0x21fe>
			if(dilSecim == 0) {
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <menu+0x219c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d12e      	bne.n	8003670 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 8003612:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <menu+0x21bc>)
 8003614:	2101      	movs	r1, #1
 8003616:	2002      	movs	r0, #2
 8003618:	f7fd f826 	bl	8000668 <lcd_print>
 800361c:	e031      	b.n	8003682 <menu+0x21fe>
 800361e:	bf00      	nop
 8003620:	20000c6a 	.word	0x20000c6a
 8003624:	0800dfe0 	.word	0x0800dfe0
 8003628:	20000c58 	.word	0x20000c58
 800362c:	0800dff0 	.word	0x0800dff0
 8003630:	0800e004 	.word	0x0800e004
 8003634:	20000c59 	.word	0x20000c59
 8003638:	0800db74 	.word	0x0800db74
 800363c:	0800db88 	.word	0x0800db88
 8003640:	0800dbd4 	.word	0x0800dbd4
 8003644:	0800dbe8 	.word	0x0800dbe8
 8003648:	40010800 	.word	0x40010800
 800364c:	20000c78 	.word	0x20000c78
 8003650:	20000b38 	.word	0x20000b38
 8003654:	20000c75 	.word	0x20000c75
 8003658:	20000c49 	.word	0x20000c49
 800365c:	0800e018 	.word	0x0800e018
 8003660:	0800e02c 	.word	0x0800e02c
 8003664:	0800e040 	.word	0x0800e040
 8003668:	0800e054 	.word	0x0800e054
 800366c:	20000c5a 	.word	0x20000c5a
			} else if(dilSecim == 1) {
 8003670:	4b90      	ldr	r3, [pc, #576]	; (80038b4 <menu+0x2430>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d104      	bne.n	8003682 <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 8003678:	4a8f      	ldr	r2, [pc, #572]	; (80038b8 <menu+0x2434>)
 800367a:	2101      	movs	r1, #1
 800367c:	2002      	movs	r0, #2
 800367e:	f7fc fff3 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003682:	2102      	movs	r1, #2
 8003684:	488d      	ldr	r0, [pc, #564]	; (80038bc <menu+0x2438>)
 8003686:	f006 fac7 	bl	8009c18 <HAL_GPIO_ReadPin>
 800368a:	4603      	mov	r3, r0
 800368c:	2b01      	cmp	r3, #1
 800368e:	d115      	bne.n	80036bc <menu+0x2238>
 8003690:	4b8b      	ldr	r3, [pc, #556]	; (80038c0 <menu+0x243c>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	f083 0301 	eor.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00e      	beq.n	80036bc <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800369e:	4b89      	ldr	r3, [pc, #548]	; (80038c4 <menu+0x2440>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4b87      	ldr	r3, [pc, #540]	; (80038c4 <menu+0x2440>)
 80036a8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80036aa:	4b86      	ldr	r3, [pc, #536]	; (80038c4 <menu+0x2440>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d902      	bls.n	80036b8 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 80036b2:	4b84      	ldr	r3, [pc, #528]	; (80038c4 <menu+0x2440>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036b8:	f002 fc70 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036bc:	2104      	movs	r1, #4
 80036be:	487f      	ldr	r0, [pc, #508]	; (80038bc <menu+0x2438>)
 80036c0:	f006 faaa 	bl	8009c18 <HAL_GPIO_ReadPin>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d115      	bne.n	80036f6 <menu+0x2272>
 80036ca:	4b7d      	ldr	r3, [pc, #500]	; (80038c0 <menu+0x243c>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80036d8:	4b7a      	ldr	r3, [pc, #488]	; (80038c4 <menu+0x2440>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	3b01      	subs	r3, #1
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	4b78      	ldr	r3, [pc, #480]	; (80038c4 <menu+0x2440>)
 80036e2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80036e4:	4b77      	ldr	r3, [pc, #476]	; (80038c4 <menu+0x2440>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 80036ec:	4b75      	ldr	r3, [pc, #468]	; (80038c4 <menu+0x2440>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036f2:	f002 fc53 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f6:	2108      	movs	r1, #8
 80036f8:	4870      	ldr	r0, [pc, #448]	; (80038bc <menu+0x2438>)
 80036fa:	f006 fa8d 	bl	8009c18 <HAL_GPIO_ReadPin>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10d      	bne.n	8003720 <menu+0x229c>
 8003704:	4b6e      	ldr	r3, [pc, #440]	; (80038c0 <menu+0x243c>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f083 0301 	eor.w	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003712:	4b6c      	ldr	r3, [pc, #432]	; (80038c4 <menu+0x2440>)
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <menu+0x2444>)
 8003718:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800371a:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <menu+0x2448>)
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003720:	4b6b      	ldr	r3, [pc, #428]	; (80038d0 <menu+0x244c>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b14      	cmp	r3, #20
 8003726:	f040 80b5 	bne.w	8003894 <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 800372a:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <menu+0x2450>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d113      	bne.n	800375a <menu+0x22d6>
			if(dilSecim == 0) {
 8003732:	4b60      	ldr	r3, [pc, #384]	; (80038b4 <menu+0x2430>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d105      	bne.n	8003746 <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800373a:	4a67      	ldr	r2, [pc, #412]	; (80038d8 <menu+0x2454>)
 800373c:	2101      	movs	r1, #1
 800373e:	2001      	movs	r0, #1
 8003740:	f7fc ff92 	bl	8000668 <lcd_print>
 8003744:	e020      	b.n	8003788 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003746:	4b5b      	ldr	r3, [pc, #364]	; (80038b4 <menu+0x2430>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d11c      	bne.n	8003788 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800374e:	4a63      	ldr	r2, [pc, #396]	; (80038dc <menu+0x2458>)
 8003750:	2101      	movs	r1, #1
 8003752:	2001      	movs	r0, #1
 8003754:	f7fc ff88 	bl	8000668 <lcd_print>
 8003758:	e016      	b.n	8003788 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800375a:	4b5e      	ldr	r3, [pc, #376]	; (80038d4 <menu+0x2450>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d112      	bne.n	8003788 <menu+0x2304>
			if(dilSecim == 0) {
 8003762:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <menu+0x2430>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800376a:	4a5d      	ldr	r2, [pc, #372]	; (80038e0 <menu+0x245c>)
 800376c:	2101      	movs	r1, #1
 800376e:	2001      	movs	r0, #1
 8003770:	f7fc ff7a 	bl	8000668 <lcd_print>
 8003774:	e008      	b.n	8003788 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003776:	4b4f      	ldr	r3, [pc, #316]	; (80038b4 <menu+0x2430>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d104      	bne.n	8003788 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800377e:	4a59      	ldr	r2, [pc, #356]	; (80038e4 <menu+0x2460>)
 8003780:	2101      	movs	r1, #1
 8003782:	2001      	movs	r0, #1
 8003784:	f7fc ff70 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003788:	4b57      	ldr	r3, [pc, #348]	; (80038e8 <menu+0x2464>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d113      	bne.n	80037b8 <menu+0x2334>
			if(dilSecim == 0) {
 8003790:	4b48      	ldr	r3, [pc, #288]	; (80038b4 <menu+0x2430>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 8003798:	4a54      	ldr	r2, [pc, #336]	; (80038ec <menu+0x2468>)
 800379a:	2101      	movs	r1, #1
 800379c:	2002      	movs	r0, #2
 800379e:	f7fc ff63 	bl	8000668 <lcd_print>
 80037a2:	e020      	b.n	80037e6 <menu+0x2362>
			} else if(dilSecim == 1) {
 80037a4:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <menu+0x2430>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d11c      	bne.n	80037e6 <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 80037ac:	4a50      	ldr	r2, [pc, #320]	; (80038f0 <menu+0x246c>)
 80037ae:	2101      	movs	r1, #1
 80037b0:	2002      	movs	r0, #2
 80037b2:	f7fc ff59 	bl	8000668 <lcd_print>
 80037b6:	e016      	b.n	80037e6 <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <menu+0x2464>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d112      	bne.n	80037e6 <menu+0x2362>
			if(dilSecim == 0) {
 80037c0:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <menu+0x2430>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 80037c8:	4a4a      	ldr	r2, [pc, #296]	; (80038f4 <menu+0x2470>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	2002      	movs	r0, #2
 80037ce:	f7fc ff4b 	bl	8000668 <lcd_print>
 80037d2:	e008      	b.n	80037e6 <menu+0x2362>
			} else if(dilSecim == 1) {
 80037d4:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <menu+0x2430>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d104      	bne.n	80037e6 <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 80037dc:	4a46      	ldr	r2, [pc, #280]	; (80038f8 <menu+0x2474>)
 80037de:	2101      	movs	r1, #1
 80037e0:	2002      	movs	r0, #2
 80037e2:	f7fc ff41 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037e6:	2102      	movs	r1, #2
 80037e8:	4834      	ldr	r0, [pc, #208]	; (80038bc <menu+0x2438>)
 80037ea:	f006 fa15 	bl	8009c18 <HAL_GPIO_ReadPin>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d119      	bne.n	8003828 <menu+0x23a4>
 80037f4:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <menu+0x243c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f083 0301 	eor.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d012      	beq.n	8003828 <menu+0x23a4>
 8003802:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <menu+0x2450>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d10e      	bne.n	8003828 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800380a:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <menu+0x2464>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <menu+0x2464>)
 8003814:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <menu+0x2464>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d902      	bls.n	8003824 <menu+0x23a0>
				devirmeSilindirTipi = 0;
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <menu+0x2464>)
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003824:	f002 fbba 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003828:	2104      	movs	r1, #4
 800382a:	4824      	ldr	r0, [pc, #144]	; (80038bc <menu+0x2438>)
 800382c:	f006 f9f4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003830:	4603      	mov	r3, r0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d119      	bne.n	800386a <menu+0x23e6>
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <menu+0x243c>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	f083 0301 	eor.w	r3, r3, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <menu+0x23e6>
 8003844:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <menu+0x2450>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d10e      	bne.n	800386a <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <menu+0x2464>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3b01      	subs	r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <menu+0x2464>)
 8003856:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <menu+0x2464>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <menu+0x2464>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003866:	f002 fb99 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800386a:	2108      	movs	r1, #8
 800386c:	4813      	ldr	r0, [pc, #76]	; (80038bc <menu+0x2438>)
 800386e:	f006 f9d3 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003872:	4603      	mov	r3, r0
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10d      	bne.n	8003894 <menu+0x2410>
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <menu+0x243c>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f083 0301 	eor.w	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 8003886:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <menu+0x2464>)
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <menu+0x2444>)
 800388c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <menu+0x2448>)
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <menu+0x244c>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b15      	cmp	r3, #21
 800389a:	f040 80c2 	bne.w	8003a22 <menu+0x259e>
		if(dilSecim == 0) {
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <menu+0x2430>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d12c      	bne.n	8003900 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <menu+0x2478>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	2001      	movs	r0, #1
 80038ac:	f7fc fedc 	bl	8000668 <lcd_print>
 80038b0:	e02f      	b.n	8003912 <menu+0x248e>
 80038b2:	bf00      	nop
 80038b4:	20000c6a 	.word	0x20000c6a
 80038b8:	0800dbe8 	.word	0x0800dbe8
 80038bc:	40010800 	.word	0x40010800
 80038c0:	20000c78 	.word	0x20000c78
 80038c4:	20000c5a 	.word	0x20000c5a
 80038c8:	20000b38 	.word	0x20000b38
 80038cc:	20000c75 	.word	0x20000c75
 80038d0:	20000c49 	.word	0x20000c49
 80038d4:	20000c58 	.word	0x20000c58
 80038d8:	0800e068 	.word	0x0800e068
 80038dc:	0800e07c 	.word	0x0800e07c
 80038e0:	0800e090 	.word	0x0800e090
 80038e4:	0800e0a4 	.word	0x0800e0a4
 80038e8:	20000c5b 	.word	0x20000c5b
 80038ec:	0800e0b8 	.word	0x0800e0b8
 80038f0:	0800e0cc 	.word	0x0800e0cc
 80038f4:	0800e0dc 	.word	0x0800e0dc
 80038f8:	0800e0f0 	.word	0x0800e0f0
 80038fc:	0800e100 	.word	0x0800e100
		} else if(dilSecim == 1) {
 8003900:	4b9c      	ldr	r3, [pc, #624]	; (8003b74 <menu+0x26f0>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d104      	bne.n	8003912 <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003908:	4a9b      	ldr	r2, [pc, #620]	; (8003b78 <menu+0x26f4>)
 800390a:	2101      	movs	r1, #1
 800390c:	2001      	movs	r0, #1
 800390e:	f7fc feab 	bl	8000668 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003912:	4b9a      	ldr	r3, [pc, #616]	; (8003b7c <menu+0x26f8>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d112      	bne.n	8003940 <menu+0x24bc>
			if(dilSecim == 0) {
 800391a:	4b96      	ldr	r3, [pc, #600]	; (8003b74 <menu+0x26f0>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 8003922:	4a97      	ldr	r2, [pc, #604]	; (8003b80 <menu+0x26fc>)
 8003924:	2101      	movs	r1, #1
 8003926:	2002      	movs	r0, #2
 8003928:	f7fc fe9e 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 800392c:	4b91      	ldr	r3, [pc, #580]	; (8003b74 <menu+0x26f0>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d11c      	bne.n	800396e <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 8003934:	4a93      	ldr	r2, [pc, #588]	; (8003b84 <menu+0x2700>)
 8003936:	2101      	movs	r1, #1
 8003938:	2002      	movs	r0, #2
 800393a:	f7fc fe95 	bl	8000668 <lcd_print>
 800393e:	e016      	b.n	800396e <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003940:	4b8e      	ldr	r3, [pc, #568]	; (8003b7c <menu+0x26f8>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d112      	bne.n	800396e <menu+0x24ea>
			if(dilSecim == 0) {
 8003948:	4b8a      	ldr	r3, [pc, #552]	; (8003b74 <menu+0x26f0>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8003950:	4a8d      	ldr	r2, [pc, #564]	; (8003b88 <menu+0x2704>)
 8003952:	2101      	movs	r1, #1
 8003954:	2002      	movs	r0, #2
 8003956:	f7fc fe87 	bl	8000668 <lcd_print>
 800395a:	e008      	b.n	800396e <menu+0x24ea>
			} else if(dilSecim == 1) {
 800395c:	4b85      	ldr	r3, [pc, #532]	; (8003b74 <menu+0x26f0>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d104      	bne.n	800396e <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 8003964:	4a89      	ldr	r2, [pc, #548]	; (8003b8c <menu+0x2708>)
 8003966:	2101      	movs	r1, #1
 8003968:	2002      	movs	r0, #2
 800396a:	f7fc fe7d 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800396e:	2102      	movs	r1, #2
 8003970:	4887      	ldr	r0, [pc, #540]	; (8003b90 <menu+0x270c>)
 8003972:	f006 f951 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d115      	bne.n	80039a8 <menu+0x2524>
 800397c:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <menu+0x2710>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	f083 0301 	eor.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 800398a:	4b7c      	ldr	r3, [pc, #496]	; (8003b7c <menu+0x26f8>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b7a      	ldr	r3, [pc, #488]	; (8003b7c <menu+0x26f8>)
 8003994:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003996:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <menu+0x26f8>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d902      	bls.n	80039a4 <menu+0x2520>
				platformSilindirTipi = 0;
 800399e:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <menu+0x26f8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039a4:	f002 fafa 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a8:	2104      	movs	r1, #4
 80039aa:	4879      	ldr	r0, [pc, #484]	; (8003b90 <menu+0x270c>)
 80039ac:	f006 f934 	bl	8009c18 <HAL_GPIO_ReadPin>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d115      	bne.n	80039e2 <menu+0x255e>
 80039b6:	4b77      	ldr	r3, [pc, #476]	; (8003b94 <menu+0x2710>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 80039c4:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <menu+0x26f8>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <menu+0x26f8>)
 80039ce:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80039d0:	4b6a      	ldr	r3, [pc, #424]	; (8003b7c <menu+0x26f8>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <menu+0x255a>
		   		platformSilindirTipi = 1;
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <menu+0x26f8>)
 80039da:	2201      	movs	r2, #1
 80039dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039de:	f002 fadd 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e2:	2108      	movs	r1, #8
 80039e4:	486a      	ldr	r0, [pc, #424]	; (8003b90 <menu+0x270c>)
 80039e6:	f006 f917 	bl	8009c18 <HAL_GPIO_ReadPin>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d118      	bne.n	8003a22 <menu+0x259e>
 80039f0:	4b68      	ldr	r3, [pc, #416]	; (8003b94 <menu+0x2710>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 80039fe:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <menu+0x26f8>)
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <menu+0x2714>)
 8003a04:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003a06:	4b5d      	ldr	r3, [pc, #372]	; (8003b7c <menu+0x26f8>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d106      	bne.n	8003a1c <menu+0x2598>
				altLimit = 1;
 8003a0e:	4b63      	ldr	r3, [pc, #396]	; (8003b9c <menu+0x2718>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003a14:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <menu+0x2718>)
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	4b5f      	ldr	r3, [pc, #380]	; (8003b98 <menu+0x2714>)
 8003a1a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003a1c:	4b60      	ldr	r3, [pc, #384]	; (8003ba0 <menu+0x271c>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003a22:	4b60      	ldr	r3, [pc, #384]	; (8003ba4 <menu+0x2720>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b16      	cmp	r3, #22
 8003a28:	f040 8081 	bne.w	8003b2e <menu+0x26aa>
		if(dilSecim == 0) {
 8003a2c:	4b51      	ldr	r3, [pc, #324]	; (8003b74 <menu+0x26f0>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a34:	4a5c      	ldr	r2, [pc, #368]	; (8003ba8 <menu+0x2724>)
 8003a36:	2101      	movs	r1, #1
 8003a38:	2001      	movs	r0, #1
 8003a3a:	f7fc fe15 	bl	8000668 <lcd_print>
 8003a3e:	e008      	b.n	8003a52 <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003a40:	4b4c      	ldr	r3, [pc, #304]	; (8003b74 <menu+0x26f0>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d104      	bne.n	8003a52 <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <menu+0x2728>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f7fc fe0b 	bl	8000668 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a52:	4b48      	ldr	r3, [pc, #288]	; (8003b74 <menu+0x26f0>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a5a:	4a55      	ldr	r2, [pc, #340]	; (8003bb0 <menu+0x272c>)
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	2002      	movs	r0, #2
 8003a60:	f7fc fe02 	bl	8000668 <lcd_print>
 8003a64:	e008      	b.n	8003a78 <menu+0x25f4>
			} else if(dilSecim == 1){
 8003a66:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <menu+0x26f0>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d104      	bne.n	8003a78 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003a6e:	4a51      	ldr	r2, [pc, #324]	; (8003bb4 <menu+0x2730>)
 8003a70:	2101      	movs	r1, #1
 8003a72:	2002      	movs	r0, #2
 8003a74:	f7fc fdf8 	bl	8000668 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003a78:	4b4f      	ldr	r3, [pc, #316]	; (8003bb8 <menu+0x2734>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	220a      	movs	r2, #10
 8003a7e:	494f      	ldr	r1, [pc, #316]	; (8003bbc <menu+0x2738>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f009 f8f5 	bl	800cc70 <itoa>
		lcd_print(2,16,snum);
 8003a86:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <menu+0x2738>)
 8003a88:	2110      	movs	r1, #16
 8003a8a:	2002      	movs	r0, #2
 8003a8c:	f7fc fdec 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a90:	2102      	movs	r1, #2
 8003a92:	483f      	ldr	r0, [pc, #252]	; (8003b90 <menu+0x270c>)
 8003a94:	f006 f8c0 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d115      	bne.n	8003aca <menu+0x2646>
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <menu+0x2710>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	f083 0301 	eor.w	r3, r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00e      	beq.n	8003aca <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <menu+0x2734>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	4b40      	ldr	r3, [pc, #256]	; (8003bb8 <menu+0x2734>)
 8003ab6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003ab8:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <menu+0x2734>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	d902      	bls.n	8003ac6 <menu+0x2642>
				yukariValfTmr = 0;
 8003ac0:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <menu+0x2734>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ac6:	f002 fa69 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aca:	2104      	movs	r1, #4
 8003acc:	4830      	ldr	r0, [pc, #192]	; (8003b90 <menu+0x270c>)
 8003ace:	f006 f8a3 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d115      	bne.n	8003b04 <menu+0x2680>
 8003ad8:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <menu+0x2710>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	f083 0301 	eor.w	r3, r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00e      	beq.n	8003b04 <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003ae6:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <menu+0x2734>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <menu+0x2734>)
 8003af0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003af2:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <menu+0x2734>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d902      	bls.n	8003b00 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003afa:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <menu+0x2734>)
 8003afc:	2205      	movs	r2, #5
 8003afe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b00:	f002 fa4c 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b04:	2108      	movs	r1, #8
 8003b06:	4822      	ldr	r0, [pc, #136]	; (8003b90 <menu+0x270c>)
 8003b08:	f006 f886 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10d      	bne.n	8003b2e <menu+0x26aa>
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <menu+0x2710>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	f083 0301 	eor.w	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <menu+0x2734>)
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <menu+0x2714>)
 8003b26:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <menu+0x271c>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <menu+0x2720>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b17      	cmp	r3, #23
 8003b34:	f040 80ac 	bne.w	8003c90 <menu+0x280c>
		if(dilSecim == 0) {
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <menu+0x26f0>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b40:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <menu+0x273c>)
 8003b42:	2101      	movs	r1, #1
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7fc fd8f 	bl	8000668 <lcd_print>
 8003b4a:	e008      	b.n	8003b5e <menu+0x26da>
		} else if(dilSecim == 1) {
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <menu+0x26f0>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d104      	bne.n	8003b5e <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <menu+0x2740>)
 8003b56:	2101      	movs	r1, #1
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7fc fd85 	bl	8000668 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <menu+0x26f0>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d130      	bne.n	8003bc8 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <menu+0x272c>)
 8003b68:	2101      	movs	r1, #1
 8003b6a:	2002      	movs	r0, #2
 8003b6c:	f7fc fd7c 	bl	8000668 <lcd_print>
 8003b70:	e033      	b.n	8003bda <menu+0x2756>
 8003b72:	bf00      	nop
 8003b74:	20000c6a 	.word	0x20000c6a
 8003b78:	0800e114 	.word	0x0800e114
 8003b7c:	20000c5c 	.word	0x20000c5c
 8003b80:	0800e0b8 	.word	0x0800e0b8
 8003b84:	0800e0cc 	.word	0x0800e0cc
 8003b88:	0800e0dc 	.word	0x0800e0dc
 8003b8c:	0800e0f0 	.word	0x0800e0f0
 8003b90:	40010800 	.word	0x40010800
 8003b94:	20000c78 	.word	0x20000c78
 8003b98:	20000b38 	.word	0x20000b38
 8003b9c:	20000c4f 	.word	0x20000c4f
 8003ba0:	20000c75 	.word	0x20000c75
 8003ba4:	20000c49 	.word	0x20000c49
 8003ba8:	0800e124 	.word	0x0800e124
 8003bac:	0800e138 	.word	0x0800e138
 8003bb0:	0800ddd8 	.word	0x0800ddd8
 8003bb4:	0800e14c 	.word	0x0800e14c
 8003bb8:	20000c5d 	.word	0x20000c5d
 8003bbc:	20000bcc 	.word	0x20000bcc
 8003bc0:	0800e15c 	.word	0x0800e15c
 8003bc4:	0800e170 	.word	0x0800e170
			} else if(dilSecim == 1) {
 8003bc8:	4b98      	ldr	r3, [pc, #608]	; (8003e2c <menu+0x29a8>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d104      	bne.n	8003bda <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8003bd0:	4a97      	ldr	r2, [pc, #604]	; (8003e30 <menu+0x29ac>)
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	f7fc fd47 	bl	8000668 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003bda:	4b96      	ldr	r3, [pc, #600]	; (8003e34 <menu+0x29b0>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	220a      	movs	r2, #10
 8003be0:	4995      	ldr	r1, [pc, #596]	; (8003e38 <menu+0x29b4>)
 8003be2:	4618      	mov	r0, r3
 8003be4:	f009 f844 	bl	800cc70 <itoa>
		lcd_print(2,16,snum);
 8003be8:	4a93      	ldr	r2, [pc, #588]	; (8003e38 <menu+0x29b4>)
 8003bea:	2110      	movs	r1, #16
 8003bec:	2002      	movs	r0, #2
 8003bee:	f7fc fd3b 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	4891      	ldr	r0, [pc, #580]	; (8003e3c <menu+0x29b8>)
 8003bf6:	f006 f80f 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d115      	bne.n	8003c2c <menu+0x27a8>
 8003c00:	4b8f      	ldr	r3, [pc, #572]	; (8003e40 <menu+0x29bc>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	f083 0301 	eor.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00e      	beq.n	8003c2c <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 8003c0e:	4b89      	ldr	r3, [pc, #548]	; (8003e34 <menu+0x29b0>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4b87      	ldr	r3, [pc, #540]	; (8003e34 <menu+0x29b0>)
 8003c18:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003c1a:	4b86      	ldr	r3, [pc, #536]	; (8003e34 <menu+0x29b0>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d902      	bls.n	8003c28 <menu+0x27a4>
				asagiValfTmr = 0;
 8003c22:	4b84      	ldr	r3, [pc, #528]	; (8003e34 <menu+0x29b0>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c28:	f002 f9b8 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	4883      	ldr	r0, [pc, #524]	; (8003e3c <menu+0x29b8>)
 8003c30:	f005 fff2 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d115      	bne.n	8003c66 <menu+0x27e2>
 8003c3a:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <menu+0x29bc>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f083 0301 	eor.w	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 8003c48:	4b7a      	ldr	r3, [pc, #488]	; (8003e34 <menu+0x29b0>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	4b78      	ldr	r3, [pc, #480]	; (8003e34 <menu+0x29b0>)
 8003c52:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c54:	4b77      	ldr	r3, [pc, #476]	; (8003e34 <menu+0x29b0>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d902      	bls.n	8003c62 <menu+0x27de>
		   		asagiValfTmr = 5;
 8003c5c:	4b75      	ldr	r3, [pc, #468]	; (8003e34 <menu+0x29b0>)
 8003c5e:	2205      	movs	r2, #5
 8003c60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c62:	f002 f99b 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c66:	2108      	movs	r1, #8
 8003c68:	4874      	ldr	r0, [pc, #464]	; (8003e3c <menu+0x29b8>)
 8003c6a:	f005 ffd5 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10d      	bne.n	8003c90 <menu+0x280c>
 8003c74:	4b72      	ldr	r3, [pc, #456]	; (8003e40 <menu+0x29bc>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f083 0301 	eor.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8003c82:	4b6c      	ldr	r3, [pc, #432]	; (8003e34 <menu+0x29b0>)
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <menu+0x29c0>)
 8003c88:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003c8a:	4b6f      	ldr	r3, [pc, #444]	; (8003e48 <menu+0x29c4>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003c90:	4b6e      	ldr	r3, [pc, #440]	; (8003e4c <menu+0x29c8>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b18      	cmp	r3, #24
 8003c96:	f040 809d 	bne.w	8003dd4 <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8003c9a:	4b6d      	ldr	r3, [pc, #436]	; (8003e50 <menu+0x29cc>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d113      	bne.n	8003cca <menu+0x2846>
			if(dilSecim == 0) {
 8003ca2:	4b62      	ldr	r3, [pc, #392]	; (8003e2c <menu+0x29a8>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003caa:	4a6a      	ldr	r2, [pc, #424]	; (8003e54 <menu+0x29d0>)
 8003cac:	2101      	movs	r1, #1
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f7fc fcda 	bl	8000668 <lcd_print>
 8003cb4:	e020      	b.n	8003cf8 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <menu+0x29a8>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d11c      	bne.n	8003cf8 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003cbe:	4a66      	ldr	r2, [pc, #408]	; (8003e58 <menu+0x29d4>)
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	f7fc fcd0 	bl	8000668 <lcd_print>
 8003cc8:	e016      	b.n	8003cf8 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003cca:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <menu+0x29cc>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d112      	bne.n	8003cf8 <menu+0x2874>
			if(dilSecim == 0) {
 8003cd2:	4b56      	ldr	r3, [pc, #344]	; (8003e2c <menu+0x29a8>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003cda:	4a60      	ldr	r2, [pc, #384]	; (8003e5c <menu+0x29d8>)
 8003cdc:	2101      	movs	r1, #1
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f7fc fcc2 	bl	8000668 <lcd_print>
 8003ce4:	e008      	b.n	8003cf8 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003ce6:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <menu+0x29a8>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d104      	bne.n	8003cf8 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003cee:	4a5c      	ldr	r2, [pc, #368]	; (8003e60 <menu+0x29dc>)
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f7fc fcb8 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <menu+0x29a8>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d00:	4a58      	ldr	r2, [pc, #352]	; (8003e64 <menu+0x29e0>)
 8003d02:	2101      	movs	r1, #1
 8003d04:	2002      	movs	r0, #2
 8003d06:	f7fc fcaf 	bl	8000668 <lcd_print>
 8003d0a:	e008      	b.n	8003d1e <menu+0x289a>
			} else if(dilSecim == 1) {
 8003d0c:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <menu+0x29a8>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d104      	bne.n	8003d1e <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 8003d14:	4a46      	ldr	r2, [pc, #280]	; (8003e30 <menu+0x29ac>)
 8003d16:	2101      	movs	r1, #1
 8003d18:	2002      	movs	r0, #2
 8003d1a:	f7fc fca5 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003d1e:	4b52      	ldr	r3, [pc, #328]	; (8003e68 <menu+0x29e4>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	220a      	movs	r2, #10
 8003d24:	4944      	ldr	r1, [pc, #272]	; (8003e38 <menu+0x29b4>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f008 ffa2 	bl	800cc70 <itoa>
		lcd_print(2, 16, snum);
 8003d2c:	4a42      	ldr	r2, [pc, #264]	; (8003e38 <menu+0x29b4>)
 8003d2e:	2110      	movs	r1, #16
 8003d30:	2002      	movs	r0, #2
 8003d32:	f7fc fc99 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d36:	2102      	movs	r1, #2
 8003d38:	4840      	ldr	r0, [pc, #256]	; (8003e3c <menu+0x29b8>)
 8003d3a:	f005 ff6d 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d115      	bne.n	8003d70 <menu+0x28ec>
 8003d44:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <menu+0x29bc>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	f083 0301 	eor.w	r3, r3, #1
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00e      	beq.n	8003d70 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003d52:	4b45      	ldr	r3, [pc, #276]	; (8003e68 <menu+0x29e4>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <menu+0x29e4>)
 8003d5c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d5e:	4b42      	ldr	r3, [pc, #264]	; (8003e68 <menu+0x29e4>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d902      	bls.n	8003d6c <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8003d66:	4b40      	ldr	r3, [pc, #256]	; (8003e68 <menu+0x29e4>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d6c:	f002 f916 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d70:	2104      	movs	r1, #4
 8003d72:	4832      	ldr	r0, [pc, #200]	; (8003e3c <menu+0x29b8>)
 8003d74:	f005 ff50 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d115      	bne.n	8003daa <menu+0x2926>
 8003d7e:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <menu+0x29bc>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	f083 0301 	eor.w	r3, r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003d8c:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <menu+0x29e4>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <menu+0x29e4>)
 8003d96:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003d98:	4b33      	ldr	r3, [pc, #204]	; (8003e68 <menu+0x29e4>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d902      	bls.n	8003da6 <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <menu+0x29e4>)
 8003da2:	2205      	movs	r2, #5
 8003da4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003da6:	f002 f8f9 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003daa:	2108      	movs	r1, #8
 8003dac:	4823      	ldr	r0, [pc, #140]	; (8003e3c <menu+0x29b8>)
 8003dae:	f005 ff33 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10d      	bne.n	8003dd4 <menu+0x2950>
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <menu+0x29bc>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	f083 0301 	eor.w	r3, r3, #1
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8003dc6:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <menu+0x29e4>)
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <menu+0x29c0>)
 8003dcc:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003dce:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <menu+0x29c4>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <menu+0x29c8>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b19      	cmp	r3, #25
 8003dda:	f040 80c4 	bne.w	8003f66 <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 8003dde:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <menu+0x29cc>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d113      	bne.n	8003e0e <menu+0x298a>
			if(dilSecim == 0) {
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <menu+0x29a8>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003dee:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <menu+0x29e8>)
 8003df0:	2101      	movs	r1, #1
 8003df2:	2001      	movs	r0, #1
 8003df4:	f7fc fc38 	bl	8000668 <lcd_print>
 8003df8:	e047      	b.n	8003e8a <menu+0x2a06>
			} else if(dilSecim == 1) {
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <menu+0x29a8>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d143      	bne.n	8003e8a <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003e02:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <menu+0x29ec>)
 8003e04:	2101      	movs	r1, #1
 8003e06:	2001      	movs	r0, #1
 8003e08:	f7fc fc2e 	bl	8000668 <lcd_print>
 8003e0c:	e03d      	b.n	8003e8a <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <menu+0x29cc>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d139      	bne.n	8003e8a <menu+0x2a06>
			if(dilSecim == 0) {
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <menu+0x29a8>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d12c      	bne.n	8003e78 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003e1e:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <menu+0x29f0>)
 8003e20:	2101      	movs	r1, #1
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7fc fc20 	bl	8000668 <lcd_print>
 8003e28:	e02f      	b.n	8003e8a <menu+0x2a06>
 8003e2a:	bf00      	nop
 8003e2c:	20000c6a 	.word	0x20000c6a
 8003e30:	0800e14c 	.word	0x0800e14c
 8003e34:	20000c5e 	.word	0x20000c5e
 8003e38:	20000bcc 	.word	0x20000bcc
 8003e3c:	40010800 	.word	0x40010800
 8003e40:	20000c78 	.word	0x20000c78
 8003e44:	20000b38 	.word	0x20000b38
 8003e48:	20000c75 	.word	0x20000c75
 8003e4c:	20000c49 	.word	0x20000c49
 8003e50:	20000c58 	.word	0x20000c58
 8003e54:	0800e184 	.word	0x0800e184
 8003e58:	0800e198 	.word	0x0800e198
 8003e5c:	0800e1ac 	.word	0x0800e1ac
 8003e60:	0800e1c0 	.word	0x0800e1c0
 8003e64:	0800ddd8 	.word	0x0800ddd8
 8003e68:	20000c5f 	.word	0x20000c5f
 8003e6c:	0800e1d4 	.word	0x0800e1d4
 8003e70:	0800e1e8 	.word	0x0800e1e8
 8003e74:	0800e1fc 	.word	0x0800e1fc
			} else if(dilSecim == 1) {
 8003e78:	4b73      	ldr	r3, [pc, #460]	; (8004048 <menu+0x2bc4>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d104      	bne.n	8003e8a <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003e80:	4a72      	ldr	r2, [pc, #456]	; (800404c <menu+0x2bc8>)
 8003e82:	2101      	movs	r1, #1
 8003e84:	2001      	movs	r0, #1
 8003e86:	f7fc fbef 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003e8a:	4b6f      	ldr	r3, [pc, #444]	; (8004048 <menu+0x2bc4>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e92:	4a6f      	ldr	r2, [pc, #444]	; (8004050 <menu+0x2bcc>)
 8003e94:	2101      	movs	r1, #1
 8003e96:	2002      	movs	r0, #2
 8003e98:	f7fc fbe6 	bl	8000668 <lcd_print>
 8003e9c:	e008      	b.n	8003eb0 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 8003e9e:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <menu+0x2bc4>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d104      	bne.n	8003eb0 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8003ea6:	4a6b      	ldr	r2, [pc, #428]	; (8004054 <menu+0x2bd0>)
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f7fc fbdc 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003eb0:	4b69      	ldr	r3, [pc, #420]	; (8004058 <menu+0x2bd4>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	220a      	movs	r2, #10
 8003eb6:	4969      	ldr	r1, [pc, #420]	; (800405c <menu+0x2bd8>)
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f008 fed9 	bl	800cc70 <itoa>
		lcd_print(2,16,snum);
 8003ebe:	4a67      	ldr	r2, [pc, #412]	; (800405c <menu+0x2bd8>)
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f7fc fbd0 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ec8:	2102      	movs	r1, #2
 8003eca:	4865      	ldr	r0, [pc, #404]	; (8004060 <menu+0x2bdc>)
 8003ecc:	f005 fea4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d115      	bne.n	8003f02 <menu+0x2a7e>
 8003ed6:	4b63      	ldr	r3, [pc, #396]	; (8004064 <menu+0x2be0>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	f083 0301 	eor.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003ee4:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <menu+0x2bd4>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	4b5a      	ldr	r3, [pc, #360]	; (8004058 <menu+0x2bd4>)
 8003eee:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003ef0:	4b59      	ldr	r3, [pc, #356]	; (8004058 <menu+0x2bd4>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d902      	bls.n	8003efe <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 8003ef8:	4b57      	ldr	r3, [pc, #348]	; (8004058 <menu+0x2bd4>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003efe:	f002 f84d 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f02:	2104      	movs	r1, #4
 8003f04:	4856      	ldr	r0, [pc, #344]	; (8004060 <menu+0x2bdc>)
 8003f06:	f005 fe87 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d115      	bne.n	8003f3c <menu+0x2ab8>
 8003f10:	4b54      	ldr	r3, [pc, #336]	; (8004064 <menu+0x2be0>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	f083 0301 	eor.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00e      	beq.n	8003f3c <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003f1e:	4b4e      	ldr	r3, [pc, #312]	; (8004058 <menu+0x2bd4>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <menu+0x2bd4>)
 8003f28:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003f2a:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <menu+0x2bd4>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d902      	bls.n	8003f38 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <menu+0x2bd4>)
 8003f34:	2205      	movs	r2, #5
 8003f36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f38:	f002 f830 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f3c:	2108      	movs	r1, #8
 8003f3e:	4848      	ldr	r0, [pc, #288]	; (8004060 <menu+0x2bdc>)
 8003f40:	f005 fe6a 	bl	8009c18 <HAL_GPIO_ReadPin>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d10d      	bne.n	8003f66 <menu+0x2ae2>
 8003f4a:	4b46      	ldr	r3, [pc, #280]	; (8004064 <menu+0x2be0>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	f083 0301 	eor.w	r3, r3, #1
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <menu+0x2bd4>)
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <menu+0x2be4>)
 8003f5e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f60:	4b42      	ldr	r3, [pc, #264]	; (800406c <menu+0x2be8>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <menu+0x2bec>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b1a      	cmp	r3, #26
 8003f6c:	f040 80ec 	bne.w	8004148 <menu+0x2cc4>
		if(dilSecim == 0) {
 8003f70:	4b35      	ldr	r3, [pc, #212]	; (8004048 <menu+0x2bc4>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003f78:	4a3e      	ldr	r2, [pc, #248]	; (8004074 <menu+0x2bf0>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f7fc fb73 	bl	8000668 <lcd_print>
 8003f82:	e008      	b.n	8003f96 <menu+0x2b12>
		} else if(dilSecim == 1) {
 8003f84:	4b30      	ldr	r3, [pc, #192]	; (8004048 <menu+0x2bc4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d104      	bne.n	8003f96 <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 8003f8c:	4a3a      	ldr	r2, [pc, #232]	; (8004078 <menu+0x2bf4>)
 8003f8e:	2101      	movs	r1, #1
 8003f90:	2001      	movs	r0, #1
 8003f92:	f7fc fb69 	bl	8000668 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003f96:	4b39      	ldr	r3, [pc, #228]	; (800407c <menu+0x2bf8>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b63      	cmp	r3, #99	; 0x63
 8003f9c:	d91e      	bls.n	8003fdc <menu+0x2b58>
			if(dilSecim == 0) {
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <menu+0x2bc4>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fa6:	4a2a      	ldr	r2, [pc, #168]	; (8004050 <menu+0x2bcc>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	2002      	movs	r0, #2
 8003fac:	f7fc fb5c 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <menu+0x2bc4>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d104      	bne.n	8003fc2 <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8003fb8:	4a26      	ldr	r2, [pc, #152]	; (8004054 <menu+0x2bd0>)
 8003fba:	2101      	movs	r1, #1
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	f7fc fb53 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fc2:	4b2e      	ldr	r3, [pc, #184]	; (800407c <menu+0x2bf8>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	220a      	movs	r2, #10
 8003fc8:	4924      	ldr	r1, [pc, #144]	; (800405c <menu+0x2bd8>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f008 fe50 	bl	800cc70 <itoa>
			lcd_print(2,14,snum);
 8003fd0:	4a22      	ldr	r2, [pc, #136]	; (800405c <menu+0x2bd8>)
 8003fd2:	210e      	movs	r1, #14
 8003fd4:	2002      	movs	r0, #2
 8003fd6:	f7fc fb47 	bl	8000668 <lcd_print>
 8003fda:	e066      	b.n	80040aa <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003fdc:	4b27      	ldr	r3, [pc, #156]	; (800407c <menu+0x2bf8>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b09      	cmp	r3, #9
 8003fe2:	d923      	bls.n	800402c <menu+0x2ba8>
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <menu+0x2bf8>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b63      	cmp	r3, #99	; 0x63
 8003fea:	d81f      	bhi.n	800402c <menu+0x2ba8>
			if(dilSecim == 0) {
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <menu+0x2bc4>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <menu+0x2bcc>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	f7fc fb35 	bl	8000668 <lcd_print>
 8003ffe:	e008      	b.n	8004012 <menu+0x2b8e>
			} else if(dilSecim == 1) {
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <menu+0x2bc4>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d104      	bne.n	8004012 <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 8004008:	4a12      	ldr	r2, [pc, #72]	; (8004054 <menu+0x2bd0>)
 800400a:	2101      	movs	r1, #1
 800400c:	2002      	movs	r0, #2
 800400e:	f7fc fb2b 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <menu+0x2bf8>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	220a      	movs	r2, #10
 8004018:	4910      	ldr	r1, [pc, #64]	; (800405c <menu+0x2bd8>)
 800401a:	4618      	mov	r0, r3
 800401c:	f008 fe28 	bl	800cc70 <itoa>
			lcd_print(2, 15, snum);
 8004020:	4a0e      	ldr	r2, [pc, #56]	; (800405c <menu+0x2bd8>)
 8004022:	210f      	movs	r1, #15
 8004024:	2002      	movs	r0, #2
 8004026:	f7fc fb1f 	bl	8000668 <lcd_print>
 800402a:	e03e      	b.n	80040aa <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <menu+0x2bf8>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b09      	cmp	r3, #9
 8004032:	d83a      	bhi.n	80040aa <menu+0x2c26>
			if(dilSecim == 0) {
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <menu+0x2bc4>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d121      	bne.n	8004080 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <menu+0x2bcc>)
 800403e:	2101      	movs	r1, #1
 8004040:	2002      	movs	r0, #2
 8004042:	f7fc fb11 	bl	8000668 <lcd_print>
 8004046:	e024      	b.n	8004092 <menu+0x2c0e>
 8004048:	20000c6a 	.word	0x20000c6a
 800404c:	0800e210 	.word	0x0800e210
 8004050:	0800ddd8 	.word	0x0800ddd8
 8004054:	0800e14c 	.word	0x0800e14c
 8004058:	20000c60 	.word	0x20000c60
 800405c:	20000bcc 	.word	0x20000bcc
 8004060:	40010800 	.word	0x40010800
 8004064:	20000c78 	.word	0x20000c78
 8004068:	20000b38 	.word	0x20000b38
 800406c:	20000c75 	.word	0x20000c75
 8004070:	20000c49 	.word	0x20000c49
 8004074:	0800e224 	.word	0x0800e224
 8004078:	0800e238 	.word	0x0800e238
 800407c:	20000c61 	.word	0x20000c61
			} else if(dilSecim == 1) {
 8004080:	4b8f      	ldr	r3, [pc, #572]	; (80042c0 <menu+0x2e3c>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d104      	bne.n	8004092 <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 8004088:	4a8e      	ldr	r2, [pc, #568]	; (80042c4 <menu+0x2e40>)
 800408a:	2101      	movs	r1, #1
 800408c:	2002      	movs	r0, #2
 800408e:	f7fc faeb 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004092:	4b8d      	ldr	r3, [pc, #564]	; (80042c8 <menu+0x2e44>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	220a      	movs	r2, #10
 8004098:	498c      	ldr	r1, [pc, #560]	; (80042cc <menu+0x2e48>)
 800409a:	4618      	mov	r0, r3
 800409c:	f008 fde8 	bl	800cc70 <itoa>
			lcd_print(2, 16, snum);
 80040a0:	4a8a      	ldr	r2, [pc, #552]	; (80042cc <menu+0x2e48>)
 80040a2:	2110      	movs	r1, #16
 80040a4:	2002      	movs	r0, #2
 80040a6:	f7fc fadf 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040aa:	2102      	movs	r1, #2
 80040ac:	4888      	ldr	r0, [pc, #544]	; (80042d0 <menu+0x2e4c>)
 80040ae:	f005 fdb3 	bl	8009c18 <HAL_GPIO_ReadPin>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d115      	bne.n	80040e4 <menu+0x2c60>
 80040b8:	4b86      	ldr	r3, [pc, #536]	; (80042d4 <menu+0x2e50>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00e      	beq.n	80040e4 <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 80040c6:	4b80      	ldr	r3, [pc, #512]	; (80042c8 <menu+0x2e44>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4b7e      	ldr	r3, [pc, #504]	; (80042c8 <menu+0x2e44>)
 80040d0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80040d2:	4b7d      	ldr	r3, [pc, #500]	; (80042c8 <menu+0x2e44>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2bb4      	cmp	r3, #180	; 0xb4
 80040d8:	d902      	bls.n	80040e0 <menu+0x2c5c>
				makineCalismaTmr = 0;
 80040da:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <menu+0x2e44>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040e0:	f001 ff5c 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e4:	2104      	movs	r1, #4
 80040e6:	487a      	ldr	r0, [pc, #488]	; (80042d0 <menu+0x2e4c>)
 80040e8:	f005 fd96 	bl	8009c18 <HAL_GPIO_ReadPin>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d115      	bne.n	800411e <menu+0x2c9a>
 80040f2:	4b78      	ldr	r3, [pc, #480]	; (80042d4 <menu+0x2e50>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	f083 0301 	eor.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00e      	beq.n	800411e <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004100:	4b71      	ldr	r3, [pc, #452]	; (80042c8 <menu+0x2e44>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	3b01      	subs	r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	4b6f      	ldr	r3, [pc, #444]	; (80042c8 <menu+0x2e44>)
 800410a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800410c:	4b6e      	ldr	r3, [pc, #440]	; (80042c8 <menu+0x2e44>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2bb5      	cmp	r3, #181	; 0xb5
 8004112:	d902      	bls.n	800411a <menu+0x2c96>
		   		makineCalismaTmr = 180;
 8004114:	4b6c      	ldr	r3, [pc, #432]	; (80042c8 <menu+0x2e44>)
 8004116:	22b4      	movs	r2, #180	; 0xb4
 8004118:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800411a:	f001 ff3f 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800411e:	2108      	movs	r1, #8
 8004120:	486b      	ldr	r0, [pc, #428]	; (80042d0 <menu+0x2e4c>)
 8004122:	f005 fd79 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d10d      	bne.n	8004148 <menu+0x2cc4>
 800412c:	4b69      	ldr	r3, [pc, #420]	; (80042d4 <menu+0x2e50>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	f083 0301 	eor.w	r3, r3, #1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 800413a:	4b63      	ldr	r3, [pc, #396]	; (80042c8 <menu+0x2e44>)
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <menu+0x2e54>)
 8004140:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004142:	4b66      	ldr	r3, [pc, #408]	; (80042dc <menu+0x2e58>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004148:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <menu+0x2e5c>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b1b      	cmp	r3, #27
 800414e:	f040 8083 	bne.w	8004258 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 8004152:	4a64      	ldr	r2, [pc, #400]	; (80042e4 <menu+0x2e60>)
 8004154:	2101      	movs	r1, #1
 8004156:	2001      	movs	r0, #1
 8004158:	f7fc fa86 	bl	8000668 <lcd_print>

		if(buzzer == 0) {
 800415c:	4b62      	ldr	r3, [pc, #392]	; (80042e8 <menu+0x2e64>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d113      	bne.n	800418c <menu+0x2d08>
			if(dilSecim == 0) {
 8004164:	4b56      	ldr	r3, [pc, #344]	; (80042c0 <menu+0x2e3c>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 800416c:	4a5f      	ldr	r2, [pc, #380]	; (80042ec <menu+0x2e68>)
 800416e:	2101      	movs	r1, #1
 8004170:	2002      	movs	r0, #2
 8004172:	f7fc fa79 	bl	8000668 <lcd_print>
 8004176:	e020      	b.n	80041ba <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004178:	4b51      	ldr	r3, [pc, #324]	; (80042c0 <menu+0x2e3c>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d11c      	bne.n	80041ba <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 8004180:	4a5b      	ldr	r2, [pc, #364]	; (80042f0 <menu+0x2e6c>)
 8004182:	2101      	movs	r1, #1
 8004184:	2002      	movs	r0, #2
 8004186:	f7fc fa6f 	bl	8000668 <lcd_print>
 800418a:	e016      	b.n	80041ba <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 800418c:	4b56      	ldr	r3, [pc, #344]	; (80042e8 <menu+0x2e64>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d112      	bne.n	80041ba <menu+0x2d36>
			if(dilSecim == 0) {
 8004194:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <menu+0x2e3c>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 800419c:	4a55      	ldr	r2, [pc, #340]	; (80042f4 <menu+0x2e70>)
 800419e:	2101      	movs	r1, #1
 80041a0:	2002      	movs	r0, #2
 80041a2:	f7fc fa61 	bl	8000668 <lcd_print>
 80041a6:	e008      	b.n	80041ba <menu+0x2d36>
			} else if(dilSecim == 1) {
 80041a8:	4b45      	ldr	r3, [pc, #276]	; (80042c0 <menu+0x2e3c>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d104      	bne.n	80041ba <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 80041b0:	4a51      	ldr	r2, [pc, #324]	; (80042f8 <menu+0x2e74>)
 80041b2:	2101      	movs	r1, #1
 80041b4:	2002      	movs	r0, #2
 80041b6:	f7fc fa57 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041ba:	2102      	movs	r1, #2
 80041bc:	4844      	ldr	r0, [pc, #272]	; (80042d0 <menu+0x2e4c>)
 80041be:	f005 fd2b 	bl	8009c18 <HAL_GPIO_ReadPin>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d115      	bne.n	80041f4 <menu+0x2d70>
 80041c8:	4b42      	ldr	r3, [pc, #264]	; (80042d4 <menu+0x2e50>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f083 0301 	eor.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00e      	beq.n	80041f4 <menu+0x2d70>
			buzzer = buzzer + 1;
 80041d6:	4b44      	ldr	r3, [pc, #272]	; (80042e8 <menu+0x2e64>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <menu+0x2e64>)
 80041e0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <menu+0x2e64>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d902      	bls.n	80041f0 <menu+0x2d6c>
				buzzer = 0;
 80041ea:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <menu+0x2e64>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041f0:	f001 fed4 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041f4:	2104      	movs	r1, #4
 80041f6:	4836      	ldr	r0, [pc, #216]	; (80042d0 <menu+0x2e4c>)
 80041f8:	f005 fd0e 	bl	8009c18 <HAL_GPIO_ReadPin>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d115      	bne.n	800422e <menu+0x2daa>
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <menu+0x2e50>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	f083 0301 	eor.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <menu+0x2daa>
			buzzer = buzzer - 1;
 8004210:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <menu+0x2e64>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	3b01      	subs	r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	4b33      	ldr	r3, [pc, #204]	; (80042e8 <menu+0x2e64>)
 800421a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800421c:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <menu+0x2e64>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <menu+0x2da6>
		   		buzzer = 1;
 8004224:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <menu+0x2e64>)
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800422a:	f001 feb7 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800422e:	2108      	movs	r1, #8
 8004230:	4827      	ldr	r0, [pc, #156]	; (80042d0 <menu+0x2e4c>)
 8004232:	f005 fcf1 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004236:	4603      	mov	r3, r0
 8004238:	2b01      	cmp	r3, #1
 800423a:	d10d      	bne.n	8004258 <menu+0x2dd4>
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <menu+0x2e50>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f083 0301 	eor.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <menu+0x2dd4>
			eepromData[25] = buzzer;
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <menu+0x2e64>)
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <menu+0x2e54>)
 8004250:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <menu+0x2e58>)
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <menu+0x2e5c>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b1c      	cmp	r3, #28
 800425e:	f040 80ab 	bne.w	80043b8 <menu+0x2f34>
		calismaSayModu = 0;
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <menu+0x2e78>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004268:	4a25      	ldr	r2, [pc, #148]	; (8004300 <menu+0x2e7c>)
 800426a:	2101      	movs	r1, #1
 800426c:	2001      	movs	r0, #1
 800426e:	f7fc f9fb 	bl	8000668 <lcd_print>

		if(demoMode == 0) {
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <menu+0x2e80>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d113      	bne.n	80042a2 <menu+0x2e1e>
			if(dilSecim == 0) {
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <menu+0x2e3c>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d105      	bne.n	800428e <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 8004282:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <menu+0x2e68>)
 8004284:	2101      	movs	r1, #1
 8004286:	2002      	movs	r0, #2
 8004288:	f7fc f9ee 	bl	8000668 <lcd_print>
 800428c:	e045      	b.n	800431a <menu+0x2e96>
			} else if(dilSecim == 1) {
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <menu+0x2e3c>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d141      	bne.n	800431a <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 8004296:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <menu+0x2e6c>)
 8004298:	2101      	movs	r1, #1
 800429a:	2002      	movs	r0, #2
 800429c:	f7fc f9e4 	bl	8000668 <lcd_print>
 80042a0:	e03b      	b.n	800431a <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <menu+0x2e80>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d137      	bne.n	800431a <menu+0x2e96>
			if(dilSecim == 0){
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <menu+0x2e3c>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d12a      	bne.n	8004308 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 80042b2:	4a10      	ldr	r2, [pc, #64]	; (80042f4 <menu+0x2e70>)
 80042b4:	2101      	movs	r1, #1
 80042b6:	2002      	movs	r0, #2
 80042b8:	f7fc f9d6 	bl	8000668 <lcd_print>
 80042bc:	e02d      	b.n	800431a <menu+0x2e96>
 80042be:	bf00      	nop
 80042c0:	20000c6a 	.word	0x20000c6a
 80042c4:	0800e14c 	.word	0x0800e14c
 80042c8:	20000c61 	.word	0x20000c61
 80042cc:	20000bcc 	.word	0x20000bcc
 80042d0:	40010800 	.word	0x40010800
 80042d4:	20000c78 	.word	0x20000c78
 80042d8:	20000b38 	.word	0x20000b38
 80042dc:	20000c75 	.word	0x20000c75
 80042e0:	20000c49 	.word	0x20000c49
 80042e4:	0800e24c 	.word	0x0800e24c
 80042e8:	20000c65 	.word	0x20000c65
 80042ec:	0800db74 	.word	0x0800db74
 80042f0:	0800db88 	.word	0x0800db88
 80042f4:	0800dbd4 	.word	0x0800dbd4
 80042f8:	0800dbe8 	.word	0x0800dbe8
 80042fc:	20000c69 	.word	0x20000c69
 8004300:	0800e260 	.word	0x0800e260
 8004304:	20000c67 	.word	0x20000c67
			} else if(dilSecim == 1) {
 8004308:	4b71      	ldr	r3, [pc, #452]	; (80044d0 <menu+0x304c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d104      	bne.n	800431a <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 8004310:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <menu+0x3050>)
 8004312:	2101      	movs	r1, #1
 8004314:	2002      	movs	r0, #2
 8004316:	f7fc f9a7 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800431a:	2102      	movs	r1, #2
 800431c:	486e      	ldr	r0, [pc, #440]	; (80044d8 <menu+0x3054>)
 800431e:	f005 fc7b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004322:	4603      	mov	r3, r0
 8004324:	2b01      	cmp	r3, #1
 8004326:	d115      	bne.n	8004354 <menu+0x2ed0>
 8004328:	4b6c      	ldr	r3, [pc, #432]	; (80044dc <menu+0x3058>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f083 0301 	eor.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <menu+0x2ed0>
			demoMode = demoMode + 1;
 8004336:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <menu+0x305c>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <menu+0x305c>)
 8004340:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004342:	4b67      	ldr	r3, [pc, #412]	; (80044e0 <menu+0x305c>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d902      	bls.n	8004350 <menu+0x2ecc>
				demoMode = 0;
 800434a:	4b65      	ldr	r3, [pc, #404]	; (80044e0 <menu+0x305c>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004350:	f001 fe24 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004354:	2104      	movs	r1, #4
 8004356:	4860      	ldr	r0, [pc, #384]	; (80044d8 <menu+0x3054>)
 8004358:	f005 fc5e 	bl	8009c18 <HAL_GPIO_ReadPin>
 800435c:	4603      	mov	r3, r0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d115      	bne.n	800438e <menu+0x2f0a>
 8004362:	4b5e      	ldr	r3, [pc, #376]	; (80044dc <menu+0x3058>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f083 0301 	eor.w	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004370:	4b5b      	ldr	r3, [pc, #364]	; (80044e0 <menu+0x305c>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	3b01      	subs	r3, #1
 8004376:	b2da      	uxtb	r2, r3
 8004378:	4b59      	ldr	r3, [pc, #356]	; (80044e0 <menu+0x305c>)
 800437a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800437c:	4b58      	ldr	r3, [pc, #352]	; (80044e0 <menu+0x305c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <menu+0x2f06>
		   		demoMode = 1;
 8004384:	4b56      	ldr	r3, [pc, #344]	; (80044e0 <menu+0x305c>)
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800438a:	f001 fe07 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800438e:	2108      	movs	r1, #8
 8004390:	4851      	ldr	r0, [pc, #324]	; (80044d8 <menu+0x3054>)
 8004392:	f005 fc41 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d10d      	bne.n	80043b8 <menu+0x2f34>
 800439c:	4b4f      	ldr	r3, [pc, #316]	; (80044dc <menu+0x3058>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	f083 0301 	eor.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d006      	beq.n	80043b8 <menu+0x2f34>
			eepromData[26] = demoMode;
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <menu+0x305c>)
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	4b4d      	ldr	r3, [pc, #308]	; (80044e4 <menu+0x3060>)
 80043b0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80043b2:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <menu+0x3064>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <menu+0x3068>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b1d      	cmp	r3, #29
 80043be:	f040 8132 	bne.w	8004626 <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80043c2:	4b4b      	ldr	r3, [pc, #300]	; (80044f0 <menu+0x306c>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d113      	bne.n	80043f2 <menu+0x2f6e>
 80043ca:	4b4a      	ldr	r3, [pc, #296]	; (80044f4 <menu+0x3070>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <menu+0x2f6e>
 80043d2:	4b49      	ldr	r3, [pc, #292]	; (80044f8 <menu+0x3074>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <menu+0x2f6e>
 80043da:	4b48      	ldr	r3, [pc, #288]	; (80044fc <menu+0x3078>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <menu+0x2f6e>
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <menu+0x307c>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <menu+0x2f6e>
			calismaSayisiYar = 0;
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <menu+0x3080>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e002      	b.n	80043f8 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 80043f2:	4b44      	ldr	r3, [pc, #272]	; (8004504 <menu+0x3080>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80043f8:	4b43      	ldr	r3, [pc, #268]	; (8004508 <menu+0x3084>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d154      	bne.n	80044aa <menu+0x3026>
			if(dilSecim == 0) {
 8004400:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <menu+0x304c>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004408:	4a40      	ldr	r2, [pc, #256]	; (800450c <menu+0x3088>)
 800440a:	2101      	movs	r1, #1
 800440c:	2001      	movs	r0, #1
 800440e:	f7fc f92b 	bl	8000668 <lcd_print>
 8004412:	e008      	b.n	8004426 <menu+0x2fa2>
			} else if(dilSecim == 1) {
 8004414:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <menu+0x304c>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d104      	bne.n	8004426 <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 800441c:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <menu+0x308c>)
 800441e:	2101      	movs	r1, #1
 8004420:	2001      	movs	r0, #1
 8004422:	f7fc f921 	bl	8000668 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004426:	4b36      	ldr	r3, [pc, #216]	; (8004500 <menu+0x307c>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	220a      	movs	r2, #10
 800442c:	4939      	ldr	r1, [pc, #228]	; (8004514 <menu+0x3090>)
 800442e:	4618      	mov	r0, r3
 8004430:	f008 fc1e 	bl	800cc70 <itoa>
			lcd_print(2, 12, snum);
 8004434:	4a37      	ldr	r2, [pc, #220]	; (8004514 <menu+0x3090>)
 8004436:	210c      	movs	r1, #12
 8004438:	2002      	movs	r0, #2
 800443a:	f7fc f915 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800443e:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <menu+0x3078>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	220a      	movs	r2, #10
 8004444:	4933      	ldr	r1, [pc, #204]	; (8004514 <menu+0x3090>)
 8004446:	4618      	mov	r0, r3
 8004448:	f008 fc12 	bl	800cc70 <itoa>
			lcd_print(2, 13, snum);
 800444c:	4a31      	ldr	r2, [pc, #196]	; (8004514 <menu+0x3090>)
 800444e:	210d      	movs	r1, #13
 8004450:	2002      	movs	r0, #2
 8004452:	f7fc f909 	bl	8000668 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <menu+0x3074>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	220a      	movs	r2, #10
 800445c:	492d      	ldr	r1, [pc, #180]	; (8004514 <menu+0x3090>)
 800445e:	4618      	mov	r0, r3
 8004460:	f008 fc06 	bl	800cc70 <itoa>
			lcd_print(2, 14, snum);
 8004464:	4a2b      	ldr	r2, [pc, #172]	; (8004514 <menu+0x3090>)
 8004466:	210e      	movs	r1, #14
 8004468:	2002      	movs	r0, #2
 800446a:	f7fc f8fd 	bl	8000668 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <menu+0x3070>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	220a      	movs	r2, #10
 8004474:	4927      	ldr	r1, [pc, #156]	; (8004514 <menu+0x3090>)
 8004476:	4618      	mov	r0, r3
 8004478:	f008 fbfa 	bl	800cc70 <itoa>
			lcd_print(2, 15, snum);
 800447c:	4a25      	ldr	r2, [pc, #148]	; (8004514 <menu+0x3090>)
 800447e:	210f      	movs	r1, #15
 8004480:	2002      	movs	r0, #2
 8004482:	f7fc f8f1 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <menu+0x306c>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	220a      	movs	r2, #10
 800448c:	4921      	ldr	r1, [pc, #132]	; (8004514 <menu+0x3090>)
 800448e:	4618      	mov	r0, r3
 8004490:	f008 fbee 	bl	800cc70 <itoa>
			lcd_print(2, 16, snum);
 8004494:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <menu+0x3090>)
 8004496:	2110      	movs	r1, #16
 8004498:	2002      	movs	r0, #2
 800449a:	f7fc f8e5 	bl	8000668 <lcd_print>

			lcd_print(2, 1, "           ");
 800449e:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <menu+0x3094>)
 80044a0:	2101      	movs	r1, #1
 80044a2:	2002      	movs	r0, #2
 80044a4:	f7fc f8e0 	bl	8000668 <lcd_print>
 80044a8:	e048      	b.n	800453c <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <menu+0x3084>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d144      	bne.n	800453c <menu+0x30b8>
			if(dilSecim == 0) {
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <menu+0x304c>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d132      	bne.n	8004520 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <menu+0x3088>)
 80044bc:	2101      	movs	r1, #1
 80044be:	2001      	movs	r0, #1
 80044c0:	f7fc f8d2 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80044c4:	4a15      	ldr	r2, [pc, #84]	; (800451c <menu+0x3098>)
 80044c6:	2101      	movs	r1, #1
 80044c8:	2002      	movs	r0, #2
 80044ca:	f7fc f8cd 	bl	8000668 <lcd_print>
 80044ce:	e035      	b.n	800453c <menu+0x30b8>
 80044d0:	20000c6a 	.word	0x20000c6a
 80044d4:	0800dbe8 	.word	0x0800dbe8
 80044d8:	40010800 	.word	0x40010800
 80044dc:	20000c78 	.word	0x20000c78
 80044e0:	20000c67 	.word	0x20000c67
 80044e4:	20000b38 	.word	0x20000b38
 80044e8:	20000c75 	.word	0x20000c75
 80044ec:	20000c49 	.word	0x20000c49
 80044f0:	20000c46 	.word	0x20000c46
 80044f4:	20000c47 	.word	0x20000c47
 80044f8:	200009bf 	.word	0x200009bf
 80044fc:	200009c0 	.word	0x200009c0
 8004500:	20000c48 	.word	0x20000c48
 8004504:	20000c8a 	.word	0x20000c8a
 8004508:	20000c69 	.word	0x20000c69
 800450c:	0800e270 	.word	0x0800e270
 8004510:	0800e284 	.word	0x0800e284
 8004514:	20000bcc 	.word	0x20000bcc
 8004518:	0800e298 	.word	0x0800e298
 800451c:	0800e2a4 	.word	0x0800e2a4
			} else if(dilSecim == 1) {
 8004520:	4b94      	ldr	r3, [pc, #592]	; (8004774 <menu+0x32f0>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d109      	bne.n	800453c <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 8004528:	4a93      	ldr	r2, [pc, #588]	; (8004778 <menu+0x32f4>)
 800452a:	2101      	movs	r1, #1
 800452c:	2001      	movs	r0, #1
 800452e:	f7fc f89b 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004532:	4a92      	ldr	r2, [pc, #584]	; (800477c <menu+0x32f8>)
 8004534:	2101      	movs	r1, #1
 8004536:	2002      	movs	r0, #2
 8004538:	f7fc f896 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800453c:	2102      	movs	r1, #2
 800453e:	4890      	ldr	r0, [pc, #576]	; (8004780 <menu+0x32fc>)
 8004540:	f005 fb6a 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d119      	bne.n	800457e <menu+0x30fa>
 800454a:	4b8e      	ldr	r3, [pc, #568]	; (8004784 <menu+0x3300>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	f083 0301 	eor.w	r3, r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d012      	beq.n	800457e <menu+0x30fa>
 8004558:	4b8b      	ldr	r3, [pc, #556]	; (8004788 <menu+0x3304>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00e      	beq.n	800457e <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004560:	4b8a      	ldr	r3, [pc, #552]	; (800478c <menu+0x3308>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	b2da      	uxtb	r2, r3
 8004568:	4b88      	ldr	r3, [pc, #544]	; (800478c <menu+0x3308>)
 800456a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800456c:	4b87      	ldr	r3, [pc, #540]	; (800478c <menu+0x3308>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d902      	bls.n	800457a <menu+0x30f6>
				calismaSayModu = 0;
 8004574:	4b85      	ldr	r3, [pc, #532]	; (800478c <menu+0x3308>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800457a:	f001 fd0f 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800457e:	2104      	movs	r1, #4
 8004580:	487f      	ldr	r0, [pc, #508]	; (8004780 <menu+0x32fc>)
 8004582:	f005 fb49 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004586:	4603      	mov	r3, r0
 8004588:	2b01      	cmp	r3, #1
 800458a:	d119      	bne.n	80045c0 <menu+0x313c>
 800458c:	4b7d      	ldr	r3, [pc, #500]	; (8004784 <menu+0x3300>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f083 0301 	eor.w	r3, r3, #1
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d012      	beq.n	80045c0 <menu+0x313c>
 800459a:	4b7b      	ldr	r3, [pc, #492]	; (8004788 <menu+0x3304>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 80045a2:	4b7a      	ldr	r3, [pc, #488]	; (800478c <menu+0x3308>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4b78      	ldr	r3, [pc, #480]	; (800478c <menu+0x3308>)
 80045ac:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80045ae:	4b77      	ldr	r3, [pc, #476]	; (800478c <menu+0x3308>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <menu+0x3138>
		   		calismaSayModu = 1;
 80045b6:	4b75      	ldr	r3, [pc, #468]	; (800478c <menu+0x3308>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045bc:	f001 fcee 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045c0:	2108      	movs	r1, #8
 80045c2:	486f      	ldr	r0, [pc, #444]	; (8004780 <menu+0x32fc>)
 80045c4:	f005 fb28 	bl	8009c18 <HAL_GPIO_ReadPin>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d12b      	bne.n	8004626 <menu+0x31a2>
 80045ce:	4b6d      	ldr	r3, [pc, #436]	; (8004784 <menu+0x3300>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	f083 0301 	eor.w	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d024      	beq.n	8004626 <menu+0x31a2>
			eepromData[32] = 0;
 80045dc:	4b6c      	ldr	r3, [pc, #432]	; (8004790 <menu+0x330c>)
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80045e4:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <menu+0x330c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80045ea:	4b69      	ldr	r3, [pc, #420]	; (8004790 <menu+0x330c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80045f0:	4b67      	ldr	r3, [pc, #412]	; (8004790 <menu+0x330c>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80045f6:	4b66      	ldr	r3, [pc, #408]	; (8004790 <menu+0x330c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80045fc:	4b65      	ldr	r3, [pc, #404]	; (8004794 <menu+0x3310>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004602:	4b65      	ldr	r3, [pc, #404]	; (8004798 <menu+0x3314>)
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004608:	4b64      	ldr	r3, [pc, #400]	; (800479c <menu+0x3318>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800460e:	4b64      	ldr	r3, [pc, #400]	; (80047a0 <menu+0x331c>)
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004614:	4b63      	ldr	r3, [pc, #396]	; (80047a4 <menu+0x3320>)
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800461a:	4b5c      	ldr	r3, [pc, #368]	; (800478c <menu+0x3308>)
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004620:	4b61      	ldr	r3, [pc, #388]	; (80047a8 <menu+0x3324>)
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004626:	4b61      	ldr	r3, [pc, #388]	; (80047ac <menu+0x3328>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b1e      	cmp	r3, #30
 800462c:	d16f      	bne.n	800470e <menu+0x328a>
		calismaSayModu = 0;
 800462e:	4b57      	ldr	r3, [pc, #348]	; (800478c <menu+0x3308>)
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004634:	4b4f      	ldr	r3, [pc, #316]	; (8004774 <menu+0x32f0>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 800463c:	4a5c      	ldr	r2, [pc, #368]	; (80047b0 <menu+0x332c>)
 800463e:	2101      	movs	r1, #1
 8004640:	2001      	movs	r0, #1
 8004642:	f7fc f811 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004646:	4a5b      	ldr	r2, [pc, #364]	; (80047b4 <menu+0x3330>)
 8004648:	2101      	movs	r1, #1
 800464a:	2002      	movs	r0, #2
 800464c:	f7fc f80c 	bl	8000668 <lcd_print>
 8004650:	e00d      	b.n	800466e <menu+0x31ea>
		} else if(dilSecim == 1) {
 8004652:	4b48      	ldr	r3, [pc, #288]	; (8004774 <menu+0x32f0>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d109      	bne.n	800466e <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800465a:	4a57      	ldr	r2, [pc, #348]	; (80047b8 <menu+0x3334>)
 800465c:	2101      	movs	r1, #1
 800465e:	2001      	movs	r0, #1
 8004660:	f7fc f802 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004664:	4a55      	ldr	r2, [pc, #340]	; (80047bc <menu+0x3338>)
 8004666:	2101      	movs	r1, #1
 8004668:	2002      	movs	r0, #2
 800466a:	f7fb fffd 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800466e:	2102      	movs	r1, #2
 8004670:	4843      	ldr	r0, [pc, #268]	; (8004780 <menu+0x32fc>)
 8004672:	f005 fad1 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004676:	4603      	mov	r3, r0
 8004678:	2b01      	cmp	r3, #1
 800467a:	d115      	bne.n	80046a8 <menu+0x3224>
 800467c:	4b41      	ldr	r3, [pc, #260]	; (8004784 <menu+0x3300>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f083 0301 	eor.w	r3, r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <menu+0x3224>
			dilSecim = dilSecim + 1;
 800468a:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <menu+0x32f0>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4b38      	ldr	r3, [pc, #224]	; (8004774 <menu+0x32f0>)
 8004694:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004696:	4b37      	ldr	r3, [pc, #220]	; (8004774 <menu+0x32f0>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d902      	bls.n	80046a4 <menu+0x3220>
				dilSecim = 0;
 800469e:	4b35      	ldr	r3, [pc, #212]	; (8004774 <menu+0x32f0>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046a4:	f001 fc7a 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046a8:	2104      	movs	r1, #4
 80046aa:	4835      	ldr	r0, [pc, #212]	; (8004780 <menu+0x32fc>)
 80046ac:	f005 fab4 	bl	8009c18 <HAL_GPIO_ReadPin>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d115      	bne.n	80046e2 <menu+0x325e>
 80046b6:	4b33      	ldr	r3, [pc, #204]	; (8004784 <menu+0x3300>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f083 0301 	eor.w	r3, r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00e      	beq.n	80046e2 <menu+0x325e>
			dilSecim = dilSecim - 1;
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <menu+0x32f0>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	4b29      	ldr	r3, [pc, #164]	; (8004774 <menu+0x32f0>)
 80046ce:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80046d0:	4b28      	ldr	r3, [pc, #160]	; (8004774 <menu+0x32f0>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <menu+0x325a>
		   		dilSecim = 1;
 80046d8:	4b26      	ldr	r3, [pc, #152]	; (8004774 <menu+0x32f0>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046de:	f001 fc5d 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e2:	2108      	movs	r1, #8
 80046e4:	4826      	ldr	r0, [pc, #152]	; (8004780 <menu+0x32fc>)
 80046e6:	f005 fa97 	bl	8009c18 <HAL_GPIO_ReadPin>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10e      	bne.n	800470e <menu+0x328a>
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <menu+0x3300>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f083 0301 	eor.w	r3, r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <menu+0x328a>
			eepromData[33] = dilSecim;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <menu+0x32f0>)
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <menu+0x330c>)
 8004704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004708:	4b27      	ldr	r3, [pc, #156]	; (80047a8 <menu+0x3324>)
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800470e:	4b27      	ldr	r3, [pc, #156]	; (80047ac <menu+0x3328>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b1f      	cmp	r3, #31
 8004714:	f040 80b7 	bne.w	8004886 <menu+0x3402>
		calismaSayModu = 0;
 8004718:	4b1c      	ldr	r3, [pc, #112]	; (800478c <menu+0x3308>)
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800471e:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <menu+0x333c>)
 8004720:	2101      	movs	r1, #1
 8004722:	2001      	movs	r0, #1
 8004724:	f7fb ffa0 	bl	8000668 <lcd_print>

		if(iotMode == 0) {
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <menu+0x3340>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d113      	bne.n	8004758 <menu+0x32d4>
			if(dilSecim == 0) {
 8004730:	4b10      	ldr	r3, [pc, #64]	; (8004774 <menu+0x32f0>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004738:	4a23      	ldr	r2, [pc, #140]	; (80047c8 <menu+0x3344>)
 800473a:	2101      	movs	r1, #1
 800473c:	2002      	movs	r0, #2
 800473e:	f7fb ff93 	bl	8000668 <lcd_print>
 8004742:	e050      	b.n	80047e6 <menu+0x3362>
			} else if(dilSecim == 1) {
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <menu+0x32f0>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d14c      	bne.n	80047e6 <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <menu+0x3348>)
 800474e:	2101      	movs	r1, #1
 8004750:	2002      	movs	r0, #2
 8004752:	f7fb ff89 	bl	8000668 <lcd_print>
 8004756:	e046      	b.n	80047e6 <menu+0x3362>
			}
		} else if(iotMode == 1) {
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <menu+0x3340>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d142      	bne.n	80047e6 <menu+0x3362>
			if(dilSecim == 0){
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <menu+0x32f0>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d135      	bne.n	80047d4 <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 8004768:	4a19      	ldr	r2, [pc, #100]	; (80047d0 <menu+0x334c>)
 800476a:	2101      	movs	r1, #1
 800476c:	2002      	movs	r0, #2
 800476e:	f7fb ff7b 	bl	8000668 <lcd_print>
 8004772:	e038      	b.n	80047e6 <menu+0x3362>
 8004774:	20000c6a 	.word	0x20000c6a
 8004778:	0800e284 	.word	0x0800e284
 800477c:	0800e2b8 	.word	0x0800e2b8
 8004780:	40010800 	.word	0x40010800
 8004784:	20000c78 	.word	0x20000c78
 8004788:	20000c8a 	.word	0x20000c8a
 800478c:	20000c69 	.word	0x20000c69
 8004790:	20000b38 	.word	0x20000b38
 8004794:	20000c48 	.word	0x20000c48
 8004798:	200009c0 	.word	0x200009c0
 800479c:	200009bf 	.word	0x200009bf
 80047a0:	20000c47 	.word	0x20000c47
 80047a4:	20000c46 	.word	0x20000c46
 80047a8:	20000c75 	.word	0x20000c75
 80047ac:	20000c49 	.word	0x20000c49
 80047b0:	0800e2cc 	.word	0x0800e2cc
 80047b4:	0800e2e0 	.word	0x0800e2e0
 80047b8:	0800e2f4 	.word	0x0800e2f4
 80047bc:	0800e308 	.word	0x0800e308
 80047c0:	0800e31c 	.word	0x0800e31c
 80047c4:	20000c68 	.word	0x20000c68
 80047c8:	0800db74 	.word	0x0800db74
 80047cc:	0800db88 	.word	0x0800db88
 80047d0:	0800dbd4 	.word	0x0800dbd4
			} else if(dilSecim == 1) {
 80047d4:	4b90      	ldr	r3, [pc, #576]	; (8004a18 <menu+0x3594>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d104      	bne.n	80047e6 <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 80047dc:	4a8f      	ldr	r2, [pc, #572]	; (8004a1c <menu+0x3598>)
 80047de:	2101      	movs	r1, #1
 80047e0:	2002      	movs	r0, #2
 80047e2:	f7fb ff41 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047e6:	2102      	movs	r1, #2
 80047e8:	488d      	ldr	r0, [pc, #564]	; (8004a20 <menu+0x359c>)
 80047ea:	f005 fa15 	bl	8009c18 <HAL_GPIO_ReadPin>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d115      	bne.n	8004820 <menu+0x339c>
 80047f4:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <menu+0x35a0>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f083 0301 	eor.w	r3, r3, #1
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <menu+0x339c>
			iotMode = iotMode + 1;
 8004802:	4b89      	ldr	r3, [pc, #548]	; (8004a28 <menu+0x35a4>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	3301      	adds	r3, #1
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4b87      	ldr	r3, [pc, #540]	; (8004a28 <menu+0x35a4>)
 800480c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800480e:	4b86      	ldr	r3, [pc, #536]	; (8004a28 <menu+0x35a4>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d902      	bls.n	800481c <menu+0x3398>
				iotMode = 0;
 8004816:	4b84      	ldr	r3, [pc, #528]	; (8004a28 <menu+0x35a4>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800481c:	f001 fbbe 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004820:	2104      	movs	r1, #4
 8004822:	487f      	ldr	r0, [pc, #508]	; (8004a20 <menu+0x359c>)
 8004824:	f005 f9f8 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004828:	4603      	mov	r3, r0
 800482a:	2b01      	cmp	r3, #1
 800482c:	d115      	bne.n	800485a <menu+0x33d6>
 800482e:	4b7d      	ldr	r3, [pc, #500]	; (8004a24 <menu+0x35a0>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f083 0301 	eor.w	r3, r3, #1
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <menu+0x33d6>
			iotMode = iotMode - 1;
 800483c:	4b7a      	ldr	r3, [pc, #488]	; (8004a28 <menu+0x35a4>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	3b01      	subs	r3, #1
 8004842:	b2da      	uxtb	r2, r3
 8004844:	4b78      	ldr	r3, [pc, #480]	; (8004a28 <menu+0x35a4>)
 8004846:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004848:	4b77      	ldr	r3, [pc, #476]	; (8004a28 <menu+0x35a4>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <menu+0x33d2>
		   		iotMode = 1;
 8004850:	4b75      	ldr	r3, [pc, #468]	; (8004a28 <menu+0x35a4>)
 8004852:	2201      	movs	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004856:	f001 fba1 	bl	8005f9c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800485a:	2108      	movs	r1, #8
 800485c:	4870      	ldr	r0, [pc, #448]	; (8004a20 <menu+0x359c>)
 800485e:	f005 f9db 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004862:	4603      	mov	r3, r0
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10e      	bne.n	8004886 <menu+0x3402>
 8004868:	4b6e      	ldr	r3, [pc, #440]	; (8004a24 <menu+0x35a0>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	f083 0301 	eor.w	r3, r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <menu+0x3402>
			eepromData[37] = iotMode;
 8004876:	4b6c      	ldr	r3, [pc, #432]	; (8004a28 <menu+0x35a4>)
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <menu+0x35a8>)
 800487c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8004880:	4b6b      	ldr	r3, [pc, #428]	; (8004a30 <menu+0x35ac>)
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004886:	4b6b      	ldr	r3, [pc, #428]	; (8004a34 <menu+0x35b0>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b20      	cmp	r3, #32
 800488c:	d147      	bne.n	800491e <menu+0x349a>
		calismaSayModu = 0;
 800488e:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <menu+0x35b4>)
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004894:	4a69      	ldr	r2, [pc, #420]	; (8004a3c <menu+0x35b8>)
 8004896:	2101      	movs	r1, #1
 8004898:	2001      	movs	r0, #1
 800489a:	f7fb fee5 	bl	8000668 <lcd_print>

		lcd_print(2, 1, machineID);
 800489e:	4a68      	ldr	r2, [pc, #416]	; (8004a40 <menu+0x35bc>)
 80048a0:	2101      	movs	r1, #1
 80048a2:	2002      	movs	r0, #2
 80048a4:	f7fb fee0 	bl	8000668 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 80048a8:	4865      	ldr	r0, [pc, #404]	; (8004a40 <menu+0x35bc>)
 80048aa:	f7fb fcbb 	bl	8000224 <strlen>
 80048ae:	4603      	mov	r3, r0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	4a63      	ldr	r2, [pc, #396]	; (8004a44 <menu+0x35c0>)
 80048b8:	4619      	mov	r1, r3
 80048ba:	2002      	movs	r0, #2
 80048bc:	f7fb fed4 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048c0:	2102      	movs	r1, #2
 80048c2:	4857      	ldr	r0, [pc, #348]	; (8004a20 <menu+0x359c>)
 80048c4:	f005 f9a8 	bl	8009c18 <HAL_GPIO_ReadPin>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d127      	bne.n	800491e <menu+0x349a>
 80048ce:	2104      	movs	r1, #4
 80048d0:	4853      	ldr	r0, [pc, #332]	; (8004a20 <menu+0x359c>)
 80048d2:	f005 f9a1 	bl	8009c18 <HAL_GPIO_ReadPin>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d120      	bne.n	800491e <menu+0x349a>
 80048dc:	4b51      	ldr	r3, [pc, #324]	; (8004a24 <menu+0x35a0>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	f083 0301 	eor.w	r3, r3, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <menu+0x349a>
			takeMachineID(0, hi2c1);
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7fc f977 	bl	8000be0 <takeMachineID>

			HAL_Delay(50);
 80048f2:	2032      	movs	r0, #50	; 0x32
 80048f4:	f004 fbc0 	bl	8009078 <HAL_Delay>

			lcd_print(2, 1, machineID);
 80048f8:	4a51      	ldr	r2, [pc, #324]	; (8004a40 <menu+0x35bc>)
 80048fa:	2101      	movs	r1, #1
 80048fc:	2002      	movs	r0, #2
 80048fe:	f7fb feb3 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 8004902:	484f      	ldr	r0, [pc, #316]	; (8004a40 <menu+0x35bc>)
 8004904:	f7fb fc8e 	bl	8000224 <strlen>
 8004908:	4603      	mov	r3, r0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	3301      	adds	r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4a4c      	ldr	r2, [pc, #304]	; (8004a44 <menu+0x35c0>)
 8004912:	4619      	mov	r1, r3
 8004914:	2002      	movs	r0, #2
 8004916:	f7fb fea7 	bl	8000668 <lcd_print>

			bekle();
 800491a:	f001 fb3f 	bl	8005f9c <bekle>
		}
	}

	if (menuSayac == 33) {
 800491e:	4b45      	ldr	r3, [pc, #276]	; (8004a34 <menu+0x35b0>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b21      	cmp	r3, #33	; 0x21
 8004924:	d153      	bne.n	80049ce <menu+0x354a>
		calismaSayModu = 0;
 8004926:	4b44      	ldr	r3, [pc, #272]	; (8004a38 <menu+0x35b4>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 800492c:	4a46      	ldr	r2, [pc, #280]	; (8004a48 <menu+0x35c4>)
 800492e:	2101      	movs	r1, #1
 8004930:	2001      	movs	r0, #1
 8004932:	f7fb fe99 	bl	8000668 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004936:	4845      	ldr	r0, [pc, #276]	; (8004a4c <menu+0x35c8>)
 8004938:	f7fb fc74 	bl	8000224 <strlen>
 800493c:	4603      	mov	r3, r0
 800493e:	2b10      	cmp	r3, #16
 8004940:	d811      	bhi.n	8004966 <menu+0x34e2>
			lcd_print(2, 1, wifiSSID);
 8004942:	4a42      	ldr	r2, [pc, #264]	; (8004a4c <menu+0x35c8>)
 8004944:	2101      	movs	r1, #1
 8004946:	2002      	movs	r0, #2
 8004948:	f7fb fe8e 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800494c:	483f      	ldr	r0, [pc, #252]	; (8004a4c <menu+0x35c8>)
 800494e:	f7fb fc69 	bl	8000224 <strlen>
 8004952:	4603      	mov	r3, r0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	3301      	adds	r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	4a3a      	ldr	r2, [pc, #232]	; (8004a44 <menu+0x35c0>)
 800495c:	4619      	mov	r1, r3
 800495e:	2002      	movs	r0, #2
 8004960:	f7fb fe82 	bl	8000668 <lcd_print>
 8004964:	e004      	b.n	8004970 <menu+0x34ec>
		} else {
			slideText(wifiSSID, 1, 2);
 8004966:	2202      	movs	r2, #2
 8004968:	2101      	movs	r1, #1
 800496a:	4838      	ldr	r0, [pc, #224]	; (8004a4c <menu+0x35c8>)
 800496c:	f7fc fd34 	bl	80013d8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004970:	2102      	movs	r1, #2
 8004972:	482b      	ldr	r0, [pc, #172]	; (8004a20 <menu+0x359c>)
 8004974:	f005 f950 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004978:	4603      	mov	r3, r0
 800497a:	2b01      	cmp	r3, #1
 800497c:	d127      	bne.n	80049ce <menu+0x354a>
 800497e:	2104      	movs	r1, #4
 8004980:	4827      	ldr	r0, [pc, #156]	; (8004a20 <menu+0x359c>)
 8004982:	f005 f949 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004986:	4603      	mov	r3, r0
 8004988:	2b01      	cmp	r3, #1
 800498a:	d120      	bne.n	80049ce <menu+0x354a>
 800498c:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <menu+0x35a0>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f083 0301 	eor.w	r3, r3, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d019      	beq.n	80049ce <menu+0x354a>
			takeWifiSSID(0, hi2c1);
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	2000      	movs	r0, #0
 800499e:	f7fc fa33 	bl	8000e08 <takeWifiSSID>

			HAL_Delay(50);
 80049a2:	2032      	movs	r0, #50	; 0x32
 80049a4:	f004 fb68 	bl	8009078 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 80049a8:	4a28      	ldr	r2, [pc, #160]	; (8004a4c <menu+0x35c8>)
 80049aa:	2101      	movs	r1, #1
 80049ac:	2002      	movs	r0, #2
 80049ae:	f7fb fe5b 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80049b2:	4826      	ldr	r0, [pc, #152]	; (8004a4c <menu+0x35c8>)
 80049b4:	f7fb fc36 	bl	8000224 <strlen>
 80049b8:	4603      	mov	r3, r0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	4a20      	ldr	r2, [pc, #128]	; (8004a44 <menu+0x35c0>)
 80049c2:	4619      	mov	r1, r3
 80049c4:	2002      	movs	r0, #2
 80049c6:	f7fb fe4f 	bl	8000668 <lcd_print>

			bekle();
 80049ca:	f001 fae7 	bl	8005f9c <bekle>
		}
	}

	if (menuSayac == 34) {
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <menu+0x35b0>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b22      	cmp	r3, #34	; 0x22
 80049d4:	d174      	bne.n	8004ac0 <menu+0x363c>
		calismaSayModu = 0;
 80049d6:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <menu+0x35b4>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80049dc:	4a1c      	ldr	r2, [pc, #112]	; (8004a50 <menu+0x35cc>)
 80049de:	2101      	movs	r1, #1
 80049e0:	2001      	movs	r0, #1
 80049e2:	f7fb fe41 	bl	8000668 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80049e6:	481b      	ldr	r0, [pc, #108]	; (8004a54 <menu+0x35d0>)
 80049e8:	f7fb fc1c 	bl	8000224 <strlen>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d832      	bhi.n	8004a58 <menu+0x35d4>
			lcd_print(2, 1, wifiPass);
 80049f2:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <menu+0x35d0>)
 80049f4:	2101      	movs	r1, #1
 80049f6:	2002      	movs	r0, #2
 80049f8:	f7fb fe36 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80049fc:	4815      	ldr	r0, [pc, #84]	; (8004a54 <menu+0x35d0>)
 80049fe:	f7fb fc11 	bl	8000224 <strlen>
 8004a02:	4603      	mov	r3, r0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <menu+0x35c0>)
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7fb fe2a 	bl	8000668 <lcd_print>
 8004a14:	e025      	b.n	8004a62 <menu+0x35de>
 8004a16:	bf00      	nop
 8004a18:	20000c6a 	.word	0x20000c6a
 8004a1c:	0800dbe8 	.word	0x0800dbe8
 8004a20:	40010800 	.word	0x40010800
 8004a24:	20000c78 	.word	0x20000c78
 8004a28:	20000c68 	.word	0x20000c68
 8004a2c:	20000b38 	.word	0x20000b38
 8004a30:	20000c75 	.word	0x20000c75
 8004a34:	20000c49 	.word	0x20000c49
 8004a38:	20000c69 	.word	0x20000c69
 8004a3c:	0800e330 	.word	0x0800e330
 8004a40:	20000bf4 	.word	0x20000bf4
 8004a44:	2000094c 	.word	0x2000094c
 8004a48:	0800e344 	.word	0x0800e344
 8004a4c:	20000c00 	.word	0x20000c00
 8004a50:	0800e358 	.word	0x0800e358
 8004a54:	20000c24 	.word	0x20000c24
		} else {
			slideText(wifiPass, 1, 2);
 8004a58:	2202      	movs	r2, #2
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4834      	ldr	r0, [pc, #208]	; (8004b30 <menu+0x36ac>)
 8004a5e:	f7fc fcbb 	bl	80013d8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a62:	2102      	movs	r1, #2
 8004a64:	4833      	ldr	r0, [pc, #204]	; (8004b34 <menu+0x36b0>)
 8004a66:	f005 f8d7 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d127      	bne.n	8004ac0 <menu+0x363c>
 8004a70:	2104      	movs	r1, #4
 8004a72:	4830      	ldr	r0, [pc, #192]	; (8004b34 <menu+0x36b0>)
 8004a74:	f005 f8d0 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d120      	bne.n	8004ac0 <menu+0x363c>
 8004a7e:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <menu+0x36b4>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	f083 0301 	eor.w	r3, r3, #1
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d019      	beq.n	8004ac0 <menu+0x363c>
			takeWifiPass(0, hi2c1);
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f7fc fb2e 	bl	80010f0 <takeWifiPass>

			HAL_Delay(50);
 8004a94:	2032      	movs	r0, #50	; 0x32
 8004a96:	f004 faef 	bl	8009078 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004a9a:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <menu+0x36ac>)
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	2002      	movs	r0, #2
 8004aa0:	f7fb fde2 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004aa4:	4822      	ldr	r0, [pc, #136]	; (8004b30 <menu+0x36ac>)
 8004aa6:	f7fb fbbd 	bl	8000224 <strlen>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <menu+0x36b8>)
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	2002      	movs	r0, #2
 8004ab8:	f7fb fdd6 	bl	8000668 <lcd_print>

			bekle();
 8004abc:	f001 fa6e 	bl	8005f9c <bekle>
		}
	}

	if (menuSayac == 35) {
 8004ac0:	4b1f      	ldr	r3, [pc, #124]	; (8004b40 <menu+0x36bc>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b23      	cmp	r3, #35	; 0x23
 8004ac6:	d12e      	bne.n	8004b26 <menu+0x36a2>
		if(dilSecim == 0) {
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <menu+0x36c0>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <menu+0x3662>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <menu+0x36c4>)
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	f7fb fdc7 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004ada:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <menu+0x36c8>)
 8004adc:	2101      	movs	r1, #1
 8004ade:	2002      	movs	r0, #2
 8004ae0:	f7fb fdc2 	bl	8000668 <lcd_print>
 8004ae4:	e00d      	b.n	8004b02 <menu+0x367e>
		} else if(dilSecim == 1) {
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <menu+0x36c0>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d109      	bne.n	8004b02 <menu+0x367e>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004aee:	4a18      	ldr	r2, [pc, #96]	; (8004b50 <menu+0x36cc>)
 8004af0:	2101      	movs	r1, #1
 8004af2:	2001      	movs	r0, #1
 8004af4:	f7fb fdb8 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004af8:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <menu+0x36d0>)
 8004afa:	2101      	movs	r1, #1
 8004afc:	2002      	movs	r0, #2
 8004afe:	f7fb fdb3 	bl	8000668 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b02:	2108      	movs	r1, #8
 8004b04:	480b      	ldr	r0, [pc, #44]	; (8004b34 <menu+0x36b0>)
 8004b06:	f005 f887 	bl	8009c18 <HAL_GPIO_ReadPin>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10a      	bne.n	8004b26 <menu+0x36a2>
			menuGiris = 0;
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <menu+0x36d4>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004b16:	f7fb fdd3 	bl	80006c0 <lcd_clear>
			HAL_Delay(500);
 8004b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b1e:	f004 faab 	bl	8009078 <HAL_Delay>
			NVIC_SystemReset();
 8004b22:	f7fb fe15 	bl	8000750 <__NVIC_SystemReset>
		}
	}
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000c24 	.word	0x20000c24
 8004b34:	40010800 	.word	0x40010800
 8004b38:	20000c78 	.word	0x20000c78
 8004b3c:	2000094c 	.word	0x2000094c
 8004b40:	20000c49 	.word	0x20000c49
 8004b44:	20000c6a 	.word	0x20000c6a
 8004b48:	0800e36c 	.word	0x0800e36c
 8004b4c:	0800e380 	.word	0x0800e380
 8004b50:	0800e394 	.word	0x0800e394
 8004b54:	0800e3a8 	.word	0x0800e3a8
 8004b58:	20000c66 	.word	0x20000c66

08004b5c <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004b66:	48a9      	ldr	r0, [pc, #676]	; (8004e0c <loadMenuTexts+0x2b0>)
 8004b68:	f7fb fe08 	bl	800077c <copyText>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4aa8      	ldr	r2, [pc, #672]	; (8004e10 <loadMenuTexts+0x2b4>)
 8004b70:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004b72:	48a8      	ldr	r0, [pc, #672]	; (8004e14 <loadMenuTexts+0x2b8>)
 8004b74:	f7fb fe02 	bl	800077c <copyText>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4aa7      	ldr	r2, [pc, #668]	; (8004e18 <loadMenuTexts+0x2bc>)
 8004b7c:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004b7e:	48a7      	ldr	r0, [pc, #668]	; (8004e1c <loadMenuTexts+0x2c0>)
 8004b80:	f7fb fdfc 	bl	800077c <copyText>
 8004b84:	4603      	mov	r3, r0
 8004b86:	4aa6      	ldr	r2, [pc, #664]	; (8004e20 <loadMenuTexts+0x2c4>)
 8004b88:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004b8a:	48a6      	ldr	r0, [pc, #664]	; (8004e24 <loadMenuTexts+0x2c8>)
 8004b8c:	f7fb fdf6 	bl	800077c <copyText>
 8004b90:	4603      	mov	r3, r0
 8004b92:	4aa5      	ldr	r2, [pc, #660]	; (8004e28 <loadMenuTexts+0x2cc>)
 8004b94:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004b96:	48a5      	ldr	r0, [pc, #660]	; (8004e2c <loadMenuTexts+0x2d0>)
 8004b98:	f7fb fdf0 	bl	800077c <copyText>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4aa4      	ldr	r2, [pc, #656]	; (8004e30 <loadMenuTexts+0x2d4>)
 8004ba0:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004ba2:	48a4      	ldr	r0, [pc, #656]	; (8004e34 <loadMenuTexts+0x2d8>)
 8004ba4:	f7fb fdea 	bl	800077c <copyText>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4aa3      	ldr	r2, [pc, #652]	; (8004e38 <loadMenuTexts+0x2dc>)
 8004bac:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004bae:	48a3      	ldr	r0, [pc, #652]	; (8004e3c <loadMenuTexts+0x2e0>)
 8004bb0:	f7fb fde4 	bl	800077c <copyText>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4aa2      	ldr	r2, [pc, #648]	; (8004e40 <loadMenuTexts+0x2e4>)
 8004bb8:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 82d1 	bne.w	8005164 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004bc2:	48a0      	ldr	r0, [pc, #640]	; (8004e44 <loadMenuTexts+0x2e8>)
 8004bc4:	f7fb fdda 	bl	800077c <copyText>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4a9f      	ldr	r2, [pc, #636]	; (8004e48 <loadMenuTexts+0x2ec>)
 8004bcc:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004bce:	489f      	ldr	r0, [pc, #636]	; (8004e4c <loadMenuTexts+0x2f0>)
 8004bd0:	f7fb fdd4 	bl	800077c <copyText>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4a9e      	ldr	r2, [pc, #632]	; (8004e50 <loadMenuTexts+0x2f4>)
 8004bd8:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004bda:	489e      	ldr	r0, [pc, #632]	; (8004e54 <loadMenuTexts+0x2f8>)
 8004bdc:	f7fb fdce 	bl	800077c <copyText>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4a9d      	ldr	r2, [pc, #628]	; (8004e58 <loadMenuTexts+0x2fc>)
 8004be4:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004be6:	489d      	ldr	r0, [pc, #628]	; (8004e5c <loadMenuTexts+0x300>)
 8004be8:	f7fb fdc8 	bl	800077c <copyText>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4a9c      	ldr	r2, [pc, #624]	; (8004e60 <loadMenuTexts+0x304>)
 8004bf0:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004bf2:	489c      	ldr	r0, [pc, #624]	; (8004e64 <loadMenuTexts+0x308>)
 8004bf4:	f7fb fdc2 	bl	800077c <copyText>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4a9b      	ldr	r2, [pc, #620]	; (8004e68 <loadMenuTexts+0x30c>)
 8004bfc:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004bfe:	489b      	ldr	r0, [pc, #620]	; (8004e6c <loadMenuTexts+0x310>)
 8004c00:	f7fb fdbc 	bl	800077c <copyText>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4a9a      	ldr	r2, [pc, #616]	; (8004e70 <loadMenuTexts+0x314>)
 8004c08:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004c0a:	489a      	ldr	r0, [pc, #616]	; (8004e74 <loadMenuTexts+0x318>)
 8004c0c:	f7fb fdb6 	bl	800077c <copyText>
 8004c10:	4603      	mov	r3, r0
 8004c12:	4a99      	ldr	r2, [pc, #612]	; (8004e78 <loadMenuTexts+0x31c>)
 8004c14:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004c16:	4899      	ldr	r0, [pc, #612]	; (8004e7c <loadMenuTexts+0x320>)
 8004c18:	f7fb fdb0 	bl	800077c <copyText>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4a98      	ldr	r2, [pc, #608]	; (8004e80 <loadMenuTexts+0x324>)
 8004c20:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004c22:	4898      	ldr	r0, [pc, #608]	; (8004e84 <loadMenuTexts+0x328>)
 8004c24:	f7fb fdaa 	bl	800077c <copyText>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4a97      	ldr	r2, [pc, #604]	; (8004e88 <loadMenuTexts+0x32c>)
 8004c2c:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004c2e:	4897      	ldr	r0, [pc, #604]	; (8004e8c <loadMenuTexts+0x330>)
 8004c30:	f7fb fda4 	bl	800077c <copyText>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4a96      	ldr	r2, [pc, #600]	; (8004e90 <loadMenuTexts+0x334>)
 8004c38:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004c3a:	4896      	ldr	r0, [pc, #600]	; (8004e94 <loadMenuTexts+0x338>)
 8004c3c:	f7fb fd9e 	bl	800077c <copyText>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4a95      	ldr	r2, [pc, #596]	; (8004e98 <loadMenuTexts+0x33c>)
 8004c44:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004c46:	4895      	ldr	r0, [pc, #596]	; (8004e9c <loadMenuTexts+0x340>)
 8004c48:	f7fb fd98 	bl	800077c <copyText>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4a94      	ldr	r2, [pc, #592]	; (8004ea0 <loadMenuTexts+0x344>)
 8004c50:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004c52:	4894      	ldr	r0, [pc, #592]	; (8004ea4 <loadMenuTexts+0x348>)
 8004c54:	f7fb fd92 	bl	800077c <copyText>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a93      	ldr	r2, [pc, #588]	; (8004ea8 <loadMenuTexts+0x34c>)
 8004c5c:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004c5e:	4893      	ldr	r0, [pc, #588]	; (8004eac <loadMenuTexts+0x350>)
 8004c60:	f7fb fd8c 	bl	800077c <copyText>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4a92      	ldr	r2, [pc, #584]	; (8004eb0 <loadMenuTexts+0x354>)
 8004c68:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004c6a:	4892      	ldr	r0, [pc, #584]	; (8004eb4 <loadMenuTexts+0x358>)
 8004c6c:	f7fb fd86 	bl	800077c <copyText>
 8004c70:	4603      	mov	r3, r0
 8004c72:	4a91      	ldr	r2, [pc, #580]	; (8004eb8 <loadMenuTexts+0x35c>)
 8004c74:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004c76:	4891      	ldr	r0, [pc, #580]	; (8004ebc <loadMenuTexts+0x360>)
 8004c78:	f7fb fd80 	bl	800077c <copyText>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4a90      	ldr	r2, [pc, #576]	; (8004ec0 <loadMenuTexts+0x364>)
 8004c80:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004c82:	4890      	ldr	r0, [pc, #576]	; (8004ec4 <loadMenuTexts+0x368>)
 8004c84:	f7fb fd7a 	bl	800077c <copyText>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4a8f      	ldr	r2, [pc, #572]	; (8004ec8 <loadMenuTexts+0x36c>)
 8004c8c:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004c8e:	488f      	ldr	r0, [pc, #572]	; (8004ecc <loadMenuTexts+0x370>)
 8004c90:	f7fb fd74 	bl	800077c <copyText>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4a8e      	ldr	r2, [pc, #568]	; (8004ed0 <loadMenuTexts+0x374>)
 8004c98:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004c9a:	488e      	ldr	r0, [pc, #568]	; (8004ed4 <loadMenuTexts+0x378>)
 8004c9c:	f7fb fd6e 	bl	800077c <copyText>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4a8d      	ldr	r2, [pc, #564]	; (8004ed8 <loadMenuTexts+0x37c>)
 8004ca4:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004ca6:	488d      	ldr	r0, [pc, #564]	; (8004edc <loadMenuTexts+0x380>)
 8004ca8:	f7fb fd68 	bl	800077c <copyText>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4a8c      	ldr	r2, [pc, #560]	; (8004ee0 <loadMenuTexts+0x384>)
 8004cb0:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004cb2:	488c      	ldr	r0, [pc, #560]	; (8004ee4 <loadMenuTexts+0x388>)
 8004cb4:	f7fb fd62 	bl	800077c <copyText>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4a8b      	ldr	r2, [pc, #556]	; (8004ee8 <loadMenuTexts+0x38c>)
 8004cbc:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004cbe:	488b      	ldr	r0, [pc, #556]	; (8004eec <loadMenuTexts+0x390>)
 8004cc0:	f7fb fd5c 	bl	800077c <copyText>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	4a8a      	ldr	r2, [pc, #552]	; (8004ef0 <loadMenuTexts+0x394>)
 8004cc8:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004cca:	488a      	ldr	r0, [pc, #552]	; (8004ef4 <loadMenuTexts+0x398>)
 8004ccc:	f7fb fd56 	bl	800077c <copyText>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4a89      	ldr	r2, [pc, #548]	; (8004ef8 <loadMenuTexts+0x39c>)
 8004cd4:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004cd6:	4889      	ldr	r0, [pc, #548]	; (8004efc <loadMenuTexts+0x3a0>)
 8004cd8:	f7fb fd50 	bl	800077c <copyText>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4a88      	ldr	r2, [pc, #544]	; (8004f00 <loadMenuTexts+0x3a4>)
 8004ce0:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004ce2:	4888      	ldr	r0, [pc, #544]	; (8004f04 <loadMenuTexts+0x3a8>)
 8004ce4:	f7fb fd4a 	bl	800077c <copyText>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4a87      	ldr	r2, [pc, #540]	; (8004f08 <loadMenuTexts+0x3ac>)
 8004cec:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004cee:	4887      	ldr	r0, [pc, #540]	; (8004f0c <loadMenuTexts+0x3b0>)
 8004cf0:	f7fb fd44 	bl	800077c <copyText>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4a86      	ldr	r2, [pc, #536]	; (8004f10 <loadMenuTexts+0x3b4>)
 8004cf8:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004cfa:	4886      	ldr	r0, [pc, #536]	; (8004f14 <loadMenuTexts+0x3b8>)
 8004cfc:	f7fb fd3e 	bl	800077c <copyText>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4a85      	ldr	r2, [pc, #532]	; (8004f18 <loadMenuTexts+0x3bc>)
 8004d04:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004d06:	4885      	ldr	r0, [pc, #532]	; (8004f1c <loadMenuTexts+0x3c0>)
 8004d08:	f7fb fd38 	bl	800077c <copyText>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4a84      	ldr	r2, [pc, #528]	; (8004f20 <loadMenuTexts+0x3c4>)
 8004d10:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004d12:	4884      	ldr	r0, [pc, #528]	; (8004f24 <loadMenuTexts+0x3c8>)
 8004d14:	f7fb fd32 	bl	800077c <copyText>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a83      	ldr	r2, [pc, #524]	; (8004f28 <loadMenuTexts+0x3cc>)
 8004d1c:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004d1e:	4883      	ldr	r0, [pc, #524]	; (8004f2c <loadMenuTexts+0x3d0>)
 8004d20:	f7fb fd2c 	bl	800077c <copyText>
 8004d24:	4603      	mov	r3, r0
 8004d26:	4a82      	ldr	r2, [pc, #520]	; (8004f30 <loadMenuTexts+0x3d4>)
 8004d28:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004d2a:	4882      	ldr	r0, [pc, #520]	; (8004f34 <loadMenuTexts+0x3d8>)
 8004d2c:	f7fb fd26 	bl	800077c <copyText>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a81      	ldr	r2, [pc, #516]	; (8004f38 <loadMenuTexts+0x3dc>)
 8004d34:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004d36:	4881      	ldr	r0, [pc, #516]	; (8004f3c <loadMenuTexts+0x3e0>)
 8004d38:	f7fb fd20 	bl	800077c <copyText>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4a80      	ldr	r2, [pc, #512]	; (8004f40 <loadMenuTexts+0x3e4>)
 8004d40:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004d42:	4880      	ldr	r0, [pc, #512]	; (8004f44 <loadMenuTexts+0x3e8>)
 8004d44:	f7fb fd1a 	bl	800077c <copyText>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4a7f      	ldr	r2, [pc, #508]	; (8004f48 <loadMenuTexts+0x3ec>)
 8004d4c:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004d4e:	487f      	ldr	r0, [pc, #508]	; (8004f4c <loadMenuTexts+0x3f0>)
 8004d50:	f7fb fd14 	bl	800077c <copyText>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4a7e      	ldr	r2, [pc, #504]	; (8004f50 <loadMenuTexts+0x3f4>)
 8004d58:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004d5a:	487e      	ldr	r0, [pc, #504]	; (8004f54 <loadMenuTexts+0x3f8>)
 8004d5c:	f7fb fd0e 	bl	800077c <copyText>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4a7d      	ldr	r2, [pc, #500]	; (8004f58 <loadMenuTexts+0x3fc>)
 8004d64:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004d66:	487d      	ldr	r0, [pc, #500]	; (8004f5c <loadMenuTexts+0x400>)
 8004d68:	f7fb fd08 	bl	800077c <copyText>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4a7c      	ldr	r2, [pc, #496]	; (8004f60 <loadMenuTexts+0x404>)
 8004d70:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004d72:	487c      	ldr	r0, [pc, #496]	; (8004f64 <loadMenuTexts+0x408>)
 8004d74:	f7fb fd02 	bl	800077c <copyText>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4a7b      	ldr	r2, [pc, #492]	; (8004f68 <loadMenuTexts+0x40c>)
 8004d7c:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004d7e:	487b      	ldr	r0, [pc, #492]	; (8004f6c <loadMenuTexts+0x410>)
 8004d80:	f7fb fcfc 	bl	800077c <copyText>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4a7a      	ldr	r2, [pc, #488]	; (8004f70 <loadMenuTexts+0x414>)
 8004d88:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004d8a:	487a      	ldr	r0, [pc, #488]	; (8004f74 <loadMenuTexts+0x418>)
 8004d8c:	f7fb fcf6 	bl	800077c <copyText>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4a79      	ldr	r2, [pc, #484]	; (8004f78 <loadMenuTexts+0x41c>)
 8004d94:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004d96:	4879      	ldr	r0, [pc, #484]	; (8004f7c <loadMenuTexts+0x420>)
 8004d98:	f7fb fcf0 	bl	800077c <copyText>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4a78      	ldr	r2, [pc, #480]	; (8004f80 <loadMenuTexts+0x424>)
 8004da0:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004da2:	4878      	ldr	r0, [pc, #480]	; (8004f84 <loadMenuTexts+0x428>)
 8004da4:	f7fb fcea 	bl	800077c <copyText>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a77      	ldr	r2, [pc, #476]	; (8004f88 <loadMenuTexts+0x42c>)
 8004dac:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004dae:	4877      	ldr	r0, [pc, #476]	; (8004f8c <loadMenuTexts+0x430>)
 8004db0:	f7fb fce4 	bl	800077c <copyText>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a76      	ldr	r2, [pc, #472]	; (8004f90 <loadMenuTexts+0x434>)
 8004db8:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004dba:	4876      	ldr	r0, [pc, #472]	; (8004f94 <loadMenuTexts+0x438>)
 8004dbc:	f7fb fcde 	bl	800077c <copyText>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a75      	ldr	r2, [pc, #468]	; (8004f98 <loadMenuTexts+0x43c>)
 8004dc4:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004dc6:	4875      	ldr	r0, [pc, #468]	; (8004f9c <loadMenuTexts+0x440>)
 8004dc8:	f7fb fcd8 	bl	800077c <copyText>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a74      	ldr	r2, [pc, #464]	; (8004fa0 <loadMenuTexts+0x444>)
 8004dd0:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004dd2:	4874      	ldr	r0, [pc, #464]	; (8004fa4 <loadMenuTexts+0x448>)
 8004dd4:	f7fb fcd2 	bl	800077c <copyText>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4a73      	ldr	r2, [pc, #460]	; (8004fa8 <loadMenuTexts+0x44c>)
 8004ddc:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004dde:	4873      	ldr	r0, [pc, #460]	; (8004fac <loadMenuTexts+0x450>)
 8004de0:	f7fb fccc 	bl	800077c <copyText>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a72      	ldr	r2, [pc, #456]	; (8004fb0 <loadMenuTexts+0x454>)
 8004de8:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004dea:	4872      	ldr	r0, [pc, #456]	; (8004fb4 <loadMenuTexts+0x458>)
 8004dec:	f7fb fcc6 	bl	800077c <copyText>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4a71      	ldr	r2, [pc, #452]	; (8004fb8 <loadMenuTexts+0x45c>)
 8004df4:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004df6:	4871      	ldr	r0, [pc, #452]	; (8004fbc <loadMenuTexts+0x460>)
 8004df8:	f7fb fcc0 	bl	800077c <copyText>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4a70      	ldr	r2, [pc, #448]	; (8004fc0 <loadMenuTexts+0x464>)
 8004e00:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004e02:	4870      	ldr	r0, [pc, #448]	; (8004fc4 <loadMenuTexts+0x468>)
 8004e04:	f7fb fcba 	bl	800077c <copyText>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	e0dd      	b.n	8004fc8 <loadMenuTexts+0x46c>
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	20000cb0 	.word	0x20000cb0
 8004e14:	20000010 	.word	0x20000010
 8004e18:	20000cb4 	.word	0x20000cb4
 8004e1c:	20000020 	.word	0x20000020
 8004e20:	20000d0c 	.word	0x20000d0c
 8004e24:	20000030 	.word	0x20000030
 8004e28:	20000d3c 	.word	0x20000d3c
 8004e2c:	20000040 	.word	0x20000040
 8004e30:	20000d44 	.word	0x20000d44
 8004e34:	20000050 	.word	0x20000050
 8004e38:	20000dbc 	.word	0x20000dbc
 8004e3c:	20000060 	.word	0x20000060
 8004e40:	20000dc0 	.word	0x20000dc0
 8004e44:	20000070 	.word	0x20000070
 8004e48:	20000cb8 	.word	0x20000cb8
 8004e4c:	20000080 	.word	0x20000080
 8004e50:	20000cbc 	.word	0x20000cbc
 8004e54:	20000090 	.word	0x20000090
 8004e58:	20000cc0 	.word	0x20000cc0
 8004e5c:	200000a0 	.word	0x200000a0
 8004e60:	20000cc4 	.word	0x20000cc4
 8004e64:	200000b0 	.word	0x200000b0
 8004e68:	20000cc8 	.word	0x20000cc8
 8004e6c:	200000c0 	.word	0x200000c0
 8004e70:	20000ccc 	.word	0x20000ccc
 8004e74:	200000d0 	.word	0x200000d0
 8004e78:	20000cd0 	.word	0x20000cd0
 8004e7c:	200000e0 	.word	0x200000e0
 8004e80:	20000cd4 	.word	0x20000cd4
 8004e84:	200000f0 	.word	0x200000f0
 8004e88:	20000cd8 	.word	0x20000cd8
 8004e8c:	20000100 	.word	0x20000100
 8004e90:	20000cdc 	.word	0x20000cdc
 8004e94:	20000110 	.word	0x20000110
 8004e98:	20000ce0 	.word	0x20000ce0
 8004e9c:	20000120 	.word	0x20000120
 8004ea0:	20000ce4 	.word	0x20000ce4
 8004ea4:	20000130 	.word	0x20000130
 8004ea8:	20000ce8 	.word	0x20000ce8
 8004eac:	20000140 	.word	0x20000140
 8004eb0:	20000cec 	.word	0x20000cec
 8004eb4:	20000150 	.word	0x20000150
 8004eb8:	20000cf0 	.word	0x20000cf0
 8004ebc:	20000160 	.word	0x20000160
 8004ec0:	20000cf4 	.word	0x20000cf4
 8004ec4:	20000170 	.word	0x20000170
 8004ec8:	20000cf8 	.word	0x20000cf8
 8004ecc:	20000180 	.word	0x20000180
 8004ed0:	20000cfc 	.word	0x20000cfc
 8004ed4:	20000190 	.word	0x20000190
 8004ed8:	20000d00 	.word	0x20000d00
 8004edc:	200001a0 	.word	0x200001a0
 8004ee0:	20000d04 	.word	0x20000d04
 8004ee4:	200001b0 	.word	0x200001b0
 8004ee8:	20000d08 	.word	0x20000d08
 8004eec:	200001c0 	.word	0x200001c0
 8004ef0:	20000d10 	.word	0x20000d10
 8004ef4:	200001d0 	.word	0x200001d0
 8004ef8:	20000d14 	.word	0x20000d14
 8004efc:	200001e0 	.word	0x200001e0
 8004f00:	20000d18 	.word	0x20000d18
 8004f04:	200001f0 	.word	0x200001f0
 8004f08:	20000d1c 	.word	0x20000d1c
 8004f0c:	20000200 	.word	0x20000200
 8004f10:	20000d20 	.word	0x20000d20
 8004f14:	20000210 	.word	0x20000210
 8004f18:	20000d24 	.word	0x20000d24
 8004f1c:	20000220 	.word	0x20000220
 8004f20:	20000d28 	.word	0x20000d28
 8004f24:	20000230 	.word	0x20000230
 8004f28:	20000d2c 	.word	0x20000d2c
 8004f2c:	20000240 	.word	0x20000240
 8004f30:	20000d30 	.word	0x20000d30
 8004f34:	20000250 	.word	0x20000250
 8004f38:	20000d34 	.word	0x20000d34
 8004f3c:	20000260 	.word	0x20000260
 8004f40:	20000d38 	.word	0x20000d38
 8004f44:	20000270 	.word	0x20000270
 8004f48:	20000d40 	.word	0x20000d40
 8004f4c:	20000280 	.word	0x20000280
 8004f50:	20000d48 	.word	0x20000d48
 8004f54:	20000290 	.word	0x20000290
 8004f58:	20000d4c 	.word	0x20000d4c
 8004f5c:	200002a0 	.word	0x200002a0
 8004f60:	20000d50 	.word	0x20000d50
 8004f64:	200002b0 	.word	0x200002b0
 8004f68:	20000d54 	.word	0x20000d54
 8004f6c:	200002c0 	.word	0x200002c0
 8004f70:	20000d58 	.word	0x20000d58
 8004f74:	200002d0 	.word	0x200002d0
 8004f78:	20000d5c 	.word	0x20000d5c
 8004f7c:	200002e0 	.word	0x200002e0
 8004f80:	20000d60 	.word	0x20000d60
 8004f84:	200002f0 	.word	0x200002f0
 8004f88:	20000d64 	.word	0x20000d64
 8004f8c:	20000300 	.word	0x20000300
 8004f90:	20000d68 	.word	0x20000d68
 8004f94:	20000310 	.word	0x20000310
 8004f98:	20000d6c 	.word	0x20000d6c
 8004f9c:	20000320 	.word	0x20000320
 8004fa0:	20000d70 	.word	0x20000d70
 8004fa4:	20000330 	.word	0x20000330
 8004fa8:	20000d74 	.word	0x20000d74
 8004fac:	20000340 	.word	0x20000340
 8004fb0:	20000d78 	.word	0x20000d78
 8004fb4:	20000350 	.word	0x20000350
 8004fb8:	20000d7c 	.word	0x20000d7c
 8004fbc:	20000360 	.word	0x20000360
 8004fc0:	20000d80 	.word	0x20000d80
 8004fc4:	20000370 	.word	0x20000370
 8004fc8:	4a3d      	ldr	r2, [pc, #244]	; (80050c0 <loadMenuTexts+0x564>)
 8004fca:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8004fcc:	483d      	ldr	r0, [pc, #244]	; (80050c4 <loadMenuTexts+0x568>)
 8004fce:	f7fb fbd5 	bl	800077c <copyText>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4a3c      	ldr	r2, [pc, #240]	; (80050c8 <loadMenuTexts+0x56c>)
 8004fd6:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8004fd8:	483c      	ldr	r0, [pc, #240]	; (80050cc <loadMenuTexts+0x570>)
 8004fda:	f7fb fbcf 	bl	800077c <copyText>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4a3b      	ldr	r2, [pc, #236]	; (80050d0 <loadMenuTexts+0x574>)
 8004fe2:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8004fe4:	483b      	ldr	r0, [pc, #236]	; (80050d4 <loadMenuTexts+0x578>)
 8004fe6:	f7fb fbc9 	bl	800077c <copyText>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4a3a      	ldr	r2, [pc, #232]	; (80050d8 <loadMenuTexts+0x57c>)
 8004fee:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8004ff0:	483a      	ldr	r0, [pc, #232]	; (80050dc <loadMenuTexts+0x580>)
 8004ff2:	f7fb fbc3 	bl	800077c <copyText>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4a39      	ldr	r2, [pc, #228]	; (80050e0 <loadMenuTexts+0x584>)
 8004ffa:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8004ffc:	4839      	ldr	r0, [pc, #228]	; (80050e4 <loadMenuTexts+0x588>)
 8004ffe:	f7fb fbbd 	bl	800077c <copyText>
 8005002:	4603      	mov	r3, r0
 8005004:	4a38      	ldr	r2, [pc, #224]	; (80050e8 <loadMenuTexts+0x58c>)
 8005006:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005008:	4838      	ldr	r0, [pc, #224]	; (80050ec <loadMenuTexts+0x590>)
 800500a:	f7fb fbb7 	bl	800077c <copyText>
 800500e:	4603      	mov	r3, r0
 8005010:	4a37      	ldr	r2, [pc, #220]	; (80050f0 <loadMenuTexts+0x594>)
 8005012:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005014:	4837      	ldr	r0, [pc, #220]	; (80050f4 <loadMenuTexts+0x598>)
 8005016:	f7fb fbb1 	bl	800077c <copyText>
 800501a:	4603      	mov	r3, r0
 800501c:	4a36      	ldr	r2, [pc, #216]	; (80050f8 <loadMenuTexts+0x59c>)
 800501e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005020:	4836      	ldr	r0, [pc, #216]	; (80050fc <loadMenuTexts+0x5a0>)
 8005022:	f7fb fbab 	bl	800077c <copyText>
 8005026:	4603      	mov	r3, r0
 8005028:	4a35      	ldr	r2, [pc, #212]	; (8005100 <loadMenuTexts+0x5a4>)
 800502a:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 800502c:	4835      	ldr	r0, [pc, #212]	; (8005104 <loadMenuTexts+0x5a8>)
 800502e:	f7fb fba5 	bl	800077c <copyText>
 8005032:	4603      	mov	r3, r0
 8005034:	4a34      	ldr	r2, [pc, #208]	; (8005108 <loadMenuTexts+0x5ac>)
 8005036:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005038:	4834      	ldr	r0, [pc, #208]	; (800510c <loadMenuTexts+0x5b0>)
 800503a:	f7fb fb9f 	bl	800077c <copyText>
 800503e:	4603      	mov	r3, r0
 8005040:	4a33      	ldr	r2, [pc, #204]	; (8005110 <loadMenuTexts+0x5b4>)
 8005042:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005044:	4833      	ldr	r0, [pc, #204]	; (8005114 <loadMenuTexts+0x5b8>)
 8005046:	f7fb fb99 	bl	800077c <copyText>
 800504a:	4603      	mov	r3, r0
 800504c:	4a32      	ldr	r2, [pc, #200]	; (8005118 <loadMenuTexts+0x5bc>)
 800504e:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005050:	4832      	ldr	r0, [pc, #200]	; (800511c <loadMenuTexts+0x5c0>)
 8005052:	f7fb fb93 	bl	800077c <copyText>
 8005056:	4603      	mov	r3, r0
 8005058:	4a31      	ldr	r2, [pc, #196]	; (8005120 <loadMenuTexts+0x5c4>)
 800505a:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 800505c:	4831      	ldr	r0, [pc, #196]	; (8005124 <loadMenuTexts+0x5c8>)
 800505e:	f7fb fb8d 	bl	800077c <copyText>
 8005062:	4603      	mov	r3, r0
 8005064:	4a30      	ldr	r2, [pc, #192]	; (8005128 <loadMenuTexts+0x5cc>)
 8005066:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005068:	4830      	ldr	r0, [pc, #192]	; (800512c <loadMenuTexts+0x5d0>)
 800506a:	f7fb fb87 	bl	800077c <copyText>
 800506e:	4603      	mov	r3, r0
 8005070:	4a2f      	ldr	r2, [pc, #188]	; (8005130 <loadMenuTexts+0x5d4>)
 8005072:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8005074:	482f      	ldr	r0, [pc, #188]	; (8005134 <loadMenuTexts+0x5d8>)
 8005076:	f7fb fb81 	bl	800077c <copyText>
 800507a:	4603      	mov	r3, r0
 800507c:	4a2e      	ldr	r2, [pc, #184]	; (8005138 <loadMenuTexts+0x5dc>)
 800507e:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005080:	482e      	ldr	r0, [pc, #184]	; (800513c <loadMenuTexts+0x5e0>)
 8005082:	f7fb fb7b 	bl	800077c <copyText>
 8005086:	4603      	mov	r3, r0
 8005088:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <loadMenuTexts+0x5e4>)
 800508a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 800508c:	482d      	ldr	r0, [pc, #180]	; (8005144 <loadMenuTexts+0x5e8>)
 800508e:	f7fb fb75 	bl	800077c <copyText>
 8005092:	4603      	mov	r3, r0
 8005094:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <loadMenuTexts+0x5ec>)
 8005096:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005098:	482c      	ldr	r0, [pc, #176]	; (800514c <loadMenuTexts+0x5f0>)
 800509a:	f7fb fb6f 	bl	800077c <copyText>
 800509e:	4603      	mov	r3, r0
 80050a0:	4a2b      	ldr	r2, [pc, #172]	; (8005150 <loadMenuTexts+0x5f4>)
 80050a2:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80050a4:	482b      	ldr	r0, [pc, #172]	; (8005154 <loadMenuTexts+0x5f8>)
 80050a6:	f7fb fb69 	bl	800077c <copyText>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4a2a      	ldr	r2, [pc, #168]	; (8005158 <loadMenuTexts+0x5fc>)
 80050ae:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80050b0:	482a      	ldr	r0, [pc, #168]	; (800515c <loadMenuTexts+0x600>)
 80050b2:	f7fb fb63 	bl	800077c <copyText>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4a29      	ldr	r2, [pc, #164]	; (8005160 <loadMenuTexts+0x604>)
 80050ba:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80050bc:	e2d3      	b.n	8005666 <loadMenuTexts+0xb0a>
 80050be:	bf00      	nop
 80050c0:	20000d84 	.word	0x20000d84
 80050c4:	20000380 	.word	0x20000380
 80050c8:	20000d88 	.word	0x20000d88
 80050cc:	20000390 	.word	0x20000390
 80050d0:	20000d8c 	.word	0x20000d8c
 80050d4:	200003a0 	.word	0x200003a0
 80050d8:	20000d90 	.word	0x20000d90
 80050dc:	200003b0 	.word	0x200003b0
 80050e0:	20000d94 	.word	0x20000d94
 80050e4:	200003c0 	.word	0x200003c0
 80050e8:	20000d98 	.word	0x20000d98
 80050ec:	200003d0 	.word	0x200003d0
 80050f0:	20000d9c 	.word	0x20000d9c
 80050f4:	200003e0 	.word	0x200003e0
 80050f8:	20000da0 	.word	0x20000da0
 80050fc:	200003f0 	.word	0x200003f0
 8005100:	20000da4 	.word	0x20000da4
 8005104:	20000400 	.word	0x20000400
 8005108:	20000da8 	.word	0x20000da8
 800510c:	20000410 	.word	0x20000410
 8005110:	20000dac 	.word	0x20000dac
 8005114:	20000420 	.word	0x20000420
 8005118:	20000db0 	.word	0x20000db0
 800511c:	20000430 	.word	0x20000430
 8005120:	20000db4 	.word	0x20000db4
 8005124:	20000440 	.word	0x20000440
 8005128:	20000db8 	.word	0x20000db8
 800512c:	20000450 	.word	0x20000450
 8005130:	20000dc4 	.word	0x20000dc4
 8005134:	20000460 	.word	0x20000460
 8005138:	20000dc8 	.word	0x20000dc8
 800513c:	20000470 	.word	0x20000470
 8005140:	20000dcc 	.word	0x20000dcc
 8005144:	20000480 	.word	0x20000480
 8005148:	20000dd0 	.word	0x20000dd0
 800514c:	20000490 	.word	0x20000490
 8005150:	20000dd4 	.word	0x20000dd4
 8005154:	200004a0 	.word	0x200004a0
 8005158:	20000dd8 	.word	0x20000dd8
 800515c:	200004b0 	.word	0x200004b0
 8005160:	20000ddc 	.word	0x20000ddc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8005164:	48a9      	ldr	r0, [pc, #676]	; (800540c <loadMenuTexts+0x8b0>)
 8005166:	f7fb fb09 	bl	800077c <copyText>
 800516a:	4603      	mov	r3, r0
 800516c:	4aa8      	ldr	r2, [pc, #672]	; (8005410 <loadMenuTexts+0x8b4>)
 800516e:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005170:	48a8      	ldr	r0, [pc, #672]	; (8005414 <loadMenuTexts+0x8b8>)
 8005172:	f7fb fb03 	bl	800077c <copyText>
 8005176:	4603      	mov	r3, r0
 8005178:	4aa7      	ldr	r2, [pc, #668]	; (8005418 <loadMenuTexts+0x8bc>)
 800517a:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 800517c:	48a7      	ldr	r0, [pc, #668]	; (800541c <loadMenuTexts+0x8c0>)
 800517e:	f7fb fafd 	bl	800077c <copyText>
 8005182:	4603      	mov	r3, r0
 8005184:	4aa6      	ldr	r2, [pc, #664]	; (8005420 <loadMenuTexts+0x8c4>)
 8005186:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005188:	48a6      	ldr	r0, [pc, #664]	; (8005424 <loadMenuTexts+0x8c8>)
 800518a:	f7fb faf7 	bl	800077c <copyText>
 800518e:	4603      	mov	r3, r0
 8005190:	4aa5      	ldr	r2, [pc, #660]	; (8005428 <loadMenuTexts+0x8cc>)
 8005192:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8005194:	48a5      	ldr	r0, [pc, #660]	; (800542c <loadMenuTexts+0x8d0>)
 8005196:	f7fb faf1 	bl	800077c <copyText>
 800519a:	4603      	mov	r3, r0
 800519c:	4aa4      	ldr	r2, [pc, #656]	; (8005430 <loadMenuTexts+0x8d4>)
 800519e:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80051a0:	48a4      	ldr	r0, [pc, #656]	; (8005434 <loadMenuTexts+0x8d8>)
 80051a2:	f7fb faeb 	bl	800077c <copyText>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4aa3      	ldr	r2, [pc, #652]	; (8005438 <loadMenuTexts+0x8dc>)
 80051aa:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80051ac:	48a3      	ldr	r0, [pc, #652]	; (800543c <loadMenuTexts+0x8e0>)
 80051ae:	f7fb fae5 	bl	800077c <copyText>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4aa2      	ldr	r2, [pc, #648]	; (8005440 <loadMenuTexts+0x8e4>)
 80051b6:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80051b8:	48a2      	ldr	r0, [pc, #648]	; (8005444 <loadMenuTexts+0x8e8>)
 80051ba:	f7fb fadf 	bl	800077c <copyText>
 80051be:	4603      	mov	r3, r0
 80051c0:	4aa1      	ldr	r2, [pc, #644]	; (8005448 <loadMenuTexts+0x8ec>)
 80051c2:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80051c4:	48a1      	ldr	r0, [pc, #644]	; (800544c <loadMenuTexts+0x8f0>)
 80051c6:	f7fb fad9 	bl	800077c <copyText>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4aa0      	ldr	r2, [pc, #640]	; (8005450 <loadMenuTexts+0x8f4>)
 80051ce:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80051d0:	48a0      	ldr	r0, [pc, #640]	; (8005454 <loadMenuTexts+0x8f8>)
 80051d2:	f7fb fad3 	bl	800077c <copyText>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a9f      	ldr	r2, [pc, #636]	; (8005458 <loadMenuTexts+0x8fc>)
 80051da:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80051dc:	489f      	ldr	r0, [pc, #636]	; (800545c <loadMenuTexts+0x900>)
 80051de:	f7fb facd 	bl	800077c <copyText>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a9e      	ldr	r2, [pc, #632]	; (8005460 <loadMenuTexts+0x904>)
 80051e6:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80051e8:	489e      	ldr	r0, [pc, #632]	; (8005464 <loadMenuTexts+0x908>)
 80051ea:	f7fb fac7 	bl	800077c <copyText>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4a9d      	ldr	r2, [pc, #628]	; (8005468 <loadMenuTexts+0x90c>)
 80051f2:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80051f4:	489d      	ldr	r0, [pc, #628]	; (800546c <loadMenuTexts+0x910>)
 80051f6:	f7fb fac1 	bl	800077c <copyText>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4a9c      	ldr	r2, [pc, #624]	; (8005470 <loadMenuTexts+0x914>)
 80051fe:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005200:	489c      	ldr	r0, [pc, #624]	; (8005474 <loadMenuTexts+0x918>)
 8005202:	f7fb fabb 	bl	800077c <copyText>
 8005206:	4603      	mov	r3, r0
 8005208:	4a9b      	ldr	r2, [pc, #620]	; (8005478 <loadMenuTexts+0x91c>)
 800520a:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 800520c:	489b      	ldr	r0, [pc, #620]	; (800547c <loadMenuTexts+0x920>)
 800520e:	f7fb fab5 	bl	800077c <copyText>
 8005212:	4603      	mov	r3, r0
 8005214:	4a9a      	ldr	r2, [pc, #616]	; (8005480 <loadMenuTexts+0x924>)
 8005216:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005218:	489a      	ldr	r0, [pc, #616]	; (8005484 <loadMenuTexts+0x928>)
 800521a:	f7fb faaf 	bl	800077c <copyText>
 800521e:	4603      	mov	r3, r0
 8005220:	4a99      	ldr	r2, [pc, #612]	; (8005488 <loadMenuTexts+0x92c>)
 8005222:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005224:	4899      	ldr	r0, [pc, #612]	; (800548c <loadMenuTexts+0x930>)
 8005226:	f7fb faa9 	bl	800077c <copyText>
 800522a:	4603      	mov	r3, r0
 800522c:	4a98      	ldr	r2, [pc, #608]	; (8005490 <loadMenuTexts+0x934>)
 800522e:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005230:	4898      	ldr	r0, [pc, #608]	; (8005494 <loadMenuTexts+0x938>)
 8005232:	f7fb faa3 	bl	800077c <copyText>
 8005236:	4603      	mov	r3, r0
 8005238:	4a97      	ldr	r2, [pc, #604]	; (8005498 <loadMenuTexts+0x93c>)
 800523a:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 800523c:	4897      	ldr	r0, [pc, #604]	; (800549c <loadMenuTexts+0x940>)
 800523e:	f7fb fa9d 	bl	800077c <copyText>
 8005242:	4603      	mov	r3, r0
 8005244:	4a96      	ldr	r2, [pc, #600]	; (80054a0 <loadMenuTexts+0x944>)
 8005246:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005248:	4896      	ldr	r0, [pc, #600]	; (80054a4 <loadMenuTexts+0x948>)
 800524a:	f7fb fa97 	bl	800077c <copyText>
 800524e:	4603      	mov	r3, r0
 8005250:	4a95      	ldr	r2, [pc, #596]	; (80054a8 <loadMenuTexts+0x94c>)
 8005252:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8005254:	4895      	ldr	r0, [pc, #596]	; (80054ac <loadMenuTexts+0x950>)
 8005256:	f7fb fa91 	bl	800077c <copyText>
 800525a:	4603      	mov	r3, r0
 800525c:	4a94      	ldr	r2, [pc, #592]	; (80054b0 <loadMenuTexts+0x954>)
 800525e:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005260:	4894      	ldr	r0, [pc, #592]	; (80054b4 <loadMenuTexts+0x958>)
 8005262:	f7fb fa8b 	bl	800077c <copyText>
 8005266:	4603      	mov	r3, r0
 8005268:	4a93      	ldr	r2, [pc, #588]	; (80054b8 <loadMenuTexts+0x95c>)
 800526a:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 800526c:	4893      	ldr	r0, [pc, #588]	; (80054bc <loadMenuTexts+0x960>)
 800526e:	f7fb fa85 	bl	800077c <copyText>
 8005272:	4603      	mov	r3, r0
 8005274:	4a92      	ldr	r2, [pc, #584]	; (80054c0 <loadMenuTexts+0x964>)
 8005276:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005278:	4892      	ldr	r0, [pc, #584]	; (80054c4 <loadMenuTexts+0x968>)
 800527a:	f7fb fa7f 	bl	800077c <copyText>
 800527e:	4603      	mov	r3, r0
 8005280:	4a91      	ldr	r2, [pc, #580]	; (80054c8 <loadMenuTexts+0x96c>)
 8005282:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005284:	4891      	ldr	r0, [pc, #580]	; (80054cc <loadMenuTexts+0x970>)
 8005286:	f7fb fa79 	bl	800077c <copyText>
 800528a:	4603      	mov	r3, r0
 800528c:	4a90      	ldr	r2, [pc, #576]	; (80054d0 <loadMenuTexts+0x974>)
 800528e:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005290:	4890      	ldr	r0, [pc, #576]	; (80054d4 <loadMenuTexts+0x978>)
 8005292:	f7fb fa73 	bl	800077c <copyText>
 8005296:	4603      	mov	r3, r0
 8005298:	4a8f      	ldr	r2, [pc, #572]	; (80054d8 <loadMenuTexts+0x97c>)
 800529a:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 800529c:	488f      	ldr	r0, [pc, #572]	; (80054dc <loadMenuTexts+0x980>)
 800529e:	f7fb fa6d 	bl	800077c <copyText>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4a8e      	ldr	r2, [pc, #568]	; (80054e0 <loadMenuTexts+0x984>)
 80052a6:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80052a8:	488e      	ldr	r0, [pc, #568]	; (80054e4 <loadMenuTexts+0x988>)
 80052aa:	f7fb fa67 	bl	800077c <copyText>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4a8d      	ldr	r2, [pc, #564]	; (80054e8 <loadMenuTexts+0x98c>)
 80052b2:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80052b4:	488d      	ldr	r0, [pc, #564]	; (80054ec <loadMenuTexts+0x990>)
 80052b6:	f7fb fa61 	bl	800077c <copyText>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4a8c      	ldr	r2, [pc, #560]	; (80054f0 <loadMenuTexts+0x994>)
 80052be:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80052c0:	488c      	ldr	r0, [pc, #560]	; (80054f4 <loadMenuTexts+0x998>)
 80052c2:	f7fb fa5b 	bl	800077c <copyText>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4a8b      	ldr	r2, [pc, #556]	; (80054f8 <loadMenuTexts+0x99c>)
 80052ca:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80052cc:	488b      	ldr	r0, [pc, #556]	; (80054fc <loadMenuTexts+0x9a0>)
 80052ce:	f7fb fa55 	bl	800077c <copyText>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4a8a      	ldr	r2, [pc, #552]	; (8005500 <loadMenuTexts+0x9a4>)
 80052d6:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80052d8:	488a      	ldr	r0, [pc, #552]	; (8005504 <loadMenuTexts+0x9a8>)
 80052da:	f7fb fa4f 	bl	800077c <copyText>
 80052de:	4603      	mov	r3, r0
 80052e0:	4a89      	ldr	r2, [pc, #548]	; (8005508 <loadMenuTexts+0x9ac>)
 80052e2:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80052e4:	4889      	ldr	r0, [pc, #548]	; (800550c <loadMenuTexts+0x9b0>)
 80052e6:	f7fb fa49 	bl	800077c <copyText>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4a88      	ldr	r2, [pc, #544]	; (8005510 <loadMenuTexts+0x9b4>)
 80052ee:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80052f0:	4888      	ldr	r0, [pc, #544]	; (8005514 <loadMenuTexts+0x9b8>)
 80052f2:	f7fb fa43 	bl	800077c <copyText>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4a87      	ldr	r2, [pc, #540]	; (8005518 <loadMenuTexts+0x9bc>)
 80052fa:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80052fc:	4887      	ldr	r0, [pc, #540]	; (800551c <loadMenuTexts+0x9c0>)
 80052fe:	f7fb fa3d 	bl	800077c <copyText>
 8005302:	4603      	mov	r3, r0
 8005304:	4a86      	ldr	r2, [pc, #536]	; (8005520 <loadMenuTexts+0x9c4>)
 8005306:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005308:	4886      	ldr	r0, [pc, #536]	; (8005524 <loadMenuTexts+0x9c8>)
 800530a:	f7fb fa37 	bl	800077c <copyText>
 800530e:	4603      	mov	r3, r0
 8005310:	4a85      	ldr	r2, [pc, #532]	; (8005528 <loadMenuTexts+0x9cc>)
 8005312:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005314:	4885      	ldr	r0, [pc, #532]	; (800552c <loadMenuTexts+0x9d0>)
 8005316:	f7fb fa31 	bl	800077c <copyText>
 800531a:	4603      	mov	r3, r0
 800531c:	4a84      	ldr	r2, [pc, #528]	; (8005530 <loadMenuTexts+0x9d4>)
 800531e:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005320:	4884      	ldr	r0, [pc, #528]	; (8005534 <loadMenuTexts+0x9d8>)
 8005322:	f7fb fa2b 	bl	800077c <copyText>
 8005326:	4603      	mov	r3, r0
 8005328:	4a83      	ldr	r2, [pc, #524]	; (8005538 <loadMenuTexts+0x9dc>)
 800532a:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 800532c:	4883      	ldr	r0, [pc, #524]	; (800553c <loadMenuTexts+0x9e0>)
 800532e:	f7fb fa25 	bl	800077c <copyText>
 8005332:	4603      	mov	r3, r0
 8005334:	4a82      	ldr	r2, [pc, #520]	; (8005540 <loadMenuTexts+0x9e4>)
 8005336:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005338:	4882      	ldr	r0, [pc, #520]	; (8005544 <loadMenuTexts+0x9e8>)
 800533a:	f7fb fa1f 	bl	800077c <copyText>
 800533e:	4603      	mov	r3, r0
 8005340:	4a81      	ldr	r2, [pc, #516]	; (8005548 <loadMenuTexts+0x9ec>)
 8005342:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005344:	4881      	ldr	r0, [pc, #516]	; (800554c <loadMenuTexts+0x9f0>)
 8005346:	f7fb fa19 	bl	800077c <copyText>
 800534a:	4603      	mov	r3, r0
 800534c:	4a80      	ldr	r2, [pc, #512]	; (8005550 <loadMenuTexts+0x9f4>)
 800534e:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005350:	4880      	ldr	r0, [pc, #512]	; (8005554 <loadMenuTexts+0x9f8>)
 8005352:	f7fb fa13 	bl	800077c <copyText>
 8005356:	4603      	mov	r3, r0
 8005358:	4a7f      	ldr	r2, [pc, #508]	; (8005558 <loadMenuTexts+0x9fc>)
 800535a:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 800535c:	487f      	ldr	r0, [pc, #508]	; (800555c <loadMenuTexts+0xa00>)
 800535e:	f7fb fa0d 	bl	800077c <copyText>
 8005362:	4603      	mov	r3, r0
 8005364:	4a7e      	ldr	r2, [pc, #504]	; (8005560 <loadMenuTexts+0xa04>)
 8005366:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005368:	487e      	ldr	r0, [pc, #504]	; (8005564 <loadMenuTexts+0xa08>)
 800536a:	f7fb fa07 	bl	800077c <copyText>
 800536e:	4603      	mov	r3, r0
 8005370:	4a7d      	ldr	r2, [pc, #500]	; (8005568 <loadMenuTexts+0xa0c>)
 8005372:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8005374:	487d      	ldr	r0, [pc, #500]	; (800556c <loadMenuTexts+0xa10>)
 8005376:	f7fb fa01 	bl	800077c <copyText>
 800537a:	4603      	mov	r3, r0
 800537c:	4a7c      	ldr	r2, [pc, #496]	; (8005570 <loadMenuTexts+0xa14>)
 800537e:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005380:	487c      	ldr	r0, [pc, #496]	; (8005574 <loadMenuTexts+0xa18>)
 8005382:	f7fb f9fb 	bl	800077c <copyText>
 8005386:	4603      	mov	r3, r0
 8005388:	4a7b      	ldr	r2, [pc, #492]	; (8005578 <loadMenuTexts+0xa1c>)
 800538a:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 800538c:	487b      	ldr	r0, [pc, #492]	; (800557c <loadMenuTexts+0xa20>)
 800538e:	f7fb f9f5 	bl	800077c <copyText>
 8005392:	4603      	mov	r3, r0
 8005394:	4a7a      	ldr	r2, [pc, #488]	; (8005580 <loadMenuTexts+0xa24>)
 8005396:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005398:	487a      	ldr	r0, [pc, #488]	; (8005584 <loadMenuTexts+0xa28>)
 800539a:	f7fb f9ef 	bl	800077c <copyText>
 800539e:	4603      	mov	r3, r0
 80053a0:	4a79      	ldr	r2, [pc, #484]	; (8005588 <loadMenuTexts+0xa2c>)
 80053a2:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80053a4:	4879      	ldr	r0, [pc, #484]	; (800558c <loadMenuTexts+0xa30>)
 80053a6:	f7fb f9e9 	bl	800077c <copyText>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a78      	ldr	r2, [pc, #480]	; (8005590 <loadMenuTexts+0xa34>)
 80053ae:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80053b0:	4878      	ldr	r0, [pc, #480]	; (8005594 <loadMenuTexts+0xa38>)
 80053b2:	f7fb f9e3 	bl	800077c <copyText>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a77      	ldr	r2, [pc, #476]	; (8005598 <loadMenuTexts+0xa3c>)
 80053ba:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80053bc:	4877      	ldr	r0, [pc, #476]	; (800559c <loadMenuTexts+0xa40>)
 80053be:	f7fb f9dd 	bl	800077c <copyText>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4a76      	ldr	r2, [pc, #472]	; (80055a0 <loadMenuTexts+0xa44>)
 80053c6:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80053c8:	4876      	ldr	r0, [pc, #472]	; (80055a4 <loadMenuTexts+0xa48>)
 80053ca:	f7fb f9d7 	bl	800077c <copyText>
 80053ce:	4603      	mov	r3, r0
 80053d0:	4a75      	ldr	r2, [pc, #468]	; (80055a8 <loadMenuTexts+0xa4c>)
 80053d2:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80053d4:	4875      	ldr	r0, [pc, #468]	; (80055ac <loadMenuTexts+0xa50>)
 80053d6:	f7fb f9d1 	bl	800077c <copyText>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a74      	ldr	r2, [pc, #464]	; (80055b0 <loadMenuTexts+0xa54>)
 80053de:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80053e0:	4874      	ldr	r0, [pc, #464]	; (80055b4 <loadMenuTexts+0xa58>)
 80053e2:	f7fb f9cb 	bl	800077c <copyText>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a73      	ldr	r2, [pc, #460]	; (80055b8 <loadMenuTexts+0xa5c>)
 80053ea:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80053ec:	4873      	ldr	r0, [pc, #460]	; (80055bc <loadMenuTexts+0xa60>)
 80053ee:	f7fb f9c5 	bl	800077c <copyText>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4a72      	ldr	r2, [pc, #456]	; (80055c0 <loadMenuTexts+0xa64>)
 80053f6:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80053f8:	4872      	ldr	r0, [pc, #456]	; (80055c4 <loadMenuTexts+0xa68>)
 80053fa:	f7fb f9bf 	bl	800077c <copyText>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a71      	ldr	r2, [pc, #452]	; (80055c8 <loadMenuTexts+0xa6c>)
 8005402:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005404:	4871      	ldr	r0, [pc, #452]	; (80055cc <loadMenuTexts+0xa70>)
 8005406:	f7fb f9b9 	bl	800077c <copyText>
 800540a:	e0e1      	b.n	80055d0 <loadMenuTexts+0xa74>
 800540c:	200004c0 	.word	0x200004c0
 8005410:	20000cb8 	.word	0x20000cb8
 8005414:	200004d0 	.word	0x200004d0
 8005418:	20000cbc 	.word	0x20000cbc
 800541c:	200004e0 	.word	0x200004e0
 8005420:	20000cc0 	.word	0x20000cc0
 8005424:	200004f0 	.word	0x200004f0
 8005428:	20000cc4 	.word	0x20000cc4
 800542c:	20000500 	.word	0x20000500
 8005430:	20000cc8 	.word	0x20000cc8
 8005434:	20000510 	.word	0x20000510
 8005438:	20000ccc 	.word	0x20000ccc
 800543c:	20000520 	.word	0x20000520
 8005440:	20000cd0 	.word	0x20000cd0
 8005444:	20000530 	.word	0x20000530
 8005448:	20000cd4 	.word	0x20000cd4
 800544c:	20000540 	.word	0x20000540
 8005450:	20000cd8 	.word	0x20000cd8
 8005454:	20000550 	.word	0x20000550
 8005458:	20000cdc 	.word	0x20000cdc
 800545c:	20000560 	.word	0x20000560
 8005460:	20000ce0 	.word	0x20000ce0
 8005464:	20000570 	.word	0x20000570
 8005468:	20000ce4 	.word	0x20000ce4
 800546c:	20000580 	.word	0x20000580
 8005470:	20000ce8 	.word	0x20000ce8
 8005474:	20000590 	.word	0x20000590
 8005478:	20000cec 	.word	0x20000cec
 800547c:	200005a0 	.word	0x200005a0
 8005480:	20000cf0 	.word	0x20000cf0
 8005484:	200005b0 	.word	0x200005b0
 8005488:	20000cf4 	.word	0x20000cf4
 800548c:	200005c0 	.word	0x200005c0
 8005490:	20000cf8 	.word	0x20000cf8
 8005494:	200005d0 	.word	0x200005d0
 8005498:	20000cfc 	.word	0x20000cfc
 800549c:	200005e0 	.word	0x200005e0
 80054a0:	20000d00 	.word	0x20000d00
 80054a4:	200005f0 	.word	0x200005f0
 80054a8:	20000d04 	.word	0x20000d04
 80054ac:	20000600 	.word	0x20000600
 80054b0:	20000d08 	.word	0x20000d08
 80054b4:	20000610 	.word	0x20000610
 80054b8:	20000d10 	.word	0x20000d10
 80054bc:	20000620 	.word	0x20000620
 80054c0:	20000d14 	.word	0x20000d14
 80054c4:	20000630 	.word	0x20000630
 80054c8:	20000d18 	.word	0x20000d18
 80054cc:	20000640 	.word	0x20000640
 80054d0:	20000d1c 	.word	0x20000d1c
 80054d4:	20000650 	.word	0x20000650
 80054d8:	20000d20 	.word	0x20000d20
 80054dc:	20000660 	.word	0x20000660
 80054e0:	20000d24 	.word	0x20000d24
 80054e4:	20000670 	.word	0x20000670
 80054e8:	20000d28 	.word	0x20000d28
 80054ec:	20000680 	.word	0x20000680
 80054f0:	20000d2c 	.word	0x20000d2c
 80054f4:	20000690 	.word	0x20000690
 80054f8:	20000d30 	.word	0x20000d30
 80054fc:	200006a0 	.word	0x200006a0
 8005500:	20000d34 	.word	0x20000d34
 8005504:	200006b0 	.word	0x200006b0
 8005508:	20000d38 	.word	0x20000d38
 800550c:	200006c0 	.word	0x200006c0
 8005510:	20000d40 	.word	0x20000d40
 8005514:	200006d0 	.word	0x200006d0
 8005518:	20000d48 	.word	0x20000d48
 800551c:	200006e0 	.word	0x200006e0
 8005520:	20000d4c 	.word	0x20000d4c
 8005524:	200006f0 	.word	0x200006f0
 8005528:	20000d50 	.word	0x20000d50
 800552c:	20000700 	.word	0x20000700
 8005530:	20000d54 	.word	0x20000d54
 8005534:	20000710 	.word	0x20000710
 8005538:	20000d58 	.word	0x20000d58
 800553c:	20000720 	.word	0x20000720
 8005540:	20000d5c 	.word	0x20000d5c
 8005544:	20000730 	.word	0x20000730
 8005548:	20000d60 	.word	0x20000d60
 800554c:	20000740 	.word	0x20000740
 8005550:	20000d64 	.word	0x20000d64
 8005554:	20000750 	.word	0x20000750
 8005558:	20000d68 	.word	0x20000d68
 800555c:	20000760 	.word	0x20000760
 8005560:	20000d6c 	.word	0x20000d6c
 8005564:	20000770 	.word	0x20000770
 8005568:	20000d70 	.word	0x20000d70
 800556c:	20000780 	.word	0x20000780
 8005570:	20000d74 	.word	0x20000d74
 8005574:	20000790 	.word	0x20000790
 8005578:	20000d78 	.word	0x20000d78
 800557c:	200007a0 	.word	0x200007a0
 8005580:	20000d7c 	.word	0x20000d7c
 8005584:	200007b0 	.word	0x200007b0
 8005588:	20000d80 	.word	0x20000d80
 800558c:	200007c0 	.word	0x200007c0
 8005590:	20000d84 	.word	0x20000d84
 8005594:	200007d0 	.word	0x200007d0
 8005598:	20000d88 	.word	0x20000d88
 800559c:	200007e0 	.word	0x200007e0
 80055a0:	20000d8c 	.word	0x20000d8c
 80055a4:	200007f0 	.word	0x200007f0
 80055a8:	20000d90 	.word	0x20000d90
 80055ac:	20000800 	.word	0x20000800
 80055b0:	20000d94 	.word	0x20000d94
 80055b4:	20000810 	.word	0x20000810
 80055b8:	20000d98 	.word	0x20000d98
 80055bc:	20000820 	.word	0x20000820
 80055c0:	20000d9c 	.word	0x20000d9c
 80055c4:	20000830 	.word	0x20000830
 80055c8:	20000da0 	.word	0x20000da0
 80055cc:	20000840 	.word	0x20000840
 80055d0:	4603      	mov	r3, r0
 80055d2:	4a27      	ldr	r2, [pc, #156]	; (8005670 <loadMenuTexts+0xb14>)
 80055d4:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80055d6:	4827      	ldr	r0, [pc, #156]	; (8005674 <loadMenuTexts+0xb18>)
 80055d8:	f7fb f8d0 	bl	800077c <copyText>
 80055dc:	4603      	mov	r3, r0
 80055de:	4a26      	ldr	r2, [pc, #152]	; (8005678 <loadMenuTexts+0xb1c>)
 80055e0:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80055e2:	4826      	ldr	r0, [pc, #152]	; (800567c <loadMenuTexts+0xb20>)
 80055e4:	f7fb f8ca 	bl	800077c <copyText>
 80055e8:	4603      	mov	r3, r0
 80055ea:	4a25      	ldr	r2, [pc, #148]	; (8005680 <loadMenuTexts+0xb24>)
 80055ec:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80055ee:	4825      	ldr	r0, [pc, #148]	; (8005684 <loadMenuTexts+0xb28>)
 80055f0:	f7fb f8c4 	bl	800077c <copyText>
 80055f4:	4603      	mov	r3, r0
 80055f6:	4a24      	ldr	r2, [pc, #144]	; (8005688 <loadMenuTexts+0xb2c>)
 80055f8:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80055fa:	4824      	ldr	r0, [pc, #144]	; (800568c <loadMenuTexts+0xb30>)
 80055fc:	f7fb f8be 	bl	800077c <copyText>
 8005600:	4603      	mov	r3, r0
 8005602:	4a23      	ldr	r2, [pc, #140]	; (8005690 <loadMenuTexts+0xb34>)
 8005604:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005606:	4823      	ldr	r0, [pc, #140]	; (8005694 <loadMenuTexts+0xb38>)
 8005608:	f7fb f8b8 	bl	800077c <copyText>
 800560c:	4603      	mov	r3, r0
 800560e:	4a22      	ldr	r2, [pc, #136]	; (8005698 <loadMenuTexts+0xb3c>)
 8005610:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005612:	4822      	ldr	r0, [pc, #136]	; (800569c <loadMenuTexts+0xb40>)
 8005614:	f7fb f8b2 	bl	800077c <copyText>
 8005618:	4603      	mov	r3, r0
 800561a:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <loadMenuTexts+0xb44>)
 800561c:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800561e:	4821      	ldr	r0, [pc, #132]	; (80056a4 <loadMenuTexts+0xb48>)
 8005620:	f7fb f8ac 	bl	800077c <copyText>
 8005624:	4603      	mov	r3, r0
 8005626:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <loadMenuTexts+0xb4c>)
 8005628:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800562a:	4820      	ldr	r0, [pc, #128]	; (80056ac <loadMenuTexts+0xb50>)
 800562c:	f7fb f8a6 	bl	800077c <copyText>
 8005630:	4603      	mov	r3, r0
 8005632:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <loadMenuTexts+0xb54>)
 8005634:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005636:	481f      	ldr	r0, [pc, #124]	; (80056b4 <loadMenuTexts+0xb58>)
 8005638:	f7fb f8a0 	bl	800077c <copyText>
 800563c:	4603      	mov	r3, r0
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <loadMenuTexts+0xb5c>)
 8005640:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005642:	481e      	ldr	r0, [pc, #120]	; (80056bc <loadMenuTexts+0xb60>)
 8005644:	f7fb f89a 	bl	800077c <copyText>
 8005648:	4603      	mov	r3, r0
 800564a:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <loadMenuTexts+0xb64>)
 800564c:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800564e:	481d      	ldr	r0, [pc, #116]	; (80056c4 <loadMenuTexts+0xb68>)
 8005650:	f7fb f894 	bl	800077c <copyText>
 8005654:	4603      	mov	r3, r0
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <loadMenuTexts+0xb6c>)
 8005658:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 800565a:	481c      	ldr	r0, [pc, #112]	; (80056cc <loadMenuTexts+0xb70>)
 800565c:	f7fb f88e 	bl	800077c <copyText>
 8005660:	4603      	mov	r3, r0
 8005662:	4a1b      	ldr	r2, [pc, #108]	; (80056d0 <loadMenuTexts+0xb74>)
 8005664:	6013      	str	r3, [r2, #0]
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000da4 	.word	0x20000da4
 8005674:	20000850 	.word	0x20000850
 8005678:	20000da8 	.word	0x20000da8
 800567c:	20000860 	.word	0x20000860
 8005680:	20000dac 	.word	0x20000dac
 8005684:	20000870 	.word	0x20000870
 8005688:	20000db0 	.word	0x20000db0
 800568c:	20000880 	.word	0x20000880
 8005690:	20000db4 	.word	0x20000db4
 8005694:	20000890 	.word	0x20000890
 8005698:	20000db8 	.word	0x20000db8
 800569c:	200008a0 	.word	0x200008a0
 80056a0:	20000dc4 	.word	0x20000dc4
 80056a4:	200008b0 	.word	0x200008b0
 80056a8:	20000dc8 	.word	0x20000dc8
 80056ac:	200008c0 	.word	0x200008c0
 80056b0:	20000dcc 	.word	0x20000dcc
 80056b4:	200008d0 	.word	0x200008d0
 80056b8:	20000dd0 	.word	0x20000dd0
 80056bc:	200008e0 	.word	0x200008e0
 80056c0:	20000dd4 	.word	0x20000dd4
 80056c4:	200008f0 	.word	0x200008f0
 80056c8:	20000dd8 	.word	0x20000dd8
 80056cc:	20000900 	.word	0x20000900
 80056d0:	20000ddc 	.word	0x20000ddc

080056d4 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d105      	bne.n	80056f0 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80056e4:	4a22      	ldr	r2, [pc, #136]	; (8005770 <lcdUpdate+0x9c>)
 80056e6:	2101      	movs	r1, #1
 80056e8:	2002      	movs	r0, #2
 80056ea:	f7fa ffbd 	bl	8000668 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80056ee:	e03b      	b.n	8005768 <lcdUpdate+0x94>
	} else if(y==2) {
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d105      	bne.n	8005702 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80056f6:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <lcdUpdate+0x9c>)
 80056f8:	2102      	movs	r1, #2
 80056fa:	2002      	movs	r0, #2
 80056fc:	f7fa ffb4 	bl	8000668 <lcd_print>
}
 8005700:	e032      	b.n	8005768 <lcdUpdate+0x94>
	} else if(y==3) {
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	2b03      	cmp	r3, #3
 8005706:	d105      	bne.n	8005714 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005708:	4a19      	ldr	r2, [pc, #100]	; (8005770 <lcdUpdate+0x9c>)
 800570a:	2103      	movs	r1, #3
 800570c:	2002      	movs	r0, #2
 800570e:	f7fa ffab 	bl	8000668 <lcd_print>
}
 8005712:	e029      	b.n	8005768 <lcdUpdate+0x94>
	} else if(y==4) {
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	2b04      	cmp	r3, #4
 8005718:	d105      	bne.n	8005726 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800571a:	4a15      	ldr	r2, [pc, #84]	; (8005770 <lcdUpdate+0x9c>)
 800571c:	2104      	movs	r1, #4
 800571e:	2002      	movs	r0, #2
 8005720:	f7fa ffa2 	bl	8000668 <lcd_print>
}
 8005724:	e020      	b.n	8005768 <lcdUpdate+0x94>
	} else if(y==5) {
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	2b05      	cmp	r3, #5
 800572a:	d105      	bne.n	8005738 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800572c:	4a10      	ldr	r2, [pc, #64]	; (8005770 <lcdUpdate+0x9c>)
 800572e:	2105      	movs	r1, #5
 8005730:	2002      	movs	r0, #2
 8005732:	f7fa ff99 	bl	8000668 <lcd_print>
}
 8005736:	e017      	b.n	8005768 <lcdUpdate+0x94>
	} else if(y==6) {
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	2b06      	cmp	r3, #6
 800573c:	d105      	bne.n	800574a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800573e:	4a0c      	ldr	r2, [pc, #48]	; (8005770 <lcdUpdate+0x9c>)
 8005740:	2106      	movs	r1, #6
 8005742:	2002      	movs	r0, #2
 8005744:	f7fa ff90 	bl	8000668 <lcd_print>
}
 8005748:	e00e      	b.n	8005768 <lcdUpdate+0x94>
	} else if (y==7) {
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	2b07      	cmp	r3, #7
 800574e:	d10b      	bne.n	8005768 <lcdUpdate+0x94>
		lcd_clear();
 8005750:	f7fa ffb6 	bl	80006c0 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005754:	4a07      	ldr	r2, [pc, #28]	; (8005774 <lcdUpdate+0xa0>)
 8005756:	2101      	movs	r1, #1
 8005758:	2001      	movs	r0, #1
 800575a:	f7fa ff85 	bl	8000668 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800575e:	4a06      	ldr	r2, [pc, #24]	; (8005778 <lcdUpdate+0xa4>)
 8005760:	2101      	movs	r1, #1
 8005762:	2002      	movs	r0, #2
 8005764:	f7fa ff80 	bl	8000668 <lcd_print>
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	0800da90 	.word	0x0800da90
 8005774:	0800e3bc 	.word	0x0800e3bc
 8005778:	0800e3d0 	.word	0x0800e3d0

0800577c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d11d      	bne.n	80057c8 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 800578c:	4b62      	ldr	r3, [pc, #392]	; (8005918 <hataKoduLcdGoster+0x19c>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d105      	bne.n	80057a0 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005794:	4a61      	ldr	r2, [pc, #388]	; (800591c <hataKoduLcdGoster+0x1a0>)
 8005796:	2101      	movs	r1, #1
 8005798:	2001      	movs	r0, #1
 800579a:	f7fa ff65 	bl	8000668 <lcd_print>
 800579e:	e008      	b.n	80057b2 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80057a0:	4b5d      	ldr	r3, [pc, #372]	; (8005918 <hataKoduLcdGoster+0x19c>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d104      	bne.n	80057b2 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057a8:	4a5d      	ldr	r2, [pc, #372]	; (8005920 <hataKoduLcdGoster+0x1a4>)
 80057aa:	2101      	movs	r1, #1
 80057ac:	2001      	movs	r0, #1
 80057ae:	f7fa ff5b 	bl	8000668 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80057b2:	4a5c      	ldr	r2, [pc, #368]	; (8005924 <hataKoduLcdGoster+0x1a8>)
 80057b4:	2101      	movs	r1, #1
 80057b6:	2002      	movs	r0, #2
 80057b8:	f7fa ff56 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80057bc:	4a5a      	ldr	r2, [pc, #360]	; (8005928 <hataKoduLcdGoster+0x1ac>)
 80057be:	2107      	movs	r1, #7
 80057c0:	2002      	movs	r0, #2
 80057c2:	f7fa ff51 	bl	8000668 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80057c6:	e0a3      	b.n	8005910 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d11d      	bne.n	800580a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80057ce:	4b52      	ldr	r3, [pc, #328]	; (8005918 <hataKoduLcdGoster+0x19c>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 80057d6:	4a51      	ldr	r2, [pc, #324]	; (800591c <hataKoduLcdGoster+0x1a0>)
 80057d8:	2101      	movs	r1, #1
 80057da:	2001      	movs	r0, #1
 80057dc:	f7fa ff44 	bl	8000668 <lcd_print>
 80057e0:	e008      	b.n	80057f4 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80057e2:	4b4d      	ldr	r3, [pc, #308]	; (8005918 <hataKoduLcdGoster+0x19c>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d104      	bne.n	80057f4 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057ea:	4a4d      	ldr	r2, [pc, #308]	; (8005920 <hataKoduLcdGoster+0x1a4>)
 80057ec:	2101      	movs	r1, #1
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7fa ff3a 	bl	8000668 <lcd_print>
		lcd_print(2, 2, "2");
 80057f4:	4a4d      	ldr	r2, [pc, #308]	; (800592c <hataKoduLcdGoster+0x1b0>)
 80057f6:	2102      	movs	r1, #2
 80057f8:	2002      	movs	r0, #2
 80057fa:	f7fa ff35 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80057fe:	4a4a      	ldr	r2, [pc, #296]	; (8005928 <hataKoduLcdGoster+0x1ac>)
 8005800:	2107      	movs	r1, #7
 8005802:	2002      	movs	r0, #2
 8005804:	f7fa ff30 	bl	8000668 <lcd_print>
}
 8005808:	e082      	b.n	8005910 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d11d      	bne.n	800584c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005810:	4b41      	ldr	r3, [pc, #260]	; (8005918 <hataKoduLcdGoster+0x19c>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005818:	4a40      	ldr	r2, [pc, #256]	; (800591c <hataKoduLcdGoster+0x1a0>)
 800581a:	2101      	movs	r1, #1
 800581c:	2001      	movs	r0, #1
 800581e:	f7fa ff23 	bl	8000668 <lcd_print>
 8005822:	e008      	b.n	8005836 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005824:	4b3c      	ldr	r3, [pc, #240]	; (8005918 <hataKoduLcdGoster+0x19c>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d104      	bne.n	8005836 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 800582c:	4a3c      	ldr	r2, [pc, #240]	; (8005920 <hataKoduLcdGoster+0x1a4>)
 800582e:	2101      	movs	r1, #1
 8005830:	2001      	movs	r0, #1
 8005832:	f7fa ff19 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "3");
 8005836:	4a3e      	ldr	r2, [pc, #248]	; (8005930 <hataKoduLcdGoster+0x1b4>)
 8005838:	2103      	movs	r1, #3
 800583a:	2002      	movs	r0, #2
 800583c:	f7fa ff14 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005840:	4a39      	ldr	r2, [pc, #228]	; (8005928 <hataKoduLcdGoster+0x1ac>)
 8005842:	2107      	movs	r1, #7
 8005844:	2002      	movs	r0, #2
 8005846:	f7fa ff0f 	bl	8000668 <lcd_print>
}
 800584a:	e061      	b.n	8005910 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	2b04      	cmp	r3, #4
 8005850:	d11d      	bne.n	800588e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005852:	4b31      	ldr	r3, [pc, #196]	; (8005918 <hataKoduLcdGoster+0x19c>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 800585a:	4a30      	ldr	r2, [pc, #192]	; (800591c <hataKoduLcdGoster+0x1a0>)
 800585c:	2101      	movs	r1, #1
 800585e:	2001      	movs	r0, #1
 8005860:	f7fa ff02 	bl	8000668 <lcd_print>
 8005864:	e008      	b.n	8005878 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005866:	4b2c      	ldr	r3, [pc, #176]	; (8005918 <hataKoduLcdGoster+0x19c>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d104      	bne.n	8005878 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800586e:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <hataKoduLcdGoster+0x1a4>)
 8005870:	2101      	movs	r1, #1
 8005872:	2001      	movs	r0, #1
 8005874:	f7fa fef8 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "4");
 8005878:	4a2e      	ldr	r2, [pc, #184]	; (8005934 <hataKoduLcdGoster+0x1b8>)
 800587a:	2104      	movs	r1, #4
 800587c:	2002      	movs	r0, #2
 800587e:	f7fa fef3 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005882:	4a29      	ldr	r2, [pc, #164]	; (8005928 <hataKoduLcdGoster+0x1ac>)
 8005884:	2107      	movs	r1, #7
 8005886:	2002      	movs	r0, #2
 8005888:	f7fa feee 	bl	8000668 <lcd_print>
}
 800588c:	e040      	b.n	8005910 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b05      	cmp	r3, #5
 8005892:	d11d      	bne.n	80058d0 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005894:	4b20      	ldr	r3, [pc, #128]	; (8005918 <hataKoduLcdGoster+0x19c>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 800589c:	4a1f      	ldr	r2, [pc, #124]	; (800591c <hataKoduLcdGoster+0x1a0>)
 800589e:	2101      	movs	r1, #1
 80058a0:	2001      	movs	r0, #1
 80058a2:	f7fa fee1 	bl	8000668 <lcd_print>
 80058a6:	e008      	b.n	80058ba <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80058a8:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <hataKoduLcdGoster+0x19c>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d104      	bne.n	80058ba <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058b0:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <hataKoduLcdGoster+0x1a4>)
 80058b2:	2101      	movs	r1, #1
 80058b4:	2001      	movs	r0, #1
 80058b6:	f7fa fed7 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "5");
 80058ba:	4a1f      	ldr	r2, [pc, #124]	; (8005938 <hataKoduLcdGoster+0x1bc>)
 80058bc:	2105      	movs	r1, #5
 80058be:	2002      	movs	r0, #2
 80058c0:	f7fa fed2 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80058c4:	4a18      	ldr	r2, [pc, #96]	; (8005928 <hataKoduLcdGoster+0x1ac>)
 80058c6:	2107      	movs	r1, #7
 80058c8:	2002      	movs	r0, #2
 80058ca:	f7fa fecd 	bl	8000668 <lcd_print>
}
 80058ce:	e01f      	b.n	8005910 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	2b06      	cmp	r3, #6
 80058d4:	d11c      	bne.n	8005910 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80058d6:	4b10      	ldr	r3, [pc, #64]	; (8005918 <hataKoduLcdGoster+0x19c>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d105      	bne.n	80058ea <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <hataKoduLcdGoster+0x1a0>)
 80058e0:	2101      	movs	r1, #1
 80058e2:	2001      	movs	r0, #1
 80058e4:	f7fa fec0 	bl	8000668 <lcd_print>
 80058e8:	e008      	b.n	80058fc <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <hataKoduLcdGoster+0x19c>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d104      	bne.n	80058fc <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058f2:	4a0b      	ldr	r2, [pc, #44]	; (8005920 <hataKoduLcdGoster+0x1a4>)
 80058f4:	2101      	movs	r1, #1
 80058f6:	2001      	movs	r0, #1
 80058f8:	f7fa feb6 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "6");
 80058fc:	4a0f      	ldr	r2, [pc, #60]	; (800593c <hataKoduLcdGoster+0x1c0>)
 80058fe:	2106      	movs	r1, #6
 8005900:	2002      	movs	r0, #2
 8005902:	f7fa feb1 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005906:	4a08      	ldr	r2, [pc, #32]	; (8005928 <hataKoduLcdGoster+0x1ac>)
 8005908:	2107      	movs	r1, #7
 800590a:	2002      	movs	r0, #2
 800590c:	f7fa feac 	bl	8000668 <lcd_print>
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20000c6a 	.word	0x20000c6a
 800591c:	0800e3e4 	.word	0x0800e3e4
 8005920:	0800e3f8 	.word	0x0800e3f8
 8005924:	0800d838 	.word	0x0800d838
 8005928:	0800e40c 	.word	0x0800e40c
 800592c:	0800d83c 	.word	0x0800d83c
 8005930:	0800d840 	.word	0x0800d840
 8005934:	0800d844 	.word	0x0800d844
 8005938:	0800d848 	.word	0x0800d848
 800593c:	0800d84c 	.word	0x0800d84c

08005940 <convertAndSendData>:

void convertAndSendData() {
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005946:	4a14      	ldr	r2, [pc, #80]	; (8005998 <convertAndSendData+0x58>)
 8005948:	2101      	movs	r1, #1
 800594a:	2001      	movs	r0, #1
 800594c:	f7fa fe8c 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005950:	4a12      	ldr	r2, [pc, #72]	; (800599c <convertAndSendData+0x5c>)
 8005952:	2101      	movs	r1, #1
 8005954:	2002      	movs	r0, #2
 8005956:	f7fa fe87 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 800595a:	2300      	movs	r3, #0
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	e00a      	b.n	8005976 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005960:	f002 fb3c 	bl	8007fdc <mergeData>
 8005964:	4603      	mov	r3, r0
 8005966:	461a      	mov	r2, r3
 8005968:	490d      	ldr	r1, [pc, #52]	; (80059a0 <convertAndSendData+0x60>)
 800596a:	480e      	ldr	r0, [pc, #56]	; (80059a4 <convertAndSendData+0x64>)
 800596c:	f7fa fc62 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3301      	adds	r3, #1
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b01      	cmp	r3, #1
 800597a:	ddf1      	ble.n	8005960 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 800597c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005980:	f003 fb7a 	bl	8009078 <HAL_Delay>
	lcd_clear();
 8005984:	f7fa fe9c 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 8005988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800598c:	f003 fb74 	bl	8009078 <HAL_Delay>
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	0800e418 	.word	0x0800e418
 800599c:	0800e424 	.word	0x0800e424
 80059a0:	20000bf4 	.word	0x20000bf4
 80059a4:	20000ea4 	.word	0x20000ea4

080059a8 <eepromKontrol>:

void eepromKontrol(int type) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af04      	add	r7, sp, #16
 80059ae:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,145,eepromData,145,3000);
 80059b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80059b4:	9302      	str	r3, [sp, #8]
 80059b6:	2391      	movs	r3, #145	; 0x91
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	4b9c      	ldr	r3, [pc, #624]	; (8005c2c <eepromKontrol+0x284>)
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	2391      	movs	r3, #145	; 0x91
 80059c0:	2200      	movs	r2, #0
 80059c2:	21a0      	movs	r1, #160	; 0xa0
 80059c4:	489a      	ldr	r0, [pc, #616]	; (8005c30 <eepromKontrol+0x288>)
 80059c6:	f004 fcdb 	bl	800a380 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80059ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059ce:	f003 fb53 	bl	8009078 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80059d2:	4b96      	ldr	r3, [pc, #600]	; (8005c2c <eepromKontrol+0x284>)
 80059d4:	78da      	ldrb	r2, [r3, #3]
 80059d6:	4b97      	ldr	r3, [pc, #604]	; (8005c34 <eepromKontrol+0x28c>)
 80059d8:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80059da:	4b94      	ldr	r3, [pc, #592]	; (8005c2c <eepromKontrol+0x284>)
 80059dc:	785a      	ldrb	r2, [r3, #1]
 80059de:	4b96      	ldr	r3, [pc, #600]	; (8005c38 <eepromKontrol+0x290>)
 80059e0:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80059e2:	4b92      	ldr	r3, [pc, #584]	; (8005c2c <eepromKontrol+0x284>)
 80059e4:	789a      	ldrb	r2, [r3, #2]
 80059e6:	4b95      	ldr	r3, [pc, #596]	; (8005c3c <eepromKontrol+0x294>)
 80059e8:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80059ea:	4b90      	ldr	r3, [pc, #576]	; (8005c2c <eepromKontrol+0x284>)
 80059ec:	791a      	ldrb	r2, [r3, #4]
 80059ee:	4b94      	ldr	r3, [pc, #592]	; (8005c40 <eepromKontrol+0x298>)
 80059f0:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80059f2:	4b8e      	ldr	r3, [pc, #568]	; (8005c2c <eepromKontrol+0x284>)
 80059f4:	795a      	ldrb	r2, [r3, #5]
 80059f6:	4b93      	ldr	r3, [pc, #588]	; (8005c44 <eepromKontrol+0x29c>)
 80059f8:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 80059fa:	4b8c      	ldr	r3, [pc, #560]	; (8005c2c <eepromKontrol+0x284>)
 80059fc:	799a      	ldrb	r2, [r3, #6]
 80059fe:	4b92      	ldr	r3, [pc, #584]	; (8005c48 <eepromKontrol+0x2a0>)
 8005a00:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005a02:	4b8a      	ldr	r3, [pc, #552]	; (8005c2c <eepromKontrol+0x284>)
 8005a04:	79da      	ldrb	r2, [r3, #7]
 8005a06:	4b91      	ldr	r3, [pc, #580]	; (8005c4c <eepromKontrol+0x2a4>)
 8005a08:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005a0a:	4b88      	ldr	r3, [pc, #544]	; (8005c2c <eepromKontrol+0x284>)
 8005a0c:	7a1a      	ldrb	r2, [r3, #8]
 8005a0e:	4b90      	ldr	r3, [pc, #576]	; (8005c50 <eepromKontrol+0x2a8>)
 8005a10:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005a12:	4b86      	ldr	r3, [pc, #536]	; (8005c2c <eepromKontrol+0x284>)
 8005a14:	7a5a      	ldrb	r2, [r3, #9]
 8005a16:	4b8f      	ldr	r3, [pc, #572]	; (8005c54 <eepromKontrol+0x2ac>)
 8005a18:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005a1a:	4b84      	ldr	r3, [pc, #528]	; (8005c2c <eepromKontrol+0x284>)
 8005a1c:	7a9a      	ldrb	r2, [r3, #10]
 8005a1e:	4b8e      	ldr	r3, [pc, #568]	; (8005c58 <eepromKontrol+0x2b0>)
 8005a20:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005a22:	4b82      	ldr	r3, [pc, #520]	; (8005c2c <eepromKontrol+0x284>)
 8005a24:	7ada      	ldrb	r2, [r3, #11]
 8005a26:	4b8d      	ldr	r3, [pc, #564]	; (8005c5c <eepromKontrol+0x2b4>)
 8005a28:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005a2a:	4b80      	ldr	r3, [pc, #512]	; (8005c2c <eepromKontrol+0x284>)
 8005a2c:	7b1a      	ldrb	r2, [r3, #12]
 8005a2e:	4b8c      	ldr	r3, [pc, #560]	; (8005c60 <eepromKontrol+0x2b8>)
 8005a30:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005a32:	4b7e      	ldr	r3, [pc, #504]	; (8005c2c <eepromKontrol+0x284>)
 8005a34:	7b5a      	ldrb	r2, [r3, #13]
 8005a36:	4b8b      	ldr	r3, [pc, #556]	; (8005c64 <eepromKontrol+0x2bc>)
 8005a38:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005a3a:	4b7c      	ldr	r3, [pc, #496]	; (8005c2c <eepromKontrol+0x284>)
 8005a3c:	7b9a      	ldrb	r2, [r3, #14]
 8005a3e:	4b8a      	ldr	r3, [pc, #552]	; (8005c68 <eepromKontrol+0x2c0>)
 8005a40:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005a42:	4b7a      	ldr	r3, [pc, #488]	; (8005c2c <eepromKontrol+0x284>)
 8005a44:	7bda      	ldrb	r2, [r3, #15]
 8005a46:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <eepromKontrol+0x2c4>)
 8005a48:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005a4a:	4b78      	ldr	r3, [pc, #480]	; (8005c2c <eepromKontrol+0x284>)
 8005a4c:	7c1a      	ldrb	r2, [r3, #16]
 8005a4e:	4b88      	ldr	r3, [pc, #544]	; (8005c70 <eepromKontrol+0x2c8>)
 8005a50:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005a52:	4b76      	ldr	r3, [pc, #472]	; (8005c2c <eepromKontrol+0x284>)
 8005a54:	7c5a      	ldrb	r2, [r3, #17]
 8005a56:	4b87      	ldr	r3, [pc, #540]	; (8005c74 <eepromKontrol+0x2cc>)
 8005a58:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005a5a:	4b74      	ldr	r3, [pc, #464]	; (8005c2c <eepromKontrol+0x284>)
 8005a5c:	7c9a      	ldrb	r2, [r3, #18]
 8005a5e:	4b86      	ldr	r3, [pc, #536]	; (8005c78 <eepromKontrol+0x2d0>)
 8005a60:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005a62:	4b72      	ldr	r3, [pc, #456]	; (8005c2c <eepromKontrol+0x284>)
 8005a64:	7cda      	ldrb	r2, [r3, #19]
 8005a66:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <eepromKontrol+0x2d4>)
 8005a68:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005a6a:	4b70      	ldr	r3, [pc, #448]	; (8005c2c <eepromKontrol+0x284>)
 8005a6c:	7d1a      	ldrb	r2, [r3, #20]
 8005a6e:	4b84      	ldr	r3, [pc, #528]	; (8005c80 <eepromKontrol+0x2d8>)
 8005a70:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005a72:	4b6e      	ldr	r3, [pc, #440]	; (8005c2c <eepromKontrol+0x284>)
 8005a74:	7d5a      	ldrb	r2, [r3, #21]
 8005a76:	4b83      	ldr	r3, [pc, #524]	; (8005c84 <eepromKontrol+0x2dc>)
 8005a78:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005a7a:	4b6c      	ldr	r3, [pc, #432]	; (8005c2c <eepromKontrol+0x284>)
 8005a7c:	7d9a      	ldrb	r2, [r3, #22]
 8005a7e:	4b82      	ldr	r3, [pc, #520]	; (8005c88 <eepromKontrol+0x2e0>)
 8005a80:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005a82:	4b6a      	ldr	r3, [pc, #424]	; (8005c2c <eepromKontrol+0x284>)
 8005a84:	7dda      	ldrb	r2, [r3, #23]
 8005a86:	4b81      	ldr	r3, [pc, #516]	; (8005c8c <eepromKontrol+0x2e4>)
 8005a88:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005a8a:	4b68      	ldr	r3, [pc, #416]	; (8005c2c <eepromKontrol+0x284>)
 8005a8c:	7e1a      	ldrb	r2, [r3, #24]
 8005a8e:	4b80      	ldr	r3, [pc, #512]	; (8005c90 <eepromKontrol+0x2e8>)
 8005a90:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005a92:	4b66      	ldr	r3, [pc, #408]	; (8005c2c <eepromKontrol+0x284>)
 8005a94:	7e5a      	ldrb	r2, [r3, #25]
 8005a96:	4b7f      	ldr	r3, [pc, #508]	; (8005c94 <eepromKontrol+0x2ec>)
 8005a98:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005a9a:	4b64      	ldr	r3, [pc, #400]	; (8005c2c <eepromKontrol+0x284>)
 8005a9c:	7e9a      	ldrb	r2, [r3, #26]
 8005a9e:	4b7e      	ldr	r3, [pc, #504]	; (8005c98 <eepromKontrol+0x2f0>)
 8005aa0:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005aa2:	4b62      	ldr	r3, [pc, #392]	; (8005c2c <eepromKontrol+0x284>)
 8005aa4:	7eda      	ldrb	r2, [r3, #27]
 8005aa6:	4b7d      	ldr	r3, [pc, #500]	; (8005c9c <eepromKontrol+0x2f4>)
 8005aa8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005aaa:	4b60      	ldr	r3, [pc, #384]	; (8005c2c <eepromKontrol+0x284>)
 8005aac:	7f1a      	ldrb	r2, [r3, #28]
 8005aae:	4b7c      	ldr	r3, [pc, #496]	; (8005ca0 <eepromKontrol+0x2f8>)
 8005ab0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005ab2:	4b5e      	ldr	r3, [pc, #376]	; (8005c2c <eepromKontrol+0x284>)
 8005ab4:	7f5a      	ldrb	r2, [r3, #29]
 8005ab6:	4b7b      	ldr	r3, [pc, #492]	; (8005ca4 <eepromKontrol+0x2fc>)
 8005ab8:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005aba:	4b5c      	ldr	r3, [pc, #368]	; (8005c2c <eepromKontrol+0x284>)
 8005abc:	7f9a      	ldrb	r2, [r3, #30]
 8005abe:	4b7a      	ldr	r3, [pc, #488]	; (8005ca8 <eepromKontrol+0x300>)
 8005ac0:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005ac2:	4b5a      	ldr	r3, [pc, #360]	; (8005c2c <eepromKontrol+0x284>)
 8005ac4:	7fda      	ldrb	r2, [r3, #31]
 8005ac6:	4b79      	ldr	r3, [pc, #484]	; (8005cac <eepromKontrol+0x304>)
 8005ac8:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005aca:	4b58      	ldr	r3, [pc, #352]	; (8005c2c <eepromKontrol+0x284>)
 8005acc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005ad0:	4b77      	ldr	r3, [pc, #476]	; (8005cb0 <eepromKontrol+0x308>)
 8005ad2:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005ad4:	4b55      	ldr	r3, [pc, #340]	; (8005c2c <eepromKontrol+0x284>)
 8005ad6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005ada:	4b76      	ldr	r3, [pc, #472]	; (8005cb4 <eepromKontrol+0x30c>)
 8005adc:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005ade:	4b53      	ldr	r3, [pc, #332]	; (8005c2c <eepromKontrol+0x284>)
 8005ae0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005ae4:	4b74      	ldr	r3, [pc, #464]	; (8005cb8 <eepromKontrol+0x310>)
 8005ae6:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005ae8:	4b50      	ldr	r3, [pc, #320]	; (8005c2c <eepromKontrol+0x284>)
 8005aea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005aee:	4b73      	ldr	r3, [pc, #460]	; (8005cbc <eepromKontrol+0x314>)
 8005af0:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005af2:	4b4e      	ldr	r3, [pc, #312]	; (8005c2c <eepromKontrol+0x284>)
 8005af4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005af8:	4b71      	ldr	r3, [pc, #452]	; (8005cc0 <eepromKontrol+0x318>)
 8005afa:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005afc:	4b4b      	ldr	r3, [pc, #300]	; (8005c2c <eepromKontrol+0x284>)
 8005afe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005b02:	4b70      	ldr	r3, [pc, #448]	; (8005cc4 <eepromKontrol+0x31c>)
 8005b04:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005b06:	4b49      	ldr	r3, [pc, #292]	; (8005c2c <eepromKontrol+0x284>)
 8005b08:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005b0c:	4b6e      	ldr	r3, [pc, #440]	; (8005cc8 <eepromKontrol+0x320>)
 8005b0e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005b10:	4b46      	ldr	r3, [pc, #280]	; (8005c2c <eepromKontrol+0x284>)
 8005b12:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005b16:	4b6d      	ldr	r3, [pc, #436]	; (8005ccc <eepromKontrol+0x324>)
 8005b18:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005b1a:	4b44      	ldr	r3, [pc, #272]	; (8005c2c <eepromKontrol+0x284>)
 8005b1c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b20:	4b6b      	ldr	r3, [pc, #428]	; (8005cd0 <eepromKontrol+0x328>)
 8005b22:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005b24:	4b41      	ldr	r3, [pc, #260]	; (8005c2c <eepromKontrol+0x284>)
 8005b26:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005b2a:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <eepromKontrol+0x32c>)
 8005b2c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005b2e:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <eepromKontrol+0x284>)
 8005b30:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005b34:	4b68      	ldr	r3, [pc, #416]	; (8005cd8 <eepromKontrol+0x330>)
 8005b36:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005b38:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <eepromKontrol+0x284>)
 8005b3a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005b3e:	4b67      	ldr	r3, [pc, #412]	; (8005cdc <eepromKontrol+0x334>)
 8005b40:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005b42:	4b3a      	ldr	r3, [pc, #232]	; (8005c2c <eepromKontrol+0x284>)
 8005b44:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b48:	4b65      	ldr	r3, [pc, #404]	; (8005ce0 <eepromKontrol+0x338>)
 8005b4a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005b4c:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <eepromKontrol+0x284>)
 8005b4e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005b52:	4b64      	ldr	r3, [pc, #400]	; (8005ce4 <eepromKontrol+0x33c>)
 8005b54:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005b56:	4b35      	ldr	r3, [pc, #212]	; (8005c2c <eepromKontrol+0x284>)
 8005b58:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005b5c:	4b62      	ldr	r3, [pc, #392]	; (8005ce8 <eepromKontrol+0x340>)
 8005b5e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005b60:	4b32      	ldr	r3, [pc, #200]	; (8005c2c <eepromKontrol+0x284>)
 8005b62:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005b66:	4b61      	ldr	r3, [pc, #388]	; (8005cec <eepromKontrol+0x344>)
 8005b68:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005b6a:	4b52      	ldr	r3, [pc, #328]	; (8005cb4 <eepromKontrol+0x30c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fff4 	bl	8004b5c <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005b74:	4b4e      	ldr	r3, [pc, #312]	; (8005cb0 <eepromKontrol+0x308>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b09      	cmp	r3, #9
 8005b7a:	d902      	bls.n	8005b82 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005b7c:	4b4c      	ldr	r3, [pc, #304]	; (8005cb0 <eepromKontrol+0x308>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005b82:	4b4a      	ldr	r3, [pc, #296]	; (8005cac <eepromKontrol+0x304>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	d902      	bls.n	8005b90 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005b8a:	4b48      	ldr	r3, [pc, #288]	; (8005cac <eepromKontrol+0x304>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005b90:	4b45      	ldr	r3, [pc, #276]	; (8005ca8 <eepromKontrol+0x300>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	d902      	bls.n	8005b9e <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <eepromKontrol+0x300>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005b9e:	4b41      	ldr	r3, [pc, #260]	; (8005ca4 <eepromKontrol+0x2fc>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	d902      	bls.n	8005bac <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005ba6:	4b3f      	ldr	r3, [pc, #252]	; (8005ca4 <eepromKontrol+0x2fc>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005bac:	4b3c      	ldr	r3, [pc, #240]	; (8005ca0 <eepromKontrol+0x2f8>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b09      	cmp	r3, #9
 8005bb2:	d902      	bls.n	8005bba <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005bb4:	4b3a      	ldr	r3, [pc, #232]	; (8005ca0 <eepromKontrol+0x2f8>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005bba:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <eepromKontrol+0x290>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d902      	bls.n	8005bc8 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <eepromKontrol+0x290>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005bc8:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <eepromKontrol+0x294>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d902      	bls.n	8005bd6 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <eepromKontrol+0x294>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <eepromKontrol+0x298>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d902      	bls.n	8005be4 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005bde:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <eepromKontrol+0x298>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005be4:	4b17      	ldr	r3, [pc, #92]	; (8005c44 <eepromKontrol+0x29c>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d902      	bls.n	8005bf2 <eepromKontrol+0x24a>
	    altLimit=1;
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <eepromKontrol+0x29c>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <eepromKontrol+0x2a0>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d902      	bls.n	8005c00 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <eepromKontrol+0x2a0>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <eepromKontrol+0x2a4>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d902      	bls.n	8005c0e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <eepromKontrol+0x2a4>)
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005c0e:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <eepromKontrol+0x31c>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d902      	bls.n	8005c1c <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005c16:	4b2b      	ldr	r3, [pc, #172]	; (8005cc4 <eepromKontrol+0x31c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <eepromKontrol+0x2a8>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d965      	bls.n	8005cf0 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <eepromKontrol+0x2a8>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e061      	b.n	8005cf0 <eepromKontrol+0x348>
 8005c2c:	20000b38 	.word	0x20000b38
 8005c30:	20000e08 	.word	0x20000e08
 8005c34:	20000bc9 	.word	0x20000bc9
 8005c38:	20000c4a 	.word	0x20000c4a
 8005c3c:	20000c4d 	.word	0x20000c4d
 8005c40:	20000c4e 	.word	0x20000c4e
 8005c44:	20000c4f 	.word	0x20000c4f
 8005c48:	20000c50 	.word	0x20000c50
 8005c4c:	20000c51 	.word	0x20000c51
 8005c50:	20000c52 	.word	0x20000c52
 8005c54:	20000c62 	.word	0x20000c62
 8005c58:	20000c53 	.word	0x20000c53
 8005c5c:	20000c63 	.word	0x20000c63
 8005c60:	20000c54 	.word	0x20000c54
 8005c64:	20000c64 	.word	0x20000c64
 8005c68:	20000c57 	.word	0x20000c57
 8005c6c:	20000c58 	.word	0x20000c58
 8005c70:	20000c59 	.word	0x20000c59
 8005c74:	20000c5a 	.word	0x20000c5a
 8005c78:	20000c5b 	.word	0x20000c5b
 8005c7c:	20000c5c 	.word	0x20000c5c
 8005c80:	20000c5d 	.word	0x20000c5d
 8005c84:	20000c5e 	.word	0x20000c5e
 8005c88:	20000c5f 	.word	0x20000c5f
 8005c8c:	20000c60 	.word	0x20000c60
 8005c90:	20000c61 	.word	0x20000c61
 8005c94:	20000c65 	.word	0x20000c65
 8005c98:	20000c67 	.word	0x20000c67
 8005c9c:	20000c45 	.word	0x20000c45
 8005ca0:	20000c46 	.word	0x20000c46
 8005ca4:	20000c47 	.word	0x20000c47
 8005ca8:	200009bf 	.word	0x200009bf
 8005cac:	200009c0 	.word	0x200009c0
 8005cb0:	20000c48 	.word	0x20000c48
 8005cb4:	20000c6a 	.word	0x20000c6a
 8005cb8:	20000c68 	.word	0x20000c68
 8005cbc:	20000c56 	.word	0x20000c56
 8005cc0:	20000c69 	.word	0x20000c69
 8005cc4:	20000c55 	.word	0x20000c55
 8005cc8:	20000c6b 	.word	0x20000c6b
 8005ccc:	20000c6c 	.word	0x20000c6c
 8005cd0:	20000c6d 	.word	0x20000c6d
 8005cd4:	20000c6e 	.word	0x20000c6e
 8005cd8:	20000c6f 	.word	0x20000c6f
 8005cdc:	20000c70 	.word	0x20000c70
 8005ce0:	20000c71 	.word	0x20000c71
 8005ce4:	20000c72 	.word	0x20000c72
 8005ce8:	20000c73 	.word	0x20000c73
 8005cec:	20000c74 	.word	0x20000c74
	}

	if(kapi1AcSure>5) {
 8005cf0:	4b56      	ldr	r3, [pc, #344]	; (8005e4c <eepromKontrol+0x4a4>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b05      	cmp	r3, #5
 8005cf6:	d902      	bls.n	8005cfe <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005cf8:	4b54      	ldr	r3, [pc, #336]	; (8005e4c <eepromKontrol+0x4a4>)
 8005cfa:	2205      	movs	r2, #5
 8005cfc:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005cfe:	4b54      	ldr	r3, [pc, #336]	; (8005e50 <eepromKontrol+0x4a8>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d902      	bls.n	8005d0c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005d06:	4b52      	ldr	r3, [pc, #328]	; (8005e50 <eepromKontrol+0x4a8>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005d0c:	4b51      	ldr	r3, [pc, #324]	; (8005e54 <eepromKontrol+0x4ac>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d902      	bls.n	8005d1a <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005d14:	4b4f      	ldr	r3, [pc, #316]	; (8005e54 <eepromKontrol+0x4ac>)
 8005d16:	2205      	movs	r2, #5
 8005d18:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005d1a:	4b4f      	ldr	r3, [pc, #316]	; (8005e58 <eepromKontrol+0x4b0>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d902      	bls.n	8005d28 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005d22:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <eepromKontrol+0x4b0>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005d28:	4b4c      	ldr	r3, [pc, #304]	; (8005e5c <eepromKontrol+0x4b4>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d902      	bls.n	8005d36 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005d30:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <eepromKontrol+0x4b4>)
 8005d32:	2202      	movs	r2, #2
 8005d34:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005d36:	4b4a      	ldr	r3, [pc, #296]	; (8005e60 <eepromKontrol+0x4b8>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d902      	bls.n	8005d44 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005d3e:	4b48      	ldr	r3, [pc, #288]	; (8005e60 <eepromKontrol+0x4b8>)
 8005d40:	2205      	movs	r2, #5
 8005d42:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005d44:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <eepromKontrol+0x4bc>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d902      	bls.n	8005d52 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005d4c:	4b45      	ldr	r3, [pc, #276]	; (8005e64 <eepromKontrol+0x4bc>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005d52:	4b45      	ldr	r3, [pc, #276]	; (8005e68 <eepromKontrol+0x4c0>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d902      	bls.n	8005d60 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005d5a:	4b43      	ldr	r3, [pc, #268]	; (8005e68 <eepromKontrol+0x4c0>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005d60:	4b42      	ldr	r3, [pc, #264]	; (8005e6c <eepromKontrol+0x4c4>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d902      	bls.n	8005d6e <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005d68:	4b40      	ldr	r3, [pc, #256]	; (8005e6c <eepromKontrol+0x4c4>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005d6e:	4b40      	ldr	r3, [pc, #256]	; (8005e70 <eepromKontrol+0x4c8>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d902      	bls.n	8005d7c <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005d76:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <eepromKontrol+0x4c8>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005d7c:	4b3d      	ldr	r3, [pc, #244]	; (8005e74 <eepromKontrol+0x4cc>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d902      	bls.n	8005d8a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005d84:	4b3b      	ldr	r3, [pc, #236]	; (8005e74 <eepromKontrol+0x4cc>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005d8a:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <eepromKontrol+0x4d0>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d902      	bls.n	8005d98 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005d92:	4b39      	ldr	r3, [pc, #228]	; (8005e78 <eepromKontrol+0x4d0>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005d98:	4b38      	ldr	r3, [pc, #224]	; (8005e7c <eepromKontrol+0x4d4>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b05      	cmp	r3, #5
 8005d9e:	d902      	bls.n	8005da6 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005da0:	4b36      	ldr	r3, [pc, #216]	; (8005e7c <eepromKontrol+0x4d4>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005da6:	4b36      	ldr	r3, [pc, #216]	; (8005e80 <eepromKontrol+0x4d8>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b05      	cmp	r3, #5
 8005dac:	d902      	bls.n	8005db4 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005dae:	4b34      	ldr	r3, [pc, #208]	; (8005e80 <eepromKontrol+0x4d8>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005db4:	4b33      	ldr	r3, [pc, #204]	; (8005e84 <eepromKontrol+0x4dc>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d902      	bls.n	8005dc2 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005dbc:	4b31      	ldr	r3, [pc, #196]	; (8005e84 <eepromKontrol+0x4dc>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005dc2:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <eepromKontrol+0x4e0>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d902      	bls.n	8005dd0 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005dca:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <eepromKontrol+0x4e0>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005dd0:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <eepromKontrol+0x4e4>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2bb4      	cmp	r3, #180	; 0xb4
 8005dd6:	d902      	bls.n	8005dde <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <eepromKontrol+0x4e4>)
 8005dda:	223c      	movs	r2, #60	; 0x3c
 8005ddc:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <eepromKontrol+0x4e8>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d902      	bls.n	8005dec <eepromKontrol+0x444>
	    buzzer=0;
 8005de6:	4b2a      	ldr	r3, [pc, #168]	; (8005e90 <eepromKontrol+0x4e8>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005dec:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <eepromKontrol+0x4ec>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d902      	bls.n	8005dfa <eepromKontrol+0x452>
	    demoMode=0;
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <eepromKontrol+0x4ec>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005dfa:	4b27      	ldr	r3, [pc, #156]	; (8005e98 <eepromKontrol+0x4f0>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d902      	bls.n	8005e08 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005e02:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <eepromKontrol+0x4f0>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005e08:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <eepromKontrol+0x4f4>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d902      	bls.n	8005e16 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005e10:	4b22      	ldr	r3, [pc, #136]	; (8005e9c <eepromKontrol+0x4f4>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005e16:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <eepromKontrol+0x4f8>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d902      	bls.n	8005e24 <eepromKontrol+0x47c>
		iotMode=0;
 8005e1e:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <eepromKontrol+0x4f8>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e28:	f003 f926 	bl	8009078 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005e2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <eepromKontrol+0x4f8>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d104      	bne.n	8005e3e <eepromKontrol+0x496>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <eepromKontrol+0x496>
		convertAndSendData();
 8005e3a:	f7ff fd81 	bl	8005940 <convertAndSendData>
	}

	saveAndConvert(0);
 8005e3e:	2000      	movs	r0, #0
 8005e40:	f002 fbe6 	bl	8008610 <saveAndConvert>
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000c62 	.word	0x20000c62
 8005e50:	20000c53 	.word	0x20000c53
 8005e54:	20000c63 	.word	0x20000c63
 8005e58:	20000c54 	.word	0x20000c54
 8005e5c:	20000c56 	.word	0x20000c56
 8005e60:	20000c64 	.word	0x20000c64
 8005e64:	20000c57 	.word	0x20000c57
 8005e68:	20000c58 	.word	0x20000c58
 8005e6c:	20000c59 	.word	0x20000c59
 8005e70:	20000c5a 	.word	0x20000c5a
 8005e74:	20000c5b 	.word	0x20000c5b
 8005e78:	20000c5c 	.word	0x20000c5c
 8005e7c:	20000c5d 	.word	0x20000c5d
 8005e80:	20000c5e 	.word	0x20000c5e
 8005e84:	20000c5f 	.word	0x20000c5f
 8005e88:	20000c60 	.word	0x20000c60
 8005e8c:	20000c61 	.word	0x20000c61
 8005e90:	20000c65 	.word	0x20000c65
 8005e94:	20000c67 	.word	0x20000c67
 8005e98:	20000c69 	.word	0x20000c69
 8005e9c:	20000c6a 	.word	0x20000c6a
 8005ea0:	20000c68 	.word	0x20000c68

08005ea4 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af04      	add	r7, sp, #16
 8005eaa:	4603      	mov	r3, r0
 8005eac:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005eae:	4b26      	ldr	r3, [pc, #152]	; (8005f48 <hata2EEPROM+0xa4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	1e5a      	subs	r2, r3, #1
 8005eb4:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <hata2EEPROM+0xa8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4413      	add	r3, r2
 8005eba:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <hata2EEPROM+0xac>)
 8005ebc:	5cd3      	ldrb	r3, [r2, r3]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005ec2:	f000 f849 	bl	8005f58 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005ec6:	e000      	b.n	8005eca <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005ec8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e012      	b.n	8005ef6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <hata2EEPROM+0xa8>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <hata2EEPROM+0xac>)
 8005eda:	5cd3      	ldrb	r3, [r2, r3]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d107      	bne.n	8005ef0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <hata2EEPROM+0xa8>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	4919      	ldr	r1, [pc, #100]	; (8005f50 <hata2EEPROM+0xac>)
 8005eea:	79fa      	ldrb	r2, [r7, #7]
 8005eec:	54ca      	strb	r2, [r1, r3]
					break;
 8005eee:	e007      	b.n	8005f00 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <hata2EEPROM+0xa4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	dbe7      	blt.n	8005ed0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8005f00:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <hata2EEPROM+0xa8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	b299      	uxth	r1, r3
 8005f06:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <hata2EEPROM+0xa4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	b298      	uxth	r0, r3
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <hata2EEPROM+0xa8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a0f      	ldr	r2, [pc, #60]	; (8005f50 <hata2EEPROM+0xac>)
 8005f12:	4413      	add	r3, r2
 8005f14:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <hata2EEPROM+0xa4>)
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005f1e:	9402      	str	r4, [sp, #8]
 8005f20:	9201      	str	r2, [sp, #4]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	4603      	mov	r3, r0
 8005f26:	460a      	mov	r2, r1
 8005f28:	21a0      	movs	r1, #160	; 0xa0
 8005f2a:	480a      	ldr	r0, [pc, #40]	; (8005f54 <hata2EEPROM+0xb0>)
 8005f2c:	f004 f92e 	bl	800a18c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005f30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f34:	f003 f8a0 	bl	8009078 <HAL_Delay>
	eepromKontrol(1);
 8005f38:	2001      	movs	r0, #1
 8005f3a:	f7ff fd35 	bl	80059a8 <eepromKontrol>
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd90      	pop	{r4, r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000938 	.word	0x20000938
 8005f4c:	2000093c 	.word	0x2000093c
 8005f50:	20000b38 	.word	0x20000b38
 8005f54:	20000e08 	.word	0x20000e08

08005f58 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005f5e:	2300      	movs	r3, #0
 8005f60:	607b      	str	r3, [r7, #4]
 8005f62:	e009      	b.n	8005f78 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005f64:	4a0a      	ldr	r2, [pc, #40]	; (8005f90 <eepromDataFillWithEmpty+0x38>)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6c:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <eepromDataFillWithEmpty+0x3c>)
 8005f6e:	2100      	movs	r1, #0
 8005f70:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3301      	adds	r3, #1
 8005f76:	607b      	str	r3, [r7, #4]
 8005f78:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <eepromDataFillWithEmpty+0x40>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	dbf0      	blt.n	8005f64 <eepromDataFillWithEmpty+0xc>
	}
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bc80      	pop	{r7}
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000910 	.word	0x20000910
 8005f94:	20000b38 	.word	0x20000b38
 8005f98:	20000938 	.word	0x20000938

08005f9c <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
	timer1=millis;
 8005fa0:	4b47      	ldr	r3, [pc, #284]	; (80060c0 <bekle+0x124>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a47      	ldr	r2, [pc, #284]	; (80060c4 <bekle+0x128>)
 8005fa6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fa8:	e002      	b.n	8005fb0 <bekle+0x14>
    	butonKontrol = 1;
 8005faa:	4b47      	ldr	r3, [pc, #284]	; (80060c8 <bekle+0x12c>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4846      	ldr	r0, [pc, #280]	; (80060cc <bekle+0x130>)
 8005fb4:	f003 fe30 	bl	8009c18 <HAL_GPIO_ReadPin>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d109      	bne.n	8005fd2 <bekle+0x36>
 8005fbe:	4b40      	ldr	r3, [pc, #256]	; (80060c0 <bekle+0x124>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <bekle+0x128>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d0ef      	beq.n	8005faa <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fca:	e002      	b.n	8005fd2 <bekle+0x36>
    	butonKontrol = 1;
 8005fcc:	4b3e      	ldr	r3, [pc, #248]	; (80060c8 <bekle+0x12c>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fd2:	2108      	movs	r1, #8
 8005fd4:	483e      	ldr	r0, [pc, #248]	; (80060d0 <bekle+0x134>)
 8005fd6:	f003 fe1f 	bl	8009c18 <HAL_GPIO_ReadPin>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d109      	bne.n	8005ff4 <bekle+0x58>
 8005fe0:	4b37      	ldr	r3, [pc, #220]	; (80060c0 <bekle+0x124>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4b37      	ldr	r3, [pc, #220]	; (80060c4 <bekle+0x128>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d0ef      	beq.n	8005fcc <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fec:	e002      	b.n	8005ff4 <bekle+0x58>
    	butonKontrol = 1;
 8005fee:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <bekle+0x12c>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	4835      	ldr	r0, [pc, #212]	; (80060cc <bekle+0x130>)
 8005ff8:	f003 fe0e 	bl	8009c18 <HAL_GPIO_ReadPin>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d109      	bne.n	8006016 <bekle+0x7a>
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <bekle+0x124>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <bekle+0x128>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d0ef      	beq.n	8005fee <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800600e:	e002      	b.n	8006016 <bekle+0x7a>
    	butonKontrol = 1;
 8006010:	4b2d      	ldr	r3, [pc, #180]	; (80060c8 <bekle+0x12c>)
 8006012:	2201      	movs	r2, #1
 8006014:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006016:	2104      	movs	r1, #4
 8006018:	482c      	ldr	r0, [pc, #176]	; (80060cc <bekle+0x130>)
 800601a:	f003 fdfd 	bl	8009c18 <HAL_GPIO_ReadPin>
 800601e:	4603      	mov	r3, r0
 8006020:	2b01      	cmp	r3, #1
 8006022:	d109      	bne.n	8006038 <bekle+0x9c>
 8006024:	4b26      	ldr	r3, [pc, #152]	; (80060c0 <bekle+0x124>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b26      	ldr	r3, [pc, #152]	; (80060c4 <bekle+0x128>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d0ef      	beq.n	8006010 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006030:	e002      	b.n	8006038 <bekle+0x9c>
    	butonKontrol = 1;
 8006032:	4b25      	ldr	r3, [pc, #148]	; (80060c8 <bekle+0x12c>)
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006038:	2108      	movs	r1, #8
 800603a:	4824      	ldr	r0, [pc, #144]	; (80060cc <bekle+0x130>)
 800603c:	f003 fdec 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006040:	4603      	mov	r3, r0
 8006042:	2b01      	cmp	r3, #1
 8006044:	d109      	bne.n	800605a <bekle+0xbe>
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <bekle+0x124>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <bekle+0x128>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d0ef      	beq.n	8006032 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006052:	e002      	b.n	800605a <bekle+0xbe>
    	butonKontrol = 1;
 8006054:	4b1c      	ldr	r3, [pc, #112]	; (80060c8 <bekle+0x12c>)
 8006056:	2201      	movs	r2, #1
 8006058:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800605a:	2180      	movs	r1, #128	; 0x80
 800605c:	481c      	ldr	r0, [pc, #112]	; (80060d0 <bekle+0x134>)
 800605e:	f003 fddb 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <bekle+0xe0>
 8006068:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <bekle+0x124>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <bekle+0x128>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d0ef      	beq.n	8006054 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006074:	e002      	b.n	800607c <bekle+0xe0>
    	butonKontrol = 1;
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <bekle+0x12c>)
 8006078:	2201      	movs	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800607c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006080:	4813      	ldr	r0, [pc, #76]	; (80060d0 <bekle+0x134>)
 8006082:	f003 fdc9 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d109      	bne.n	80060a0 <bekle+0x104>
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <bekle+0x124>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <bekle+0x128>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d0ee      	beq.n	8006076 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006098:	e002      	b.n	80060a0 <bekle+0x104>
    	butonKontrol = 1;
 800609a:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <bekle+0x12c>)
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060a4:	480a      	ldr	r0, [pc, #40]	; (80060d0 <bekle+0x134>)
 80060a6:	f003 fdb7 	bl	8009c18 <HAL_GPIO_ReadPin>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <bekle+0x120>
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <bekle+0x124>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <bekle+0x128>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d0ee      	beq.n	800609a <bekle+0xfe>
    }

}
 80060bc:	bf00      	nop
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000bd4 	.word	0x20000bd4
 80060c4:	20000bdc 	.word	0x20000bdc
 80060c8:	20000c78 	.word	0x20000c78
 80060cc:	40010800 	.word	0x40010800
 80060d0:	40011000 	.word	0x40011000

080060d4 <i2cTest>:

void i2cTest() {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80060da:	463b      	mov	r3, r7
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80060e6:	4b50      	ldr	r3, [pc, #320]	; (8006228 <i2cTest+0x154>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b4e      	ldr	r3, [pc, #312]	; (8006228 <i2cTest+0x154>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80060f6:	484c      	ldr	r0, [pc, #304]	; (8006228 <i2cTest+0x154>)
 80060f8:	f003 ff1a 	bl	8009f30 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060fc:	23c0      	movs	r3, #192	; 0xc0
 80060fe:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8006100:	2311      	movs	r3, #17
 8006102:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006104:	2301      	movs	r3, #1
 8006106:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006108:	2303      	movs	r3, #3
 800610a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800610c:	463b      	mov	r3, r7
 800610e:	4619      	mov	r1, r3
 8006110:	4846      	ldr	r0, [pc, #280]	; (800622c <i2cTest+0x158>)
 8006112:	f003 fb21 	bl	8009758 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006116:	2201      	movs	r2, #1
 8006118:	2140      	movs	r1, #64	; 0x40
 800611a:	4844      	ldr	r0, [pc, #272]	; (800622c <i2cTest+0x158>)
 800611c:	f003 fd93 	bl	8009c46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006120:	2201      	movs	r2, #1
 8006122:	2180      	movs	r1, #128	; 0x80
 8006124:	4841      	ldr	r0, [pc, #260]	; (800622c <i2cTest+0x158>)
 8006126:	f003 fd8e 	bl	8009c46 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800612a:	200a      	movs	r0, #10
 800612c:	f002 ffa4 	bl	8009078 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006130:	bf00      	nop
 8006132:	2140      	movs	r1, #64	; 0x40
 8006134:	483d      	ldr	r0, [pc, #244]	; (800622c <i2cTest+0x158>)
 8006136:	f003 fd6f 	bl	8009c18 <HAL_GPIO_ReadPin>
 800613a:	4603      	mov	r3, r0
 800613c:	2b01      	cmp	r3, #1
 800613e:	d006      	beq.n	800614e <i2cTest+0x7a>
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	483a      	ldr	r0, [pc, #232]	; (800622c <i2cTest+0x158>)
 8006144:	f003 fd68 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006148:	4603      	mov	r3, r0
 800614a:	2b01      	cmp	r3, #1
 800614c:	d1f1      	bne.n	8006132 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800614e:	2200      	movs	r2, #0
 8006150:	2180      	movs	r1, #128	; 0x80
 8006152:	4836      	ldr	r0, [pc, #216]	; (800622c <i2cTest+0x158>)
 8006154:	f003 fd77 	bl	8009c46 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006158:	200a      	movs	r0, #10
 800615a:	f002 ff8d 	bl	8009078 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800615e:	bf00      	nop
 8006160:	2180      	movs	r1, #128	; 0x80
 8006162:	4832      	ldr	r0, [pc, #200]	; (800622c <i2cTest+0x158>)
 8006164:	f003 fd58 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006168:	4603      	mov	r3, r0
 800616a:	2b01      	cmp	r3, #1
 800616c:	d0f8      	beq.n	8006160 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800616e:	2200      	movs	r2, #0
 8006170:	2140      	movs	r1, #64	; 0x40
 8006172:	482e      	ldr	r0, [pc, #184]	; (800622c <i2cTest+0x158>)
 8006174:	f003 fd67 	bl	8009c46 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006178:	200a      	movs	r0, #10
 800617a:	f002 ff7d 	bl	8009078 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800617e:	bf00      	nop
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	482a      	ldr	r0, [pc, #168]	; (800622c <i2cTest+0x158>)
 8006184:	f003 fd48 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d0f8      	beq.n	8006180 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800618e:	2201      	movs	r2, #1
 8006190:	2140      	movs	r1, #64	; 0x40
 8006192:	4826      	ldr	r0, [pc, #152]	; (800622c <i2cTest+0x158>)
 8006194:	f003 fd57 	bl	8009c46 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006198:	200a      	movs	r0, #10
 800619a:	f002 ff6d 	bl	8009078 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800619e:	bf00      	nop
 80061a0:	2140      	movs	r1, #64	; 0x40
 80061a2:	4822      	ldr	r0, [pc, #136]	; (800622c <i2cTest+0x158>)
 80061a4:	f003 fd38 	bl	8009c18 <HAL_GPIO_ReadPin>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d1f8      	bne.n	80061a0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80061ae:	2201      	movs	r2, #1
 80061b0:	2180      	movs	r1, #128	; 0x80
 80061b2:	481e      	ldr	r0, [pc, #120]	; (800622c <i2cTest+0x158>)
 80061b4:	f003 fd47 	bl	8009c46 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061b8:	200a      	movs	r0, #10
 80061ba:	f002 ff5d 	bl	8009078 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80061be:	bf00      	nop
 80061c0:	2180      	movs	r1, #128	; 0x80
 80061c2:	481a      	ldr	r0, [pc, #104]	; (800622c <i2cTest+0x158>)
 80061c4:	f003 fd28 	bl	8009c18 <HAL_GPIO_ReadPin>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d1f8      	bne.n	80061c0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061ce:	23c0      	movs	r3, #192	; 0xc0
 80061d0:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80061d2:	2312      	movs	r3, #18
 80061d4:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80061d6:	2301      	movs	r3, #1
 80061d8:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80061da:	2303      	movs	r3, #3
 80061dc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80061de:	463b      	mov	r3, r7
 80061e0:	4619      	mov	r1, r3
 80061e2:	4812      	ldr	r0, [pc, #72]	; (800622c <i2cTest+0x158>)
 80061e4:	f003 fab8 	bl	8009758 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <i2cTest+0x154>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b0e      	ldr	r3, [pc, #56]	; (8006228 <i2cTest+0x154>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061f6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <i2cTest+0x154>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <i2cTest+0x154>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006206:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006208:	4b07      	ldr	r3, [pc, #28]	; (8006228 <i2cTest+0x154>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4b06      	ldr	r3, [pc, #24]	; (8006228 <i2cTest+0x154>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006218:	4803      	ldr	r0, [pc, #12]	; (8006228 <i2cTest+0x154>)
 800621a:	f003 fd45 	bl	8009ca8 <HAL_I2C_Init>
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000e08 	.word	0x20000e08
 800622c:	40010c00 	.word	0x40010c00

08006230 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006234:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <checkLCDBacklight+0x34>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <checkLCDBacklight+0x38>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	1ad2      	subs	r2, r2, r3
 800623e:	4b0b      	ldr	r3, [pc, #44]	; (800626c <checkLCDBacklight+0x3c>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	4619      	mov	r1, r3
 8006244:	460b      	mov	r3, r1
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	429a      	cmp	r2, r3
 800624e:	d303      	bcc.n	8006258 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006250:	2000      	movs	r0, #0
 8006252:	f7fa fa55 	bl	8000700 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006256:	e002      	b.n	800625e <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006258:	2001      	movs	r0, #1
 800625a:	f7fa fa51 	bl	8000700 <lcd_backlight>
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000bd4 	.word	0x20000bd4
 8006268:	20000bf0 	.word	0x20000bf0
 800626c:	20000940 	.word	0x20000940

08006270 <checkBasincSalteri>:

void checkBasincSalteri() {
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006274:	4b13      	ldr	r3, [pc, #76]	; (80062c4 <checkBasincSalteri+0x54>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <checkBasincSalteri+0x12>
		basincVar=1;
 800627c:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <checkBasincSalteri+0x58>)
 800627e:	2201      	movs	r2, #1
 8006280:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8006282:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <checkBasincSalteri+0x54>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d119      	bne.n	80062be <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800628a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800628e:	480f      	ldr	r0, [pc, #60]	; (80062cc <checkBasincSalteri+0x5c>)
 8006290:	f003 fcc2 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800629a:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <checkBasincSalteri+0x60>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <checkBasincSalteri+0x64>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d90a      	bls.n	80062be <checkBasincSalteri+0x4e>
				basincVar=1;
 80062a8:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <checkBasincSalteri+0x58>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80062ae:	e006      	b.n	80062be <checkBasincSalteri+0x4e>
			timer5=millis;
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <checkBasincSalteri+0x60>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <checkBasincSalteri+0x64>)
 80062b6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <checkBasincSalteri+0x58>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000c50 	.word	0x20000c50
 80062c8:	20000c4c 	.word	0x20000c4c
 80062cc:	40011000 	.word	0x40011000
 80062d0:	20000bd4 	.word	0x20000bd4
 80062d4:	20000bec 	.word	0x20000bec

080062d8 <checkBasGonder>:

void checkBasGonder() {
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80062dc:	4b1b      	ldr	r3, [pc, #108]	; (800634c <checkBasGonder+0x74>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d10b      	bne.n	80062fc <checkBasGonder+0x24>
 80062e4:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <checkBasGonder+0x78>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <checkBasGonder+0x24>
 80062ec:	4b19      	ldr	r3, [pc, #100]	; (8006354 <checkBasGonder+0x7c>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80062f4:	4b18      	ldr	r3, [pc, #96]	; (8006358 <checkBasGonder+0x80>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e009      	b.n	8006310 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80062fc:	4b14      	ldr	r3, [pc, #80]	; (8006350 <checkBasGonder+0x78>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f083 0301 	eor.w	r3, r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <checkBasGonder+0x80>)
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006310:	4b0e      	ldr	r3, [pc, #56]	; (800634c <checkBasGonder+0x74>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d10b      	bne.n	8006330 <checkBasGonder+0x58>
 8006318:	4b10      	ldr	r3, [pc, #64]	; (800635c <checkBasGonder+0x84>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <checkBasGonder+0x58>
 8006320:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <checkBasGonder+0x7c>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006328:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <checkBasGonder+0x88>)
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800632e:	e009      	b.n	8006344 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006330:	4b0a      	ldr	r3, [pc, #40]	; (800635c <checkBasGonder+0x84>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f083 0301 	eor.w	r3, r3, #1
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <checkBasGonder+0x88>)
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr
 800634c:	20000c4a 	.word	0x20000c4a
 8006350:	20000c7e 	.word	0x20000c7e
 8006354:	20000c58 	.word	0x20000c58
 8006358:	20000c85 	.word	0x20000c85
 800635c:	20000c81 	.word	0x20000c81
 8006360:	20000c86 	.word	0x20000c86

08006364 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006368:	4b24      	ldr	r3, [pc, #144]	; (80063fc <checkKapiSecimleri+0x98>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d102      	bne.n	8006376 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006370:	4b23      	ldr	r3, [pc, #140]	; (8006400 <checkKapiSecimleri+0x9c>)
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8006376:	4b21      	ldr	r3, [pc, #132]	; (80063fc <checkKapiSecimleri+0x98>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d10e      	bne.n	800639c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800637e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006382:	4820      	ldr	r0, [pc, #128]	; (8006404 <checkKapiSecimleri+0xa0>)
 8006384:	f003 fc48 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800638e:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <checkKapiSecimleri+0x9c>)
 8006390:	2201      	movs	r2, #1
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	e002      	b.n	800639c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8006396:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <checkKapiSecimleri+0x9c>)
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 800639c:	4b17      	ldr	r3, [pc, #92]	; (80063fc <checkKapiSecimleri+0x98>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d10e      	bne.n	80063c2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80063a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a8:	4816      	ldr	r0, [pc, #88]	; (8006404 <checkKapiSecimleri+0xa0>)
 80063aa:	f003 fc35 	bl	8009c18 <HAL_GPIO_ReadPin>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80063b4:	4b12      	ldr	r3, [pc, #72]	; (8006400 <checkKapiSecimleri+0x9c>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	e002      	b.n	80063c2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80063bc:	4b10      	ldr	r3, [pc, #64]	; (8006400 <checkKapiSecimleri+0x9c>)
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80063c2:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <checkKapiSecimleri+0x98>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d116      	bne.n	80063f8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80063ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063ce:	480d      	ldr	r0, [pc, #52]	; (8006404 <checkKapiSecimleri+0xa0>)
 80063d0:	f003 fc22 	bl	8009c18 <HAL_GPIO_ReadPin>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <checkKapiSecimleri+0x8e>
 80063da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063de:	4809      	ldr	r0, [pc, #36]	; (8006404 <checkKapiSecimleri+0xa0>)
 80063e0:	f003 fc1a 	bl	8009c18 <HAL_GPIO_ReadPin>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <checkKapiSecimleri+0x9c>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80063f0:	e002      	b.n	80063f8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80063f2:	4b03      	ldr	r3, [pc, #12]	; (8006400 <checkKapiSecimleri+0x9c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	701a      	strb	r2, [r3, #0]
}
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000c51 	.word	0x20000c51
 8006400:	20000c9c 	.word	0x20000c9c
 8006404:	40010800 	.word	0x40010800

08006408 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800640c:	4b62      	ldr	r3, [pc, #392]	; (8006598 <checkAktifCalisma+0x190>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	f041 8332 	bne.w	8007a7a <checkAktifCalisma+0x1672>
 8006416:	4b61      	ldr	r3, [pc, #388]	; (800659c <checkAktifCalisma+0x194>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	f041 832d 	bne.w	8007a7a <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006420:	4b5f      	ldr	r3, [pc, #380]	; (80065a0 <checkAktifCalisma+0x198>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11a      	bne.n	800645e <checkAktifCalisma+0x56>
 8006428:	4b5e      	ldr	r3, [pc, #376]	; (80065a4 <checkAktifCalisma+0x19c>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d116      	bne.n	800645e <checkAktifCalisma+0x56>
 8006430:	4b5d      	ldr	r3, [pc, #372]	; (80065a8 <checkAktifCalisma+0x1a0>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <checkAktifCalisma+0x46>
 8006438:	4b5c      	ldr	r3, [pc, #368]	; (80065ac <checkAktifCalisma+0x1a4>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f083 0301 	eor.w	r3, r3, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <checkAktifCalisma+0x46>
 8006446:	4b5a      	ldr	r3, [pc, #360]	; (80065b0 <checkAktifCalisma+0x1a8>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d007      	beq.n	800645e <checkAktifCalisma+0x56>
 800644e:	4b59      	ldr	r3, [pc, #356]	; (80065b4 <checkAktifCalisma+0x1ac>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d018      	beq.n	8006488 <checkAktifCalisma+0x80>
 8006456:	4b58      	ldr	r3, [pc, #352]	; (80065b8 <checkAktifCalisma+0x1b0>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d114      	bne.n	8006488 <checkAktifCalisma+0x80>
 800645e:	4b57      	ldr	r3, [pc, #348]	; (80065bc <checkAktifCalisma+0x1b4>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d010      	beq.n	8006488 <checkAktifCalisma+0x80>
 8006466:	4b56      	ldr	r3, [pc, #344]	; (80065c0 <checkAktifCalisma+0x1b8>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800646e:	2201      	movs	r2, #1
 8006470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006474:	4853      	ldr	r0, [pc, #332]	; (80065c4 <checkAktifCalisma+0x1bc>)
 8006476:	f003 fbe6 	bl	8009c46 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800647a:	4b53      	ldr	r3, [pc, #332]	; (80065c8 <checkAktifCalisma+0x1c0>)
 800647c:	2201      	movs	r2, #1
 800647e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006480:	4b52      	ldr	r3, [pc, #328]	; (80065cc <checkAktifCalisma+0x1c4>)
 8006482:	2201      	movs	r2, #1
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e008      	b.n	800649a <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006488:	2200      	movs	r2, #0
 800648a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800648e:	484d      	ldr	r0, [pc, #308]	; (80065c4 <checkAktifCalisma+0x1bc>)
 8006490:	f003 fbd9 	bl	8009c46 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006494:	4b4c      	ldr	r3, [pc, #304]	; (80065c8 <checkAktifCalisma+0x1c0>)
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 800649a:	4b40      	ldr	r3, [pc, #256]	; (800659c <checkAktifCalisma+0x194>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d160      	bne.n	8006564 <checkAktifCalisma+0x15c>
 80064a2:	4b46      	ldr	r3, [pc, #280]	; (80065bc <checkAktifCalisma+0x1b4>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d05c      	beq.n	8006564 <checkAktifCalisma+0x15c>
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <checkAktifCalisma+0x1b8>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d058      	beq.n	8006564 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80064b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064b6:	4843      	ldr	r0, [pc, #268]	; (80065c4 <checkAktifCalisma+0x1bc>)
 80064b8:	f003 fbae 	bl	8009c18 <HAL_GPIO_ReadPin>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <checkAktifCalisma+0xc2>
 80064c2:	4b43      	ldr	r3, [pc, #268]	; (80065d0 <checkAktifCalisma+0x1c8>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d04c      	beq.n	8006564 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064ca:	2102      	movs	r1, #2
 80064cc:	4841      	ldr	r0, [pc, #260]	; (80065d4 <checkAktifCalisma+0x1cc>)
 80064ce:	f003 fba3 	bl	8009c18 <HAL_GPIO_ReadPin>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d145      	bne.n	8006564 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80064d8:	4b3f      	ldr	r3, [pc, #252]	; (80065d8 <checkAktifCalisma+0x1d0>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d041      	beq.n	8006564 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80064e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064e4:	4837      	ldr	r0, [pc, #220]	; (80065c4 <checkAktifCalisma+0x1bc>)
 80064e6:	f003 fb97 	bl	8009c18 <HAL_GPIO_ReadPin>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d10e      	bne.n	800650e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80064f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064f4:	4833      	ldr	r0, [pc, #204]	; (80065c4 <checkAktifCalisma+0x1bc>)
 80064f6:	f003 fb8f 	bl	8009c18 <HAL_GPIO_ReadPin>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d106      	bne.n	800650e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006500:	2140      	movs	r1, #64	; 0x40
 8006502:	4834      	ldr	r0, [pc, #208]	; (80065d4 <checkAktifCalisma+0x1cc>)
 8006504:	f003 fb88 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006508:	4603      	mov	r3, r0
 800650a:	2b01      	cmp	r3, #1
 800650c:	d003      	beq.n	8006516 <checkAktifCalisma+0x10e>
 800650e:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <checkAktifCalisma+0x198>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d026      	beq.n	8006564 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006516:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <checkAktifCalisma+0x1a0>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f083 0301 	eor.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01f      	beq.n	8006564 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006524:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <checkAktifCalisma+0x19c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f083 0301 	eor.w	r3, r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006532:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <checkAktifCalisma+0x1ac>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f083 0301 	eor.w	r3, r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006540:	4b26      	ldr	r3, [pc, #152]	; (80065dc <checkAktifCalisma+0x1d4>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f083 0301 	eor.w	r3, r3, #1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <checkAktifCalisma+0x1d8>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f083 0301 	eor.w	r3, r3, #1
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 800655c:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <checkAktifCalisma+0x198>)
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e002      	b.n	800656a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006564:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <checkAktifCalisma+0x198>)
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800656a:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <checkAktifCalisma+0x198>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d03a      	beq.n	80065e8 <checkAktifCalisma+0x1e0>
 8006572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006576:	4817      	ldr	r0, [pc, #92]	; (80065d4 <checkAktifCalisma+0x1cc>)
 8006578:	f003 fb4e 	bl	8009c18 <HAL_GPIO_ReadPin>
 800657c:	4603      	mov	r3, r0
 800657e:	2b01      	cmp	r3, #1
 8006580:	d132      	bne.n	80065e8 <checkAktifCalisma+0x1e0>
 8006582:	4b18      	ldr	r3, [pc, #96]	; (80065e4 <checkAktifCalisma+0x1dc>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d02e      	beq.n	80065e8 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800658a:	2201      	movs	r2, #1
 800658c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006590:	480c      	ldr	r0, [pc, #48]	; (80065c4 <checkAktifCalisma+0x1bc>)
 8006592:	f003 fb58 	bl	8009c46 <HAL_GPIO_WritePin>
 8006596:	e02d      	b.n	80065f4 <checkAktifCalisma+0x1ec>
 8006598:	20000c67 	.word	0x20000c67
 800659c:	20000c66 	.word	0x20000c66
 80065a0:	20000c7e 	.word	0x20000c7e
 80065a4:	20000c7f 	.word	0x20000c7f
 80065a8:	20000c81 	.word	0x20000c81
 80065ac:	20000c79 	.word	0x20000c79
 80065b0:	20000c5c 	.word	0x20000c5c
 80065b4:	20000c80 	.word	0x20000c80
 80065b8:	20000c5b 	.word	0x20000c5b
 80065bc:	20000c9b 	.word	0x20000c9b
 80065c0:	20000c9c 	.word	0x20000c9c
 80065c4:	40010c00 	.word	0x40010c00
 80065c8:	20000c9d 	.word	0x20000c9d
 80065cc:	20000c88 	.word	0x20000c88
 80065d0:	20000c85 	.word	0x20000c85
 80065d4:	40011000 	.word	0x40011000
 80065d8:	20000c4c 	.word	0x20000c4c
 80065dc:	20000c83 	.word	0x20000c83
 80065e0:	20000c84 	.word	0x20000c84
 80065e4:	20000c57 	.word	0x20000c57
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065ee:	4860      	ldr	r0, [pc, #384]	; (8006770 <checkAktifCalisma+0x368>)
 80065f0:	f003 fb29 	bl	8009c46 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80065f4:	4b5f      	ldr	r3, [pc, #380]	; (8006774 <checkAktifCalisma+0x36c>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d013      	beq.n	8006624 <checkAktifCalisma+0x21c>
 80065fc:	4b5e      	ldr	r3, [pc, #376]	; (8006778 <checkAktifCalisma+0x370>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d007      	beq.n	8006614 <checkAktifCalisma+0x20c>
 8006604:	4b5c      	ldr	r3, [pc, #368]	; (8006778 <checkAktifCalisma+0x370>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d003      	beq.n	8006614 <checkAktifCalisma+0x20c>
 800660c:	4b5b      	ldr	r3, [pc, #364]	; (800677c <checkAktifCalisma+0x374>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d107      	bne.n	8006624 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006614:	2201      	movs	r2, #1
 8006616:	2104      	movs	r1, #4
 8006618:	4855      	ldr	r0, [pc, #340]	; (8006770 <checkAktifCalisma+0x368>)
 800661a:	f003 fb14 	bl	8009c46 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800661e:	4b58      	ldr	r3, [pc, #352]	; (8006780 <checkAktifCalisma+0x378>)
 8006620:	2201      	movs	r2, #1
 8006622:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006624:	4b56      	ldr	r3, [pc, #344]	; (8006780 <checkAktifCalisma+0x378>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d02f      	beq.n	800668c <checkAktifCalisma+0x284>
 800662c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006630:	484f      	ldr	r0, [pc, #316]	; (8006770 <checkAktifCalisma+0x368>)
 8006632:	f003 faf1 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d106      	bne.n	800664a <checkAktifCalisma+0x242>
 800663c:	4b51      	ldr	r3, [pc, #324]	; (8006784 <checkAktifCalisma+0x37c>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f083 0301 	eor.w	r3, r3, #1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <checkAktifCalisma+0x250>
 800664a:	2102      	movs	r1, #2
 800664c:	484e      	ldr	r0, [pc, #312]	; (8006788 <checkAktifCalisma+0x380>)
 800664e:	f003 fae3 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d119      	bne.n	800668c <checkAktifCalisma+0x284>
 8006658:	4b4c      	ldr	r3, [pc, #304]	; (800678c <checkAktifCalisma+0x384>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <checkAktifCalisma+0x284>
 8006660:	4b4b      	ldr	r3, [pc, #300]	; (8006790 <checkAktifCalisma+0x388>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d011      	beq.n	800668c <checkAktifCalisma+0x284>
 8006668:	4b4a      	ldr	r3, [pc, #296]	; (8006794 <checkAktifCalisma+0x38c>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00d      	beq.n	800668c <checkAktifCalisma+0x284>
 8006670:	4b49      	ldr	r3, [pc, #292]	; (8006798 <checkAktifCalisma+0x390>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f083 0301 	eor.w	r3, r3, #1
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d006      	beq.n	800668c <checkAktifCalisma+0x284>
			timer2=millis;
 800667e:	4b47      	ldr	r3, [pc, #284]	; (800679c <checkAktifCalisma+0x394>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a47      	ldr	r2, [pc, #284]	; (80067a0 <checkAktifCalisma+0x398>)
 8006684:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006686:	4b44      	ldr	r3, [pc, #272]	; (8006798 <checkAktifCalisma+0x390>)
 8006688:	2201      	movs	r2, #1
 800668a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 800668c:	4b43      	ldr	r3, [pc, #268]	; (800679c <checkAktifCalisma+0x394>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b43      	ldr	r3, [pc, #268]	; (80067a0 <checkAktifCalisma+0x398>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	4a43      	ldr	r2, [pc, #268]	; (80067a4 <checkAktifCalisma+0x39c>)
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	4293      	cmp	r3, r2
 800669c:	d303      	bcc.n	80066a6 <checkAktifCalisma+0x29e>
 800669e:	4b3e      	ldr	r3, [pc, #248]	; (8006798 <checkAktifCalisma+0x390>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d111      	bne.n	80066ca <checkAktifCalisma+0x2c2>
 80066a6:	4b39      	ldr	r3, [pc, #228]	; (800678c <checkAktifCalisma+0x384>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f083 0301 	eor.w	r3, r3, #1
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <checkAktifCalisma+0x2c2>
 80066b4:	4b36      	ldr	r3, [pc, #216]	; (8006790 <checkAktifCalisma+0x388>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	f083 0301 	eor.w	r3, r3, #1
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <checkAktifCalisma+0x2c2>
 80066c2:	4b34      	ldr	r3, [pc, #208]	; (8006794 <checkAktifCalisma+0x38c>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066ca:	2200      	movs	r2, #0
 80066cc:	2104      	movs	r1, #4
 80066ce:	4828      	ldr	r0, [pc, #160]	; (8006770 <checkAktifCalisma+0x368>)
 80066d0:	f003 fab9 	bl	8009c46 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80066d4:	4b2a      	ldr	r3, [pc, #168]	; (8006780 <checkAktifCalisma+0x378>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80066da:	4b2f      	ldr	r3, [pc, #188]	; (8006798 <checkAktifCalisma+0x390>)
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80066e0:	4b31      	ldr	r3, [pc, #196]	; (80067a8 <checkAktifCalisma+0x3a0>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80066e8:	4b30      	ldr	r3, [pc, #192]	; (80067ac <checkAktifCalisma+0x3a4>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80066ee:	4b2e      	ldr	r3, [pc, #184]	; (80067a8 <checkAktifCalisma+0x3a0>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d116      	bne.n	8006724 <checkAktifCalisma+0x31c>
 80066f6:	4b2e      	ldr	r3, [pc, #184]	; (80067b0 <checkAktifCalisma+0x3a8>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d112      	bne.n	8006724 <checkAktifCalisma+0x31c>
 80066fe:	2101      	movs	r1, #1
 8006700:	4821      	ldr	r0, [pc, #132]	; (8006788 <checkAktifCalisma+0x380>)
 8006702:	f003 fa89 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <checkAktifCalisma+0x31c>
 800670c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006710:	4817      	ldr	r0, [pc, #92]	; (8006770 <checkAktifCalisma+0x368>)
 8006712:	f003 fa81 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800671c:	4b23      	ldr	r3, [pc, #140]	; (80067ac <checkAktifCalisma+0x3a4>)
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	e011      	b.n	8006748 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006724:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <checkAktifCalisma+0x3a0>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10d      	bne.n	8006748 <checkAktifCalisma+0x340>
 800672c:	2101      	movs	r1, #1
 800672e:	4816      	ldr	r0, [pc, #88]	; (8006788 <checkAktifCalisma+0x380>)
 8006730:	f003 fa72 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006734:	4603      	mov	r3, r0
 8006736:	2b01      	cmp	r3, #1
 8006738:	d106      	bne.n	8006748 <checkAktifCalisma+0x340>
 800673a:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <checkAktifCalisma+0x3a8>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d102      	bne.n	8006748 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006742:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <checkAktifCalisma+0x3a4>)
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006748:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <checkAktifCalisma+0x3a0>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d134      	bne.n	80067ba <checkAktifCalisma+0x3b2>
 8006750:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <checkAktifCalisma+0x3a8>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d130      	bne.n	80067ba <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006758:	2101      	movs	r1, #1
 800675a:	480b      	ldr	r0, [pc, #44]	; (8006788 <checkAktifCalisma+0x380>)
 800675c:	f003 fa5c 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d126      	bne.n	80067b4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006766:	4b11      	ldr	r3, [pc, #68]	; (80067ac <checkAktifCalisma+0x3a4>)
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	e025      	b.n	80067ba <checkAktifCalisma+0x3b2>
 800676e:	bf00      	nop
 8006770:	40010c00 	.word	0x40010c00
 8006774:	20000c7e 	.word	0x20000c7e
 8006778:	20000c58 	.word	0x20000c58
 800677c:	20000c5c 	.word	0x20000c5c
 8006780:	20000c82 	.word	0x20000c82
 8006784:	20000c85 	.word	0x20000c85
 8006788:	40011000 	.word	0x40011000
 800678c:	20000c9b 	.word	0x20000c9b
 8006790:	20000c9c 	.word	0x20000c9c
 8006794:	20000c4c 	.word	0x20000c4c
 8006798:	20000c7a 	.word	0x20000c7a
 800679c:	20000bd4 	.word	0x20000bd4
 80067a0:	20000be0 	.word	0x20000be0
 80067a4:	20000c5d 	.word	0x20000c5d
 80067a8:	20000c4d 	.word	0x20000c4d
 80067ac:	20000ca0 	.word	0x20000ca0
 80067b0:	20000c4a 	.word	0x20000c4a
			} else {
				cerceveVar=0;
 80067b4:	4b7f      	ldr	r3, [pc, #508]	; (80069b4 <checkAktifCalisma+0x5ac>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80067ba:	4b7f      	ldr	r3, [pc, #508]	; (80069b8 <checkAktifCalisma+0x5b0>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d17c      	bne.n	80068bc <checkAktifCalisma+0x4b4>
 80067c2:	4b7e      	ldr	r3, [pc, #504]	; (80069bc <checkAktifCalisma+0x5b4>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d078      	beq.n	80068bc <checkAktifCalisma+0x4b4>
 80067ca:	4b7d      	ldr	r3, [pc, #500]	; (80069c0 <checkAktifCalisma+0x5b8>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d074      	beq.n	80068bc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80067d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067d6:	487b      	ldr	r0, [pc, #492]	; (80069c4 <checkAktifCalisma+0x5bc>)
 80067d8:	f003 fa1e 	bl	8009c18 <HAL_GPIO_ReadPin>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <checkAktifCalisma+0x3e2>
 80067e2:	4b79      	ldr	r3, [pc, #484]	; (80069c8 <checkAktifCalisma+0x5c0>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d068      	beq.n	80068bc <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80067ea:	4b72      	ldr	r3, [pc, #456]	; (80069b4 <checkAktifCalisma+0x5ac>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d064      	beq.n	80068bc <checkAktifCalisma+0x4b4>
 80067f2:	4b76      	ldr	r3, [pc, #472]	; (80069cc <checkAktifCalisma+0x5c4>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f083 0301 	eor.w	r3, r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d05d      	beq.n	80068bc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006800:	2104      	movs	r1, #4
 8006802:	4873      	ldr	r0, [pc, #460]	; (80069d0 <checkAktifCalisma+0x5c8>)
 8006804:	f003 fa08 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <checkAktifCalisma+0x40e>
 800680e:	4b71      	ldr	r3, [pc, #452]	; (80069d4 <checkAktifCalisma+0x5cc>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d152      	bne.n	80068bc <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800681a:	486a      	ldr	r0, [pc, #424]	; (80069c4 <checkAktifCalisma+0x5bc>)
 800681c:	f003 f9fc 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10e      	bne.n	8006844 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800682a:	4866      	ldr	r0, [pc, #408]	; (80069c4 <checkAktifCalisma+0x5bc>)
 800682c:	f003 f9f4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d106      	bne.n	8006844 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006836:	2140      	movs	r1, #64	; 0x40
 8006838:	4865      	ldr	r0, [pc, #404]	; (80069d0 <checkAktifCalisma+0x5c8>)
 800683a:	f003 f9ed 	bl	8009c18 <HAL_GPIO_ReadPin>
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d003      	beq.n	800684c <checkAktifCalisma+0x444>
 8006844:	4b64      	ldr	r3, [pc, #400]	; (80069d8 <checkAktifCalisma+0x5d0>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d037      	beq.n	80068bc <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800684c:	4b63      	ldr	r3, [pc, #396]	; (80069dc <checkAktifCalisma+0x5d4>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f083 0301 	eor.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d030      	beq.n	80068bc <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800685a:	4b61      	ldr	r3, [pc, #388]	; (80069e0 <checkAktifCalisma+0x5d8>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f083 0301 	eor.w	r3, r3, #1
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d029      	beq.n	80068bc <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006868:	4b5e      	ldr	r3, [pc, #376]	; (80069e4 <checkAktifCalisma+0x5dc>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f083 0301 	eor.w	r3, r3, #1
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d022      	beq.n	80068bc <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006876:	4b5c      	ldr	r3, [pc, #368]	; (80069e8 <checkAktifCalisma+0x5e0>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	f083 0301 	eor.w	r3, r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01b      	beq.n	80068bc <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006884:	4b59      	ldr	r3, [pc, #356]	; (80069ec <checkAktifCalisma+0x5e4>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f083 0301 	eor.w	r3, r3, #1
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d014      	beq.n	80068bc <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006892:	4b57      	ldr	r3, [pc, #348]	; (80069f0 <checkAktifCalisma+0x5e8>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f083 0301 	eor.w	r3, r3, #1
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00d      	beq.n	80068bc <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80068a0:	2201      	movs	r2, #1
 80068a2:	2102      	movs	r1, #2
 80068a4:	4847      	ldr	r0, [pc, #284]	; (80069c4 <checkAktifCalisma+0x5bc>)
 80068a6:	f003 f9ce 	bl	8009c46 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80068aa:	4b4b      	ldr	r3, [pc, #300]	; (80069d8 <checkAktifCalisma+0x5d0>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80068b0:	4b50      	ldr	r3, [pc, #320]	; (80069f4 <checkAktifCalisma+0x5ec>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80068b6:	4b50      	ldr	r3, [pc, #320]	; (80069f8 <checkAktifCalisma+0x5f0>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80068bc:	4b46      	ldr	r3, [pc, #280]	; (80069d8 <checkAktifCalisma+0x5d0>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d033      	beq.n	800692c <checkAktifCalisma+0x524>
 80068c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068c8:	483e      	ldr	r0, [pc, #248]	; (80069c4 <checkAktifCalisma+0x5bc>)
 80068ca:	f003 f9a5 	bl	8009c18 <HAL_GPIO_ReadPin>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d106      	bne.n	80068e2 <checkAktifCalisma+0x4da>
 80068d4:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <checkAktifCalisma+0x5c0>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f083 0301 	eor.w	r3, r3, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <checkAktifCalisma+0x4f0>
 80068e2:	2104      	movs	r1, #4
 80068e4:	483a      	ldr	r0, [pc, #232]	; (80069d0 <checkAktifCalisma+0x5c8>)
 80068e6:	f003 f997 	bl	8009c18 <HAL_GPIO_ReadPin>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d11d      	bne.n	800692c <checkAktifCalisma+0x524>
 80068f0:	4b38      	ldr	r3, [pc, #224]	; (80069d4 <checkAktifCalisma+0x5cc>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d019      	beq.n	800692c <checkAktifCalisma+0x524>
 80068f8:	4b30      	ldr	r3, [pc, #192]	; (80069bc <checkAktifCalisma+0x5b4>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d015      	beq.n	800692c <checkAktifCalisma+0x524>
 8006900:	4b2f      	ldr	r3, [pc, #188]	; (80069c0 <checkAktifCalisma+0x5b8>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d011      	beq.n	800692c <checkAktifCalisma+0x524>
 8006908:	4b2a      	ldr	r3, [pc, #168]	; (80069b4 <checkAktifCalisma+0x5ac>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00d      	beq.n	800692c <checkAktifCalisma+0x524>
 8006910:	4b3a      	ldr	r3, [pc, #232]	; (80069fc <checkAktifCalisma+0x5f4>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f083 0301 	eor.w	r3, r3, #1
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <checkAktifCalisma+0x524>
			timer2=millis;
 800691e:	4b38      	ldr	r3, [pc, #224]	; (8006a00 <checkAktifCalisma+0x5f8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a38      	ldr	r2, [pc, #224]	; (8006a04 <checkAktifCalisma+0x5fc>)
 8006924:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006926:	4b35      	ldr	r3, [pc, #212]	; (80069fc <checkAktifCalisma+0x5f4>)
 8006928:	2201      	movs	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800692c:	4b34      	ldr	r3, [pc, #208]	; (8006a00 <checkAktifCalisma+0x5f8>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	4b34      	ldr	r3, [pc, #208]	; (8006a04 <checkAktifCalisma+0x5fc>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	4a34      	ldr	r2, [pc, #208]	; (8006a08 <checkAktifCalisma+0x600>)
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	4293      	cmp	r3, r2
 800693c:	d303      	bcc.n	8006946 <checkAktifCalisma+0x53e>
 800693e:	4b2f      	ldr	r3, [pc, #188]	; (80069fc <checkAktifCalisma+0x5f4>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d114      	bne.n	8006970 <checkAktifCalisma+0x568>
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <checkAktifCalisma+0x5b4>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f083 0301 	eor.w	r3, r3, #1
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10d      	bne.n	8006970 <checkAktifCalisma+0x568>
 8006954:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <checkAktifCalisma+0x5b8>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f083 0301 	eor.w	r3, r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <checkAktifCalisma+0x568>
 8006962:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <checkAktifCalisma+0x5ac>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f083 0301 	eor.w	r3, r3, #1
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006970:	2200      	movs	r2, #0
 8006972:	2102      	movs	r1, #2
 8006974:	4813      	ldr	r0, [pc, #76]	; (80069c4 <checkAktifCalisma+0x5bc>)
 8006976:	f003 f966 	bl	8009c46 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800697a:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <checkAktifCalisma+0x5d0>)
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006980:	4b1e      	ldr	r3, [pc, #120]	; (80069fc <checkAktifCalisma+0x5f4>)
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006986:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <checkAktifCalisma+0x5d0>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d040      	beq.n	8006a10 <checkAktifCalisma+0x608>
 800698e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006992:	480f      	ldr	r0, [pc, #60]	; (80069d0 <checkAktifCalisma+0x5c8>)
 8006994:	f003 f940 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d138      	bne.n	8006a10 <checkAktifCalisma+0x608>
 800699e:	4b1b      	ldr	r3, [pc, #108]	; (8006a0c <checkAktifCalisma+0x604>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d034      	beq.n	8006a10 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80069a6:	2201      	movs	r2, #1
 80069a8:	2101      	movs	r1, #1
 80069aa:	4806      	ldr	r0, [pc, #24]	; (80069c4 <checkAktifCalisma+0x5bc>)
 80069ac:	f003 f94b 	bl	8009c46 <HAL_GPIO_WritePin>
 80069b0:	e033      	b.n	8006a1a <checkAktifCalisma+0x612>
 80069b2:	bf00      	nop
 80069b4:	20000ca0 	.word	0x20000ca0
 80069b8:	20000c66 	.word	0x20000c66
 80069bc:	20000c9b 	.word	0x20000c9b
 80069c0:	20000c9c 	.word	0x20000c9c
 80069c4:	40010c00 	.word	0x40010c00
 80069c8:	20000c86 	.word	0x20000c86
 80069cc:	20000c9a 	.word	0x20000c9a
 80069d0:	40011000 	.word	0x40011000
 80069d4:	20000c4f 	.word	0x20000c4f
 80069d8:	20000c81 	.word	0x20000c81
 80069dc:	20000c7e 	.word	0x20000c7e
 80069e0:	20000c82 	.word	0x20000c82
 80069e4:	20000c7f 	.word	0x20000c7f
 80069e8:	20000c80 	.word	0x20000c80
 80069ec:	20000c83 	.word	0x20000c83
 80069f0:	20000c84 	.word	0x20000c84
 80069f4:	20000c89 	.word	0x20000c89
 80069f8:	20000caa 	.word	0x20000caa
 80069fc:	20000c79 	.word	0x20000c79
 8006a00:	20000bd4 	.word	0x20000bd4
 8006a04:	20000be0 	.word	0x20000be0
 8006a08:	20000c5e 	.word	0x20000c5e
 8006a0c:	20000c4e 	.word	0x20000c4e
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a10:	2200      	movs	r2, #0
 8006a12:	2101      	movs	r1, #1
 8006a14:	4836      	ldr	r0, [pc, #216]	; (8006af0 <checkAktifCalisma+0x6e8>)
 8006a16:	f003 f916 	bl	8009c46 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006a1a:	4b36      	ldr	r3, [pc, #216]	; (8006af4 <checkAktifCalisma+0x6ec>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f040 8080 	bne.w	8006b24 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006a24:	4b34      	ldr	r3, [pc, #208]	; (8006af8 <checkAktifCalisma+0x6f0>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d003      	beq.n	8006a34 <checkAktifCalisma+0x62c>
 8006a2c:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <checkAktifCalisma+0x6f0>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d177      	bne.n	8006b24 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006a34:	4b31      	ldr	r3, [pc, #196]	; (8006afc <checkAktifCalisma+0x6f4>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d073      	beq.n	8006b24 <checkAktifCalisma+0x71c>
 8006a3c:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <checkAktifCalisma+0x6f8>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d06f      	beq.n	8006b24 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a48:	4829      	ldr	r0, [pc, #164]	; (8006af0 <checkAktifCalisma+0x6e8>)
 8006a4a:	f003 f8e5 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d167      	bne.n	8006b24 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a58:	482a      	ldr	r0, [pc, #168]	; (8006b04 <checkAktifCalisma+0x6fc>)
 8006a5a:	f003 f8dd 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <checkAktifCalisma+0x664>
 8006a64:	4b28      	ldr	r3, [pc, #160]	; (8006b08 <checkAktifCalisma+0x700>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d15b      	bne.n	8006b24 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006a6c:	2140      	movs	r1, #64	; 0x40
 8006a6e:	4825      	ldr	r0, [pc, #148]	; (8006b04 <checkAktifCalisma+0x6fc>)
 8006a70:	f003 f8d2 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d10f      	bne.n	8006a9a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a7e:	481c      	ldr	r0, [pc, #112]	; (8006af0 <checkAktifCalisma+0x6e8>)
 8006a80:	f003 f8ca 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d107      	bne.n	8006a9a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a8e:	4818      	ldr	r0, [pc, #96]	; (8006af0 <checkAktifCalisma+0x6e8>)
 8006a90:	f003 f8c2 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d003      	beq.n	8006aa2 <checkAktifCalisma+0x69a>
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <checkAktifCalisma+0x704>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d040      	beq.n	8006b24 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <checkAktifCalisma+0x708>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f083 0301 	eor.w	r3, r3, #1
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d039      	beq.n	8006b24 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006ab0:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <checkAktifCalisma+0x70c>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f083 0301 	eor.w	r3, r3, #1
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d032      	beq.n	8006b24 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006abe:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <checkAktifCalisma+0x710>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f083 0301 	eor.w	r3, r3, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d02b      	beq.n	8006b24 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006acc:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <checkAktifCalisma+0x714>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	f083 0301 	eor.w	r3, r3, #1
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d024      	beq.n	8006b24 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006ada:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <checkAktifCalisma+0x718>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f083 0301 	eor.w	r3, r3, #1
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01d      	beq.n	8006b24 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006ae8:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <checkAktifCalisma+0x704>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e01c      	b.n	8006b2a <checkAktifCalisma+0x722>
 8006af0:	40010c00 	.word	0x40010c00
 8006af4:	20000c66 	.word	0x20000c66
 8006af8:	20000c58 	.word	0x20000c58
 8006afc:	20000c9b 	.word	0x20000c9b
 8006b00:	20000c9c 	.word	0x20000c9c
 8006b04:	40011000 	.word	0x40011000
 8006b08:	20000c59 	.word	0x20000c59
 8006b0c:	20000c7f 	.word	0x20000c7f
 8006b10:	20000c7e 	.word	0x20000c7e
 8006b14:	20000c82 	.word	0x20000c82
 8006b18:	20000c81 	.word	0x20000c81
 8006b1c:	20000c80 	.word	0x20000c80
 8006b20:	20000c84 	.word	0x20000c84
		} else {
			devmotoryukaricalisiyor=0;
 8006b24:	4b64      	ldr	r3, [pc, #400]	; (8006cb8 <checkAktifCalisma+0x8b0>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006b2a:	4b63      	ldr	r3, [pc, #396]	; (8006cb8 <checkAktifCalisma+0x8b0>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006b32:	2201      	movs	r2, #1
 8006b34:	2120      	movs	r1, #32
 8006b36:	4861      	ldr	r0, [pc, #388]	; (8006cbc <checkAktifCalisma+0x8b4>)
 8006b38:	f003 f885 	bl	8009c46 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006b3c:	4b60      	ldr	r3, [pc, #384]	; (8006cc0 <checkAktifCalisma+0x8b8>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006b42:	4b5f      	ldr	r3, [pc, #380]	; (8006cc0 <checkAktifCalisma+0x8b8>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d025      	beq.n	8006b96 <checkAktifCalisma+0x78e>
 8006b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b4e:	485d      	ldr	r0, [pc, #372]	; (8006cc4 <checkAktifCalisma+0x8bc>)
 8006b50:	f003 f862 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d007      	beq.n	8006b6a <checkAktifCalisma+0x762>
 8006b5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b5e:	4857      	ldr	r0, [pc, #348]	; (8006cbc <checkAktifCalisma+0x8b4>)
 8006b60:	f003 f85a 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d115      	bne.n	8006b96 <checkAktifCalisma+0x78e>
 8006b6a:	4b57      	ldr	r3, [pc, #348]	; (8006cc8 <checkAktifCalisma+0x8c0>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d011      	beq.n	8006b96 <checkAktifCalisma+0x78e>
 8006b72:	4b56      	ldr	r3, [pc, #344]	; (8006ccc <checkAktifCalisma+0x8c4>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00d      	beq.n	8006b96 <checkAktifCalisma+0x78e>
 8006b7a:	4b55      	ldr	r3, [pc, #340]	; (8006cd0 <checkAktifCalisma+0x8c8>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f083 0301 	eor.w	r3, r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006b88:	4b52      	ldr	r3, [pc, #328]	; (8006cd4 <checkAktifCalisma+0x8cc>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a52      	ldr	r2, [pc, #328]	; (8006cd8 <checkAktifCalisma+0x8d0>)
 8006b8e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006b90:	4b4f      	ldr	r3, [pc, #316]	; (8006cd0 <checkAktifCalisma+0x8c8>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006b96:	4b4f      	ldr	r3, [pc, #316]	; (8006cd4 <checkAktifCalisma+0x8cc>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b4f      	ldr	r3, [pc, #316]	; (8006cd8 <checkAktifCalisma+0x8d0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	4a4e      	ldr	r2, [pc, #312]	; (8006cdc <checkAktifCalisma+0x8d4>)
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d303      	bcc.n	8006bb0 <checkAktifCalisma+0x7a8>
 8006ba8:	4b49      	ldr	r3, [pc, #292]	; (8006cd0 <checkAktifCalisma+0x8c8>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10d      	bne.n	8006bcc <checkAktifCalisma+0x7c4>
 8006bb0:	4b45      	ldr	r3, [pc, #276]	; (8006cc8 <checkAktifCalisma+0x8c0>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f083 0301 	eor.w	r3, r3, #1
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <checkAktifCalisma+0x7c4>
 8006bbe:	4b43      	ldr	r3, [pc, #268]	; (8006ccc <checkAktifCalisma+0x8c4>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f083 0301 	eor.w	r3, r3, #1
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2120      	movs	r1, #32
 8006bd0:	483a      	ldr	r0, [pc, #232]	; (8006cbc <checkAktifCalisma+0x8b4>)
 8006bd2:	f003 f838 	bl	8009c46 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006bd6:	4b3a      	ldr	r3, [pc, #232]	; (8006cc0 <checkAktifCalisma+0x8b8>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006bdc:	4b3c      	ldr	r3, [pc, #240]	; (8006cd0 <checkAktifCalisma+0x8c8>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006be2:	4b3f      	ldr	r3, [pc, #252]	; (8006ce0 <checkAktifCalisma+0x8d8>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f040 8088 	bne.w	8006cfc <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006bec:	4b3d      	ldr	r3, [pc, #244]	; (8006ce4 <checkAktifCalisma+0x8dc>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d003      	beq.n	8006bfc <checkAktifCalisma+0x7f4>
 8006bf4:	4b3b      	ldr	r3, [pc, #236]	; (8006ce4 <checkAktifCalisma+0x8dc>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d17f      	bne.n	8006cfc <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006bfc:	4b32      	ldr	r3, [pc, #200]	; (8006cc8 <checkAktifCalisma+0x8c0>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d07b      	beq.n	8006cfc <checkAktifCalisma+0x8f4>
 8006c04:	4b31      	ldr	r3, [pc, #196]	; (8006ccc <checkAktifCalisma+0x8c4>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d077      	beq.n	8006cfc <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006c0c:	2140      	movs	r1, #64	; 0x40
 8006c0e:	482b      	ldr	r0, [pc, #172]	; (8006cbc <checkAktifCalisma+0x8b4>)
 8006c10:	f003 f802 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d170      	bne.n	8006cfc <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c1e:	4827      	ldr	r0, [pc, #156]	; (8006cbc <checkAktifCalisma+0x8b4>)
 8006c20:	f002 fffa 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <checkAktifCalisma+0x82a>
 8006c2a:	4b2f      	ldr	r3, [pc, #188]	; (8006ce8 <checkAktifCalisma+0x8e0>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d164      	bne.n	8006cfc <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c36:	4823      	ldr	r0, [pc, #140]	; (8006cc4 <checkAktifCalisma+0x8bc>)
 8006c38:	f002 ffee 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d10f      	bne.n	8006c62 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c46:	481f      	ldr	r0, [pc, #124]	; (8006cc4 <checkAktifCalisma+0x8bc>)
 8006c48:	f002 ffe6 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d107      	bne.n	8006c62 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c56:	481b      	ldr	r0, [pc, #108]	; (8006cc4 <checkAktifCalisma+0x8bc>)
 8006c58:	f002 ffde 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d003      	beq.n	8006c6a <checkAktifCalisma+0x862>
 8006c62:	4b22      	ldr	r3, [pc, #136]	; (8006cec <checkAktifCalisma+0x8e4>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d048      	beq.n	8006cfc <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006c6a:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <checkAktifCalisma+0x8e8>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f083 0301 	eor.w	r3, r3, #1
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d041      	beq.n	8006cfc <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006c78:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <checkAktifCalisma+0x8ec>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f083 0301 	eor.w	r3, r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d03a      	beq.n	8006cfc <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006c86:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <checkAktifCalisma+0x8f0>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f083 0301 	eor.w	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d033      	beq.n	8006cfc <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <checkAktifCalisma+0x8b8>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f083 0301 	eor.w	r3, r3, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02c      	beq.n	8006cfc <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <checkAktifCalisma+0x8b0>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	f083 0301 	eor.w	r3, r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d025      	beq.n	8006cfc <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006cb0:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <checkAktifCalisma+0x8e4>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e024      	b.n	8006d02 <checkAktifCalisma+0x8fa>
 8006cb8:	20000c7f 	.word	0x20000c7f
 8006cbc:	40011000 	.word	0x40011000
 8006cc0:	20000c83 	.word	0x20000c83
 8006cc4:	40010c00 	.word	0x40010c00
 8006cc8:	20000c9b 	.word	0x20000c9b
 8006ccc:	20000c9c 	.word	0x20000c9c
 8006cd0:	20000c7b 	.word	0x20000c7b
 8006cd4:	20000bd4 	.word	0x20000bd4
 8006cd8:	20000be0 	.word	0x20000be0
 8006cdc:	20000c5f 	.word	0x20000c5f
 8006ce0:	20000c66 	.word	0x20000c66
 8006ce4:	20000c58 	.word	0x20000c58
 8006ce8:	20000c5a 	.word	0x20000c5a
 8006cec:	20000c80 	.word	0x20000c80
 8006cf0:	20000c7e 	.word	0x20000c7e
 8006cf4:	20000c82 	.word	0x20000c82
 8006cf8:	20000c81 	.word	0x20000c81
		} else {
			devmotorasagicalisiyor=0;
 8006cfc:	4b96      	ldr	r3, [pc, #600]	; (8006f58 <checkAktifCalisma+0xb50>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006d02:	4b95      	ldr	r3, [pc, #596]	; (8006f58 <checkAktifCalisma+0xb50>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	2110      	movs	r1, #16
 8006d0e:	4893      	ldr	r0, [pc, #588]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006d10:	f002 ff99 	bl	8009c46 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006d14:	4b92      	ldr	r3, [pc, #584]	; (8006f60 <checkAktifCalisma+0xb58>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006d1a:	4b91      	ldr	r3, [pc, #580]	; (8006f60 <checkAktifCalisma+0xb58>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d024      	beq.n	8006d6c <checkAktifCalisma+0x964>
 8006d22:	2140      	movs	r1, #64	; 0x40
 8006d24:	488d      	ldr	r0, [pc, #564]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006d26:	f002 ff77 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d007      	beq.n	8006d40 <checkAktifCalisma+0x938>
 8006d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d34:	4889      	ldr	r0, [pc, #548]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006d36:	f002 ff6f 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d115      	bne.n	8006d6c <checkAktifCalisma+0x964>
 8006d40:	4b88      	ldr	r3, [pc, #544]	; (8006f64 <checkAktifCalisma+0xb5c>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d011      	beq.n	8006d6c <checkAktifCalisma+0x964>
 8006d48:	4b87      	ldr	r3, [pc, #540]	; (8006f68 <checkAktifCalisma+0xb60>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00d      	beq.n	8006d6c <checkAktifCalisma+0x964>
 8006d50:	4b86      	ldr	r3, [pc, #536]	; (8006f6c <checkAktifCalisma+0xb64>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	f083 0301 	eor.w	r3, r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d006      	beq.n	8006d6c <checkAktifCalisma+0x964>
			timer2=millis;
 8006d5e:	4b84      	ldr	r3, [pc, #528]	; (8006f70 <checkAktifCalisma+0xb68>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a84      	ldr	r2, [pc, #528]	; (8006f74 <checkAktifCalisma+0xb6c>)
 8006d64:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006d66:	4b81      	ldr	r3, [pc, #516]	; (8006f6c <checkAktifCalisma+0xb64>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006d6c:	4b80      	ldr	r3, [pc, #512]	; (8006f70 <checkAktifCalisma+0xb68>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4b80      	ldr	r3, [pc, #512]	; (8006f74 <checkAktifCalisma+0xb6c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	4a80      	ldr	r2, [pc, #512]	; (8006f78 <checkAktifCalisma+0xb70>)
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d303      	bcc.n	8006d86 <checkAktifCalisma+0x97e>
 8006d7e:	4b7b      	ldr	r3, [pc, #492]	; (8006f6c <checkAktifCalisma+0xb64>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10d      	bne.n	8006da2 <checkAktifCalisma+0x99a>
 8006d86:	4b77      	ldr	r3, [pc, #476]	; (8006f64 <checkAktifCalisma+0xb5c>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f083 0301 	eor.w	r3, r3, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <checkAktifCalisma+0x99a>
 8006d94:	4b74      	ldr	r3, [pc, #464]	; (8006f68 <checkAktifCalisma+0xb60>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f083 0301 	eor.w	r3, r3, #1
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006da2:	2200      	movs	r2, #0
 8006da4:	2110      	movs	r1, #16
 8006da6:	486d      	ldr	r0, [pc, #436]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006da8:	f002 ff4d 	bl	8009c46 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006dac:	4b6c      	ldr	r3, [pc, #432]	; (8006f60 <checkAktifCalisma+0xb58>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006db2:	4b6e      	ldr	r3, [pc, #440]	; (8006f6c <checkAktifCalisma+0xb64>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dbc:	486f      	ldr	r0, [pc, #444]	; (8006f7c <checkAktifCalisma+0xb74>)
 8006dbe:	f002 ff2b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d120      	bne.n	8006e0a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dcc:	486b      	ldr	r0, [pc, #428]	; (8006f7c <checkAktifCalisma+0xb74>)
 8006dce:	f002 ff23 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d118      	bne.n	8006e0a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006dd8:	2104      	movs	r1, #4
 8006dda:	4868      	ldr	r0, [pc, #416]	; (8006f7c <checkAktifCalisma+0xb74>)
 8006ddc:	f002 ff1c 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d111      	bne.n	8006e0a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006de6:	2102      	movs	r1, #2
 8006de8:	4864      	ldr	r0, [pc, #400]	; (8006f7c <checkAktifCalisma+0xb74>)
 8006dea:	f002 ff15 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006df4:	2101      	movs	r1, #1
 8006df6:	4861      	ldr	r0, [pc, #388]	; (8006f7c <checkAktifCalisma+0xb74>)
 8006df8:	f002 ff0e 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <checkAktifCalisma+0xa02>
			makineStop=1;
 8006e02:	4b5f      	ldr	r3, [pc, #380]	; (8006f80 <checkAktifCalisma+0xb78>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e002      	b.n	8006e10 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006e0a:	4b5d      	ldr	r3, [pc, #372]	; (8006f80 <checkAktifCalisma+0xb78>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006e10:	4b5c      	ldr	r3, [pc, #368]	; (8006f84 <checkAktifCalisma+0xb7c>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d144      	bne.n	8006ea2 <checkAktifCalisma+0xa9a>
 8006e18:	4b5b      	ldr	r3, [pc, #364]	; (8006f88 <checkAktifCalisma+0xb80>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d003      	beq.n	8006e28 <checkAktifCalisma+0xa20>
 8006e20:	4b59      	ldr	r3, [pc, #356]	; (8006f88 <checkAktifCalisma+0xb80>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d13c      	bne.n	8006ea2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006e28:	2180      	movs	r1, #128	; 0x80
 8006e2a:	484c      	ldr	r0, [pc, #304]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006e2c:	f002 fef4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <checkAktifCalisma+0xa36>
 8006e36:	4b55      	ldr	r3, [pc, #340]	; (8006f8c <checkAktifCalisma+0xb84>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00b      	beq.n	8006e56 <checkAktifCalisma+0xa4e>
 8006e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e42:	484e      	ldr	r0, [pc, #312]	; (8006f7c <checkAktifCalisma+0xb74>)
 8006e44:	f002 fee8 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d129      	bne.n	8006ea2 <checkAktifCalisma+0xa9a>
 8006e4e:	4b4f      	ldr	r3, [pc, #316]	; (8006f8c <checkAktifCalisma+0xb84>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d125      	bne.n	8006ea2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006e56:	2104      	movs	r1, #4
 8006e58:	4840      	ldr	r0, [pc, #256]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006e5a:	f002 fedd 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d003      	beq.n	8006e6c <checkAktifCalisma+0xa64>
 8006e64:	4b4a      	ldr	r3, [pc, #296]	; (8006f90 <checkAktifCalisma+0xb88>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11a      	bne.n	8006ea2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006e6c:	2102      	movs	r1, #2
 8006e6e:	483b      	ldr	r0, [pc, #236]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006e70:	f002 fed2 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d113      	bne.n	8006ea2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006e7a:	4b46      	ldr	r3, [pc, #280]	; (8006f94 <checkAktifCalisma+0xb8c>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	f083 0301 	eor.w	r3, r3, #1
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00c      	beq.n	8006ea2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006e88:	4b3d      	ldr	r3, [pc, #244]	; (8006f80 <checkAktifCalisma+0xb78>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006e90:	4b41      	ldr	r3, [pc, #260]	; (8006f98 <checkAktifCalisma+0xb90>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006e96:	4b36      	ldr	r3, [pc, #216]	; (8006f70 <checkAktifCalisma+0xb68>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a40      	ldr	r2, [pc, #256]	; (8006f9c <checkAktifCalisma+0xb94>)
 8006e9c:	6013      	str	r3, [r2, #0]
			bekle();
 8006e9e:	f7ff f87d 	bl	8005f9c <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006ea2:	4b33      	ldr	r3, [pc, #204]	; (8006f70 <checkAktifCalisma+0xb68>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4b3d      	ldr	r3, [pc, #244]	; (8006f9c <checkAktifCalisma+0xb94>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	4a3c      	ldr	r2, [pc, #240]	; (8006fa0 <checkAktifCalisma+0xb98>)
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d211      	bcs.n	8006ed8 <checkAktifCalisma+0xad0>
 8006eb4:	2104      	movs	r1, #4
 8006eb6:	4829      	ldr	r0, [pc, #164]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006eb8:	f002 feae 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <checkAktifCalisma+0xad0>
 8006ec2:	4b33      	ldr	r3, [pc, #204]	; (8006f90 <checkAktifCalisma+0xb88>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <checkAktifCalisma+0xad0>
 8006eca:	4b2d      	ldr	r3, [pc, #180]	; (8006f80 <checkAktifCalisma+0xb78>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f083 0301 	eor.w	r3, r3, #1
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006ed8:	4b2f      	ldr	r3, [pc, #188]	; (8006f98 <checkAktifCalisma+0xb90>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006ede:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <checkAktifCalisma+0xb7c>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d160      	bne.n	8006fa8 <checkAktifCalisma+0xba0>
 8006ee6:	4b28      	ldr	r3, [pc, #160]	; (8006f88 <checkAktifCalisma+0xb80>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d003      	beq.n	8006ef6 <checkAktifCalisma+0xaee>
 8006eee:	4b26      	ldr	r3, [pc, #152]	; (8006f88 <checkAktifCalisma+0xb80>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d158      	bne.n	8006fa8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006ef6:	2104      	movs	r1, #4
 8006ef8:	4818      	ldr	r0, [pc, #96]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006efa:	f002 fe8d 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d003      	beq.n	8006f0c <checkAktifCalisma+0xb04>
 8006f04:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <checkAktifCalisma+0xb88>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d14d      	bne.n	8006fa8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	4813      	ldr	r0, [pc, #76]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006f10:	f002 fe82 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d146      	bne.n	8006fa8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f1a:	2180      	movs	r1, #128	; 0x80
 8006f1c:	480f      	ldr	r0, [pc, #60]	; (8006f5c <checkAktifCalisma+0xb54>)
 8006f1e:	f002 fe7b 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d103      	bne.n	8006f30 <checkAktifCalisma+0xb28>
 8006f28:	4b18      	ldr	r3, [pc, #96]	; (8006f8c <checkAktifCalisma+0xb84>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <checkAktifCalisma+0xb40>
 8006f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f34:	4811      	ldr	r0, [pc, #68]	; (8006f7c <checkAktifCalisma+0xb74>)
 8006f36:	f002 fe6f 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d133      	bne.n	8006fa8 <checkAktifCalisma+0xba0>
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <checkAktifCalisma+0xb84>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d12f      	bne.n	8006fa8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006f48:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <checkAktifCalisma+0xb78>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d02b      	beq.n	8006fa8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006f50:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <checkAktifCalisma+0xb9c>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e02a      	b.n	8006fae <checkAktifCalisma+0xba6>
 8006f58:	20000c80 	.word	0x20000c80
 8006f5c:	40011000 	.word	0x40011000
 8006f60:	20000c84 	.word	0x20000c84
 8006f64:	20000c9b 	.word	0x20000c9b
 8006f68:	20000c9c 	.word	0x20000c9c
 8006f6c:	20000c7c 	.word	0x20000c7c
 8006f70:	20000bd4 	.word	0x20000bd4
 8006f74:	20000be0 	.word	0x20000be0
 8006f78:	20000c5f 	.word	0x20000c5f
 8006f7c:	40010c00 	.word	0x40010c00
 8006f80:	20000c8b 	.word	0x20000c8b
 8006f84:	20000c52 	.word	0x20000c52
 8006f88:	20000c51 	.word	0x20000c51
 8006f8c:	20000c55 	.word	0x20000c55
 8006f90:	20000c4f 	.word	0x20000c4f
 8006f94:	20000c78 	.word	0x20000c78
 8006f98:	20000c8c 	.word	0x20000c8c
 8006f9c:	20000bd8 	.word	0x20000bd8
 8006fa0:	20000c62 	.word	0x20000c62
 8006fa4:	20000c8d 	.word	0x20000c8d
		} else {
			kapi1butonkontrol=0;
 8006fa8:	4b8b      	ldr	r3, [pc, #556]	; (80071d8 <checkAktifCalisma+0xdd0>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fae:	4b8b      	ldr	r3, [pc, #556]	; (80071dc <checkAktifCalisma+0xdd4>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d121      	bne.n	8006ffa <checkAktifCalisma+0xbf2>
 8006fb6:	4b8a      	ldr	r3, [pc, #552]	; (80071e0 <checkAktifCalisma+0xdd8>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d003      	beq.n	8006fc6 <checkAktifCalisma+0xbbe>
 8006fbe:	4b88      	ldr	r3, [pc, #544]	; (80071e0 <checkAktifCalisma+0xdd8>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d119      	bne.n	8006ffa <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006fc6:	2104      	movs	r1, #4
 8006fc8:	4886      	ldr	r0, [pc, #536]	; (80071e4 <checkAktifCalisma+0xddc>)
 8006fca:	f002 fe25 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d003      	beq.n	8006fdc <checkAktifCalisma+0xbd4>
 8006fd4:	4b84      	ldr	r3, [pc, #528]	; (80071e8 <checkAktifCalisma+0xde0>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10e      	bne.n	8006ffa <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4881      	ldr	r0, [pc, #516]	; (80071e4 <checkAktifCalisma+0xddc>)
 8006fe0:	f002 fe1a 	bl	8009c18 <HAL_GPIO_ReadPin>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d107      	bne.n	8006ffa <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006fea:	4b80      	ldr	r3, [pc, #512]	; (80071ec <checkAktifCalisma+0xde4>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006ff2:	4b7f      	ldr	r3, [pc, #508]	; (80071f0 <checkAktifCalisma+0xde8>)
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	e002      	b.n	8007000 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006ffa:	4b7d      	ldr	r3, [pc, #500]	; (80071f0 <checkAktifCalisma+0xde8>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8007000:	4b75      	ldr	r3, [pc, #468]	; (80071d8 <checkAktifCalisma+0xdd0>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <checkAktifCalisma+0xc10>
 8007008:	4b79      	ldr	r3, [pc, #484]	; (80071f0 <checkAktifCalisma+0xde8>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <checkAktifCalisma+0xc10>
 8007010:	4b78      	ldr	r3, [pc, #480]	; (80071f4 <checkAktifCalisma+0xdec>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007018:	2201      	movs	r2, #1
 800701a:	2180      	movs	r1, #128	; 0x80
 800701c:	4876      	ldr	r0, [pc, #472]	; (80071f8 <checkAktifCalisma+0xdf0>)
 800701e:	f002 fe12 	bl	8009c46 <HAL_GPIO_WritePin>
 8007022:	e004      	b.n	800702e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007024:	2200      	movs	r2, #0
 8007026:	2180      	movs	r1, #128	; 0x80
 8007028:	4873      	ldr	r0, [pc, #460]	; (80071f8 <checkAktifCalisma+0xdf0>)
 800702a:	f002 fe0c 	bl	8009c46 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800702e:	4b73      	ldr	r3, [pc, #460]	; (80071fc <checkAktifCalisma+0xdf4>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d141      	bne.n	80070ba <checkAktifCalisma+0xcb2>
 8007036:	4b6a      	ldr	r3, [pc, #424]	; (80071e0 <checkAktifCalisma+0xdd8>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d003      	beq.n	8007046 <checkAktifCalisma+0xc3e>
 800703e:	4b68      	ldr	r3, [pc, #416]	; (80071e0 <checkAktifCalisma+0xdd8>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b03      	cmp	r3, #3
 8007044:	d139      	bne.n	80070ba <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800704a:	4866      	ldr	r0, [pc, #408]	; (80071e4 <checkAktifCalisma+0xddc>)
 800704c:	f002 fde4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <checkAktifCalisma+0xc56>
 8007056:	4b6a      	ldr	r3, [pc, #424]	; (8007200 <checkAktifCalisma+0xdf8>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <checkAktifCalisma+0xc6e>
 800705e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007062:	4868      	ldr	r0, [pc, #416]	; (8007204 <checkAktifCalisma+0xdfc>)
 8007064:	f002 fdd8 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d125      	bne.n	80070ba <checkAktifCalisma+0xcb2>
 800706e:	4b64      	ldr	r3, [pc, #400]	; (8007200 <checkAktifCalisma+0xdf8>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d121      	bne.n	80070ba <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007076:	2102      	movs	r1, #2
 8007078:	485a      	ldr	r0, [pc, #360]	; (80071e4 <checkAktifCalisma+0xddc>)
 800707a:	f002 fdcd 	bl	8009c18 <HAL_GPIO_ReadPin>
 800707e:	4603      	mov	r3, r0
 8007080:	2b01      	cmp	r3, #1
 8007082:	d11a      	bne.n	80070ba <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007084:	2104      	movs	r1, #4
 8007086:	4857      	ldr	r0, [pc, #348]	; (80071e4 <checkAktifCalisma+0xddc>)
 8007088:	f002 fdc6 	bl	8009c18 <HAL_GPIO_ReadPin>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d113      	bne.n	80070ba <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8007092:	4b56      	ldr	r3, [pc, #344]	; (80071ec <checkAktifCalisma+0xde4>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00f      	beq.n	80070ba <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800709a:	4b5b      	ldr	r3, [pc, #364]	; (8007208 <checkAktifCalisma+0xe00>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	f083 0301 	eor.w	r3, r3, #1
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80070a8:	4b58      	ldr	r3, [pc, #352]	; (800720c <checkAktifCalisma+0xe04>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80070ae:	4b58      	ldr	r3, [pc, #352]	; (8007210 <checkAktifCalisma+0xe08>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a58      	ldr	r2, [pc, #352]	; (8007214 <checkAktifCalisma+0xe0c>)
 80070b4:	6013      	str	r3, [r2, #0]
			bekle();
 80070b6:	f7fe ff71 	bl	8005f9c <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80070ba:	4b55      	ldr	r3, [pc, #340]	; (8007210 <checkAktifCalisma+0xe08>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b55      	ldr	r3, [pc, #340]	; (8007214 <checkAktifCalisma+0xe0c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	4a54      	ldr	r2, [pc, #336]	; (8007218 <checkAktifCalisma+0xe10>)
 80070c6:	7812      	ldrb	r2, [r2, #0]
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d20d      	bcs.n	80070e8 <checkAktifCalisma+0xce0>
 80070cc:	2102      	movs	r1, #2
 80070ce:	4845      	ldr	r0, [pc, #276]	; (80071e4 <checkAktifCalisma+0xddc>)
 80070d0:	f002 fda2 	bl	8009c18 <HAL_GPIO_ReadPin>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d006      	beq.n	80070e8 <checkAktifCalisma+0xce0>
 80070da:	4b44      	ldr	r3, [pc, #272]	; (80071ec <checkAktifCalisma+0xde4>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f083 0301 	eor.w	r3, r3, #1
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80070e8:	4b48      	ldr	r3, [pc, #288]	; (800720c <checkAktifCalisma+0xe04>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070ee:	4b43      	ldr	r3, [pc, #268]	; (80071fc <checkAktifCalisma+0xdf4>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d135      	bne.n	8007162 <checkAktifCalisma+0xd5a>
 80070f6:	4b3a      	ldr	r3, [pc, #232]	; (80071e0 <checkAktifCalisma+0xdd8>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d003      	beq.n	8007106 <checkAktifCalisma+0xcfe>
 80070fe:	4b38      	ldr	r3, [pc, #224]	; (80071e0 <checkAktifCalisma+0xdd8>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b03      	cmp	r3, #3
 8007104:	d12d      	bne.n	8007162 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800710a:	4836      	ldr	r0, [pc, #216]	; (80071e4 <checkAktifCalisma+0xddc>)
 800710c:	f002 fd84 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <checkAktifCalisma+0xd16>
 8007116:	4b3a      	ldr	r3, [pc, #232]	; (8007200 <checkAktifCalisma+0xdf8>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <checkAktifCalisma+0xd2e>
 800711e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007122:	4838      	ldr	r0, [pc, #224]	; (8007204 <checkAktifCalisma+0xdfc>)
 8007124:	f002 fd78 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d119      	bne.n	8007162 <checkAktifCalisma+0xd5a>
 800712e:	4b34      	ldr	r3, [pc, #208]	; (8007200 <checkAktifCalisma+0xdf8>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d115      	bne.n	8007162 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007136:	2102      	movs	r1, #2
 8007138:	482a      	ldr	r0, [pc, #168]	; (80071e4 <checkAktifCalisma+0xddc>)
 800713a:	f002 fd6d 	bl	8009c18 <HAL_GPIO_ReadPin>
 800713e:	4603      	mov	r3, r0
 8007140:	2b01      	cmp	r3, #1
 8007142:	d10e      	bne.n	8007162 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007144:	2104      	movs	r1, #4
 8007146:	4827      	ldr	r0, [pc, #156]	; (80071e4 <checkAktifCalisma+0xddc>)
 8007148:	f002 fd66 	bl	8009c18 <HAL_GPIO_ReadPin>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d107      	bne.n	8007162 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8007152:	4b26      	ldr	r3, [pc, #152]	; (80071ec <checkAktifCalisma+0xde4>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800715a:	4b30      	ldr	r3, [pc, #192]	; (800721c <checkAktifCalisma+0xe14>)
 800715c:	2201      	movs	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	e002      	b.n	8007168 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8007162:	4b2e      	ldr	r3, [pc, #184]	; (800721c <checkAktifCalisma+0xe14>)
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007168:	4b24      	ldr	r3, [pc, #144]	; (80071fc <checkAktifCalisma+0xdf4>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d11d      	bne.n	80071ac <checkAktifCalisma+0xda4>
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <checkAktifCalisma+0xdd8>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d003      	beq.n	8007180 <checkAktifCalisma+0xd78>
 8007178:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <checkAktifCalisma+0xdd8>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d115      	bne.n	80071ac <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007180:	2102      	movs	r1, #2
 8007182:	4818      	ldr	r0, [pc, #96]	; (80071e4 <checkAktifCalisma+0xddc>)
 8007184:	f002 fd48 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d10e      	bne.n	80071ac <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800718e:	2104      	movs	r1, #4
 8007190:	4814      	ldr	r0, [pc, #80]	; (80071e4 <checkAktifCalisma+0xddc>)
 8007192:	f002 fd41 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d107      	bne.n	80071ac <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 800719c:	4b13      	ldr	r3, [pc, #76]	; (80071ec <checkAktifCalisma+0xde4>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80071a4:	4b1e      	ldr	r3, [pc, #120]	; (8007220 <checkAktifCalisma+0xe18>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80071ac:	4b1c      	ldr	r3, [pc, #112]	; (8007220 <checkAktifCalisma+0xe18>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80071b2:	4b1a      	ldr	r3, [pc, #104]	; (800721c <checkAktifCalisma+0xe14>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d107      	bne.n	80071ca <checkAktifCalisma+0xdc2>
 80071ba:	4b19      	ldr	r3, [pc, #100]	; (8007220 <checkAktifCalisma+0xe18>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d103      	bne.n	80071ca <checkAktifCalisma+0xdc2>
 80071c2:	4b12      	ldr	r3, [pc, #72]	; (800720c <checkAktifCalisma+0xe04>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d02c      	beq.n	8007224 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80071ca:	2201      	movs	r2, #1
 80071cc:	2140      	movs	r1, #64	; 0x40
 80071ce:	480a      	ldr	r0, [pc, #40]	; (80071f8 <checkAktifCalisma+0xdf0>)
 80071d0:	f002 fd39 	bl	8009c46 <HAL_GPIO_WritePin>
 80071d4:	e02b      	b.n	800722e <checkAktifCalisma+0xe26>
 80071d6:	bf00      	nop
 80071d8:	20000c8d 	.word	0x20000c8d
 80071dc:	20000c52 	.word	0x20000c52
 80071e0:	20000c51 	.word	0x20000c51
 80071e4:	40011000 	.word	0x40011000
 80071e8:	20000c4f 	.word	0x20000c4f
 80071ec:	20000c8b 	.word	0x20000c8b
 80071f0:	20000c8e 	.word	0x20000c8e
 80071f4:	20000c8c 	.word	0x20000c8c
 80071f8:	40010800 	.word	0x40010800
 80071fc:	20000c53 	.word	0x20000c53
 8007200:	20000c55 	.word	0x20000c55
 8007204:	40010c00 	.word	0x40010c00
 8007208:	20000c78 	.word	0x20000c78
 800720c:	20000c8f 	.word	0x20000c8f
 8007210:	20000bd4 	.word	0x20000bd4
 8007214:	20000bd8 	.word	0x20000bd8
 8007218:	20000c63 	.word	0x20000c63
 800721c:	20000c90 	.word	0x20000c90
 8007220:	20000c91 	.word	0x20000c91
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007224:	2200      	movs	r2, #0
 8007226:	2140      	movs	r1, #64	; 0x40
 8007228:	488d      	ldr	r0, [pc, #564]	; (8007460 <checkAktifCalisma+0x1058>)
 800722a:	f002 fd0c 	bl	8009c46 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800722e:	4b8d      	ldr	r3, [pc, #564]	; (8007464 <checkAktifCalisma+0x105c>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <checkAktifCalisma+0xe36>
 8007236:	4b8b      	ldr	r3, [pc, #556]	; (8007464 <checkAktifCalisma+0x105c>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d115      	bne.n	800726a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800723e:	2104      	movs	r1, #4
 8007240:	4889      	ldr	r0, [pc, #548]	; (8007468 <checkAktifCalisma+0x1060>)
 8007242:	f002 fce9 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007246:	4603      	mov	r3, r0
 8007248:	2b01      	cmp	r3, #1
 800724a:	d003      	beq.n	8007254 <checkAktifCalisma+0xe4c>
 800724c:	4b87      	ldr	r3, [pc, #540]	; (800746c <checkAktifCalisma+0x1064>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007254:	2102      	movs	r1, #2
 8007256:	4884      	ldr	r0, [pc, #528]	; (8007468 <checkAktifCalisma+0x1060>)
 8007258:	f002 fcde 	bl	8009c18 <HAL_GPIO_ReadPin>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d103      	bne.n	800726a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007262:	4b83      	ldr	r3, [pc, #524]	; (8007470 <checkAktifCalisma+0x1068>)
 8007264:	2201      	movs	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	e002      	b.n	8007270 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800726a:	4b81      	ldr	r3, [pc, #516]	; (8007470 <checkAktifCalisma+0x1068>)
 800726c:	2200      	movs	r2, #0
 800726e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007270:	4b7c      	ldr	r3, [pc, #496]	; (8007464 <checkAktifCalisma+0x105c>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d003      	beq.n	8007280 <checkAktifCalisma+0xe78>
 8007278:	4b7a      	ldr	r3, [pc, #488]	; (8007464 <checkAktifCalisma+0x105c>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d111      	bne.n	80072a4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007280:	2102      	movs	r1, #2
 8007282:	4879      	ldr	r0, [pc, #484]	; (8007468 <checkAktifCalisma+0x1060>)
 8007284:	f002 fcc8 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007288:	4603      	mov	r3, r0
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10a      	bne.n	80072a4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800728e:	2104      	movs	r1, #4
 8007290:	4875      	ldr	r0, [pc, #468]	; (8007468 <checkAktifCalisma+0x1060>)
 8007292:	f002 fcc1 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 800729c:	4b75      	ldr	r3, [pc, #468]	; (8007474 <checkAktifCalisma+0x106c>)
 800729e:	2201      	movs	r2, #1
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	e002      	b.n	80072aa <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80072a4:	4b73      	ldr	r3, [pc, #460]	; (8007474 <checkAktifCalisma+0x106c>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80072aa:	4b71      	ldr	r3, [pc, #452]	; (8007470 <checkAktifCalisma+0x1068>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00f      	beq.n	80072d2 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80072b2:	4b71      	ldr	r3, [pc, #452]	; (8007478 <checkAktifCalisma+0x1070>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d10b      	bne.n	80072d2 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80072ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072be:	486f      	ldr	r0, [pc, #444]	; (800747c <checkAktifCalisma+0x1074>)
 80072c0:	f002 fcaa 	bl	8009c18 <HAL_GPIO_ReadPin>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80072ca:	4b6d      	ldr	r3, [pc, #436]	; (8007480 <checkAktifCalisma+0x1078>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e002      	b.n	80072d8 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80072d2:	4b6b      	ldr	r3, [pc, #428]	; (8007480 <checkAktifCalisma+0x1078>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80072d8:	4b66      	ldr	r3, [pc, #408]	; (8007474 <checkAktifCalisma+0x106c>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00f      	beq.n	8007300 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80072e0:	4b65      	ldr	r3, [pc, #404]	; (8007478 <checkAktifCalisma+0x1070>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d10b      	bne.n	8007300 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80072e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072ec:	4863      	ldr	r0, [pc, #396]	; (800747c <checkAktifCalisma+0x1074>)
 80072ee:	f002 fc93 	bl	8009c18 <HAL_GPIO_ReadPin>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80072f8:	4b62      	ldr	r3, [pc, #392]	; (8007484 <checkAktifCalisma+0x107c>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	e002      	b.n	8007306 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007300:	4b60      	ldr	r3, [pc, #384]	; (8007484 <checkAktifCalisma+0x107c>)
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007306:	4b60      	ldr	r3, [pc, #384]	; (8007488 <checkAktifCalisma+0x1080>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d137      	bne.n	800737e <checkAktifCalisma+0xf76>
 800730e:	4b5f      	ldr	r3, [pc, #380]	; (800748c <checkAktifCalisma+0x1084>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d003      	beq.n	800731e <checkAktifCalisma+0xf16>
 8007316:	4b5d      	ldr	r3, [pc, #372]	; (800748c <checkAktifCalisma+0x1084>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d12f      	bne.n	800737e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800731e:	4b54      	ldr	r3, [pc, #336]	; (8007470 <checkAktifCalisma+0x1068>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d103      	bne.n	800732e <checkAktifCalisma+0xf26>
 8007326:	4b53      	ldr	r3, [pc, #332]	; (8007474 <checkAktifCalisma+0x106c>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d027      	beq.n	800737e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800732e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007332:	484d      	ldr	r0, [pc, #308]	; (8007468 <checkAktifCalisma+0x1060>)
 8007334:	f002 fc70 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d103      	bne.n	8007346 <checkAktifCalisma+0xf3e>
 800733e:	4b4e      	ldr	r3, [pc, #312]	; (8007478 <checkAktifCalisma+0x1070>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007346:	4b4e      	ldr	r3, [pc, #312]	; (8007480 <checkAktifCalisma+0x1078>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <checkAktifCalisma+0xf4e>
 800734e:	4b4d      	ldr	r3, [pc, #308]	; (8007484 <checkAktifCalisma+0x107c>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d013      	beq.n	800737e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007356:	4b4e      	ldr	r3, [pc, #312]	; (8007490 <checkAktifCalisma+0x1088>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00f      	beq.n	800737e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800735e:	4b4d      	ldr	r3, [pc, #308]	; (8007494 <checkAktifCalisma+0x108c>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f083 0301 	eor.w	r3, r3, #1
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d008      	beq.n	800737e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 800736c:	4b4a      	ldr	r3, [pc, #296]	; (8007498 <checkAktifCalisma+0x1090>)
 800736e:	2201      	movs	r2, #1
 8007370:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007372:	4b4a      	ldr	r3, [pc, #296]	; (800749c <checkAktifCalisma+0x1094>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a4a      	ldr	r2, [pc, #296]	; (80074a0 <checkAktifCalisma+0x1098>)
 8007378:	6013      	str	r3, [r2, #0]
			bekle();
 800737a:	f7fe fe0f 	bl	8005f9c <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800737e:	4b47      	ldr	r3, [pc, #284]	; (800749c <checkAktifCalisma+0x1094>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b47      	ldr	r3, [pc, #284]	; (80074a0 <checkAktifCalisma+0x1098>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	4a46      	ldr	r2, [pc, #280]	; (80074a4 <checkAktifCalisma+0x109c>)
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	4293      	cmp	r3, r2
 800738e:	d214      	bcs.n	80073ba <checkAktifCalisma+0xfb2>
 8007390:	4b37      	ldr	r3, [pc, #220]	; (8007470 <checkAktifCalisma+0x1068>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f083 0301 	eor.w	r3, r3, #1
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d006      	beq.n	80073ac <checkAktifCalisma+0xfa4>
 800739e:	4b35      	ldr	r3, [pc, #212]	; (8007474 <checkAktifCalisma+0x106c>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	f083 0301 	eor.w	r3, r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <checkAktifCalisma+0xfb2>
 80073ac:	4b38      	ldr	r3, [pc, #224]	; (8007490 <checkAktifCalisma+0x1088>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f083 0301 	eor.w	r3, r3, #1
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80073ba:	4b37      	ldr	r3, [pc, #220]	; (8007498 <checkAktifCalisma+0x1090>)
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80073c0:	4b31      	ldr	r3, [pc, #196]	; (8007488 <checkAktifCalisma+0x1080>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d12b      	bne.n	8007420 <checkAktifCalisma+0x1018>
 80073c8:	4b30      	ldr	r3, [pc, #192]	; (800748c <checkAktifCalisma+0x1084>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d003      	beq.n	80073d8 <checkAktifCalisma+0xfd0>
 80073d0:	4b2e      	ldr	r3, [pc, #184]	; (800748c <checkAktifCalisma+0x1084>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d123      	bne.n	8007420 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80073d8:	4b25      	ldr	r3, [pc, #148]	; (8007470 <checkAktifCalisma+0x1068>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <checkAktifCalisma+0xfe0>
 80073e0:	4b24      	ldr	r3, [pc, #144]	; (8007474 <checkAktifCalisma+0x106c>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01b      	beq.n	8007420 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80073e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073ec:	481e      	ldr	r0, [pc, #120]	; (8007468 <checkAktifCalisma+0x1060>)
 80073ee:	f002 fc13 	bl	8009c18 <HAL_GPIO_ReadPin>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <checkAktifCalisma+0xff8>
 80073f8:	4b1f      	ldr	r3, [pc, #124]	; (8007478 <checkAktifCalisma+0x1070>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d007      	beq.n	8007410 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007400:	4b1f      	ldr	r3, [pc, #124]	; (8007480 <checkAktifCalisma+0x1078>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <checkAktifCalisma+0x1008>
 8007408:	4b1e      	ldr	r3, [pc, #120]	; (8007484 <checkAktifCalisma+0x107c>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007410:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <checkAktifCalisma+0x1088>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007418:	4b23      	ldr	r3, [pc, #140]	; (80074a8 <checkAktifCalisma+0x10a0>)
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	e002      	b.n	8007426 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007420:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <checkAktifCalisma+0x10a0>)
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007426:	4b18      	ldr	r3, [pc, #96]	; (8007488 <checkAktifCalisma+0x1080>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b02      	cmp	r3, #2
 800742c:	d140      	bne.n	80074b0 <checkAktifCalisma+0x10a8>
 800742e:	4b17      	ldr	r3, [pc, #92]	; (800748c <checkAktifCalisma+0x1084>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d003      	beq.n	800743e <checkAktifCalisma+0x1036>
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <checkAktifCalisma+0x1084>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b03      	cmp	r3, #3
 800743c:	d138      	bne.n	80074b0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800743e:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <checkAktifCalisma+0x1068>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <checkAktifCalisma+0x1046>
 8007446:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <checkAktifCalisma+0x106c>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d030      	beq.n	80074b0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800744e:	4b10      	ldr	r3, [pc, #64]	; (8007490 <checkAktifCalisma+0x1088>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d02c      	beq.n	80074b0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007456:	4b15      	ldr	r3, [pc, #84]	; (80074ac <checkAktifCalisma+0x10a4>)
 8007458:	2201      	movs	r2, #1
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	e02b      	b.n	80074b6 <checkAktifCalisma+0x10ae>
 800745e:	bf00      	nop
 8007460:	40010800 	.word	0x40010800
 8007464:	20000c56 	.word	0x20000c56
 8007468:	40011000 	.word	0x40011000
 800746c:	20000c4f 	.word	0x20000c4f
 8007470:	20000c95 	.word	0x20000c95
 8007474:	20000c96 	.word	0x20000c96
 8007478:	20000c55 	.word	0x20000c55
 800747c:	40010c00 	.word	0x40010c00
 8007480:	20000ca5 	.word	0x20000ca5
 8007484:	20000ca6 	.word	0x20000ca6
 8007488:	20000c54 	.word	0x20000c54
 800748c:	20000c51 	.word	0x20000c51
 8007490:	20000c8b 	.word	0x20000c8b
 8007494:	20000c78 	.word	0x20000c78
 8007498:	20000c92 	.word	0x20000c92
 800749c:	20000bd4 	.word	0x20000bd4
 80074a0:	20000bd8 	.word	0x20000bd8
 80074a4:	20000c64 	.word	0x20000c64
 80074a8:	20000c93 	.word	0x20000c93
 80074ac:	20000c94 	.word	0x20000c94
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80074b0:	4b89      	ldr	r3, [pc, #548]	; (80076d8 <checkAktifCalisma+0x12d0>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80074b6:	4b89      	ldr	r3, [pc, #548]	; (80076dc <checkAktifCalisma+0x12d4>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d107      	bne.n	80074ce <checkAktifCalisma+0x10c6>
 80074be:	4b88      	ldr	r3, [pc, #544]	; (80076e0 <checkAktifCalisma+0x12d8>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <checkAktifCalisma+0x10c6>
 80074c6:	4b84      	ldr	r3, [pc, #528]	; (80076d8 <checkAktifCalisma+0x12d0>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80074ce:	2201      	movs	r2, #1
 80074d0:	2120      	movs	r1, #32
 80074d2:	4884      	ldr	r0, [pc, #528]	; (80076e4 <checkAktifCalisma+0x12dc>)
 80074d4:	f002 fbb7 	bl	8009c46 <HAL_GPIO_WritePin>
 80074d8:	e004      	b.n	80074e4 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80074da:	2200      	movs	r2, #0
 80074dc:	2120      	movs	r1, #32
 80074de:	4881      	ldr	r0, [pc, #516]	; (80076e4 <checkAktifCalisma+0x12dc>)
 80074e0:	f002 fbb1 	bl	8009c46 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80074e4:	4b80      	ldr	r3, [pc, #512]	; (80076e8 <checkAktifCalisma+0x12e0>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00e      	beq.n	800750a <checkAktifCalisma+0x1102>
 80074ec:	2102      	movs	r1, #2
 80074ee:	487f      	ldr	r0, [pc, #508]	; (80076ec <checkAktifCalisma+0x12e4>)
 80074f0:	f002 fb92 	bl	8009c18 <HAL_GPIO_ReadPin>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d107      	bne.n	800750a <checkAktifCalisma+0x1102>
 80074fa:	4b7d      	ldr	r3, [pc, #500]	; (80076f0 <checkAktifCalisma+0x12e8>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <checkAktifCalisma+0x1102>
 8007502:	4b7c      	ldr	r3, [pc, #496]	; (80076f4 <checkAktifCalisma+0x12ec>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d112      	bne.n	8007530 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800750a:	4b7b      	ldr	r3, [pc, #492]	; (80076f8 <checkAktifCalisma+0x12f0>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d066      	beq.n	80075e0 <checkAktifCalisma+0x11d8>
 8007512:	2104      	movs	r1, #4
 8007514:	4875      	ldr	r0, [pc, #468]	; (80076ec <checkAktifCalisma+0x12e4>)
 8007516:	f002 fb7f 	bl	8009c18 <HAL_GPIO_ReadPin>
 800751a:	4603      	mov	r3, r0
 800751c:	2b01      	cmp	r3, #1
 800751e:	d15f      	bne.n	80075e0 <checkAktifCalisma+0x11d8>
 8007520:	4b73      	ldr	r3, [pc, #460]	; (80076f0 <checkAktifCalisma+0x12e8>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d05b      	beq.n	80075e0 <checkAktifCalisma+0x11d8>
 8007528:	4b72      	ldr	r3, [pc, #456]	; (80076f4 <checkAktifCalisma+0x12ec>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d057      	beq.n	80075e0 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007530:	4b72      	ldr	r3, [pc, #456]	; (80076fc <checkAktifCalisma+0x12f4>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	4b70      	ldr	r3, [pc, #448]	; (80076fc <checkAktifCalisma+0x12f4>)
 800753a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 800753c:	4b6f      	ldr	r3, [pc, #444]	; (80076fc <checkAktifCalisma+0x12f4>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b09      	cmp	r3, #9
 8007542:	d908      	bls.n	8007556 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007544:	4b6d      	ldr	r3, [pc, #436]	; (80076fc <checkAktifCalisma+0x12f4>)
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800754a:	4b6d      	ldr	r3, [pc, #436]	; (8007700 <checkAktifCalisma+0x12f8>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	4b6b      	ldr	r3, [pc, #428]	; (8007700 <checkAktifCalisma+0x12f8>)
 8007554:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007556:	4b6a      	ldr	r3, [pc, #424]	; (8007700 <checkAktifCalisma+0x12f8>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b09      	cmp	r3, #9
 800755c:	d908      	bls.n	8007570 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800755e:	4b68      	ldr	r3, [pc, #416]	; (8007700 <checkAktifCalisma+0x12f8>)
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007564:	4b67      	ldr	r3, [pc, #412]	; (8007704 <checkAktifCalisma+0x12fc>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	b2da      	uxtb	r2, r3
 800756c:	4b65      	ldr	r3, [pc, #404]	; (8007704 <checkAktifCalisma+0x12fc>)
 800756e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007570:	4b64      	ldr	r3, [pc, #400]	; (8007704 <checkAktifCalisma+0x12fc>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b09      	cmp	r3, #9
 8007576:	d908      	bls.n	800758a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007578:	4b62      	ldr	r3, [pc, #392]	; (8007704 <checkAktifCalisma+0x12fc>)
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800757e:	4b62      	ldr	r3, [pc, #392]	; (8007708 <checkAktifCalisma+0x1300>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	b2da      	uxtb	r2, r3
 8007586:	4b60      	ldr	r3, [pc, #384]	; (8007708 <checkAktifCalisma+0x1300>)
 8007588:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 800758a:	4b5f      	ldr	r3, [pc, #380]	; (8007708 <checkAktifCalisma+0x1300>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b09      	cmp	r3, #9
 8007590:	d908      	bls.n	80075a4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007592:	4b5d      	ldr	r3, [pc, #372]	; (8007708 <checkAktifCalisma+0x1300>)
 8007594:	2200      	movs	r2, #0
 8007596:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007598:	4b5c      	ldr	r3, [pc, #368]	; (800770c <checkAktifCalisma+0x1304>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	3301      	adds	r3, #1
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	4b5a      	ldr	r3, [pc, #360]	; (800770c <checkAktifCalisma+0x1304>)
 80075a2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80075a4:	4b59      	ldr	r3, [pc, #356]	; (800770c <checkAktifCalisma+0x1304>)
 80075a6:	781a      	ldrb	r2, [r3, #0]
 80075a8:	4b59      	ldr	r3, [pc, #356]	; (8007710 <checkAktifCalisma+0x1308>)
 80075aa:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80075ae:	4b56      	ldr	r3, [pc, #344]	; (8007708 <checkAktifCalisma+0x1300>)
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	4b57      	ldr	r3, [pc, #348]	; (8007710 <checkAktifCalisma+0x1308>)
 80075b4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80075b6:	4b53      	ldr	r3, [pc, #332]	; (8007704 <checkAktifCalisma+0x12fc>)
 80075b8:	781a      	ldrb	r2, [r3, #0]
 80075ba:	4b55      	ldr	r3, [pc, #340]	; (8007710 <checkAktifCalisma+0x1308>)
 80075bc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80075be:	4b50      	ldr	r3, [pc, #320]	; (8007700 <checkAktifCalisma+0x12f8>)
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	4b53      	ldr	r3, [pc, #332]	; (8007710 <checkAktifCalisma+0x1308>)
 80075c4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80075c6:	4b4d      	ldr	r3, [pc, #308]	; (80076fc <checkAktifCalisma+0x12f4>)
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	4b51      	ldr	r3, [pc, #324]	; (8007710 <checkAktifCalisma+0x1308>)
 80075cc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80075ce:	4b51      	ldr	r3, [pc, #324]	; (8007714 <checkAktifCalisma+0x130c>)
 80075d0:	2201      	movs	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80075d4:	4b44      	ldr	r3, [pc, #272]	; (80076e8 <checkAktifCalisma+0x12e0>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80075da:	4b47      	ldr	r3, [pc, #284]	; (80076f8 <checkAktifCalisma+0x12f0>)
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80075e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075e4:	484c      	ldr	r0, [pc, #304]	; (8007718 <checkAktifCalisma+0x1310>)
 80075e6:	f002 fb17 	bl	8009c18 <HAL_GPIO_ReadPin>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d016      	beq.n	800761e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80075f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075f4:	4848      	ldr	r0, [pc, #288]	; (8007718 <checkAktifCalisma+0x1310>)
 80075f6:	f002 fb0f 	bl	8009c18 <HAL_GPIO_ReadPin>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00e      	beq.n	800761e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007604:	4844      	ldr	r0, [pc, #272]	; (8007718 <checkAktifCalisma+0x1310>)
 8007606:	f002 fb07 	bl	8009c18 <HAL_GPIO_ReadPin>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007610:	2140      	movs	r1, #64	; 0x40
 8007612:	4836      	ldr	r0, [pc, #216]	; (80076ec <checkAktifCalisma+0x12e4>)
 8007614:	f002 fb00 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <checkAktifCalisma+0x121e>
			startBasili=1;
 800761e:	4b3f      	ldr	r3, [pc, #252]	; (800771c <checkAktifCalisma+0x1314>)
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e002      	b.n	800762c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007626:	4b3d      	ldr	r3, [pc, #244]	; (800771c <checkAktifCalisma+0x1314>)
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800762c:	4b3b      	ldr	r3, [pc, #236]	; (800771c <checkAktifCalisma+0x1314>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d014      	beq.n	800765e <checkAktifCalisma+0x1256>
 8007634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007638:	4837      	ldr	r0, [pc, #220]	; (8007718 <checkAktifCalisma+0x1310>)
 800763a:	f002 faed 	bl	8009c18 <HAL_GPIO_ReadPin>
 800763e:	4603      	mov	r3, r0
 8007640:	2b01      	cmp	r3, #1
 8007642:	d10c      	bne.n	800765e <checkAktifCalisma+0x1256>
			hataVar=1;
 8007644:	4b36      	ldr	r3, [pc, #216]	; (8007720 <checkAktifCalisma+0x1318>)
 8007646:	2201      	movs	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800764a:	2001      	movs	r0, #1
 800764c:	f7fe f896 	bl	800577c <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007650:	2001      	movs	r0, #1
 8007652:	f7fe fc27 	bl	8005ea4 <hata2EEPROM>
			acilstophatasi=1;
 8007656:	4b33      	ldr	r3, [pc, #204]	; (8007724 <checkAktifCalisma+0x131c>)
 8007658:	2201      	movs	r2, #1
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	e018      	b.n	8007690 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800765e:	4b31      	ldr	r3, [pc, #196]	; (8007724 <checkAktifCalisma+0x131c>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d014      	beq.n	8007690 <checkAktifCalisma+0x1288>
 8007666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800766a:	482b      	ldr	r0, [pc, #172]	; (8007718 <checkAktifCalisma+0x1310>)
 800766c:	f002 fad4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10c      	bne.n	8007690 <checkAktifCalisma+0x1288>
 8007676:	4b29      	ldr	r3, [pc, #164]	; (800771c <checkAktifCalisma+0x1314>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f083 0301 	eor.w	r3, r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007684:	4b27      	ldr	r3, [pc, #156]	; (8007724 <checkAktifCalisma+0x131c>)
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800768a:	2001      	movs	r0, #1
 800768c:	f7fe f822 	bl	80056d4 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007690:	4b25      	ldr	r3, [pc, #148]	; (8007728 <checkAktifCalisma+0x1320>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f083 0301 	eor.w	r3, r3, #1
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d04c      	beq.n	8007738 <checkAktifCalisma+0x1330>
 800769e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076a2:	481d      	ldr	r0, [pc, #116]	; (8007718 <checkAktifCalisma+0x1310>)
 80076a4:	f002 fab8 	bl	8009c18 <HAL_GPIO_ReadPin>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <checkAktifCalisma+0x12ae>
 80076ae:	4b1f      	ldr	r3, [pc, #124]	; (800772c <checkAktifCalisma+0x1324>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d040      	beq.n	8007738 <checkAktifCalisma+0x1330>
 80076b6:	4b1e      	ldr	r3, [pc, #120]	; (8007730 <checkAktifCalisma+0x1328>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d13c      	bne.n	8007738 <checkAktifCalisma+0x1330>
			hataVar=1;
 80076be:	4b18      	ldr	r3, [pc, #96]	; (8007720 <checkAktifCalisma+0x1318>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80076c4:	2002      	movs	r0, #2
 80076c6:	f7fe f859 	bl	800577c <hataKoduLcdGoster>
			hata2EEPROM(2);
 80076ca:	2002      	movs	r0, #2
 80076cc:	f7fe fbea 	bl	8005ea4 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80076d0:	4b18      	ldr	r3, [pc, #96]	; (8007734 <checkAktifCalisma+0x132c>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e047      	b.n	8007768 <checkAktifCalisma+0x1360>
 80076d8:	20000c94 	.word	0x20000c94
 80076dc:	20000c93 	.word	0x20000c93
 80076e0:	20000c92 	.word	0x20000c92
 80076e4:	40010800 	.word	0x40010800
 80076e8:	20000c88 	.word	0x20000c88
 80076ec:	40011000 	.word	0x40011000
 80076f0:	20000c4f 	.word	0x20000c4f
 80076f4:	20000c8b 	.word	0x20000c8b
 80076f8:	20000c89 	.word	0x20000c89
 80076fc:	20000c46 	.word	0x20000c46
 8007700:	20000c47 	.word	0x20000c47
 8007704:	200009bf 	.word	0x200009bf
 8007708:	200009c0 	.word	0x200009c0
 800770c:	20000c48 	.word	0x20000c48
 8007710:	20000b38 	.word	0x20000b38
 8007714:	20000c75 	.word	0x20000c75
 8007718:	40010c00 	.word	0x40010c00
 800771c:	20000c97 	.word	0x20000c97
 8007720:	20000c9e 	.word	0x20000c9e
 8007724:	20000c99 	.word	0x20000c99
 8007728:	20000ca0 	.word	0x20000ca0
 800772c:	20000caa 	.word	0x20000caa
 8007730:	20000c4d 	.word	0x20000c4d
 8007734:	20000c9a 	.word	0x20000c9a
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007738:	4b97      	ldr	r3, [pc, #604]	; (8007998 <checkAktifCalisma+0x1590>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d013      	beq.n	8007768 <checkAktifCalisma+0x1360>
 8007740:	4b96      	ldr	r3, [pc, #600]	; (800799c <checkAktifCalisma+0x1594>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00f      	beq.n	8007768 <checkAktifCalisma+0x1360>
 8007748:	4b95      	ldr	r3, [pc, #596]	; (80079a0 <checkAktifCalisma+0x1598>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f083 0301 	eor.w	r3, r3, #1
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d008      	beq.n	8007768 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007756:	4b90      	ldr	r3, [pc, #576]	; (8007998 <checkAktifCalisma+0x1590>)
 8007758:	2200      	movs	r2, #0
 800775a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 800775c:	4b91      	ldr	r3, [pc, #580]	; (80079a4 <checkAktifCalisma+0x159c>)
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007762:	2002      	movs	r0, #2
 8007764:	f7fd ffb6 	bl	80056d4 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007768:	4b8f      	ldr	r3, [pc, #572]	; (80079a8 <checkAktifCalisma+0x15a0>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11c      	bne.n	80077aa <checkAktifCalisma+0x13a2>
 8007770:	4b8e      	ldr	r3, [pc, #568]	; (80079ac <checkAktifCalisma+0x15a4>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d118      	bne.n	80077aa <checkAktifCalisma+0x13a2>
 8007778:	4b8d      	ldr	r3, [pc, #564]	; (80079b0 <checkAktifCalisma+0x15a8>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d014      	beq.n	80077aa <checkAktifCalisma+0x13a2>
 8007780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007784:	488b      	ldr	r0, [pc, #556]	; (80079b4 <checkAktifCalisma+0x15ac>)
 8007786:	f002 fa47 	bl	8009c18 <HAL_GPIO_ReadPin>
 800778a:	4603      	mov	r3, r0
 800778c:	2b01      	cmp	r3, #1
 800778e:	d10c      	bne.n	80077aa <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007790:	4b89      	ldr	r3, [pc, #548]	; (80079b8 <checkAktifCalisma+0x15b0>)
 8007792:	2201      	movs	r2, #1
 8007794:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007796:	2003      	movs	r0, #3
 8007798:	f7fd fff0 	bl	800577c <hataKoduLcdGoster>
			hata2EEPROM(3);
 800779c:	2003      	movs	r0, #3
 800779e:	f7fe fb81 	bl	8005ea4 <hata2EEPROM>
			basinchatasi=1;
 80077a2:	4b86      	ldr	r3, [pc, #536]	; (80079bc <checkAktifCalisma+0x15b4>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	701a      	strb	r2, [r3, #0]
 80077a8:	e015      	b.n	80077d6 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80077aa:	4b84      	ldr	r3, [pc, #528]	; (80079bc <checkAktifCalisma+0x15b4>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d011      	beq.n	80077d6 <checkAktifCalisma+0x13ce>
 80077b2:	4b7d      	ldr	r3, [pc, #500]	; (80079a8 <checkAktifCalisma+0x15a0>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d10d      	bne.n	80077d6 <checkAktifCalisma+0x13ce>
 80077ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077be:	4880      	ldr	r0, [pc, #512]	; (80079c0 <checkAktifCalisma+0x15b8>)
 80077c0:	f002 fa2a 	bl	8009c18 <HAL_GPIO_ReadPin>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d105      	bne.n	80077d6 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80077ca:	4b7c      	ldr	r3, [pc, #496]	; (80079bc <checkAktifCalisma+0x15b4>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80077d0:	2003      	movs	r0, #3
 80077d2:	f7fd ff7f 	bl	80056d4 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80077d6:	4b7b      	ldr	r3, [pc, #492]	; (80079c4 <checkAktifCalisma+0x15bc>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <checkAktifCalisma+0x13de>
 80077de:	4b7a      	ldr	r3, [pc, #488]	; (80079c8 <checkAktifCalisma+0x15c0>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01c      	beq.n	8007820 <checkAktifCalisma+0x1418>
 80077e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077ea:	4878      	ldr	r0, [pc, #480]	; (80079cc <checkAktifCalisma+0x15c4>)
 80077ec:	f002 fa14 	bl	8009c18 <HAL_GPIO_ReadPin>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d114      	bne.n	8007820 <checkAktifCalisma+0x1418>
 80077f6:	4b76      	ldr	r3, [pc, #472]	; (80079d0 <checkAktifCalisma+0x15c8>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d003      	beq.n	8007806 <checkAktifCalisma+0x13fe>
 80077fe:	4b74      	ldr	r3, [pc, #464]	; (80079d0 <checkAktifCalisma+0x15c8>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d10c      	bne.n	8007820 <checkAktifCalisma+0x1418>
			hataVar=1;
 8007806:	4b6c      	ldr	r3, [pc, #432]	; (80079b8 <checkAktifCalisma+0x15b0>)
 8007808:	2201      	movs	r2, #1
 800780a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800780c:	2004      	movs	r0, #4
 800780e:	f7fd ffb5 	bl	800577c <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007812:	2004      	movs	r0, #4
 8007814:	f7fe fb46 	bl	8005ea4 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007818:	4b6e      	ldr	r3, [pc, #440]	; (80079d4 <checkAktifCalisma+0x15cc>)
 800781a:	2201      	movs	r2, #1
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	e01f      	b.n	8007860 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007820:	4b6c      	ldr	r3, [pc, #432]	; (80079d4 <checkAktifCalisma+0x15cc>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01b      	beq.n	8007860 <checkAktifCalisma+0x1458>
 8007828:	4b6b      	ldr	r3, [pc, #428]	; (80079d8 <checkAktifCalisma+0x15d0>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d017      	beq.n	8007860 <checkAktifCalisma+0x1458>
 8007830:	4b64      	ldr	r3, [pc, #400]	; (80079c4 <checkAktifCalisma+0x15bc>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	f083 0301 	eor.w	r3, r3, #1
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d010      	beq.n	8007860 <checkAktifCalisma+0x1458>
 800783e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007842:	4862      	ldr	r0, [pc, #392]	; (80079cc <checkAktifCalisma+0x15c4>)
 8007844:	f002 f9e8 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 800784e:	4b61      	ldr	r3, [pc, #388]	; (80079d4 <checkAktifCalisma+0x15cc>)
 8007850:	2200      	movs	r2, #0
 8007852:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007854:	4b5c      	ldr	r3, [pc, #368]	; (80079c8 <checkAktifCalisma+0x15c0>)
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800785a:	2004      	movs	r0, #4
 800785c:	f7fd ff3a 	bl	80056d4 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007860:	4b58      	ldr	r3, [pc, #352]	; (80079c4 <checkAktifCalisma+0x15bc>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <checkAktifCalisma+0x1468>
 8007868:	4b5c      	ldr	r3, [pc, #368]	; (80079dc <checkAktifCalisma+0x15d4>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01c      	beq.n	80078aa <checkAktifCalisma+0x14a2>
 8007870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007874:	4855      	ldr	r0, [pc, #340]	; (80079cc <checkAktifCalisma+0x15c4>)
 8007876:	f002 f9cf 	bl	8009c18 <HAL_GPIO_ReadPin>
 800787a:	4603      	mov	r3, r0
 800787c:	2b01      	cmp	r3, #1
 800787e:	d114      	bne.n	80078aa <checkAktifCalisma+0x14a2>
 8007880:	4b53      	ldr	r3, [pc, #332]	; (80079d0 <checkAktifCalisma+0x15c8>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d003      	beq.n	8007890 <checkAktifCalisma+0x1488>
 8007888:	4b51      	ldr	r3, [pc, #324]	; (80079d0 <checkAktifCalisma+0x15c8>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b03      	cmp	r3, #3
 800788e:	d10c      	bne.n	80078aa <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007890:	4b49      	ldr	r3, [pc, #292]	; (80079b8 <checkAktifCalisma+0x15b0>)
 8007892:	2201      	movs	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007896:	2005      	movs	r0, #5
 8007898:	f7fd ff70 	bl	800577c <hataKoduLcdGoster>
			hata2EEPROM(5);
 800789c:	2005      	movs	r0, #5
 800789e:	f7fe fb01 	bl	8005ea4 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80078a2:	4b4f      	ldr	r3, [pc, #316]	; (80079e0 <checkAktifCalisma+0x15d8>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e023      	b.n	80078f2 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80078aa:	4b4d      	ldr	r3, [pc, #308]	; (80079e0 <checkAktifCalisma+0x15d8>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01f      	beq.n	80078f2 <checkAktifCalisma+0x14ea>
 80078b2:	4b49      	ldr	r3, [pc, #292]	; (80079d8 <checkAktifCalisma+0x15d0>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01b      	beq.n	80078f2 <checkAktifCalisma+0x14ea>
 80078ba:	4b42      	ldr	r3, [pc, #264]	; (80079c4 <checkAktifCalisma+0x15bc>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	f083 0301 	eor.w	r3, r3, #1
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d014      	beq.n	80078f2 <checkAktifCalisma+0x14ea>
 80078c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078cc:	483f      	ldr	r0, [pc, #252]	; (80079cc <checkAktifCalisma+0x15c4>)
 80078ce:	f002 f9a3 	bl	8009c18 <HAL_GPIO_ReadPin>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10c      	bne.n	80078f2 <checkAktifCalisma+0x14ea>
 80078d8:	4b3f      	ldr	r3, [pc, #252]	; (80079d8 <checkAktifCalisma+0x15d0>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80078e0:	4b3f      	ldr	r3, [pc, #252]	; (80079e0 <checkAktifCalisma+0x15d8>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80078e6:	4b3d      	ldr	r3, [pc, #244]	; (80079dc <checkAktifCalisma+0x15d4>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80078ec:	2005      	movs	r0, #5
 80078ee:	f7fd fef1 	bl	80056d4 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80078f2:	4b2f      	ldr	r3, [pc, #188]	; (80079b0 <checkAktifCalisma+0x15a8>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d107      	bne.n	800790a <checkAktifCalisma+0x1502>
 80078fa:	4b29      	ldr	r3, [pc, #164]	; (80079a0 <checkAktifCalisma+0x1598>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <checkAktifCalisma+0x1502>
 8007902:	4b38      	ldr	r3, [pc, #224]	; (80079e4 <checkAktifCalisma+0x15dc>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d014      	beq.n	8007934 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 800790a:	4b37      	ldr	r3, [pc, #220]	; (80079e8 <checkAktifCalisma+0x15e0>)
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4b37      	ldr	r3, [pc, #220]	; (80079ec <checkAktifCalisma+0x15e4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	4a36      	ldr	r2, [pc, #216]	; (80079f0 <checkAktifCalisma+0x15e8>)
 8007916:	7812      	ldrb	r2, [r2, #0]
 8007918:	4293      	cmp	r3, r2
 800791a:	d30b      	bcc.n	8007934 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 800791c:	4b26      	ldr	r3, [pc, #152]	; (80079b8 <checkAktifCalisma+0x15b0>)
 800791e:	2201      	movs	r2, #1
 8007920:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007922:	2006      	movs	r0, #6
 8007924:	f7fd ff2a 	bl	800577c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007928:	2006      	movs	r0, #6
 800792a:	f7fe fabb 	bl	8005ea4 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 800792e:	4b31      	ldr	r3, [pc, #196]	; (80079f4 <checkAktifCalisma+0x15ec>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007934:	4b2f      	ldr	r3, [pc, #188]	; (80079f4 <checkAktifCalisma+0x15ec>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d013      	beq.n	8007964 <checkAktifCalisma+0x155c>
 800793c:	2108      	movs	r1, #8
 800793e:	4823      	ldr	r0, [pc, #140]	; (80079cc <checkAktifCalisma+0x15c4>)
 8007940:	f002 f96a 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00c      	beq.n	8007964 <checkAktifCalisma+0x155c>
 800794a:	4b1e      	ldr	r3, [pc, #120]	; (80079c4 <checkAktifCalisma+0x15bc>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	f083 0301 	eor.w	r3, r3, #1
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007958:	4b26      	ldr	r3, [pc, #152]	; (80079f4 <checkAktifCalisma+0x15ec>)
 800795a:	2200      	movs	r2, #0
 800795c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800795e:	2006      	movs	r0, #6
 8007960:	f7fd feb8 	bl	80056d4 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007964:	4b24      	ldr	r3, [pc, #144]	; (80079f8 <checkAktifCalisma+0x15f0>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <checkAktifCalisma+0x157c>
 800796c:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <checkAktifCalisma+0x1598>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <checkAktifCalisma+0x157c>
 8007974:	4b21      	ldr	r3, [pc, #132]	; (80079fc <checkAktifCalisma+0x15f4>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <checkAktifCalisma+0x157c>
 800797c:	4b19      	ldr	r3, [pc, #100]	; (80079e4 <checkAktifCalisma+0x15dc>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d03f      	beq.n	8007a04 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007984:	4b1e      	ldr	r3, [pc, #120]	; (8007a00 <checkAktifCalisma+0x15f8>)
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800798a:	4b0f      	ldr	r3, [pc, #60]	; (80079c8 <checkAktifCalisma+0x15c0>)
 800798c:	2201      	movs	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007990:	4b12      	ldr	r3, [pc, #72]	; (80079dc <checkAktifCalisma+0x15d4>)
 8007992:	2201      	movs	r2, #1
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	e03c      	b.n	8007a12 <checkAktifCalisma+0x160a>
 8007998:	20000c9a 	.word	0x20000c9a
 800799c:	20000ca0 	.word	0x20000ca0
 80079a0:	20000c81 	.word	0x20000c81
 80079a4:	20000caa 	.word	0x20000caa
 80079a8:	20000c4c 	.word	0x20000c4c
 80079ac:	20000c50 	.word	0x20000c50
 80079b0:	20000c9d 	.word	0x20000c9d
 80079b4:	40011000 	.word	0x40011000
 80079b8:	20000c9e 	.word	0x20000c9e
 80079bc:	20000ca7 	.word	0x20000ca7
 80079c0:	40010c00 	.word	0x40010c00
 80079c4:	20000c97 	.word	0x20000c97
 80079c8:	20000cab 	.word	0x20000cab
 80079cc:	40010800 	.word	0x40010800
 80079d0:	20000c51 	.word	0x20000c51
 80079d4:	20000ca8 	.word	0x20000ca8
 80079d8:	20000c8b 	.word	0x20000c8b
 80079dc:	20000cac 	.word	0x20000cac
 80079e0:	20000ca9 	.word	0x20000ca9
 80079e4:	20000c80 	.word	0x20000c80
 80079e8:	20000bd4 	.word	0x20000bd4
 80079ec:	20000be8 	.word	0x20000be8
 80079f0:	20000c61 	.word	0x20000c61
 80079f4:	20000c98 	.word	0x20000c98
 80079f8:	20000c7e 	.word	0x20000c7e
 80079fc:	20000c7f 	.word	0x20000c7f
 8007a00:	20000c9f 	.word	0x20000c9f
		} else {
			makineCalisiyor=1;
 8007a04:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <checkAktifCalisma+0x1678>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007a0a:	4b1e      	ldr	r3, [pc, #120]	; (8007a84 <checkAktifCalisma+0x167c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1e      	ldr	r2, [pc, #120]	; (8007a88 <checkAktifCalisma+0x1680>)
 8007a10:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007a12:	4b1e      	ldr	r3, [pc, #120]	; (8007a8c <checkAktifCalisma+0x1684>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d02f      	beq.n	8007a7a <checkAktifCalisma+0x1672>
 8007a1a:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <checkAktifCalisma+0x1688>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	f083 0301 	eor.w	r3, r3, #1
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d028      	beq.n	8007a7a <checkAktifCalisma+0x1672>
 8007a28:	4b1a      	ldr	r3, [pc, #104]	; (8007a94 <checkAktifCalisma+0x168c>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f083 0301 	eor.w	r3, r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d021      	beq.n	8007a7a <checkAktifCalisma+0x1672>
 8007a36:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <checkAktifCalisma+0x1690>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f083 0301 	eor.w	r3, r3, #1
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01a      	beq.n	8007a7a <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007a44:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <checkAktifCalisma+0x1694>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f083 0301 	eor.w	r3, r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d013      	beq.n	8007a7a <checkAktifCalisma+0x1672>
 8007a52:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <checkAktifCalisma+0x1698>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f083 0301 	eor.w	r3, r3, #1
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <checkAktifCalisma+0x1672>
 8007a60:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <checkAktifCalisma+0x169c>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f083 0301 	eor.w	r3, r3, #1
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <checkAktifCalisma+0x1672>
			hataVar=0;
 8007a6e:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <checkAktifCalisma+0x1684>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007a74:	2007      	movs	r0, #7
 8007a76:	f7fd fe2d 	bl	80056d4 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007a7a:	bf00      	nop
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000c9f 	.word	0x20000c9f
 8007a84:	20000bd4 	.word	0x20000bd4
 8007a88:	20000be8 	.word	0x20000be8
 8007a8c:	20000c9e 	.word	0x20000c9e
 8007a90:	20000c99 	.word	0x20000c99
 8007a94:	20000c9a 	.word	0x20000c9a
 8007a98:	20000ca7 	.word	0x20000ca7
 8007a9c:	20000ca8 	.word	0x20000ca8
 8007aa0:	20000ca9 	.word	0x20000ca9
 8007aa4:	20000c98 	.word	0x20000c98

08007aa8 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007aac:	4b8b      	ldr	r3, [pc, #556]	; (8007cdc <checkDemoModCalisma+0x234>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	f040 8229 	bne.w	8007f08 <checkDemoModCalisma+0x460>
 8007ab6:	4b8a      	ldr	r3, [pc, #552]	; (8007ce0 <checkDemoModCalisma+0x238>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 8224 	beq.w	8007f08 <checkDemoModCalisma+0x460>
 8007ac0:	4b88      	ldr	r3, [pc, #544]	; (8007ce4 <checkDemoModCalisma+0x23c>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f040 821f 	bne.w	8007f08 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007aca:	2102      	movs	r1, #2
 8007acc:	4886      	ldr	r0, [pc, #536]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007ace:	f002 f8a3 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d11d      	bne.n	8007b14 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007ad8:	4b84      	ldr	r3, [pc, #528]	; (8007cec <checkDemoModCalisma+0x244>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	f083 0301 	eor.w	r3, r3, #1
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d016      	beq.n	8007b14 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007ae6:	4b82      	ldr	r3, [pc, #520]	; (8007cf0 <checkDemoModCalisma+0x248>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f083 0301 	eor.w	r3, r3, #1
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00f      	beq.n	8007b14 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007af4:	4b7f      	ldr	r3, [pc, #508]	; (8007cf4 <checkDemoModCalisma+0x24c>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	f083 0301 	eor.w	r3, r3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007b02:	2201      	movs	r2, #1
 8007b04:	2104      	movs	r1, #4
 8007b06:	487c      	ldr	r0, [pc, #496]	; (8007cf8 <checkDemoModCalisma+0x250>)
 8007b08:	f002 f89d 	bl	8009c46 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007b0c:	4b7b      	ldr	r3, [pc, #492]	; (8007cfc <checkDemoModCalisma+0x254>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	e00e      	b.n	8007b32 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007b14:	2102      	movs	r1, #2
 8007b16:	4874      	ldr	r0, [pc, #464]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007b18:	f002 f87e 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d107      	bne.n	8007b32 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b22:	2200      	movs	r2, #0
 8007b24:	2104      	movs	r1, #4
 8007b26:	4874      	ldr	r0, [pc, #464]	; (8007cf8 <checkDemoModCalisma+0x250>)
 8007b28:	f002 f88d 	bl	8009c46 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007b2c:	4b73      	ldr	r3, [pc, #460]	; (8007cfc <checkDemoModCalisma+0x254>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007b32:	4b72      	ldr	r3, [pc, #456]	; (8007cfc <checkDemoModCalisma+0x254>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10b      	bne.n	8007b52 <checkDemoModCalisma+0xaa>
 8007b3a:	4b6d      	ldr	r3, [pc, #436]	; (8007cf0 <checkDemoModCalisma+0x248>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d107      	bne.n	8007b52 <checkDemoModCalisma+0xaa>
 8007b42:	4b6c      	ldr	r3, [pc, #432]	; (8007cf4 <checkDemoModCalisma+0x24c>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <checkDemoModCalisma+0xaa>
 8007b4a:	4b68      	ldr	r3, [pc, #416]	; (8007cec <checkDemoModCalisma+0x244>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00c      	beq.n	8007b6c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007b52:	2201      	movs	r2, #1
 8007b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b58:	4867      	ldr	r0, [pc, #412]	; (8007cf8 <checkDemoModCalisma+0x250>)
 8007b5a:	f002 f874 	bl	8009c46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b64:	4864      	ldr	r0, [pc, #400]	; (8007cf8 <checkDemoModCalisma+0x250>)
 8007b66:	f002 f86e 	bl	8009c46 <HAL_GPIO_WritePin>
 8007b6a:	e00b      	b.n	8007b84 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b72:	4861      	ldr	r0, [pc, #388]	; (8007cf8 <checkDemoModCalisma+0x250>)
 8007b74:	f002 f867 	bl	8009c46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b7e:	485e      	ldr	r0, [pc, #376]	; (8007cf8 <checkDemoModCalisma+0x250>)
 8007b80:	f002 f861 	bl	8009c46 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007b84:	2102      	movs	r1, #2
 8007b86:	4858      	ldr	r0, [pc, #352]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007b88:	f002 f846 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d10d      	bne.n	8007bae <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b96:	4854      	ldr	r0, [pc, #336]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007b98:	f002 f83e 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007ba2:	4b56      	ldr	r3, [pc, #344]	; (8007cfc <checkDemoModCalisma+0x254>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f083 0301 	eor.w	r3, r3, #1
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007bae:	2102      	movs	r1, #2
 8007bb0:	484d      	ldr	r0, [pc, #308]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007bb2:	f002 f831 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d125      	bne.n	8007c08 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bc0:	4849      	ldr	r0, [pc, #292]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007bc2:	f002 f829 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d11d      	bne.n	8007c08 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007bcc:	4b4b      	ldr	r3, [pc, #300]	; (8007cfc <checkDemoModCalisma+0x254>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f083 0301 	eor.w	r3, r3, #1
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d016      	beq.n	8007c08 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007bda:	4b44      	ldr	r3, [pc, #272]	; (8007cec <checkDemoModCalisma+0x244>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f083 0301 	eor.w	r3, r3, #1
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00f      	beq.n	8007c08 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007be8:	4b42      	ldr	r3, [pc, #264]	; (8007cf4 <checkDemoModCalisma+0x24c>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f083 0301 	eor.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d008      	beq.n	8007c08 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	2120      	movs	r1, #32
 8007bfa:	483b      	ldr	r0, [pc, #236]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007bfc:	f002 f823 	bl	8009c46 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007c00:	4b3b      	ldr	r3, [pc, #236]	; (8007cf0 <checkDemoModCalisma+0x248>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e007      	b.n	8007c18 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2120      	movs	r1, #32
 8007c0c:	4836      	ldr	r0, [pc, #216]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007c0e:	f002 f81a 	bl	8009c46 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007c12:	4b37      	ldr	r3, [pc, #220]	; (8007cf0 <checkDemoModCalisma+0x248>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c18:	2102      	movs	r1, #2
 8007c1a:	4833      	ldr	r0, [pc, #204]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007c1c:	f001 fffc 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d125      	bne.n	8007c72 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c2a:	482f      	ldr	r0, [pc, #188]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007c2c:	f001 fff4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d11d      	bne.n	8007c72 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007c36:	4b31      	ldr	r3, [pc, #196]	; (8007cfc <checkDemoModCalisma+0x254>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	f083 0301 	eor.w	r3, r3, #1
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d016      	beq.n	8007c72 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007c44:	4b2a      	ldr	r3, [pc, #168]	; (8007cf0 <checkDemoModCalisma+0x248>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	f083 0301 	eor.w	r3, r3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00f      	beq.n	8007c72 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007c52:	4b26      	ldr	r3, [pc, #152]	; (8007cec <checkDemoModCalisma+0x244>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	f083 0301 	eor.w	r3, r3, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007c60:	2201      	movs	r2, #1
 8007c62:	2110      	movs	r1, #16
 8007c64:	4820      	ldr	r0, [pc, #128]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007c66:	f001 ffee 	bl	8009c46 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007c6a:	4b22      	ldr	r3, [pc, #136]	; (8007cf4 <checkDemoModCalisma+0x24c>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	e007      	b.n	8007c82 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c72:	2200      	movs	r2, #0
 8007c74:	2110      	movs	r1, #16
 8007c76:	481c      	ldr	r0, [pc, #112]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007c78:	f001 ffe5 	bl	8009c46 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007c7c:	4b1d      	ldr	r3, [pc, #116]	; (8007cf4 <checkDemoModCalisma+0x24c>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007c82:	2104      	movs	r1, #4
 8007c84:	4818      	ldr	r0, [pc, #96]	; (8007ce8 <checkDemoModCalisma+0x240>)
 8007c86:	f001 ffc7 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d139      	bne.n	8007d04 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007c90:	4b1a      	ldr	r3, [pc, #104]	; (8007cfc <checkDemoModCalisma+0x254>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	f083 0301 	eor.w	r3, r3, #1
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d032      	beq.n	8007d04 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007c9e:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <checkDemoModCalisma+0x24c>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f083 0301 	eor.w	r3, r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d02b      	beq.n	8007d04 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007cac:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <checkDemoModCalisma+0x248>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f083 0301 	eor.w	r3, r3, #1
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d024      	beq.n	8007d04 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007cba:	2201      	movs	r2, #1
 8007cbc:	2102      	movs	r1, #2
 8007cbe:	480e      	ldr	r0, [pc, #56]	; (8007cf8 <checkDemoModCalisma+0x250>)
 8007cc0:	f001 ffc1 	bl	8009c46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	480b      	ldr	r0, [pc, #44]	; (8007cf8 <checkDemoModCalisma+0x250>)
 8007cca:	f001 ffbc 	bl	8009c46 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007cce:	4b07      	ldr	r3, [pc, #28]	; (8007cec <checkDemoModCalisma+0x244>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <checkDemoModCalisma+0x258>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e027      	b.n	8007d2c <checkDemoModCalisma+0x284>
 8007cdc:	20000c67 	.word	0x20000c67
 8007ce0:	20000c9b 	.word	0x20000c9b
 8007ce4:	20000c66 	.word	0x20000c66
 8007ce8:	40011000 	.word	0x40011000
 8007cec:	20000ca2 	.word	0x20000ca2
 8007cf0:	20000ca3 	.word	0x20000ca3
 8007cf4:	20000ca4 	.word	0x20000ca4
 8007cf8:	40010c00 	.word	0x40010c00
 8007cfc:	20000ca1 	.word	0x20000ca1
 8007d00:	20000c87 	.word	0x20000c87
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007d04:	2104      	movs	r1, #4
 8007d06:	48a0      	ldr	r0, [pc, #640]	; (8007f88 <checkDemoModCalisma+0x4e0>)
 8007d08:	f001 ff86 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d10c      	bne.n	8007d2c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d12:	2200      	movs	r2, #0
 8007d14:	2102      	movs	r1, #2
 8007d16:	489d      	ldr	r0, [pc, #628]	; (8007f8c <checkDemoModCalisma+0x4e4>)
 8007d18:	f001 ff95 	bl	8009c46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2101      	movs	r1, #1
 8007d20:	489a      	ldr	r0, [pc, #616]	; (8007f8c <checkDemoModCalisma+0x4e4>)
 8007d22:	f001 ff90 	bl	8009c46 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007d26:	4b9a      	ldr	r3, [pc, #616]	; (8007f90 <checkDemoModCalisma+0x4e8>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007d2c:	2104      	movs	r1, #4
 8007d2e:	4896      	ldr	r0, [pc, #600]	; (8007f88 <checkDemoModCalisma+0x4e0>)
 8007d30:	f001 ff72 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d10d      	bne.n	8007d56 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	2180      	movs	r1, #128	; 0x80
 8007d3e:	4895      	ldr	r0, [pc, #596]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007d40:	f001 ff81 	bl	8009c46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007d44:	2201      	movs	r2, #1
 8007d46:	2120      	movs	r1, #32
 8007d48:	4892      	ldr	r0, [pc, #584]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007d4a:	f001 ff7c 	bl	8009c46 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d4e:	4b92      	ldr	r3, [pc, #584]	; (8007f98 <checkDemoModCalisma+0x4f0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a92      	ldr	r2, [pc, #584]	; (8007f9c <checkDemoModCalisma+0x4f4>)
 8007d54:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007d56:	4b90      	ldr	r3, [pc, #576]	; (8007f98 <checkDemoModCalisma+0x4f0>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4b90      	ldr	r3, [pc, #576]	; (8007f9c <checkDemoModCalisma+0x4f4>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d909      	bls.n	8007d78 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007d64:	2200      	movs	r2, #0
 8007d66:	2180      	movs	r1, #128	; 0x80
 8007d68:	488a      	ldr	r0, [pc, #552]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007d6a:	f001 ff6c 	bl	8009c46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2120      	movs	r1, #32
 8007d72:	4888      	ldr	r0, [pc, #544]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007d74:	f001 ff67 	bl	8009c46 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007d78:	2102      	movs	r1, #2
 8007d7a:	4883      	ldr	r0, [pc, #524]	; (8007f88 <checkDemoModCalisma+0x4e0>)
 8007d7c:	f001 ff4c 	bl	8009c18 <HAL_GPIO_ReadPin>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d108      	bne.n	8007d98 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007d86:	2201      	movs	r2, #1
 8007d88:	2140      	movs	r1, #64	; 0x40
 8007d8a:	4882      	ldr	r0, [pc, #520]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007d8c:	f001 ff5b 	bl	8009c46 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d90:	4b81      	ldr	r3, [pc, #516]	; (8007f98 <checkDemoModCalisma+0x4f0>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a81      	ldr	r2, [pc, #516]	; (8007f9c <checkDemoModCalisma+0x4f4>)
 8007d96:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007d98:	4b7f      	ldr	r3, [pc, #508]	; (8007f98 <checkDemoModCalisma+0x4f0>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	4b7f      	ldr	r3, [pc, #508]	; (8007f9c <checkDemoModCalisma+0x4f4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d904      	bls.n	8007db0 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2140      	movs	r1, #64	; 0x40
 8007daa:	487a      	ldr	r0, [pc, #488]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007dac:	f001 ff4b 	bl	8009c46 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007db0:	4b7b      	ldr	r3, [pc, #492]	; (8007fa0 <checkDemoModCalisma+0x4f8>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d058      	beq.n	8007e6a <checkDemoModCalisma+0x3c2>
 8007db8:	4b7a      	ldr	r3, [pc, #488]	; (8007fa4 <checkDemoModCalisma+0x4fc>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d054      	beq.n	8007e6a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007dc0:	4b79      	ldr	r3, [pc, #484]	; (8007fa8 <checkDemoModCalisma+0x500>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	4b77      	ldr	r3, [pc, #476]	; (8007fa8 <checkDemoModCalisma+0x500>)
 8007dca:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007dcc:	4b76      	ldr	r3, [pc, #472]	; (8007fa8 <checkDemoModCalisma+0x500>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b09      	cmp	r3, #9
 8007dd2:	d908      	bls.n	8007de6 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007dd4:	4b74      	ldr	r3, [pc, #464]	; (8007fa8 <checkDemoModCalisma+0x500>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007dda:	4b74      	ldr	r3, [pc, #464]	; (8007fac <checkDemoModCalisma+0x504>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	3301      	adds	r3, #1
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	4b72      	ldr	r3, [pc, #456]	; (8007fac <checkDemoModCalisma+0x504>)
 8007de4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007de6:	4b71      	ldr	r3, [pc, #452]	; (8007fac <checkDemoModCalisma+0x504>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d908      	bls.n	8007e00 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007dee:	4b6f      	ldr	r3, [pc, #444]	; (8007fac <checkDemoModCalisma+0x504>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007df4:	4b6e      	ldr	r3, [pc, #440]	; (8007fb0 <checkDemoModCalisma+0x508>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	4b6c      	ldr	r3, [pc, #432]	; (8007fb0 <checkDemoModCalisma+0x508>)
 8007dfe:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007e00:	4b6b      	ldr	r3, [pc, #428]	; (8007fb0 <checkDemoModCalisma+0x508>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b09      	cmp	r3, #9
 8007e06:	d908      	bls.n	8007e1a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007e08:	4b69      	ldr	r3, [pc, #420]	; (8007fb0 <checkDemoModCalisma+0x508>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007e0e:	4b69      	ldr	r3, [pc, #420]	; (8007fb4 <checkDemoModCalisma+0x50c>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	4b67      	ldr	r3, [pc, #412]	; (8007fb4 <checkDemoModCalisma+0x50c>)
 8007e18:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007e1a:	4b66      	ldr	r3, [pc, #408]	; (8007fb4 <checkDemoModCalisma+0x50c>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d908      	bls.n	8007e34 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007e22:	4b64      	ldr	r3, [pc, #400]	; (8007fb4 <checkDemoModCalisma+0x50c>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007e28:	4b63      	ldr	r3, [pc, #396]	; (8007fb8 <checkDemoModCalisma+0x510>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	4b61      	ldr	r3, [pc, #388]	; (8007fb8 <checkDemoModCalisma+0x510>)
 8007e32:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007e34:	4b60      	ldr	r3, [pc, #384]	; (8007fb8 <checkDemoModCalisma+0x510>)
 8007e36:	781a      	ldrb	r2, [r3, #0]
 8007e38:	4b60      	ldr	r3, [pc, #384]	; (8007fbc <checkDemoModCalisma+0x514>)
 8007e3a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007e3e:	4b5d      	ldr	r3, [pc, #372]	; (8007fb4 <checkDemoModCalisma+0x50c>)
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	4b5e      	ldr	r3, [pc, #376]	; (8007fbc <checkDemoModCalisma+0x514>)
 8007e44:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007e46:	4b5a      	ldr	r3, [pc, #360]	; (8007fb0 <checkDemoModCalisma+0x508>)
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	4b5c      	ldr	r3, [pc, #368]	; (8007fbc <checkDemoModCalisma+0x514>)
 8007e4c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007e4e:	4b57      	ldr	r3, [pc, #348]	; (8007fac <checkDemoModCalisma+0x504>)
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	4b5a      	ldr	r3, [pc, #360]	; (8007fbc <checkDemoModCalisma+0x514>)
 8007e54:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007e56:	4b54      	ldr	r3, [pc, #336]	; (8007fa8 <checkDemoModCalisma+0x500>)
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	4b58      	ldr	r3, [pc, #352]	; (8007fbc <checkDemoModCalisma+0x514>)
 8007e5c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007e5e:	4b58      	ldr	r3, [pc, #352]	; (8007fc0 <checkDemoModCalisma+0x518>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007e64:	4b4f      	ldr	r3, [pc, #316]	; (8007fa4 <checkDemoModCalisma+0x4fc>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007e6a:	4b56      	ldr	r3, [pc, #344]	; (8007fc4 <checkDemoModCalisma+0x51c>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 8087 	bne.w	8007f82 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007e74:	4a54      	ldr	r2, [pc, #336]	; (8007fc8 <checkDemoModCalisma+0x520>)
 8007e76:	2101      	movs	r1, #1
 8007e78:	2002      	movs	r0, #2
 8007e7a:	f7f8 fbf5 	bl	8000668 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007e7e:	4a53      	ldr	r2, [pc, #332]	; (8007fcc <checkDemoModCalisma+0x524>)
 8007e80:	2101      	movs	r1, #1
 8007e82:	2001      	movs	r0, #1
 8007e84:	f7f8 fbf0 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007e88:	4b4b      	ldr	r3, [pc, #300]	; (8007fb8 <checkDemoModCalisma+0x510>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	220a      	movs	r2, #10
 8007e8e:	4950      	ldr	r1, [pc, #320]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007e90:	4618      	mov	r0, r3
 8007e92:	f004 feed 	bl	800cc70 <itoa>
			lcd_print(2,12,snum);
 8007e96:	4a4e      	ldr	r2, [pc, #312]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007e98:	210c      	movs	r1, #12
 8007e9a:	2002      	movs	r0, #2
 8007e9c:	f7f8 fbe4 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007ea0:	4b44      	ldr	r3, [pc, #272]	; (8007fb4 <checkDemoModCalisma+0x50c>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	220a      	movs	r2, #10
 8007ea6:	494a      	ldr	r1, [pc, #296]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f004 fee1 	bl	800cc70 <itoa>
			lcd_print(2,13,snum);
 8007eae:	4a48      	ldr	r2, [pc, #288]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007eb0:	210d      	movs	r1, #13
 8007eb2:	2002      	movs	r0, #2
 8007eb4:	f7f8 fbd8 	bl	8000668 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007eb8:	4b3d      	ldr	r3, [pc, #244]	; (8007fb0 <checkDemoModCalisma+0x508>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	220a      	movs	r2, #10
 8007ebe:	4944      	ldr	r1, [pc, #272]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f004 fed5 	bl	800cc70 <itoa>
			lcd_print(2,14,snum);
 8007ec6:	4a42      	ldr	r2, [pc, #264]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007ec8:	210e      	movs	r1, #14
 8007eca:	2002      	movs	r0, #2
 8007ecc:	f7f8 fbcc 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007ed0:	4b36      	ldr	r3, [pc, #216]	; (8007fac <checkDemoModCalisma+0x504>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	220a      	movs	r2, #10
 8007ed6:	493e      	ldr	r1, [pc, #248]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f004 fec9 	bl	800cc70 <itoa>
			lcd_print(2,15,snum);
 8007ede:	4a3c      	ldr	r2, [pc, #240]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007ee0:	210f      	movs	r1, #15
 8007ee2:	2002      	movs	r0, #2
 8007ee4:	f7f8 fbc0 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007ee8:	4b2f      	ldr	r3, [pc, #188]	; (8007fa8 <checkDemoModCalisma+0x500>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	220a      	movs	r2, #10
 8007eee:	4938      	ldr	r1, [pc, #224]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f004 febd 	bl	800cc70 <itoa>
			lcd_print(2,16,snum);
 8007ef6:	4a36      	ldr	r2, [pc, #216]	; (8007fd0 <checkDemoModCalisma+0x528>)
 8007ef8:	2110      	movs	r1, #16
 8007efa:	2002      	movs	r0, #2
 8007efc:	f7f8 fbb4 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8007f00:	4b34      	ldr	r3, [pc, #208]	; (8007fd4 <checkDemoModCalisma+0x52c>)
 8007f02:	2201      	movs	r2, #1
 8007f04:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007f06:	e03c      	b.n	8007f82 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007f08:	4b33      	ldr	r3, [pc, #204]	; (8007fd8 <checkDemoModCalisma+0x530>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d003      	beq.n	8007f18 <checkDemoModCalisma+0x470>
 8007f10:	4b2c      	ldr	r3, [pc, #176]	; (8007fc4 <checkDemoModCalisma+0x51c>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d134      	bne.n	8007f82 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f1e:	481b      	ldr	r0, [pc, #108]	; (8007f8c <checkDemoModCalisma+0x4e4>)
 8007f20:	f001 fe91 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f24:	2200      	movs	r2, #0
 8007f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f2a:	4818      	ldr	r0, [pc, #96]	; (8007f8c <checkDemoModCalisma+0x4e4>)
 8007f2c:	f001 fe8b 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f30:	2200      	movs	r2, #0
 8007f32:	2104      	movs	r1, #4
 8007f34:	4815      	ldr	r0, [pc, #84]	; (8007f8c <checkDemoModCalisma+0x4e4>)
 8007f36:	f001 fe86 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2102      	movs	r1, #2
 8007f3e:	4813      	ldr	r0, [pc, #76]	; (8007f8c <checkDemoModCalisma+0x4e4>)
 8007f40:	f001 fe81 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f44:	2200      	movs	r2, #0
 8007f46:	2101      	movs	r1, #1
 8007f48:	4810      	ldr	r0, [pc, #64]	; (8007f8c <checkDemoModCalisma+0x4e4>)
 8007f4a:	f001 fe7c 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2120      	movs	r1, #32
 8007f52:	480d      	ldr	r0, [pc, #52]	; (8007f88 <checkDemoModCalisma+0x4e0>)
 8007f54:	f001 fe77 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2110      	movs	r1, #16
 8007f5c:	480a      	ldr	r0, [pc, #40]	; (8007f88 <checkDemoModCalisma+0x4e0>)
 8007f5e:	f001 fe72 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f62:	2200      	movs	r2, #0
 8007f64:	2180      	movs	r1, #128	; 0x80
 8007f66:	480b      	ldr	r0, [pc, #44]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007f68:	f001 fe6d 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2140      	movs	r1, #64	; 0x40
 8007f70:	4808      	ldr	r0, [pc, #32]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007f72:	f001 fe68 	bl	8009c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2120      	movs	r1, #32
 8007f7a:	4806      	ldr	r0, [pc, #24]	; (8007f94 <checkDemoModCalisma+0x4ec>)
 8007f7c:	f001 fe63 	bl	8009c46 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007f80:	e7ff      	b.n	8007f82 <checkDemoModCalisma+0x4da>
 8007f82:	bf00      	nop
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	40011000 	.word	0x40011000
 8007f8c:	40010c00 	.word	0x40010c00
 8007f90:	20000ca2 	.word	0x20000ca2
 8007f94:	40010800 	.word	0x40010800
 8007f98:	20000bd4 	.word	0x20000bd4
 8007f9c:	20000be4 	.word	0x20000be4
 8007fa0:	20000ca1 	.word	0x20000ca1
 8007fa4:	20000c87 	.word	0x20000c87
 8007fa8:	20000c46 	.word	0x20000c46
 8007fac:	20000c47 	.word	0x20000c47
 8007fb0:	200009bf 	.word	0x200009bf
 8007fb4:	200009c0 	.word	0x200009c0
 8007fb8:	20000c48 	.word	0x20000c48
 8007fbc:	20000b38 	.word	0x20000b38
 8007fc0:	20000c75 	.word	0x20000c75
 8007fc4:	20000c66 	.word	0x20000c66
 8007fc8:	0800e434 	.word	0x0800e434
 8007fcc:	0800e440 	.word	0x0800e440
 8007fd0:	20000bcc 	.word	0x20000bcc
 8007fd4:	20000c7d 	.word	0x20000c7d
 8007fd8:	20000c67 	.word	0x20000c67

08007fdc <mergeData>:

char* mergeData() {
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b09e      	sub	sp, #120	; 0x78
 8007fe0:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fea:	2229      	movs	r2, #41	; 0x29
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f004 ff56 	bl	800cea0 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007ff4:	4b6a      	ldr	r3, [pc, #424]	; (80081a0 <mergeData+0x1c4>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	713b      	strb	r3, [r7, #4]
 8007ffa:	4b6a      	ldr	r3, [pc, #424]	; (80081a4 <mergeData+0x1c8>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	717b      	strb	r3, [r7, #5]
 8008000:	4b69      	ldr	r3, [pc, #420]	; (80081a8 <mergeData+0x1cc>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	71bb      	strb	r3, [r7, #6]
 8008006:	4b69      	ldr	r3, [pc, #420]	; (80081ac <mergeData+0x1d0>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
 800800c:	4b68      	ldr	r3, [pc, #416]	; (80081b0 <mergeData+0x1d4>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	723b      	strb	r3, [r7, #8]
 8008012:	4b68      	ldr	r3, [pc, #416]	; (80081b4 <mergeData+0x1d8>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	727b      	strb	r3, [r7, #9]
 8008018:	4b67      	ldr	r3, [pc, #412]	; (80081b8 <mergeData+0x1dc>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	72bb      	strb	r3, [r7, #10]
 800801e:	4b67      	ldr	r3, [pc, #412]	; (80081bc <mergeData+0x1e0>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	72fb      	strb	r3, [r7, #11]
 8008024:	4b66      	ldr	r3, [pc, #408]	; (80081c0 <mergeData+0x1e4>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	733b      	strb	r3, [r7, #12]
 800802a:	4b66      	ldr	r3, [pc, #408]	; (80081c4 <mergeData+0x1e8>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	737b      	strb	r3, [r7, #13]
 8008030:	4b65      	ldr	r3, [pc, #404]	; (80081c8 <mergeData+0x1ec>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	73bb      	strb	r3, [r7, #14]
 8008036:	4b65      	ldr	r3, [pc, #404]	; (80081cc <mergeData+0x1f0>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	73fb      	strb	r3, [r7, #15]
 800803c:	4b64      	ldr	r3, [pc, #400]	; (80081d0 <mergeData+0x1f4>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	743b      	strb	r3, [r7, #16]
 8008042:	4b64      	ldr	r3, [pc, #400]	; (80081d4 <mergeData+0x1f8>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	747b      	strb	r3, [r7, #17]
 8008048:	4b63      	ldr	r3, [pc, #396]	; (80081d8 <mergeData+0x1fc>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	74bb      	strb	r3, [r7, #18]
 800804e:	4b63      	ldr	r3, [pc, #396]	; (80081dc <mergeData+0x200>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	74fb      	strb	r3, [r7, #19]
 8008054:	4b62      	ldr	r3, [pc, #392]	; (80081e0 <mergeData+0x204>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	753b      	strb	r3, [r7, #20]
 800805a:	4b62      	ldr	r3, [pc, #392]	; (80081e4 <mergeData+0x208>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	757b      	strb	r3, [r7, #21]
 8008060:	4b61      	ldr	r3, [pc, #388]	; (80081e8 <mergeData+0x20c>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	75bb      	strb	r3, [r7, #22]
 8008066:	4b61      	ldr	r3, [pc, #388]	; (80081ec <mergeData+0x210>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	75fb      	strb	r3, [r7, #23]
 800806c:	4b60      	ldr	r3, [pc, #384]	; (80081f0 <mergeData+0x214>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	763b      	strb	r3, [r7, #24]
 8008072:	4b60      	ldr	r3, [pc, #384]	; (80081f4 <mergeData+0x218>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	767b      	strb	r3, [r7, #25]
 8008078:	4b5f      	ldr	r3, [pc, #380]	; (80081f8 <mergeData+0x21c>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	76bb      	strb	r3, [r7, #26]
 800807e:	4b5f      	ldr	r3, [pc, #380]	; (80081fc <mergeData+0x220>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	76fb      	strb	r3, [r7, #27]
 8008084:	4b5e      	ldr	r3, [pc, #376]	; (8008200 <mergeData+0x224>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	773b      	strb	r3, [r7, #28]
 800808a:	4b5e      	ldr	r3, [pc, #376]	; (8008204 <mergeData+0x228>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	777b      	strb	r3, [r7, #29]
 8008090:	4b5d      	ldr	r3, [pc, #372]	; (8008208 <mergeData+0x22c>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	77bb      	strb	r3, [r7, #30]
 8008096:	4b5d      	ldr	r3, [pc, #372]	; (800820c <mergeData+0x230>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	77fb      	strb	r3, [r7, #31]
 800809c:	4b5c      	ldr	r3, [pc, #368]	; (8008210 <mergeData+0x234>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	f887 3020 	strb.w	r3, [r7, #32]
 80080a4:	4b5b      	ldr	r3, [pc, #364]	; (8008214 <mergeData+0x238>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80080ac:	4b5a      	ldr	r3, [pc, #360]	; (8008218 <mergeData+0x23c>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80080b4:	4b59      	ldr	r3, [pc, #356]	; (800821c <mergeData+0x240>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080bc:	4b58      	ldr	r3, [pc, #352]	; (8008220 <mergeData+0x244>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80080c4:	4b57      	ldr	r3, [pc, #348]	; (8008224 <mergeData+0x248>)
 80080c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80080ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80080ce:	4b55      	ldr	r3, [pc, #340]	; (8008224 <mergeData+0x248>)
 80080d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80080d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80080d8:	4b52      	ldr	r3, [pc, #328]	; (8008224 <mergeData+0x248>)
 80080da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80080de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80080e2:	4b50      	ldr	r3, [pc, #320]	; (8008224 <mergeData+0x248>)
 80080e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80080e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80080ec:	4b4d      	ldr	r3, [pc, #308]	; (8008224 <mergeData+0x248>)
 80080ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80080f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80080f6:	4b4b      	ldr	r3, [pc, #300]	; (8008224 <mergeData+0x248>)
 80080f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80080fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8008100:	4b48      	ldr	r3, [pc, #288]	; (8008224 <mergeData+0x248>)
 8008102:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 800810a:	4b46      	ldr	r3, [pc, #280]	; (8008224 <mergeData+0x248>)
 800810c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8008110:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008114:	4b43      	ldr	r3, [pc, #268]	; (8008224 <mergeData+0x248>)
 8008116:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800811a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800811e:	4b41      	ldr	r3, [pc, #260]	; (8008224 <mergeData+0x248>)
 8008120:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008124:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008128:	4b3e      	ldr	r3, [pc, #248]	; (8008224 <mergeData+0x248>)
 800812a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800812e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008132:	4b3d      	ldr	r3, [pc, #244]	; (8008228 <mergeData+0x24c>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800813a:	2300      	movs	r3, #0
 800813c:	677b      	str	r3, [r7, #116]	; 0x74
 800813e:	e015      	b.n	800816c <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8008140:	1d3a      	adds	r2, r7, #4
 8008142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008144:	4413      	add	r3, r2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800814e:	4937      	ldr	r1, [pc, #220]	; (800822c <mergeData+0x250>)
 8008150:	4618      	mov	r0, r3
 8008152:	f004 fe85 	bl	800ce60 <siprintf>
	    strcat(combinedString, temp);
 8008156:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800815a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f004 fea5 	bl	800ceb0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008168:	3301      	adds	r3, #1
 800816a:	677b      	str	r3, [r7, #116]	; 0x74
 800816c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800816e:	2b2c      	cmp	r3, #44	; 0x2c
 8008170:	d9e6      	bls.n	8008140 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008172:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008176:	4618      	mov	r0, r3
 8008178:	f7f8 f854 	bl	8000224 <strlen>
 800817c:	4603      	mov	r3, r0
 800817e:	3301      	adds	r3, #1
 8008180:	4618      	mov	r0, r3
 8008182:	f004 fd77 	bl	800cc74 <malloc>
 8008186:	4603      	mov	r3, r0
 8008188:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 800818a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800818e:	4619      	mov	r1, r3
 8008190:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008192:	f004 fed9 	bl	800cf48 <strcpy>
	return result;
 8008196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008198:	4618      	mov	r0, r3
 800819a:	3778      	adds	r7, #120	; 0x78
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000c58 	.word	0x20000c58
 80081a4:	20000c4a 	.word	0x20000c4a
 80081a8:	20000c4d 	.word	0x20000c4d
 80081ac:	20000c4e 	.word	0x20000c4e
 80081b0:	20000c4f 	.word	0x20000c4f
 80081b4:	20000c56 	.word	0x20000c56
 80081b8:	20000c50 	.word	0x20000c50
 80081bc:	20000c51 	.word	0x20000c51
 80081c0:	20000c55 	.word	0x20000c55
 80081c4:	20000c52 	.word	0x20000c52
 80081c8:	20000c62 	.word	0x20000c62
 80081cc:	20000c53 	.word	0x20000c53
 80081d0:	20000c63 	.word	0x20000c63
 80081d4:	20000c54 	.word	0x20000c54
 80081d8:	20000c64 	.word	0x20000c64
 80081dc:	20000c57 	.word	0x20000c57
 80081e0:	20000c59 	.word	0x20000c59
 80081e4:	20000c5a 	.word	0x20000c5a
 80081e8:	20000c5b 	.word	0x20000c5b
 80081ec:	20000c5c 	.word	0x20000c5c
 80081f0:	20000c5d 	.word	0x20000c5d
 80081f4:	20000c5e 	.word	0x20000c5e
 80081f8:	20000c5f 	.word	0x20000c5f
 80081fc:	20000c60 	.word	0x20000c60
 8008200:	20000c61 	.word	0x20000c61
 8008204:	20000c65 	.word	0x20000c65
 8008208:	20000c67 	.word	0x20000c67
 800820c:	20000c46 	.word	0x20000c46
 8008210:	20000c47 	.word	0x20000c47
 8008214:	200009bf 	.word	0x200009bf
 8008218:	200009c0 	.word	0x200009c0
 800821c:	20000c48 	.word	0x20000c48
 8008220:	20000c6a 	.word	0x20000c6a
 8008224:	20000b38 	.word	0x20000b38
 8008228:	20000940 	.word	0x20000940
 800822c:	0800e454 	.word	0x0800e454

08008230 <mainLoop>:

void mainLoop() {
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008236:	f7fd fffb 	bl	8006230 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800823a:	2101      	movs	r1, #1
 800823c:	48ac      	ldr	r0, [pc, #688]	; (80084f0 <mainLoop+0x2c0>)
 800823e:	f001 fceb 	bl	8009c18 <HAL_GPIO_ReadPin>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d136      	bne.n	80082b6 <mainLoop+0x86>
 8008248:	2108      	movs	r1, #8
 800824a:	48aa      	ldr	r0, [pc, #680]	; (80084f4 <mainLoop+0x2c4>)
 800824c:	f001 fce4 	bl	8009c18 <HAL_GPIO_ReadPin>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d12f      	bne.n	80082b6 <mainLoop+0x86>
 8008256:	2102      	movs	r1, #2
 8008258:	48a5      	ldr	r0, [pc, #660]	; (80084f0 <mainLoop+0x2c0>)
 800825a:	f001 fcdd 	bl	8009c18 <HAL_GPIO_ReadPin>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d128      	bne.n	80082b6 <mainLoop+0x86>
 8008264:	2104      	movs	r1, #4
 8008266:	48a2      	ldr	r0, [pc, #648]	; (80084f0 <mainLoop+0x2c0>)
 8008268:	f001 fcd6 	bl	8009c18 <HAL_GPIO_ReadPin>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d121      	bne.n	80082b6 <mainLoop+0x86>
 8008272:	2108      	movs	r1, #8
 8008274:	489e      	ldr	r0, [pc, #632]	; (80084f0 <mainLoop+0x2c0>)
 8008276:	f001 fccf 	bl	8009c18 <HAL_GPIO_ReadPin>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d11a      	bne.n	80082b6 <mainLoop+0x86>
 8008280:	2180      	movs	r1, #128	; 0x80
 8008282:	489c      	ldr	r0, [pc, #624]	; (80084f4 <mainLoop+0x2c4>)
 8008284:	f001 fcc8 	bl	8009c18 <HAL_GPIO_ReadPin>
 8008288:	4603      	mov	r3, r0
 800828a:	2b01      	cmp	r3, #1
 800828c:	d113      	bne.n	80082b6 <mainLoop+0x86>
 800828e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008292:	4898      	ldr	r0, [pc, #608]	; (80084f4 <mainLoop+0x2c4>)
 8008294:	f001 fcc0 	bl	8009c18 <HAL_GPIO_ReadPin>
 8008298:	4603      	mov	r3, r0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10b      	bne.n	80082b6 <mainLoop+0x86>
 800829e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082a2:	4894      	ldr	r0, [pc, #592]	; (80084f4 <mainLoop+0x2c4>)
 80082a4:	f001 fcb8 	bl	8009c18 <HAL_GPIO_ReadPin>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d103      	bne.n	80082b6 <mainLoop+0x86>
			butonKontrol=0;
 80082ae:	4b92      	ldr	r3, [pc, #584]	; (80084f8 <mainLoop+0x2c8>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	e003      	b.n	80082be <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80082b6:	4b91      	ldr	r3, [pc, #580]	; (80084fc <mainLoop+0x2cc>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a91      	ldr	r2, [pc, #580]	; (8008500 <mainLoop+0x2d0>)
 80082bc:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80082be:	4b91      	ldr	r3, [pc, #580]	; (8008504 <mainLoop+0x2d4>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d039      	beq.n	800833a <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80082c6:	bf00      	nop
 80082c8:	488f      	ldr	r0, [pc, #572]	; (8008508 <mainLoop+0x2d8>)
 80082ca:	f002 face 	bl	800a86a <HAL_I2C_GetError>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d0f9      	beq.n	80082c8 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80082d4:	bf00      	nop
 80082d6:	488c      	ldr	r0, [pc, #560]	; (8008508 <mainLoop+0x2d8>)
 80082d8:	f002 faba 	bl	800a850 <HAL_I2C_GetState>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b20      	cmp	r3, #32
 80082e0:	d1f9      	bne.n	80082d6 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80082e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80082e6:	9302      	str	r3, [sp, #8]
 80082e8:	233f      	movs	r3, #63	; 0x3f
 80082ea:	9301      	str	r3, [sp, #4]
 80082ec:	4b87      	ldr	r3, [pc, #540]	; (800850c <mainLoop+0x2dc>)
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	233f      	movs	r3, #63	; 0x3f
 80082f2:	2200      	movs	r2, #0
 80082f4:	21a0      	movs	r1, #160	; 0xa0
 80082f6:	4884      	ldr	r0, [pc, #528]	; (8008508 <mainLoop+0x2d8>)
 80082f8:	f001 ff48 	bl	800a18c <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 80082fc:	2005      	movs	r0, #5
 80082fe:	f000 febb 	bl	8009078 <HAL_Delay>

		  hafizaYaz=0;
 8008302:	4b80      	ldr	r3, [pc, #512]	; (8008504 <mainLoop+0x2d4>)
 8008304:	2200      	movs	r2, #0
 8008306:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008308:	4b81      	ldr	r3, [pc, #516]	; (8008510 <mainLoop+0x2e0>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8008310:	4a80      	ldr	r2, [pc, #512]	; (8008514 <mainLoop+0x2e4>)
 8008312:	2101      	movs	r1, #1
 8008314:	2002      	movs	r0, #2
 8008316:	f7f8 f9a7 	bl	8000668 <lcd_print>
 800831a:	e008      	b.n	800832e <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 800831c:	4b7c      	ldr	r3, [pc, #496]	; (8008510 <mainLoop+0x2e0>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d104      	bne.n	800832e <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008324:	4a7c      	ldr	r2, [pc, #496]	; (8008518 <mainLoop+0x2e8>)
 8008326:	2101      	movs	r1, #1
 8008328:	2002      	movs	r0, #2
 800832a:	f7f8 f99d 	bl	8000668 <lcd_print>
		  }

		  HAL_Delay(1000);
 800832e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008332:	f000 fea1 	bl	8009078 <HAL_Delay>
		  lcd_clear();
 8008336:	f7f8 f9c3 	bl	80006c0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800833a:	4b78      	ldr	r3, [pc, #480]	; (800851c <mainLoop+0x2ec>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	f083 0301 	eor.w	r3, r3, #1
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d06e      	beq.n	8008426 <mainLoop+0x1f6>
 8008348:	486f      	ldr	r0, [pc, #444]	; (8008508 <mainLoop+0x2d8>)
 800834a:	f002 fa81 	bl	800a850 <HAL_I2C_GetState>
 800834e:	4603      	mov	r3, r0
 8008350:	2b20      	cmp	r3, #32
 8008352:	d168      	bne.n	8008426 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008354:	4b72      	ldr	r3, [pc, #456]	; (8008520 <mainLoop+0x2f0>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f083 0301 	eor.w	r3, r3, #1
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d044      	beq.n	80083ec <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008362:	4a70      	ldr	r2, [pc, #448]	; (8008524 <mainLoop+0x2f4>)
 8008364:	2101      	movs	r1, #1
 8008366:	2001      	movs	r0, #1
 8008368:	f7f8 f97e 	bl	8000668 <lcd_print>
			  if(dilSecim==0) {
 800836c:	4b68      	ldr	r3, [pc, #416]	; (8008510 <mainLoop+0x2e0>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8008374:	4a6c      	ldr	r2, [pc, #432]	; (8008528 <mainLoop+0x2f8>)
 8008376:	2101      	movs	r1, #1
 8008378:	2002      	movs	r0, #2
 800837a:	f7f8 f975 	bl	8000668 <lcd_print>
 800837e:	e008      	b.n	8008392 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8008380:	4b63      	ldr	r3, [pc, #396]	; (8008510 <mainLoop+0x2e0>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d104      	bne.n	8008392 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8008388:	4a68      	ldr	r2, [pc, #416]	; (800852c <mainLoop+0x2fc>)
 800838a:	2101      	movs	r1, #1
 800838c:	2002      	movs	r0, #2
 800838e:	f7f8 f96b 	bl	8000668 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008396:	f000 fe6f 	bl	8009078 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800839a:	bf00      	nop
 800839c:	485a      	ldr	r0, [pc, #360]	; (8008508 <mainLoop+0x2d8>)
 800839e:	f002 fa64 	bl	800a86a <HAL_I2C_GetError>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d0f9      	beq.n	800839c <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80083a8:	e003      	b.n	80083b2 <mainLoop+0x182>
				  HAL_Delay(1000);
 80083aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083ae:	f000 fe63 	bl	8009078 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80083b2:	4855      	ldr	r0, [pc, #340]	; (8008508 <mainLoop+0x2d8>)
 80083b4:	f002 fa4c 	bl	800a850 <HAL_I2C_GetState>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	d1f5      	bne.n	80083aa <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 80083be:	4b54      	ldr	r3, [pc, #336]	; (8008510 <mainLoop+0x2e0>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 80083c6:	4a5a      	ldr	r2, [pc, #360]	; (8008530 <mainLoop+0x300>)
 80083c8:	2101      	movs	r1, #1
 80083ca:	2002      	movs	r0, #2
 80083cc:	f7f8 f94c 	bl	8000668 <lcd_print>
 80083d0:	e008      	b.n	80083e4 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 80083d2:	4b4f      	ldr	r3, [pc, #316]	; (8008510 <mainLoop+0x2e0>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d104      	bne.n	80083e4 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 80083da:	4a56      	ldr	r2, [pc, #344]	; (8008534 <mainLoop+0x304>)
 80083dc:	2101      	movs	r1, #1
 80083de:	2002      	movs	r0, #2
 80083e0:	f7f8 f942 	bl	8000668 <lcd_print>
			  }

			  ilkOkuma=1;
 80083e4:	4b4e      	ldr	r3, [pc, #312]	; (8008520 <mainLoop+0x2f0>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e014      	b.n	8008416 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 80083ec:	4b48      	ldr	r3, [pc, #288]	; (8008510 <mainLoop+0x2e0>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d105      	bne.n	8008400 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 80083f4:	4a50      	ldr	r2, [pc, #320]	; (8008538 <mainLoop+0x308>)
 80083f6:	2101      	movs	r1, #1
 80083f8:	2002      	movs	r0, #2
 80083fa:	f7f8 f935 	bl	8000668 <lcd_print>
 80083fe:	e008      	b.n	8008412 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8008400:	4b43      	ldr	r3, [pc, #268]	; (8008510 <mainLoop+0x2e0>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d104      	bne.n	8008412 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8008408:	4a4c      	ldr	r2, [pc, #304]	; (800853c <mainLoop+0x30c>)
 800840a:	2101      	movs	r1, #1
 800840c:	2002      	movs	r0, #2
 800840e:	f7f8 f92b 	bl	8000668 <lcd_print>
			  }
			  lcd_clear();
 8008412:	f7f8 f955 	bl	80006c0 <lcd_clear>
		  }

		  lcd_clear();
 8008416:	f7f8 f953 	bl	80006c0 <lcd_clear>

		  eepromKontrol(1);
 800841a:	2001      	movs	r0, #1
 800841c:	f7fd fac4 	bl	80059a8 <eepromKontrol>
		  hafizaOku=1;
 8008420:	4b3e      	ldr	r3, [pc, #248]	; (800851c <mainLoop+0x2ec>)
 8008422:	2201      	movs	r2, #1
 8008424:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008426:	4b46      	ldr	r3, [pc, #280]	; (8008540 <mainLoop+0x310>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d11c      	bne.n	8008468 <mainLoop+0x238>
 800842e:	4b45      	ldr	r3, [pc, #276]	; (8008544 <mainLoop+0x314>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f083 0301 	eor.w	r3, r3, #1
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d015      	beq.n	8008468 <mainLoop+0x238>
 800843c:	4b42      	ldr	r3, [pc, #264]	; (8008548 <mainLoop+0x318>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d111      	bne.n	8008468 <mainLoop+0x238>
			lcd_clear();
 8008444:	f7f8 f93c 	bl	80006c0 <lcd_clear>
			HAL_Delay(10);
 8008448:	200a      	movs	r0, #10
 800844a:	f000 fe15 	bl	8009078 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800844e:	4a3f      	ldr	r2, [pc, #252]	; (800854c <mainLoop+0x31c>)
 8008450:	2101      	movs	r1, #1
 8008452:	2001      	movs	r0, #1
 8008454:	f7f8 f908 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008458:	4a3d      	ldr	r2, [pc, #244]	; (8008550 <mainLoop+0x320>)
 800845a:	2101      	movs	r1, #1
 800845c:	2002      	movs	r0, #2
 800845e:	f7f8 f903 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8008462:	4b38      	ldr	r3, [pc, #224]	; (8008544 <mainLoop+0x314>)
 8008464:	2201      	movs	r2, #1
 8008466:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008468:	4b35      	ldr	r3, [pc, #212]	; (8008540 <mainLoop+0x310>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d112      	bne.n	8008496 <mainLoop+0x266>
 8008470:	2102      	movs	r1, #2
 8008472:	481f      	ldr	r0, [pc, #124]	; (80084f0 <mainLoop+0x2c0>)
 8008474:	f001 fbd0 	bl	8009c18 <HAL_GPIO_ReadPin>
 8008478:	4603      	mov	r3, r0
 800847a:	2b01      	cmp	r3, #1
 800847c:	d10b      	bne.n	8008496 <mainLoop+0x266>
 800847e:	2104      	movs	r1, #4
 8008480:	481b      	ldr	r0, [pc, #108]	; (80084f0 <mainLoop+0x2c0>)
 8008482:	f001 fbc9 	bl	8009c18 <HAL_GPIO_ReadPin>
 8008486:	4603      	mov	r3, r0
 8008488:	2b01      	cmp	r3, #1
 800848a:	d104      	bne.n	8008496 <mainLoop+0x266>
			menuGiris=1;
 800848c:	4b2c      	ldr	r3, [pc, #176]	; (8008540 <mainLoop+0x310>)
 800848e:	2201      	movs	r2, #1
 8008490:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008492:	f7f8 f915 	bl	80006c0 <lcd_clear>
		}

		if(menuGiris==1) {
 8008496:	4b2a      	ldr	r3, [pc, #168]	; (8008540 <mainLoop+0x310>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d102      	bne.n	80084a4 <mainLoop+0x274>
			menu(&hi2c1);
 800849e:	481a      	ldr	r0, [pc, #104]	; (8008508 <mainLoop+0x2d8>)
 80084a0:	f7f8 fff0 	bl	8001484 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80084a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084a8:	4812      	ldr	r0, [pc, #72]	; (80084f4 <mainLoop+0x2c4>)
 80084aa:	f001 fbe4 	bl	8009c76 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80084ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084b2:	4828      	ldr	r0, [pc, #160]	; (8008554 <mainLoop+0x324>)
 80084b4:	f001 fbb0 	bl	8009c18 <HAL_GPIO_ReadPin>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <mainLoop+0x2a4>
 80084be:	4b26      	ldr	r3, [pc, #152]	; (8008558 <mainLoop+0x328>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f083 0301 	eor.w	r3, r3, #1
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <mainLoop+0x2a4>
			stopVar=1;
 80084cc:	4b23      	ldr	r3, [pc, #140]	; (800855c <mainLoop+0x32c>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	e002      	b.n	80084da <mainLoop+0x2aa>
		} else {
			stopVar=0;
 80084d4:	4b21      	ldr	r3, [pc, #132]	; (800855c <mainLoop+0x32c>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80084da:	f7fd fec9 	bl	8006270 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80084de:	f7fd fefb 	bl	80062d8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80084e2:	f7fd ff3f 	bl	8006364 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80084e6:	f7fd ff8f 	bl	8006408 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80084ea:	f7ff fadd 	bl	8007aa8 <checkDemoModCalisma>
		checkLCDBacklight();
 80084ee:	e6a2      	b.n	8008236 <mainLoop+0x6>
 80084f0:	40010800 	.word	0x40010800
 80084f4:	40011000 	.word	0x40011000
 80084f8:	20000c78 	.word	0x20000c78
 80084fc:	20000bd4 	.word	0x20000bd4
 8008500:	20000bf0 	.word	0x20000bf0
 8008504:	20000c75 	.word	0x20000c75
 8008508:	20000e08 	.word	0x20000e08
 800850c:	20000b38 	.word	0x20000b38
 8008510:	20000c6a 	.word	0x20000c6a
 8008514:	0800e458 	.word	0x0800e458
 8008518:	0800e46c 	.word	0x0800e46c
 800851c:	20000c76 	.word	0x20000c76
 8008520:	20000c77 	.word	0x20000c77
 8008524:	0800e480 	.word	0x0800e480
 8008528:	0800e494 	.word	0x0800e494
 800852c:	0800e4a8 	.word	0x0800e4a8
 8008530:	0800e4bc 	.word	0x0800e4bc
 8008534:	0800e4d0 	.word	0x0800e4d0
 8008538:	0800e4e4 	.word	0x0800e4e4
 800853c:	0800e4f8 	.word	0x0800e4f8
 8008540:	20000c66 	.word	0x20000c66
 8008544:	20000c7d 	.word	0x20000c7d
 8008548:	20000c67 	.word	0x20000c67
 800854c:	0800e3bc 	.word	0x0800e3bc
 8008550:	0800e3d0 	.word	0x0800e3d0
 8008554:	40010c00 	.word	0x40010c00
 8008558:	20000c9e 	.word	0x20000c9e
 800855c:	20000c9b 	.word	0x20000c9b

08008560 <convertAndSave>:
	}
}

void convertAndSave(const char* writeArray, int state) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b08a      	sub	sp, #40	; 0x28
 8008564:	af04      	add	r7, sp, #16
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
	int arrayLength = strlen(writeArray);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7f7 fe5a 	bl	8000224 <strlen>
 8008570:	4603      	mov	r3, r0
 8008572:	60bb      	str	r3, [r7, #8]
	int loopVal;

	if(state == 0) {
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d12c      	bne.n	80085d4 <convertAndSave+0x74>
		loopVal = 60;
 800857a:	233c      	movs	r3, #60	; 0x3c
 800857c:	617b      	str	r3, [r7, #20]
		for(int i=0; i<arrayLength; i++) {
 800857e:	2300      	movs	r3, #0
 8008580:	613b      	str	r3, [r7, #16]
 8008582:	e023      	b.n	80085cc <convertAndSave+0x6c>
			for(int j=0; j<strlen(numbersArray); j++) {
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	e016      	b.n	80085b8 <convertAndSave+0x58>
				if(writeArray[i] == numbersArray[j]) {
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	781a      	ldrb	r2, [r3, #0]
 8008592:	491c      	ldr	r1, [pc, #112]	; (8008604 <convertAndSave+0xa4>)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	440b      	add	r3, r1
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d109      	bne.n	80085b2 <convertAndSave+0x52>
					eepromData[loopVal] = j;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	b2d9      	uxtb	r1, r3
 80085a2:	4a19      	ldr	r2, [pc, #100]	; (8008608 <convertAndSave+0xa8>)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	4413      	add	r3, r2
 80085a8:	460a      	mov	r2, r1
 80085aa:	701a      	strb	r2, [r3, #0]
					loopVal++;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3301      	adds	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]
			for(int j=0; j<strlen(numbersArray); j++) {
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	4812      	ldr	r0, [pc, #72]	; (8008604 <convertAndSave+0xa4>)
 80085ba:	f7f7 fe33 	bl	8000224 <strlen>
 80085be:	4602      	mov	r2, r0
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d8e1      	bhi.n	800858a <convertAndSave+0x2a>
		for(int i=0; i<arrayLength; i++) {
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	3301      	adds	r3, #1
 80085ca:	613b      	str	r3, [r7, #16]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	dbd7      	blt.n	8008584 <convertAndSave+0x24>
				}
			}
		}
	}

	HAL_Delay(200);
 80085d4:	20c8      	movs	r0, #200	; 0xc8
 80085d6:	f000 fd4f 	bl	8009078 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1,0xA0,0,145,&eepromData[0],145,3000);
 80085da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085de:	9302      	str	r3, [sp, #8]
 80085e0:	2391      	movs	r3, #145	; 0x91
 80085e2:	9301      	str	r3, [sp, #4]
 80085e4:	4b08      	ldr	r3, [pc, #32]	; (8008608 <convertAndSave+0xa8>)
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	2391      	movs	r3, #145	; 0x91
 80085ea:	2200      	movs	r2, #0
 80085ec:	21a0      	movs	r1, #160	; 0xa0
 80085ee:	4807      	ldr	r0, [pc, #28]	; (800860c <convertAndSave+0xac>)
 80085f0:	f001 fdcc 	bl	800a18c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80085f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085f8:	f000 fd3e 	bl	8009078 <HAL_Delay>
}
 80085fc:	bf00      	nop
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200009b4 	.word	0x200009b4
 8008608:	20000b38 	.word	0x20000b38
 800860c:	20000e08 	.word	0x20000e08

08008610 <saveAndConvert>:

void saveAndConvert(int state) {
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af04      	add	r7, sp, #16
 8008616:	6078      	str	r0, [r7, #4]
	int loopVal;

	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 145, eepromData, 145, 3000);
 8008618:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800861c:	9302      	str	r3, [sp, #8]
 800861e:	2391      	movs	r3, #145	; 0x91
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	4b1a      	ldr	r3, [pc, #104]	; (800868c <saveAndConvert+0x7c>)
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	2391      	movs	r3, #145	; 0x91
 8008628:	2200      	movs	r2, #0
 800862a:	21a0      	movs	r1, #160	; 0xa0
 800862c:	4818      	ldr	r0, [pc, #96]	; (8008690 <saveAndConvert+0x80>)
 800862e:	f001 fea7 	bl	800a380 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8008632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008636:	f000 fd1f 	bl	8009078 <HAL_Delay>

	if(state == 0) {
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d121      	bne.n	8008684 <saveAndConvert+0x74>
		loopVal = 60;
 8008640:	233c      	movs	r3, #60	; 0x3c
 8008642:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<12; i++) {
 8008644:	2300      	movs	r3, #0
 8008646:	60bb      	str	r3, [r7, #8]
 8008648:	e019      	b.n	800867e <saveAndConvert+0x6e>
			if(eepromData[loopVal] != '\0') {
 800864a:	4a10      	ldr	r2, [pc, #64]	; (800868c <saveAndConvert+0x7c>)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <saveAndConvert+0x68>
				machineID[i] = getNumbersFromCursorPosition(eepromData[loopVal]);
 8008656:	4a0d      	ldr	r2, [pc, #52]	; (800868c <saveAndConvert+0x7c>)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4413      	add	r3, r2
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f7f8 faae 	bl	8000bc0 <getNumbersFromCursorPosition>
 8008664:	4603      	mov	r3, r0
 8008666:	4619      	mov	r1, r3
 8008668:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <saveAndConvert+0x84>)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	4413      	add	r3, r2
 800866e:	460a      	mov	r2, r1
 8008670:	701a      	strb	r2, [r3, #0]
				loopVal++;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3301      	adds	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<12; i++) {
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3301      	adds	r3, #1
 800867c:	60bb      	str	r3, [r7, #8]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b0b      	cmp	r3, #11
 8008682:	dde2      	ble.n	800864a <saveAndConvert+0x3a>
			}
		}
	}
}
 8008684:	bf00      	nop
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000b38 	.word	0x20000b38
 8008690:	20000e08 	.word	0x20000e08
 8008694:	20000bf4 	.word	0x20000bf4

08008698 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	4a03      	ldr	r2, [pc, #12]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80086a8:	6013      	str	r3, [r2, #0]
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bc80      	pop	{r7}
 80086b2:	4770      	bx	lr
 80086b4:	20000bd4 	.word	0x20000bd4

080086b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80086bc:	f000 fc7a 	bl	8008fb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80086c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086c4:	f000 fcd8 	bl	8009078 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80086c8:	f000 f8aa 	bl	8008820 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80086cc:	f000 f9cc 	bl	8008a68 <MX_GPIO_Init>
  MX_CAN_Init();
 80086d0:	f000 f8ec 	bl	80088ac <MX_CAN_Init>
  MX_I2C1_Init();
 80086d4:	f000 f91e 	bl	8008914 <MX_I2C1_Init>
  MX_TIM1_Init();
 80086d8:	f000 f94a 	bl	8008970 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80086dc:	f000 f99a 	bl	8008a14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80086e0:	2201      	movs	r2, #1
 80086e2:	2140      	movs	r1, #64	; 0x40
 80086e4:	4844      	ldr	r0, [pc, #272]	; (80087f8 <main+0x140>)
 80086e6:	f001 faae 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80086ea:	2201      	movs	r2, #1
 80086ec:	2180      	movs	r1, #128	; 0x80
 80086ee:	4842      	ldr	r0, [pc, #264]	; (80087f8 <main+0x140>)
 80086f0:	f001 faa9 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80086f4:	200a      	movs	r0, #10
 80086f6:	f000 fcbf 	bl	8009078 <HAL_Delay>
  lcd_init();
 80086fa:	f7f7 ff83 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 80086fe:	200a      	movs	r0, #10
 8008700:	f000 fcba 	bl	8009078 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008704:	483d      	ldr	r0, [pc, #244]	; (80087fc <main+0x144>)
 8008706:	f003 f951 	bl	800b9ac <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800870a:	bf00      	nop
 800870c:	483c      	ldr	r0, [pc, #240]	; (8008800 <main+0x148>)
 800870e:	f002 f8ac 	bl	800a86a <HAL_I2C_GetError>
 8008712:	4603      	mov	r3, r0
 8008714:	2b04      	cmp	r3, #4
 8008716:	d0f9      	beq.n	800870c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008718:	bf00      	nop
 800871a:	4839      	ldr	r0, [pc, #228]	; (8008800 <main+0x148>)
 800871c:	f002 f898 	bl	800a850 <HAL_I2C_GetState>
 8008720:	4603      	mov	r3, r0
 8008722:	2b20      	cmp	r3, #32
 8008724:	d1f9      	bne.n	800871a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008726:	2200      	movs	r2, #0
 8008728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800872c:	4832      	ldr	r0, [pc, #200]	; (80087f8 <main+0x140>)
 800872e:	f001 fa8a 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008732:	2200      	movs	r2, #0
 8008734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008738:	482f      	ldr	r0, [pc, #188]	; (80087f8 <main+0x140>)
 800873a:	f001 fa84 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800873e:	2200      	movs	r2, #0
 8008740:	2104      	movs	r1, #4
 8008742:	482d      	ldr	r0, [pc, #180]	; (80087f8 <main+0x140>)
 8008744:	f001 fa7f 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008748:	2200      	movs	r2, #0
 800874a:	2102      	movs	r1, #2
 800874c:	482a      	ldr	r0, [pc, #168]	; (80087f8 <main+0x140>)
 800874e:	f001 fa7a 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008752:	2200      	movs	r2, #0
 8008754:	2101      	movs	r1, #1
 8008756:	4828      	ldr	r0, [pc, #160]	; (80087f8 <main+0x140>)
 8008758:	f001 fa75 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800875c:	2200      	movs	r2, #0
 800875e:	2120      	movs	r1, #32
 8008760:	4828      	ldr	r0, [pc, #160]	; (8008804 <main+0x14c>)
 8008762:	f001 fa70 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008766:	2200      	movs	r2, #0
 8008768:	2110      	movs	r1, #16
 800876a:	4826      	ldr	r0, [pc, #152]	; (8008804 <main+0x14c>)
 800876c:	f001 fa6b 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008770:	2200      	movs	r2, #0
 8008772:	2180      	movs	r1, #128	; 0x80
 8008774:	4824      	ldr	r0, [pc, #144]	; (8008808 <main+0x150>)
 8008776:	f001 fa66 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800877a:	2200      	movs	r2, #0
 800877c:	2140      	movs	r1, #64	; 0x40
 800877e:	4822      	ldr	r0, [pc, #136]	; (8008808 <main+0x150>)
 8008780:	f001 fa61 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008784:	2200      	movs	r2, #0
 8008786:	2120      	movs	r1, #32
 8008788:	481f      	ldr	r0, [pc, #124]	; (8008808 <main+0x150>)
 800878a:	f001 fa5c 	bl	8009c46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800878e:	2200      	movs	r2, #0
 8008790:	2110      	movs	r1, #16
 8008792:	481d      	ldr	r0, [pc, #116]	; (8008808 <main+0x150>)
 8008794:	f001 fa57 	bl	8009c46 <HAL_GPIO_WritePin>

  i2cTest();
 8008798:	f7fd fc9c 	bl	80060d4 <i2cTest>
  HAL_Delay(100);
 800879c:	2064      	movs	r0, #100	; 0x64
 800879e:	f000 fc6b 	bl	8009078 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80087a2:	4a1a      	ldr	r2, [pc, #104]	; (800880c <main+0x154>)
 80087a4:	2101      	movs	r1, #1
 80087a6:	2001      	movs	r0, #1
 80087a8:	f7f7 ff5e 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80087ac:	4a18      	ldr	r2, [pc, #96]	; (8008810 <main+0x158>)
 80087ae:	2101      	movs	r1, #1
 80087b0:	2002      	movs	r0, #2
 80087b2:	f7f7 ff59 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 80087b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087ba:	f000 fc5d 	bl	8009078 <HAL_Delay>
  lcd_clear();
 80087be:	f7f7 ff7f 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 80087c2:	2000      	movs	r0, #0
 80087c4:	f7fd f8f0 	bl	80059a8 <eepromKontrol>
  HAL_Delay(200);
 80087c8:	20c8      	movs	r0, #200	; 0xc8
 80087ca:	f000 fc55 	bl	8009078 <HAL_Delay>

  lcd_clear();
 80087ce:	f7f7 ff77 	bl	80006c0 <lcd_clear>
  HAL_Delay(200);
 80087d2:	20c8      	movs	r0, #200	; 0xc8
 80087d4:	f000 fc50 	bl	8009078 <HAL_Delay>

  backLightTimer = millis;
 80087d8:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <main+0x15c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a0e      	ldr	r2, [pc, #56]	; (8008818 <main+0x160>)
 80087de:	6013      	str	r3, [r2, #0]

  takeMachineID(1, &hi2c1);
 80087e0:	4907      	ldr	r1, [pc, #28]	; (8008800 <main+0x148>)
 80087e2:	2001      	movs	r0, #1
 80087e4:	f7f8 f9fc 	bl	8000be0 <takeMachineID>
  convertAndSave(machineID, 0);
 80087e8:	2100      	movs	r1, #0
 80087ea:	480c      	ldr	r0, [pc, #48]	; (800881c <main+0x164>)
 80087ec:	f7ff feb8 	bl	8008560 <convertAndSave>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80087f0:	f7ff fd1e 	bl	8008230 <mainLoop>
 80087f4:	e7fc      	b.n	80087f0 <main+0x138>
 80087f6:	bf00      	nop
 80087f8:	40010c00 	.word	0x40010c00
 80087fc:	20000e5c 	.word	0x20000e5c
 8008800:	20000e08 	.word	0x20000e08
 8008804:	40011000 	.word	0x40011000
 8008808:	40010800 	.word	0x40010800
 800880c:	0800e50c 	.word	0x0800e50c
 8008810:	0800e520 	.word	0x0800e520
 8008814:	20000bd4 	.word	0x20000bd4
 8008818:	20000bf0 	.word	0x20000bf0
 800881c:	20000bf4 	.word	0x20000bf4

08008820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b090      	sub	sp, #64	; 0x40
 8008824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008826:	f107 0318 	add.w	r3, r7, #24
 800882a:	2228      	movs	r2, #40	; 0x28
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f004 fb36 	bl	800cea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008834:	1d3b      	adds	r3, r7, #4
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	605a      	str	r2, [r3, #4]
 800883c:	609a      	str	r2, [r3, #8]
 800883e:	60da      	str	r2, [r3, #12]
 8008840:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008842:	2301      	movs	r3, #1
 8008844:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800884a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800884c:	2300      	movs	r3, #0
 800884e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008850:	2301      	movs	r3, #1
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008854:	2302      	movs	r3, #2
 8008856:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800885c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800885e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008864:	f107 0318 	add.w	r3, r7, #24
 8008868:	4618      	mov	r0, r3
 800886a:	f002 fc3f 	bl	800b0ec <HAL_RCC_OscConfig>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008874:	f000 f9a2 	bl	8008bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008878:	230f      	movs	r3, #15
 800887a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800887c:	2302      	movs	r3, #2
 800887e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800888e:	1d3b      	adds	r3, r7, #4
 8008890:	2102      	movs	r1, #2
 8008892:	4618      	mov	r0, r3
 8008894:	f002 feac 	bl	800b5f0 <HAL_RCC_ClockConfig>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800889e:	f000 f98d 	bl	8008bbc <Error_Handler>
  }
}
 80088a2:	bf00      	nop
 80088a4:	3740      	adds	r7, #64	; 0x40
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80088b0:	4b16      	ldr	r3, [pc, #88]	; (800890c <MX_CAN_Init+0x60>)
 80088b2:	4a17      	ldr	r2, [pc, #92]	; (8008910 <MX_CAN_Init+0x64>)
 80088b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80088b6:	4b15      	ldr	r3, [pc, #84]	; (800890c <MX_CAN_Init+0x60>)
 80088b8:	2210      	movs	r2, #16
 80088ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80088bc:	4b13      	ldr	r3, [pc, #76]	; (800890c <MX_CAN_Init+0x60>)
 80088be:	2200      	movs	r2, #0
 80088c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80088c2:	4b12      	ldr	r3, [pc, #72]	; (800890c <MX_CAN_Init+0x60>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80088c8:	4b10      	ldr	r3, [pc, #64]	; (800890c <MX_CAN_Init+0x60>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80088ce:	4b0f      	ldr	r3, [pc, #60]	; (800890c <MX_CAN_Init+0x60>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80088d4:	4b0d      	ldr	r3, [pc, #52]	; (800890c <MX_CAN_Init+0x60>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80088da:	4b0c      	ldr	r3, [pc, #48]	; (800890c <MX_CAN_Init+0x60>)
 80088dc:	2200      	movs	r2, #0
 80088de:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80088e0:	4b0a      	ldr	r3, [pc, #40]	; (800890c <MX_CAN_Init+0x60>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <MX_CAN_Init+0x60>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80088ec:	4b07      	ldr	r3, [pc, #28]	; (800890c <MX_CAN_Init+0x60>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80088f2:	4b06      	ldr	r3, [pc, #24]	; (800890c <MX_CAN_Init+0x60>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80088f8:	4804      	ldr	r0, [pc, #16]	; (800890c <MX_CAN_Init+0x60>)
 80088fa:	f000 fbe1 	bl	80090c0 <HAL_CAN_Init>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008904:	f000 f95a 	bl	8008bbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008908:	bf00      	nop
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20000de0 	.word	0x20000de0
 8008910:	40006400 	.word	0x40006400

08008914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008918:	4b12      	ldr	r3, [pc, #72]	; (8008964 <MX_I2C1_Init+0x50>)
 800891a:	4a13      	ldr	r2, [pc, #76]	; (8008968 <MX_I2C1_Init+0x54>)
 800891c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <MX_I2C1_Init+0x50>)
 8008920:	4a12      	ldr	r2, [pc, #72]	; (800896c <MX_I2C1_Init+0x58>)
 8008922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008924:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <MX_I2C1_Init+0x50>)
 8008926:	2200      	movs	r2, #0
 8008928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800892a:	4b0e      	ldr	r3, [pc, #56]	; (8008964 <MX_I2C1_Init+0x50>)
 800892c:	2200      	movs	r2, #0
 800892e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008930:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <MX_I2C1_Init+0x50>)
 8008932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008938:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <MX_I2C1_Init+0x50>)
 800893a:	2200      	movs	r2, #0
 800893c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800893e:	4b09      	ldr	r3, [pc, #36]	; (8008964 <MX_I2C1_Init+0x50>)
 8008940:	2200      	movs	r2, #0
 8008942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008944:	4b07      	ldr	r3, [pc, #28]	; (8008964 <MX_I2C1_Init+0x50>)
 8008946:	2200      	movs	r2, #0
 8008948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800894a:	4b06      	ldr	r3, [pc, #24]	; (8008964 <MX_I2C1_Init+0x50>)
 800894c:	2200      	movs	r2, #0
 800894e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008950:	4804      	ldr	r0, [pc, #16]	; (8008964 <MX_I2C1_Init+0x50>)
 8008952:	f001 f9a9 	bl	8009ca8 <HAL_I2C_Init>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800895c:	f000 f92e 	bl	8008bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008960:	bf00      	nop
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000e08 	.word	0x20000e08
 8008968:	40005400 	.word	0x40005400
 800896c:	00061a80 	.word	0x00061a80

08008970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008976:	f107 0308 	add.w	r3, r7, #8
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	605a      	str	r2, [r3, #4]
 8008980:	609a      	str	r2, [r3, #8]
 8008982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008984:	463b      	mov	r3, r7
 8008986:	2200      	movs	r2, #0
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800898c:	4b1f      	ldr	r3, [pc, #124]	; (8008a0c <MX_TIM1_Init+0x9c>)
 800898e:	4a20      	ldr	r2, [pc, #128]	; (8008a10 <MX_TIM1_Init+0xa0>)
 8008990:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008992:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <MX_TIM1_Init+0x9c>)
 8008994:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800899a:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <MX_TIM1_Init+0x9c>)
 800899c:	2200      	movs	r2, #0
 800899e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80089a0:	4b1a      	ldr	r3, [pc, #104]	; (8008a0c <MX_TIM1_Init+0x9c>)
 80089a2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80089a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089a8:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <MX_TIM1_Init+0x9c>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80089ae:	4b17      	ldr	r3, [pc, #92]	; (8008a0c <MX_TIM1_Init+0x9c>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089b4:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <MX_TIM1_Init+0x9c>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80089ba:	4814      	ldr	r0, [pc, #80]	; (8008a0c <MX_TIM1_Init+0x9c>)
 80089bc:	f002 ffa6 	bl	800b90c <HAL_TIM_Base_Init>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80089c6:	f000 f8f9 	bl	8008bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80089d0:	f107 0308 	add.w	r3, r7, #8
 80089d4:	4619      	mov	r1, r3
 80089d6:	480d      	ldr	r0, [pc, #52]	; (8008a0c <MX_TIM1_Init+0x9c>)
 80089d8:	f003 f950 	bl	800bc7c <HAL_TIM_ConfigClockSource>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80089e2:	f000 f8eb 	bl	8008bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089e6:	2300      	movs	r3, #0
 80089e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80089ee:	463b      	mov	r3, r7
 80089f0:	4619      	mov	r1, r3
 80089f2:	4806      	ldr	r0, [pc, #24]	; (8008a0c <MX_TIM1_Init+0x9c>)
 80089f4:	f003 fb3e 	bl	800c074 <HAL_TIMEx_MasterConfigSynchronization>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80089fe:	f000 f8dd 	bl	8008bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008a02:	bf00      	nop
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000e5c 	.word	0x20000e5c
 8008a10:	40012c00 	.word	0x40012c00

08008a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a18:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a1a:	4a12      	ldr	r2, [pc, #72]	; (8008a64 <MX_USART1_UART_Init+0x50>)
 8008a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a1e:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a26:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a2c:	4b0c      	ldr	r3, [pc, #48]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008a38:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a3a:	220c      	movs	r2, #12
 8008a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a3e:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a44:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008a4a:	4805      	ldr	r0, [pc, #20]	; (8008a60 <MX_USART1_UART_Init+0x4c>)
 8008a4c:	f003 fb90 	bl	800c170 <HAL_UART_Init>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008a56:	f000 f8b1 	bl	8008bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008a5a:	bf00      	nop
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000ea4 	.word	0x20000ea4
 8008a64:	40013800 	.word	0x40013800

08008a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a6e:	f107 0310 	add.w	r3, r7, #16
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	605a      	str	r2, [r3, #4]
 8008a78:	609a      	str	r2, [r3, #8]
 8008a7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a7c:	4b4b      	ldr	r3, [pc, #300]	; (8008bac <MX_GPIO_Init+0x144>)
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	4a4a      	ldr	r2, [pc, #296]	; (8008bac <MX_GPIO_Init+0x144>)
 8008a82:	f043 0310 	orr.w	r3, r3, #16
 8008a86:	6193      	str	r3, [r2, #24]
 8008a88:	4b48      	ldr	r3, [pc, #288]	; (8008bac <MX_GPIO_Init+0x144>)
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a94:	4b45      	ldr	r3, [pc, #276]	; (8008bac <MX_GPIO_Init+0x144>)
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	4a44      	ldr	r2, [pc, #272]	; (8008bac <MX_GPIO_Init+0x144>)
 8008a9a:	f043 0320 	orr.w	r3, r3, #32
 8008a9e:	6193      	str	r3, [r2, #24]
 8008aa0:	4b42      	ldr	r3, [pc, #264]	; (8008bac <MX_GPIO_Init+0x144>)
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	60bb      	str	r3, [r7, #8]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aac:	4b3f      	ldr	r3, [pc, #252]	; (8008bac <MX_GPIO_Init+0x144>)
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	4a3e      	ldr	r2, [pc, #248]	; (8008bac <MX_GPIO_Init+0x144>)
 8008ab2:	f043 0304 	orr.w	r3, r3, #4
 8008ab6:	6193      	str	r3, [r2, #24]
 8008ab8:	4b3c      	ldr	r3, [pc, #240]	; (8008bac <MX_GPIO_Init+0x144>)
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	607b      	str	r3, [r7, #4]
 8008ac2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ac4:	4b39      	ldr	r3, [pc, #228]	; (8008bac <MX_GPIO_Init+0x144>)
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	4a38      	ldr	r2, [pc, #224]	; (8008bac <MX_GPIO_Init+0x144>)
 8008aca:	f043 0308 	orr.w	r3, r3, #8
 8008ace:	6193      	str	r3, [r2, #24]
 8008ad0:	4b36      	ldr	r3, [pc, #216]	; (8008bac <MX_GPIO_Init+0x144>)
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 0308 	and.w	r3, r3, #8
 8008ad8:	603b      	str	r3, [r7, #0]
 8008ada:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008adc:	2200      	movs	r2, #0
 8008ade:	21f0      	movs	r1, #240	; 0xf0
 8008ae0:	4833      	ldr	r0, [pc, #204]	; (8008bb0 <MX_GPIO_Init+0x148>)
 8008ae2:	f001 f8b0 	bl	8009c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f241 0130 	movw	r1, #4144	; 0x1030
 8008aec:	4831      	ldr	r0, [pc, #196]	; (8008bb4 <MX_GPIO_Init+0x14c>)
 8008aee:	f001 f8aa 	bl	8009c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008af2:	2200      	movs	r2, #0
 8008af4:	f640 4107 	movw	r1, #3079	; 0xc07
 8008af8:	482f      	ldr	r0, [pc, #188]	; (8008bb8 <MX_GPIO_Init+0x150>)
 8008afa:	f001 f8a4 	bl	8009c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008afe:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008b02:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b0c:	f107 0310 	add.w	r3, r7, #16
 8008b10:	4619      	mov	r1, r3
 8008b12:	4828      	ldr	r0, [pc, #160]	; (8008bb4 <MX_GPIO_Init+0x14c>)
 8008b14:	f000 fe20 	bl	8009758 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008b18:	f248 130f 	movw	r3, #33039	; 0x810f
 8008b1c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b26:	f107 0310 	add.w	r3, r7, #16
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4820      	ldr	r0, [pc, #128]	; (8008bb0 <MX_GPIO_Init+0x148>)
 8008b2e:	f000 fe13 	bl	8009758 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008b32:	23f0      	movs	r3, #240	; 0xf0
 8008b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b3e:	2302      	movs	r3, #2
 8008b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b42:	f107 0310 	add.w	r3, r7, #16
 8008b46:	4619      	mov	r1, r3
 8008b48:	4819      	ldr	r0, [pc, #100]	; (8008bb0 <MX_GPIO_Init+0x148>)
 8008b4a:	f000 fe05 	bl	8009758 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008b4e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b60:	f107 0310 	add.w	r3, r7, #16
 8008b64:	4619      	mov	r1, r3
 8008b66:	4813      	ldr	r0, [pc, #76]	; (8008bb4 <MX_GPIO_Init+0x14c>)
 8008b68:	f000 fdf6 	bl	8009758 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008b6c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008b70:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b72:	2301      	movs	r3, #1
 8008b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b7e:	f107 0310 	add.w	r3, r7, #16
 8008b82:	4619      	mov	r1, r3
 8008b84:	480c      	ldr	r0, [pc, #48]	; (8008bb8 <MX_GPIO_Init+0x150>)
 8008b86:	f000 fde7 	bl	8009758 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008b8a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b98:	f107 0310 	add.w	r3, r7, #16
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4806      	ldr	r0, [pc, #24]	; (8008bb8 <MX_GPIO_Init+0x150>)
 8008ba0:	f000 fdda 	bl	8009758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008ba4:	bf00      	nop
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	40021000 	.word	0x40021000
 8008bb0:	40010800 	.word	0x40010800
 8008bb4:	40011000 	.word	0x40011000
 8008bb8:	40010c00 	.word	0x40010c00

08008bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008bc0:	bf00      	nop
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bc80      	pop	{r7}
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008bce:	4b15      	ldr	r3, [pc, #84]	; (8008c24 <HAL_MspInit+0x5c>)
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	4a14      	ldr	r2, [pc, #80]	; (8008c24 <HAL_MspInit+0x5c>)
 8008bd4:	f043 0301 	orr.w	r3, r3, #1
 8008bd8:	6193      	str	r3, [r2, #24]
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <HAL_MspInit+0x5c>)
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	60bb      	str	r3, [r7, #8]
 8008be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008be6:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <HAL_MspInit+0x5c>)
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	4a0e      	ldr	r2, [pc, #56]	; (8008c24 <HAL_MspInit+0x5c>)
 8008bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf0:	61d3      	str	r3, [r2, #28]
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <HAL_MspInit+0x5c>)
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bfa:	607b      	str	r3, [r7, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008bfe:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <HAL_MspInit+0x60>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	4a04      	ldr	r2, [pc, #16]	; (8008c28 <HAL_MspInit+0x60>)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c1a:	bf00      	nop
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bc80      	pop	{r7}
 8008c22:	4770      	bx	lr
 8008c24:	40021000 	.word	0x40021000
 8008c28:	40010000 	.word	0x40010000

08008c2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c34:	f107 0310 	add.w	r3, r7, #16
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	605a      	str	r2, [r3, #4]
 8008c3e:	609a      	str	r2, [r3, #8]
 8008c40:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a1c      	ldr	r2, [pc, #112]	; (8008cb8 <HAL_CAN_MspInit+0x8c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d131      	bne.n	8008cb0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008c4c:	4b1b      	ldr	r3, [pc, #108]	; (8008cbc <HAL_CAN_MspInit+0x90>)
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	4a1a      	ldr	r2, [pc, #104]	; (8008cbc <HAL_CAN_MspInit+0x90>)
 8008c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c56:	61d3      	str	r3, [r2, #28]
 8008c58:	4b18      	ldr	r3, [pc, #96]	; (8008cbc <HAL_CAN_MspInit+0x90>)
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c64:	4b15      	ldr	r3, [pc, #84]	; (8008cbc <HAL_CAN_MspInit+0x90>)
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	4a14      	ldr	r2, [pc, #80]	; (8008cbc <HAL_CAN_MspInit+0x90>)
 8008c6a:	f043 0304 	orr.w	r3, r3, #4
 8008c6e:	6193      	str	r3, [r2, #24]
 8008c70:	4b12      	ldr	r3, [pc, #72]	; (8008cbc <HAL_CAN_MspInit+0x90>)
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	60bb      	str	r3, [r7, #8]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c8a:	f107 0310 	add.w	r3, r7, #16
 8008c8e:	4619      	mov	r1, r3
 8008c90:	480b      	ldr	r0, [pc, #44]	; (8008cc0 <HAL_CAN_MspInit+0x94>)
 8008c92:	f000 fd61 	bl	8009758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ca4:	f107 0310 	add.w	r3, r7, #16
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4805      	ldr	r0, [pc, #20]	; (8008cc0 <HAL_CAN_MspInit+0x94>)
 8008cac:	f000 fd54 	bl	8009758 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008cb0:	bf00      	nop
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	40006400 	.word	0x40006400
 8008cbc:	40021000 	.word	0x40021000
 8008cc0:	40010800 	.word	0x40010800

08008cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ccc:	f107 0310 	add.w	r3, r7, #16
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a15      	ldr	r2, [pc, #84]	; (8008d34 <HAL_I2C_MspInit+0x70>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d123      	bne.n	8008d2c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ce4:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <HAL_I2C_MspInit+0x74>)
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	4a13      	ldr	r2, [pc, #76]	; (8008d38 <HAL_I2C_MspInit+0x74>)
 8008cea:	f043 0308 	orr.w	r3, r3, #8
 8008cee:	6193      	str	r3, [r2, #24]
 8008cf0:	4b11      	ldr	r3, [pc, #68]	; (8008d38 <HAL_I2C_MspInit+0x74>)
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	f003 0308 	and.w	r3, r3, #8
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008cfc:	23c0      	movs	r3, #192	; 0xc0
 8008cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d00:	2312      	movs	r3, #18
 8008d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d04:	2303      	movs	r3, #3
 8008d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d08:	f107 0310 	add.w	r3, r7, #16
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	480b      	ldr	r0, [pc, #44]	; (8008d3c <HAL_I2C_MspInit+0x78>)
 8008d10:	f000 fd22 	bl	8009758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d14:	4b08      	ldr	r3, [pc, #32]	; (8008d38 <HAL_I2C_MspInit+0x74>)
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	4a07      	ldr	r2, [pc, #28]	; (8008d38 <HAL_I2C_MspInit+0x74>)
 8008d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d1e:	61d3      	str	r3, [r2, #28]
 8008d20:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <HAL_I2C_MspInit+0x74>)
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d28:	60bb      	str	r3, [r7, #8]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d2c:	bf00      	nop
 8008d2e:	3720      	adds	r7, #32
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	40005400 	.word	0x40005400
 8008d38:	40021000 	.word	0x40021000
 8008d3c:	40010c00 	.word	0x40010c00

08008d40 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a0a      	ldr	r2, [pc, #40]	; (8008d78 <HAL_I2C_MspDeInit+0x38>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d10d      	bne.n	8008d6e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008d52:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <HAL_I2C_MspDeInit+0x3c>)
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	4a09      	ldr	r2, [pc, #36]	; (8008d7c <HAL_I2C_MspDeInit+0x3c>)
 8008d58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d5c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008d5e:	2140      	movs	r1, #64	; 0x40
 8008d60:	4807      	ldr	r0, [pc, #28]	; (8008d80 <HAL_I2C_MspDeInit+0x40>)
 8008d62:	f000 fe8d 	bl	8009a80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008d66:	2180      	movs	r1, #128	; 0x80
 8008d68:	4805      	ldr	r0, [pc, #20]	; (8008d80 <HAL_I2C_MspDeInit+0x40>)
 8008d6a:	f000 fe89 	bl	8009a80 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	40005400 	.word	0x40005400
 8008d7c:	40021000 	.word	0x40021000
 8008d80:	40010c00 	.word	0x40010c00

08008d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0d      	ldr	r2, [pc, #52]	; (8008dc8 <HAL_TIM_Base_MspInit+0x44>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d113      	bne.n	8008dbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008d96:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <HAL_TIM_Base_MspInit+0x48>)
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	4a0c      	ldr	r2, [pc, #48]	; (8008dcc <HAL_TIM_Base_MspInit+0x48>)
 8008d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008da0:	6193      	str	r3, [r2, #24]
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <HAL_TIM_Base_MspInit+0x48>)
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008dae:	2200      	movs	r2, #0
 8008db0:	2100      	movs	r1, #0
 8008db2:	2019      	movs	r0, #25
 8008db4:	f000 fb57 	bl	8009466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008db8:	2019      	movs	r0, #25
 8008dba:	f000 fb70 	bl	800949e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008dbe:	bf00      	nop
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40012c00 	.word	0x40012c00
 8008dcc:	40021000 	.word	0x40021000

08008dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dd8:	f107 0310 	add.w	r3, r7, #16
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	605a      	str	r2, [r3, #4]
 8008de2:	609a      	str	r2, [r3, #8]
 8008de4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a20      	ldr	r2, [pc, #128]	; (8008e6c <HAL_UART_MspInit+0x9c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d139      	bne.n	8008e64 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008df0:	4b1f      	ldr	r3, [pc, #124]	; (8008e70 <HAL_UART_MspInit+0xa0>)
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <HAL_UART_MspInit+0xa0>)
 8008df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dfa:	6193      	str	r3, [r2, #24]
 8008dfc:	4b1c      	ldr	r3, [pc, #112]	; (8008e70 <HAL_UART_MspInit+0xa0>)
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e08:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <HAL_UART_MspInit+0xa0>)
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	4a18      	ldr	r2, [pc, #96]	; (8008e70 <HAL_UART_MspInit+0xa0>)
 8008e0e:	f043 0304 	orr.w	r3, r3, #4
 8008e12:	6193      	str	r3, [r2, #24]
 8008e14:	4b16      	ldr	r3, [pc, #88]	; (8008e70 <HAL_UART_MspInit+0xa0>)
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	60bb      	str	r3, [r7, #8]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e26:	2302      	movs	r3, #2
 8008e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e2e:	f107 0310 	add.w	r3, r7, #16
 8008e32:	4619      	mov	r1, r3
 8008e34:	480f      	ldr	r0, [pc, #60]	; (8008e74 <HAL_UART_MspInit+0xa4>)
 8008e36:	f000 fc8f 	bl	8009758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e48:	f107 0310 	add.w	r3, r7, #16
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4809      	ldr	r0, [pc, #36]	; (8008e74 <HAL_UART_MspInit+0xa4>)
 8008e50:	f000 fc82 	bl	8009758 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008e54:	2200      	movs	r2, #0
 8008e56:	2100      	movs	r1, #0
 8008e58:	2025      	movs	r0, #37	; 0x25
 8008e5a:	f000 fb04 	bl	8009466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008e5e:	2025      	movs	r0, #37	; 0x25
 8008e60:	f000 fb1d 	bl	800949e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008e64:	bf00      	nop
 8008e66:	3720      	adds	r7, #32
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	40013800 	.word	0x40013800
 8008e70:	40021000 	.word	0x40021000
 8008e74:	40010800 	.word	0x40010800

08008e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008e7c:	e7fe      	b.n	8008e7c <NMI_Handler+0x4>

08008e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e82:	e7fe      	b.n	8008e82 <HardFault_Handler+0x4>

08008e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e88:	e7fe      	b.n	8008e88 <MemManage_Handler+0x4>

08008e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008e8e:	e7fe      	b.n	8008e8e <BusFault_Handler+0x4>

08008e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008e90:	b480      	push	{r7}
 8008e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008e94:	e7fe      	b.n	8008e94 <UsageFault_Handler+0x4>

08008e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008e96:	b480      	push	{r7}
 8008e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008e9a:	bf00      	nop
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr

08008ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ea6:	bf00      	nop
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr

08008eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008eb2:	bf00      	nop
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bc80      	pop	{r7}
 8008eb8:	4770      	bx	lr

08008eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ebe:	f000 f8bf 	bl	8009040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ec2:	bf00      	nop
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008ecc:	4802      	ldr	r0, [pc, #8]	; (8008ed8 <TIM1_UP_IRQHandler+0x10>)
 8008ece:	f002 fdcd 	bl	800ba6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008ed2:	bf00      	nop
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20000e5c 	.word	0x20000e5c

08008edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ee0:	4802      	ldr	r0, [pc, #8]	; (8008eec <USART1_IRQHandler+0x10>)
 8008ee2:	f003 f9cb 	bl	800c27c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ee6:	bf00      	nop
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20000ea4 	.word	0x20000ea4

08008ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ef8:	4a14      	ldr	r2, [pc, #80]	; (8008f4c <_sbrk+0x5c>)
 8008efa:	4b15      	ldr	r3, [pc, #84]	; (8008f50 <_sbrk+0x60>)
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f04:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <_sbrk+0x64>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d102      	bne.n	8008f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f0c:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <_sbrk+0x64>)
 8008f0e:	4a12      	ldr	r2, [pc, #72]	; (8008f58 <_sbrk+0x68>)
 8008f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f12:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <_sbrk+0x64>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4413      	add	r3, r2
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d207      	bcs.n	8008f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f20:	f003 ffe6 	bl	800cef0 <__errno>
 8008f24:	4603      	mov	r3, r0
 8008f26:	220c      	movs	r2, #12
 8008f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2e:	e009      	b.n	8008f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f30:	4b08      	ldr	r3, [pc, #32]	; (8008f54 <_sbrk+0x64>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <_sbrk+0x64>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	4a05      	ldr	r2, [pc, #20]	; (8008f54 <_sbrk+0x64>)
 8008f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f42:	68fb      	ldr	r3, [r7, #12]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	2000c000 	.word	0x2000c000
 8008f50:	00000400 	.word	0x00000400
 8008f54:	20000eec 	.word	0x20000eec
 8008f58:	20001040 	.word	0x20001040

08008f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008f60:	bf00      	nop
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bc80      	pop	{r7}
 8008f66:	4770      	bx	lr

08008f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008f68:	480c      	ldr	r0, [pc, #48]	; (8008f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008f6a:	490d      	ldr	r1, [pc, #52]	; (8008fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008f6c:	4a0d      	ldr	r2, [pc, #52]	; (8008fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f70:	e002      	b.n	8008f78 <LoopCopyDataInit>

08008f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f76:	3304      	adds	r3, #4

08008f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f7c:	d3f9      	bcc.n	8008f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f7e:	4a0a      	ldr	r2, [pc, #40]	; (8008fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008f80:	4c0a      	ldr	r4, [pc, #40]	; (8008fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8008f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f84:	e001      	b.n	8008f8a <LoopFillZerobss>

08008f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f88:	3204      	adds	r2, #4

08008f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f8c:	d3fb      	bcc.n	8008f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008f8e:	f7ff ffe5 	bl	8008f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f92:	f003 ffb3 	bl	800cefc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008f96:	f7ff fb8f 	bl	80086b8 <main>
  bx lr
 8008f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8008f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008fa0:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8008fa4:	0800e5c0 	.word	0x0800e5c0
  ldr r2, =_sbss
 8008fa8:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8008fac:	2000103c 	.word	0x2000103c

08008fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008fb0:	e7fe      	b.n	8008fb0 <ADC1_2_IRQHandler>
	...

08008fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008fb8:	4b08      	ldr	r3, [pc, #32]	; (8008fdc <HAL_Init+0x28>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a07      	ldr	r2, [pc, #28]	; (8008fdc <HAL_Init+0x28>)
 8008fbe:	f043 0310 	orr.w	r3, r3, #16
 8008fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fc4:	2003      	movs	r0, #3
 8008fc6:	f000 fa43 	bl	8009450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008fca:	200f      	movs	r0, #15
 8008fcc:	f000 f808 	bl	8008fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008fd0:	f7ff fdfa 	bl	8008bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40022000 	.word	0x40022000

08008fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008fe8:	4b12      	ldr	r3, [pc, #72]	; (8009034 <HAL_InitTick+0x54>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	4b12      	ldr	r3, [pc, #72]	; (8009038 <HAL_InitTick+0x58>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fa5b 	bl	80094ba <HAL_SYSTICK_Config>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e00e      	b.n	800902c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b0f      	cmp	r3, #15
 8009012:	d80a      	bhi.n	800902a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009014:	2200      	movs	r2, #0
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	f000 fa23 	bl	8009466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009020:	4a06      	ldr	r2, [pc, #24]	; (800903c <HAL_InitTick+0x5c>)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	e000      	b.n	800902c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	200009c4 	.word	0x200009c4
 8009038:	200009cc 	.word	0x200009cc
 800903c:	200009c8 	.word	0x200009c8

08009040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009044:	4b05      	ldr	r3, [pc, #20]	; (800905c <HAL_IncTick+0x1c>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <HAL_IncTick+0x20>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4413      	add	r3, r2
 8009050:	4a03      	ldr	r2, [pc, #12]	; (8009060 <HAL_IncTick+0x20>)
 8009052:	6013      	str	r3, [r2, #0]
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr
 800905c:	200009cc 	.word	0x200009cc
 8009060:	20000ef0 	.word	0x20000ef0

08009064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009064:	b480      	push	{r7}
 8009066:	af00      	add	r7, sp, #0
  return uwTick;
 8009068:	4b02      	ldr	r3, [pc, #8]	; (8009074 <HAL_GetTick+0x10>)
 800906a:	681b      	ldr	r3, [r3, #0]
}
 800906c:	4618      	mov	r0, r3
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr
 8009074:	20000ef0 	.word	0x20000ef0

08009078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009080:	f7ff fff0 	bl	8009064 <HAL_GetTick>
 8009084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009090:	d005      	beq.n	800909e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009092:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <HAL_Delay+0x44>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4413      	add	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800909e:	bf00      	nop
 80090a0:	f7ff ffe0 	bl	8009064 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d8f7      	bhi.n	80090a0 <HAL_Delay+0x28>
  {
  }
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	200009cc 	.word	0x200009cc

080090c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e0ed      	b.n	80092ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff fda4 	bl	8008c2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0201 	orr.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090f4:	f7ff ffb6 	bl	8009064 <HAL_GetTick>
 80090f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80090fa:	e012      	b.n	8009122 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80090fc:	f7ff ffb2 	bl	8009064 <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	2b0a      	cmp	r3, #10
 8009108:	d90b      	bls.n	8009122 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2205      	movs	r2, #5
 800911a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e0c5      	b.n	80092ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0e5      	beq.n	80090fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 0202 	bic.w	r2, r2, #2
 800913e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009140:	f7ff ff90 	bl	8009064 <HAL_GetTick>
 8009144:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009146:	e012      	b.n	800916e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009148:	f7ff ff8c 	bl	8009064 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b0a      	cmp	r3, #10
 8009154:	d90b      	bls.n	800916e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2205      	movs	r2, #5
 8009166:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e09f      	b.n	80092ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e5      	bne.n	8009148 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7e1b      	ldrb	r3, [r3, #24]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d108      	bne.n	8009196 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e007      	b.n	80091a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	7e5b      	ldrb	r3, [r3, #25]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d108      	bne.n	80091c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	e007      	b.n	80091d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	7e9b      	ldrb	r3, [r3, #26]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d108      	bne.n	80091ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0220 	orr.w	r2, r2, #32
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	e007      	b.n	80091fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 0220 	bic.w	r2, r2, #32
 80091f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7edb      	ldrb	r3, [r3, #27]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d108      	bne.n	8009214 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0210 	bic.w	r2, r2, #16
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	e007      	b.n	8009224 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0210 	orr.w	r2, r2, #16
 8009222:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	7f1b      	ldrb	r3, [r3, #28]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d108      	bne.n	800923e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0208 	orr.w	r2, r2, #8
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	e007      	b.n	800924e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 0208 	bic.w	r2, r2, #8
 800924c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	7f5b      	ldrb	r3, [r3, #29]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d108      	bne.n	8009268 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f042 0204 	orr.w	r2, r2, #4
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	e007      	b.n	8009278 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 0204 	bic.w	r2, r2, #4
 8009276:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	431a      	orrs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	ea42 0103 	orr.w	r1, r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	1e5a      	subs	r2, r3, #1
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	430a      	orrs	r2, r1
 800929c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <__NVIC_SetPriorityGrouping>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <__NVIC_SetPriorityGrouping+0x44>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80092d4:	4013      	ands	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80092e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80092e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80092ea:	4a04      	ldr	r2, [pc, #16]	; (80092fc <__NVIC_SetPriorityGrouping+0x44>)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	60d3      	str	r3, [r2, #12]
}
 80092f0:	bf00      	nop
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bc80      	pop	{r7}
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	e000ed00 	.word	0xe000ed00

08009300 <__NVIC_GetPriorityGrouping>:
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <__NVIC_GetPriorityGrouping+0x18>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	0a1b      	lsrs	r3, r3, #8
 800930a:	f003 0307 	and.w	r3, r3, #7
}
 800930e:	4618      	mov	r0, r3
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	e000ed00 	.word	0xe000ed00

0800931c <__NVIC_EnableIRQ>:
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800932a:	2b00      	cmp	r3, #0
 800932c:	db0b      	blt.n	8009346 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	f003 021f 	and.w	r2, r3, #31
 8009334:	4906      	ldr	r1, [pc, #24]	; (8009350 <__NVIC_EnableIRQ+0x34>)
 8009336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	2001      	movs	r0, #1
 800933e:	fa00 f202 	lsl.w	r2, r0, r2
 8009342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr
 8009350:	e000e100 	.word	0xe000e100

08009354 <__NVIC_SetPriority>:
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	6039      	str	r1, [r7, #0]
 800935e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009364:	2b00      	cmp	r3, #0
 8009366:	db0a      	blt.n	800937e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	b2da      	uxtb	r2, r3
 800936c:	490c      	ldr	r1, [pc, #48]	; (80093a0 <__NVIC_SetPriority+0x4c>)
 800936e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009372:	0112      	lsls	r2, r2, #4
 8009374:	b2d2      	uxtb	r2, r2
 8009376:	440b      	add	r3, r1
 8009378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800937c:	e00a      	b.n	8009394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	b2da      	uxtb	r2, r3
 8009382:	4908      	ldr	r1, [pc, #32]	; (80093a4 <__NVIC_SetPriority+0x50>)
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	3b04      	subs	r3, #4
 800938c:	0112      	lsls	r2, r2, #4
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	440b      	add	r3, r1
 8009392:	761a      	strb	r2, [r3, #24]
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	e000e100 	.word	0xe000e100
 80093a4:	e000ed00 	.word	0xe000ed00

080093a8 <NVIC_EncodePriority>:
{
 80093a8:	b480      	push	{r7}
 80093aa:	b089      	sub	sp, #36	; 0x24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	f1c3 0307 	rsb	r3, r3, #7
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	bf28      	it	cs
 80093c6:	2304      	movcs	r3, #4
 80093c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	3304      	adds	r3, #4
 80093ce:	2b06      	cmp	r3, #6
 80093d0:	d902      	bls.n	80093d8 <NVIC_EncodePriority+0x30>
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	3b03      	subs	r3, #3
 80093d6:	e000      	b.n	80093da <NVIC_EncodePriority+0x32>
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093dc:	f04f 32ff 	mov.w	r2, #4294967295
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	fa02 f303 	lsl.w	r3, r2, r3
 80093e6:	43da      	mvns	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	401a      	ands	r2, r3
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80093f0:	f04f 31ff 	mov.w	r1, #4294967295
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	fa01 f303 	lsl.w	r3, r1, r3
 80093fa:	43d9      	mvns	r1, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009400:	4313      	orrs	r3, r2
}
 8009402:	4618      	mov	r0, r3
 8009404:	3724      	adds	r7, #36	; 0x24
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr

0800940c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3b01      	subs	r3, #1
 8009418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800941c:	d301      	bcc.n	8009422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800941e:	2301      	movs	r3, #1
 8009420:	e00f      	b.n	8009442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009422:	4a0a      	ldr	r2, [pc, #40]	; (800944c <SysTick_Config+0x40>)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3b01      	subs	r3, #1
 8009428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800942a:	210f      	movs	r1, #15
 800942c:	f04f 30ff 	mov.w	r0, #4294967295
 8009430:	f7ff ff90 	bl	8009354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009434:	4b05      	ldr	r3, [pc, #20]	; (800944c <SysTick_Config+0x40>)
 8009436:	2200      	movs	r2, #0
 8009438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800943a:	4b04      	ldr	r3, [pc, #16]	; (800944c <SysTick_Config+0x40>)
 800943c:	2207      	movs	r2, #7
 800943e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	e000e010 	.word	0xe000e010

08009450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff ff2d 	bl	80092b8 <__NVIC_SetPriorityGrouping>
}
 800945e:	bf00      	nop
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009466:	b580      	push	{r7, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af00      	add	r7, sp, #0
 800946c:	4603      	mov	r3, r0
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	607a      	str	r2, [r7, #4]
 8009472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009478:	f7ff ff42 	bl	8009300 <__NVIC_GetPriorityGrouping>
 800947c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	6978      	ldr	r0, [r7, #20]
 8009484:	f7ff ff90 	bl	80093a8 <NVIC_EncodePriority>
 8009488:	4602      	mov	r2, r0
 800948a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff ff5f 	bl	8009354 <__NVIC_SetPriority>
}
 8009496:	bf00      	nop
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	4603      	mov	r3, r0
 80094a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff ff35 	bl	800931c <__NVIC_EnableIRQ>
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff ffa2 	bl	800940c <SysTick_Config>
 80094c8:	4603      	mov	r3, r0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d008      	beq.n	80094fc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2204      	movs	r2, #4
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e020      	b.n	800953e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 020e 	bic.w	r2, r2, #14
 800950a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f022 0201 	bic.w	r2, r2, #1
 800951a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009524:	2101      	movs	r1, #1
 8009526:	fa01 f202 	lsl.w	r2, r1, r2
 800952a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	bc80      	pop	{r7}
 8009546:	4770      	bx	lr

08009548 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	d005      	beq.n	800956c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2204      	movs	r2, #4
 8009564:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
 800956a:	e0d6      	b.n	800971a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 020e 	bic.w	r2, r2, #14
 800957a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0201 	bic.w	r2, r2, #1
 800958a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	4b64      	ldr	r3, [pc, #400]	; (8009724 <HAL_DMA_Abort_IT+0x1dc>)
 8009594:	429a      	cmp	r2, r3
 8009596:	d958      	bls.n	800964a <HAL_DMA_Abort_IT+0x102>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a62      	ldr	r2, [pc, #392]	; (8009728 <HAL_DMA_Abort_IT+0x1e0>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d04f      	beq.n	8009642 <HAL_DMA_Abort_IT+0xfa>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a61      	ldr	r2, [pc, #388]	; (800972c <HAL_DMA_Abort_IT+0x1e4>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d048      	beq.n	800963e <HAL_DMA_Abort_IT+0xf6>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a5f      	ldr	r2, [pc, #380]	; (8009730 <HAL_DMA_Abort_IT+0x1e8>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d040      	beq.n	8009638 <HAL_DMA_Abort_IT+0xf0>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a5e      	ldr	r2, [pc, #376]	; (8009734 <HAL_DMA_Abort_IT+0x1ec>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d038      	beq.n	8009632 <HAL_DMA_Abort_IT+0xea>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a5c      	ldr	r2, [pc, #368]	; (8009738 <HAL_DMA_Abort_IT+0x1f0>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d030      	beq.n	800962c <HAL_DMA_Abort_IT+0xe4>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a5b      	ldr	r2, [pc, #364]	; (800973c <HAL_DMA_Abort_IT+0x1f4>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d028      	beq.n	8009626 <HAL_DMA_Abort_IT+0xde>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a52      	ldr	r2, [pc, #328]	; (8009724 <HAL_DMA_Abort_IT+0x1dc>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d020      	beq.n	8009620 <HAL_DMA_Abort_IT+0xd8>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a57      	ldr	r2, [pc, #348]	; (8009740 <HAL_DMA_Abort_IT+0x1f8>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d019      	beq.n	800961c <HAL_DMA_Abort_IT+0xd4>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a55      	ldr	r2, [pc, #340]	; (8009744 <HAL_DMA_Abort_IT+0x1fc>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d012      	beq.n	8009618 <HAL_DMA_Abort_IT+0xd0>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a54      	ldr	r2, [pc, #336]	; (8009748 <HAL_DMA_Abort_IT+0x200>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d00a      	beq.n	8009612 <HAL_DMA_Abort_IT+0xca>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a52      	ldr	r2, [pc, #328]	; (800974c <HAL_DMA_Abort_IT+0x204>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d102      	bne.n	800960c <HAL_DMA_Abort_IT+0xc4>
 8009606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800960a:	e01b      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 800960c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009610:	e018      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 8009612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009616:	e015      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 8009618:	2310      	movs	r3, #16
 800961a:	e013      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 800961c:	2301      	movs	r3, #1
 800961e:	e011      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 8009620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009624:	e00e      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 8009626:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800962a:	e00b      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 800962c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009630:	e008      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 8009632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009636:	e005      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 8009638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800963c:	e002      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 800963e:	2310      	movs	r3, #16
 8009640:	e000      	b.n	8009644 <HAL_DMA_Abort_IT+0xfc>
 8009642:	2301      	movs	r3, #1
 8009644:	4a42      	ldr	r2, [pc, #264]	; (8009750 <HAL_DMA_Abort_IT+0x208>)
 8009646:	6053      	str	r3, [r2, #4]
 8009648:	e057      	b.n	80096fa <HAL_DMA_Abort_IT+0x1b2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a36      	ldr	r2, [pc, #216]	; (8009728 <HAL_DMA_Abort_IT+0x1e0>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d04f      	beq.n	80096f4 <HAL_DMA_Abort_IT+0x1ac>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a34      	ldr	r2, [pc, #208]	; (800972c <HAL_DMA_Abort_IT+0x1e4>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d048      	beq.n	80096f0 <HAL_DMA_Abort_IT+0x1a8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a33      	ldr	r2, [pc, #204]	; (8009730 <HAL_DMA_Abort_IT+0x1e8>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d040      	beq.n	80096ea <HAL_DMA_Abort_IT+0x1a2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a31      	ldr	r2, [pc, #196]	; (8009734 <HAL_DMA_Abort_IT+0x1ec>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d038      	beq.n	80096e4 <HAL_DMA_Abort_IT+0x19c>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a30      	ldr	r2, [pc, #192]	; (8009738 <HAL_DMA_Abort_IT+0x1f0>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d030      	beq.n	80096de <HAL_DMA_Abort_IT+0x196>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a2e      	ldr	r2, [pc, #184]	; (800973c <HAL_DMA_Abort_IT+0x1f4>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d028      	beq.n	80096d8 <HAL_DMA_Abort_IT+0x190>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a26      	ldr	r2, [pc, #152]	; (8009724 <HAL_DMA_Abort_IT+0x1dc>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d020      	beq.n	80096d2 <HAL_DMA_Abort_IT+0x18a>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a2a      	ldr	r2, [pc, #168]	; (8009740 <HAL_DMA_Abort_IT+0x1f8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d019      	beq.n	80096ce <HAL_DMA_Abort_IT+0x186>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a29      	ldr	r2, [pc, #164]	; (8009744 <HAL_DMA_Abort_IT+0x1fc>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d012      	beq.n	80096ca <HAL_DMA_Abort_IT+0x182>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a27      	ldr	r2, [pc, #156]	; (8009748 <HAL_DMA_Abort_IT+0x200>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00a      	beq.n	80096c4 <HAL_DMA_Abort_IT+0x17c>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a26      	ldr	r2, [pc, #152]	; (800974c <HAL_DMA_Abort_IT+0x204>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d102      	bne.n	80096be <HAL_DMA_Abort_IT+0x176>
 80096b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096bc:	e01b      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096c2:	e018      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096c8:	e015      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096ca:	2310      	movs	r3, #16
 80096cc:	e013      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e011      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096d6:	e00e      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80096dc:	e00b      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096e2:	e008      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096e8:	e005      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096ee:	e002      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096f0:	2310      	movs	r3, #16
 80096f2:	e000      	b.n	80096f6 <HAL_DMA_Abort_IT+0x1ae>
 80096f4:	2301      	movs	r3, #1
 80096f6:	4a17      	ldr	r2, [pc, #92]	; (8009754 <HAL_DMA_Abort_IT+0x20c>)
 80096f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
    } 
  }
  return status;
 800971a:	7bfb      	ldrb	r3, [r7, #15]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40020080 	.word	0x40020080
 8009728:	40020008 	.word	0x40020008
 800972c:	4002001c 	.word	0x4002001c
 8009730:	40020030 	.word	0x40020030
 8009734:	40020044 	.word	0x40020044
 8009738:	40020058 	.word	0x40020058
 800973c:	4002006c 	.word	0x4002006c
 8009740:	40020408 	.word	0x40020408
 8009744:	4002041c 	.word	0x4002041c
 8009748:	40020430 	.word	0x40020430
 800974c:	40020444 	.word	0x40020444
 8009750:	40020400 	.word	0x40020400
 8009754:	40020000 	.word	0x40020000

08009758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009758:	b480      	push	{r7}
 800975a:	b08b      	sub	sp, #44	; 0x2c
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009762:	2300      	movs	r3, #0
 8009764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009766:	2300      	movs	r3, #0
 8009768:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800976a:	e179      	b.n	8009a60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800976c:	2201      	movs	r2, #1
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	fa02 f303 	lsl.w	r3, r2, r3
 8009774:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	4013      	ands	r3, r2
 800977e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	429a      	cmp	r2, r3
 8009786:	f040 8168 	bne.w	8009a5a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	4a96      	ldr	r2, [pc, #600]	; (80099e8 <HAL_GPIO_Init+0x290>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d05e      	beq.n	8009852 <HAL_GPIO_Init+0xfa>
 8009794:	4a94      	ldr	r2, [pc, #592]	; (80099e8 <HAL_GPIO_Init+0x290>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d875      	bhi.n	8009886 <HAL_GPIO_Init+0x12e>
 800979a:	4a94      	ldr	r2, [pc, #592]	; (80099ec <HAL_GPIO_Init+0x294>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d058      	beq.n	8009852 <HAL_GPIO_Init+0xfa>
 80097a0:	4a92      	ldr	r2, [pc, #584]	; (80099ec <HAL_GPIO_Init+0x294>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d86f      	bhi.n	8009886 <HAL_GPIO_Init+0x12e>
 80097a6:	4a92      	ldr	r2, [pc, #584]	; (80099f0 <HAL_GPIO_Init+0x298>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d052      	beq.n	8009852 <HAL_GPIO_Init+0xfa>
 80097ac:	4a90      	ldr	r2, [pc, #576]	; (80099f0 <HAL_GPIO_Init+0x298>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d869      	bhi.n	8009886 <HAL_GPIO_Init+0x12e>
 80097b2:	4a90      	ldr	r2, [pc, #576]	; (80099f4 <HAL_GPIO_Init+0x29c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d04c      	beq.n	8009852 <HAL_GPIO_Init+0xfa>
 80097b8:	4a8e      	ldr	r2, [pc, #568]	; (80099f4 <HAL_GPIO_Init+0x29c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d863      	bhi.n	8009886 <HAL_GPIO_Init+0x12e>
 80097be:	4a8e      	ldr	r2, [pc, #568]	; (80099f8 <HAL_GPIO_Init+0x2a0>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d046      	beq.n	8009852 <HAL_GPIO_Init+0xfa>
 80097c4:	4a8c      	ldr	r2, [pc, #560]	; (80099f8 <HAL_GPIO_Init+0x2a0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d85d      	bhi.n	8009886 <HAL_GPIO_Init+0x12e>
 80097ca:	2b12      	cmp	r3, #18
 80097cc:	d82a      	bhi.n	8009824 <HAL_GPIO_Init+0xcc>
 80097ce:	2b12      	cmp	r3, #18
 80097d0:	d859      	bhi.n	8009886 <HAL_GPIO_Init+0x12e>
 80097d2:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <HAL_GPIO_Init+0x80>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	08009853 	.word	0x08009853
 80097dc:	0800982d 	.word	0x0800982d
 80097e0:	0800983f 	.word	0x0800983f
 80097e4:	08009881 	.word	0x08009881
 80097e8:	08009887 	.word	0x08009887
 80097ec:	08009887 	.word	0x08009887
 80097f0:	08009887 	.word	0x08009887
 80097f4:	08009887 	.word	0x08009887
 80097f8:	08009887 	.word	0x08009887
 80097fc:	08009887 	.word	0x08009887
 8009800:	08009887 	.word	0x08009887
 8009804:	08009887 	.word	0x08009887
 8009808:	08009887 	.word	0x08009887
 800980c:	08009887 	.word	0x08009887
 8009810:	08009887 	.word	0x08009887
 8009814:	08009887 	.word	0x08009887
 8009818:	08009887 	.word	0x08009887
 800981c:	08009835 	.word	0x08009835
 8009820:	08009849 	.word	0x08009849
 8009824:	4a75      	ldr	r2, [pc, #468]	; (80099fc <HAL_GPIO_Init+0x2a4>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d013      	beq.n	8009852 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800982a:	e02c      	b.n	8009886 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	623b      	str	r3, [r7, #32]
          break;
 8009832:	e029      	b.n	8009888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	3304      	adds	r3, #4
 800983a:	623b      	str	r3, [r7, #32]
          break;
 800983c:	e024      	b.n	8009888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	3308      	adds	r3, #8
 8009844:	623b      	str	r3, [r7, #32]
          break;
 8009846:	e01f      	b.n	8009888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	330c      	adds	r3, #12
 800984e:	623b      	str	r3, [r7, #32]
          break;
 8009850:	e01a      	b.n	8009888 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800985a:	2304      	movs	r3, #4
 800985c:	623b      	str	r3, [r7, #32]
          break;
 800985e:	e013      	b.n	8009888 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d105      	bne.n	8009874 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009868:	2308      	movs	r3, #8
 800986a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	611a      	str	r2, [r3, #16]
          break;
 8009872:	e009      	b.n	8009888 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009874:	2308      	movs	r3, #8
 8009876:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	615a      	str	r2, [r3, #20]
          break;
 800987e:	e003      	b.n	8009888 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009880:	2300      	movs	r3, #0
 8009882:	623b      	str	r3, [r7, #32]
          break;
 8009884:	e000      	b.n	8009888 <HAL_GPIO_Init+0x130>
          break;
 8009886:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	2bff      	cmp	r3, #255	; 0xff
 800988c:	d801      	bhi.n	8009892 <HAL_GPIO_Init+0x13a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	e001      	b.n	8009896 <HAL_GPIO_Init+0x13e>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3304      	adds	r3, #4
 8009896:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	2bff      	cmp	r3, #255	; 0xff
 800989c:	d802      	bhi.n	80098a4 <HAL_GPIO_Init+0x14c>
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	e002      	b.n	80098aa <HAL_GPIO_Init+0x152>
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	3b08      	subs	r3, #8
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	210f      	movs	r1, #15
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	fa01 f303 	lsl.w	r3, r1, r3
 80098b8:	43db      	mvns	r3, r3
 80098ba:	401a      	ands	r2, r3
 80098bc:	6a39      	ldr	r1, [r7, #32]
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	fa01 f303 	lsl.w	r3, r1, r3
 80098c4:	431a      	orrs	r2, r3
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 80c1 	beq.w	8009a5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80098d8:	4b49      	ldr	r3, [pc, #292]	; (8009a00 <HAL_GPIO_Init+0x2a8>)
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	4a48      	ldr	r2, [pc, #288]	; (8009a00 <HAL_GPIO_Init+0x2a8>)
 80098de:	f043 0301 	orr.w	r3, r3, #1
 80098e2:	6193      	str	r3, [r2, #24]
 80098e4:	4b46      	ldr	r3, [pc, #280]	; (8009a00 <HAL_GPIO_Init+0x2a8>)
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	60bb      	str	r3, [r7, #8]
 80098ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80098f0:	4a44      	ldr	r2, [pc, #272]	; (8009a04 <HAL_GPIO_Init+0x2ac>)
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	089b      	lsrs	r3, r3, #2
 80098f6:	3302      	adds	r3, #2
 80098f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	220f      	movs	r2, #15
 8009908:	fa02 f303 	lsl.w	r3, r2, r3
 800990c:	43db      	mvns	r3, r3
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4013      	ands	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a3c      	ldr	r2, [pc, #240]	; (8009a08 <HAL_GPIO_Init+0x2b0>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d01f      	beq.n	800995c <HAL_GPIO_Init+0x204>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a3b      	ldr	r2, [pc, #236]	; (8009a0c <HAL_GPIO_Init+0x2b4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d019      	beq.n	8009958 <HAL_GPIO_Init+0x200>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a3a      	ldr	r2, [pc, #232]	; (8009a10 <HAL_GPIO_Init+0x2b8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d013      	beq.n	8009954 <HAL_GPIO_Init+0x1fc>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a39      	ldr	r2, [pc, #228]	; (8009a14 <HAL_GPIO_Init+0x2bc>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d00d      	beq.n	8009950 <HAL_GPIO_Init+0x1f8>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a38      	ldr	r2, [pc, #224]	; (8009a18 <HAL_GPIO_Init+0x2c0>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d007      	beq.n	800994c <HAL_GPIO_Init+0x1f4>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a37      	ldr	r2, [pc, #220]	; (8009a1c <HAL_GPIO_Init+0x2c4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d101      	bne.n	8009948 <HAL_GPIO_Init+0x1f0>
 8009944:	2305      	movs	r3, #5
 8009946:	e00a      	b.n	800995e <HAL_GPIO_Init+0x206>
 8009948:	2306      	movs	r3, #6
 800994a:	e008      	b.n	800995e <HAL_GPIO_Init+0x206>
 800994c:	2304      	movs	r3, #4
 800994e:	e006      	b.n	800995e <HAL_GPIO_Init+0x206>
 8009950:	2303      	movs	r3, #3
 8009952:	e004      	b.n	800995e <HAL_GPIO_Init+0x206>
 8009954:	2302      	movs	r3, #2
 8009956:	e002      	b.n	800995e <HAL_GPIO_Init+0x206>
 8009958:	2301      	movs	r3, #1
 800995a:	e000      	b.n	800995e <HAL_GPIO_Init+0x206>
 800995c:	2300      	movs	r3, #0
 800995e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009960:	f002 0203 	and.w	r2, r2, #3
 8009964:	0092      	lsls	r2, r2, #2
 8009966:	4093      	lsls	r3, r2
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	4313      	orrs	r3, r2
 800996c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800996e:	4925      	ldr	r1, [pc, #148]	; (8009a04 <HAL_GPIO_Init+0x2ac>)
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	089b      	lsrs	r3, r3, #2
 8009974:	3302      	adds	r3, #2
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009984:	2b00      	cmp	r3, #0
 8009986:	d006      	beq.n	8009996 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009988:	4b25      	ldr	r3, [pc, #148]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	4924      	ldr	r1, [pc, #144]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	4313      	orrs	r3, r2
 8009992:	608b      	str	r3, [r1, #8]
 8009994:	e006      	b.n	80099a4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009996:	4b22      	ldr	r3, [pc, #136]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	43db      	mvns	r3, r3
 800999e:	4920      	ldr	r1, [pc, #128]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d006      	beq.n	80099be <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80099b0:	4b1b      	ldr	r3, [pc, #108]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	491a      	ldr	r1, [pc, #104]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	60cb      	str	r3, [r1, #12]
 80099bc:	e006      	b.n	80099cc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80099be:	4b18      	ldr	r3, [pc, #96]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	43db      	mvns	r3, r3
 80099c6:	4916      	ldr	r1, [pc, #88]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d025      	beq.n	8009a24 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80099d8:	4b11      	ldr	r3, [pc, #68]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	4910      	ldr	r1, [pc, #64]	; (8009a20 <HAL_GPIO_Init+0x2c8>)
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	604b      	str	r3, [r1, #4]
 80099e4:	e025      	b.n	8009a32 <HAL_GPIO_Init+0x2da>
 80099e6:	bf00      	nop
 80099e8:	10320000 	.word	0x10320000
 80099ec:	10310000 	.word	0x10310000
 80099f0:	10220000 	.word	0x10220000
 80099f4:	10210000 	.word	0x10210000
 80099f8:	10120000 	.word	0x10120000
 80099fc:	10110000 	.word	0x10110000
 8009a00:	40021000 	.word	0x40021000
 8009a04:	40010000 	.word	0x40010000
 8009a08:	40010800 	.word	0x40010800
 8009a0c:	40010c00 	.word	0x40010c00
 8009a10:	40011000 	.word	0x40011000
 8009a14:	40011400 	.word	0x40011400
 8009a18:	40011800 	.word	0x40011800
 8009a1c:	40011c00 	.word	0x40011c00
 8009a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009a24:	4b15      	ldr	r3, [pc, #84]	; (8009a7c <HAL_GPIO_Init+0x324>)
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	43db      	mvns	r3, r3
 8009a2c:	4913      	ldr	r1, [pc, #76]	; (8009a7c <HAL_GPIO_Init+0x324>)
 8009a2e:	4013      	ands	r3, r2
 8009a30:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009a3e:	4b0f      	ldr	r3, [pc, #60]	; (8009a7c <HAL_GPIO_Init+0x324>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	490e      	ldr	r1, [pc, #56]	; (8009a7c <HAL_GPIO_Init+0x324>)
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	600b      	str	r3, [r1, #0]
 8009a4a:	e006      	b.n	8009a5a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009a4c:	4b0b      	ldr	r3, [pc, #44]	; (8009a7c <HAL_GPIO_Init+0x324>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	43db      	mvns	r3, r3
 8009a54:	4909      	ldr	r1, [pc, #36]	; (8009a7c <HAL_GPIO_Init+0x324>)
 8009a56:	4013      	ands	r3, r2
 8009a58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f47f ae7e 	bne.w	800976c <HAL_GPIO_Init+0x14>
  }
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	372c      	adds	r7, #44	; 0x2c
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr
 8009a7c:	40010400 	.word	0x40010400

08009a80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b089      	sub	sp, #36	; 0x24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009a8e:	e0a6      	b.n	8009bde <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009a90:	2201      	movs	r2, #1
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	fa02 f303 	lsl.w	r3, r2, r3
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 8099 	beq.w	8009bd8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009aa6:	4a54      	ldr	r2, [pc, #336]	; (8009bf8 <HAL_GPIO_DeInit+0x178>)
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	089b      	lsrs	r3, r3, #2
 8009aac:	3302      	adds	r3, #2
 8009aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ab2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	220f      	movs	r2, #15
 8009abe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a4c      	ldr	r2, [pc, #304]	; (8009bfc <HAL_GPIO_DeInit+0x17c>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d01f      	beq.n	8009b10 <HAL_GPIO_DeInit+0x90>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a4b      	ldr	r2, [pc, #300]	; (8009c00 <HAL_GPIO_DeInit+0x180>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d019      	beq.n	8009b0c <HAL_GPIO_DeInit+0x8c>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a4a      	ldr	r2, [pc, #296]	; (8009c04 <HAL_GPIO_DeInit+0x184>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d013      	beq.n	8009b08 <HAL_GPIO_DeInit+0x88>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a49      	ldr	r2, [pc, #292]	; (8009c08 <HAL_GPIO_DeInit+0x188>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00d      	beq.n	8009b04 <HAL_GPIO_DeInit+0x84>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a48      	ldr	r2, [pc, #288]	; (8009c0c <HAL_GPIO_DeInit+0x18c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d007      	beq.n	8009b00 <HAL_GPIO_DeInit+0x80>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a47      	ldr	r2, [pc, #284]	; (8009c10 <HAL_GPIO_DeInit+0x190>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d101      	bne.n	8009afc <HAL_GPIO_DeInit+0x7c>
 8009af8:	2305      	movs	r3, #5
 8009afa:	e00a      	b.n	8009b12 <HAL_GPIO_DeInit+0x92>
 8009afc:	2306      	movs	r3, #6
 8009afe:	e008      	b.n	8009b12 <HAL_GPIO_DeInit+0x92>
 8009b00:	2304      	movs	r3, #4
 8009b02:	e006      	b.n	8009b12 <HAL_GPIO_DeInit+0x92>
 8009b04:	2303      	movs	r3, #3
 8009b06:	e004      	b.n	8009b12 <HAL_GPIO_DeInit+0x92>
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e002      	b.n	8009b12 <HAL_GPIO_DeInit+0x92>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e000      	b.n	8009b12 <HAL_GPIO_DeInit+0x92>
 8009b10:	2300      	movs	r3, #0
 8009b12:	69fa      	ldr	r2, [r7, #28]
 8009b14:	f002 0203 	and.w	r2, r2, #3
 8009b18:	0092      	lsls	r2, r2, #2
 8009b1a:	4093      	lsls	r3, r2
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d132      	bne.n	8009b88 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009b22:	4b3c      	ldr	r3, [pc, #240]	; (8009c14 <HAL_GPIO_DeInit+0x194>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	493a      	ldr	r1, [pc, #232]	; (8009c14 <HAL_GPIO_DeInit+0x194>)
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009b30:	4b38      	ldr	r3, [pc, #224]	; (8009c14 <HAL_GPIO_DeInit+0x194>)
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	43db      	mvns	r3, r3
 8009b38:	4936      	ldr	r1, [pc, #216]	; (8009c14 <HAL_GPIO_DeInit+0x194>)
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009b3e:	4b35      	ldr	r3, [pc, #212]	; (8009c14 <HAL_GPIO_DeInit+0x194>)
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	43db      	mvns	r3, r3
 8009b46:	4933      	ldr	r1, [pc, #204]	; (8009c14 <HAL_GPIO_DeInit+0x194>)
 8009b48:	4013      	ands	r3, r2
 8009b4a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009b4c:	4b31      	ldr	r3, [pc, #196]	; (8009c14 <HAL_GPIO_DeInit+0x194>)
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	43db      	mvns	r3, r3
 8009b54:	492f      	ldr	r1, [pc, #188]	; (8009c14 <HAL_GPIO_DeInit+0x194>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	f003 0303 	and.w	r3, r3, #3
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	220f      	movs	r2, #15
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009b6a:	4a23      	ldr	r2, [pc, #140]	; (8009bf8 <HAL_GPIO_DeInit+0x178>)
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	089b      	lsrs	r3, r3, #2
 8009b70:	3302      	adds	r3, #2
 8009b72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	43da      	mvns	r2, r3
 8009b7a:	481f      	ldr	r0, [pc, #124]	; (8009bf8 <HAL_GPIO_DeInit+0x178>)
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	089b      	lsrs	r3, r3, #2
 8009b80:	400a      	ands	r2, r1
 8009b82:	3302      	adds	r3, #2
 8009b84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2bff      	cmp	r3, #255	; 0xff
 8009b8c:	d801      	bhi.n	8009b92 <HAL_GPIO_DeInit+0x112>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	e001      	b.n	8009b96 <HAL_GPIO_DeInit+0x116>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3304      	adds	r3, #4
 8009b96:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2bff      	cmp	r3, #255	; 0xff
 8009b9c:	d802      	bhi.n	8009ba4 <HAL_GPIO_DeInit+0x124>
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	e002      	b.n	8009baa <HAL_GPIO_DeInit+0x12a>
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	3b08      	subs	r3, #8
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	210f      	movs	r1, #15
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	401a      	ands	r2, r3
 8009bbc:	2104      	movs	r1, #4
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc4:	431a      	orrs	r2, r3
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	43db      	mvns	r3, r3
 8009bd2:	401a      	ands	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	fa22 f303 	lsr.w	r3, r2, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f47f af52 	bne.w	8009a90 <HAL_GPIO_DeInit+0x10>
  }
}
 8009bec:	bf00      	nop
 8009bee:	bf00      	nop
 8009bf0:	3724      	adds	r7, #36	; 0x24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr
 8009bf8:	40010000 	.word	0x40010000
 8009bfc:	40010800 	.word	0x40010800
 8009c00:	40010c00 	.word	0x40010c00
 8009c04:	40011000 	.word	0x40011000
 8009c08:	40011400 	.word	0x40011400
 8009c0c:	40011800 	.word	0x40011800
 8009c10:	40011c00 	.word	0x40011c00
 8009c14:	40010400 	.word	0x40010400

08009c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	887b      	ldrh	r3, [r7, #2]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c30:	2301      	movs	r3, #1
 8009c32:	73fb      	strb	r3, [r7, #15]
 8009c34:	e001      	b.n	8009c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc80      	pop	{r7}
 8009c44:	4770      	bx	lr

08009c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	807b      	strh	r3, [r7, #2]
 8009c52:	4613      	mov	r3, r2
 8009c54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c56:	787b      	ldrb	r3, [r7, #1]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c5c:	887a      	ldrh	r2, [r7, #2]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009c62:	e003      	b.n	8009c6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009c64:	887b      	ldrh	r3, [r7, #2]
 8009c66:	041a      	lsls	r2, r3, #16
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	611a      	str	r2, [r3, #16]
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bc80      	pop	{r7}
 8009c74:	4770      	bx	lr

08009c76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b085      	sub	sp, #20
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c88:	887a      	ldrh	r2, [r7, #2]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	041a      	lsls	r2, r3, #16
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	43d9      	mvns	r1, r3
 8009c94:	887b      	ldrh	r3, [r7, #2]
 8009c96:	400b      	ands	r3, r1
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	611a      	str	r2, [r3, #16]
}
 8009c9e:	bf00      	nop
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bc80      	pop	{r7}
 8009ca6:	4770      	bx	lr

08009ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e12b      	b.n	8009f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d106      	bne.n	8009cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7fe fff8 	bl	8008cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2224      	movs	r2, #36	; 0x24
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 0201 	bic.w	r2, r2, #1
 8009cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d0c:	f001 fdb8 	bl	800b880 <HAL_RCC_GetPCLK1Freq>
 8009d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	4a81      	ldr	r2, [pc, #516]	; (8009f1c <HAL_I2C_Init+0x274>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d807      	bhi.n	8009d2c <HAL_I2C_Init+0x84>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4a80      	ldr	r2, [pc, #512]	; (8009f20 <HAL_I2C_Init+0x278>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	bf94      	ite	ls
 8009d24:	2301      	movls	r3, #1
 8009d26:	2300      	movhi	r3, #0
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	e006      	b.n	8009d3a <HAL_I2C_Init+0x92>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4a7d      	ldr	r2, [pc, #500]	; (8009f24 <HAL_I2C_Init+0x27c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	bf94      	ite	ls
 8009d34:	2301      	movls	r3, #1
 8009d36:	2300      	movhi	r3, #0
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e0e7      	b.n	8009f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4a78      	ldr	r2, [pc, #480]	; (8009f28 <HAL_I2C_Init+0x280>)
 8009d46:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4a:	0c9b      	lsrs	r3, r3, #18
 8009d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	4a6a      	ldr	r2, [pc, #424]	; (8009f1c <HAL_I2C_Init+0x274>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d802      	bhi.n	8009d7c <HAL_I2C_Init+0xd4>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	e009      	b.n	8009d90 <HAL_I2C_Init+0xe8>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009d82:	fb02 f303 	mul.w	r3, r2, r3
 8009d86:	4a69      	ldr	r2, [pc, #420]	; (8009f2c <HAL_I2C_Init+0x284>)
 8009d88:	fba2 2303 	umull	r2, r3, r2, r3
 8009d8c:	099b      	lsrs	r3, r3, #6
 8009d8e:	3301      	adds	r3, #1
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	430b      	orrs	r3, r1
 8009d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009da2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	495c      	ldr	r1, [pc, #368]	; (8009f1c <HAL_I2C_Init+0x274>)
 8009dac:	428b      	cmp	r3, r1
 8009dae:	d819      	bhi.n	8009de4 <HAL_I2C_Init+0x13c>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	1e59      	subs	r1, r3, #1
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8009dbe:	1c59      	adds	r1, r3, #1
 8009dc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009dc4:	400b      	ands	r3, r1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <HAL_I2C_Init+0x138>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	1e59      	subs	r1, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	005b      	lsls	r3, r3, #1
 8009dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8009dd8:	3301      	adds	r3, #1
 8009dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dde:	e051      	b.n	8009e84 <HAL_I2C_Init+0x1dc>
 8009de0:	2304      	movs	r3, #4
 8009de2:	e04f      	b.n	8009e84 <HAL_I2C_Init+0x1dc>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d111      	bne.n	8009e10 <HAL_I2C_Init+0x168>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	1e58      	subs	r0, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6859      	ldr	r1, [r3, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	440b      	add	r3, r1
 8009dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dfe:	3301      	adds	r3, #1
 8009e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bf0c      	ite	eq
 8009e08:	2301      	moveq	r3, #1
 8009e0a:	2300      	movne	r3, #0
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	e012      	b.n	8009e36 <HAL_I2C_Init+0x18e>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	1e58      	subs	r0, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6859      	ldr	r1, [r3, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	0099      	lsls	r1, r3, #2
 8009e20:	440b      	add	r3, r1
 8009e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e26:	3301      	adds	r3, #1
 8009e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bf0c      	ite	eq
 8009e30:	2301      	moveq	r3, #1
 8009e32:	2300      	movne	r3, #0
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <HAL_I2C_Init+0x196>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e022      	b.n	8009e84 <HAL_I2C_Init+0x1dc>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10e      	bne.n	8009e64 <HAL_I2C_Init+0x1bc>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	1e58      	subs	r0, r3, #1
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6859      	ldr	r1, [r3, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	005b      	lsls	r3, r3, #1
 8009e52:	440b      	add	r3, r1
 8009e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e58:	3301      	adds	r3, #1
 8009e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e62:	e00f      	b.n	8009e84 <HAL_I2C_Init+0x1dc>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	1e58      	subs	r0, r3, #1
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6859      	ldr	r1, [r3, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	0099      	lsls	r1, r3, #2
 8009e74:	440b      	add	r3, r1
 8009e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e84:	6879      	ldr	r1, [r7, #4]
 8009e86:	6809      	ldr	r1, [r1, #0]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	69da      	ldr	r2, [r3, #28]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6911      	ldr	r1, [r2, #16]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	68d2      	ldr	r2, [r2, #12]
 8009ebe:	4311      	orrs	r1, r2
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6812      	ldr	r2, [r2, #0]
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	695a      	ldr	r2, [r3, #20]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0201 	orr.w	r2, r2, #1
 8009ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	000186a0 	.word	0x000186a0
 8009f20:	001e847f 	.word	0x001e847f
 8009f24:	003d08ff 	.word	0x003d08ff
 8009f28:	431bde83 	.word	0x431bde83
 8009f2c:	10624dd3 	.word	0x10624dd3

08009f30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e021      	b.n	8009f86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2224      	movs	r2, #36	; 0x24
 8009f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0201 	bic.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7fe fef0 	bl	8008d40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	607a      	str	r2, [r7, #4]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	817b      	strh	r3, [r7, #10]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fa4:	f7ff f85e 	bl	8009064 <HAL_GetTick>
 8009fa8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b20      	cmp	r3, #32
 8009fb4:	f040 80e0 	bne.w	800a178 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	2319      	movs	r3, #25
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4970      	ldr	r1, [pc, #448]	; (800a184 <HAL_I2C_Master_Transmit+0x1f4>)
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 fe5c 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	e0d3      	b.n	800a17a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d101      	bne.n	8009fe0 <HAL_I2C_Master_Transmit+0x50>
 8009fdc:	2302      	movs	r3, #2
 8009fde:	e0cc      	b.n	800a17a <HAL_I2C_Master_Transmit+0x1ea>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d007      	beq.n	800a006 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f042 0201 	orr.w	r2, r2, #1
 800a004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a014:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2221      	movs	r2, #33	; 0x21
 800a01a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2210      	movs	r2, #16
 800a022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	893a      	ldrh	r2, [r7, #8]
 800a036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4a50      	ldr	r2, [pc, #320]	; (800a188 <HAL_I2C_Master_Transmit+0x1f8>)
 800a046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a048:	8979      	ldrh	r1, [r7, #10]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	6a3a      	ldr	r2, [r7, #32]
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fc16 	bl	800a880 <I2C_MasterRequestWrite>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e08d      	b.n	800a17a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a05e:	2300      	movs	r3, #0
 800a060:	613b      	str	r3, [r7, #16]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	613b      	str	r3, [r7, #16]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	613b      	str	r3, [r7, #16]
 800a072:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a074:	e066      	b.n	800a144 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	6a39      	ldr	r1, [r7, #32]
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 ff1a 	bl	800aeb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00d      	beq.n	800a0a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	2b04      	cmp	r3, #4
 800a08c:	d107      	bne.n	800a09e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a09c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e06b      	b.n	800a17a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	781a      	ldrb	r2, [r3, #0]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d11b      	bne.n	800a118 <HAL_I2C_Master_Transmit+0x188>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d017      	beq.n	800a118 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	781a      	ldrb	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a102:	b29b      	uxth	r3, r3
 800a104:	3b01      	subs	r3, #1
 800a106:	b29a      	uxth	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a110:	3b01      	subs	r3, #1
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	6a39      	ldr	r1, [r7, #32]
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 ff11 	bl	800af44 <I2C_WaitOnBTFFlagUntilTimeout>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00d      	beq.n	800a144 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d107      	bne.n	800a140 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a13e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e01a      	b.n	800a17a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d194      	bne.n	800a076 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a15a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2220      	movs	r2, #32
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	e000      	b.n	800a17a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a178:	2302      	movs	r3, #2
  }
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	00100002 	.word	0x00100002
 800a188:	ffff0000 	.word	0xffff0000

0800a18c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af02      	add	r7, sp, #8
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	4608      	mov	r0, r1
 800a196:	4611      	mov	r1, r2
 800a198:	461a      	mov	r2, r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	817b      	strh	r3, [r7, #10]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	813b      	strh	r3, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1a6:	f7fe ff5d 	bl	8009064 <HAL_GetTick>
 800a1aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	f040 80d9 	bne.w	800a36c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	2319      	movs	r3, #25
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	496d      	ldr	r1, [pc, #436]	; (800a378 <HAL_I2C_Mem_Write+0x1ec>)
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 fd5b 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e0cc      	b.n	800a36e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_I2C_Mem_Write+0x56>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e0c5      	b.n	800a36e <HAL_I2C_Mem_Write+0x1e2>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d007      	beq.n	800a208 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0201 	orr.w	r2, r2, #1
 800a206:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a216:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2221      	movs	r2, #33	; 0x21
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2240      	movs	r2, #64	; 0x40
 800a224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a3a      	ldr	r2, [r7, #32]
 800a232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a23e:	b29a      	uxth	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4a4d      	ldr	r2, [pc, #308]	; (800a37c <HAL_I2C_Mem_Write+0x1f0>)
 800a248:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a24a:	88f8      	ldrh	r0, [r7, #6]
 800a24c:	893a      	ldrh	r2, [r7, #8]
 800a24e:	8979      	ldrh	r1, [r7, #10]
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	4603      	mov	r3, r0
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 fb92 	bl	800a984 <I2C_RequestMemoryWrite>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d052      	beq.n	800a30c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e081      	b.n	800a36e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f000 fe20 	bl	800aeb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00d      	beq.n	800a296 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d107      	bne.n	800a292 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a290:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e06b      	b.n	800a36e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29a:	781a      	ldrb	r2, [r3, #0]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	f003 0304 	and.w	r3, r3, #4
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d11b      	bne.n	800a30c <HAL_I2C_Mem_Write+0x180>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d017      	beq.n	800a30c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1aa      	bne.n	800a26a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 fe13 	bl	800af44 <I2C_WaitOnBTFFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d107      	bne.n	800a33c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a33a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e016      	b.n	800a36e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a34e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2220      	movs	r2, #32
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	e000      	b.n	800a36e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a36c:	2302      	movs	r3, #2
  }
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	00100002 	.word	0x00100002
 800a37c:	ffff0000 	.word	0xffff0000

0800a380 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08c      	sub	sp, #48	; 0x30
 800a384:	af02      	add	r7, sp, #8
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	4608      	mov	r0, r1
 800a38a:	4611      	mov	r1, r2
 800a38c:	461a      	mov	r2, r3
 800a38e:	4603      	mov	r3, r0
 800a390:	817b      	strh	r3, [r7, #10]
 800a392:	460b      	mov	r3, r1
 800a394:	813b      	strh	r3, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a39e:	f7fe fe61 	bl	8009064 <HAL_GetTick>
 800a3a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	f040 8244 	bne.w	800a83a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	2319      	movs	r3, #25
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	4982      	ldr	r1, [pc, #520]	; (800a5c4 <HAL_I2C_Mem_Read+0x244>)
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 fc5f 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	e237      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d101      	bne.n	800a3da <HAL_I2C_Mem_Read+0x5a>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	e230      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d007      	beq.n	800a400 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0201 	orr.w	r2, r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a40e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2222      	movs	r2, #34	; 0x22
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2240      	movs	r2, #64	; 0x40
 800a41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a42a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a436:	b29a      	uxth	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4a62      	ldr	r2, [pc, #392]	; (800a5c8 <HAL_I2C_Mem_Read+0x248>)
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a442:	88f8      	ldrh	r0, [r7, #6]
 800a444:	893a      	ldrh	r2, [r7, #8]
 800a446:	8979      	ldrh	r1, [r7, #10]
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	4603      	mov	r3, r0
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 fb2c 	bl	800aab0 <I2C_RequestMemoryRead>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e1ec      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a466:	2b00      	cmp	r3, #0
 800a468:	d113      	bne.n	800a492 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a46a:	2300      	movs	r3, #0
 800a46c:	61fb      	str	r3, [r7, #28]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	61fb      	str	r3, [r7, #28]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	61fb      	str	r3, [r7, #28]
 800a47e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a48e:	601a      	str	r2, [r3, #0]
 800a490:	e1c0      	b.n	800a814 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a496:	2b01      	cmp	r3, #1
 800a498:	d11e      	bne.n	800a4d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4aa:	b672      	cpsid	i
}
 800a4ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	61bb      	str	r3, [r7, #24]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	61bb      	str	r3, [r7, #24]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	61bb      	str	r3, [r7, #24]
 800a4c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a4d4:	b662      	cpsie	i
}
 800a4d6:	e035      	b.n	800a544 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d11e      	bne.n	800a51e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4f0:	b672      	cpsid	i
}
 800a4f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	617b      	str	r3, [r7, #20]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a518:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a51a:	b662      	cpsie	i
}
 800a51c:	e012      	b.n	800a544 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a52c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	613b      	str	r3, [r7, #16]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	613b      	str	r3, [r7, #16]
 800a542:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a544:	e166      	b.n	800a814 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	f200 811f 	bhi.w	800a78e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a554:	2b01      	cmp	r3, #1
 800a556:	d123      	bne.n	800a5a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 fd39 	bl	800afd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e167      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	691a      	ldr	r2, [r3, #16]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a588:	3b01      	subs	r3, #1
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a594:	b29b      	uxth	r3, r3
 800a596:	3b01      	subs	r3, #1
 800a598:	b29a      	uxth	r2, r3
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a59e:	e139      	b.n	800a814 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d152      	bne.n	800a64e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	4906      	ldr	r1, [pc, #24]	; (800a5cc <HAL_I2C_Mem_Read+0x24c>)
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 fb64 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d008      	beq.n	800a5d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e13c      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
 800a5c2:	bf00      	nop
 800a5c4:	00100002 	.word	0x00100002
 800a5c8:	ffff0000 	.word	0xffff0000
 800a5cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a5d0:	b672      	cpsid	i
}
 800a5d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	691a      	ldr	r2, [r3, #16]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a600:	3b01      	subs	r3, #1
 800a602:	b29a      	uxth	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	3b01      	subs	r3, #1
 800a610:	b29a      	uxth	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a616:	b662      	cpsie	i
}
 800a618:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	691a      	ldr	r2, [r3, #16]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	b2d2      	uxtb	r2, r2
 800a626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	1c5a      	adds	r2, r3, #1
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a642:	b29b      	uxth	r3, r3
 800a644:	3b01      	subs	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a64c:	e0e2      	b.n	800a814 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	2200      	movs	r2, #0
 800a656:	497b      	ldr	r1, [pc, #492]	; (800a844 <HAL_I2C_Mem_Read+0x4c4>)
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 fb11 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e0e9      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a676:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a678:	b672      	cpsid	i
}
 800a67a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691a      	ldr	r2, [r3, #16]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	b2d2      	uxtb	r2, r2
 800a688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a698:	3b01      	subs	r3, #1
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a6ae:	4b66      	ldr	r3, [pc, #408]	; (800a848 <HAL_I2C_Mem_Read+0x4c8>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	08db      	lsrs	r3, r3, #3
 800a6b4:	4a65      	ldr	r2, [pc, #404]	; (800a84c <HAL_I2C_Mem_Read+0x4cc>)
 800a6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ba:	0a1a      	lsrs	r2, r3, #8
 800a6bc:	4613      	mov	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	00da      	lsls	r2, r3, #3
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d118      	bne.n	800a706 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ee:	f043 0220 	orr.w	r2, r3, #32
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a6f6:	b662      	cpsie	i
}
 800a6f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e09a      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b04      	cmp	r3, #4
 800a712:	d1d9      	bne.n	800a6c8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	691a      	ldr	r2, [r3, #16]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a740:	3b01      	subs	r3, #1
 800a742:	b29a      	uxth	r2, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	3b01      	subs	r3, #1
 800a750:	b29a      	uxth	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a756:	b662      	cpsie	i
}
 800a758:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691a      	ldr	r2, [r3, #16]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	b2d2      	uxtb	r2, r2
 800a766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a776:	3b01      	subs	r3, #1
 800a778:	b29a      	uxth	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a782:	b29b      	uxth	r3, r3
 800a784:	3b01      	subs	r3, #1
 800a786:	b29a      	uxth	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a78c:	e042      	b.n	800a814 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a790:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fc1e 	bl	800afd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e04c      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	691a      	ldr	r2, [r3, #16]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	b2d2      	uxtb	r2, r2
 800a7ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	f003 0304 	and.w	r3, r3, #4
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d118      	bne.n	800a814 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691a      	ldr	r2, [r3, #16]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	b2d2      	uxtb	r2, r2
 800a7ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f4:	1c5a      	adds	r2, r3, #1
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7fe:	3b01      	subs	r3, #1
 800a800:	b29a      	uxth	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	3b01      	subs	r3, #1
 800a80e:	b29a      	uxth	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f47f ae94 	bne.w	800a546 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2220      	movs	r2, #32
 800a822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	e000      	b.n	800a83c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a83a:	2302      	movs	r3, #2
  }
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3728      	adds	r7, #40	; 0x28
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	00010004 	.word	0x00010004
 800a848:	200009c4 	.word	0x200009c4
 800a84c:	14f8b589 	.word	0x14f8b589

0800a850 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a85e:	b2db      	uxtb	r3, r3
}
 800a860:	4618      	mov	r0, r3
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	bc80      	pop	{r7}
 800a868:	4770      	bx	lr

0800a86a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a876:	4618      	mov	r0, r3
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bc80      	pop	{r7}
 800a87e:	4770      	bx	lr

0800a880 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af02      	add	r7, sp, #8
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	603b      	str	r3, [r7, #0]
 800a88c:	460b      	mov	r3, r1
 800a88e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a894:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d006      	beq.n	800a8aa <I2C_MasterRequestWrite+0x2a>
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d003      	beq.n	800a8aa <I2C_MasterRequestWrite+0x2a>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8a8:	d108      	bne.n	800a8bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	e00b      	b.n	800a8d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c0:	2b12      	cmp	r3, #18
 800a8c2:	d107      	bne.n	800a8d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 f9cd 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00d      	beq.n	800a908 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8fa:	d103      	bne.n	800a904 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e035      	b.n	800a974 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a910:	d108      	bne.n	800a924 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a912:	897b      	ldrh	r3, [r7, #10]
 800a914:	b2db      	uxtb	r3, r3
 800a916:	461a      	mov	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a920:	611a      	str	r2, [r3, #16]
 800a922:	e01b      	b.n	800a95c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a924:	897b      	ldrh	r3, [r7, #10]
 800a926:	11db      	asrs	r3, r3, #7
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 0306 	and.w	r3, r3, #6
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	f063 030f 	orn	r3, r3, #15
 800a934:	b2da      	uxtb	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	490e      	ldr	r1, [pc, #56]	; (800a97c <I2C_MasterRequestWrite+0xfc>)
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f000 fa16 	bl	800ad74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e010      	b.n	800a974 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a952:	897b      	ldrh	r3, [r7, #10]
 800a954:	b2da      	uxtb	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	4907      	ldr	r1, [pc, #28]	; (800a980 <I2C_MasterRequestWrite+0x100>)
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f000 fa06 	bl	800ad74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e000      	b.n	800a974 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	00010008 	.word	0x00010008
 800a980:	00010002 	.word	0x00010002

0800a984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af02      	add	r7, sp, #8
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	4608      	mov	r0, r1
 800a98e:	4611      	mov	r1, r2
 800a990:	461a      	mov	r2, r3
 800a992:	4603      	mov	r3, r0
 800a994:	817b      	strh	r3, [r7, #10]
 800a996:	460b      	mov	r3, r1
 800a998:	813b      	strh	r3, [r7, #8]
 800a99a:	4613      	mov	r3, r2
 800a99c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 f960 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00d      	beq.n	800a9e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9d4:	d103      	bne.n	800a9de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e05f      	b.n	800aaa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a9e2:	897b      	ldrh	r3, [r7, #10]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a9f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	6a3a      	ldr	r2, [r7, #32]
 800a9f6:	492d      	ldr	r1, [pc, #180]	; (800aaac <I2C_RequestMemoryWrite+0x128>)
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 f9bb 	bl	800ad74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e04c      	b.n	800aaa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa08:	2300      	movs	r3, #0
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa20:	6a39      	ldr	r1, [r7, #32]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 fa46 	bl	800aeb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00d      	beq.n	800aa4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d107      	bne.n	800aa46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e02b      	b.n	800aaa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d105      	bne.n	800aa5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa50:	893b      	ldrh	r3, [r7, #8]
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	611a      	str	r2, [r3, #16]
 800aa5a:	e021      	b.n	800aaa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa5c:	893b      	ldrh	r3, [r7, #8]
 800aa5e:	0a1b      	lsrs	r3, r3, #8
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa6c:	6a39      	ldr	r1, [r7, #32]
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f000 fa20 	bl	800aeb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00d      	beq.n	800aa96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d107      	bne.n	800aa92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e005      	b.n	800aaa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa96:	893b      	ldrh	r3, [r7, #8]
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	00010002 	.word	0x00010002

0800aab0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af02      	add	r7, sp, #8
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	4608      	mov	r0, r1
 800aaba:	4611      	mov	r1, r2
 800aabc:	461a      	mov	r2, r3
 800aabe:	4603      	mov	r3, r0
 800aac0:	817b      	strh	r3, [r7, #10]
 800aac2:	460b      	mov	r3, r1
 800aac4:	813b      	strh	r3, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aad8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f000 f8c2 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00d      	beq.n	800ab1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab10:	d103      	bne.n	800ab1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e0aa      	b.n	800ac74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab1e:	897b      	ldrh	r3, [r7, #10]
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	6a3a      	ldr	r2, [r7, #32]
 800ab32:	4952      	ldr	r1, [pc, #328]	; (800ac7c <I2C_RequestMemoryRead+0x1cc>)
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 f91d 	bl	800ad74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e097      	b.n	800ac74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab44:	2300      	movs	r3, #0
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab5c:	6a39      	ldr	r1, [r7, #32]
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f9a8 	bl	800aeb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00d      	beq.n	800ab86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d107      	bne.n	800ab82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e076      	b.n	800ac74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d105      	bne.n	800ab98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab8c:	893b      	ldrh	r3, [r7, #8]
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	611a      	str	r2, [r3, #16]
 800ab96:	e021      	b.n	800abdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ab98:	893b      	ldrh	r3, [r7, #8]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba8:	6a39      	ldr	r1, [r7, #32]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 f982 	bl	800aeb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00d      	beq.n	800abd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d107      	bne.n	800abce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e050      	b.n	800ac74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abd2:	893b      	ldrh	r3, [r7, #8]
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abde:	6a39      	ldr	r1, [r7, #32]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 f967 	bl	800aeb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00d      	beq.n	800ac08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d107      	bne.n	800ac04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e035      	b.n	800ac74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 f82b 	bl	800ac80 <I2C_WaitOnFlagUntilTimeout>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00d      	beq.n	800ac4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac3e:	d103      	bne.n	800ac48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e013      	b.n	800ac74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ac4c:	897b      	ldrh	r3, [r7, #10]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	f043 0301 	orr.w	r3, r3, #1
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	6a3a      	ldr	r2, [r7, #32]
 800ac60:	4906      	ldr	r1, [pc, #24]	; (800ac7c <I2C_RequestMemoryRead+0x1cc>)
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f000 f886 	bl	800ad74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	00010002 	.word	0x00010002

0800ac80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac90:	e048      	b.n	800ad24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac98:	d044      	beq.n	800ad24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac9a:	f7fe f9e3 	bl	8009064 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d302      	bcc.n	800acb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d139      	bne.n	800ad24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	0c1b      	lsrs	r3, r3, #16
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d10d      	bne.n	800acd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	695b      	ldr	r3, [r3, #20]
 800acc0:	43da      	mvns	r2, r3
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	4013      	ands	r3, r2
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	bf0c      	ite	eq
 800accc:	2301      	moveq	r3, #1
 800acce:	2300      	movne	r3, #0
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	461a      	mov	r2, r3
 800acd4:	e00c      	b.n	800acf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	43da      	mvns	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	4013      	ands	r3, r2
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	bf0c      	ite	eq
 800ace8:	2301      	moveq	r3, #1
 800acea:	2300      	movne	r3, #0
 800acec:	b2db      	uxtb	r3, r3
 800acee:	461a      	mov	r2, r3
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d116      	bne.n	800ad24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2220      	movs	r2, #32
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	f043 0220 	orr.w	r2, r3, #32
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e023      	b.n	800ad6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d10d      	bne.n	800ad4a <I2C_WaitOnFlagUntilTimeout+0xca>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	43da      	mvns	r2, r3
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	4013      	ands	r3, r2
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	bf0c      	ite	eq
 800ad40:	2301      	moveq	r3, #1
 800ad42:	2300      	movne	r3, #0
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	461a      	mov	r2, r3
 800ad48:	e00c      	b.n	800ad64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	43da      	mvns	r2, r3
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	4013      	ands	r3, r2
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	bf0c      	ite	eq
 800ad5c:	2301      	moveq	r3, #1
 800ad5e:	2300      	movne	r3, #0
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	461a      	mov	r2, r3
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d093      	beq.n	800ac92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad82:	e071      	b.n	800ae68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad92:	d123      	bne.n	800addc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ada2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2220      	movs	r2, #32
 800adb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc8:	f043 0204 	orr.w	r2, r3, #4
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e067      	b.n	800aeac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade2:	d041      	beq.n	800ae68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ade4:	f7fe f93e 	bl	8009064 <HAL_GetTick>
 800ade8:	4602      	mov	r2, r0
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d302      	bcc.n	800adfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d136      	bne.n	800ae68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	0c1b      	lsrs	r3, r3, #16
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d10c      	bne.n	800ae1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	43da      	mvns	r2, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4013      	ands	r3, r2
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	bf14      	ite	ne
 800ae16:	2301      	movne	r3, #1
 800ae18:	2300      	moveq	r3, #0
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	e00b      	b.n	800ae36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	43da      	mvns	r2, r3
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	4013      	ands	r3, r2
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bf14      	ite	ne
 800ae30:	2301      	movne	r3, #1
 800ae32:	2300      	moveq	r3, #0
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d016      	beq.n	800ae68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae54:	f043 0220 	orr.w	r2, r3, #32
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	e021      	b.n	800aeac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	0c1b      	lsrs	r3, r3, #16
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d10c      	bne.n	800ae8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	43da      	mvns	r2, r3
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bf14      	ite	ne
 800ae84:	2301      	movne	r3, #1
 800ae86:	2300      	moveq	r3, #0
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	e00b      	b.n	800aea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	43da      	mvns	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4013      	ands	r3, r2
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	bf14      	ite	ne
 800ae9e:	2301      	movne	r3, #1
 800aea0:	2300      	moveq	r3, #0
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f47f af6d 	bne.w	800ad84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aec0:	e034      	b.n	800af2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 f8e3 	bl	800b08e <I2C_IsAcknowledgeFailed>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e034      	b.n	800af3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed8:	d028      	beq.n	800af2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeda:	f7fe f8c3 	bl	8009064 <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d302      	bcc.n	800aef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d11d      	bne.n	800af2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aefa:	2b80      	cmp	r3, #128	; 0x80
 800aefc:	d016      	beq.n	800af2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2220      	movs	r2, #32
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af18:	f043 0220 	orr.w	r2, r3, #32
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e007      	b.n	800af3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af36:	2b80      	cmp	r3, #128	; 0x80
 800af38:	d1c3      	bne.n	800aec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af50:	e034      	b.n	800afbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 f89b 	bl	800b08e <I2C_IsAcknowledgeFailed>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e034      	b.n	800afcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af68:	d028      	beq.n	800afbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af6a:	f7fe f87b 	bl	8009064 <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	429a      	cmp	r2, r3
 800af78:	d302      	bcc.n	800af80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d11d      	bne.n	800afbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	f003 0304 	and.w	r3, r3, #4
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d016      	beq.n	800afbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2220      	movs	r2, #32
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa8:	f043 0220 	orr.w	r2, r3, #32
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e007      	b.n	800afcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	f003 0304 	and.w	r3, r3, #4
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	d1c3      	bne.n	800af52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800afe0:	e049      	b.n	800b076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	f003 0310 	and.w	r3, r3, #16
 800afec:	2b10      	cmp	r3, #16
 800afee:	d119      	bne.n	800b024 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f06f 0210 	mvn.w	r2, #16
 800aff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2220      	movs	r2, #32
 800b004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e030      	b.n	800b086 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b024:	f7fe f81e 	bl	8009064 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	429a      	cmp	r2, r3
 800b032:	d302      	bcc.n	800b03a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d11d      	bne.n	800b076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	695b      	ldr	r3, [r3, #20]
 800b040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b044:	2b40      	cmp	r3, #64	; 0x40
 800b046:	d016      	beq.n	800b076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2220      	movs	r2, #32
 800b052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b062:	f043 0220 	orr.w	r2, r3, #32
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	e007      	b.n	800b086 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	695b      	ldr	r3, [r3, #20]
 800b07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b080:	2b40      	cmp	r3, #64	; 0x40
 800b082:	d1ae      	bne.n	800afe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b08e:	b480      	push	{r7}
 800b090:	b083      	sub	sp, #12
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	695b      	ldr	r3, [r3, #20]
 800b09c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0a4:	d11b      	bne.n	800b0de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b0ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	f043 0204 	orr.w	r2, r3, #4
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bc80      	pop	{r7}
 800b0e8:	4770      	bx	lr
	...

0800b0ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e272      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 8087 	beq.w	800b21a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b10c:	4b92      	ldr	r3, [pc, #584]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	f003 030c 	and.w	r3, r3, #12
 800b114:	2b04      	cmp	r3, #4
 800b116:	d00c      	beq.n	800b132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b118:	4b8f      	ldr	r3, [pc, #572]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f003 030c 	and.w	r3, r3, #12
 800b120:	2b08      	cmp	r3, #8
 800b122:	d112      	bne.n	800b14a <HAL_RCC_OscConfig+0x5e>
 800b124:	4b8c      	ldr	r3, [pc, #560]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b130:	d10b      	bne.n	800b14a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b132:	4b89      	ldr	r3, [pc, #548]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d06c      	beq.n	800b218 <HAL_RCC_OscConfig+0x12c>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d168      	bne.n	800b218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e24c      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b152:	d106      	bne.n	800b162 <HAL_RCC_OscConfig+0x76>
 800b154:	4b80      	ldr	r3, [pc, #512]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a7f      	ldr	r2, [pc, #508]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b15a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	e02e      	b.n	800b1c0 <HAL_RCC_OscConfig+0xd4>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10c      	bne.n	800b184 <HAL_RCC_OscConfig+0x98>
 800b16a:	4b7b      	ldr	r3, [pc, #492]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a7a      	ldr	r2, [pc, #488]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b174:	6013      	str	r3, [r2, #0]
 800b176:	4b78      	ldr	r3, [pc, #480]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a77      	ldr	r2, [pc, #476]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b17c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b180:	6013      	str	r3, [r2, #0]
 800b182:	e01d      	b.n	800b1c0 <HAL_RCC_OscConfig+0xd4>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b18c:	d10c      	bne.n	800b1a8 <HAL_RCC_OscConfig+0xbc>
 800b18e:	4b72      	ldr	r3, [pc, #456]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a71      	ldr	r2, [pc, #452]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	4b6f      	ldr	r3, [pc, #444]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a6e      	ldr	r2, [pc, #440]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b1a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	e00b      	b.n	800b1c0 <HAL_RCC_OscConfig+0xd4>
 800b1a8:	4b6b      	ldr	r3, [pc, #428]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a6a      	ldr	r2, [pc, #424]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b1ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	4b68      	ldr	r3, [pc, #416]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a67      	ldr	r2, [pc, #412]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b1ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d013      	beq.n	800b1f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1c8:	f7fd ff4c 	bl	8009064 <HAL_GetTick>
 800b1cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1d0:	f7fd ff48 	bl	8009064 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b64      	cmp	r3, #100	; 0x64
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e200      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1e2:	4b5d      	ldr	r3, [pc, #372]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0f0      	beq.n	800b1d0 <HAL_RCC_OscConfig+0xe4>
 800b1ee:	e014      	b.n	800b21a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1f0:	f7fd ff38 	bl	8009064 <HAL_GetTick>
 800b1f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1f6:	e008      	b.n	800b20a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1f8:	f7fd ff34 	bl	8009064 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b64      	cmp	r3, #100	; 0x64
 800b204:	d901      	bls.n	800b20a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e1ec      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b20a:	4b53      	ldr	r3, [pc, #332]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1f0      	bne.n	800b1f8 <HAL_RCC_OscConfig+0x10c>
 800b216:	e000      	b.n	800b21a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d063      	beq.n	800b2ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b226:	4b4c      	ldr	r3, [pc, #304]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f003 030c 	and.w	r3, r3, #12
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b232:	4b49      	ldr	r3, [pc, #292]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f003 030c 	and.w	r3, r3, #12
 800b23a:	2b08      	cmp	r3, #8
 800b23c:	d11c      	bne.n	800b278 <HAL_RCC_OscConfig+0x18c>
 800b23e:	4b46      	ldr	r3, [pc, #280]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d116      	bne.n	800b278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b24a:	4b43      	ldr	r3, [pc, #268]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d005      	beq.n	800b262 <HAL_RCC_OscConfig+0x176>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d001      	beq.n	800b262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e1c0      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b262:	4b3d      	ldr	r3, [pc, #244]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	4939      	ldr	r1, [pc, #228]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b272:	4313      	orrs	r3, r2
 800b274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b276:	e03a      	b.n	800b2ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d020      	beq.n	800b2c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b280:	4b36      	ldr	r3, [pc, #216]	; (800b35c <HAL_RCC_OscConfig+0x270>)
 800b282:	2201      	movs	r2, #1
 800b284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b286:	f7fd feed 	bl	8009064 <HAL_GetTick>
 800b28a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b28c:	e008      	b.n	800b2a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b28e:	f7fd fee9 	bl	8009064 <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d901      	bls.n	800b2a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e1a1      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2a0:	4b2d      	ldr	r3, [pc, #180]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0302 	and.w	r3, r3, #2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0f0      	beq.n	800b28e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2ac:	4b2a      	ldr	r3, [pc, #168]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	00db      	lsls	r3, r3, #3
 800b2ba:	4927      	ldr	r1, [pc, #156]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	600b      	str	r3, [r1, #0]
 800b2c0:	e015      	b.n	800b2ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2c2:	4b26      	ldr	r3, [pc, #152]	; (800b35c <HAL_RCC_OscConfig+0x270>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2c8:	f7fd fecc 	bl	8009064 <HAL_GetTick>
 800b2cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2ce:	e008      	b.n	800b2e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2d0:	f7fd fec8 	bl	8009064 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d901      	bls.n	800b2e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e180      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2e2:	4b1d      	ldr	r3, [pc, #116]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0302 	and.w	r3, r3, #2
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1f0      	bne.n	800b2d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0308 	and.w	r3, r3, #8
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d03a      	beq.n	800b370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d019      	beq.n	800b336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b302:	4b17      	ldr	r3, [pc, #92]	; (800b360 <HAL_RCC_OscConfig+0x274>)
 800b304:	2201      	movs	r2, #1
 800b306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b308:	f7fd feac 	bl	8009064 <HAL_GetTick>
 800b30c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b30e:	e008      	b.n	800b322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b310:	f7fd fea8 	bl	8009064 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d901      	bls.n	800b322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e160      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b322:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <HAL_RCC_OscConfig+0x26c>)
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	f003 0302 	and.w	r3, r3, #2
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0f0      	beq.n	800b310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b32e:	2001      	movs	r0, #1
 800b330:	f000 face 	bl	800b8d0 <RCC_Delay>
 800b334:	e01c      	b.n	800b370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b336:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <HAL_RCC_OscConfig+0x274>)
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b33c:	f7fd fe92 	bl	8009064 <HAL_GetTick>
 800b340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b342:	e00f      	b.n	800b364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b344:	f7fd fe8e 	bl	8009064 <HAL_GetTick>
 800b348:	4602      	mov	r2, r0
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d908      	bls.n	800b364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	e146      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
 800b356:	bf00      	nop
 800b358:	40021000 	.word	0x40021000
 800b35c:	42420000 	.word	0x42420000
 800b360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b364:	4b92      	ldr	r3, [pc, #584]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	f003 0302 	and.w	r3, r3, #2
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e9      	bne.n	800b344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0304 	and.w	r3, r3, #4
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f000 80a6 	beq.w	800b4ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b382:	4b8b      	ldr	r3, [pc, #556]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10d      	bne.n	800b3aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b38e:	4b88      	ldr	r3, [pc, #544]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b390:	69db      	ldr	r3, [r3, #28]
 800b392:	4a87      	ldr	r2, [pc, #540]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b398:	61d3      	str	r3, [r2, #28]
 800b39a:	4b85      	ldr	r3, [pc, #532]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3a2:	60bb      	str	r3, [r7, #8]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3aa:	4b82      	ldr	r3, [pc, #520]	; (800b5b4 <HAL_RCC_OscConfig+0x4c8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d118      	bne.n	800b3e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b3b6:	4b7f      	ldr	r3, [pc, #508]	; (800b5b4 <HAL_RCC_OscConfig+0x4c8>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a7e      	ldr	r2, [pc, #504]	; (800b5b4 <HAL_RCC_OscConfig+0x4c8>)
 800b3bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3c2:	f7fd fe4f 	bl	8009064 <HAL_GetTick>
 800b3c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3c8:	e008      	b.n	800b3dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3ca:	f7fd fe4b 	bl	8009064 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	2b64      	cmp	r3, #100	; 0x64
 800b3d6:	d901      	bls.n	800b3dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e103      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3dc:	4b75      	ldr	r3, [pc, #468]	; (800b5b4 <HAL_RCC_OscConfig+0x4c8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d0f0      	beq.n	800b3ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d106      	bne.n	800b3fe <HAL_RCC_OscConfig+0x312>
 800b3f0:	4b6f      	ldr	r3, [pc, #444]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	4a6e      	ldr	r2, [pc, #440]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b3f6:	f043 0301 	orr.w	r3, r3, #1
 800b3fa:	6213      	str	r3, [r2, #32]
 800b3fc:	e02d      	b.n	800b45a <HAL_RCC_OscConfig+0x36e>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10c      	bne.n	800b420 <HAL_RCC_OscConfig+0x334>
 800b406:	4b6a      	ldr	r3, [pc, #424]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b408:	6a1b      	ldr	r3, [r3, #32]
 800b40a:	4a69      	ldr	r2, [pc, #420]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b40c:	f023 0301 	bic.w	r3, r3, #1
 800b410:	6213      	str	r3, [r2, #32]
 800b412:	4b67      	ldr	r3, [pc, #412]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	4a66      	ldr	r2, [pc, #408]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b418:	f023 0304 	bic.w	r3, r3, #4
 800b41c:	6213      	str	r3, [r2, #32]
 800b41e:	e01c      	b.n	800b45a <HAL_RCC_OscConfig+0x36e>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	2b05      	cmp	r3, #5
 800b426:	d10c      	bne.n	800b442 <HAL_RCC_OscConfig+0x356>
 800b428:	4b61      	ldr	r3, [pc, #388]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	4a60      	ldr	r2, [pc, #384]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b42e:	f043 0304 	orr.w	r3, r3, #4
 800b432:	6213      	str	r3, [r2, #32]
 800b434:	4b5e      	ldr	r3, [pc, #376]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b436:	6a1b      	ldr	r3, [r3, #32]
 800b438:	4a5d      	ldr	r2, [pc, #372]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b43a:	f043 0301 	orr.w	r3, r3, #1
 800b43e:	6213      	str	r3, [r2, #32]
 800b440:	e00b      	b.n	800b45a <HAL_RCC_OscConfig+0x36e>
 800b442:	4b5b      	ldr	r3, [pc, #364]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	4a5a      	ldr	r2, [pc, #360]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b448:	f023 0301 	bic.w	r3, r3, #1
 800b44c:	6213      	str	r3, [r2, #32]
 800b44e:	4b58      	ldr	r3, [pc, #352]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	4a57      	ldr	r2, [pc, #348]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b454:	f023 0304 	bic.w	r3, r3, #4
 800b458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d015      	beq.n	800b48e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b462:	f7fd fdff 	bl	8009064 <HAL_GetTick>
 800b466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b468:	e00a      	b.n	800b480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b46a:	f7fd fdfb 	bl	8009064 <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	f241 3288 	movw	r2, #5000	; 0x1388
 800b478:	4293      	cmp	r3, r2
 800b47a:	d901      	bls.n	800b480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e0b1      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b480:	4b4b      	ldr	r3, [pc, #300]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b482:	6a1b      	ldr	r3, [r3, #32]
 800b484:	f003 0302 	and.w	r3, r3, #2
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0ee      	beq.n	800b46a <HAL_RCC_OscConfig+0x37e>
 800b48c:	e014      	b.n	800b4b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b48e:	f7fd fde9 	bl	8009064 <HAL_GetTick>
 800b492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b494:	e00a      	b.n	800b4ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b496:	f7fd fde5 	bl	8009064 <HAL_GetTick>
 800b49a:	4602      	mov	r2, r0
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d901      	bls.n	800b4ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e09b      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4ac:	4b40      	ldr	r3, [pc, #256]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b4ae:	6a1b      	ldr	r3, [r3, #32]
 800b4b0:	f003 0302 	and.w	r3, r3, #2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1ee      	bne.n	800b496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d105      	bne.n	800b4ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4be:	4b3c      	ldr	r3, [pc, #240]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	4a3b      	ldr	r2, [pc, #236]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b4c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 8087 	beq.w	800b5e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b4d4:	4b36      	ldr	r3, [pc, #216]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f003 030c 	and.w	r3, r3, #12
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d061      	beq.n	800b5a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d146      	bne.n	800b576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4e8:	4b33      	ldr	r3, [pc, #204]	; (800b5b8 <HAL_RCC_OscConfig+0x4cc>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4ee:	f7fd fdb9 	bl	8009064 <HAL_GetTick>
 800b4f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b4f4:	e008      	b.n	800b508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4f6:	f7fd fdb5 	bl	8009064 <HAL_GetTick>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	2b02      	cmp	r3, #2
 800b502:	d901      	bls.n	800b508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b504:	2303      	movs	r3, #3
 800b506:	e06d      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b508:	4b29      	ldr	r3, [pc, #164]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1f0      	bne.n	800b4f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a1b      	ldr	r3, [r3, #32]
 800b518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b51c:	d108      	bne.n	800b530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b51e:	4b24      	ldr	r3, [pc, #144]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	4921      	ldr	r1, [pc, #132]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b530:	4b1f      	ldr	r3, [pc, #124]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a19      	ldr	r1, [r3, #32]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	430b      	orrs	r3, r1
 800b542:	491b      	ldr	r1, [pc, #108]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b544:	4313      	orrs	r3, r2
 800b546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b548:	4b1b      	ldr	r3, [pc, #108]	; (800b5b8 <HAL_RCC_OscConfig+0x4cc>)
 800b54a:	2201      	movs	r2, #1
 800b54c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b54e:	f7fd fd89 	bl	8009064 <HAL_GetTick>
 800b552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b554:	e008      	b.n	800b568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b556:	f7fd fd85 	bl	8009064 <HAL_GetTick>
 800b55a:	4602      	mov	r2, r0
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d901      	bls.n	800b568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	e03d      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b568:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d0f0      	beq.n	800b556 <HAL_RCC_OscConfig+0x46a>
 800b574:	e035      	b.n	800b5e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b576:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <HAL_RCC_OscConfig+0x4cc>)
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b57c:	f7fd fd72 	bl	8009064 <HAL_GetTick>
 800b580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b582:	e008      	b.n	800b596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b584:	f7fd fd6e 	bl	8009064 <HAL_GetTick>
 800b588:	4602      	mov	r2, r0
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d901      	bls.n	800b596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e026      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b596:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <HAL_RCC_OscConfig+0x4c4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1f0      	bne.n	800b584 <HAL_RCC_OscConfig+0x498>
 800b5a2:	e01e      	b.n	800b5e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d107      	bne.n	800b5bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e019      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
 800b5b0:	40021000 	.word	0x40021000
 800b5b4:	40007000 	.word	0x40007000
 800b5b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b5bc:	4b0b      	ldr	r3, [pc, #44]	; (800b5ec <HAL_RCC_OscConfig+0x500>)
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d106      	bne.n	800b5de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d001      	beq.n	800b5e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e000      	b.n	800b5e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	40021000 	.word	0x40021000

0800b5f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	e0d0      	b.n	800b7a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b604:	4b6a      	ldr	r3, [pc, #424]	; (800b7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0307 	and.w	r3, r3, #7
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d910      	bls.n	800b634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b612:	4b67      	ldr	r3, [pc, #412]	; (800b7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f023 0207 	bic.w	r2, r3, #7
 800b61a:	4965      	ldr	r1, [pc, #404]	; (800b7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	4313      	orrs	r3, r2
 800b620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b622:	4b63      	ldr	r3, [pc, #396]	; (800b7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d001      	beq.n	800b634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	e0b8      	b.n	800b7a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0302 	and.w	r3, r3, #2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d020      	beq.n	800b682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0304 	and.w	r3, r3, #4
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d005      	beq.n	800b658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b64c:	4b59      	ldr	r3, [pc, #356]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	4a58      	ldr	r2, [pc, #352]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0308 	and.w	r3, r3, #8
 800b660:	2b00      	cmp	r3, #0
 800b662:	d005      	beq.n	800b670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b664:	4b53      	ldr	r3, [pc, #332]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	4a52      	ldr	r2, [pc, #328]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b66a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b66e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b670:	4b50      	ldr	r3, [pc, #320]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	494d      	ldr	r1, [pc, #308]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b67e:	4313      	orrs	r3, r2
 800b680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f003 0301 	and.w	r3, r3, #1
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d040      	beq.n	800b710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d107      	bne.n	800b6a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b696:	4b47      	ldr	r3, [pc, #284]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d115      	bne.n	800b6ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e07f      	b.n	800b7a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d107      	bne.n	800b6be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6ae:	4b41      	ldr	r3, [pc, #260]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d109      	bne.n	800b6ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e073      	b.n	800b7a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6be:	4b3d      	ldr	r3, [pc, #244]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e06b      	b.n	800b7a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b6ce:	4b39      	ldr	r3, [pc, #228]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	f023 0203 	bic.w	r2, r3, #3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	4936      	ldr	r1, [pc, #216]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b6e0:	f7fd fcc0 	bl	8009064 <HAL_GetTick>
 800b6e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6e6:	e00a      	b.n	800b6fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6e8:	f7fd fcbc 	bl	8009064 <HAL_GetTick>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d901      	bls.n	800b6fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e053      	b.n	800b7a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6fe:	4b2d      	ldr	r3, [pc, #180]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f003 020c 	and.w	r2, r3, #12
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d1eb      	bne.n	800b6e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b710:	4b27      	ldr	r3, [pc, #156]	; (800b7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0307 	and.w	r3, r3, #7
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d210      	bcs.n	800b740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b71e:	4b24      	ldr	r3, [pc, #144]	; (800b7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f023 0207 	bic.w	r2, r3, #7
 800b726:	4922      	ldr	r1, [pc, #136]	; (800b7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b72e:	4b20      	ldr	r3, [pc, #128]	; (800b7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d001      	beq.n	800b740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e032      	b.n	800b7a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 0304 	and.w	r3, r3, #4
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d008      	beq.n	800b75e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b74c:	4b19      	ldr	r3, [pc, #100]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	4916      	ldr	r1, [pc, #88]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 0308 	and.w	r3, r3, #8
 800b766:	2b00      	cmp	r3, #0
 800b768:	d009      	beq.n	800b77e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b76a:	4b12      	ldr	r3, [pc, #72]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	00db      	lsls	r3, r3, #3
 800b778:	490e      	ldr	r1, [pc, #56]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b77e:	f000 f821 	bl	800b7c4 <HAL_RCC_GetSysClockFreq>
 800b782:	4602      	mov	r2, r0
 800b784:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	091b      	lsrs	r3, r3, #4
 800b78a:	f003 030f 	and.w	r3, r3, #15
 800b78e:	490a      	ldr	r1, [pc, #40]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c8>)
 800b790:	5ccb      	ldrb	r3, [r1, r3]
 800b792:	fa22 f303 	lsr.w	r3, r2, r3
 800b796:	4a09      	ldr	r2, [pc, #36]	; (800b7bc <HAL_RCC_ClockConfig+0x1cc>)
 800b798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b79a:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <HAL_RCC_ClockConfig+0x1d0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fd fc1e 	bl	8008fe0 <HAL_InitTick>

  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	40022000 	.word	0x40022000
 800b7b4:	40021000 	.word	0x40021000
 800b7b8:	0800e534 	.word	0x0800e534
 800b7bc:	200009c4 	.word	0x200009c4
 800b7c0:	200009c8 	.word	0x200009c8

0800b7c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60bb      	str	r3, [r7, #8]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b7de:	4b1e      	ldr	r3, [pc, #120]	; (800b858 <HAL_RCC_GetSysClockFreq+0x94>)
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f003 030c 	and.w	r3, r3, #12
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d002      	beq.n	800b7f4 <HAL_RCC_GetSysClockFreq+0x30>
 800b7ee:	2b08      	cmp	r3, #8
 800b7f0:	d003      	beq.n	800b7fa <HAL_RCC_GetSysClockFreq+0x36>
 800b7f2:	e027      	b.n	800b844 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b7f4:	4b19      	ldr	r3, [pc, #100]	; (800b85c <HAL_RCC_GetSysClockFreq+0x98>)
 800b7f6:	613b      	str	r3, [r7, #16]
      break;
 800b7f8:	e027      	b.n	800b84a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	0c9b      	lsrs	r3, r3, #18
 800b7fe:	f003 030f 	and.w	r3, r3, #15
 800b802:	4a17      	ldr	r2, [pc, #92]	; (800b860 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b804:	5cd3      	ldrb	r3, [r2, r3]
 800b806:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d010      	beq.n	800b834 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b812:	4b11      	ldr	r3, [pc, #68]	; (800b858 <HAL_RCC_GetSysClockFreq+0x94>)
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	0c5b      	lsrs	r3, r3, #17
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	4a11      	ldr	r2, [pc, #68]	; (800b864 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b81e:	5cd3      	ldrb	r3, [r2, r3]
 800b820:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a0d      	ldr	r2, [pc, #52]	; (800b85c <HAL_RCC_GetSysClockFreq+0x98>)
 800b826:	fb03 f202 	mul.w	r2, r3, r2
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	e004      	b.n	800b83e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a0c      	ldr	r2, [pc, #48]	; (800b868 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b838:	fb02 f303 	mul.w	r3, r2, r3
 800b83c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	613b      	str	r3, [r7, #16]
      break;
 800b842:	e002      	b.n	800b84a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <HAL_RCC_GetSysClockFreq+0x98>)
 800b846:	613b      	str	r3, [r7, #16]
      break;
 800b848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b84a:	693b      	ldr	r3, [r7, #16]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	371c      	adds	r7, #28
 800b850:	46bd      	mov	sp, r7
 800b852:	bc80      	pop	{r7}
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	40021000 	.word	0x40021000
 800b85c:	007a1200 	.word	0x007a1200
 800b860:	0800e54c 	.word	0x0800e54c
 800b864:	0800e55c 	.word	0x0800e55c
 800b868:	003d0900 	.word	0x003d0900

0800b86c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b86c:	b480      	push	{r7}
 800b86e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b870:	4b02      	ldr	r3, [pc, #8]	; (800b87c <HAL_RCC_GetHCLKFreq+0x10>)
 800b872:	681b      	ldr	r3, [r3, #0]
}
 800b874:	4618      	mov	r0, r3
 800b876:	46bd      	mov	sp, r7
 800b878:	bc80      	pop	{r7}
 800b87a:	4770      	bx	lr
 800b87c:	200009c4 	.word	0x200009c4

0800b880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b884:	f7ff fff2 	bl	800b86c <HAL_RCC_GetHCLKFreq>
 800b888:	4602      	mov	r2, r0
 800b88a:	4b05      	ldr	r3, [pc, #20]	; (800b8a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	0a1b      	lsrs	r3, r3, #8
 800b890:	f003 0307 	and.w	r3, r3, #7
 800b894:	4903      	ldr	r1, [pc, #12]	; (800b8a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b896:	5ccb      	ldrb	r3, [r1, r3]
 800b898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	40021000 	.word	0x40021000
 800b8a4:	0800e544 	.word	0x0800e544

0800b8a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8ac:	f7ff ffde 	bl	800b86c <HAL_RCC_GetHCLKFreq>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	0adb      	lsrs	r3, r3, #11
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	4903      	ldr	r1, [pc, #12]	; (800b8cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8be:	5ccb      	ldrb	r3, [r1, r3]
 800b8c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	40021000 	.word	0x40021000
 800b8cc:	0800e544 	.word	0x0800e544

0800b8d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <RCC_Delay+0x34>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a0a      	ldr	r2, [pc, #40]	; (800b908 <RCC_Delay+0x38>)
 800b8de:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e2:	0a5b      	lsrs	r3, r3, #9
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b8ec:	bf00      	nop
  }
  while (Delay --);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	1e5a      	subs	r2, r3, #1
 800b8f2:	60fa      	str	r2, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1f9      	bne.n	800b8ec <RCC_Delay+0x1c>
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bc80      	pop	{r7}
 800b902:	4770      	bx	lr
 800b904:	200009c4 	.word	0x200009c4
 800b908:	10624dd3 	.word	0x10624dd3

0800b90c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e041      	b.n	800b9a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7fd fa26 	bl	8008d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3304      	adds	r3, #4
 800b948:	4619      	mov	r1, r3
 800b94a:	4610      	mov	r0, r2
 800b94c:	f000 fa82 	bl	800be54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d001      	beq.n	800b9c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e044      	b.n	800ba4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68da      	ldr	r2, [r3, #12]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f042 0201 	orr.w	r2, r2, #1
 800b9da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a1d      	ldr	r2, [pc, #116]	; (800ba58 <HAL_TIM_Base_Start_IT+0xac>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d018      	beq.n	800ba18 <HAL_TIM_Base_Start_IT+0x6c>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a1c      	ldr	r2, [pc, #112]	; (800ba5c <HAL_TIM_Base_Start_IT+0xb0>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d013      	beq.n	800ba18 <HAL_TIM_Base_Start_IT+0x6c>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f8:	d00e      	beq.n	800ba18 <HAL_TIM_Base_Start_IT+0x6c>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a18      	ldr	r2, [pc, #96]	; (800ba60 <HAL_TIM_Base_Start_IT+0xb4>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d009      	beq.n	800ba18 <HAL_TIM_Base_Start_IT+0x6c>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a16      	ldr	r2, [pc, #88]	; (800ba64 <HAL_TIM_Base_Start_IT+0xb8>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d004      	beq.n	800ba18 <HAL_TIM_Base_Start_IT+0x6c>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a15      	ldr	r2, [pc, #84]	; (800ba68 <HAL_TIM_Base_Start_IT+0xbc>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d111      	bne.n	800ba3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f003 0307 	and.w	r3, r3, #7
 800ba22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b06      	cmp	r3, #6
 800ba28:	d010      	beq.n	800ba4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f042 0201 	orr.w	r2, r2, #1
 800ba38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3a:	e007      	b.n	800ba4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f042 0201 	orr.w	r2, r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bc80      	pop	{r7}
 800ba56:	4770      	bx	lr
 800ba58:	40012c00 	.word	0x40012c00
 800ba5c:	40013400 	.word	0x40013400
 800ba60:	40000400 	.word	0x40000400
 800ba64:	40000800 	.word	0x40000800
 800ba68:	40000c00 	.word	0x40000c00

0800ba6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f003 0302 	and.w	r3, r3, #2
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d122      	bne.n	800bac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	f003 0302 	and.w	r3, r3, #2
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d11b      	bne.n	800bac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f06f 0202 	mvn.w	r2, #2
 800ba98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f9b4 	bl	800be1c <HAL_TIM_IC_CaptureCallback>
 800bab4:	e005      	b.n	800bac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f9a7 	bl	800be0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f9b6 	bl	800be2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	f003 0304 	and.w	r3, r3, #4
 800bad2:	2b04      	cmp	r3, #4
 800bad4:	d122      	bne.n	800bb1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	f003 0304 	and.w	r3, r3, #4
 800bae0:	2b04      	cmp	r3, #4
 800bae2:	d11b      	bne.n	800bb1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f06f 0204 	mvn.w	r2, #4
 800baec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2202      	movs	r2, #2
 800baf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f98a 	bl	800be1c <HAL_TIM_IC_CaptureCallback>
 800bb08:	e005      	b.n	800bb16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f97d 	bl	800be0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f98c 	bl	800be2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	f003 0308 	and.w	r3, r3, #8
 800bb26:	2b08      	cmp	r3, #8
 800bb28:	d122      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f003 0308 	and.w	r3, r3, #8
 800bb34:	2b08      	cmp	r3, #8
 800bb36:	d11b      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f06f 0208 	mvn.w	r2, #8
 800bb40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2204      	movs	r2, #4
 800bb46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	f003 0303 	and.w	r3, r3, #3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d003      	beq.n	800bb5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f960 	bl	800be1c <HAL_TIM_IC_CaptureCallback>
 800bb5c:	e005      	b.n	800bb6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f953 	bl	800be0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f962 	bl	800be2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f003 0310 	and.w	r3, r3, #16
 800bb7a:	2b10      	cmp	r3, #16
 800bb7c:	d122      	bne.n	800bbc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f003 0310 	and.w	r3, r3, #16
 800bb88:	2b10      	cmp	r3, #16
 800bb8a:	d11b      	bne.n	800bbc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f06f 0210 	mvn.w	r2, #16
 800bb94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2208      	movs	r2, #8
 800bb9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	69db      	ldr	r3, [r3, #28]
 800bba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f936 	bl	800be1c <HAL_TIM_IC_CaptureCallback>
 800bbb0:	e005      	b.n	800bbbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f929 	bl	800be0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f938 	bl	800be2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d10e      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d107      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f06f 0201 	mvn.w	r2, #1
 800bbe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7fc fd54 	bl	8008698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfa:	2b80      	cmp	r3, #128	; 0x80
 800bbfc:	d10e      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc08:	2b80      	cmp	r3, #128	; 0x80
 800bc0a:	d107      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 faa1 	bl	800c15e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc26:	2b40      	cmp	r3, #64	; 0x40
 800bc28:	d10e      	bne.n	800bc48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc34:	2b40      	cmp	r3, #64	; 0x40
 800bc36:	d107      	bne.n	800bc48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f8fc 	bl	800be40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	f003 0320 	and.w	r3, r3, #32
 800bc52:	2b20      	cmp	r3, #32
 800bc54:	d10e      	bne.n	800bc74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	f003 0320 	and.w	r3, r3, #32
 800bc60:	2b20      	cmp	r3, #32
 800bc62:	d107      	bne.n	800bc74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f06f 0220 	mvn.w	r2, #32
 800bc6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fa6c 	bl	800c14c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d101      	bne.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c>
 800bc94:	2302      	movs	r3, #2
 800bc96:	e0b4      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x186>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bcb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcd0:	d03e      	beq.n	800bd50 <HAL_TIM_ConfigClockSource+0xd4>
 800bcd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcd6:	f200 8087 	bhi.w	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcde:	f000 8086 	beq.w	800bdee <HAL_TIM_ConfigClockSource+0x172>
 800bce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce6:	d87f      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bce8:	2b70      	cmp	r3, #112	; 0x70
 800bcea:	d01a      	beq.n	800bd22 <HAL_TIM_ConfigClockSource+0xa6>
 800bcec:	2b70      	cmp	r3, #112	; 0x70
 800bcee:	d87b      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcf0:	2b60      	cmp	r3, #96	; 0x60
 800bcf2:	d050      	beq.n	800bd96 <HAL_TIM_ConfigClockSource+0x11a>
 800bcf4:	2b60      	cmp	r3, #96	; 0x60
 800bcf6:	d877      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcf8:	2b50      	cmp	r3, #80	; 0x50
 800bcfa:	d03c      	beq.n	800bd76 <HAL_TIM_ConfigClockSource+0xfa>
 800bcfc:	2b50      	cmp	r3, #80	; 0x50
 800bcfe:	d873      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bd00:	2b40      	cmp	r3, #64	; 0x40
 800bd02:	d058      	beq.n	800bdb6 <HAL_TIM_ConfigClockSource+0x13a>
 800bd04:	2b40      	cmp	r3, #64	; 0x40
 800bd06:	d86f      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bd08:	2b30      	cmp	r3, #48	; 0x30
 800bd0a:	d064      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bd0c:	2b30      	cmp	r3, #48	; 0x30
 800bd0e:	d86b      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	d060      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d867      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d05c      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bd1c:	2b10      	cmp	r3, #16
 800bd1e:	d05a      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bd20:	e062      	b.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd32:	f000 f980 	bl	800c036 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	609a      	str	r2, [r3, #8]
      break;
 800bd4e:	e04f      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd60:	f000 f969 	bl	800c036 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	689a      	ldr	r2, [r3, #8]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd72:	609a      	str	r2, [r3, #8]
      break;
 800bd74:	e03c      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd82:	461a      	mov	r2, r3
 800bd84:	f000 f8e0 	bl	800bf48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2150      	movs	r1, #80	; 0x50
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 f937 	bl	800c002 <TIM_ITRx_SetConfig>
      break;
 800bd94:	e02c      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bda2:	461a      	mov	r2, r3
 800bda4:	f000 f8fe 	bl	800bfa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2160      	movs	r1, #96	; 0x60
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 f927 	bl	800c002 <TIM_ITRx_SetConfig>
      break;
 800bdb4:	e01c      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f000 f8c0 	bl	800bf48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2140      	movs	r1, #64	; 0x40
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 f917 	bl	800c002 <TIM_ITRx_SetConfig>
      break;
 800bdd4:	e00c      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f000 f90e 	bl	800c002 <TIM_ITRx_SetConfig>
      break;
 800bde6:	e003      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	73fb      	strb	r3, [r7, #15]
      break;
 800bdec:	e000      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bdee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	bc80      	pop	{r7}
 800be1a:	4770      	bx	lr

0800be1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be24:	bf00      	nop
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	bc80      	pop	{r7}
 800be2c:	4770      	bx	lr

0800be2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be36:	bf00      	nop
 800be38:	370c      	adds	r7, #12
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bc80      	pop	{r7}
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bc80      	pop	{r7}
 800be50:	4770      	bx	lr
	...

0800be54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a33      	ldr	r2, [pc, #204]	; (800bf34 <TIM_Base_SetConfig+0xe0>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d013      	beq.n	800be94 <TIM_Base_SetConfig+0x40>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a32      	ldr	r2, [pc, #200]	; (800bf38 <TIM_Base_SetConfig+0xe4>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d00f      	beq.n	800be94 <TIM_Base_SetConfig+0x40>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be7a:	d00b      	beq.n	800be94 <TIM_Base_SetConfig+0x40>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a2f      	ldr	r2, [pc, #188]	; (800bf3c <TIM_Base_SetConfig+0xe8>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d007      	beq.n	800be94 <TIM_Base_SetConfig+0x40>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a2e      	ldr	r2, [pc, #184]	; (800bf40 <TIM_Base_SetConfig+0xec>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d003      	beq.n	800be94 <TIM_Base_SetConfig+0x40>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a2d      	ldr	r2, [pc, #180]	; (800bf44 <TIM_Base_SetConfig+0xf0>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d108      	bne.n	800bea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a22      	ldr	r2, [pc, #136]	; (800bf34 <TIM_Base_SetConfig+0xe0>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d013      	beq.n	800bed6 <TIM_Base_SetConfig+0x82>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a21      	ldr	r2, [pc, #132]	; (800bf38 <TIM_Base_SetConfig+0xe4>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00f      	beq.n	800bed6 <TIM_Base_SetConfig+0x82>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bebc:	d00b      	beq.n	800bed6 <TIM_Base_SetConfig+0x82>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a1e      	ldr	r2, [pc, #120]	; (800bf3c <TIM_Base_SetConfig+0xe8>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d007      	beq.n	800bed6 <TIM_Base_SetConfig+0x82>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a1d      	ldr	r2, [pc, #116]	; (800bf40 <TIM_Base_SetConfig+0xec>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d003      	beq.n	800bed6 <TIM_Base_SetConfig+0x82>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a1c      	ldr	r2, [pc, #112]	; (800bf44 <TIM_Base_SetConfig+0xf0>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d108      	bne.n	800bee8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bedc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	689a      	ldr	r2, [r3, #8]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a09      	ldr	r2, [pc, #36]	; (800bf34 <TIM_Base_SetConfig+0xe0>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d003      	beq.n	800bf1c <TIM_Base_SetConfig+0xc8>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a08      	ldr	r2, [pc, #32]	; (800bf38 <TIM_Base_SetConfig+0xe4>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d103      	bne.n	800bf24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	691a      	ldr	r2, [r3, #16]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	615a      	str	r2, [r3, #20]
}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr
 800bf34:	40012c00 	.word	0x40012c00
 800bf38:	40013400 	.word	0x40013400
 800bf3c:	40000400 	.word	0x40000400
 800bf40:	40000800 	.word	0x40000800
 800bf44:	40000c00 	.word	0x40000c00

0800bf48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6a1b      	ldr	r3, [r3, #32]
 800bf58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	f023 0201 	bic.w	r2, r3, #1
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f023 030a 	bic.w	r3, r3, #10
 800bf84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	621a      	str	r2, [r3, #32]
}
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bc80      	pop	{r7}
 800bfa2:	4770      	bx	lr

0800bfa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6a1b      	ldr	r3, [r3, #32]
 800bfb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	f023 0210 	bic.w	r2, r3, #16
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bfce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	031b      	lsls	r3, r3, #12
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bfe0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	011b      	lsls	r3, r3, #4
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	621a      	str	r2, [r3, #32]
}
 800bff8:	bf00      	nop
 800bffa:	371c      	adds	r7, #28
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bc80      	pop	{r7}
 800c000:	4770      	bx	lr

0800c002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c002:	b480      	push	{r7}
 800c004:	b085      	sub	sp, #20
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4313      	orrs	r3, r2
 800c020:	f043 0307 	orr.w	r3, r3, #7
 800c024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	609a      	str	r2, [r3, #8]
}
 800c02c:	bf00      	nop
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	bc80      	pop	{r7}
 800c034:	4770      	bx	lr

0800c036 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c036:	b480      	push	{r7}
 800c038:	b087      	sub	sp, #28
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	60f8      	str	r0, [r7, #12]
 800c03e:	60b9      	str	r1, [r7, #8]
 800c040:	607a      	str	r2, [r7, #4]
 800c042:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c050:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	021a      	lsls	r2, r3, #8
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	431a      	orrs	r2, r3
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	697a      	ldr	r2, [r7, #20]
 800c060:	4313      	orrs	r3, r2
 800c062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	609a      	str	r2, [r3, #8]
}
 800c06a:	bf00      	nop
 800c06c:	371c      	adds	r7, #28
 800c06e:	46bd      	mov	sp, r7
 800c070:	bc80      	pop	{r7}
 800c072:	4770      	bx	lr

0800c074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c084:	2b01      	cmp	r3, #1
 800c086:	d101      	bne.n	800c08c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c088:	2302      	movs	r3, #2
 800c08a:	e050      	b.n	800c12e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2202      	movs	r2, #2
 800c098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a1b      	ldr	r2, [pc, #108]	; (800c138 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d018      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a19      	ldr	r2, [pc, #100]	; (800c13c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d013      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0e2:	d00e      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a15      	ldr	r2, [pc, #84]	; (800c140 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d009      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a14      	ldr	r2, [pc, #80]	; (800c144 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d004      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a12      	ldr	r2, [pc, #72]	; (800c148 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d10c      	bne.n	800c11c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	4313      	orrs	r3, r2
 800c112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	bc80      	pop	{r7}
 800c136:	4770      	bx	lr
 800c138:	40012c00 	.word	0x40012c00
 800c13c:	40013400 	.word	0x40013400
 800c140:	40000400 	.word	0x40000400
 800c144:	40000800 	.word	0x40000800
 800c148:	40000c00 	.word	0x40000c00

0800c14c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	bc80      	pop	{r7}
 800c15c:	4770      	bx	lr

0800c15e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c15e:	b480      	push	{r7}
 800c160:	b083      	sub	sp, #12
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bc80      	pop	{r7}
 800c16e:	4770      	bx	lr

0800c170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e042      	b.n	800c208 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7fc fe1a 	bl	8008dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2224      	movs	r2, #36	; 0x24
 800c1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68da      	ldr	r2, [r3, #12]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fcb5 	bl	800cb24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	691a      	ldr	r2, [r3, #16]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	695a      	ldr	r2, [r3, #20]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68da      	ldr	r2, [r3, #12]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	4613      	mov	r3, r2
 800c21c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b20      	cmp	r3, #32
 800c228:	d121      	bne.n	800c26e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d002      	beq.n	800c236 <HAL_UART_Transmit_IT+0x26>
 800c230:	88fb      	ldrh	r3, [r7, #6]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e01a      	b.n	800c270 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	88fa      	ldrh	r2, [r7, #6]
 800c244:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	88fa      	ldrh	r2, [r7, #6]
 800c24a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2221      	movs	r2, #33	; 0x21
 800c256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68da      	ldr	r2, [r3, #12]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c268:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	e000      	b.n	800c270 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c26e:	2302      	movs	r3, #2
  }
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	bc80      	pop	{r7}
 800c278:	4770      	bx	lr
	...

0800c27c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b0ba      	sub	sp, #232	; 0xe8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b2:	f003 030f 	and.w	r3, r3, #15
 800c2b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c2ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10f      	bne.n	800c2e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c6:	f003 0320 	and.w	r3, r3, #32
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d009      	beq.n	800c2e2 <HAL_UART_IRQHandler+0x66>
 800c2ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d2:	f003 0320 	and.w	r3, r3, #32
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fb63 	bl	800c9a6 <UART_Receive_IT>
      return;
 800c2e0:	e25b      	b.n	800c79a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c2e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 80de 	beq.w	800c4a8 <HAL_UART_IRQHandler+0x22c>
 800c2ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c300:	2b00      	cmp	r3, #0
 800c302:	f000 80d1 	beq.w	800c4a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c30a:	f003 0301 	and.w	r3, r3, #1
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00b      	beq.n	800c32a <HAL_UART_IRQHandler+0xae>
 800c312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d005      	beq.n	800c32a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c322:	f043 0201 	orr.w	r2, r3, #1
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c32e:	f003 0304 	and.w	r3, r3, #4
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00b      	beq.n	800c34e <HAL_UART_IRQHandler+0xd2>
 800c336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d005      	beq.n	800c34e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c346:	f043 0202 	orr.w	r2, r3, #2
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c352:	f003 0302 	and.w	r3, r3, #2
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00b      	beq.n	800c372 <HAL_UART_IRQHandler+0xf6>
 800c35a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	d005      	beq.n	800c372 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c36a:	f043 0204 	orr.w	r2, r3, #4
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c376:	f003 0308 	and.w	r3, r3, #8
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d011      	beq.n	800c3a2 <HAL_UART_IRQHandler+0x126>
 800c37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c382:	f003 0320 	and.w	r3, r3, #32
 800c386:	2b00      	cmp	r3, #0
 800c388:	d105      	bne.n	800c396 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c38a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d005      	beq.n	800c3a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39a:	f043 0208 	orr.w	r2, r3, #8
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 81f2 	beq.w	800c790 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3b0:	f003 0320 	and.w	r3, r3, #32
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_UART_IRQHandler+0x14e>
 800c3b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3bc:	f003 0320 	and.w	r3, r3, #32
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 faee 	bl	800c9a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	695b      	ldr	r3, [r3, #20]
 800c3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bf14      	ite	ne
 800c3d8:	2301      	movne	r3, #1
 800c3da:	2300      	moveq	r3, #0
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e6:	f003 0308 	and.w	r3, r3, #8
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d103      	bne.n	800c3f6 <HAL_UART_IRQHandler+0x17a>
 800c3ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d04f      	beq.n	800c496 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 f9f8 	bl	800c7ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	695b      	ldr	r3, [r3, #20]
 800c402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c406:	2b00      	cmp	r3, #0
 800c408:	d041      	beq.n	800c48e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3314      	adds	r3, #20
 800c410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c418:	e853 3f00 	ldrex	r3, [r3]
 800c41c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3314      	adds	r3, #20
 800c432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c436:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c43a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c44e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1d9      	bne.n	800c40a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d013      	beq.n	800c486 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c462:	4a7e      	ldr	r2, [pc, #504]	; (800c65c <HAL_UART_IRQHandler+0x3e0>)
 800c464:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fd f86c 	bl	8009548 <HAL_DMA_Abort_IT>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d016      	beq.n	800c4a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c480:	4610      	mov	r0, r2
 800c482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c484:	e00e      	b.n	800c4a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f99c 	bl	800c7c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c48c:	e00a      	b.n	800c4a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f998 	bl	800c7c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c494:	e006      	b.n	800c4a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f994 	bl	800c7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c4a2:	e175      	b.n	800c790 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a4:	bf00      	nop
    return;
 800c4a6:	e173      	b.n	800c790 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	f040 814f 	bne.w	800c750 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4b6:	f003 0310 	and.w	r3, r3, #16
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 8148 	beq.w	800c750 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c4:	f003 0310 	and.w	r3, r3, #16
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 8141 	beq.w	800c750 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60bb      	str	r3, [r7, #8]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	60bb      	str	r3, [r7, #8]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	60bb      	str	r3, [r7, #8]
 800c4e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 80b6 	beq.w	800c660 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c500:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 8145 	beq.w	800c794 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c50e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c512:	429a      	cmp	r2, r3
 800c514:	f080 813e 	bcs.w	800c794 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c51e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c524:	699b      	ldr	r3, [r3, #24]
 800c526:	2b20      	cmp	r3, #32
 800c528:	f000 8088 	beq.w	800c63c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	330c      	adds	r3, #12
 800c532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c53a:	e853 3f00 	ldrex	r3, [r3]
 800c53e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c542:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c54a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	330c      	adds	r3, #12
 800c554:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c558:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c55c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c560:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c564:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c568:	e841 2300 	strex	r3, r2, [r1]
 800c56c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1d9      	bne.n	800c52c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3314      	adds	r3, #20
 800c57e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c582:	e853 3f00 	ldrex	r3, [r3]
 800c586:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c58a:	f023 0301 	bic.w	r3, r3, #1
 800c58e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3314      	adds	r3, #20
 800c598:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c59c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5a8:	e841 2300 	strex	r3, r2, [r1]
 800c5ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e1      	bne.n	800c578 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3314      	adds	r3, #20
 800c5ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5be:	e853 3f00 	ldrex	r3, [r3]
 800c5c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3314      	adds	r3, #20
 800c5d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5e0:	e841 2300 	strex	r3, r2, [r1]
 800c5e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1e3      	bne.n	800c5b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2220      	movs	r2, #32
 800c5f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	330c      	adds	r3, #12
 800c600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c604:	e853 3f00 	ldrex	r3, [r3]
 800c608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c60c:	f023 0310 	bic.w	r3, r3, #16
 800c610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	330c      	adds	r3, #12
 800c61a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c61e:	65ba      	str	r2, [r7, #88]	; 0x58
 800c620:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c622:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c626:	e841 2300 	strex	r3, r2, [r1]
 800c62a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1e3      	bne.n	800c5fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c636:	4618      	mov	r0, r3
 800c638:	f7fc ff4b 	bl	80094d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2202      	movs	r2, #2
 800c640:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	b29b      	uxth	r3, r3
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f8bf 	bl	800c7d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c658:	e09c      	b.n	800c794 <HAL_UART_IRQHandler+0x518>
 800c65a:	bf00      	nop
 800c65c:	0800c8b1 	.word	0x0800c8b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c668:	b29b      	uxth	r3, r3
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c674:	b29b      	uxth	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 808e 	beq.w	800c798 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c67c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 8089 	beq.w	800c798 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	330c      	adds	r3, #12
 800c68c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c690:	e853 3f00 	ldrex	r3, [r3]
 800c694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c69c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	330c      	adds	r3, #12
 800c6a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6aa:	647a      	str	r2, [r7, #68]	; 0x44
 800c6ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6b2:	e841 2300 	strex	r3, r2, [r1]
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1e3      	bne.n	800c686 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3314      	adds	r3, #20
 800c6c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c8:	e853 3f00 	ldrex	r3, [r3]
 800c6cc:	623b      	str	r3, [r7, #32]
   return(result);
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	f023 0301 	bic.w	r3, r3, #1
 800c6d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3314      	adds	r3, #20
 800c6de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6e2:	633a      	str	r2, [r7, #48]	; 0x30
 800c6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ea:	e841 2300 	strex	r3, r2, [r1]
 800c6ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1e3      	bne.n	800c6be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2220      	movs	r2, #32
 800c6fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	330c      	adds	r3, #12
 800c70a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	e853 3f00 	ldrex	r3, [r3]
 800c712:	60fb      	str	r3, [r7, #12]
   return(result);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f023 0310 	bic.w	r3, r3, #16
 800c71a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	330c      	adds	r3, #12
 800c724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c728:	61fa      	str	r2, [r7, #28]
 800c72a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72c:	69b9      	ldr	r1, [r7, #24]
 800c72e:	69fa      	ldr	r2, [r7, #28]
 800c730:	e841 2300 	strex	r3, r2, [r1]
 800c734:	617b      	str	r3, [r7, #20]
   return(result);
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1e3      	bne.n	800c704 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2202      	movs	r2, #2
 800c740:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c742:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c746:	4619      	mov	r1, r3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f844 	bl	800c7d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c74e:	e023      	b.n	800c798 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d009      	beq.n	800c770 <HAL_UART_IRQHandler+0x4f4>
 800c75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c764:	2b00      	cmp	r3, #0
 800c766:	d003      	beq.n	800c770 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f8b5 	bl	800c8d8 <UART_Transmit_IT>
    return;
 800c76e:	e014      	b.n	800c79a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00e      	beq.n	800c79a <HAL_UART_IRQHandler+0x51e>
 800c77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	d008      	beq.n	800c79a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f8f4 	bl	800c976 <UART_EndTransmit_IT>
    return;
 800c78e:	e004      	b.n	800c79a <HAL_UART_IRQHandler+0x51e>
    return;
 800c790:	bf00      	nop
 800c792:	e002      	b.n	800c79a <HAL_UART_IRQHandler+0x51e>
      return;
 800c794:	bf00      	nop
 800c796:	e000      	b.n	800c79a <HAL_UART_IRQHandler+0x51e>
      return;
 800c798:	bf00      	nop
  }
}
 800c79a:	37e8      	adds	r7, #232	; 0xe8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bc80      	pop	{r7}
 800c7b0:	4770      	bx	lr

0800c7b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7b2:	b480      	push	{r7}
 800c7b4:	b083      	sub	sp, #12
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c7ba:	bf00      	nop
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bc80      	pop	{r7}
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c7cc:	bf00      	nop
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bc80      	pop	{r7}
 800c7d4:	4770      	bx	lr

0800c7d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7e2:	bf00      	nop
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bc80      	pop	{r7}
 800c7ea:	4770      	bx	lr

0800c7ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b095      	sub	sp, #84	; 0x54
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	330c      	adds	r3, #12
 800c7fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7fe:	e853 3f00 	ldrex	r3, [r3]
 800c802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c80a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	330c      	adds	r3, #12
 800c812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c814:	643a      	str	r2, [r7, #64]	; 0x40
 800c816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c81a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c81c:	e841 2300 	strex	r3, r2, [r1]
 800c820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1e5      	bne.n	800c7f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3314      	adds	r3, #20
 800c82e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c830:	6a3b      	ldr	r3, [r7, #32]
 800c832:	e853 3f00 	ldrex	r3, [r3]
 800c836:	61fb      	str	r3, [r7, #28]
   return(result);
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	f023 0301 	bic.w	r3, r3, #1
 800c83e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3314      	adds	r3, #20
 800c846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c84a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c850:	e841 2300 	strex	r3, r2, [r1]
 800c854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e5      	bne.n	800c828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c860:	2b01      	cmp	r3, #1
 800c862:	d119      	bne.n	800c898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	330c      	adds	r3, #12
 800c86a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	e853 3f00 	ldrex	r3, [r3]
 800c872:	60bb      	str	r3, [r7, #8]
   return(result);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	f023 0310 	bic.w	r3, r3, #16
 800c87a:	647b      	str	r3, [r7, #68]	; 0x44
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	330c      	adds	r3, #12
 800c882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c884:	61ba      	str	r2, [r7, #24]
 800c886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c888:	6979      	ldr	r1, [r7, #20]
 800c88a:	69ba      	ldr	r2, [r7, #24]
 800c88c:	e841 2300 	strex	r3, r2, [r1]
 800c890:	613b      	str	r3, [r7, #16]
   return(result);
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e5      	bne.n	800c864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2220      	movs	r2, #32
 800c89c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c8a6:	bf00      	nop
 800c8a8:	3754      	adds	r7, #84	; 0x54
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bc80      	pop	{r7}
 800c8ae:	4770      	bx	lr

0800c8b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f7ff ff7a 	bl	800c7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8d0:	bf00      	nop
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	2b21      	cmp	r3, #33	; 0x21
 800c8ea:	d13e      	bne.n	800c96a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8f4:	d114      	bne.n	800c920 <UART_Transmit_IT+0x48>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d110      	bne.n	800c920 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c912:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	1c9a      	adds	r2, r3, #2
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	621a      	str	r2, [r3, #32]
 800c91e:	e008      	b.n	800c932 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6a1b      	ldr	r3, [r3, #32]
 800c924:	1c59      	adds	r1, r3, #1
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	6211      	str	r1, [r2, #32]
 800c92a:	781a      	ldrb	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c936:	b29b      	uxth	r3, r3
 800c938:	3b01      	subs	r3, #1
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4619      	mov	r1, r3
 800c940:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10f      	bne.n	800c966 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68da      	ldr	r2, [r3, #12]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c954:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68da      	ldr	r2, [r3, #12]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c964:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	e000      	b.n	800c96c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c96a:	2302      	movs	r3, #2
  }
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	bc80      	pop	{r7}
 800c974:	4770      	bx	lr

0800c976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c98c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2220      	movs	r2, #32
 800c992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff ff02 	bl	800c7a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b08c      	sub	sp, #48	; 0x30
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b22      	cmp	r3, #34	; 0x22
 800c9b8:	f040 80ae 	bne.w	800cb18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9c4:	d117      	bne.n	800c9f6 <UART_Receive_IT+0x50>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d113      	bne.n	800c9f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ee:	1c9a      	adds	r2, r3, #2
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	629a      	str	r2, [r3, #40]	; 0x28
 800c9f4:	e026      	b.n	800ca44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca08:	d007      	beq.n	800ca1a <UART_Receive_IT+0x74>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10a      	bne.n	800ca28 <UART_Receive_IT+0x82>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d106      	bne.n	800ca28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	701a      	strb	r2, [r3, #0]
 800ca26:	e008      	b.n	800ca3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	4619      	mov	r1, r3
 800ca52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d15d      	bne.n	800cb14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68da      	ldr	r2, [r3, #12]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f022 0220 	bic.w	r2, r2, #32
 800ca66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68da      	ldr	r2, [r3, #12]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	695a      	ldr	r2, [r3, #20]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f022 0201 	bic.w	r2, r2, #1
 800ca86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2220      	movs	r2, #32
 800ca8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d135      	bne.n	800cb0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	330c      	adds	r3, #12
 800caaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	e853 3f00 	ldrex	r3, [r3]
 800cab2:	613b      	str	r3, [r7, #16]
   return(result);
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	f023 0310 	bic.w	r3, r3, #16
 800caba:	627b      	str	r3, [r7, #36]	; 0x24
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	330c      	adds	r3, #12
 800cac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac4:	623a      	str	r2, [r7, #32]
 800cac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac8:	69f9      	ldr	r1, [r7, #28]
 800caca:	6a3a      	ldr	r2, [r7, #32]
 800cacc:	e841 2300 	strex	r3, r2, [r1]
 800cad0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1e5      	bne.n	800caa4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 0310 	and.w	r3, r3, #16
 800cae2:	2b10      	cmp	r3, #16
 800cae4:	d10a      	bne.n	800cafc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cae6:	2300      	movs	r3, #0
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	60fb      	str	r3, [r7, #12]
 800cafa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff fe67 	bl	800c7d6 <HAL_UARTEx_RxEventCallback>
 800cb08:	e002      	b.n	800cb10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7ff fe51 	bl	800c7b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	e002      	b.n	800cb1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	e000      	b.n	800cb1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb18:	2302      	movs	r3, #2
  }
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3730      	adds	r7, #48	; 0x30
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
	...

0800cb24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	68da      	ldr	r2, [r3, #12]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	689a      	ldr	r2, [r3, #8]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cb5e:	f023 030c 	bic.w	r3, r3, #12
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	6812      	ldr	r2, [r2, #0]
 800cb66:	68b9      	ldr	r1, [r7, #8]
 800cb68:	430b      	orrs	r3, r1
 800cb6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	699a      	ldr	r2, [r3, #24]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a2c      	ldr	r2, [pc, #176]	; (800cc38 <UART_SetConfig+0x114>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d103      	bne.n	800cb94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cb8c:	f7fe fe8c 	bl	800b8a8 <HAL_RCC_GetPCLK2Freq>
 800cb90:	60f8      	str	r0, [r7, #12]
 800cb92:	e002      	b.n	800cb9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cb94:	f7fe fe74 	bl	800b880 <HAL_RCC_GetPCLK1Freq>
 800cb98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	009a      	lsls	r2, r3, #2
 800cba4:	441a      	add	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb0:	4a22      	ldr	r2, [pc, #136]	; (800cc3c <UART_SetConfig+0x118>)
 800cbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb6:	095b      	lsrs	r3, r3, #5
 800cbb8:	0119      	lsls	r1, r3, #4
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	009a      	lsls	r2, r3, #2
 800cbc4:	441a      	add	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbd0:	4b1a      	ldr	r3, [pc, #104]	; (800cc3c <UART_SetConfig+0x118>)
 800cbd2:	fba3 0302 	umull	r0, r3, r3, r2
 800cbd6:	095b      	lsrs	r3, r3, #5
 800cbd8:	2064      	movs	r0, #100	; 0x64
 800cbda:	fb00 f303 	mul.w	r3, r0, r3
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	011b      	lsls	r3, r3, #4
 800cbe2:	3332      	adds	r3, #50	; 0x32
 800cbe4:	4a15      	ldr	r2, [pc, #84]	; (800cc3c <UART_SetConfig+0x118>)
 800cbe6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbea:	095b      	lsrs	r3, r3, #5
 800cbec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbf0:	4419      	add	r1, r3
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009a      	lsls	r2, r3, #2
 800cbfc:	441a      	add	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc08:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <UART_SetConfig+0x118>)
 800cc0a:	fba3 0302 	umull	r0, r3, r3, r2
 800cc0e:	095b      	lsrs	r3, r3, #5
 800cc10:	2064      	movs	r0, #100	; 0x64
 800cc12:	fb00 f303 	mul.w	r3, r0, r3
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	3332      	adds	r3, #50	; 0x32
 800cc1c:	4a07      	ldr	r2, [pc, #28]	; (800cc3c <UART_SetConfig+0x118>)
 800cc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc22:	095b      	lsrs	r3, r3, #5
 800cc24:	f003 020f 	and.w	r2, r3, #15
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	440a      	add	r2, r1
 800cc2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cc30:	bf00      	nop
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	40013800 	.word	0x40013800
 800cc3c:	51eb851f 	.word	0x51eb851f

0800cc40 <__itoa>:
 800cc40:	1e93      	subs	r3, r2, #2
 800cc42:	2b22      	cmp	r3, #34	; 0x22
 800cc44:	b510      	push	{r4, lr}
 800cc46:	460c      	mov	r4, r1
 800cc48:	d904      	bls.n	800cc54 <__itoa+0x14>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	461c      	mov	r4, r3
 800cc4e:	700b      	strb	r3, [r1, #0]
 800cc50:	4620      	mov	r0, r4
 800cc52:	bd10      	pop	{r4, pc}
 800cc54:	2a0a      	cmp	r2, #10
 800cc56:	d109      	bne.n	800cc6c <__itoa+0x2c>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	da07      	bge.n	800cc6c <__itoa+0x2c>
 800cc5c:	232d      	movs	r3, #45	; 0x2d
 800cc5e:	700b      	strb	r3, [r1, #0]
 800cc60:	2101      	movs	r1, #1
 800cc62:	4240      	negs	r0, r0
 800cc64:	4421      	add	r1, r4
 800cc66:	f000 f8b9 	bl	800cddc <__utoa>
 800cc6a:	e7f1      	b.n	800cc50 <__itoa+0x10>
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	e7f9      	b.n	800cc64 <__itoa+0x24>

0800cc70 <itoa>:
 800cc70:	f7ff bfe6 	b.w	800cc40 <__itoa>

0800cc74 <malloc>:
 800cc74:	4b02      	ldr	r3, [pc, #8]	; (800cc80 <malloc+0xc>)
 800cc76:	4601      	mov	r1, r0
 800cc78:	6818      	ldr	r0, [r3, #0]
 800cc7a:	f000 b823 	b.w	800ccc4 <_malloc_r>
 800cc7e:	bf00      	nop
 800cc80:	20000a1c 	.word	0x20000a1c

0800cc84 <sbrk_aligned>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	4e0e      	ldr	r6, [pc, #56]	; (800ccc0 <sbrk_aligned+0x3c>)
 800cc88:	460c      	mov	r4, r1
 800cc8a:	6831      	ldr	r1, [r6, #0]
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	b911      	cbnz	r1, 800cc96 <sbrk_aligned+0x12>
 800cc90:	f000 f91e 	bl	800ced0 <_sbrk_r>
 800cc94:	6030      	str	r0, [r6, #0]
 800cc96:	4621      	mov	r1, r4
 800cc98:	4628      	mov	r0, r5
 800cc9a:	f000 f919 	bl	800ced0 <_sbrk_r>
 800cc9e:	1c43      	adds	r3, r0, #1
 800cca0:	d00a      	beq.n	800ccb8 <sbrk_aligned+0x34>
 800cca2:	1cc4      	adds	r4, r0, #3
 800cca4:	f024 0403 	bic.w	r4, r4, #3
 800cca8:	42a0      	cmp	r0, r4
 800ccaa:	d007      	beq.n	800ccbc <sbrk_aligned+0x38>
 800ccac:	1a21      	subs	r1, r4, r0
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 f90e 	bl	800ced0 <_sbrk_r>
 800ccb4:	3001      	adds	r0, #1
 800ccb6:	d101      	bne.n	800ccbc <sbrk_aligned+0x38>
 800ccb8:	f04f 34ff 	mov.w	r4, #4294967295
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	20000ef8 	.word	0x20000ef8

0800ccc4 <_malloc_r>:
 800ccc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccc8:	1ccd      	adds	r5, r1, #3
 800ccca:	f025 0503 	bic.w	r5, r5, #3
 800ccce:	3508      	adds	r5, #8
 800ccd0:	2d0c      	cmp	r5, #12
 800ccd2:	bf38      	it	cc
 800ccd4:	250c      	movcc	r5, #12
 800ccd6:	2d00      	cmp	r5, #0
 800ccd8:	4607      	mov	r7, r0
 800ccda:	db01      	blt.n	800cce0 <_malloc_r+0x1c>
 800ccdc:	42a9      	cmp	r1, r5
 800ccde:	d905      	bls.n	800ccec <_malloc_r+0x28>
 800cce0:	230c      	movs	r3, #12
 800cce2:	2600      	movs	r6, #0
 800cce4:	603b      	str	r3, [r7, #0]
 800cce6:	4630      	mov	r0, r6
 800cce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cdc0 <_malloc_r+0xfc>
 800ccf0:	f000 f868 	bl	800cdc4 <__malloc_lock>
 800ccf4:	f8d8 3000 	ldr.w	r3, [r8]
 800ccf8:	461c      	mov	r4, r3
 800ccfa:	bb5c      	cbnz	r4, 800cd54 <_malloc_r+0x90>
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f7ff ffc0 	bl	800cc84 <sbrk_aligned>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	4604      	mov	r4, r0
 800cd08:	d155      	bne.n	800cdb6 <_malloc_r+0xf2>
 800cd0a:	f8d8 4000 	ldr.w	r4, [r8]
 800cd0e:	4626      	mov	r6, r4
 800cd10:	2e00      	cmp	r6, #0
 800cd12:	d145      	bne.n	800cda0 <_malloc_r+0xdc>
 800cd14:	2c00      	cmp	r4, #0
 800cd16:	d048      	beq.n	800cdaa <_malloc_r+0xe6>
 800cd18:	6823      	ldr	r3, [r4, #0]
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	4638      	mov	r0, r7
 800cd1e:	eb04 0903 	add.w	r9, r4, r3
 800cd22:	f000 f8d5 	bl	800ced0 <_sbrk_r>
 800cd26:	4581      	cmp	r9, r0
 800cd28:	d13f      	bne.n	800cdaa <_malloc_r+0xe6>
 800cd2a:	6821      	ldr	r1, [r4, #0]
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	1a6d      	subs	r5, r5, r1
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7ff ffa7 	bl	800cc84 <sbrk_aligned>
 800cd36:	3001      	adds	r0, #1
 800cd38:	d037      	beq.n	800cdaa <_malloc_r+0xe6>
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	442b      	add	r3, r5
 800cd3e:	6023      	str	r3, [r4, #0]
 800cd40:	f8d8 3000 	ldr.w	r3, [r8]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d038      	beq.n	800cdba <_malloc_r+0xf6>
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	42a2      	cmp	r2, r4
 800cd4c:	d12b      	bne.n	800cda6 <_malloc_r+0xe2>
 800cd4e:	2200      	movs	r2, #0
 800cd50:	605a      	str	r2, [r3, #4]
 800cd52:	e00f      	b.n	800cd74 <_malloc_r+0xb0>
 800cd54:	6822      	ldr	r2, [r4, #0]
 800cd56:	1b52      	subs	r2, r2, r5
 800cd58:	d41f      	bmi.n	800cd9a <_malloc_r+0xd6>
 800cd5a:	2a0b      	cmp	r2, #11
 800cd5c:	d917      	bls.n	800cd8e <_malloc_r+0xca>
 800cd5e:	1961      	adds	r1, r4, r5
 800cd60:	42a3      	cmp	r3, r4
 800cd62:	6025      	str	r5, [r4, #0]
 800cd64:	bf18      	it	ne
 800cd66:	6059      	strne	r1, [r3, #4]
 800cd68:	6863      	ldr	r3, [r4, #4]
 800cd6a:	bf08      	it	eq
 800cd6c:	f8c8 1000 	streq.w	r1, [r8]
 800cd70:	5162      	str	r2, [r4, r5]
 800cd72:	604b      	str	r3, [r1, #4]
 800cd74:	4638      	mov	r0, r7
 800cd76:	f104 060b 	add.w	r6, r4, #11
 800cd7a:	f000 f829 	bl	800cdd0 <__malloc_unlock>
 800cd7e:	f026 0607 	bic.w	r6, r6, #7
 800cd82:	1d23      	adds	r3, r4, #4
 800cd84:	1af2      	subs	r2, r6, r3
 800cd86:	d0ae      	beq.n	800cce6 <_malloc_r+0x22>
 800cd88:	1b9b      	subs	r3, r3, r6
 800cd8a:	50a3      	str	r3, [r4, r2]
 800cd8c:	e7ab      	b.n	800cce6 <_malloc_r+0x22>
 800cd8e:	42a3      	cmp	r3, r4
 800cd90:	6862      	ldr	r2, [r4, #4]
 800cd92:	d1dd      	bne.n	800cd50 <_malloc_r+0x8c>
 800cd94:	f8c8 2000 	str.w	r2, [r8]
 800cd98:	e7ec      	b.n	800cd74 <_malloc_r+0xb0>
 800cd9a:	4623      	mov	r3, r4
 800cd9c:	6864      	ldr	r4, [r4, #4]
 800cd9e:	e7ac      	b.n	800ccfa <_malloc_r+0x36>
 800cda0:	4634      	mov	r4, r6
 800cda2:	6876      	ldr	r6, [r6, #4]
 800cda4:	e7b4      	b.n	800cd10 <_malloc_r+0x4c>
 800cda6:	4613      	mov	r3, r2
 800cda8:	e7cc      	b.n	800cd44 <_malloc_r+0x80>
 800cdaa:	230c      	movs	r3, #12
 800cdac:	4638      	mov	r0, r7
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	f000 f80e 	bl	800cdd0 <__malloc_unlock>
 800cdb4:	e797      	b.n	800cce6 <_malloc_r+0x22>
 800cdb6:	6025      	str	r5, [r4, #0]
 800cdb8:	e7dc      	b.n	800cd74 <_malloc_r+0xb0>
 800cdba:	605b      	str	r3, [r3, #4]
 800cdbc:	deff      	udf	#255	; 0xff
 800cdbe:	bf00      	nop
 800cdc0:	20000ef4 	.word	0x20000ef4

0800cdc4 <__malloc_lock>:
 800cdc4:	4801      	ldr	r0, [pc, #4]	; (800cdcc <__malloc_lock+0x8>)
 800cdc6:	f000 b8bd 	b.w	800cf44 <__retarget_lock_acquire_recursive>
 800cdca:	bf00      	nop
 800cdcc:	20001038 	.word	0x20001038

0800cdd0 <__malloc_unlock>:
 800cdd0:	4801      	ldr	r0, [pc, #4]	; (800cdd8 <__malloc_unlock+0x8>)
 800cdd2:	f000 b8b8 	b.w	800cf46 <__retarget_lock_release_recursive>
 800cdd6:	bf00      	nop
 800cdd8:	20001038 	.word	0x20001038

0800cddc <__utoa>:
 800cddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdde:	b08b      	sub	sp, #44	; 0x2c
 800cde0:	4605      	mov	r5, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	466e      	mov	r6, sp
 800cde6:	4c1d      	ldr	r4, [pc, #116]	; (800ce5c <__utoa+0x80>)
 800cde8:	f104 0c20 	add.w	ip, r4, #32
 800cdec:	4637      	mov	r7, r6
 800cdee:	6820      	ldr	r0, [r4, #0]
 800cdf0:	6861      	ldr	r1, [r4, #4]
 800cdf2:	3408      	adds	r4, #8
 800cdf4:	c703      	stmia	r7!, {r0, r1}
 800cdf6:	4564      	cmp	r4, ip
 800cdf8:	463e      	mov	r6, r7
 800cdfa:	d1f7      	bne.n	800cdec <__utoa+0x10>
 800cdfc:	7921      	ldrb	r1, [r4, #4]
 800cdfe:	6820      	ldr	r0, [r4, #0]
 800ce00:	7139      	strb	r1, [r7, #4]
 800ce02:	1e91      	subs	r1, r2, #2
 800ce04:	2922      	cmp	r1, #34	; 0x22
 800ce06:	6038      	str	r0, [r7, #0]
 800ce08:	f04f 0100 	mov.w	r1, #0
 800ce0c:	d904      	bls.n	800ce18 <__utoa+0x3c>
 800ce0e:	7019      	strb	r1, [r3, #0]
 800ce10:	460b      	mov	r3, r1
 800ce12:	4618      	mov	r0, r3
 800ce14:	b00b      	add	sp, #44	; 0x2c
 800ce16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce18:	1e58      	subs	r0, r3, #1
 800ce1a:	4684      	mov	ip, r0
 800ce1c:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce20:	fb02 5617 	mls	r6, r2, r7, r5
 800ce24:	3628      	adds	r6, #40	; 0x28
 800ce26:	446e      	add	r6, sp
 800ce28:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ce32:	462e      	mov	r6, r5
 800ce34:	42b2      	cmp	r2, r6
 800ce36:	463d      	mov	r5, r7
 800ce38:	f101 0101 	add.w	r1, r1, #1
 800ce3c:	d9ee      	bls.n	800ce1c <__utoa+0x40>
 800ce3e:	2200      	movs	r2, #0
 800ce40:	545a      	strb	r2, [r3, r1]
 800ce42:	1919      	adds	r1, r3, r4
 800ce44:	1aa5      	subs	r5, r4, r2
 800ce46:	42aa      	cmp	r2, r5
 800ce48:	dae3      	bge.n	800ce12 <__utoa+0x36>
 800ce4a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ce4e:	780e      	ldrb	r6, [r1, #0]
 800ce50:	3201      	adds	r2, #1
 800ce52:	7006      	strb	r6, [r0, #0]
 800ce54:	f801 5901 	strb.w	r5, [r1], #-1
 800ce58:	e7f4      	b.n	800ce44 <__utoa+0x68>
 800ce5a:	bf00      	nop
 800ce5c:	0800e55e 	.word	0x0800e55e

0800ce60 <siprintf>:
 800ce60:	b40e      	push	{r1, r2, r3}
 800ce62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce66:	b500      	push	{lr}
 800ce68:	b09c      	sub	sp, #112	; 0x70
 800ce6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce6c:	9002      	str	r0, [sp, #8]
 800ce6e:	9006      	str	r0, [sp, #24]
 800ce70:	9107      	str	r1, [sp, #28]
 800ce72:	9104      	str	r1, [sp, #16]
 800ce74:	4808      	ldr	r0, [pc, #32]	; (800ce98 <siprintf+0x38>)
 800ce76:	4909      	ldr	r1, [pc, #36]	; (800ce9c <siprintf+0x3c>)
 800ce78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce7c:	9105      	str	r1, [sp, #20]
 800ce7e:	6800      	ldr	r0, [r0, #0]
 800ce80:	a902      	add	r1, sp, #8
 800ce82:	9301      	str	r3, [sp, #4]
 800ce84:	f000 f90a 	bl	800d09c <_svfiprintf_r>
 800ce88:	2200      	movs	r2, #0
 800ce8a:	9b02      	ldr	r3, [sp, #8]
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	b01c      	add	sp, #112	; 0x70
 800ce90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce94:	b003      	add	sp, #12
 800ce96:	4770      	bx	lr
 800ce98:	20000a1c 	.word	0x20000a1c
 800ce9c:	ffff0208 	.word	0xffff0208

0800cea0 <memset>:
 800cea0:	4603      	mov	r3, r0
 800cea2:	4402      	add	r2, r0
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d100      	bne.n	800ceaa <memset+0xa>
 800cea8:	4770      	bx	lr
 800ceaa:	f803 1b01 	strb.w	r1, [r3], #1
 800ceae:	e7f9      	b.n	800cea4 <memset+0x4>

0800ceb0 <strcat>:
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	7814      	ldrb	r4, [r2, #0]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	3201      	adds	r2, #1
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	d1fa      	bne.n	800ceb4 <strcat+0x4>
 800cebe:	3b01      	subs	r3, #1
 800cec0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cec4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cec8:	2a00      	cmp	r2, #0
 800ceca:	d1f9      	bne.n	800cec0 <strcat+0x10>
 800cecc:	bd10      	pop	{r4, pc}
	...

0800ced0 <_sbrk_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	2300      	movs	r3, #0
 800ced4:	4d05      	ldr	r5, [pc, #20]	; (800ceec <_sbrk_r+0x1c>)
 800ced6:	4604      	mov	r4, r0
 800ced8:	4608      	mov	r0, r1
 800ceda:	602b      	str	r3, [r5, #0]
 800cedc:	f7fc f808 	bl	8008ef0 <_sbrk>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d102      	bne.n	800ceea <_sbrk_r+0x1a>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	b103      	cbz	r3, 800ceea <_sbrk_r+0x1a>
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	20001034 	.word	0x20001034

0800cef0 <__errno>:
 800cef0:	4b01      	ldr	r3, [pc, #4]	; (800cef8 <__errno+0x8>)
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	20000a1c 	.word	0x20000a1c

0800cefc <__libc_init_array>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	2600      	movs	r6, #0
 800cf00:	4d0c      	ldr	r5, [pc, #48]	; (800cf34 <__libc_init_array+0x38>)
 800cf02:	4c0d      	ldr	r4, [pc, #52]	; (800cf38 <__libc_init_array+0x3c>)
 800cf04:	1b64      	subs	r4, r4, r5
 800cf06:	10a4      	asrs	r4, r4, #2
 800cf08:	42a6      	cmp	r6, r4
 800cf0a:	d109      	bne.n	800cf20 <__libc_init_array+0x24>
 800cf0c:	f000 fbc6 	bl	800d69c <_init>
 800cf10:	2600      	movs	r6, #0
 800cf12:	4d0a      	ldr	r5, [pc, #40]	; (800cf3c <__libc_init_array+0x40>)
 800cf14:	4c0a      	ldr	r4, [pc, #40]	; (800cf40 <__libc_init_array+0x44>)
 800cf16:	1b64      	subs	r4, r4, r5
 800cf18:	10a4      	asrs	r4, r4, #2
 800cf1a:	42a6      	cmp	r6, r4
 800cf1c:	d105      	bne.n	800cf2a <__libc_init_array+0x2e>
 800cf1e:	bd70      	pop	{r4, r5, r6, pc}
 800cf20:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf24:	4798      	blx	r3
 800cf26:	3601      	adds	r6, #1
 800cf28:	e7ee      	b.n	800cf08 <__libc_init_array+0xc>
 800cf2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf2e:	4798      	blx	r3
 800cf30:	3601      	adds	r6, #1
 800cf32:	e7f2      	b.n	800cf1a <__libc_init_array+0x1e>
 800cf34:	0800e5b8 	.word	0x0800e5b8
 800cf38:	0800e5b8 	.word	0x0800e5b8
 800cf3c:	0800e5b8 	.word	0x0800e5b8
 800cf40:	0800e5bc 	.word	0x0800e5bc

0800cf44 <__retarget_lock_acquire_recursive>:
 800cf44:	4770      	bx	lr

0800cf46 <__retarget_lock_release_recursive>:
 800cf46:	4770      	bx	lr

0800cf48 <strcpy>:
 800cf48:	4603      	mov	r3, r0
 800cf4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf4e:	f803 2b01 	strb.w	r2, [r3], #1
 800cf52:	2a00      	cmp	r2, #0
 800cf54:	d1f9      	bne.n	800cf4a <strcpy+0x2>
 800cf56:	4770      	bx	lr

0800cf58 <_free_r>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	d040      	beq.n	800cfe2 <_free_r+0x8a>
 800cf60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf64:	1f0c      	subs	r4, r1, #4
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	bfb8      	it	lt
 800cf6a:	18e4      	addlt	r4, r4, r3
 800cf6c:	f7ff ff2a 	bl	800cdc4 <__malloc_lock>
 800cf70:	4a1c      	ldr	r2, [pc, #112]	; (800cfe4 <_free_r+0x8c>)
 800cf72:	6813      	ldr	r3, [r2, #0]
 800cf74:	b933      	cbnz	r3, 800cf84 <_free_r+0x2c>
 800cf76:	6063      	str	r3, [r4, #4]
 800cf78:	6014      	str	r4, [r2, #0]
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf80:	f7ff bf26 	b.w	800cdd0 <__malloc_unlock>
 800cf84:	42a3      	cmp	r3, r4
 800cf86:	d908      	bls.n	800cf9a <_free_r+0x42>
 800cf88:	6820      	ldr	r0, [r4, #0]
 800cf8a:	1821      	adds	r1, r4, r0
 800cf8c:	428b      	cmp	r3, r1
 800cf8e:	bf01      	itttt	eq
 800cf90:	6819      	ldreq	r1, [r3, #0]
 800cf92:	685b      	ldreq	r3, [r3, #4]
 800cf94:	1809      	addeq	r1, r1, r0
 800cf96:	6021      	streq	r1, [r4, #0]
 800cf98:	e7ed      	b.n	800cf76 <_free_r+0x1e>
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	b10b      	cbz	r3, 800cfa4 <_free_r+0x4c>
 800cfa0:	42a3      	cmp	r3, r4
 800cfa2:	d9fa      	bls.n	800cf9a <_free_r+0x42>
 800cfa4:	6811      	ldr	r1, [r2, #0]
 800cfa6:	1850      	adds	r0, r2, r1
 800cfa8:	42a0      	cmp	r0, r4
 800cfaa:	d10b      	bne.n	800cfc4 <_free_r+0x6c>
 800cfac:	6820      	ldr	r0, [r4, #0]
 800cfae:	4401      	add	r1, r0
 800cfb0:	1850      	adds	r0, r2, r1
 800cfb2:	4283      	cmp	r3, r0
 800cfb4:	6011      	str	r1, [r2, #0]
 800cfb6:	d1e0      	bne.n	800cf7a <_free_r+0x22>
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	4408      	add	r0, r1
 800cfbe:	6010      	str	r0, [r2, #0]
 800cfc0:	6053      	str	r3, [r2, #4]
 800cfc2:	e7da      	b.n	800cf7a <_free_r+0x22>
 800cfc4:	d902      	bls.n	800cfcc <_free_r+0x74>
 800cfc6:	230c      	movs	r3, #12
 800cfc8:	602b      	str	r3, [r5, #0]
 800cfca:	e7d6      	b.n	800cf7a <_free_r+0x22>
 800cfcc:	6820      	ldr	r0, [r4, #0]
 800cfce:	1821      	adds	r1, r4, r0
 800cfd0:	428b      	cmp	r3, r1
 800cfd2:	bf01      	itttt	eq
 800cfd4:	6819      	ldreq	r1, [r3, #0]
 800cfd6:	685b      	ldreq	r3, [r3, #4]
 800cfd8:	1809      	addeq	r1, r1, r0
 800cfda:	6021      	streq	r1, [r4, #0]
 800cfdc:	6063      	str	r3, [r4, #4]
 800cfde:	6054      	str	r4, [r2, #4]
 800cfe0:	e7cb      	b.n	800cf7a <_free_r+0x22>
 800cfe2:	bd38      	pop	{r3, r4, r5, pc}
 800cfe4:	20000ef4 	.word	0x20000ef4

0800cfe8 <__ssputs_r>:
 800cfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfec:	461f      	mov	r7, r3
 800cfee:	688e      	ldr	r6, [r1, #8]
 800cff0:	4682      	mov	sl, r0
 800cff2:	42be      	cmp	r6, r7
 800cff4:	460c      	mov	r4, r1
 800cff6:	4690      	mov	r8, r2
 800cff8:	680b      	ldr	r3, [r1, #0]
 800cffa:	d82c      	bhi.n	800d056 <__ssputs_r+0x6e>
 800cffc:	898a      	ldrh	r2, [r1, #12]
 800cffe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d002:	d026      	beq.n	800d052 <__ssputs_r+0x6a>
 800d004:	6965      	ldr	r5, [r4, #20]
 800d006:	6909      	ldr	r1, [r1, #16]
 800d008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d00c:	eba3 0901 	sub.w	r9, r3, r1
 800d010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d014:	1c7b      	adds	r3, r7, #1
 800d016:	444b      	add	r3, r9
 800d018:	106d      	asrs	r5, r5, #1
 800d01a:	429d      	cmp	r5, r3
 800d01c:	bf38      	it	cc
 800d01e:	461d      	movcc	r5, r3
 800d020:	0553      	lsls	r3, r2, #21
 800d022:	d527      	bpl.n	800d074 <__ssputs_r+0x8c>
 800d024:	4629      	mov	r1, r5
 800d026:	f7ff fe4d 	bl	800ccc4 <_malloc_r>
 800d02a:	4606      	mov	r6, r0
 800d02c:	b360      	cbz	r0, 800d088 <__ssputs_r+0xa0>
 800d02e:	464a      	mov	r2, r9
 800d030:	6921      	ldr	r1, [r4, #16]
 800d032:	f000 faed 	bl	800d610 <memcpy>
 800d036:	89a3      	ldrh	r3, [r4, #12]
 800d038:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d040:	81a3      	strh	r3, [r4, #12]
 800d042:	6126      	str	r6, [r4, #16]
 800d044:	444e      	add	r6, r9
 800d046:	6026      	str	r6, [r4, #0]
 800d048:	463e      	mov	r6, r7
 800d04a:	6165      	str	r5, [r4, #20]
 800d04c:	eba5 0509 	sub.w	r5, r5, r9
 800d050:	60a5      	str	r5, [r4, #8]
 800d052:	42be      	cmp	r6, r7
 800d054:	d900      	bls.n	800d058 <__ssputs_r+0x70>
 800d056:	463e      	mov	r6, r7
 800d058:	4632      	mov	r2, r6
 800d05a:	4641      	mov	r1, r8
 800d05c:	6820      	ldr	r0, [r4, #0]
 800d05e:	f000 faaf 	bl	800d5c0 <memmove>
 800d062:	2000      	movs	r0, #0
 800d064:	68a3      	ldr	r3, [r4, #8]
 800d066:	1b9b      	subs	r3, r3, r6
 800d068:	60a3      	str	r3, [r4, #8]
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	4433      	add	r3, r6
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d074:	462a      	mov	r2, r5
 800d076:	f000 fad9 	bl	800d62c <_realloc_r>
 800d07a:	4606      	mov	r6, r0
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d1e0      	bne.n	800d042 <__ssputs_r+0x5a>
 800d080:	4650      	mov	r0, sl
 800d082:	6921      	ldr	r1, [r4, #16]
 800d084:	f7ff ff68 	bl	800cf58 <_free_r>
 800d088:	230c      	movs	r3, #12
 800d08a:	f8ca 3000 	str.w	r3, [sl]
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	f04f 30ff 	mov.w	r0, #4294967295
 800d094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	e7e9      	b.n	800d070 <__ssputs_r+0x88>

0800d09c <_svfiprintf_r>:
 800d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	4698      	mov	r8, r3
 800d0a2:	898b      	ldrh	r3, [r1, #12]
 800d0a4:	4607      	mov	r7, r0
 800d0a6:	061b      	lsls	r3, r3, #24
 800d0a8:	460d      	mov	r5, r1
 800d0aa:	4614      	mov	r4, r2
 800d0ac:	b09d      	sub	sp, #116	; 0x74
 800d0ae:	d50e      	bpl.n	800d0ce <_svfiprintf_r+0x32>
 800d0b0:	690b      	ldr	r3, [r1, #16]
 800d0b2:	b963      	cbnz	r3, 800d0ce <_svfiprintf_r+0x32>
 800d0b4:	2140      	movs	r1, #64	; 0x40
 800d0b6:	f7ff fe05 	bl	800ccc4 <_malloc_r>
 800d0ba:	6028      	str	r0, [r5, #0]
 800d0bc:	6128      	str	r0, [r5, #16]
 800d0be:	b920      	cbnz	r0, 800d0ca <_svfiprintf_r+0x2e>
 800d0c0:	230c      	movs	r3, #12
 800d0c2:	603b      	str	r3, [r7, #0]
 800d0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c8:	e0d0      	b.n	800d26c <_svfiprintf_r+0x1d0>
 800d0ca:	2340      	movs	r3, #64	; 0x40
 800d0cc:	616b      	str	r3, [r5, #20]
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d2:	2320      	movs	r3, #32
 800d0d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0d8:	2330      	movs	r3, #48	; 0x30
 800d0da:	f04f 0901 	mov.w	r9, #1
 800d0de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d284 <_svfiprintf_r+0x1e8>
 800d0e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0ea:	4623      	mov	r3, r4
 800d0ec:	469a      	mov	sl, r3
 800d0ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0f2:	b10a      	cbz	r2, 800d0f8 <_svfiprintf_r+0x5c>
 800d0f4:	2a25      	cmp	r2, #37	; 0x25
 800d0f6:	d1f9      	bne.n	800d0ec <_svfiprintf_r+0x50>
 800d0f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d0fc:	d00b      	beq.n	800d116 <_svfiprintf_r+0x7a>
 800d0fe:	465b      	mov	r3, fp
 800d100:	4622      	mov	r2, r4
 800d102:	4629      	mov	r1, r5
 800d104:	4638      	mov	r0, r7
 800d106:	f7ff ff6f 	bl	800cfe8 <__ssputs_r>
 800d10a:	3001      	adds	r0, #1
 800d10c:	f000 80a9 	beq.w	800d262 <_svfiprintf_r+0x1c6>
 800d110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d112:	445a      	add	r2, fp
 800d114:	9209      	str	r2, [sp, #36]	; 0x24
 800d116:	f89a 3000 	ldrb.w	r3, [sl]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f000 80a1 	beq.w	800d262 <_svfiprintf_r+0x1c6>
 800d120:	2300      	movs	r3, #0
 800d122:	f04f 32ff 	mov.w	r2, #4294967295
 800d126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d12a:	f10a 0a01 	add.w	sl, sl, #1
 800d12e:	9304      	str	r3, [sp, #16]
 800d130:	9307      	str	r3, [sp, #28]
 800d132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d136:	931a      	str	r3, [sp, #104]	; 0x68
 800d138:	4654      	mov	r4, sl
 800d13a:	2205      	movs	r2, #5
 800d13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d140:	4850      	ldr	r0, [pc, #320]	; (800d284 <_svfiprintf_r+0x1e8>)
 800d142:	f000 fa57 	bl	800d5f4 <memchr>
 800d146:	9a04      	ldr	r2, [sp, #16]
 800d148:	b9d8      	cbnz	r0, 800d182 <_svfiprintf_r+0xe6>
 800d14a:	06d0      	lsls	r0, r2, #27
 800d14c:	bf44      	itt	mi
 800d14e:	2320      	movmi	r3, #32
 800d150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d154:	0711      	lsls	r1, r2, #28
 800d156:	bf44      	itt	mi
 800d158:	232b      	movmi	r3, #43	; 0x2b
 800d15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d15e:	f89a 3000 	ldrb.w	r3, [sl]
 800d162:	2b2a      	cmp	r3, #42	; 0x2a
 800d164:	d015      	beq.n	800d192 <_svfiprintf_r+0xf6>
 800d166:	4654      	mov	r4, sl
 800d168:	2000      	movs	r0, #0
 800d16a:	f04f 0c0a 	mov.w	ip, #10
 800d16e:	9a07      	ldr	r2, [sp, #28]
 800d170:	4621      	mov	r1, r4
 800d172:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d176:	3b30      	subs	r3, #48	; 0x30
 800d178:	2b09      	cmp	r3, #9
 800d17a:	d94d      	bls.n	800d218 <_svfiprintf_r+0x17c>
 800d17c:	b1b0      	cbz	r0, 800d1ac <_svfiprintf_r+0x110>
 800d17e:	9207      	str	r2, [sp, #28]
 800d180:	e014      	b.n	800d1ac <_svfiprintf_r+0x110>
 800d182:	eba0 0308 	sub.w	r3, r0, r8
 800d186:	fa09 f303 	lsl.w	r3, r9, r3
 800d18a:	4313      	orrs	r3, r2
 800d18c:	46a2      	mov	sl, r4
 800d18e:	9304      	str	r3, [sp, #16]
 800d190:	e7d2      	b.n	800d138 <_svfiprintf_r+0x9c>
 800d192:	9b03      	ldr	r3, [sp, #12]
 800d194:	1d19      	adds	r1, r3, #4
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	9103      	str	r1, [sp, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bfbb      	ittet	lt
 800d19e:	425b      	neglt	r3, r3
 800d1a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d1a4:	9307      	strge	r3, [sp, #28]
 800d1a6:	9307      	strlt	r3, [sp, #28]
 800d1a8:	bfb8      	it	lt
 800d1aa:	9204      	strlt	r2, [sp, #16]
 800d1ac:	7823      	ldrb	r3, [r4, #0]
 800d1ae:	2b2e      	cmp	r3, #46	; 0x2e
 800d1b0:	d10c      	bne.n	800d1cc <_svfiprintf_r+0x130>
 800d1b2:	7863      	ldrb	r3, [r4, #1]
 800d1b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d1b6:	d134      	bne.n	800d222 <_svfiprintf_r+0x186>
 800d1b8:	9b03      	ldr	r3, [sp, #12]
 800d1ba:	3402      	adds	r4, #2
 800d1bc:	1d1a      	adds	r2, r3, #4
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	9203      	str	r2, [sp, #12]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	bfb8      	it	lt
 800d1c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1ca:	9305      	str	r3, [sp, #20]
 800d1cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d288 <_svfiprintf_r+0x1ec>
 800d1d0:	2203      	movs	r2, #3
 800d1d2:	4650      	mov	r0, sl
 800d1d4:	7821      	ldrb	r1, [r4, #0]
 800d1d6:	f000 fa0d 	bl	800d5f4 <memchr>
 800d1da:	b138      	cbz	r0, 800d1ec <_svfiprintf_r+0x150>
 800d1dc:	2240      	movs	r2, #64	; 0x40
 800d1de:	9b04      	ldr	r3, [sp, #16]
 800d1e0:	eba0 000a 	sub.w	r0, r0, sl
 800d1e4:	4082      	lsls	r2, r0
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	3401      	adds	r4, #1
 800d1ea:	9304      	str	r3, [sp, #16]
 800d1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f0:	2206      	movs	r2, #6
 800d1f2:	4826      	ldr	r0, [pc, #152]	; (800d28c <_svfiprintf_r+0x1f0>)
 800d1f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1f8:	f000 f9fc 	bl	800d5f4 <memchr>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d038      	beq.n	800d272 <_svfiprintf_r+0x1d6>
 800d200:	4b23      	ldr	r3, [pc, #140]	; (800d290 <_svfiprintf_r+0x1f4>)
 800d202:	bb1b      	cbnz	r3, 800d24c <_svfiprintf_r+0x1b0>
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	3307      	adds	r3, #7
 800d208:	f023 0307 	bic.w	r3, r3, #7
 800d20c:	3308      	adds	r3, #8
 800d20e:	9303      	str	r3, [sp, #12]
 800d210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d212:	4433      	add	r3, r6
 800d214:	9309      	str	r3, [sp, #36]	; 0x24
 800d216:	e768      	b.n	800d0ea <_svfiprintf_r+0x4e>
 800d218:	460c      	mov	r4, r1
 800d21a:	2001      	movs	r0, #1
 800d21c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d220:	e7a6      	b.n	800d170 <_svfiprintf_r+0xd4>
 800d222:	2300      	movs	r3, #0
 800d224:	f04f 0c0a 	mov.w	ip, #10
 800d228:	4619      	mov	r1, r3
 800d22a:	3401      	adds	r4, #1
 800d22c:	9305      	str	r3, [sp, #20]
 800d22e:	4620      	mov	r0, r4
 800d230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d234:	3a30      	subs	r2, #48	; 0x30
 800d236:	2a09      	cmp	r2, #9
 800d238:	d903      	bls.n	800d242 <_svfiprintf_r+0x1a6>
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d0c6      	beq.n	800d1cc <_svfiprintf_r+0x130>
 800d23e:	9105      	str	r1, [sp, #20]
 800d240:	e7c4      	b.n	800d1cc <_svfiprintf_r+0x130>
 800d242:	4604      	mov	r4, r0
 800d244:	2301      	movs	r3, #1
 800d246:	fb0c 2101 	mla	r1, ip, r1, r2
 800d24a:	e7f0      	b.n	800d22e <_svfiprintf_r+0x192>
 800d24c:	ab03      	add	r3, sp, #12
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	462a      	mov	r2, r5
 800d252:	4638      	mov	r0, r7
 800d254:	4b0f      	ldr	r3, [pc, #60]	; (800d294 <_svfiprintf_r+0x1f8>)
 800d256:	a904      	add	r1, sp, #16
 800d258:	f3af 8000 	nop.w
 800d25c:	1c42      	adds	r2, r0, #1
 800d25e:	4606      	mov	r6, r0
 800d260:	d1d6      	bne.n	800d210 <_svfiprintf_r+0x174>
 800d262:	89ab      	ldrh	r3, [r5, #12]
 800d264:	065b      	lsls	r3, r3, #25
 800d266:	f53f af2d 	bmi.w	800d0c4 <_svfiprintf_r+0x28>
 800d26a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d26c:	b01d      	add	sp, #116	; 0x74
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	ab03      	add	r3, sp, #12
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	462a      	mov	r2, r5
 800d278:	4638      	mov	r0, r7
 800d27a:	4b06      	ldr	r3, [pc, #24]	; (800d294 <_svfiprintf_r+0x1f8>)
 800d27c:	a904      	add	r1, sp, #16
 800d27e:	f000 f87d 	bl	800d37c <_printf_i>
 800d282:	e7eb      	b.n	800d25c <_svfiprintf_r+0x1c0>
 800d284:	0800e583 	.word	0x0800e583
 800d288:	0800e589 	.word	0x0800e589
 800d28c:	0800e58d 	.word	0x0800e58d
 800d290:	00000000 	.word	0x00000000
 800d294:	0800cfe9 	.word	0x0800cfe9

0800d298 <_printf_common>:
 800d298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d29c:	4616      	mov	r6, r2
 800d29e:	4699      	mov	r9, r3
 800d2a0:	688a      	ldr	r2, [r1, #8]
 800d2a2:	690b      	ldr	r3, [r1, #16]
 800d2a4:	4607      	mov	r7, r0
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	bfb8      	it	lt
 800d2aa:	4613      	movlt	r3, r2
 800d2ac:	6033      	str	r3, [r6, #0]
 800d2ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2b8:	b10a      	cbz	r2, 800d2be <_printf_common+0x26>
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	6033      	str	r3, [r6, #0]
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	0699      	lsls	r1, r3, #26
 800d2c2:	bf42      	ittt	mi
 800d2c4:	6833      	ldrmi	r3, [r6, #0]
 800d2c6:	3302      	addmi	r3, #2
 800d2c8:	6033      	strmi	r3, [r6, #0]
 800d2ca:	6825      	ldr	r5, [r4, #0]
 800d2cc:	f015 0506 	ands.w	r5, r5, #6
 800d2d0:	d106      	bne.n	800d2e0 <_printf_common+0x48>
 800d2d2:	f104 0a19 	add.w	sl, r4, #25
 800d2d6:	68e3      	ldr	r3, [r4, #12]
 800d2d8:	6832      	ldr	r2, [r6, #0]
 800d2da:	1a9b      	subs	r3, r3, r2
 800d2dc:	42ab      	cmp	r3, r5
 800d2de:	dc2b      	bgt.n	800d338 <_printf_common+0xa0>
 800d2e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2e4:	1e13      	subs	r3, r2, #0
 800d2e6:	6822      	ldr	r2, [r4, #0]
 800d2e8:	bf18      	it	ne
 800d2ea:	2301      	movne	r3, #1
 800d2ec:	0692      	lsls	r2, r2, #26
 800d2ee:	d430      	bmi.n	800d352 <_printf_common+0xba>
 800d2f0:	4649      	mov	r1, r9
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2f8:	47c0      	blx	r8
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	d023      	beq.n	800d346 <_printf_common+0xae>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	6922      	ldr	r2, [r4, #16]
 800d302:	f003 0306 	and.w	r3, r3, #6
 800d306:	2b04      	cmp	r3, #4
 800d308:	bf14      	ite	ne
 800d30a:	2500      	movne	r5, #0
 800d30c:	6833      	ldreq	r3, [r6, #0]
 800d30e:	f04f 0600 	mov.w	r6, #0
 800d312:	bf08      	it	eq
 800d314:	68e5      	ldreq	r5, [r4, #12]
 800d316:	f104 041a 	add.w	r4, r4, #26
 800d31a:	bf08      	it	eq
 800d31c:	1aed      	subeq	r5, r5, r3
 800d31e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d322:	bf08      	it	eq
 800d324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d328:	4293      	cmp	r3, r2
 800d32a:	bfc4      	itt	gt
 800d32c:	1a9b      	subgt	r3, r3, r2
 800d32e:	18ed      	addgt	r5, r5, r3
 800d330:	42b5      	cmp	r5, r6
 800d332:	d11a      	bne.n	800d36a <_printf_common+0xd2>
 800d334:	2000      	movs	r0, #0
 800d336:	e008      	b.n	800d34a <_printf_common+0xb2>
 800d338:	2301      	movs	r3, #1
 800d33a:	4652      	mov	r2, sl
 800d33c:	4649      	mov	r1, r9
 800d33e:	4638      	mov	r0, r7
 800d340:	47c0      	blx	r8
 800d342:	3001      	adds	r0, #1
 800d344:	d103      	bne.n	800d34e <_printf_common+0xb6>
 800d346:	f04f 30ff 	mov.w	r0, #4294967295
 800d34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d34e:	3501      	adds	r5, #1
 800d350:	e7c1      	b.n	800d2d6 <_printf_common+0x3e>
 800d352:	2030      	movs	r0, #48	; 0x30
 800d354:	18e1      	adds	r1, r4, r3
 800d356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d35a:	1c5a      	adds	r2, r3, #1
 800d35c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d360:	4422      	add	r2, r4
 800d362:	3302      	adds	r3, #2
 800d364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d368:	e7c2      	b.n	800d2f0 <_printf_common+0x58>
 800d36a:	2301      	movs	r3, #1
 800d36c:	4622      	mov	r2, r4
 800d36e:	4649      	mov	r1, r9
 800d370:	4638      	mov	r0, r7
 800d372:	47c0      	blx	r8
 800d374:	3001      	adds	r0, #1
 800d376:	d0e6      	beq.n	800d346 <_printf_common+0xae>
 800d378:	3601      	adds	r6, #1
 800d37a:	e7d9      	b.n	800d330 <_printf_common+0x98>

0800d37c <_printf_i>:
 800d37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d380:	7e0f      	ldrb	r7, [r1, #24]
 800d382:	4691      	mov	r9, r2
 800d384:	2f78      	cmp	r7, #120	; 0x78
 800d386:	4680      	mov	r8, r0
 800d388:	460c      	mov	r4, r1
 800d38a:	469a      	mov	sl, r3
 800d38c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d38e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d392:	d807      	bhi.n	800d3a4 <_printf_i+0x28>
 800d394:	2f62      	cmp	r7, #98	; 0x62
 800d396:	d80a      	bhi.n	800d3ae <_printf_i+0x32>
 800d398:	2f00      	cmp	r7, #0
 800d39a:	f000 80d5 	beq.w	800d548 <_printf_i+0x1cc>
 800d39e:	2f58      	cmp	r7, #88	; 0x58
 800d3a0:	f000 80c1 	beq.w	800d526 <_printf_i+0x1aa>
 800d3a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3ac:	e03a      	b.n	800d424 <_printf_i+0xa8>
 800d3ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3b2:	2b15      	cmp	r3, #21
 800d3b4:	d8f6      	bhi.n	800d3a4 <_printf_i+0x28>
 800d3b6:	a101      	add	r1, pc, #4	; (adr r1, 800d3bc <_printf_i+0x40>)
 800d3b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3bc:	0800d415 	.word	0x0800d415
 800d3c0:	0800d429 	.word	0x0800d429
 800d3c4:	0800d3a5 	.word	0x0800d3a5
 800d3c8:	0800d3a5 	.word	0x0800d3a5
 800d3cc:	0800d3a5 	.word	0x0800d3a5
 800d3d0:	0800d3a5 	.word	0x0800d3a5
 800d3d4:	0800d429 	.word	0x0800d429
 800d3d8:	0800d3a5 	.word	0x0800d3a5
 800d3dc:	0800d3a5 	.word	0x0800d3a5
 800d3e0:	0800d3a5 	.word	0x0800d3a5
 800d3e4:	0800d3a5 	.word	0x0800d3a5
 800d3e8:	0800d52f 	.word	0x0800d52f
 800d3ec:	0800d455 	.word	0x0800d455
 800d3f0:	0800d4e9 	.word	0x0800d4e9
 800d3f4:	0800d3a5 	.word	0x0800d3a5
 800d3f8:	0800d3a5 	.word	0x0800d3a5
 800d3fc:	0800d551 	.word	0x0800d551
 800d400:	0800d3a5 	.word	0x0800d3a5
 800d404:	0800d455 	.word	0x0800d455
 800d408:	0800d3a5 	.word	0x0800d3a5
 800d40c:	0800d3a5 	.word	0x0800d3a5
 800d410:	0800d4f1 	.word	0x0800d4f1
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	1d1a      	adds	r2, r3, #4
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	602a      	str	r2, [r5, #0]
 800d41c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d424:	2301      	movs	r3, #1
 800d426:	e0a0      	b.n	800d56a <_printf_i+0x1ee>
 800d428:	6820      	ldr	r0, [r4, #0]
 800d42a:	682b      	ldr	r3, [r5, #0]
 800d42c:	0607      	lsls	r7, r0, #24
 800d42e:	f103 0104 	add.w	r1, r3, #4
 800d432:	6029      	str	r1, [r5, #0]
 800d434:	d501      	bpl.n	800d43a <_printf_i+0xbe>
 800d436:	681e      	ldr	r6, [r3, #0]
 800d438:	e003      	b.n	800d442 <_printf_i+0xc6>
 800d43a:	0646      	lsls	r6, r0, #25
 800d43c:	d5fb      	bpl.n	800d436 <_printf_i+0xba>
 800d43e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d442:	2e00      	cmp	r6, #0
 800d444:	da03      	bge.n	800d44e <_printf_i+0xd2>
 800d446:	232d      	movs	r3, #45	; 0x2d
 800d448:	4276      	negs	r6, r6
 800d44a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d44e:	230a      	movs	r3, #10
 800d450:	4859      	ldr	r0, [pc, #356]	; (800d5b8 <_printf_i+0x23c>)
 800d452:	e012      	b.n	800d47a <_printf_i+0xfe>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	6820      	ldr	r0, [r4, #0]
 800d458:	1d19      	adds	r1, r3, #4
 800d45a:	6029      	str	r1, [r5, #0]
 800d45c:	0605      	lsls	r5, r0, #24
 800d45e:	d501      	bpl.n	800d464 <_printf_i+0xe8>
 800d460:	681e      	ldr	r6, [r3, #0]
 800d462:	e002      	b.n	800d46a <_printf_i+0xee>
 800d464:	0641      	lsls	r1, r0, #25
 800d466:	d5fb      	bpl.n	800d460 <_printf_i+0xe4>
 800d468:	881e      	ldrh	r6, [r3, #0]
 800d46a:	2f6f      	cmp	r7, #111	; 0x6f
 800d46c:	bf0c      	ite	eq
 800d46e:	2308      	moveq	r3, #8
 800d470:	230a      	movne	r3, #10
 800d472:	4851      	ldr	r0, [pc, #324]	; (800d5b8 <_printf_i+0x23c>)
 800d474:	2100      	movs	r1, #0
 800d476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d47a:	6865      	ldr	r5, [r4, #4]
 800d47c:	2d00      	cmp	r5, #0
 800d47e:	bfa8      	it	ge
 800d480:	6821      	ldrge	r1, [r4, #0]
 800d482:	60a5      	str	r5, [r4, #8]
 800d484:	bfa4      	itt	ge
 800d486:	f021 0104 	bicge.w	r1, r1, #4
 800d48a:	6021      	strge	r1, [r4, #0]
 800d48c:	b90e      	cbnz	r6, 800d492 <_printf_i+0x116>
 800d48e:	2d00      	cmp	r5, #0
 800d490:	d04b      	beq.n	800d52a <_printf_i+0x1ae>
 800d492:	4615      	mov	r5, r2
 800d494:	fbb6 f1f3 	udiv	r1, r6, r3
 800d498:	fb03 6711 	mls	r7, r3, r1, r6
 800d49c:	5dc7      	ldrb	r7, [r0, r7]
 800d49e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4a2:	4637      	mov	r7, r6
 800d4a4:	42bb      	cmp	r3, r7
 800d4a6:	460e      	mov	r6, r1
 800d4a8:	d9f4      	bls.n	800d494 <_printf_i+0x118>
 800d4aa:	2b08      	cmp	r3, #8
 800d4ac:	d10b      	bne.n	800d4c6 <_printf_i+0x14a>
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	07de      	lsls	r6, r3, #31
 800d4b2:	d508      	bpl.n	800d4c6 <_printf_i+0x14a>
 800d4b4:	6923      	ldr	r3, [r4, #16]
 800d4b6:	6861      	ldr	r1, [r4, #4]
 800d4b8:	4299      	cmp	r1, r3
 800d4ba:	bfde      	ittt	le
 800d4bc:	2330      	movle	r3, #48	; 0x30
 800d4be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d4c6:	1b52      	subs	r2, r2, r5
 800d4c8:	6122      	str	r2, [r4, #16]
 800d4ca:	464b      	mov	r3, r9
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	f8cd a000 	str.w	sl, [sp]
 800d4d4:	aa03      	add	r2, sp, #12
 800d4d6:	f7ff fedf 	bl	800d298 <_printf_common>
 800d4da:	3001      	adds	r0, #1
 800d4dc:	d14a      	bne.n	800d574 <_printf_i+0x1f8>
 800d4de:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e2:	b004      	add	sp, #16
 800d4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	f043 0320 	orr.w	r3, r3, #32
 800d4ee:	6023      	str	r3, [r4, #0]
 800d4f0:	2778      	movs	r7, #120	; 0x78
 800d4f2:	4832      	ldr	r0, [pc, #200]	; (800d5bc <_printf_i+0x240>)
 800d4f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	6829      	ldr	r1, [r5, #0]
 800d4fc:	061f      	lsls	r7, r3, #24
 800d4fe:	f851 6b04 	ldr.w	r6, [r1], #4
 800d502:	d402      	bmi.n	800d50a <_printf_i+0x18e>
 800d504:	065f      	lsls	r7, r3, #25
 800d506:	bf48      	it	mi
 800d508:	b2b6      	uxthmi	r6, r6
 800d50a:	07df      	lsls	r7, r3, #31
 800d50c:	bf48      	it	mi
 800d50e:	f043 0320 	orrmi.w	r3, r3, #32
 800d512:	6029      	str	r1, [r5, #0]
 800d514:	bf48      	it	mi
 800d516:	6023      	strmi	r3, [r4, #0]
 800d518:	b91e      	cbnz	r6, 800d522 <_printf_i+0x1a6>
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	f023 0320 	bic.w	r3, r3, #32
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	2310      	movs	r3, #16
 800d524:	e7a6      	b.n	800d474 <_printf_i+0xf8>
 800d526:	4824      	ldr	r0, [pc, #144]	; (800d5b8 <_printf_i+0x23c>)
 800d528:	e7e4      	b.n	800d4f4 <_printf_i+0x178>
 800d52a:	4615      	mov	r5, r2
 800d52c:	e7bd      	b.n	800d4aa <_printf_i+0x12e>
 800d52e:	682b      	ldr	r3, [r5, #0]
 800d530:	6826      	ldr	r6, [r4, #0]
 800d532:	1d18      	adds	r0, r3, #4
 800d534:	6961      	ldr	r1, [r4, #20]
 800d536:	6028      	str	r0, [r5, #0]
 800d538:	0635      	lsls	r5, r6, #24
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	d501      	bpl.n	800d542 <_printf_i+0x1c6>
 800d53e:	6019      	str	r1, [r3, #0]
 800d540:	e002      	b.n	800d548 <_printf_i+0x1cc>
 800d542:	0670      	lsls	r0, r6, #25
 800d544:	d5fb      	bpl.n	800d53e <_printf_i+0x1c2>
 800d546:	8019      	strh	r1, [r3, #0]
 800d548:	2300      	movs	r3, #0
 800d54a:	4615      	mov	r5, r2
 800d54c:	6123      	str	r3, [r4, #16]
 800d54e:	e7bc      	b.n	800d4ca <_printf_i+0x14e>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	2100      	movs	r1, #0
 800d554:	1d1a      	adds	r2, r3, #4
 800d556:	602a      	str	r2, [r5, #0]
 800d558:	681d      	ldr	r5, [r3, #0]
 800d55a:	6862      	ldr	r2, [r4, #4]
 800d55c:	4628      	mov	r0, r5
 800d55e:	f000 f849 	bl	800d5f4 <memchr>
 800d562:	b108      	cbz	r0, 800d568 <_printf_i+0x1ec>
 800d564:	1b40      	subs	r0, r0, r5
 800d566:	6060      	str	r0, [r4, #4]
 800d568:	6863      	ldr	r3, [r4, #4]
 800d56a:	6123      	str	r3, [r4, #16]
 800d56c:	2300      	movs	r3, #0
 800d56e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d572:	e7aa      	b.n	800d4ca <_printf_i+0x14e>
 800d574:	462a      	mov	r2, r5
 800d576:	4649      	mov	r1, r9
 800d578:	4640      	mov	r0, r8
 800d57a:	6923      	ldr	r3, [r4, #16]
 800d57c:	47d0      	blx	sl
 800d57e:	3001      	adds	r0, #1
 800d580:	d0ad      	beq.n	800d4de <_printf_i+0x162>
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	079b      	lsls	r3, r3, #30
 800d586:	d413      	bmi.n	800d5b0 <_printf_i+0x234>
 800d588:	68e0      	ldr	r0, [r4, #12]
 800d58a:	9b03      	ldr	r3, [sp, #12]
 800d58c:	4298      	cmp	r0, r3
 800d58e:	bfb8      	it	lt
 800d590:	4618      	movlt	r0, r3
 800d592:	e7a6      	b.n	800d4e2 <_printf_i+0x166>
 800d594:	2301      	movs	r3, #1
 800d596:	4632      	mov	r2, r6
 800d598:	4649      	mov	r1, r9
 800d59a:	4640      	mov	r0, r8
 800d59c:	47d0      	blx	sl
 800d59e:	3001      	adds	r0, #1
 800d5a0:	d09d      	beq.n	800d4de <_printf_i+0x162>
 800d5a2:	3501      	adds	r5, #1
 800d5a4:	68e3      	ldr	r3, [r4, #12]
 800d5a6:	9903      	ldr	r1, [sp, #12]
 800d5a8:	1a5b      	subs	r3, r3, r1
 800d5aa:	42ab      	cmp	r3, r5
 800d5ac:	dcf2      	bgt.n	800d594 <_printf_i+0x218>
 800d5ae:	e7eb      	b.n	800d588 <_printf_i+0x20c>
 800d5b0:	2500      	movs	r5, #0
 800d5b2:	f104 0619 	add.w	r6, r4, #25
 800d5b6:	e7f5      	b.n	800d5a4 <_printf_i+0x228>
 800d5b8:	0800e594 	.word	0x0800e594
 800d5bc:	0800e5a5 	.word	0x0800e5a5

0800d5c0 <memmove>:
 800d5c0:	4288      	cmp	r0, r1
 800d5c2:	b510      	push	{r4, lr}
 800d5c4:	eb01 0402 	add.w	r4, r1, r2
 800d5c8:	d902      	bls.n	800d5d0 <memmove+0x10>
 800d5ca:	4284      	cmp	r4, r0
 800d5cc:	4623      	mov	r3, r4
 800d5ce:	d807      	bhi.n	800d5e0 <memmove+0x20>
 800d5d0:	1e43      	subs	r3, r0, #1
 800d5d2:	42a1      	cmp	r1, r4
 800d5d4:	d008      	beq.n	800d5e8 <memmove+0x28>
 800d5d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5de:	e7f8      	b.n	800d5d2 <memmove+0x12>
 800d5e0:	4601      	mov	r1, r0
 800d5e2:	4402      	add	r2, r0
 800d5e4:	428a      	cmp	r2, r1
 800d5e6:	d100      	bne.n	800d5ea <memmove+0x2a>
 800d5e8:	bd10      	pop	{r4, pc}
 800d5ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5f2:	e7f7      	b.n	800d5e4 <memmove+0x24>

0800d5f4 <memchr>:
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	b510      	push	{r4, lr}
 800d5f8:	b2c9      	uxtb	r1, r1
 800d5fa:	4402      	add	r2, r0
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	4618      	mov	r0, r3
 800d600:	d101      	bne.n	800d606 <memchr+0x12>
 800d602:	2000      	movs	r0, #0
 800d604:	e003      	b.n	800d60e <memchr+0x1a>
 800d606:	7804      	ldrb	r4, [r0, #0]
 800d608:	3301      	adds	r3, #1
 800d60a:	428c      	cmp	r4, r1
 800d60c:	d1f6      	bne.n	800d5fc <memchr+0x8>
 800d60e:	bd10      	pop	{r4, pc}

0800d610 <memcpy>:
 800d610:	440a      	add	r2, r1
 800d612:	4291      	cmp	r1, r2
 800d614:	f100 33ff 	add.w	r3, r0, #4294967295
 800d618:	d100      	bne.n	800d61c <memcpy+0xc>
 800d61a:	4770      	bx	lr
 800d61c:	b510      	push	{r4, lr}
 800d61e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d622:	4291      	cmp	r1, r2
 800d624:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d628:	d1f9      	bne.n	800d61e <memcpy+0xe>
 800d62a:	bd10      	pop	{r4, pc}

0800d62c <_realloc_r>:
 800d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d630:	4680      	mov	r8, r0
 800d632:	4614      	mov	r4, r2
 800d634:	460e      	mov	r6, r1
 800d636:	b921      	cbnz	r1, 800d642 <_realloc_r+0x16>
 800d638:	4611      	mov	r1, r2
 800d63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d63e:	f7ff bb41 	b.w	800ccc4 <_malloc_r>
 800d642:	b92a      	cbnz	r2, 800d650 <_realloc_r+0x24>
 800d644:	f7ff fc88 	bl	800cf58 <_free_r>
 800d648:	4625      	mov	r5, r4
 800d64a:	4628      	mov	r0, r5
 800d64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d650:	f000 f81b 	bl	800d68a <_malloc_usable_size_r>
 800d654:	4284      	cmp	r4, r0
 800d656:	4607      	mov	r7, r0
 800d658:	d802      	bhi.n	800d660 <_realloc_r+0x34>
 800d65a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d65e:	d812      	bhi.n	800d686 <_realloc_r+0x5a>
 800d660:	4621      	mov	r1, r4
 800d662:	4640      	mov	r0, r8
 800d664:	f7ff fb2e 	bl	800ccc4 <_malloc_r>
 800d668:	4605      	mov	r5, r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d0ed      	beq.n	800d64a <_realloc_r+0x1e>
 800d66e:	42bc      	cmp	r4, r7
 800d670:	4622      	mov	r2, r4
 800d672:	4631      	mov	r1, r6
 800d674:	bf28      	it	cs
 800d676:	463a      	movcs	r2, r7
 800d678:	f7ff ffca 	bl	800d610 <memcpy>
 800d67c:	4631      	mov	r1, r6
 800d67e:	4640      	mov	r0, r8
 800d680:	f7ff fc6a 	bl	800cf58 <_free_r>
 800d684:	e7e1      	b.n	800d64a <_realloc_r+0x1e>
 800d686:	4635      	mov	r5, r6
 800d688:	e7df      	b.n	800d64a <_realloc_r+0x1e>

0800d68a <_malloc_usable_size_r>:
 800d68a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d68e:	1f18      	subs	r0, r3, #4
 800d690:	2b00      	cmp	r3, #0
 800d692:	bfbc      	itt	lt
 800d694:	580b      	ldrlt	r3, [r1, r0]
 800d696:	18c0      	addlt	r0, r0, r3
 800d698:	4770      	bx	lr
	...

0800d69c <_init>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	bf00      	nop
 800d6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a2:	bc08      	pop	{r3}
 800d6a4:	469e      	mov	lr, r3
 800d6a6:	4770      	bx	lr

0800d6a8 <_fini>:
 800d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6aa:	bf00      	nop
 800d6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ae:	bc08      	pop	{r3}
 800d6b0:	469e      	mov	lr, r3
 800d6b2:	4770      	bx	lr
