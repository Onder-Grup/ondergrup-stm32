
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dce4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000102c  0800dec8  0800dec8  0001dec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eef4  0800eef4  000209fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800eef4  0800eef4  000209fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eef4  0800eef4  000209fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eef4  0800eef4  0001eef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eef8  0800eef8  0001eef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009fc  20000000  0800eefc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  200009fc  0800f8f8  000209fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000130c  0800f8f8  0002130c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a25  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180db  00000000  00000000  00020a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b1  00000000  00000000  00038b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e97  00000000  00000000  0003d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c85a  00000000  00000000  0003e257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb22  00000000  00000000  0005aab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ff77  00000000  00000000  000775d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d4  00000000  00000000  0011754c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009fc 	.word	0x200009fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800deb0 	.word	0x0800deb0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a00 	.word	0x20000a00
 8000220:	0800deb0 	.word	0x0800deb0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f00a fc1c 	bl	800aa8c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f009 fa94 	bl	8009784 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000a18 	.word	0x20000a18
 80004bc:	200010d8 	.word	0x200010d8
 80004c0:	20000ac5 	.word	0x20000ac5
 80004c4:	20000aed 	.word	0x20000aed
 80004c8:	20000af0 	.word	0x20000af0
 80004cc:	20000af1 	.word	0x20000af1
 80004d0:	20000af2 	.word	0x20000af2
 80004d4:	20000af3 	.word	0x20000af3
 80004d8:	20000af4 	.word	0x20000af4
 80004dc:	20000af5 	.word	0x20000af5
 80004e0:	20000b05 	.word	0x20000b05
 80004e4:	20000af6 	.word	0x20000af6
 80004e8:	20000b06 	.word	0x20000b06
 80004ec:	20000af7 	.word	0x20000af7
 80004f0:	20000b07 	.word	0x20000b07
 80004f4:	20000afa 	.word	0x20000afa
 80004f8:	20000afb 	.word	0x20000afb
 80004fc:	20000afc 	.word	0x20000afc
 8000500:	20000afd 	.word	0x20000afd
 8000504:	20000afe 	.word	0x20000afe
 8000508:	20000aff 	.word	0x20000aff
 800050c:	20000b00 	.word	0x20000b00
 8000510:	20000b01 	.word	0x20000b01
 8000514:	20000b02 	.word	0x20000b02
 8000518:	20000b03 	.word	0x20000b03
 800051c:	20000b04 	.word	0x20000b04
 8000520:	20000b08 	.word	0x20000b08
 8000524:	20000b0a 	.word	0x20000b0a
 8000528:	20000ae8 	.word	0x20000ae8
 800052c:	20000ae9 	.word	0x20000ae9
 8000530:	20000aea 	.word	0x20000aea
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000aeb 	.word	0x20000aeb
 8000540:	20000b0d 	.word	0x20000b0d
 8000544:	20000b0b 	.word	0x20000b0b
 8000548:	20000af9 	.word	0x20000af9
 800054c:	20000b0c 	.word	0x20000b0c
 8000550:	20000af8 	.word	0x20000af8
 8000554:	20000b0e 	.word	0x20000b0e
 8000558:	20000b0f 	.word	0x20000b0f
 800055c:	20000b10 	.word	0x20000b10
 8000560:	20000b11 	.word	0x20000b11
 8000564:	20000b12 	.word	0x20000b12
 8000568:	20000b13 	.word	0x20000b13
 800056c:	20000b14 	.word	0x20000b14
 8000570:	20000b15 	.word	0x20000b15
 8000574:	20000b16 	.word	0x20000b16
 8000578:	20000b17 	.word	0x20000b17
 800057c:	20000ac4 	.word	0x20000ac4
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	; (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	; (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	; (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	; (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	; (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	; (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	; (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	; (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	; (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	; (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	; (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	; (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f009 f862 	bl	8009784 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f009 f85c 	bl	8009784 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f009 f856 	bl	8009784 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 fbe5 	bl	8006eac <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000b05 	.word	0x20000b05
 80006ec:	20000af6 	.word	0x20000af6
 80006f0:	20000b06 	.word	0x20000b06
 80006f4:	20000af7 	.word	0x20000af7
 80006f8:	20000af9 	.word	0x20000af9
 80006fc:	20000b07 	.word	0x20000b07
 8000700:	20000afa 	.word	0x20000afa
 8000704:	20000afb 	.word	0x20000afb
 8000708:	20000afc 	.word	0x20000afc
 800070c:	20000afd 	.word	0x20000afd
 8000710:	20000afe 	.word	0x20000afe
 8000714:	20000aff 	.word	0x20000aff
 8000718:	20000b00 	.word	0x20000b00
 800071c:	20000b01 	.word	0x20000b01
 8000720:	20000b02 	.word	0x20000b02
 8000724:	20000b03 	.word	0x20000b03
 8000728:	20000b04 	.word	0x20000b04
 800072c:	20000b08 	.word	0x20000b08
 8000730:	20000b0a 	.word	0x20000b0a
 8000734:	20000b0c 	.word	0x20000b0c
 8000738:	20000b0d 	.word	0x20000b0d
 800073c:	20000b0b 	.word	0x20000b0b

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	; 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	; (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	; (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	; (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	; (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	; 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000a18 	.word	0x20000a18
 8000828:	20000010 	.word	0x20000010
 800082c:	20000a90 	.word	0x20000a90
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20000a9c 	.word	0x20000a9c
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20000ab0 	.word	0x20000ab0

08000844 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b09f      	sub	sp, #124	; 0x7c
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000850:	4948      	ldr	r1, [pc, #288]	; (8000974 <ESP8266_Init+0x130>)
 8000852:	4849      	ldr	r0, [pc, #292]	; (8000978 <ESP8266_Init+0x134>)
 8000854:	f00c fea4 	bl	800d5a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000858:	4847      	ldr	r0, [pc, #284]	; (8000978 <ESP8266_Init+0x134>)
 800085a:	f7ff fce3 	bl	8000224 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29b      	uxth	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	4944      	ldr	r1, [pc, #272]	; (8000978 <ESP8266_Init+0x134>)
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f00c f858 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f008 ff88 	bl	8009784 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000874:	4941      	ldr	r1, [pc, #260]	; (800097c <ESP8266_Init+0x138>)
 8000876:	4840      	ldr	r0, [pc, #256]	; (8000978 <ESP8266_Init+0x134>)
 8000878:	f00c fe92 	bl	800d5a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800087c:	483e      	ldr	r0, [pc, #248]	; (8000978 <ESP8266_Init+0x134>)
 800087e:	f7ff fcd1 	bl	8000224 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	493b      	ldr	r1, [pc, #236]	; (8000978 <ESP8266_Init+0x134>)
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f00c f846 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000894:	f008 ff76 	bl	8009784 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000898:	4939      	ldr	r1, [pc, #228]	; (8000980 <ESP8266_Init+0x13c>)
 800089a:	4837      	ldr	r0, [pc, #220]	; (8000978 <ESP8266_Init+0x134>)
 800089c:	f00c fe80 	bl	800d5a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008a0:	4835      	ldr	r0, [pc, #212]	; (8000978 <ESP8266_Init+0x134>)
 80008a2:	f7ff fcbf 	bl	8000224 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	4932      	ldr	r1, [pc, #200]	; (8000978 <ESP8266_Init+0x134>)
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f00c f834 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b8:	f008 ff64 	bl	8009784 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008bc:	4931      	ldr	r1, [pc, #196]	; (8000984 <ESP8266_Init+0x140>)
 80008be:	482e      	ldr	r0, [pc, #184]	; (8000978 <ESP8266_Init+0x134>)
 80008c0:	f00c fe6e 	bl	800d5a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008c4:	482c      	ldr	r0, [pc, #176]	; (8000978 <ESP8266_Init+0x134>)
 80008c6:	f7ff fcad 	bl	8000224 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	4929      	ldr	r1, [pc, #164]	; (8000978 <ESP8266_Init+0x134>)
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f00c f822 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008dc:	f008 ff52 	bl	8009784 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <ESP8266_Init+0x144>)
 80008e6:	461c      	mov	r4, r3
 80008e8:	4613      	mov	r3, r2
 80008ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ec:	c407      	stmia	r4!, {r0, r1, r2}
 80008ee:	8023      	strh	r3, [r4, #0]
 80008f0:	3402      	adds	r4, #2
 80008f2:	0c1b      	lsrs	r3, r3, #16
 80008f4:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00c feb1 	bl	800d664 <strcat>
	strcat(str, "\",\"");
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc8c 	bl	8000224 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4413      	add	r3, r2
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <ESP8266_Init+0x148>)
 8000918:	6810      	ldr	r0, [r2, #0]
 800091a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	f00c fe9e 	bl	800d664 <strcat>
	strcat(str, "\"\r\n");
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc79 	bl	8000224 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4413      	add	r3, r2
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <ESP8266_Init+0x14c>)
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	461a      	mov	r2, r3
 8000948:	4912      	ldr	r1, [pc, #72]	; (8000994 <ESP8266_Init+0x150>)
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <ESP8266_Init+0x134>)
 800094c:	f00c fe28 	bl	800d5a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <ESP8266_Init+0x134>)
 8000952:	f7ff fc67 	bl	8000224 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29b      	uxth	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <ESP8266_Init+0x134>)
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f00b ffdc 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000964:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000968:	f008 ff0c 	bl	8009784 <HAL_Delay>
}
 800096c:	bf00      	nop
 800096e:	377c      	adds	r7, #124	; 0x7c
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	0800dec8 	.word	0x0800dec8
 8000978:	20000b50 	.word	0x20000b50
 800097c:	0800ded8 	.word	0x0800ded8
 8000980:	0800dee4 	.word	0x0800dee4
 8000984:	0800deec 	.word	0x0800deec
 8000988:	0800defc 	.word	0x0800defc
 800098c:	0800df0c 	.word	0x0800df0c
 8000990:	0800df10 	.word	0x0800df10
 8000994:	0800df14 	.word	0x0800df14

08000998 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800099e:	af04      	add	r7, sp, #16
 80009a0:	f507 7414 	add.w	r4, r7, #592	; 0x250
 80009a4:	f5a4 7411 	sub.w	r4, r4, #580	; 0x244
 80009a8:	6020      	str	r0, [r4, #0]
 80009aa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80009ae:	f5a0 7012 	sub.w	r0, r0, #584	; 0x248
 80009b2:	6001      	str	r1, [r0, #0]
 80009b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80009b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80009bc:	600a      	str	r2, [r1, #0]
 80009be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80009c2:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 80009c6:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 80009c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009cc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80009d0:	f107 0014 	add.w	r0, r7, #20
 80009d4:	220c      	movs	r2, #12
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	f00c fe53 	bl	800d682 <strncpy>
	subMachineID[12] = '\0';
 80009dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009e0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009e8:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <sendMachineData+0x128>)
 80009ea:	4936      	ldr	r1, [pc, #216]	; (8000ac4 <sendMachineData+0x12c>)
 80009ec:	4836      	ldr	r0, [pc, #216]	; (8000ac8 <sendMachineData+0x130>)
 80009ee:	f00c fdd7 	bl	800d5a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f2:	4835      	ldr	r0, [pc, #212]	; (8000ac8 <sendMachineData+0x130>)
 80009f4:	f7ff fc16 	bl	8000224 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a00:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a04:	4930      	ldr	r1, [pc, #192]	; (8000ac8 <sendMachineData+0x130>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	f00b ff88 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a0c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a10:	f008 feb8 	bl	8009784 <HAL_Delay>

	sprintf(local_txA,
 8000a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000a1c:	f107 0114 	add.w	r1, r7, #20
 8000a20:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000a24:	4a29      	ldr	r2, [pc, #164]	; (8000acc <sendMachineData+0x134>)
 8000a26:	9202      	str	r2, [sp, #8]
 8000a28:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8000a32:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	9200      	str	r2, [sp, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	4924      	ldr	r1, [pc, #144]	; (8000ad0 <sendMachineData+0x138>)
 8000a40:	f00c fdae 	bl	800d5a0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbeb 	bl	8000224 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000a5c:	491d      	ldr	r1, [pc, #116]	; (8000ad4 <sendMachineData+0x13c>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00c fd9e 	bl	800d5a0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fbdb 	bl	8000224 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f00b ff4c 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a84:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a88:	f008 fe7c 	bl	8009784 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbc7 	bl	8000224 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000aa2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f00b ff38 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000aac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ab0:	f008 fe68 	bl	8009784 <HAL_Delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	0800df18 	.word	0x0800df18
 8000ac4:	0800df28 	.word	0x0800df28
 8000ac8:	20000b50 	.word	0x20000b50
 8000acc:	0800dfbc 	.word	0x0800dfbc
 8000ad0:	0800df48 	.word	0x0800df48
 8000ad4:	0800dfd0 	.word	0x0800dfd0

08000ad8 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	f6ad 2d18 	subw	sp, sp, #2584	; 0xa18
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000ae4:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000ae8:	6018      	str	r0, [r3, #0]
 8000aea:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000aee:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000af2:	6019      	str	r1, [r3, #0]
	int len;

	char bufferRX[2000];

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000af4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000af8:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000afc:	f107 000c 	add.w	r0, r7, #12
 8000b00:	220c      	movs	r2, #12
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	f00c fdbd 	bl	800d682 <strncpy>
	subMachineID[12] = '\0';
 8000b08:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b0c:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8000b10:	2200      	movs	r2, #0
 8000b12:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b14:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <checkMachineID+0x13c>)
 8000b16:	4940      	ldr	r1, [pc, #256]	; (8000c18 <checkMachineID+0x140>)
 8000b18:	4840      	ldr	r0, [pc, #256]	; (8000c1c <checkMachineID+0x144>)
 8000b1a:	f00c fd41 	bl	800d5a0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b1e:	483f      	ldr	r0, [pc, #252]	; (8000c1c <checkMachineID+0x144>)
 8000b20:	f7ff fb80 	bl	8000224 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b2c:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b30:	493a      	ldr	r1, [pc, #232]	; (8000c1c <checkMachineID+0x144>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	f00b fef2 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3c:	f008 fe22 	bl	8009784 <HAL_Delay>

	sprintf(local_txA,
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	f507 6002 	add.w	r0, r7, #2080	; 0x820
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <checkMachineID+0x148>)
 8000b4a:	4936      	ldr	r1, [pc, #216]	; (8000c24 <checkMachineID+0x14c>)
 8000b4c:	f00c fd28 	bl	800d5a0 <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, mainServerWithPort);
	len = strlen(local_txA);
 8000b50:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb65 	bl	8000224 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000b60:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b64:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 8000b68:	492f      	ldr	r1, [pc, #188]	; (8000c28 <checkMachineID+0x150>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00c fd18 	bl	800d5a0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000b70:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fb55 	bl	8000224 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f207 71ec 	addw	r1, r7, #2028	; 0x7ec
 8000b82:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b86:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f00b fec6 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b90:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b94:	f008 fdf6 	bl	8009784 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b98:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fb41 	bl	8000224 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8000baa:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bae:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	f00b feb2 	bl	800c91c <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 8000bb8:	f241 7070 	movw	r0, #6000	; 0x1770
 8000bbc:	f008 fde2 	bl	8009784 <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000bc0:	f107 011c 	add.w	r1, r7, #28
 8000bc4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bc8:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f00b fed8 	bl	800c986 <HAL_UART_Receive_IT>
	HAL_Delay(5000);
 8000bd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bda:	f008 fdd3 	bl	8009784 <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") || strstr(bufferRX, "HTTP/1.0 200 OK")) {
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4912      	ldr	r1, [pc, #72]	; (8000c2c <checkMachineID+0x154>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00c fd5f 	bl	800d6a8 <strstr>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d108      	bne.n	8000c02 <checkMachineID+0x12a>
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	490e      	ldr	r1, [pc, #56]	; (8000c30 <checkMachineID+0x158>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00c fd56 	bl	800d6a8 <strstr>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <checkMachineID+0x12e>
	    return 1; // Başarılı yanıt
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <checkMachineID+0x130>
	}

	return 0; // Yanıt başarısız
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f607 2718 	addw	r7, r7, #2584	; 0xa18
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800df18 	.word	0x0800df18
 8000c18:	0800df28 	.word	0x0800df28
 8000c1c:	20000b50 	.word	0x20000b50
 8000c20:	0800dfbc 	.word	0x0800dfbc
 8000c24:	0800dfe0 	.word	0x0800dfe0
 8000c28:	0800dfd0 	.word	0x0800dfd0
 8000c2c:	0800e024 	.word	0x0800e024
 8000c30:	0800e034 	.word	0x0800e034

08000c34 <hata2EEPROM>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000c52:	f000 f929 	bl	8000ea8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000c56:	e000      	b.n	8000c5a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000c58:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e012      	b.n	8000c86 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d107      	bne.n	8000c80 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	4918      	ldr	r1, [pc, #96]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	54ca      	strb	r2, [r1, r3]
					break;
 8000c7e:	e007      	b.n	8000c90 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbe7      	blt.n	8000c60 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <hata2EEPROM+0xa8>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	b292      	uxth	r2, r2
 8000caa:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000cae:	9402      	str	r4, [sp, #8]
 8000cb0:	9201      	str	r2, [sp, #4]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	460a      	mov	r2, r1
 8000cb8:	21a0      	movs	r1, #160	; 0xa0
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <hata2EEPROM+0xac>)
 8000cbc:	f009 fdec 	bl	800a898 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc4:	f008 fd5e 	bl	8009784 <HAL_Delay>
	eepromKontrol();
 8000cc8:	f7ff fab4 	bl	8000234 <eepromKontrol>
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	20000098 	.word	0x20000098
 8000cd8:	2000009c 	.word	0x2000009c
 8000cdc:	20000a18 	.word	0x20000a18
 8000ce0:	200010d8 	.word	0x200010d8

08000ce4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d11d      	bne.n	8000d30 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000cf4:	4b62      	ldr	r3, [pc, #392]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000cfc:	4a61      	ldr	r2, [pc, #388]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2001      	movs	r0, #1
 8000d02:	f007 ffe9 	bl	8008cd8 <lcd_print>
 8000d06:	e008      	b.n	8000d1a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000d08:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d104      	bne.n	8000d1a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000d10:	4a5d      	ldr	r2, [pc, #372]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	2001      	movs	r0, #1
 8000d16:	f007 ffdf 	bl	8008cd8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000d1a:	4a5c      	ldr	r2, [pc, #368]	; (8000e8c <hataKoduLcdGoster+0x1a8>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f007 ffda 	bl	8008cd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d24:	4a5a      	ldr	r2, [pc, #360]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000d26:	2107      	movs	r1, #7
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f007 ffd5 	bl	8008cd8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000d2e:	e0a3      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d11d      	bne.n	8000d72 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000d36:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d105      	bne.n	8000d4a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000d3e:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	2001      	movs	r0, #1
 8000d44:	f007 ffc8 	bl	8008cd8 <lcd_print>
 8000d48:	e008      	b.n	8000d5c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d104      	bne.n	8000d5c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000d52:	4a4d      	ldr	r2, [pc, #308]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	2001      	movs	r0, #1
 8000d58:	f007 ffbe 	bl	8008cd8 <lcd_print>
		lcd_print(2, 2, "2");
 8000d5c:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <hataKoduLcdGoster+0x1b0>)
 8000d5e:	2102      	movs	r1, #2
 8000d60:	2002      	movs	r0, #2
 8000d62:	f007 ffb9 	bl	8008cd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000d68:	2107      	movs	r1, #7
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f007 ffb4 	bl	8008cd8 <lcd_print>
}
 8000d70:	e082      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d11d      	bne.n	8000db4 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000d78:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000d80:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2001      	movs	r0, #1
 8000d86:	f007 ffa7 	bl	8008cd8 <lcd_print>
 8000d8a:	e008      	b.n	8000d9e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d104      	bne.n	8000d9e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000d94:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d96:	2101      	movs	r1, #1
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f007 ff9d 	bl	8008cd8 <lcd_print>
		lcd_print(2, 3, "3");
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <hataKoduLcdGoster+0x1b4>)
 8000da0:	2103      	movs	r1, #3
 8000da2:	2002      	movs	r0, #2
 8000da4:	f007 ff98 	bl	8008cd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000da8:	4a39      	ldr	r2, [pc, #228]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000daa:	2107      	movs	r1, #7
 8000dac:	2002      	movs	r0, #2
 8000dae:	f007 ff93 	bl	8008cd8 <lcd_print>
}
 8000db2:	e061      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d11d      	bne.n	8000df6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f007 ff86 	bl	8008cd8 <lcd_print>
 8000dcc:	e008      	b.n	8000de0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d104      	bne.n	8000de0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000dd6:	4a2c      	ldr	r2, [pc, #176]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f007 ff7c 	bl	8008cd8 <lcd_print>
		lcd_print(2, 4, "4");
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <hataKoduLcdGoster+0x1b8>)
 8000de2:	2104      	movs	r1, #4
 8000de4:	2002      	movs	r0, #2
 8000de6:	f007 ff77 	bl	8008cd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000dec:	2107      	movs	r1, #7
 8000dee:	2002      	movs	r0, #2
 8000df0:	f007 ff72 	bl	8008cd8 <lcd_print>
}
 8000df4:	e040      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d11d      	bne.n	8000e38 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f007 ff65 	bl	8008cd8 <lcd_print>
 8000e0e:	e008      	b.n	8000e22 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d104      	bne.n	8000e22 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f007 ff5b 	bl	8008cd8 <lcd_print>
		lcd_print(2, 5, "5");
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <hataKoduLcdGoster+0x1bc>)
 8000e24:	2105      	movs	r1, #5
 8000e26:	2002      	movs	r0, #2
 8000e28:	f007 ff56 	bl	8008cd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000e2e:	2107      	movs	r1, #7
 8000e30:	2002      	movs	r0, #2
 8000e32:	f007 ff51 	bl	8008cd8 <lcd_print>
}
 8000e36:	e01f      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d11c      	bne.n	8000e78 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f007 ff44 	bl	8008cd8 <lcd_print>
 8000e50:	e008      	b.n	8000e64 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d104      	bne.n	8000e64 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f007 ff3a 	bl	8008cd8 <lcd_print>
		lcd_print(2, 6, "6");
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <hataKoduLcdGoster+0x1c0>)
 8000e66:	2106      	movs	r1, #6
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f007 ff35 	bl	8008cd8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000e70:	2107      	movs	r1, #7
 8000e72:	2002      	movs	r0, #2
 8000e74:	f007 ff30 	bl	8008cd8 <lcd_print>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000b0d 	.word	0x20000b0d
 8000e84:	0800e044 	.word	0x0800e044
 8000e88:	0800e054 	.word	0x0800e054
 8000e8c:	0800e064 	.word	0x0800e064
 8000e90:	0800e068 	.word	0x0800e068
 8000e94:	0800e074 	.word	0x0800e074
 8000e98:	0800e078 	.word	0x0800e078
 8000e9c:	0800e07c 	.word	0x0800e07c
 8000ea0:	0800e080 	.word	0x0800e080
 8000ea4:	0800e084 	.word	0x0800e084

08000ea8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e009      	b.n	8000ec8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <eepromDataFillWithEmpty+0x38>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <eepromDataFillWithEmpty+0x3c>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <eepromDataFillWithEmpty+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbf0      	blt.n	8000eb4 <eepromDataFillWithEmpty+0xc>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000070 	.word	0x20000070
 8000ee4:	20000a18 	.word	0x20000a18
 8000ee8:	20000098 	.word	0x20000098

08000eec <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000efe:	4b50      	ldr	r3, [pc, #320]	; (8001040 <i2cTest+0x154>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <i2cTest+0x154>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000f0e:	484c      	ldr	r0, [pc, #304]	; (8001040 <i2cTest+0x154>)
 8000f10:	f009 fb94 	bl	800a63c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f14:	23c0      	movs	r3, #192	; 0xc0
 8000f16:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000f18:	2311      	movs	r3, #17
 8000f1a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4846      	ldr	r0, [pc, #280]	; (8001044 <i2cTest+0x158>)
 8000f2a:	f008 ff9b 	bl	8009e64 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <i2cTest+0x158>)
 8000f34:	f009 fa0d 	bl	800a352 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	4841      	ldr	r0, [pc, #260]	; (8001044 <i2cTest+0x158>)
 8000f3e:	f009 fa08 	bl	800a352 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f008 fc1e 	bl	8009784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f48:	bf00      	nop
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	483d      	ldr	r0, [pc, #244]	; (8001044 <i2cTest+0x158>)
 8000f4e:	f009 f9e9 	bl	800a324 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d006      	beq.n	8000f66 <i2cTest+0x7a>
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	483a      	ldr	r0, [pc, #232]	; (8001044 <i2cTest+0x158>)
 8000f5c:	f009 f9e2 	bl	800a324 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d1f1      	bne.n	8000f4a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	4836      	ldr	r0, [pc, #216]	; (8001044 <i2cTest+0x158>)
 8000f6c:	f009 f9f1 	bl	800a352 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f008 fc07 	bl	8009784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f76:	bf00      	nop
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	4832      	ldr	r0, [pc, #200]	; (8001044 <i2cTest+0x158>)
 8000f7c:	f009 f9d2 	bl	800a324 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d0f8      	beq.n	8000f78 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	482e      	ldr	r0, [pc, #184]	; (8001044 <i2cTest+0x158>)
 8000f8c:	f009 f9e1 	bl	800a352 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f008 fbf7 	bl	8009784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f96:	bf00      	nop
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	482a      	ldr	r0, [pc, #168]	; (8001044 <i2cTest+0x158>)
 8000f9c:	f009 f9c2 	bl	800a324 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d0f8      	beq.n	8000f98 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <i2cTest+0x158>)
 8000fac:	f009 f9d1 	bl	800a352 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f008 fbe7 	bl	8009784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000fb6:	bf00      	nop
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <i2cTest+0x158>)
 8000fbc:	f009 f9b2 	bl	800a324 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d1f8      	bne.n	8000fb8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <i2cTest+0x158>)
 8000fcc:	f009 f9c1 	bl	800a352 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f008 fbd7 	bl	8009784 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000fd6:	bf00      	nop
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	481a      	ldr	r0, [pc, #104]	; (8001044 <i2cTest+0x158>)
 8000fdc:	f009 f9a2 	bl	800a324 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d1f8      	bne.n	8000fd8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000fea:	2312      	movs	r3, #18
 8000fec:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <i2cTest+0x158>)
 8000ffc:	f008 ff32 	bl	8009e64 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <i2cTest+0x154>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <i2cTest+0x154>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800100e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <i2cTest+0x154>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <i2cTest+0x154>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800101e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <i2cTest+0x154>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <i2cTest+0x154>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <i2cTest+0x154>)
 8001032:	f009 f9bf 	bl	800a3b4 <HAL_I2C_Init>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200010d8 	.word	0x200010d8
 8001044:	40010c00 	.word	0x40010c00

08001048 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8001052:	20c8      	movs	r0, #200	; 0xc8
 8001054:	f008 fb96 	bl	8009784 <HAL_Delay>
	lcd_clear();
 8001058:	f007 fe6a 	bl	8008d30 <lcd_clear>
	if(type == 1 && page == 0) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d13e      	bne.n	80010e0 <printTemplate+0x98>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d13b      	bne.n	80010e0 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001068:	4a81      	ldr	r2, [pc, #516]	; (8001270 <printTemplate+0x228>)
 800106a:	2101      	movs	r1, #1
 800106c:	2001      	movs	r0, #1
 800106e:	f007 fe33 	bl	8008cd8 <lcd_print>
		lcd_print(2, 3, "0");
 8001072:	4a80      	ldr	r2, [pc, #512]	; (8001274 <printTemplate+0x22c>)
 8001074:	2103      	movs	r1, #3
 8001076:	2002      	movs	r0, #2
 8001078:	f007 fe2e 	bl	8008cd8 <lcd_print>
		lcd_print(2, 4, "1");
 800107c:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <printTemplate+0x230>)
 800107e:	2104      	movs	r1, #4
 8001080:	2002      	movs	r0, #2
 8001082:	f007 fe29 	bl	8008cd8 <lcd_print>
		lcd_print(2, 5, "2");
 8001086:	4a7d      	ldr	r2, [pc, #500]	; (800127c <printTemplate+0x234>)
 8001088:	2105      	movs	r1, #5
 800108a:	2002      	movs	r0, #2
 800108c:	f007 fe24 	bl	8008cd8 <lcd_print>
		lcd_print(2, 6, "3");
 8001090:	4a7b      	ldr	r2, [pc, #492]	; (8001280 <printTemplate+0x238>)
 8001092:	2106      	movs	r1, #6
 8001094:	2002      	movs	r0, #2
 8001096:	f007 fe1f 	bl	8008cd8 <lcd_print>
		lcd_print(2, 7, "4");
 800109a:	4a7a      	ldr	r2, [pc, #488]	; (8001284 <printTemplate+0x23c>)
 800109c:	2107      	movs	r1, #7
 800109e:	2002      	movs	r0, #2
 80010a0:	f007 fe1a 	bl	8008cd8 <lcd_print>
		lcd_print(2, 10, "5");
 80010a4:	4a78      	ldr	r2, [pc, #480]	; (8001288 <printTemplate+0x240>)
 80010a6:	210a      	movs	r1, #10
 80010a8:	2002      	movs	r0, #2
 80010aa:	f007 fe15 	bl	8008cd8 <lcd_print>
		lcd_print(2, 11, "6");
 80010ae:	4a77      	ldr	r2, [pc, #476]	; (800128c <printTemplate+0x244>)
 80010b0:	210b      	movs	r1, #11
 80010b2:	2002      	movs	r0, #2
 80010b4:	f007 fe10 	bl	8008cd8 <lcd_print>
		lcd_print(2, 12, "7");
 80010b8:	4a75      	ldr	r2, [pc, #468]	; (8001290 <printTemplate+0x248>)
 80010ba:	210c      	movs	r1, #12
 80010bc:	2002      	movs	r0, #2
 80010be:	f007 fe0b 	bl	8008cd8 <lcd_print>
		lcd_print(2, 13, "8");
 80010c2:	4a74      	ldr	r2, [pc, #464]	; (8001294 <printTemplate+0x24c>)
 80010c4:	210d      	movs	r1, #13
 80010c6:	2002      	movs	r0, #2
 80010c8:	f007 fe06 	bl	8008cd8 <lcd_print>
		lcd_print(2, 14, "9");
 80010cc:	4a72      	ldr	r2, [pc, #456]	; (8001298 <printTemplate+0x250>)
 80010ce:	210e      	movs	r1, #14
 80010d0:	2002      	movs	r0, #2
 80010d2:	f007 fe01 	bl	8008cd8 <lcd_print>
		lcd_gotoxy(2, 3);
 80010d6:	2103      	movs	r1, #3
 80010d8:	2002      	movs	r0, #2
 80010da:	f007 fdde 	bl	8008c9a <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80010de:	e0c2      	b.n	8001266 <printTemplate+0x21e>
	} else if(type == 2) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d15e      	bne.n	80011a4 <printTemplate+0x15c>
		if(page == 1) {
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10f      	bne.n	800110c <printTemplate+0xc4>
			lcd_clear();
 80010ec:	f007 fe20 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 80010f0:	2064      	movs	r0, #100	; 0x64
 80010f2:	f008 fb47 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010f6:	4a69      	ldr	r2, [pc, #420]	; (800129c <printTemplate+0x254>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	2001      	movs	r0, #1
 80010fc:	f007 fdec 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001100:	4a67      	ldr	r2, [pc, #412]	; (80012a0 <printTemplate+0x258>)
 8001102:	2101      	movs	r1, #1
 8001104:	2002      	movs	r0, #2
 8001106:	f007 fde7 	bl	8008cd8 <lcd_print>
}
 800110a:	e0ac      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 2) {
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10f      	bne.n	8001132 <printTemplate+0xea>
			lcd_clear();
 8001112:	f007 fe0d 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 8001116:	2064      	movs	r0, #100	; 0x64
 8001118:	f008 fb34 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800111c:	4a5f      	ldr	r2, [pc, #380]	; (800129c <printTemplate+0x254>)
 800111e:	2101      	movs	r1, #1
 8001120:	2001      	movs	r0, #1
 8001122:	f007 fdd9 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <printTemplate+0x25c>)
 8001128:	2101      	movs	r1, #1
 800112a:	2002      	movs	r0, #2
 800112c:	f007 fdd4 	bl	8008cd8 <lcd_print>
}
 8001130:	e099      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 3) {
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d10f      	bne.n	8001158 <printTemplate+0x110>
			lcd_clear();
 8001138:	f007 fdfa 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	; 0x64
 800113e:	f008 fb21 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001142:	4a56      	ldr	r2, [pc, #344]	; (800129c <printTemplate+0x254>)
 8001144:	2101      	movs	r1, #1
 8001146:	2001      	movs	r0, #1
 8001148:	f007 fdc6 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800114c:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <printTemplate+0x260>)
 800114e:	2101      	movs	r1, #1
 8001150:	2002      	movs	r0, #2
 8001152:	f007 fdc1 	bl	8008cd8 <lcd_print>
}
 8001156:	e086      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 4) {
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d10f      	bne.n	800117e <printTemplate+0x136>
			lcd_clear();
 800115e:	f007 fde7 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f008 fb0e 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <printTemplate+0x254>)
 800116a:	2101      	movs	r1, #1
 800116c:	2001      	movs	r0, #1
 800116e:	f007 fdb3 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001172:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <printTemplate+0x264>)
 8001174:	2101      	movs	r1, #1
 8001176:	2002      	movs	r0, #2
 8001178:	f007 fdae 	bl	8008cd8 <lcd_print>
}
 800117c:	e073      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 5) {
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b05      	cmp	r3, #5
 8001182:	d170      	bne.n	8001266 <printTemplate+0x21e>
			lcd_clear();
 8001184:	f007 fdd4 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f008 fafb 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <printTemplate+0x254>)
 8001190:	2101      	movs	r1, #1
 8001192:	2001      	movs	r0, #1
 8001194:	f007 fda0 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001198:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <printTemplate+0x268>)
 800119a:	2101      	movs	r1, #1
 800119c:	2002      	movs	r0, #2
 800119e:	f007 fd9b 	bl	8008cd8 <lcd_print>
}
 80011a2:	e060      	b.n	8001266 <printTemplate+0x21e>
	} else if(type == 3) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d15d      	bne.n	8001266 <printTemplate+0x21e>
		if(page == 1) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d10f      	bne.n	80011d0 <printTemplate+0x188>
			lcd_clear();
 80011b0:	f007 fdbe 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f008 fae5 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011ba:	4a3e      	ldr	r2, [pc, #248]	; (80012b4 <printTemplate+0x26c>)
 80011bc:	2101      	movs	r1, #1
 80011be:	2001      	movs	r0, #1
 80011c0:	f007 fd8a 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <printTemplate+0x258>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2002      	movs	r0, #2
 80011ca:	f007 fd85 	bl	8008cd8 <lcd_print>
}
 80011ce:	e04a      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 2) {
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d10f      	bne.n	80011f6 <printTemplate+0x1ae>
			lcd_clear();
 80011d6:	f007 fdab 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 80011da:	2064      	movs	r0, #100	; 0x64
 80011dc:	f008 fad2 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011e0:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <printTemplate+0x26c>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	2001      	movs	r0, #1
 80011e6:	f007 fd77 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011ea:	4a2e      	ldr	r2, [pc, #184]	; (80012a4 <printTemplate+0x25c>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	2002      	movs	r0, #2
 80011f0:	f007 fd72 	bl	8008cd8 <lcd_print>
}
 80011f4:	e037      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 3) {
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d10f      	bne.n	800121c <printTemplate+0x1d4>
			lcd_clear();
 80011fc:	f007 fd98 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 8001200:	2064      	movs	r0, #100	; 0x64
 8001202:	f008 fabf 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001206:	4a2b      	ldr	r2, [pc, #172]	; (80012b4 <printTemplate+0x26c>)
 8001208:	2101      	movs	r1, #1
 800120a:	2001      	movs	r0, #1
 800120c:	f007 fd64 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001210:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <printTemplate+0x260>)
 8001212:	2101      	movs	r1, #1
 8001214:	2002      	movs	r0, #2
 8001216:	f007 fd5f 	bl	8008cd8 <lcd_print>
}
 800121a:	e024      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 4) {
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d10f      	bne.n	8001242 <printTemplate+0x1fa>
			lcd_clear();
 8001222:	f007 fd85 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f008 faac 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800122c:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <printTemplate+0x26c>)
 800122e:	2101      	movs	r1, #1
 8001230:	2001      	movs	r0, #1
 8001232:	f007 fd51 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <printTemplate+0x264>)
 8001238:	2101      	movs	r1, #1
 800123a:	2002      	movs	r0, #2
 800123c:	f007 fd4c 	bl	8008cd8 <lcd_print>
}
 8001240:	e011      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 5) {
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d10e      	bne.n	8001266 <printTemplate+0x21e>
			lcd_clear();
 8001248:	f007 fd72 	bl	8008d30 <lcd_clear>
			HAL_Delay(100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f008 fa99 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <printTemplate+0x26c>)
 8001254:	2101      	movs	r1, #1
 8001256:	2001      	movs	r0, #1
 8001258:	f007 fd3e 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <printTemplate+0x268>)
 800125e:	2101      	movs	r1, #1
 8001260:	2002      	movs	r0, #2
 8001262:	f007 fd39 	bl	8008cd8 <lcd_print>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800e088 	.word	0x0800e088
 8001274:	0800e090 	.word	0x0800e090
 8001278:	0800e094 	.word	0x0800e094
 800127c:	0800e098 	.word	0x0800e098
 8001280:	0800e09c 	.word	0x0800e09c
 8001284:	0800e0a0 	.word	0x0800e0a0
 8001288:	0800e0a4 	.word	0x0800e0a4
 800128c:	0800e0a8 	.word	0x0800e0a8
 8001290:	0800e0ac 	.word	0x0800e0ac
 8001294:	0800e0b0 	.word	0x0800e0b0
 8001298:	0800e0b4 	.word	0x0800e0b4
 800129c:	0800e0b8 	.word	0x0800e0b8
 80012a0:	0800e0c0 	.word	0x0800e0c0
 80012a4:	0800e0d4 	.word	0x0800e0d4
 80012a8:	0800e0e8 	.word	0x0800e0e8
 80012ac:	0800e0fc 	.word	0x0800e0fc
 80012b0:	0800e110 	.word	0x0800e110
 80012b4:	0800e124 	.word	0x0800e124

080012b8 <checkSlideVal>:

int checkSlideVal(int state) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d111      	bne.n	80012ea <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012c6:	2101      	movs	r1, #1
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <checkSlideVal+0x60>)
 80012ca:	f009 f82b 	bl	800a324 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <checkSlideVal+0x20>
			return 34;
 80012d4:	2322      	movs	r3, #34	; 0x22
 80012d6:	e01b      	b.n	8001310 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012d8:	2108      	movs	r1, #8
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <checkSlideVal+0x64>)
 80012dc:	f009 f822 	bl	800a324 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d113      	bne.n	800130e <checkSlideVal+0x56>
			return 32;
 80012e6:	2320      	movs	r3, #32
 80012e8:	e012      	b.n	8001310 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012ea:	2101      	movs	r1, #1
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <checkSlideVal+0x60>)
 80012ee:	f009 f819 	bl	800a324 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <checkSlideVal+0x44>
			return 35;
 80012f8:	2323      	movs	r3, #35	; 0x23
 80012fa:	e009      	b.n	8001310 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012fc:	2108      	movs	r1, #8
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <checkSlideVal+0x64>)
 8001300:	f009 f810 	bl	800a324 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <checkSlideVal+0x56>
			return 33;
 800130a:	2321      	movs	r3, #33	; 0x21
 800130c:	e000      	b.n	8001310 <checkSlideVal+0x58>
		}
	}
	return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40010800 	.word	0x40010800
 800131c:	40011000 	.word	0x40011000

08001320 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7fe ff78 	bl	8000224 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800133c:	e08a      	b.n	8001454 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7ff ffba 	bl	80012b8 <checkSlideVal>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	dd07      	ble.n	800135a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f7ff ffb4 	bl	80012b8 <checkSlideVal>
 8001350:	4603      	mov	r3, r0
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b44      	ldr	r3, [pc, #272]	; (8001468 <slideText+0x148>)
 8001356:	701a      	strb	r2, [r3, #0]
			break;
 8001358:	e081      	b.n	800145e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	e075      	b.n	800144c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff ffa9 	bl	80012b8 <checkSlideVal>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd09      	ble.n	8001380 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff ffa3 	bl	80012b8 <checkSlideVal>
 8001372:	4603      	mov	r3, r0
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <slideText+0x148>)
 8001378:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800137e:	e069      	b.n	8001454 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	4413      	add	r3, r2
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	e029      	b.n	80013de <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800138a:	6838      	ldr	r0, [r7, #0]
 800138c:	f7ff ff94 	bl	80012b8 <checkSlideVal>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	dd0b      	ble.n	80013ae <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f7ff ff8e 	bl	80012b8 <checkSlideVal>
 800139c:	4603      	mov	r3, r0
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <slideText+0x148>)
 80013a2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013ac:	e01d      	b.n	80013ea <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f007 fc98 	bl	8008d02 <lcd_print_char>
				HAL_Delay(30);
 80013d2:	201e      	movs	r0, #30
 80013d4:	f008 f9d6 	bl	8009784 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3301      	adds	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	7dfa      	ldrb	r2, [r7, #23]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbcf      	blt.n	800138a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	e023      	b.n	800143a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f7ff ff60 	bl	80012b8 <checkSlideVal>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd0b      	ble.n	8001416 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f7ff ff5a 	bl	80012b8 <checkSlideVal>
 8001404:	4603      	mov	r3, r0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <slideText+0x148>)
 800140a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001414:	e017      	b.n	8001446 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	db0a      	blt.n	8001434 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	b2d1      	uxtb	r1, r2
 8001426:	2220      	movs	r2, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f007 fc6a 	bl	8008d02 <lcd_print_char>
			    	 HAL_Delay(30);
 800142e:	201e      	movs	r0, #30
 8001430:	f008 f9a8 	bl	8009784 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3b01      	subs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	7dfa      	ldrb	r2, [r7, #23]
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	429a      	cmp	r2, r3
 8001444:	dad5      	bge.n	80013f2 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	3301      	adds	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	6a3a      	ldr	r2, [r7, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	db85      	blt.n	8001360 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b01      	cmp	r3, #1
 8001458:	f43f af71 	beq.w	800133e <slideText+0x1e>
			     }
			}
		}
	}
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000aec 	.word	0x20000aec

0800146c <printCredentials>:

void printCredentials(int type) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d119      	bne.n	80014ae <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <printCredentials+0xf0>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 8001482:	4a37      	ldr	r2, [pc, #220]	; (8001560 <printCredentials+0xf4>)
 8001484:	2101      	movs	r1, #1
 8001486:	2001      	movs	r0, #1
 8001488:	f007 fc26 	bl	8008cd8 <lcd_print>
 800148c:	e004      	b.n	8001498 <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 800148e:	4a35      	ldr	r2, [pc, #212]	; (8001564 <printCredentials+0xf8>)
 8001490:	2101      	movs	r1, #1
 8001492:	2001      	movs	r0, #1
 8001494:	f007 fc20 	bl	8008cd8 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8001498:	4a33      	ldr	r2, [pc, #204]	; (8001568 <printCredentials+0xfc>)
 800149a:	2101      	movs	r1, #1
 800149c:	2002      	movs	r0, #2
 800149e:	f007 fc1b 	bl	8008cd8 <lcd_print>
		lcd_print(2, 13, "    ");
 80014a2:	4a32      	ldr	r2, [pc, #200]	; (800156c <printCredentials+0x100>)
 80014a4:	210d      	movs	r1, #13
 80014a6:	2002      	movs	r0, #2
 80014a8:	f007 fc16 	bl	8008cd8 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 80014ac:	e051      	b.n	8001552 <printCredentials+0xe6>
	} else if(type == 2) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d127      	bne.n	8001504 <printCredentials+0x98>
		int ssidLength = strlen(wifiSSID);
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <printCredentials+0x104>)
 80014b6:	f7fe feb5 	bl	8000224 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <printCredentials+0x108>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	2001      	movs	r0, #1
 80014c4:	f007 fc08 	bl	8008cd8 <lcd_print>
		if(ssidLength == 16) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d105      	bne.n	80014da <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 80014ce:	4a28      	ldr	r2, [pc, #160]	; (8001570 <printCredentials+0x104>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	2002      	movs	r0, #2
 80014d4:	f007 fc00 	bl	8008cd8 <lcd_print>
}
 80014d8:	e03b      	b.n	8001552 <printCredentials+0xe6>
		} else if(ssidLength < 16) {
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	dc0a      	bgt.n	80014f6 <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <printCredentials+0x10c>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f007 fbf7 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <printCredentials+0x104>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f007 fbf2 	bl	8008cd8 <lcd_print>
}
 80014f4:	e02d      	b.n	8001552 <printCredentials+0xe6>
			slideText(wifiSSID, 1, 2, 0);
 80014f6:	2300      	movs	r3, #0
 80014f8:	2202      	movs	r2, #2
 80014fa:	2101      	movs	r1, #1
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <printCredentials+0x104>)
 80014fe:	f7ff ff0f 	bl	8001320 <slideText>
}
 8001502:	e026      	b.n	8001552 <printCredentials+0xe6>
		int passLength = strlen(wifiPass);
 8001504:	481d      	ldr	r0, [pc, #116]	; (800157c <printCredentials+0x110>)
 8001506:	f7fe fe8d 	bl	8000224 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <printCredentials+0x114>)
 8001510:	2101      	movs	r1, #1
 8001512:	2001      	movs	r0, #1
 8001514:	f007 fbe0 	bl	8008cd8 <lcd_print>
		if(passLength == 16) {
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d105      	bne.n	800152a <printCredentials+0xbe>
			lcd_print(2, 1, wifiPass);
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <printCredentials+0x110>)
 8001520:	2101      	movs	r1, #1
 8001522:	2002      	movs	r0, #2
 8001524:	f007 fbd8 	bl	8008cd8 <lcd_print>
}
 8001528:	e013      	b.n	8001552 <printCredentials+0xe6>
		} else if(passLength < 16) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	dc0a      	bgt.n	8001546 <printCredentials+0xda>
			lcd_print(2, 1, "                ");
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <printCredentials+0x10c>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f007 fbcf 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, wifiPass);
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <printCredentials+0x110>)
 800153c:	2101      	movs	r1, #1
 800153e:	2002      	movs	r0, #2
 8001540:	f007 fbca 	bl	8008cd8 <lcd_print>
}
 8001544:	e005      	b.n	8001552 <printCredentials+0xe6>
			slideText(wifiPass, 1, 2, 1);
 8001546:	2301      	movs	r3, #1
 8001548:	2202      	movs	r2, #2
 800154a:	2101      	movs	r1, #1
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <printCredentials+0x110>)
 800154e:	f7ff fee7 	bl	8001320 <slideText>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000b0d 	.word	0x20000b0d
 8001560:	0800e12c 	.word	0x0800e12c
 8001564:	0800e140 	.word	0x0800e140
 8001568:	20000a90 	.word	0x20000a90
 800156c:	0800e154 	.word	0x0800e154
 8001570:	20000a9c 	.word	0x20000a9c
 8001574:	0800e15c 	.word	0x0800e15c
 8001578:	0800e170 	.word	0x0800e170
 800157c:	20000ab0 	.word	0x20000ab0
 8001580:	0800e184 	.word	0x0800e184

08001584 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001588:	f3bf 8f4f 	dsb	sy
}
 800158c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <__NVIC_SystemReset+0x24>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001596:	4904      	ldr	r1, [pc, #16]	; (80015a8 <__NVIC_SystemReset+0x24>)
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_SystemReset+0x28>)
 800159a:	4313      	orrs	r3, r2
 800159c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800159e:	f3bf 8f4f 	dsb	sy
}
 80015a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <__NVIC_SystemReset+0x20>
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	05fa0004 	.word	0x05fa0004

080015b0 <menu>:
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"

void menu() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015b6:	2101      	movs	r1, #1
 80015b8:	4890      	ldr	r0, [pc, #576]	; (80017fc <menu+0x24c>)
 80015ba:	f008 feb3 	bl	800a324 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 808e 	bne.w	80016e2 <menu+0x132>
 80015c6:	4b8e      	ldr	r3, [pc, #568]	; (8001800 <menu+0x250>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8086 	beq.w	80016e2 <menu+0x132>
		menuSayac = menuSayac+1;
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <menu+0x254>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <menu+0x254>)
 80015e0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015e2:	4b88      	ldr	r3, [pc, #544]	; (8001804 <menu+0x254>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b24      	cmp	r3, #36	; 0x24
 80015e8:	d102      	bne.n	80015f0 <menu+0x40>
			menuSayac = 1;
 80015ea:	4b86      	ldr	r3, [pc, #536]	; (8001804 <menu+0x254>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <menu+0x254>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d106      	bne.n	8001606 <menu+0x56>
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <menu+0x258>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <menu+0x56>
			menuSayac = 21;
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <menu+0x254>)
 8001602:	2215      	movs	r2, #21
 8001604:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001606:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <menu+0x254>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d106      	bne.n	800161c <menu+0x6c>
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <menu+0x25c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <menu+0x6c>
			menuSayac = 16;
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <menu+0x254>)
 8001618:	2210      	movs	r2, #16
 800161a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <menu+0x254>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b0d      	cmp	r3, #13
 8001622:	d106      	bne.n	8001632 <menu+0x82>
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <menu+0x25c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <menu+0x82>
			menuSayac = 16;
 800162c:	4b75      	ldr	r3, [pc, #468]	; (8001804 <menu+0x254>)
 800162e:	2210      	movs	r2, #16
 8001630:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001632:	4b74      	ldr	r3, [pc, #464]	; (8001804 <menu+0x254>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b09      	cmp	r3, #9
 8001638:	d106      	bne.n	8001648 <menu+0x98>
 800163a:	4b74      	ldr	r3, [pc, #464]	; (800180c <menu+0x25c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d102      	bne.n	8001648 <menu+0x98>
			menuSayac = 13;
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <menu+0x254>)
 8001644:	220d      	movs	r2, #13
 8001646:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001648:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <menu+0x254>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b0a      	cmp	r3, #10
 800164e:	d10a      	bne.n	8001666 <menu+0xb6>
 8001650:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <menu+0x260>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d003      	beq.n	8001660 <menu+0xb0>
 8001658:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <menu+0x260>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d102      	bne.n	8001666 <menu+0xb6>
			menuSayac = 11;
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <menu+0x254>)
 8001662:	220b      	movs	r2, #11
 8001664:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <menu+0x254>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d10e      	bne.n	800168c <menu+0xdc>
 800166e:	4b69      	ldr	r3, [pc, #420]	; (8001814 <menu+0x264>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d003      	beq.n	800167e <menu+0xce>
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <menu+0x264>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d106      	bne.n	800168c <menu+0xdc>
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <menu+0x25c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <menu+0xdc>
			menuSayac = 16;
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <menu+0x254>)
 8001688:	2210      	movs	r2, #16
 800168a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <menu+0x254>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d10e      	bne.n	80016b2 <menu+0x102>
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <menu+0x264>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <menu+0xf4>
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <menu+0x264>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d106      	bne.n	80016b2 <menu+0x102>
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <menu+0x25c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d102      	bne.n	80016b2 <menu+0x102>
			menuSayac = 13;
 80016ac:	4b55      	ldr	r3, [pc, #340]	; (8001804 <menu+0x254>)
 80016ae:	220d      	movs	r2, #13
 80016b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016b2:	4b54      	ldr	r3, [pc, #336]	; (8001804 <menu+0x254>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d106      	bne.n	80016c8 <menu+0x118>
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <menu+0x268>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <menu+0x118>
			menuSayac = 16;
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <menu+0x254>)
 80016c4:	2210      	movs	r2, #16
 80016c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <menu+0x254>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b18      	cmp	r3, #24
 80016ce:	d106      	bne.n	80016de <menu+0x12e>
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <menu+0x258>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <menu+0x12e>
			menuSayac = 26;
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <menu+0x254>)
 80016da:	221a      	movs	r2, #26
 80016dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016de:	f003 fa9b 	bl	8004c18 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016e2:	2108      	movs	r1, #8
 80016e4:	484d      	ldr	r0, [pc, #308]	; (800181c <menu+0x26c>)
 80016e6:	f008 fe1d 	bl	800a324 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d175      	bne.n	80017dc <menu+0x22c>
 80016f0:	4b43      	ldr	r3, [pc, #268]	; (8001800 <menu+0x250>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f083 0301 	eor.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06e      	beq.n	80017dc <menu+0x22c>
		if (menuSayac <= 1) {
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <menu+0x254>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d802      	bhi.n	800170c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <menu+0x254>)
 8001708:	2224      	movs	r2, #36	; 0x24
 800170a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800170c:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <menu+0x254>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <menu+0x254>)
 8001716:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <menu+0x254>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b14      	cmp	r3, #20
 800171e:	d106      	bne.n	800172e <menu+0x17e>
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <menu+0x258>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <menu+0x17e>
			menuSayac = 17;
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <menu+0x254>)
 800172a:	2211      	movs	r2, #17
 800172c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <menu+0x254>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	d106      	bne.n	8001744 <menu+0x194>
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <menu+0x25c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <menu+0x194>
			menuSayac = 7;
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <menu+0x254>)
 8001740:	2207      	movs	r2, #7
 8001742:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <menu+0x254>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d106      	bne.n	800175a <menu+0x1aa>
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <menu+0x25c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <menu+0x1aa>
			menuSayac = 12;
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <menu+0x254>)
 8001756:	220c      	movs	r2, #12
 8001758:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <menu+0x254>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d106      	bne.n	8001770 <menu+0x1c0>
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <menu+0x25c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d102      	bne.n	8001770 <menu+0x1c0>
			menuSayac = 8;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <menu+0x254>)
 800176c:	2208      	movs	r2, #8
 800176e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <menu+0x254>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d10a      	bne.n	800178e <menu+0x1de>
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <menu+0x260>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d003      	beq.n	8001788 <menu+0x1d8>
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <menu+0x260>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d102      	bne.n	800178e <menu+0x1de>
			menuSayac = 9;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <menu+0x254>)
 800178a:	2209      	movs	r2, #9
 800178c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <menu+0x254>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d10a      	bne.n	80017ac <menu+0x1fc>
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <menu+0x264>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d003      	beq.n	80017a6 <menu+0x1f6>
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <menu+0x264>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d102      	bne.n	80017ac <menu+0x1fc>
			menuSayac = 11;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <menu+0x254>)
 80017a8:	220b      	movs	r2, #11
 80017aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <menu+0x254>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d106      	bne.n	80017c2 <menu+0x212>
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <menu+0x268>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d102      	bne.n	80017c2 <menu+0x212>
			menuSayac = 14;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <menu+0x254>)
 80017be:	220e      	movs	r2, #14
 80017c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <menu+0x254>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b19      	cmp	r3, #25
 80017c8:	d106      	bne.n	80017d8 <menu+0x228>
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <menu+0x258>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <menu+0x228>
			menuSayac = 23;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <menu+0x254>)
 80017d4:	2217      	movs	r2, #23
 80017d6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017d8:	f003 fa1e 	bl	8004c18 <bekle>
	}

	if (menuSayac == 0) {
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <menu+0x254>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <menu+0x278>
		} else if(dilSecim  ==  1) {
			lcd_print(1, 1, "ENTERED THE MENU");
			lcd_print(2, 1, "    SETTINGS    ");
		}*/

		lcd_print(1, 1, menuyeGirildiText);
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <menu+0x270>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2001      	movs	r0, #1
 80017ea:	f007 fa75 	bl	8008cd8 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <menu+0x274>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	2002      	movs	r0, #2
 80017f4:	f007 fa70 	bl	8008cd8 <lcd_print>
 80017f8:	e016      	b.n	8001828 <menu+0x278>
 80017fa:	bf00      	nop
 80017fc:	40010800 	.word	0x40010800
 8001800:	20000b1b 	.word	0x20000b1b
 8001804:	20000aec 	.word	0x20000aec
 8001808:	20000afb 	.word	0x20000afb
 800180c:	20000af4 	.word	0x20000af4
 8001810:	20000af5 	.word	0x20000af5
 8001814:	20000af6 	.word	0x20000af6
 8001818:	20000af7 	.word	0x20000af7
 800181c:	40011000 	.word	0x40011000
 8001820:	20000c4c 	.word	0x20000c4c
 8001824:	20000c5c 	.word	0x20000c5c
	}

	if (menuSayac == 1) {
 8001828:	4b9e      	ldr	r3, [pc, #632]	; (8001aa4 <menu+0x4f4>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 8293 	bne.w	8001d58 <menu+0x7a8>
		if(dilSecim == 0) {
 8001832:	4b9d      	ldr	r3, [pc, #628]	; (8001aa8 <menu+0x4f8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d105      	bne.n	8001846 <menu+0x296>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800183a:	4a9c      	ldr	r2, [pc, #624]	; (8001aac <menu+0x4fc>)
 800183c:	2101      	movs	r1, #1
 800183e:	2001      	movs	r0, #1
 8001840:	f007 fa4a 	bl	8008cd8 <lcd_print>
 8001844:	e008      	b.n	8001858 <menu+0x2a8>
		} else if(dilSecim == 1) {
 8001846:	4b98      	ldr	r3, [pc, #608]	; (8001aa8 <menu+0x4f8>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d104      	bne.n	8001858 <menu+0x2a8>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800184e:	4a98      	ldr	r2, [pc, #608]	; (8001ab0 <menu+0x500>)
 8001850:	2101      	movs	r1, #1
 8001852:	2001      	movs	r0, #1
 8001854:	f007 fa40 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001858:	4b96      	ldr	r3, [pc, #600]	; (8001ab4 <menu+0x504>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d123      	bne.n	80018a8 <menu+0x2f8>
			if(dilSecim == 0) {
 8001860:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <menu+0x4f8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <menu+0x2c4>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001868:	4a93      	ldr	r2, [pc, #588]	; (8001ab8 <menu+0x508>)
 800186a:	2101      	movs	r1, #1
 800186c:	2002      	movs	r0, #2
 800186e:	f007 fa33 	bl	8008cd8 <lcd_print>
 8001872:	e008      	b.n	8001886 <menu+0x2d6>

			} else if(dilSecim == 1) {
 8001874:	4b8c      	ldr	r3, [pc, #560]	; (8001aa8 <menu+0x4f8>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d104      	bne.n	8001886 <menu+0x2d6>
				lcd_print(2, 1, "1.Error Code:");
 800187c:	4a8f      	ldr	r2, [pc, #572]	; (8001abc <menu+0x50c>)
 800187e:	2101      	movs	r1, #1
 8001880:	2002      	movs	r0, #2
 8001882:	f007 fa29 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001886:	4a8e      	ldr	r2, [pc, #568]	; (8001ac0 <menu+0x510>)
 8001888:	210f      	movs	r1, #15
 800188a:	2002      	movs	r0, #2
 800188c:	f007 fa24 	bl	8008cd8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001890:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <menu+0x514>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	220a      	movs	r2, #10
 8001896:	498c      	ldr	r1, [pc, #560]	; (8001ac8 <menu+0x518>)
 8001898:	4618      	mov	r0, r3
 800189a:	f00b fdcb 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 800189e:	4a8a      	ldr	r2, [pc, #552]	; (8001ac8 <menu+0x518>)
 80018a0:	210e      	movs	r1, #14
 80018a2:	2002      	movs	r0, #2
 80018a4:	f007 fa18 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80018a8:	4b82      	ldr	r3, [pc, #520]	; (8001ab4 <menu+0x504>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d123      	bne.n	80018f8 <menu+0x348>
			if(dilSecim == 0) {
 80018b0:	4b7d      	ldr	r3, [pc, #500]	; (8001aa8 <menu+0x4f8>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d105      	bne.n	80018c4 <menu+0x314>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80018b8:	4a84      	ldr	r2, [pc, #528]	; (8001acc <menu+0x51c>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	2002      	movs	r0, #2
 80018be:	f007 fa0b 	bl	8008cd8 <lcd_print>
 80018c2:	e008      	b.n	80018d6 <menu+0x326>
			} else if(dilSecim == 1) {
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <menu+0x4f8>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d104      	bne.n	80018d6 <menu+0x326>
				lcd_print(2, 1, "2.Error Code:");
 80018cc:	4a80      	ldr	r2, [pc, #512]	; (8001ad0 <menu+0x520>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	2002      	movs	r0, #2
 80018d2:	f007 fa01 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018d6:	4a7f      	ldr	r2, [pc, #508]	; (8001ad4 <menu+0x524>)
 80018d8:	210f      	movs	r1, #15
 80018da:	2002      	movs	r0, #2
 80018dc:	f007 f9fc 	bl	8008cd8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80018e0:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <menu+0x528>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	220a      	movs	r2, #10
 80018e6:	4978      	ldr	r1, [pc, #480]	; (8001ac8 <menu+0x518>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00b fda3 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 80018ee:	4a76      	ldr	r2, [pc, #472]	; (8001ac8 <menu+0x518>)
 80018f0:	210e      	movs	r1, #14
 80018f2:	2002      	movs	r0, #2
 80018f4:	f007 f9f0 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80018f8:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <menu+0x504>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d123      	bne.n	8001948 <menu+0x398>
			if(dilSecim == 0) {
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <menu+0x4f8>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <menu+0x364>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001908:	4a74      	ldr	r2, [pc, #464]	; (8001adc <menu+0x52c>)
 800190a:	2101      	movs	r1, #1
 800190c:	2002      	movs	r0, #2
 800190e:	f007 f9e3 	bl	8008cd8 <lcd_print>
 8001912:	e008      	b.n	8001926 <menu+0x376>
			} else if(dilSecim == 1) {
 8001914:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <menu+0x4f8>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d104      	bne.n	8001926 <menu+0x376>
				lcd_print(2, 1, "3.Error Code:");
 800191c:	4a70      	ldr	r2, [pc, #448]	; (8001ae0 <menu+0x530>)
 800191e:	2101      	movs	r1, #1
 8001920:	2002      	movs	r0, #2
 8001922:	f007 f9d9 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001926:	4a6b      	ldr	r2, [pc, #428]	; (8001ad4 <menu+0x524>)
 8001928:	210f      	movs	r1, #15
 800192a:	2002      	movs	r0, #2
 800192c:	f007 f9d4 	bl	8008cd8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001930:	4b6c      	ldr	r3, [pc, #432]	; (8001ae4 <menu+0x534>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	220a      	movs	r2, #10
 8001936:	4964      	ldr	r1, [pc, #400]	; (8001ac8 <menu+0x518>)
 8001938:	4618      	mov	r0, r3
 800193a:	f00b fd7b 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 800193e:	4a62      	ldr	r2, [pc, #392]	; (8001ac8 <menu+0x518>)
 8001940:	210e      	movs	r1, #14
 8001942:	2002      	movs	r0, #2
 8001944:	f007 f9c8 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001948:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <menu+0x504>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d123      	bne.n	8001998 <menu+0x3e8>
			if(dilSecim == 0) {
 8001950:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <menu+0x4f8>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <menu+0x3b4>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <menu+0x538>)
 800195a:	2101      	movs	r1, #1
 800195c:	2002      	movs	r0, #2
 800195e:	f007 f9bb 	bl	8008cd8 <lcd_print>
 8001962:	e008      	b.n	8001976 <menu+0x3c6>
			} else if(dilSecim == 1) {
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <menu+0x4f8>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d104      	bne.n	8001976 <menu+0x3c6>
				lcd_print(2, 1, "4.Error Code:");
 800196c:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <menu+0x53c>)
 800196e:	2101      	movs	r1, #1
 8001970:	2002      	movs	r0, #2
 8001972:	f007 f9b1 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001976:	4a57      	ldr	r2, [pc, #348]	; (8001ad4 <menu+0x524>)
 8001978:	210f      	movs	r1, #15
 800197a:	2002      	movs	r0, #2
 800197c:	f007 f9ac 	bl	8008cd8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <menu+0x540>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	220a      	movs	r2, #10
 8001986:	4950      	ldr	r1, [pc, #320]	; (8001ac8 <menu+0x518>)
 8001988:	4618      	mov	r0, r3
 800198a:	f00b fd53 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 800198e:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <menu+0x518>)
 8001990:	210e      	movs	r1, #14
 8001992:	2002      	movs	r0, #2
 8001994:	f007 f9a0 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001998:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <menu+0x504>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d123      	bne.n	80019e8 <menu+0x438>
			if(dilSecim == 0) {
 80019a0:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <menu+0x4f8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <menu+0x404>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <menu+0x544>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	2002      	movs	r0, #2
 80019ae:	f007 f993 	bl	8008cd8 <lcd_print>
 80019b2:	e008      	b.n	80019c6 <menu+0x416>
			} else if(dilSecim == 1) {
 80019b4:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <menu+0x4f8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d104      	bne.n	80019c6 <menu+0x416>
				lcd_print(2, 1, "5.Error Code:");
 80019bc:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <menu+0x548>)
 80019be:	2101      	movs	r1, #1
 80019c0:	2002      	movs	r0, #2
 80019c2:	f007 f989 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019c6:	4a43      	ldr	r2, [pc, #268]	; (8001ad4 <menu+0x524>)
 80019c8:	210f      	movs	r1, #15
 80019ca:	2002      	movs	r0, #2
 80019cc:	f007 f984 	bl	8008cd8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <menu+0x54c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	220a      	movs	r2, #10
 80019d6:	493c      	ldr	r1, [pc, #240]	; (8001ac8 <menu+0x518>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f00b fd2b 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 80019de:	4a3a      	ldr	r2, [pc, #232]	; (8001ac8 <menu+0x518>)
 80019e0:	210e      	movs	r1, #14
 80019e2:	2002      	movs	r0, #2
 80019e4:	f007 f978 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <menu+0x504>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d123      	bne.n	8001a38 <menu+0x488>
			if(dilSecim == 0) {
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <menu+0x4f8>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <menu+0x454>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80019f8:	4a41      	ldr	r2, [pc, #260]	; (8001b00 <menu+0x550>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	2002      	movs	r0, #2
 80019fe:	f007 f96b 	bl	8008cd8 <lcd_print>
 8001a02:	e008      	b.n	8001a16 <menu+0x466>
			} else if(dilSecim == 1) {
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <menu+0x4f8>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d104      	bne.n	8001a16 <menu+0x466>
				lcd_print(2, 1, "6.Error Code:");
 8001a0c:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <menu+0x554>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2002      	movs	r0, #2
 8001a12:	f007 f961 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a16:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <menu+0x524>)
 8001a18:	210f      	movs	r1, #15
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f007 f95c 	bl	8008cd8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a20:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <menu+0x558>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	220a      	movs	r2, #10
 8001a26:	4928      	ldr	r1, [pc, #160]	; (8001ac8 <menu+0x518>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f00b fd03 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 8001a2e:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <menu+0x518>)
 8001a30:	210e      	movs	r1, #14
 8001a32:	2002      	movs	r0, #2
 8001a34:	f007 f950 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <menu+0x504>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b06      	cmp	r3, #6
 8001a3e:	d123      	bne.n	8001a88 <menu+0x4d8>
			if(dilSecim == 0) {
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <menu+0x4f8>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <menu+0x4a4>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001a48:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <menu+0x55c>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f007 f943 	bl	8008cd8 <lcd_print>
 8001a52:	e008      	b.n	8001a66 <menu+0x4b6>
			} else if(dilSecim == 1) {
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <menu+0x4f8>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d104      	bne.n	8001a66 <menu+0x4b6>
				lcd_print(2, 1, "7.Error Code:");
 8001a5c:	4a2c      	ldr	r2, [pc, #176]	; (8001b10 <menu+0x560>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2002      	movs	r0, #2
 8001a62:	f007 f939 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a66:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <menu+0x524>)
 8001a68:	210f      	movs	r1, #15
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f007 f934 	bl	8008cd8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <menu+0x564>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	220a      	movs	r2, #10
 8001a76:	4914      	ldr	r1, [pc, #80]	; (8001ac8 <menu+0x518>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00b fcdb 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <menu+0x518>)
 8001a80:	210e      	movs	r1, #14
 8001a82:	2002      	movs	r0, #2
 8001a84:	f007 f928 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <menu+0x504>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b07      	cmp	r3, #7
 8001a8e:	d15f      	bne.n	8001b50 <menu+0x5a0>
			if(dilSecim == 0) {
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <menu+0x4f8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d141      	bne.n	8001b1c <menu+0x56c>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <menu+0x568>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f007 f91b 	bl	8008cd8 <lcd_print>
 8001aa2:	e044      	b.n	8001b2e <menu+0x57e>
 8001aa4:	20000aec 	.word	0x20000aec
 8001aa8:	20000b0d 	.word	0x20000b0d
 8001aac:	0800e198 	.word	0x0800e198
 8001ab0:	0800e1ac 	.word	0x0800e1ac
 8001ab4:	20000aee 	.word	0x20000aee
 8001ab8:	0800e1c0 	.word	0x0800e1c0
 8001abc:	0800e1d0 	.word	0x0800e1d0
 8001ac0:	0800e1e0 	.word	0x0800e1e0
 8001ac4:	20000b0e 	.word	0x20000b0e
 8001ac8:	20000a88 	.word	0x20000a88
 8001acc:	0800e1e4 	.word	0x0800e1e4
 8001ad0:	0800e1f4 	.word	0x0800e1f4
 8001ad4:	0800e204 	.word	0x0800e204
 8001ad8:	20000b0f 	.word	0x20000b0f
 8001adc:	0800e208 	.word	0x0800e208
 8001ae0:	0800e218 	.word	0x0800e218
 8001ae4:	20000b10 	.word	0x20000b10
 8001ae8:	0800e228 	.word	0x0800e228
 8001aec:	0800e238 	.word	0x0800e238
 8001af0:	20000b11 	.word	0x20000b11
 8001af4:	0800e248 	.word	0x0800e248
 8001af8:	0800e258 	.word	0x0800e258
 8001afc:	20000b12 	.word	0x20000b12
 8001b00:	0800e268 	.word	0x0800e268
 8001b04:	0800e278 	.word	0x0800e278
 8001b08:	20000b13 	.word	0x20000b13
 8001b0c:	0800e288 	.word	0x0800e288
 8001b10:	0800e298 	.word	0x0800e298
 8001b14:	20000b14 	.word	0x20000b14
 8001b18:	0800e2a8 	.word	0x0800e2a8
			} else if(dilSecim == 1) {
 8001b1c:	4ba3      	ldr	r3, [pc, #652]	; (8001dac <menu+0x7fc>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d104      	bne.n	8001b2e <menu+0x57e>
				lcd_print(2, 1, "8.Error Code:");
 8001b24:	4aa2      	ldr	r2, [pc, #648]	; (8001db0 <menu+0x800>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f007 f8d5 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b2e:	4aa1      	ldr	r2, [pc, #644]	; (8001db4 <menu+0x804>)
 8001b30:	210f      	movs	r1, #15
 8001b32:	2002      	movs	r0, #2
 8001b34:	f007 f8d0 	bl	8008cd8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b38:	4b9f      	ldr	r3, [pc, #636]	; (8001db8 <menu+0x808>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	220a      	movs	r2, #10
 8001b3e:	499f      	ldr	r1, [pc, #636]	; (8001dbc <menu+0x80c>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f00b fc77 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 8001b46:	4a9d      	ldr	r2, [pc, #628]	; (8001dbc <menu+0x80c>)
 8001b48:	210e      	movs	r1, #14
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f007 f8c4 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b50:	4b9b      	ldr	r3, [pc, #620]	; (8001dc0 <menu+0x810>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d123      	bne.n	8001ba0 <menu+0x5f0>
			if(dilSecim == 0) {
 8001b58:	4b94      	ldr	r3, [pc, #592]	; (8001dac <menu+0x7fc>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <menu+0x5bc>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001b60:	4a98      	ldr	r2, [pc, #608]	; (8001dc4 <menu+0x814>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	2002      	movs	r0, #2
 8001b66:	f007 f8b7 	bl	8008cd8 <lcd_print>
 8001b6a:	e008      	b.n	8001b7e <menu+0x5ce>
			} else if(dilSecim == 1) {
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <menu+0x7fc>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d104      	bne.n	8001b7e <menu+0x5ce>
				lcd_print(2, 1, "9.Error Code:");
 8001b74:	4a94      	ldr	r2, [pc, #592]	; (8001dc8 <menu+0x818>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f007 f8ad 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b7e:	4a8d      	ldr	r2, [pc, #564]	; (8001db4 <menu+0x804>)
 8001b80:	210f      	movs	r1, #15
 8001b82:	2002      	movs	r0, #2
 8001b84:	f007 f8a8 	bl	8008cd8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001b88:	4b90      	ldr	r3, [pc, #576]	; (8001dcc <menu+0x81c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	220a      	movs	r2, #10
 8001b8e:	498b      	ldr	r1, [pc, #556]	; (8001dbc <menu+0x80c>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00b fc4f 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 8001b96:	4a89      	ldr	r2, [pc, #548]	; (8001dbc <menu+0x80c>)
 8001b98:	210e      	movs	r1, #14
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f007 f89c 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001ba0:	4b87      	ldr	r3, [pc, #540]	; (8001dc0 <menu+0x810>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d123      	bne.n	8001bf0 <menu+0x640>
			if(dilSecim == 0) {
 8001ba8:	4b80      	ldr	r3, [pc, #512]	; (8001dac <menu+0x7fc>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <menu+0x60c>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001bb0:	4a87      	ldr	r2, [pc, #540]	; (8001dd0 <menu+0x820>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f007 f88f 	bl	8008cd8 <lcd_print>
 8001bba:	e008      	b.n	8001bce <menu+0x61e>
			} else if(dilSecim == 1) {
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <menu+0x7fc>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d104      	bne.n	8001bce <menu+0x61e>
				lcd_print(2, 1, "10.Error Code:");
 8001bc4:	4a83      	ldr	r2, [pc, #524]	; (8001dd4 <menu+0x824>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f007 f885 	bl	8008cd8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001bce:	4a82      	ldr	r2, [pc, #520]	; (8001dd8 <menu+0x828>)
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f007 f880 	bl	8008cd8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001bd8:	4b80      	ldr	r3, [pc, #512]	; (8001ddc <menu+0x82c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	220a      	movs	r2, #10
 8001bde:	4977      	ldr	r1, [pc, #476]	; (8001dbc <menu+0x80c>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00b fc27 	bl	800d434 <itoa>
			lcd_print(2, 15, snum);
 8001be6:	4a75      	ldr	r2, [pc, #468]	; (8001dbc <menu+0x80c>)
 8001be8:	210f      	movs	r1, #15
 8001bea:	2002      	movs	r0, #2
 8001bec:	f007 f874 	bl	8008cd8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001bf0:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <menu+0x810>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b0a      	cmp	r3, #10
 8001bf6:	d112      	bne.n	8001c1e <menu+0x66e>
			if(dilSecim == 0) {
 8001bf8:	4b6c      	ldr	r3, [pc, #432]	; (8001dac <menu+0x7fc>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <menu+0x65c>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c00:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <menu+0x830>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	2002      	movs	r0, #2
 8001c06:	f007 f867 	bl	8008cd8 <lcd_print>
 8001c0a:	e008      	b.n	8001c1e <menu+0x66e>
			} else if(dilSecim == 1) {
 8001c0c:	4b67      	ldr	r3, [pc, #412]	; (8001dac <menu+0x7fc>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d104      	bne.n	8001c1e <menu+0x66e>
				lcd_print(2, 1, "Del. press enter");
 8001c14:	4a73      	ldr	r2, [pc, #460]	; (8001de4 <menu+0x834>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f007 f85d 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c1e:	2102      	movs	r1, #2
 8001c20:	4871      	ldr	r0, [pc, #452]	; (8001de8 <menu+0x838>)
 8001c22:	f008 fb7f 	bl	800a324 <HAL_GPIO_ReadPin>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d119      	bne.n	8001c60 <menu+0x6b0>
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <menu+0x83c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d012      	beq.n	8001c60 <menu+0x6b0>
 8001c3a:	4b6d      	ldr	r3, [pc, #436]	; (8001df0 <menu+0x840>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10e      	bne.n	8001c60 <menu+0x6b0>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001c42:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <menu+0x810>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b5d      	ldr	r3, [pc, #372]	; (8001dc0 <menu+0x810>)
 8001c4c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <menu+0x810>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b0a      	cmp	r3, #10
 8001c54:	d902      	bls.n	8001c5c <menu+0x6ac>
				hataGostermeSirasi = 0;
 8001c56:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <menu+0x810>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c5c:	f002 ffdc 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c60:	2104      	movs	r1, #4
 8001c62:	4861      	ldr	r0, [pc, #388]	; (8001de8 <menu+0x838>)
 8001c64:	f008 fb5e 	bl	800a324 <HAL_GPIO_ReadPin>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d119      	bne.n	8001ca2 <menu+0x6f2>
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <menu+0x83c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d012      	beq.n	8001ca2 <menu+0x6f2>
 8001c7c:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <menu+0x840>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10e      	bne.n	8001ca2 <menu+0x6f2>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001c84:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <menu+0x810>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <menu+0x810>)
 8001c8e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001c90:	4b4b      	ldr	r3, [pc, #300]	; (8001dc0 <menu+0x810>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b0b      	cmp	r3, #11
 8001c96:	d902      	bls.n	8001c9e <menu+0x6ee>
	    		hataGostermeSirasi = 10;
 8001c98:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <menu+0x810>)
 8001c9a:	220a      	movs	r2, #10
 8001c9c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c9e:	f002 ffbb 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001ca2:	2108      	movs	r1, #8
 8001ca4:	4850      	ldr	r0, [pc, #320]	; (8001de8 <menu+0x838>)
 8001ca6:	f008 fb3d 	bl	800a324 <HAL_GPIO_ReadPin>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d153      	bne.n	8001d58 <menu+0x7a8>
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <menu+0x83c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	f083 0301 	eor.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04c      	beq.n	8001d58 <menu+0x7a8>
 8001cbe:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <menu+0x810>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d148      	bne.n	8001d58 <menu+0x7a8>
			hataKayit1 = 0; eepromData[37] = 0;
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <menu+0x844>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <menu+0x848>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001cd4:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <menu+0x84c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <menu+0x848>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <menu+0x850>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <menu+0x848>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001cf0:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <menu+0x854>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <menu+0x848>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001cfe:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <menu+0x858>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <menu+0x848>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <menu+0x85c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <menu+0x848>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <menu+0x860>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <menu+0x848>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <menu+0x808>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <menu+0x848>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <menu+0x81c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <menu+0x848>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <menu+0x82c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <menu+0x848>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001d52:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <menu+0x864>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001d58:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <menu+0x868>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	f040 8104 	bne.w	8001f6a <menu+0x9ba>
		if(dilSecim == 0) {
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <menu+0x7fc>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <menu+0x7c6>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001d6a:	4a2c      	ldr	r2, [pc, #176]	; (8001e1c <menu+0x86c>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f006 ffb2 	bl	8008cd8 <lcd_print>
 8001d74:	e008      	b.n	8001d88 <menu+0x7d8>
		} else if(dilSecim == 1) {
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <menu+0x7fc>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d104      	bne.n	8001d88 <menu+0x7d8>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001d7e:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <menu+0x870>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	2001      	movs	r0, #1
 8001d84:	f006 ffa8 	bl	8008cd8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <menu+0x840>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d003      	beq.n	8001d98 <menu+0x7e8>
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <menu+0x840>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d150      	bne.n	8001e3a <menu+0x88a>
			if(dilSecim == 0) {
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <menu+0x7fc>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d143      	bne.n	8001e28 <menu+0x878>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001da0:	4a20      	ldr	r2, [pc, #128]	; (8001e24 <menu+0x874>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	2002      	movs	r0, #2
 8001da6:	f006 ff97 	bl	8008cd8 <lcd_print>
 8001daa:	e046      	b.n	8001e3a <menu+0x88a>
 8001dac:	20000b0d 	.word	0x20000b0d
 8001db0:	0800e2b8 	.word	0x0800e2b8
 8001db4:	0800e204 	.word	0x0800e204
 8001db8:	20000b15 	.word	0x20000b15
 8001dbc:	20000a88 	.word	0x20000a88
 8001dc0:	20000aee 	.word	0x20000aee
 8001dc4:	0800e2c8 	.word	0x0800e2c8
 8001dc8:	0800e2d8 	.word	0x0800e2d8
 8001dcc:	20000b16 	.word	0x20000b16
 8001dd0:	0800e2e8 	.word	0x0800e2e8
 8001dd4:	0800e2f8 	.word	0x0800e2f8
 8001dd8:	0800e308 	.word	0x0800e308
 8001ddc:	20000b17 	.word	0x20000b17
 8001de0:	0800e30c 	.word	0x0800e30c
 8001de4:	0800e320 	.word	0x0800e320
 8001de8:	40010800 	.word	0x40010800
 8001dec:	20000b1b 	.word	0x20000b1b
 8001df0:	20000afb 	.word	0x20000afb
 8001df4:	20000b0e 	.word	0x20000b0e
 8001df8:	20000a18 	.word	0x20000a18
 8001dfc:	20000b0f 	.word	0x20000b0f
 8001e00:	20000b10 	.word	0x20000b10
 8001e04:	20000b11 	.word	0x20000b11
 8001e08:	20000b12 	.word	0x20000b12
 8001e0c:	20000b13 	.word	0x20000b13
 8001e10:	20000b14 	.word	0x20000b14
 8001e14:	20000b18 	.word	0x20000b18
 8001e18:	20000aec 	.word	0x20000aec
 8001e1c:	0800e334 	.word	0x0800e334
 8001e20:	0800e348 	.word	0x0800e348
 8001e24:	0800e35c 	.word	0x0800e35c
			} else if(dilSecim == 1) {
 8001e28:	4b9b      	ldr	r3, [pc, #620]	; (8002098 <menu+0xae8>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d104      	bne.n	8001e3a <menu+0x88a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e30:	4a9a      	ldr	r2, [pc, #616]	; (800209c <menu+0xaec>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	2002      	movs	r0, #2
 8001e36:	f006 ff4f 	bl	8008cd8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e3a:	4b99      	ldr	r3, [pc, #612]	; (80020a0 <menu+0xaf0>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <menu+0x8c0>
 8001e42:	4b98      	ldr	r3, [pc, #608]	; (80020a4 <menu+0xaf4>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d112      	bne.n	8001e70 <menu+0x8c0>
			if(dilSecim == 0) {
 8001e4a:	4b93      	ldr	r3, [pc, #588]	; (8002098 <menu+0xae8>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <menu+0x8ae>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e52:	4a95      	ldr	r2, [pc, #596]	; (80020a8 <menu+0xaf8>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	2002      	movs	r0, #2
 8001e58:	f006 ff3e 	bl	8008cd8 <lcd_print>
 8001e5c:	e008      	b.n	8001e70 <menu+0x8c0>
			} else if(dilSecim == 1) {
 8001e5e:	4b8e      	ldr	r3, [pc, #568]	; (8002098 <menu+0xae8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d104      	bne.n	8001e70 <menu+0x8c0>
				lcd_print(2, 1, "Deadman Control");
 8001e66:	4a91      	ldr	r2, [pc, #580]	; (80020ac <menu+0xafc>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f006 ff34 	bl	8008cd8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e70:	4b8b      	ldr	r3, [pc, #556]	; (80020a0 <menu+0xaf0>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d116      	bne.n	8001ea6 <menu+0x8f6>
 8001e78:	4b8a      	ldr	r3, [pc, #552]	; (80020a4 <menu+0xaf4>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <menu+0x8f6>
			if(dilSecim == 0) {
 8001e80:	4b85      	ldr	r3, [pc, #532]	; (8002098 <menu+0xae8>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <menu+0x8e4>
				lcd_print(2, 1, "Bas gonder     ");
 8001e88:	4a89      	ldr	r2, [pc, #548]	; (80020b0 <menu+0xb00>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f006 ff23 	bl	8008cd8 <lcd_print>
 8001e92:	e008      	b.n	8001ea6 <menu+0x8f6>
			} else if(dilSecim == 1) {
 8001e94:	4b80      	ldr	r3, [pc, #512]	; (8002098 <menu+0xae8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d104      	bne.n	8001ea6 <menu+0x8f6>
				lcd_print(2, 1, "Call & Send    ");
 8001e9c:	4a85      	ldr	r2, [pc, #532]	; (80020b4 <menu+0xb04>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f006 ff19 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	4883      	ldr	r0, [pc, #524]	; (80020b8 <menu+0xb08>)
 8001eaa:	f008 fa3b 	bl	800a324 <HAL_GPIO_ReadPin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d119      	bne.n	8001ee8 <menu+0x938>
 8001eb4:	4b81      	ldr	r3, [pc, #516]	; (80020bc <menu+0xb0c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	f083 0301 	eor.w	r3, r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d012      	beq.n	8001ee8 <menu+0x938>
 8001ec2:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <menu+0xaf4>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10e      	bne.n	8001ee8 <menu+0x938>
			calismaSekli = calismaSekli + 1;
 8001eca:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <menu+0xaf0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <menu+0xaf0>)
 8001ed4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <menu+0xaf0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d902      	bls.n	8001ee4 <menu+0x934>
				calismaSekli = 0;
 8001ede:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <menu+0xaf0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ee4:	f002 fe98 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ee8:	2104      	movs	r1, #4
 8001eea:	4873      	ldr	r0, [pc, #460]	; (80020b8 <menu+0xb08>)
 8001eec:	f008 fa1a 	bl	800a324 <HAL_GPIO_ReadPin>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d119      	bne.n	8001f2a <menu+0x97a>
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <menu+0xb0c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d012      	beq.n	8001f2a <menu+0x97a>
 8001f04:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <menu+0xaf4>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10e      	bne.n	8001f2a <menu+0x97a>
			calismaSekli = calismaSekli - 1;
 8001f0c:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <menu+0xaf0>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <menu+0xaf0>)
 8001f16:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001f18:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <menu+0xaf0>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <menu+0x976>
	    		calismaSekli = 1;
 8001f20:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <menu+0xaf0>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f26:	f002 fe77 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	4862      	ldr	r0, [pc, #392]	; (80020b8 <menu+0xb08>)
 8001f2e:	f008 f9f9 	bl	800a324 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d118      	bne.n	8001f6a <menu+0x9ba>
 8001f38:	4b60      	ldr	r3, [pc, #384]	; (80020bc <menu+0xb0c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d011      	beq.n	8001f6a <menu+0x9ba>
			eepromData[1] = calismaSekli;
 8001f46:	4b56      	ldr	r3, [pc, #344]	; (80020a0 <menu+0xaf0>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <menu+0xb10>)
 8001f4c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <menu+0xaf0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d106      	bne.n	8001f64 <menu+0x9b4>
				altLimit = 1;
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <menu+0xb14>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <menu+0xb14>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <menu+0xb10>)
 8001f62:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001f64:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <menu+0xb18>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001f6a:	4b58      	ldr	r3, [pc, #352]	; (80020cc <menu+0xb1c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	f040 8083 	bne.w	800207a <menu+0xaca>
		if(dilSecim == 0) {
 8001f74:	4b48      	ldr	r3, [pc, #288]	; (8002098 <menu+0xae8>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <menu+0x9d8>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <menu+0xb20>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2001      	movs	r0, #1
 8001f82:	f006 fea9 	bl	8008cd8 <lcd_print>
 8001f86:	e008      	b.n	8001f9a <menu+0x9ea>
		} else if(dilSecim == 1) {
 8001f88:	4b43      	ldr	r3, [pc, #268]	; (8002098 <menu+0xae8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d104      	bne.n	8001f9a <menu+0x9ea>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001f90:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <menu+0xb24>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	2001      	movs	r0, #1
 8001f96:	f006 fe9f 	bl	8008cd8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001f9a:	4b4f      	ldr	r3, [pc, #316]	; (80020d8 <menu+0xb28>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d113      	bne.n	8001fca <menu+0xa1a>
			if(dilSecim == 0) {
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <menu+0xae8>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <menu+0xa06>
				lcd_print(2, 1, "Pasif           ");
 8001faa:	4a4c      	ldr	r2, [pc, #304]	; (80020dc <menu+0xb2c>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f006 fe92 	bl	8008cd8 <lcd_print>
 8001fb4:	e012      	b.n	8001fdc <menu+0xa2c>
			} else if(dilSecim == 1) {
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <menu+0xae8>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10e      	bne.n	8001fdc <menu+0xa2c>
				lcd_print(2, 1, "Passive         ");
 8001fbe:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <menu+0xb30>)
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	2002      	movs	r0, #2
 8001fc4:	f006 fe88 	bl	8008cd8 <lcd_print>
 8001fc8:	e008      	b.n	8001fdc <menu+0xa2c>
			}
		} else if(emniyetCercevesi == 1) {
 8001fca:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <menu+0xb28>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d104      	bne.n	8001fdc <menu+0xa2c>
			lcd_print(2, 1, "OND Safety     ");
 8001fd2:	4a44      	ldr	r2, [pc, #272]	; (80020e4 <menu+0xb34>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f006 fe7e 	bl	8008cd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4836      	ldr	r0, [pc, #216]	; (80020b8 <menu+0xb08>)
 8001fe0:	f008 f9a0 	bl	800a324 <HAL_GPIO_ReadPin>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d115      	bne.n	8002016 <menu+0xa66>
 8001fea:	4b34      	ldr	r3, [pc, #208]	; (80020bc <menu+0xb0c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <menu+0xa66>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ff8:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <menu+0xb28>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <menu+0xb28>)
 8002002:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002004:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <menu+0xb28>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d902      	bls.n	8002012 <menu+0xa62>
				emniyetCercevesi = 0;
 800200c:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <menu+0xb28>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002012:	f002 fe01 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002016:	2104      	movs	r1, #4
 8002018:	4827      	ldr	r0, [pc, #156]	; (80020b8 <menu+0xb08>)
 800201a:	f008 f983 	bl	800a324 <HAL_GPIO_ReadPin>
 800201e:	4603      	mov	r3, r0
 8002020:	2b01      	cmp	r3, #1
 8002022:	d115      	bne.n	8002050 <menu+0xaa0>
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <menu+0xb0c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f083 0301 	eor.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00e      	beq.n	8002050 <menu+0xaa0>
			emniyetCercevesi = emniyetCercevesi - 1;
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <menu+0xb28>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <menu+0xb28>)
 800203c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <menu+0xb28>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <menu+0xa9c>
		   		emniyetCercevesi = 1;
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <menu+0xb28>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800204c:	f002 fde4 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002050:	2108      	movs	r1, #8
 8002052:	4819      	ldr	r0, [pc, #100]	; (80020b8 <menu+0xb08>)
 8002054:	f008 f966 	bl	800a324 <HAL_GPIO_ReadPin>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10d      	bne.n	800207a <menu+0xaca>
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <menu+0xb0c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <menu+0xaca>
			eepromData[2] = emniyetCercevesi;
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <menu+0xb28>)
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <menu+0xb10>)
 8002072:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <menu+0xb18>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <menu+0xb1c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b04      	cmp	r3, #4
 8002080:	f040 80bb 	bne.w	80021fa <menu+0xc4a>
		if(dilSecim == 0) {
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <menu+0xae8>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d12f      	bne.n	80020ec <menu+0xb3c>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800208c:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <menu+0xb38>)
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f006 fe21 	bl	8008cd8 <lcd_print>
 8002096:	e032      	b.n	80020fe <menu+0xb4e>
 8002098:	20000b0d 	.word	0x20000b0d
 800209c:	0800e370 	.word	0x0800e370
 80020a0:	20000aed 	.word	0x20000aed
 80020a4:	20000afb 	.word	0x20000afb
 80020a8:	0800e384 	.word	0x0800e384
 80020ac:	0800e394 	.word	0x0800e394
 80020b0:	0800e3a4 	.word	0x0800e3a4
 80020b4:	0800e3b4 	.word	0x0800e3b4
 80020b8:	40010800 	.word	0x40010800
 80020bc:	20000b1b 	.word	0x20000b1b
 80020c0:	20000a18 	.word	0x20000a18
 80020c4:	20000af2 	.word	0x20000af2
 80020c8:	20000b18 	.word	0x20000b18
 80020cc:	20000aec 	.word	0x20000aec
 80020d0:	0800e3c4 	.word	0x0800e3c4
 80020d4:	0800e3d8 	.word	0x0800e3d8
 80020d8:	20000af0 	.word	0x20000af0
 80020dc:	0800e3ec 	.word	0x0800e3ec
 80020e0:	0800e400 	.word	0x0800e400
 80020e4:	0800e414 	.word	0x0800e414
 80020e8:	0800e424 	.word	0x0800e424
		} else if(dilSecim == 1) {
 80020ec:	4b9b      	ldr	r3, [pc, #620]	; (800235c <menu+0xdac>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d104      	bne.n	80020fe <menu+0xb4e>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80020f4:	4a9a      	ldr	r2, [pc, #616]	; (8002360 <menu+0xdb0>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	2001      	movs	r0, #1
 80020fa:	f006 fded 	bl	8008cd8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80020fe:	4b99      	ldr	r3, [pc, #612]	; (8002364 <menu+0xdb4>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d113      	bne.n	800212e <menu+0xb7e>
			if(dilSecim == 0) {
 8002106:	4b95      	ldr	r3, [pc, #596]	; (800235c <menu+0xdac>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <menu+0xb6a>
				lcd_print(2, 1, "Pasif           ");
 800210e:	4a96      	ldr	r2, [pc, #600]	; (8002368 <menu+0xdb8>)
 8002110:	2101      	movs	r1, #1
 8002112:	2002      	movs	r0, #2
 8002114:	f006 fde0 	bl	8008cd8 <lcd_print>
 8002118:	e020      	b.n	800215c <menu+0xbac>
			} else if(dilSecim == 1) {
 800211a:	4b90      	ldr	r3, [pc, #576]	; (800235c <menu+0xdac>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d11c      	bne.n	800215c <menu+0xbac>
				lcd_print(2, 1, "Passive         ");
 8002122:	4a92      	ldr	r2, [pc, #584]	; (800236c <menu+0xdbc>)
 8002124:	2101      	movs	r1, #1
 8002126:	2002      	movs	r0, #2
 8002128:	f006 fdd6 	bl	8008cd8 <lcd_print>
 800212c:	e016      	b.n	800215c <menu+0xbac>
			}
		} else if(yavaslamaLimit == 1) {
 800212e:	4b8d      	ldr	r3, [pc, #564]	; (8002364 <menu+0xdb4>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d112      	bne.n	800215c <menu+0xbac>
			if(dilSecim == 0) {
 8002136:	4b89      	ldr	r3, [pc, #548]	; (800235c <menu+0xdac>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <menu+0xb9a>
				lcd_print(2, 1, "Aktif           ");
 800213e:	4a8c      	ldr	r2, [pc, #560]	; (8002370 <menu+0xdc0>)
 8002140:	2101      	movs	r1, #1
 8002142:	2002      	movs	r0, #2
 8002144:	f006 fdc8 	bl	8008cd8 <lcd_print>
 8002148:	e008      	b.n	800215c <menu+0xbac>
			} else if(dilSecim == 1) {
 800214a:	4b84      	ldr	r3, [pc, #528]	; (800235c <menu+0xdac>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d104      	bne.n	800215c <menu+0xbac>
				lcd_print(2, 1, "Active          ");
 8002152:	4a88      	ldr	r2, [pc, #544]	; (8002374 <menu+0xdc4>)
 8002154:	2101      	movs	r1, #1
 8002156:	2002      	movs	r0, #2
 8002158:	f006 fdbe 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800215c:	2102      	movs	r1, #2
 800215e:	4886      	ldr	r0, [pc, #536]	; (8002378 <menu+0xdc8>)
 8002160:	f008 f8e0 	bl	800a324 <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	d115      	bne.n	8002196 <menu+0xbe6>
 800216a:	4b84      	ldr	r3, [pc, #528]	; (800237c <menu+0xdcc>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00e      	beq.n	8002196 <menu+0xbe6>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002178:	4b7a      	ldr	r3, [pc, #488]	; (8002364 <menu+0xdb4>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b78      	ldr	r3, [pc, #480]	; (8002364 <menu+0xdb4>)
 8002182:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002184:	4b77      	ldr	r3, [pc, #476]	; (8002364 <menu+0xdb4>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d902      	bls.n	8002192 <menu+0xbe2>
				yavaslamaLimit = 0;
 800218c:	4b75      	ldr	r3, [pc, #468]	; (8002364 <menu+0xdb4>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002192:	f002 fd41 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002196:	2104      	movs	r1, #4
 8002198:	4877      	ldr	r0, [pc, #476]	; (8002378 <menu+0xdc8>)
 800219a:	f008 f8c3 	bl	800a324 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d115      	bne.n	80021d0 <menu+0xc20>
 80021a4:	4b75      	ldr	r3, [pc, #468]	; (800237c <menu+0xdcc>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	f083 0301 	eor.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00e      	beq.n	80021d0 <menu+0xc20>
			yavaslamaLimit = yavaslamaLimit - 1;
 80021b2:	4b6c      	ldr	r3, [pc, #432]	; (8002364 <menu+0xdb4>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <menu+0xdb4>)
 80021bc:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80021be:	4b69      	ldr	r3, [pc, #420]	; (8002364 <menu+0xdb4>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <menu+0xc1c>
		   		yavaslamaLimit = 1;
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <menu+0xdb4>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021cc:	f002 fd24 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021d0:	2108      	movs	r1, #8
 80021d2:	4869      	ldr	r0, [pc, #420]	; (8002378 <menu+0xdc8>)
 80021d4:	f008 f8a6 	bl	800a324 <HAL_GPIO_ReadPin>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10d      	bne.n	80021fa <menu+0xc4a>
 80021de:	4b67      	ldr	r3, [pc, #412]	; (800237c <menu+0xdcc>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	f083 0301 	eor.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <menu+0xc4a>
			eepromData[4] = yavaslamaLimit;
 80021ec:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <menu+0xdb4>)
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	4b63      	ldr	r3, [pc, #396]	; (8002380 <menu+0xdd0>)
 80021f2:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <menu+0xdd4>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <menu+0xdd8>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	f040 80dc 	bne.w	80023bc <menu+0xe0c>
		if(dilSecim == 0) {
 8002204:	4b55      	ldr	r3, [pc, #340]	; (800235c <menu+0xdac>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <menu+0xc68>
			lcd_print(1, 1, "ALT LIMIT       ");
 800220c:	4a5f      	ldr	r2, [pc, #380]	; (800238c <menu+0xddc>)
 800220e:	2101      	movs	r1, #1
 8002210:	2001      	movs	r0, #1
 8002212:	f006 fd61 	bl	8008cd8 <lcd_print>
 8002216:	e008      	b.n	800222a <menu+0xc7a>
		} else if(dilSecim == 1) {
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <menu+0xdac>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d104      	bne.n	800222a <menu+0xc7a>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002220:	4a5b      	ldr	r2, [pc, #364]	; (8002390 <menu+0xde0>)
 8002222:	2101      	movs	r1, #1
 8002224:	2001      	movs	r0, #1
 8002226:	f006 fd57 	bl	8008cd8 <lcd_print>
		}

		if(altLimit == 0) {
 800222a:	4b5a      	ldr	r3, [pc, #360]	; (8002394 <menu+0xde4>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d113      	bne.n	800225a <menu+0xcaa>
			if(dilSecim == 0) {
 8002232:	4b4a      	ldr	r3, [pc, #296]	; (800235c <menu+0xdac>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <menu+0xc96>
				lcd_print(2, 1, "Pasif           ");
 800223a:	4a4b      	ldr	r2, [pc, #300]	; (8002368 <menu+0xdb8>)
 800223c:	2101      	movs	r1, #1
 800223e:	2002      	movs	r0, #2
 8002240:	f006 fd4a 	bl	8008cd8 <lcd_print>
 8002244:	e020      	b.n	8002288 <menu+0xcd8>
			} else if(dilSecim == 1) {
 8002246:	4b45      	ldr	r3, [pc, #276]	; (800235c <menu+0xdac>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d11c      	bne.n	8002288 <menu+0xcd8>
				lcd_print(2, 1, "Passive         ");
 800224e:	4a47      	ldr	r2, [pc, #284]	; (800236c <menu+0xdbc>)
 8002250:	2101      	movs	r1, #1
 8002252:	2002      	movs	r0, #2
 8002254:	f006 fd40 	bl	8008cd8 <lcd_print>
 8002258:	e016      	b.n	8002288 <menu+0xcd8>
			}
		} else if(altLimit == 1) {
 800225a:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <menu+0xde4>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d112      	bne.n	8002288 <menu+0xcd8>
			if(dilSecim == 0){
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <menu+0xdac>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <menu+0xcc6>
				lcd_print(2, 1, "Aktif           ");
 800226a:	4a41      	ldr	r2, [pc, #260]	; (8002370 <menu+0xdc0>)
 800226c:	2101      	movs	r1, #1
 800226e:	2002      	movs	r0, #2
 8002270:	f006 fd32 	bl	8008cd8 <lcd_print>
 8002274:	e008      	b.n	8002288 <menu+0xcd8>
			} else if(dilSecim == 1){
 8002276:	4b39      	ldr	r3, [pc, #228]	; (800235c <menu+0xdac>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d104      	bne.n	8002288 <menu+0xcd8>
				lcd_print(2, 1, "Active          ");
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <menu+0xdc4>)
 8002280:	2101      	movs	r1, #1
 8002282:	2002      	movs	r0, #2
 8002284:	f006 fd28 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002288:	2102      	movs	r1, #2
 800228a:	483b      	ldr	r0, [pc, #236]	; (8002378 <menu+0xdc8>)
 800228c:	f008 f84a 	bl	800a324 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d119      	bne.n	80022ca <menu+0xd1a>
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <menu+0xdcc>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d012      	beq.n	80022ca <menu+0xd1a>
 80022a4:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <menu+0xde8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10e      	bne.n	80022ca <menu+0xd1a>
			altLimit = altLimit + 1;
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <menu+0xde4>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b37      	ldr	r3, [pc, #220]	; (8002394 <menu+0xde4>)
 80022b6:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80022b8:	4b36      	ldr	r3, [pc, #216]	; (8002394 <menu+0xde4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d902      	bls.n	80022c6 <menu+0xd16>
				altLimit = 0;
 80022c0:	4b34      	ldr	r3, [pc, #208]	; (8002394 <menu+0xde4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022c6:	f002 fca7 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80022ca:	2104      	movs	r1, #4
 80022cc:	482a      	ldr	r0, [pc, #168]	; (8002378 <menu+0xdc8>)
 80022ce:	f008 f829 	bl	800a324 <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d119      	bne.n	800230c <menu+0xd5c>
 80022d8:	4b28      	ldr	r3, [pc, #160]	; (800237c <menu+0xdcc>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f083 0301 	eor.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d012      	beq.n	800230c <menu+0xd5c>
 80022e6:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <menu+0xde8>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10e      	bne.n	800230c <menu+0xd5c>
			altLimit = altLimit - 1;
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <menu+0xde4>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b27      	ldr	r3, [pc, #156]	; (8002394 <menu+0xde4>)
 80022f8:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <menu+0xde4>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <menu+0xd58>
		   		altLimit = 1;
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <menu+0xde4>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002308:	f002 fc86 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800230c:	2108      	movs	r1, #8
 800230e:	481a      	ldr	r0, [pc, #104]	; (8002378 <menu+0xdc8>)
 8002310:	f008 f808 	bl	800a324 <HAL_GPIO_ReadPin>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d150      	bne.n	80023bc <menu+0xe0c>
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <menu+0xdcc>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d049      	beq.n	80023bc <menu+0xe0c>
			eepromData[5] = altLimit;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <menu+0xde4>)
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <menu+0xdd0>)
 800232e:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <menu+0xde4>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d133      	bne.n	80023a0 <menu+0xdf0>
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <menu+0xdec>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <menu+0xd98>
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <menu+0xdec>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d12b      	bne.n	80023a0 <menu+0xdf0>
				kapiTablaAcKonum = 3;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <menu+0xdec>)
 800234a:	2203      	movs	r2, #3
 800234c:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <menu+0xdec>)
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <menu+0xdd0>)
 8002354:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002358:	e02d      	b.n	80023b6 <menu+0xe06>
 800235a:	bf00      	nop
 800235c:	20000b0d 	.word	0x20000b0d
 8002360:	0800e438 	.word	0x0800e438
 8002364:	20000af1 	.word	0x20000af1
 8002368:	0800e3ec 	.word	0x0800e3ec
 800236c:	0800e400 	.word	0x0800e400
 8002370:	0800e44c 	.word	0x0800e44c
 8002374:	0800e460 	.word	0x0800e460
 8002378:	40010800 	.word	0x40010800
 800237c:	20000b1b 	.word	0x20000b1b
 8002380:	20000a18 	.word	0x20000a18
 8002384:	20000b18 	.word	0x20000b18
 8002388:	20000aec 	.word	0x20000aec
 800238c:	0800e474 	.word	0x0800e474
 8002390:	0800e488 	.word	0x0800e488
 8002394:	20000af2 	.word	0x20000af2
 8002398:	20000aed 	.word	0x20000aed
 800239c:	20000af9 	.word	0x20000af9
			} else if(altLimit == 0) {
 80023a0:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <menu+0x1014>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <menu+0xe06>
				platformSilindirTipi = 0;
 80023a8:	4b87      	ldr	r3, [pc, #540]	; (80025c8 <menu+0x1018>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80023ae:	4b86      	ldr	r3, [pc, #536]	; (80025c8 <menu+0x1018>)
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4b86      	ldr	r3, [pc, #536]	; (80025cc <menu+0x101c>)
 80023b4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80023b6:	4b86      	ldr	r3, [pc, #536]	; (80025d0 <menu+0x1020>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80023bc:	4b85      	ldr	r3, [pc, #532]	; (80025d4 <menu+0x1024>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	f040 8091 	bne.w	80024e8 <menu+0xf38>
		if(dilSecim == 0) {
 80023c6:	4b84      	ldr	r3, [pc, #528]	; (80025d8 <menu+0x1028>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <menu+0xe2a>
			lcd_print(1, 1, "BASINC SALTERI ");
 80023ce:	4a83      	ldr	r2, [pc, #524]	; (80025dc <menu+0x102c>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2001      	movs	r0, #1
 80023d4:	f006 fc80 	bl	8008cd8 <lcd_print>
 80023d8:	e008      	b.n	80023ec <menu+0xe3c>
		} else if(dilSecim == 1){
 80023da:	4b7f      	ldr	r3, [pc, #508]	; (80025d8 <menu+0x1028>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d104      	bne.n	80023ec <menu+0xe3c>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80023e2:	4a7f      	ldr	r2, [pc, #508]	; (80025e0 <menu+0x1030>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2001      	movs	r0, #1
 80023e8:	f006 fc76 	bl	8008cd8 <lcd_print>
		}
		if(basincSalteri == 0){
 80023ec:	4b7d      	ldr	r3, [pc, #500]	; (80025e4 <menu+0x1034>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d113      	bne.n	800241c <menu+0xe6c>
			if(dilSecim == 0) {
 80023f4:	4b78      	ldr	r3, [pc, #480]	; (80025d8 <menu+0x1028>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <menu+0xe58>
				lcd_print(2, 1, "Pasif           ");
 80023fc:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <menu+0x1038>)
 80023fe:	2101      	movs	r1, #1
 8002400:	2002      	movs	r0, #2
 8002402:	f006 fc69 	bl	8008cd8 <lcd_print>
 8002406:	e020      	b.n	800244a <menu+0xe9a>
			} else if(dilSecim == 1){
 8002408:	4b73      	ldr	r3, [pc, #460]	; (80025d8 <menu+0x1028>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d11c      	bne.n	800244a <menu+0xe9a>
				lcd_print(2, 1, "Passive         ");
 8002410:	4a76      	ldr	r2, [pc, #472]	; (80025ec <menu+0x103c>)
 8002412:	2101      	movs	r1, #1
 8002414:	2002      	movs	r0, #2
 8002416:	f006 fc5f 	bl	8008cd8 <lcd_print>
 800241a:	e016      	b.n	800244a <menu+0xe9a>
			}
		} else if(basincSalteri == 1) {
 800241c:	4b71      	ldr	r3, [pc, #452]	; (80025e4 <menu+0x1034>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d112      	bne.n	800244a <menu+0xe9a>
			if(dilSecim == 0) {
 8002424:	4b6c      	ldr	r3, [pc, #432]	; (80025d8 <menu+0x1028>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <menu+0xe88>
				lcd_print(2, 1, "Aktif           ");
 800242c:	4a70      	ldr	r2, [pc, #448]	; (80025f0 <menu+0x1040>)
 800242e:	2101      	movs	r1, #1
 8002430:	2002      	movs	r0, #2
 8002432:	f006 fc51 	bl	8008cd8 <lcd_print>
 8002436:	e008      	b.n	800244a <menu+0xe9a>
			} else if(dilSecim == 1) {
 8002438:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <menu+0x1028>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d104      	bne.n	800244a <menu+0xe9a>
				lcd_print(2, 1, "Active          ");
 8002440:	4a6c      	ldr	r2, [pc, #432]	; (80025f4 <menu+0x1044>)
 8002442:	2101      	movs	r1, #1
 8002444:	2002      	movs	r0, #2
 8002446:	f006 fc47 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800244a:	2102      	movs	r1, #2
 800244c:	486a      	ldr	r0, [pc, #424]	; (80025f8 <menu+0x1048>)
 800244e:	f007 ff69 	bl	800a324 <HAL_GPIO_ReadPin>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d115      	bne.n	8002484 <menu+0xed4>
 8002458:	4b68      	ldr	r3, [pc, #416]	; (80025fc <menu+0x104c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f083 0301 	eor.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00e      	beq.n	8002484 <menu+0xed4>
			basincSalteri = basincSalteri + 1;
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <menu+0x1034>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b5d      	ldr	r3, [pc, #372]	; (80025e4 <menu+0x1034>)
 8002470:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <menu+0x1034>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d902      	bls.n	8002480 <menu+0xed0>
				basincSalteri = 0;
 800247a:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <menu+0x1034>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002480:	f002 fbca 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002484:	2104      	movs	r1, #4
 8002486:	485c      	ldr	r0, [pc, #368]	; (80025f8 <menu+0x1048>)
 8002488:	f007 ff4c 	bl	800a324 <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b01      	cmp	r3, #1
 8002490:	d115      	bne.n	80024be <menu+0xf0e>
 8002492:	4b5a      	ldr	r3, [pc, #360]	; (80025fc <menu+0x104c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <menu+0xf0e>
			basincSalteri = basincSalteri - 1;
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <menu+0x1034>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <menu+0x1034>)
 80024aa:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80024ac:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <menu+0x1034>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <menu+0xf0a>
		   		basincSalteri = 1;
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <menu+0x1034>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024ba:	f002 fbad 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024be:	2108      	movs	r1, #8
 80024c0:	484d      	ldr	r0, [pc, #308]	; (80025f8 <menu+0x1048>)
 80024c2:	f007 ff2f 	bl	800a324 <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10d      	bne.n	80024e8 <menu+0xf38>
 80024cc:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <menu+0x104c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	f083 0301 	eor.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <menu+0xf38>
			eepromData[6] = basincSalteri;
 80024da:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <menu+0x1034>)
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <menu+0x101c>)
 80024e0:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <menu+0x1020>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80024e8:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <menu+0x1024>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b07      	cmp	r3, #7
 80024ee:	f040 80fa 	bne.w	80026e6 <menu+0x1136>
		if(dilSecim == 0) {
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <menu+0x1028>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <menu+0xf56>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80024fa:	4a41      	ldr	r2, [pc, #260]	; (8002600 <menu+0x1050>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	2001      	movs	r0, #1
 8002500:	f006 fbea 	bl	8008cd8 <lcd_print>
 8002504:	e008      	b.n	8002518 <menu+0xf68>
		} else if(dilSecim == 1){
 8002506:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <menu+0x1028>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d104      	bne.n	8002518 <menu+0xf68>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800250e:	4a3d      	ldr	r2, [pc, #244]	; (8002604 <menu+0x1054>)
 8002510:	2101      	movs	r1, #1
 8002512:	2001      	movs	r0, #1
 8002514:	f006 fbe0 	bl	8008cd8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002518:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <menu+0x1058>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d113      	bne.n	8002548 <menu+0xf98>
			if(dilSecim == 0) {
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <menu+0x1028>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <menu+0xf84>
				lcd_print(2, 1, "Pasif           ");
 8002528:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <menu+0x1038>)
 800252a:	2101      	movs	r1, #1
 800252c:	2002      	movs	r0, #2
 800252e:	f006 fbd3 	bl	8008cd8 <lcd_print>
 8002532:	e07e      	b.n	8002632 <menu+0x1082>
			} else if(dilSecim == 1){
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <menu+0x1028>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d17a      	bne.n	8002632 <menu+0x1082>
				lcd_print(2, 1, "Passive         ");
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <menu+0x103c>)
 800253e:	2101      	movs	r1, #1
 8002540:	2002      	movs	r0, #2
 8002542:	f006 fbc9 	bl	8008cd8 <lcd_print>
 8002546:	e074      	b.n	8002632 <menu+0x1082>
			}
		} else if(kapiSecimleri == 1) {
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <menu+0x1058>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d113      	bne.n	8002578 <menu+0xfc8>
			if(dilSecim == 0) {
 8002550:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <menu+0x1028>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <menu+0xfb4>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002558:	4a2c      	ldr	r2, [pc, #176]	; (800260c <menu+0x105c>)
 800255a:	2101      	movs	r1, #1
 800255c:	2002      	movs	r0, #2
 800255e:	f006 fbbb 	bl	8008cd8 <lcd_print>
 8002562:	e066      	b.n	8002632 <menu+0x1082>
			} else if(dilSecim == 1) {
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <menu+0x1028>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d162      	bne.n	8002632 <menu+0x1082>
				lcd_print(2, 1, "Floor door act  ");
 800256c:	4a28      	ldr	r2, [pc, #160]	; (8002610 <menu+0x1060>)
 800256e:	2101      	movs	r1, #1
 8002570:	2002      	movs	r0, #2
 8002572:	f006 fbb1 	bl	8008cd8 <lcd_print>
 8002576:	e05c      	b.n	8002632 <menu+0x1082>
			}
		} else if(kapiSecimleri == 2){
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <menu+0x1058>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d113      	bne.n	80025a8 <menu+0xff8>
			if(dilSecim == 0) {
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <menu+0x1028>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <menu+0xfe4>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002588:	4a22      	ldr	r2, [pc, #136]	; (8002614 <menu+0x1064>)
 800258a:	2101      	movs	r1, #1
 800258c:	2002      	movs	r0, #2
 800258e:	f006 fba3 	bl	8008cd8 <lcd_print>
 8002592:	e04e      	b.n	8002632 <menu+0x1082>
			} else if(dilSecim == 1) {
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <menu+0x1028>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d14a      	bne.n	8002632 <menu+0x1082>
				lcd_print(2, 1, "Pltfrm door act ");
 800259c:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <menu+0x1068>)
 800259e:	2101      	movs	r1, #1
 80025a0:	2002      	movs	r0, #2
 80025a2:	f006 fb99 	bl	8008cd8 <lcd_print>
 80025a6:	e044      	b.n	8002632 <menu+0x1082>
			}
		} else if(kapiSecimleri == 3){
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <menu+0x1058>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d140      	bne.n	8002632 <menu+0x1082>
			if(dilSecim == 0) {
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <menu+0x1028>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d133      	bne.n	8002620 <menu+0x1070>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80025b8:	4a18      	ldr	r2, [pc, #96]	; (800261c <menu+0x106c>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	2002      	movs	r0, #2
 80025be:	f006 fb8b 	bl	8008cd8 <lcd_print>
 80025c2:	e036      	b.n	8002632 <menu+0x1082>
 80025c4:	20000af2 	.word	0x20000af2
 80025c8:	20000aff 	.word	0x20000aff
 80025cc:	20000a18 	.word	0x20000a18
 80025d0:	20000b18 	.word	0x20000b18
 80025d4:	20000aec 	.word	0x20000aec
 80025d8:	20000b0d 	.word	0x20000b0d
 80025dc:	0800e49c 	.word	0x0800e49c
 80025e0:	0800e4ac 	.word	0x0800e4ac
 80025e4:	20000af3 	.word	0x20000af3
 80025e8:	0800e3ec 	.word	0x0800e3ec
 80025ec:	0800e400 	.word	0x0800e400
 80025f0:	0800e44c 	.word	0x0800e44c
 80025f4:	0800e460 	.word	0x0800e460
 80025f8:	40010800 	.word	0x40010800
 80025fc:	20000b1b 	.word	0x20000b1b
 8002600:	0800e4bc 	.word	0x0800e4bc
 8002604:	0800e4d0 	.word	0x0800e4d0
 8002608:	20000af4 	.word	0x20000af4
 800260c:	0800e4e4 	.word	0x0800e4e4
 8002610:	0800e4f8 	.word	0x0800e4f8
 8002614:	0800e50c 	.word	0x0800e50c
 8002618:	0800e520 	.word	0x0800e520
 800261c:	0800e534 	.word	0x0800e534
			} else if(dilSecim == 1){
 8002620:	4b99      	ldr	r3, [pc, #612]	; (8002888 <menu+0x12d8>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d104      	bne.n	8002632 <menu+0x1082>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002628:	4a98      	ldr	r2, [pc, #608]	; (800288c <menu+0x12dc>)
 800262a:	2101      	movs	r1, #1
 800262c:	2002      	movs	r0, #2
 800262e:	f006 fb53 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002632:	2102      	movs	r1, #2
 8002634:	4896      	ldr	r0, [pc, #600]	; (8002890 <menu+0x12e0>)
 8002636:	f007 fe75 	bl	800a324 <HAL_GPIO_ReadPin>
 800263a:	4603      	mov	r3, r0
 800263c:	2b01      	cmp	r3, #1
 800263e:	d115      	bne.n	800266c <menu+0x10bc>
 8002640:	4b94      	ldr	r3, [pc, #592]	; (8002894 <menu+0x12e4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00e      	beq.n	800266c <menu+0x10bc>
			kapiSecimleri = kapiSecimleri + 1;
 800264e:	4b92      	ldr	r3, [pc, #584]	; (8002898 <menu+0x12e8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b90      	ldr	r3, [pc, #576]	; (8002898 <menu+0x12e8>)
 8002658:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800265a:	4b8f      	ldr	r3, [pc, #572]	; (8002898 <menu+0x12e8>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d902      	bls.n	8002668 <menu+0x10b8>
				kapiSecimleri = 0;
 8002662:	4b8d      	ldr	r3, [pc, #564]	; (8002898 <menu+0x12e8>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002668:	f002 fad6 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800266c:	2104      	movs	r1, #4
 800266e:	4888      	ldr	r0, [pc, #544]	; (8002890 <menu+0x12e0>)
 8002670:	f007 fe58 	bl	800a324 <HAL_GPIO_ReadPin>
 8002674:	4603      	mov	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	d115      	bne.n	80026a6 <menu+0x10f6>
 800267a:	4b86      	ldr	r3, [pc, #536]	; (8002894 <menu+0x12e4>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f083 0301 	eor.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <menu+0x10f6>
			kapiSecimleri = kapiSecimleri - 1;
 8002688:	4b83      	ldr	r3, [pc, #524]	; (8002898 <menu+0x12e8>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	3b01      	subs	r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b81      	ldr	r3, [pc, #516]	; (8002898 <menu+0x12e8>)
 8002692:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002694:	4b80      	ldr	r3, [pc, #512]	; (8002898 <menu+0x12e8>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d902      	bls.n	80026a2 <menu+0x10f2>
		   		kapiSecimleri = 3;
 800269c:	4b7e      	ldr	r3, [pc, #504]	; (8002898 <menu+0x12e8>)
 800269e:	2203      	movs	r2, #3
 80026a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026a2:	f002 fab9 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a6:	2108      	movs	r1, #8
 80026a8:	4879      	ldr	r0, [pc, #484]	; (8002890 <menu+0x12e0>)
 80026aa:	f007 fe3b 	bl	800a324 <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d118      	bne.n	80026e6 <menu+0x1136>
 80026b4:	4b77      	ldr	r3, [pc, #476]	; (8002894 <menu+0x12e4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d011      	beq.n	80026e6 <menu+0x1136>
			eepromData[7] = kapiSecimleri;
 80026c2:	4b75      	ldr	r3, [pc, #468]	; (8002898 <menu+0x12e8>)
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	4b75      	ldr	r3, [pc, #468]	; (800289c <menu+0x12ec>)
 80026c8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80026ca:	4b73      	ldr	r3, [pc, #460]	; (8002898 <menu+0x12e8>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <menu+0x1130>
				altLimit = 1;
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <menu+0x12f0>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80026d8:	4b71      	ldr	r3, [pc, #452]	; (80028a0 <menu+0x12f0>)
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	4b6f      	ldr	r3, [pc, #444]	; (800289c <menu+0x12ec>)
 80026de:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80026e0:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <menu+0x12f4>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80026e6:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <menu+0x12f8>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	f040 8092 	bne.w	8002814 <menu+0x1264>
		if(dilSecim == 0) {
 80026f0:	4b65      	ldr	r3, [pc, #404]	; (8002888 <menu+0x12d8>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d105      	bne.n	8002704 <menu+0x1154>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80026f8:	4a6c      	ldr	r2, [pc, #432]	; (80028ac <menu+0x12fc>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	2001      	movs	r0, #1
 80026fe:	f006 faeb 	bl	8008cd8 <lcd_print>
 8002702:	e008      	b.n	8002716 <menu+0x1166>
		} else if(dilSecim == 1) {
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <menu+0x12d8>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d104      	bne.n	8002716 <menu+0x1166>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800270c:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <menu+0x1300>)
 800270e:	2101      	movs	r1, #1
 8002710:	2001      	movs	r0, #1
 8002712:	f006 fae1 	bl	8008cd8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002716:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <menu+0x1304>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <menu+0x1196>
			if(dilSecim == 0) {
 800271e:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <menu+0x12d8>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <menu+0x1182>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002726:	4a64      	ldr	r2, [pc, #400]	; (80028b8 <menu+0x1308>)
 8002728:	2101      	movs	r1, #1
 800272a:	2002      	movs	r0, #2
 800272c:	f006 fad4 	bl	8008cd8 <lcd_print>
 8002730:	e020      	b.n	8002774 <menu+0x11c4>
			} else if(dilSecim == 1) {
 8002732:	4b55      	ldr	r3, [pc, #340]	; (8002888 <menu+0x12d8>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d11c      	bne.n	8002774 <menu+0x11c4>
				lcd_print(2, 1, "Door Button ESP");
 800273a:	4a60      	ldr	r2, [pc, #384]	; (80028bc <menu+0x130c>)
 800273c:	2101      	movs	r1, #1
 800273e:	2002      	movs	r0, #2
 8002740:	f006 faca 	bl	8008cd8 <lcd_print>
 8002744:	e016      	b.n	8002774 <menu+0x11c4>
			}
		} else if(kapiAcTipi == 1){
 8002746:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <menu+0x1304>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d112      	bne.n	8002774 <menu+0x11c4>
			if(dilSecim == 0){
 800274e:	4b4e      	ldr	r3, [pc, #312]	; (8002888 <menu+0x12d8>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d105      	bne.n	8002762 <menu+0x11b2>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002756:	4a5a      	ldr	r2, [pc, #360]	; (80028c0 <menu+0x1310>)
 8002758:	2101      	movs	r1, #1
 800275a:	2002      	movs	r0, #2
 800275c:	f006 fabc 	bl	8008cd8 <lcd_print>
 8002760:	e008      	b.n	8002774 <menu+0x11c4>
			} else if(dilSecim == 1){
 8002762:	4b49      	ldr	r3, [pc, #292]	; (8002888 <menu+0x12d8>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d104      	bne.n	8002774 <menu+0x11c4>
				lcd_print(2, 1, "Floor button EXT");
 800276a:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <menu+0x1314>)
 800276c:	2101      	movs	r1, #1
 800276e:	2002      	movs	r0, #2
 8002770:	f006 fab2 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002774:	2102      	movs	r1, #2
 8002776:	4846      	ldr	r0, [pc, #280]	; (8002890 <menu+0x12e0>)
 8002778:	f007 fdd4 	bl	800a324 <HAL_GPIO_ReadPin>
 800277c:	4603      	mov	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d115      	bne.n	80027ae <menu+0x11fe>
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <menu+0x12e4>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	f083 0301 	eor.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00e      	beq.n	80027ae <menu+0x11fe>
			kapiAcTipi = kapiAcTipi + 1;
 8002790:	4b48      	ldr	r3, [pc, #288]	; (80028b4 <menu+0x1304>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <menu+0x1304>)
 800279a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800279c:	4b45      	ldr	r3, [pc, #276]	; (80028b4 <menu+0x1304>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d902      	bls.n	80027aa <menu+0x11fa>
				kapiAcTipi = 0;
 80027a4:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <menu+0x1304>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027aa:	f002 fa35 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ae:	2104      	movs	r1, #4
 80027b0:	4837      	ldr	r0, [pc, #220]	; (8002890 <menu+0x12e0>)
 80027b2:	f007 fdb7 	bl	800a324 <HAL_GPIO_ReadPin>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d115      	bne.n	80027e8 <menu+0x1238>
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <menu+0x12e4>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00e      	beq.n	80027e8 <menu+0x1238>
			kapiAcTipi = kapiAcTipi - 1;
 80027ca:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <menu+0x1304>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <menu+0x1304>)
 80027d4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <menu+0x1304>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <menu+0x1234>
		   		kapiAcTipi = 1;
 80027de:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <menu+0x1304>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027e4:	f002 fa18 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e8:	2108      	movs	r1, #8
 80027ea:	4829      	ldr	r0, [pc, #164]	; (8002890 <menu+0x12e0>)
 80027ec:	f007 fd9a 	bl	800a324 <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10e      	bne.n	8002814 <menu+0x1264>
 80027f6:	4b27      	ldr	r3, [pc, #156]	; (8002894 <menu+0x12e4>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	f083 0301 	eor.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <menu+0x1264>
			eepromData[36] = kapiAcTipi;
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <menu+0x1304>)
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <menu+0x12ec>)
 800280a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800280e:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <menu+0x12f4>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002814:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <menu+0x12f8>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b09      	cmp	r3, #9
 800281a:	f040 80b9 	bne.w	8002990 <menu+0x13e0>
		if(dilSecim == 0){
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <menu+0x12d8>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <menu+0x1282>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002826:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <menu+0x1318>)
 8002828:	2101      	movs	r1, #1
 800282a:	2001      	movs	r0, #1
 800282c:	f006 fa54 	bl	8008cd8 <lcd_print>
 8002830:	e008      	b.n	8002844 <menu+0x1294>
		} else if(dilSecim == 1) {
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <menu+0x12d8>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d104      	bne.n	8002844 <menu+0x1294>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800283a:	4a24      	ldr	r2, [pc, #144]	; (80028cc <menu+0x131c>)
 800283c:	2101      	movs	r1, #1
 800283e:	2001      	movs	r0, #1
 8002840:	f006 fa4a 	bl	8008cd8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <menu+0x1320>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <menu+0x12a8>
			lcd_print(2, 1, "Prudhome        ");
 800284c:	4a21      	ldr	r2, [pc, #132]	; (80028d4 <menu+0x1324>)
 800284e:	2101      	movs	r1, #1
 8002850:	2002      	movs	r0, #2
 8002852:	f006 fa41 	bl	8008cd8 <lcd_print>
 8002856:	e04c      	b.n	80028f2 <menu+0x1342>
		} else if(kapi1Tip == 1) {
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <menu+0x1320>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d13f      	bne.n	80028e0 <menu+0x1330>
			if(dilSecim == 0){
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <menu+0x12d8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <menu+0x12c4>
				lcd_print(2, 1, "Buton kontrollu");
 8002868:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <menu+0x1328>)
 800286a:	2101      	movs	r1, #1
 800286c:	2002      	movs	r0, #2
 800286e:	f006 fa33 	bl	8008cd8 <lcd_print>
 8002872:	e03e      	b.n	80028f2 <menu+0x1342>
			} else if(dilSecim == 1) {
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <menu+0x12d8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d13a      	bne.n	80028f2 <menu+0x1342>
				lcd_print(2, 1, "Button cntrolled");
 800287c:	4a17      	ldr	r2, [pc, #92]	; (80028dc <menu+0x132c>)
 800287e:	2101      	movs	r1, #1
 8002880:	2002      	movs	r0, #2
 8002882:	f006 fa29 	bl	8008cd8 <lcd_print>
 8002886:	e034      	b.n	80028f2 <menu+0x1342>
 8002888:	20000b0d 	.word	0x20000b0d
 800288c:	0800e548 	.word	0x0800e548
 8002890:	40010800 	.word	0x40010800
 8002894:	20000b1b 	.word	0x20000b1b
 8002898:	20000af4 	.word	0x20000af4
 800289c:	20000a18 	.word	0x20000a18
 80028a0:	20000af2 	.word	0x20000af2
 80028a4:	20000b18 	.word	0x20000b18
 80028a8:	20000aec 	.word	0x20000aec
 80028ac:	0800e55c 	.word	0x0800e55c
 80028b0:	0800e570 	.word	0x0800e570
 80028b4:	20000af8 	.word	0x20000af8
 80028b8:	0800e584 	.word	0x0800e584
 80028bc:	0800e594 	.word	0x0800e594
 80028c0:	0800e5a4 	.word	0x0800e5a4
 80028c4:	0800e5b8 	.word	0x0800e5b8
 80028c8:	0800e5cc 	.word	0x0800e5cc
 80028cc:	0800e5e0 	.word	0x0800e5e0
 80028d0:	20000af5 	.word	0x20000af5
 80028d4:	0800e5f4 	.word	0x0800e5f4
 80028d8:	0800e608 	.word	0x0800e608
 80028dc:	0800e618 	.word	0x0800e618
			}
		} else if(kapi1Tip == 2) {
 80028e0:	4b8a      	ldr	r3, [pc, #552]	; (8002b0c <menu+0x155c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d104      	bne.n	80028f2 <menu+0x1342>
			lcd_print(2, 1, "Pizzato        ");
 80028e8:	4a89      	ldr	r2, [pc, #548]	; (8002b10 <menu+0x1560>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	2002      	movs	r0, #2
 80028ee:	f006 f9f3 	bl	8008cd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028f2:	2102      	movs	r1, #2
 80028f4:	4887      	ldr	r0, [pc, #540]	; (8002b14 <menu+0x1564>)
 80028f6:	f007 fd15 	bl	800a324 <HAL_GPIO_ReadPin>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d115      	bne.n	800292c <menu+0x137c>
 8002900:	4b85      	ldr	r3, [pc, #532]	; (8002b18 <menu+0x1568>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00e      	beq.n	800292c <menu+0x137c>
			kapi1Tip = kapi1Tip + 1;
 800290e:	4b7f      	ldr	r3, [pc, #508]	; (8002b0c <menu+0x155c>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b7d      	ldr	r3, [pc, #500]	; (8002b0c <menu+0x155c>)
 8002918:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800291a:	4b7c      	ldr	r3, [pc, #496]	; (8002b0c <menu+0x155c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d902      	bls.n	8002928 <menu+0x1378>
				kapi1Tip = 0;
 8002922:	4b7a      	ldr	r3, [pc, #488]	; (8002b0c <menu+0x155c>)
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002928:	f002 f976 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800292c:	2104      	movs	r1, #4
 800292e:	4879      	ldr	r0, [pc, #484]	; (8002b14 <menu+0x1564>)
 8002930:	f007 fcf8 	bl	800a324 <HAL_GPIO_ReadPin>
 8002934:	4603      	mov	r3, r0
 8002936:	2b01      	cmp	r3, #1
 8002938:	d115      	bne.n	8002966 <menu+0x13b6>
 800293a:	4b77      	ldr	r3, [pc, #476]	; (8002b18 <menu+0x1568>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	f083 0301 	eor.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00e      	beq.n	8002966 <menu+0x13b6>
			kapi1Tip = kapi1Tip - 1;
 8002948:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <menu+0x155c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	3b01      	subs	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b6e      	ldr	r3, [pc, #440]	; (8002b0c <menu+0x155c>)
 8002952:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002954:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <menu+0x155c>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d902      	bls.n	8002962 <menu+0x13b2>
		   		kapi1Tip = 2;
 800295c:	4b6b      	ldr	r3, [pc, #428]	; (8002b0c <menu+0x155c>)
 800295e:	2202      	movs	r2, #2
 8002960:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002962:	f002 f959 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002966:	2108      	movs	r1, #8
 8002968:	486a      	ldr	r0, [pc, #424]	; (8002b14 <menu+0x1564>)
 800296a:	f007 fcdb 	bl	800a324 <HAL_GPIO_ReadPin>
 800296e:	4603      	mov	r3, r0
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10d      	bne.n	8002990 <menu+0x13e0>
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <menu+0x1568>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	f083 0301 	eor.w	r3, r3, #1
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <menu+0x13e0>
			eepromData[8] = kapi1Tip;
 8002982:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <menu+0x155c>)
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <menu+0x156c>)
 8002988:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <menu+0x1570>)
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <menu+0x1574>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b0a      	cmp	r3, #10
 8002996:	d17f      	bne.n	8002a98 <menu+0x14e8>
		if(dilSecim == 0) {
 8002998:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <menu+0x1578>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <menu+0x1406>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80029a0:	4a62      	ldr	r2, [pc, #392]	; (8002b2c <menu+0x157c>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	2001      	movs	r0, #1
 80029a6:	f006 f997 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029aa:	4a61      	ldr	r2, [pc, #388]	; (8002b30 <menu+0x1580>)
 80029ac:	2101      	movs	r1, #1
 80029ae:	2002      	movs	r0, #2
 80029b0:	f006 f992 	bl	8008cd8 <lcd_print>
 80029b4:	e00d      	b.n	80029d2 <menu+0x1422>
		} else if(dilSecim == 1) {
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <menu+0x1578>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d109      	bne.n	80029d2 <menu+0x1422>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80029be:	4a5d      	ldr	r2, [pc, #372]	; (8002b34 <menu+0x1584>)
 80029c0:	2101      	movs	r1, #1
 80029c2:	2001      	movs	r0, #1
 80029c4:	f006 f988 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80029c8:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <menu+0x1588>)
 80029ca:	2101      	movs	r1, #1
 80029cc:	2002      	movs	r0, #2
 80029ce:	f006 f983 	bl	8008cd8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80029d2:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <menu+0x158c>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	220a      	movs	r2, #10
 80029d8:	4959      	ldr	r1, [pc, #356]	; (8002b40 <menu+0x1590>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f00a fd2a 	bl	800d434 <itoa>
		lcd_print(2,16,snum);
 80029e0:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <menu+0x1590>)
 80029e2:	2110      	movs	r1, #16
 80029e4:	2002      	movs	r0, #2
 80029e6:	f006 f977 	bl	8008cd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80029ea:	2102      	movs	r1, #2
 80029ec:	4849      	ldr	r0, [pc, #292]	; (8002b14 <menu+0x1564>)
 80029ee:	f007 fc99 	bl	800a324 <HAL_GPIO_ReadPin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d119      	bne.n	8002a2c <menu+0x147c>
 80029f8:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <menu+0x1568>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <menu+0x147c>
 8002a06:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <menu+0x155c>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10e      	bne.n	8002a2c <menu+0x147c>
			kapi1AcSure = kapi1AcSure + 1;
 8002a0e:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <menu+0x158c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b49      	ldr	r3, [pc, #292]	; (8002b3c <menu+0x158c>)
 8002a18:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <menu+0x158c>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d902      	bls.n	8002a28 <menu+0x1478>
				kapi1AcSure = 0;
 8002a22:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <menu+0x158c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a28:	f002 f8f6 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	4839      	ldr	r0, [pc, #228]	; (8002b14 <menu+0x1564>)
 8002a30:	f007 fc78 	bl	800a324 <HAL_GPIO_ReadPin>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d119      	bne.n	8002a6e <menu+0x14be>
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <menu+0x1568>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d012      	beq.n	8002a6e <menu+0x14be>
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <menu+0x155c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10e      	bne.n	8002a6e <menu+0x14be>
			kapi1AcSure = kapi1AcSure - 1;
 8002a50:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <menu+0x158c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <menu+0x158c>)
 8002a5a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002a5c:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <menu+0x158c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d902      	bls.n	8002a6a <menu+0x14ba>
		   		kapi1AcSure = 5;
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <menu+0x158c>)
 8002a66:	2205      	movs	r2, #5
 8002a68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a6a:	f002 f8d5 	bl	8004c18 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a6e:	2108      	movs	r1, #8
 8002a70:	4828      	ldr	r0, [pc, #160]	; (8002b14 <menu+0x1564>)
 8002a72:	f007 fc57 	bl	800a324 <HAL_GPIO_ReadPin>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10d      	bne.n	8002a98 <menu+0x14e8>
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <menu+0x1568>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <menu+0x14e8>
			eepromData[9] = kapi1AcSure;
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <menu+0x158c>)
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <menu+0x156c>)
 8002a90:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <menu+0x1570>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002a98:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <menu+0x1574>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b0b      	cmp	r3, #11
 8002a9e:	f040 80b5 	bne.w	8002c0c <menu+0x165c>
		if(dilSecim == 0) {
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <menu+0x1578>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <menu+0x1506>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002aaa:	4a26      	ldr	r2, [pc, #152]	; (8002b44 <menu+0x1594>)
 8002aac:	2101      	movs	r1, #1
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f006 f912 	bl	8008cd8 <lcd_print>
 8002ab4:	e008      	b.n	8002ac8 <menu+0x1518>
		} else if(dilSecim == 1) {
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <menu+0x1578>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d104      	bne.n	8002ac8 <menu+0x1518>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <menu+0x1598>)
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f006 f908 	bl	8008cd8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002ac8:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <menu+0x159c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <menu+0x152c>
			lcd_print(2, 1, "Prudhome        ");
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <menu+0x15a0>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f006 f8ff 	bl	8008cd8 <lcd_print>
 8002ada:	e048      	b.n	8002b6e <menu+0x15be>
		} else if(kapi2Tip == 1) {
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <menu+0x159c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d13b      	bne.n	8002b5c <menu+0x15ac>
			if(dilSecim == 0) {
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <menu+0x1578>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <menu+0x1548>
				lcd_print(2, 1, "Buton kontrollu");
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <menu+0x15a4>)
 8002aee:	2101      	movs	r1, #1
 8002af0:	2002      	movs	r0, #2
 8002af2:	f006 f8f1 	bl	8008cd8 <lcd_print>
 8002af6:	e03a      	b.n	8002b6e <menu+0x15be>
			} else if(dilSecim == 1) {
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <menu+0x1578>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d136      	bne.n	8002b6e <menu+0x15be>
				lcd_print(2, 1, "Button cntrolled");
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <menu+0x15a8>)
 8002b02:	2101      	movs	r1, #1
 8002b04:	2002      	movs	r0, #2
 8002b06:	f006 f8e7 	bl	8008cd8 <lcd_print>
 8002b0a:	e030      	b.n	8002b6e <menu+0x15be>
 8002b0c:	20000af5 	.word	0x20000af5
 8002b10:	0800e62c 	.word	0x0800e62c
 8002b14:	40010800 	.word	0x40010800
 8002b18:	20000b1b 	.word	0x20000b1b
 8002b1c:	20000a18 	.word	0x20000a18
 8002b20:	20000b18 	.word	0x20000b18
 8002b24:	20000aec 	.word	0x20000aec
 8002b28:	20000b0d 	.word	0x20000b0d
 8002b2c:	0800e63c 	.word	0x0800e63c
 8002b30:	0800e650 	.word	0x0800e650
 8002b34:	0800e660 	.word	0x0800e660
 8002b38:	0800e674 	.word	0x0800e674
 8002b3c:	20000b05 	.word	0x20000b05
 8002b40:	20000a88 	.word	0x20000a88
 8002b44:	0800e684 	.word	0x0800e684
 8002b48:	0800e698 	.word	0x0800e698
 8002b4c:	20000af6 	.word	0x20000af6
 8002b50:	0800e5f4 	.word	0x0800e5f4
 8002b54:	0800e608 	.word	0x0800e608
 8002b58:	0800e618 	.word	0x0800e618
			}
		} else if(kapi2Tip == 2) {
 8002b5c:	4b8a      	ldr	r3, [pc, #552]	; (8002d88 <menu+0x17d8>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d104      	bne.n	8002b6e <menu+0x15be>
			lcd_print(2, 1, "Pizzato        ");
 8002b64:	4a89      	ldr	r2, [pc, #548]	; (8002d8c <menu+0x17dc>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f006 f8b5 	bl	8008cd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4887      	ldr	r0, [pc, #540]	; (8002d90 <menu+0x17e0>)
 8002b72:	f007 fbd7 	bl	800a324 <HAL_GPIO_ReadPin>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d115      	bne.n	8002ba8 <menu+0x15f8>
 8002b7c:	4b85      	ldr	r3, [pc, #532]	; (8002d94 <menu+0x17e4>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	f083 0301 	eor.w	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00e      	beq.n	8002ba8 <menu+0x15f8>
			kapi2Tip = kapi2Tip + 1;
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	; (8002d88 <menu+0x17d8>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b7d      	ldr	r3, [pc, #500]	; (8002d88 <menu+0x17d8>)
 8002b94:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002b96:	4b7c      	ldr	r3, [pc, #496]	; (8002d88 <menu+0x17d8>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d902      	bls.n	8002ba4 <menu+0x15f4>
				kapi2Tip = 0;
 8002b9e:	4b7a      	ldr	r3, [pc, #488]	; (8002d88 <menu+0x17d8>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ba4:	f002 f838 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba8:	2104      	movs	r1, #4
 8002baa:	4879      	ldr	r0, [pc, #484]	; (8002d90 <menu+0x17e0>)
 8002bac:	f007 fbba 	bl	800a324 <HAL_GPIO_ReadPin>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d115      	bne.n	8002be2 <menu+0x1632>
 8002bb6:	4b77      	ldr	r3, [pc, #476]	; (8002d94 <menu+0x17e4>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	f083 0301 	eor.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <menu+0x1632>
			kapi2Tip = kapi2Tip - 1;
 8002bc4:	4b70      	ldr	r3, [pc, #448]	; (8002d88 <menu+0x17d8>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b6e      	ldr	r3, [pc, #440]	; (8002d88 <menu+0x17d8>)
 8002bce:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	; (8002d88 <menu+0x17d8>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d902      	bls.n	8002bde <menu+0x162e>
		   		kapi2Tip = 2;
 8002bd8:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <menu+0x17d8>)
 8002bda:	2202      	movs	r2, #2
 8002bdc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bde:	f002 f81b 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be2:	2108      	movs	r1, #8
 8002be4:	486a      	ldr	r0, [pc, #424]	; (8002d90 <menu+0x17e0>)
 8002be6:	f007 fb9d 	bl	800a324 <HAL_GPIO_ReadPin>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10d      	bne.n	8002c0c <menu+0x165c>
 8002bf0:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <menu+0x17e4>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	f083 0301 	eor.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <menu+0x165c>
			eepromData[10] = kapi2Tip;
 8002bfe:	4b62      	ldr	r3, [pc, #392]	; (8002d88 <menu+0x17d8>)
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	4b65      	ldr	r3, [pc, #404]	; (8002d98 <menu+0x17e8>)
 8002c04:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002c06:	4b65      	ldr	r3, [pc, #404]	; (8002d9c <menu+0x17ec>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002c0c:	4b64      	ldr	r3, [pc, #400]	; (8002da0 <menu+0x17f0>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d17f      	bne.n	8002d14 <menu+0x1764>
		if(dilSecim == 0) {
 8002c14:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <menu+0x17f4>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <menu+0x1682>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002c1c:	4a62      	ldr	r2, [pc, #392]	; (8002da8 <menu+0x17f8>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2001      	movs	r0, #1
 8002c22:	f006 f859 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c26:	4a61      	ldr	r2, [pc, #388]	; (8002dac <menu+0x17fc>)
 8002c28:	2101      	movs	r1, #1
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	f006 f854 	bl	8008cd8 <lcd_print>
 8002c30:	e00d      	b.n	8002c4e <menu+0x169e>
		} else if(dilSecim == 1) {
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <menu+0x17f4>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d109      	bne.n	8002c4e <menu+0x169e>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002c3a:	4a5d      	ldr	r2, [pc, #372]	; (8002db0 <menu+0x1800>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f006 f84a 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c44:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <menu+0x1804>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f006 f845 	bl	8008cd8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <menu+0x1808>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	220a      	movs	r2, #10
 8002c54:	4959      	ldr	r1, [pc, #356]	; (8002dbc <menu+0x180c>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f00a fbec 	bl	800d434 <itoa>
		lcd_print(2,16,snum);
 8002c5c:	4a57      	ldr	r2, [pc, #348]	; (8002dbc <menu+0x180c>)
 8002c5e:	2110      	movs	r1, #16
 8002c60:	2002      	movs	r0, #2
 8002c62:	f006 f839 	bl	8008cd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002c66:	2102      	movs	r1, #2
 8002c68:	4849      	ldr	r0, [pc, #292]	; (8002d90 <menu+0x17e0>)
 8002c6a:	f007 fb5b 	bl	800a324 <HAL_GPIO_ReadPin>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d119      	bne.n	8002ca8 <menu+0x16f8>
 8002c74:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <menu+0x17e4>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	f083 0301 	eor.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d012      	beq.n	8002ca8 <menu+0x16f8>
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <menu+0x17d8>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10e      	bne.n	8002ca8 <menu+0x16f8>
			kapi2AcSure = kapi2AcSure + 1;
 8002c8a:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <menu+0x1808>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <menu+0x1808>)
 8002c94:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002c96:	4b48      	ldr	r3, [pc, #288]	; (8002db8 <menu+0x1808>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d902      	bls.n	8002ca4 <menu+0x16f4>
				kapi2AcSure = 0;
 8002c9e:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <menu+0x1808>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ca4:	f001 ffb8 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ca8:	2104      	movs	r1, #4
 8002caa:	4839      	ldr	r0, [pc, #228]	; (8002d90 <menu+0x17e0>)
 8002cac:	f007 fb3a 	bl	800a324 <HAL_GPIO_ReadPin>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d119      	bne.n	8002cea <menu+0x173a>
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <menu+0x17e4>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <menu+0x173a>
 8002cc4:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <menu+0x17d8>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10e      	bne.n	8002cea <menu+0x173a>
			kapi2AcSure = kapi2AcSure - 1;
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <menu+0x1808>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <menu+0x1808>)
 8002cd6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <menu+0x1808>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d902      	bls.n	8002ce6 <menu+0x1736>
		   		kapi2AcSure = 5;
 8002ce0:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <menu+0x1808>)
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ce6:	f001 ff97 	bl	8004c18 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cea:	2108      	movs	r1, #8
 8002cec:	4828      	ldr	r0, [pc, #160]	; (8002d90 <menu+0x17e0>)
 8002cee:	f007 fb19 	bl	800a324 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10d      	bne.n	8002d14 <menu+0x1764>
 8002cf8:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <menu+0x17e4>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <menu+0x1764>
			eepromData[11] = kapi2AcSure;
 8002d06:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <menu+0x1808>)
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <menu+0x17e8>)
 8002d0c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <menu+0x17ec>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <menu+0x17f0>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b0d      	cmp	r3, #13
 8002d1a:	f040 80b5 	bne.w	8002e88 <menu+0x18d8>
		if(dilSecim == 0) {
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <menu+0x17f4>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d105      	bne.n	8002d32 <menu+0x1782>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002d26:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <menu+0x1810>)
 8002d28:	2101      	movs	r1, #1
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f005 ffd4 	bl	8008cd8 <lcd_print>
 8002d30:	e008      	b.n	8002d44 <menu+0x1794>
		} else if(dilSecim == 1){
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <menu+0x17f4>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d104      	bne.n	8002d44 <menu+0x1794>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <menu+0x1814>)
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f005 ffca 	bl	8008cd8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002d44:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <menu+0x1818>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <menu+0x17a8>
			lcd_print(2, 1, "Prudhome        ");
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <menu+0x181c>)
 8002d4e:	2101      	movs	r1, #1
 8002d50:	2002      	movs	r0, #2
 8002d52:	f005 ffc1 	bl	8008cd8 <lcd_print>
 8002d56:	e048      	b.n	8002dea <menu+0x183a>
		} else if(kapitablaTip == 1) {
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <menu+0x1818>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d13b      	bne.n	8002dd8 <menu+0x1828>
			if(dilSecim == 0) {
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <menu+0x17f4>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <menu+0x17c4>
				lcd_print(2, 1, "Buton kontrollu");
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <menu+0x1820>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2002      	movs	r0, #2
 8002d6e:	f005 ffb3 	bl	8008cd8 <lcd_print>
 8002d72:	e03a      	b.n	8002dea <menu+0x183a>
			} else if(dilSecim == 1) {
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <menu+0x17f4>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d136      	bne.n	8002dea <menu+0x183a>
				lcd_print(2, 1, "Button cntrolled");
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <menu+0x1824>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2002      	movs	r0, #2
 8002d82:	f005 ffa9 	bl	8008cd8 <lcd_print>
 8002d86:	e030      	b.n	8002dea <menu+0x183a>
 8002d88:	20000af6 	.word	0x20000af6
 8002d8c:	0800e62c 	.word	0x0800e62c
 8002d90:	40010800 	.word	0x40010800
 8002d94:	20000b1b 	.word	0x20000b1b
 8002d98:	20000a18 	.word	0x20000a18
 8002d9c:	20000b18 	.word	0x20000b18
 8002da0:	20000aec 	.word	0x20000aec
 8002da4:	20000b0d 	.word	0x20000b0d
 8002da8:	0800e6ac 	.word	0x0800e6ac
 8002dac:	0800e650 	.word	0x0800e650
 8002db0:	0800e6c0 	.word	0x0800e6c0
 8002db4:	0800e674 	.word	0x0800e674
 8002db8:	20000b06 	.word	0x20000b06
 8002dbc:	20000a88 	.word	0x20000a88
 8002dc0:	0800e6d4 	.word	0x0800e6d4
 8002dc4:	0800e6e8 	.word	0x0800e6e8
 8002dc8:	20000af7 	.word	0x20000af7
 8002dcc:	0800e5f4 	.word	0x0800e5f4
 8002dd0:	0800e608 	.word	0x0800e608
 8002dd4:	0800e618 	.word	0x0800e618
			}
		} else if(kapitablaTip == 2) {
 8002dd8:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <menu+0x1998>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d104      	bne.n	8002dea <menu+0x183a>
			lcd_print(2, 1, "Pizzato        ");
 8002de0:	4a5a      	ldr	r2, [pc, #360]	; (8002f4c <menu+0x199c>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2002      	movs	r0, #2
 8002de6:	f005 ff77 	bl	8008cd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dea:	2102      	movs	r1, #2
 8002dec:	4858      	ldr	r0, [pc, #352]	; (8002f50 <menu+0x19a0>)
 8002dee:	f007 fa99 	bl	800a324 <HAL_GPIO_ReadPin>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d115      	bne.n	8002e24 <menu+0x1874>
 8002df8:	4b56      	ldr	r3, [pc, #344]	; (8002f54 <menu+0x19a4>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00e      	beq.n	8002e24 <menu+0x1874>
			kapitablaTip = kapitablaTip + 1;
 8002e06:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <menu+0x1998>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <menu+0x1998>)
 8002e10:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002e12:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <menu+0x1998>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d902      	bls.n	8002e20 <menu+0x1870>
				kapitablaTip = 0;
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <menu+0x1998>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e20:	f001 fefa 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e24:	2104      	movs	r1, #4
 8002e26:	484a      	ldr	r0, [pc, #296]	; (8002f50 <menu+0x19a0>)
 8002e28:	f007 fa7c 	bl	800a324 <HAL_GPIO_ReadPin>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d115      	bne.n	8002e5e <menu+0x18ae>
 8002e32:	4b48      	ldr	r3, [pc, #288]	; (8002f54 <menu+0x19a4>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00e      	beq.n	8002e5e <menu+0x18ae>
			kapitablaTip = kapitablaTip - 1;
 8002e40:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <menu+0x1998>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <menu+0x1998>)
 8002e4a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002e4c:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <menu+0x1998>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d902      	bls.n	8002e5a <menu+0x18aa>
		   		kapitablaTip = 2;
 8002e54:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <menu+0x1998>)
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e5a:	f001 fedd 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e5e:	2108      	movs	r1, #8
 8002e60:	483b      	ldr	r0, [pc, #236]	; (8002f50 <menu+0x19a0>)
 8002e62:	f007 fa5f 	bl	800a324 <HAL_GPIO_ReadPin>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10d      	bne.n	8002e88 <menu+0x18d8>
 8002e6c:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <menu+0x19a4>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	f083 0301 	eor.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <menu+0x18d8>
			eepromData[12] = kapitablaTip;
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <menu+0x1998>)
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <menu+0x19a8>)
 8002e80:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <menu+0x19ac>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002e88:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <menu+0x19b0>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b0e      	cmp	r3, #14
 8002e8e:	f040 80f2 	bne.w	8003076 <menu+0x1ac6>
		if(dilSecim == 0) {
 8002e92:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <menu+0x19b4>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <menu+0x18f6>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002e9a:	4a33      	ldr	r2, [pc, #204]	; (8002f68 <menu+0x19b8>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f005 ff1a 	bl	8008cd8 <lcd_print>
 8002ea4:	e008      	b.n	8002eb8 <menu+0x1908>
		} else if(dilSecim == 1) {
 8002ea6:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <menu+0x19b4>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d104      	bne.n	8002eb8 <menu+0x1908>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <menu+0x19bc>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f005 ff10 	bl	8008cd8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <menu+0x19c0>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d113      	bne.n	8002ee8 <menu+0x1938>
			if(dilSecim == 0){
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <menu+0x19b4>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <menu+0x1924>
				lcd_print(2, 1, "1. Katta ac    ");
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <menu+0x19c4>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f005 ff03 	bl	8008cd8 <lcd_print>
 8002ed2:	e071      	b.n	8002fb8 <menu+0x1a08>
			} else if(dilSecim == 1) {
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <menu+0x19b4>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d16d      	bne.n	8002fb8 <menu+0x1a08>
				lcd_print(2, 1, "1. Floor open  ");
 8002edc:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <menu+0x19c8>)
 8002ede:	2101      	movs	r1, #1
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	f005 fef9 	bl	8008cd8 <lcd_print>
 8002ee6:	e067      	b.n	8002fb8 <menu+0x1a08>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <menu+0x19c0>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d112      	bne.n	8002f16 <menu+0x1966>
			if(dilSecim == 0){
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <menu+0x19b4>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <menu+0x1952>
				lcd_print(2, 1, "2. Katta ac    ");
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <menu+0x19cc>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2002      	movs	r0, #2
 8002efe:	f005 feeb 	bl	8008cd8 <lcd_print>
			}
			if(dilSecim == 1){
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <menu+0x19b4>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d156      	bne.n	8002fb8 <menu+0x1a08>
				lcd_print(2, 1, "2. Floor open  ");
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <menu+0x19d0>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f005 fee2 	bl	8008cd8 <lcd_print>
 8002f14:	e050      	b.n	8002fb8 <menu+0x1a08>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <menu+0x19c0>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d136      	bne.n	8002f8c <menu+0x19dc>
			if(dilSecim == 0){
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <menu+0x19b4>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <menu+0x1982>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002f26:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <menu+0x19d4>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	f005 fed4 	bl	8008cd8 <lcd_print>
 8002f30:	e042      	b.n	8002fb8 <menu+0x1a08>
			} else if(dilSecim == 1) {
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <menu+0x19b4>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d13e      	bne.n	8002fb8 <menu+0x1a08>
				lcd_print(2, 1, "1.+2. Floor open");
 8002f3a:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <menu+0x19d8>)
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f005 feca 	bl	8008cd8 <lcd_print>
 8002f44:	e038      	b.n	8002fb8 <menu+0x1a08>
 8002f46:	bf00      	nop
 8002f48:	20000af7 	.word	0x20000af7
 8002f4c:	0800e62c 	.word	0x0800e62c
 8002f50:	40010800 	.word	0x40010800
 8002f54:	20000b1b 	.word	0x20000b1b
 8002f58:	20000a18 	.word	0x20000a18
 8002f5c:	20000b18 	.word	0x20000b18
 8002f60:	20000aec 	.word	0x20000aec
 8002f64:	20000b0d 	.word	0x20000b0d
 8002f68:	0800e6fc 	.word	0x0800e6fc
 8002f6c:	0800e710 	.word	0x0800e710
 8002f70:	20000af9 	.word	0x20000af9
 8002f74:	0800e724 	.word	0x0800e724
 8002f78:	0800e734 	.word	0x0800e734
 8002f7c:	0800e744 	.word	0x0800e744
 8002f80:	0800e754 	.word	0x0800e754
 8002f84:	0800e764 	.word	0x0800e764
 8002f88:	0800e778 	.word	0x0800e778
			}
		} else if(kapiTablaAcKonum == 3) {
 8002f8c:	4b9b      	ldr	r3, [pc, #620]	; (80031fc <menu+0x1c4c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d111      	bne.n	8002fb8 <menu+0x1a08>
			if(dilSecim == 0) {
 8002f94:	4b9a      	ldr	r3, [pc, #616]	; (8003200 <menu+0x1c50>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <menu+0x19f6>
				lcd_print(2, 1, "Pasif           ");
 8002f9c:	4a99      	ldr	r2, [pc, #612]	; (8003204 <menu+0x1c54>)
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	2002      	movs	r0, #2
 8002fa2:	f005 fe99 	bl	8008cd8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002fa6:	4b96      	ldr	r3, [pc, #600]	; (8003200 <menu+0x1c50>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d104      	bne.n	8002fb8 <menu+0x1a08>
				lcd_print(2, 1, "Passive         ");
 8002fae:	4a96      	ldr	r2, [pc, #600]	; (8003208 <menu+0x1c58>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f005 fe90 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4894      	ldr	r0, [pc, #592]	; (800320c <menu+0x1c5c>)
 8002fbc:	f007 f9b2 	bl	800a324 <HAL_GPIO_ReadPin>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d115      	bne.n	8002ff2 <menu+0x1a42>
 8002fc6:	4b92      	ldr	r3, [pc, #584]	; (8003210 <menu+0x1c60>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	f083 0301 	eor.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <menu+0x1a42>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002fd4:	4b89      	ldr	r3, [pc, #548]	; (80031fc <menu+0x1c4c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	4b87      	ldr	r3, [pc, #540]	; (80031fc <menu+0x1c4c>)
 8002fde:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002fe0:	4b86      	ldr	r3, [pc, #536]	; (80031fc <menu+0x1c4c>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d902      	bls.n	8002fee <menu+0x1a3e>
				kapiTablaAcKonum = 0;
 8002fe8:	4b84      	ldr	r3, [pc, #528]	; (80031fc <menu+0x1c4c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fee:	f001 fe13 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	4885      	ldr	r0, [pc, #532]	; (800320c <menu+0x1c5c>)
 8002ff6:	f007 f995 	bl	800a324 <HAL_GPIO_ReadPin>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d115      	bne.n	800302c <menu+0x1a7c>
 8003000:	4b83      	ldr	r3, [pc, #524]	; (8003210 <menu+0x1c60>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	f083 0301 	eor.w	r3, r3, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <menu+0x1a7c>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800300e:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <menu+0x1c4c>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	3b01      	subs	r3, #1
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4b79      	ldr	r3, [pc, #484]	; (80031fc <menu+0x1c4c>)
 8003018:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800301a:	4b78      	ldr	r3, [pc, #480]	; (80031fc <menu+0x1c4c>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d902      	bls.n	8003028 <menu+0x1a78>
		   		kapiTablaAcKonum = 2;
 8003022:	4b76      	ldr	r3, [pc, #472]	; (80031fc <menu+0x1c4c>)
 8003024:	2202      	movs	r2, #2
 8003026:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003028:	f001 fdf6 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800302c:	2108      	movs	r1, #8
 800302e:	4877      	ldr	r0, [pc, #476]	; (800320c <menu+0x1c5c>)
 8003030:	f007 f978 	bl	800a324 <HAL_GPIO_ReadPin>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	d11d      	bne.n	8003076 <menu+0x1ac6>
 800303a:	4b75      	ldr	r3, [pc, #468]	; (8003210 <menu+0x1c60>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	f083 0301 	eor.w	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d016      	beq.n	8003076 <menu+0x1ac6>
			eepromData[34] = kapiTablaAcKonum;
 8003048:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <menu+0x1c4c>)
 800304a:	781a      	ldrb	r2, [r3, #0]
 800304c:	4b71      	ldr	r3, [pc, #452]	; (8003214 <menu+0x1c64>)
 800304e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8003052:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <menu+0x1c4c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <menu+0x1ab2>
 800305a:	4b68      	ldr	r3, [pc, #416]	; (80031fc <menu+0x1c4c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d106      	bne.n	8003070 <menu+0x1ac0>
				altLimit = 1;
 8003062:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <menu+0x1c68>)
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003068:	4b6b      	ldr	r3, [pc, #428]	; (8003218 <menu+0x1c68>)
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	4b69      	ldr	r3, [pc, #420]	; (8003214 <menu+0x1c64>)
 800306e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <menu+0x1c6c>)
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8003076:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <menu+0x1c70>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d17f      	bne.n	800317e <menu+0x1bce>
		if(dilSecim == 0) {
 800307e:	4b60      	ldr	r3, [pc, #384]	; (8003200 <menu+0x1c50>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <menu+0x1aec>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8003086:	4a67      	ldr	r2, [pc, #412]	; (8003224 <menu+0x1c74>)
 8003088:	2101      	movs	r1, #1
 800308a:	2001      	movs	r0, #1
 800308c:	f005 fe24 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003090:	4a65      	ldr	r2, [pc, #404]	; (8003228 <menu+0x1c78>)
 8003092:	2101      	movs	r1, #1
 8003094:	2002      	movs	r0, #2
 8003096:	f005 fe1f 	bl	8008cd8 <lcd_print>
 800309a:	e00d      	b.n	80030b8 <menu+0x1b08>
		} else if(dilSecim == 1) {
 800309c:	4b58      	ldr	r3, [pc, #352]	; (8003200 <menu+0x1c50>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d109      	bne.n	80030b8 <menu+0x1b08>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80030a4:	4a61      	ldr	r2, [pc, #388]	; (800322c <menu+0x1c7c>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	2001      	movs	r0, #1
 80030aa:	f005 fe15 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80030ae:	4a60      	ldr	r2, [pc, #384]	; (8003230 <menu+0x1c80>)
 80030b0:	2101      	movs	r1, #1
 80030b2:	2002      	movs	r0, #2
 80030b4:	f005 fe10 	bl	8008cd8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80030b8:	4b5e      	ldr	r3, [pc, #376]	; (8003234 <menu+0x1c84>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	220a      	movs	r2, #10
 80030be:	495e      	ldr	r1, [pc, #376]	; (8003238 <menu+0x1c88>)
 80030c0:	4618      	mov	r0, r3
 80030c2:	f00a f9b7 	bl	800d434 <itoa>
		lcd_print(2,16,snum);
 80030c6:	4a5c      	ldr	r2, [pc, #368]	; (8003238 <menu+0x1c88>)
 80030c8:	2110      	movs	r1, #16
 80030ca:	2002      	movs	r0, #2
 80030cc:	f005 fe04 	bl	8008cd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80030d0:	2102      	movs	r1, #2
 80030d2:	484e      	ldr	r0, [pc, #312]	; (800320c <menu+0x1c5c>)
 80030d4:	f007 f926 	bl	800a324 <HAL_GPIO_ReadPin>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d119      	bne.n	8003112 <menu+0x1b62>
 80030de:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <menu+0x1c60>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	f083 0301 	eor.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d012      	beq.n	8003112 <menu+0x1b62>
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <menu+0x1c8c>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10e      	bne.n	8003112 <menu+0x1b62>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80030f4:	4b4f      	ldr	r3, [pc, #316]	; (8003234 <menu+0x1c84>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <menu+0x1c84>)
 80030fe:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003100:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <menu+0x1c84>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b05      	cmp	r3, #5
 8003106:	d902      	bls.n	800310e <menu+0x1b5e>
				kapiTablaAcSure = 0;
 8003108:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <menu+0x1c84>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800310e:	f001 fd83 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003112:	2104      	movs	r1, #4
 8003114:	483d      	ldr	r0, [pc, #244]	; (800320c <menu+0x1c5c>)
 8003116:	f007 f905 	bl	800a324 <HAL_GPIO_ReadPin>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d119      	bne.n	8003154 <menu+0x1ba4>
 8003120:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <menu+0x1c60>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <menu+0x1ba4>
 800312e:	4b43      	ldr	r3, [pc, #268]	; (800323c <menu+0x1c8c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <menu+0x1ba4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003136:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <menu+0x1c84>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	3b01      	subs	r3, #1
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <menu+0x1c84>)
 8003140:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003142:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <menu+0x1c84>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <menu+0x1ba0>
		   		kapiTablaAcSure = 5;
 800314a:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <menu+0x1c84>)
 800314c:	2205      	movs	r2, #5
 800314e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003150:	f001 fd62 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003154:	2108      	movs	r1, #8
 8003156:	482d      	ldr	r0, [pc, #180]	; (800320c <menu+0x1c5c>)
 8003158:	f007 f8e4 	bl	800a324 <HAL_GPIO_ReadPin>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d10d      	bne.n	800317e <menu+0x1bce>
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <menu+0x1c60>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	f083 0301 	eor.w	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <menu+0x1bce>
			eepromData[13] = kapiTablaAcSure;
 8003170:	4b30      	ldr	r3, [pc, #192]	; (8003234 <menu+0x1c84>)
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <menu+0x1c64>)
 8003176:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <menu+0x1c6c>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <menu+0x1c70>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b10      	cmp	r3, #16
 8003184:	f040 80bc 	bne.w	8003300 <menu+0x1d50>
		if(dilSecim == 0) {
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <menu+0x1c50>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <menu+0x1bec>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <menu+0x1c90>)
 8003192:	2101      	movs	r1, #1
 8003194:	2001      	movs	r0, #1
 8003196:	f005 fd9f 	bl	8008cd8 <lcd_print>
 800319a:	e008      	b.n	80031ae <menu+0x1bfe>
		} else if(dilSecim == 1) {
 800319c:	4b18      	ldr	r3, [pc, #96]	; (8003200 <menu+0x1c50>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d104      	bne.n	80031ae <menu+0x1bfe>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80031a4:	4a27      	ldr	r2, [pc, #156]	; (8003244 <menu+0x1c94>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2001      	movs	r0, #1
 80031aa:	f005 fd95 	bl	8008cd8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <menu+0x1c98>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d113      	bne.n	80031de <menu+0x1c2e>
			if(dilSecim == 0) {
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <menu+0x1c50>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <menu+0x1c1a>
				lcd_print(2, 1, "Pasif           ");
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <menu+0x1c54>)
 80031c0:	2101      	movs	r1, #1
 80031c2:	2002      	movs	r0, #2
 80031c4:	f005 fd88 	bl	8008cd8 <lcd_print>
 80031c8:	e04b      	b.n	8003262 <menu+0x1cb2>
			} else if(dilSecim == 1) {
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <menu+0x1c50>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d147      	bne.n	8003262 <menu+0x1cb2>
				lcd_print(2, 1, "Passive         ");
 80031d2:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <menu+0x1c58>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	2002      	movs	r0, #2
 80031d8:	f005 fd7e 	bl	8008cd8 <lcd_print>
 80031dc:	e041      	b.n	8003262 <menu+0x1cb2>
			}
		} else if(yukariYavasLimit == 1) {
 80031de:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <menu+0x1c98>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d13d      	bne.n	8003262 <menu+0x1cb2>
			if(dilSecim == 0) {
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <menu+0x1c50>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d130      	bne.n	8003250 <menu+0x1ca0>
				lcd_print(2, 1, "Aktif           ");
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <menu+0x1c9c>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	2002      	movs	r0, #2
 80031f4:	f005 fd70 	bl	8008cd8 <lcd_print>
 80031f8:	e033      	b.n	8003262 <menu+0x1cb2>
 80031fa:	bf00      	nop
 80031fc:	20000af9 	.word	0x20000af9
 8003200:	20000b0d 	.word	0x20000b0d
 8003204:	0800e3ec 	.word	0x0800e3ec
 8003208:	0800e400 	.word	0x0800e400
 800320c:	40010800 	.word	0x40010800
 8003210:	20000b1b 	.word	0x20000b1b
 8003214:	20000a18 	.word	0x20000a18
 8003218:	20000af2 	.word	0x20000af2
 800321c:	20000b18 	.word	0x20000b18
 8003220:	20000aec 	.word	0x20000aec
 8003224:	0800e78c 	.word	0x0800e78c
 8003228:	0800e650 	.word	0x0800e650
 800322c:	0800e7a0 	.word	0x0800e7a0
 8003230:	0800e674 	.word	0x0800e674
 8003234:	20000b07 	.word	0x20000b07
 8003238:	20000a88 	.word	0x20000a88
 800323c:	20000af7 	.word	0x20000af7
 8003240:	0800e7b4 	.word	0x0800e7b4
 8003244:	0800e7c8 	.word	0x0800e7c8
 8003248:	20000afa 	.word	0x20000afa
 800324c:	0800e44c 	.word	0x0800e44c
			} else if(dilSecim == 1) {
 8003250:	4b99      	ldr	r3, [pc, #612]	; (80034b8 <menu+0x1f08>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d104      	bne.n	8003262 <menu+0x1cb2>
				lcd_print(2, 1, "Active          ");
 8003258:	4a98      	ldr	r2, [pc, #608]	; (80034bc <menu+0x1f0c>)
 800325a:	2101      	movs	r1, #1
 800325c:	2002      	movs	r0, #2
 800325e:	f005 fd3b 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003262:	2102      	movs	r1, #2
 8003264:	4896      	ldr	r0, [pc, #600]	; (80034c0 <menu+0x1f10>)
 8003266:	f007 f85d 	bl	800a324 <HAL_GPIO_ReadPin>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	d115      	bne.n	800329c <menu+0x1cec>
 8003270:	4b94      	ldr	r3, [pc, #592]	; (80034c4 <menu+0x1f14>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f083 0301 	eor.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <menu+0x1cec>
			yukariYavasLimit = yukariYavasLimit + 1;
 800327e:	4b92      	ldr	r3, [pc, #584]	; (80034c8 <menu+0x1f18>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4b90      	ldr	r3, [pc, #576]	; (80034c8 <menu+0x1f18>)
 8003288:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800328a:	4b8f      	ldr	r3, [pc, #572]	; (80034c8 <menu+0x1f18>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d902      	bls.n	8003298 <menu+0x1ce8>
				yukariYavasLimit = 0;
 8003292:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <menu+0x1f18>)
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003298:	f001 fcbe 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800329c:	2104      	movs	r1, #4
 800329e:	4888      	ldr	r0, [pc, #544]	; (80034c0 <menu+0x1f10>)
 80032a0:	f007 f840 	bl	800a324 <HAL_GPIO_ReadPin>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d115      	bne.n	80032d6 <menu+0x1d26>
 80032aa:	4b86      	ldr	r3, [pc, #536]	; (80034c4 <menu+0x1f14>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	f083 0301 	eor.w	r3, r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <menu+0x1d26>
			yukariYavasLimit = yukariYavasLimit - 1;
 80032b8:	4b83      	ldr	r3, [pc, #524]	; (80034c8 <menu+0x1f18>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	3b01      	subs	r3, #1
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <menu+0x1f18>)
 80032c2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80032c4:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <menu+0x1f18>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <menu+0x1d22>
		   		yukariYavasLimit = 1;
 80032cc:	4b7e      	ldr	r3, [pc, #504]	; (80034c8 <menu+0x1f18>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032d2:	f001 fca1 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032d6:	2108      	movs	r1, #8
 80032d8:	4879      	ldr	r0, [pc, #484]	; (80034c0 <menu+0x1f10>)
 80032da:	f007 f823 	bl	800a324 <HAL_GPIO_ReadPin>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10d      	bne.n	8003300 <menu+0x1d50>
 80032e4:	4b77      	ldr	r3, [pc, #476]	; (80034c4 <menu+0x1f14>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f083 0301 	eor.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <menu+0x1d50>
			eepromData[14] = yukariYavasLimit;
 80032f2:	4b75      	ldr	r3, [pc, #468]	; (80034c8 <menu+0x1f18>)
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	4b75      	ldr	r3, [pc, #468]	; (80034cc <menu+0x1f1c>)
 80032f8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80032fa:	4b75      	ldr	r3, [pc, #468]	; (80034d0 <menu+0x1f20>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003300:	4b74      	ldr	r3, [pc, #464]	; (80034d4 <menu+0x1f24>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b11      	cmp	r3, #17
 8003306:	f040 80c3 	bne.w	8003490 <menu+0x1ee0>
		if(dilSecim == 0) {
 800330a:	4b6b      	ldr	r3, [pc, #428]	; (80034b8 <menu+0x1f08>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <menu+0x1d6e>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003312:	4a71      	ldr	r2, [pc, #452]	; (80034d8 <menu+0x1f28>)
 8003314:	2101      	movs	r1, #1
 8003316:	2001      	movs	r0, #1
 8003318:	f005 fcde 	bl	8008cd8 <lcd_print>
 800331c:	e008      	b.n	8003330 <menu+0x1d80>
		} else if(dilSecim == 1) {
 800331e:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <menu+0x1f08>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d104      	bne.n	8003330 <menu+0x1d80>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003326:	4a6d      	ldr	r2, [pc, #436]	; (80034dc <menu+0x1f2c>)
 8003328:	2101      	movs	r1, #1
 800332a:	2001      	movs	r0, #1
 800332c:	f005 fcd4 	bl	8008cd8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003330:	4b6b      	ldr	r3, [pc, #428]	; (80034e0 <menu+0x1f30>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d113      	bne.n	8003360 <menu+0x1db0>
			if(dilSecim == 0){
 8003338:	4b5f      	ldr	r3, [pc, #380]	; (80034b8 <menu+0x1f08>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <menu+0x1d9c>
				lcd_print(2, 1, "Devirme aktif  ");
 8003340:	4a68      	ldr	r2, [pc, #416]	; (80034e4 <menu+0x1f34>)
 8003342:	2101      	movs	r1, #1
 8003344:	2002      	movs	r0, #2
 8003346:	f005 fcc7 	bl	8008cd8 <lcd_print>
 800334a:	e038      	b.n	80033be <menu+0x1e0e>
			} else if(dilSecim == 1){
 800334c:	4b5a      	ldr	r3, [pc, #360]	; (80034b8 <menu+0x1f08>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d134      	bne.n	80033be <menu+0x1e0e>
				lcd_print(2, 1, "Tipping active ");
 8003354:	4a64      	ldr	r2, [pc, #400]	; (80034e8 <menu+0x1f38>)
 8003356:	2101      	movs	r1, #1
 8003358:	2002      	movs	r0, #2
 800335a:	f005 fcbd 	bl	8008cd8 <lcd_print>
 800335e:	e02e      	b.n	80033be <menu+0x1e0e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003360:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <menu+0x1f30>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d113      	bne.n	8003390 <menu+0x1de0>
			if(dilSecim == 0){
 8003368:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <menu+0x1f08>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <menu+0x1dcc>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003370:	4a5e      	ldr	r2, [pc, #376]	; (80034ec <menu+0x1f3c>)
 8003372:	2101      	movs	r1, #1
 8003374:	2002      	movs	r0, #2
 8003376:	f005 fcaf 	bl	8008cd8 <lcd_print>
 800337a:	e020      	b.n	80033be <menu+0x1e0e>
			} else if(dilSecim == 1) {
 800337c:	4b4e      	ldr	r3, [pc, #312]	; (80034b8 <menu+0x1f08>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d11c      	bne.n	80033be <menu+0x1e0e>
				lcd_print(2, 1, "Drive active   ");
 8003384:	4a5a      	ldr	r2, [pc, #360]	; (80034f0 <menu+0x1f40>)
 8003386:	2101      	movs	r1, #1
 8003388:	2002      	movs	r0, #2
 800338a:	f005 fca5 	bl	8008cd8 <lcd_print>
 800338e:	e016      	b.n	80033be <menu+0x1e0e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <menu+0x1f30>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d112      	bne.n	80033be <menu+0x1e0e>
			if(dilSecim == 0) {
 8003398:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <menu+0x1f08>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <menu+0x1dfc>
				lcd_print(2, 1, "Pasif           ");
 80033a0:	4a54      	ldr	r2, [pc, #336]	; (80034f4 <menu+0x1f44>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	2002      	movs	r0, #2
 80033a6:	f005 fc97 	bl	8008cd8 <lcd_print>
 80033aa:	e008      	b.n	80033be <menu+0x1e0e>
			} else if(dilSecim == 1) {
 80033ac:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <menu+0x1f08>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d104      	bne.n	80033be <menu+0x1e0e>
				lcd_print(2, 1, "Passive         ");
 80033b4:	4a50      	ldr	r2, [pc, #320]	; (80034f8 <menu+0x1f48>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	2002      	movs	r0, #2
 80033ba:	f005 fc8d 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033be:	2102      	movs	r1, #2
 80033c0:	483f      	ldr	r0, [pc, #252]	; (80034c0 <menu+0x1f10>)
 80033c2:	f006 ffaf 	bl	800a324 <HAL_GPIO_ReadPin>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d115      	bne.n	80033f8 <menu+0x1e48>
 80033cc:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <menu+0x1f14>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	f083 0301 	eor.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00e      	beq.n	80033f8 <menu+0x1e48>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <menu+0x1f30>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <menu+0x1f30>)
 80033e4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80033e6:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <menu+0x1f30>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <menu+0x1e44>
				devirmeYuruyusSecim = 0;
 80033ee:	4b3c      	ldr	r3, [pc, #240]	; (80034e0 <menu+0x1f30>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033f4:	f001 fc10 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f8:	2104      	movs	r1, #4
 80033fa:	4831      	ldr	r0, [pc, #196]	; (80034c0 <menu+0x1f10>)
 80033fc:	f006 ff92 	bl	800a324 <HAL_GPIO_ReadPin>
 8003400:	4603      	mov	r3, r0
 8003402:	2b01      	cmp	r3, #1
 8003404:	d115      	bne.n	8003432 <menu+0x1e82>
 8003406:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <menu+0x1f14>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	f083 0301 	eor.w	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00e      	beq.n	8003432 <menu+0x1e82>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <menu+0x1f30>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	3b01      	subs	r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <menu+0x1f30>)
 800341e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <menu+0x1f30>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d902      	bls.n	800342e <menu+0x1e7e>
		   		devirmeYuruyusSecim = 2;
 8003428:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <menu+0x1f30>)
 800342a:	2202      	movs	r2, #2
 800342c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800342e:	f001 fbf3 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003432:	2108      	movs	r1, #8
 8003434:	4822      	ldr	r0, [pc, #136]	; (80034c0 <menu+0x1f10>)
 8003436:	f006 ff75 	bl	800a324 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d127      	bne.n	8003490 <menu+0x1ee0>
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <menu+0x1f14>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f083 0301 	eor.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d020      	beq.n	8003490 <menu+0x1ee0>
			eepromData[15] = devirmeYuruyusSecim;
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <menu+0x1f30>)
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <menu+0x1f1c>)
 8003454:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <menu+0x1f30>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d003      	beq.n	8003466 <menu+0x1eb6>
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <menu+0x1f30>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d106      	bne.n	8003474 <menu+0x1ec4>
				calismaSekli = 0;
 8003466:	4b25      	ldr	r3, [pc, #148]	; (80034fc <menu+0x1f4c>)
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <menu+0x1f4c>)
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <menu+0x1f1c>)
 8003472:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <menu+0x1f30>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <menu+0x1eda>
				devirmeSilindirTipi = 1;
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <menu+0x1f50>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003482:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <menu+0x1f50>)
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <menu+0x1f1c>)
 8003488:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <menu+0x1f20>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003490:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <menu+0x1f24>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b12      	cmp	r3, #18
 8003496:	f040 80d5 	bne.w	8003644 <menu+0x2094>
		if(devirmeYuruyusSecim == 2) {
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <menu+0x1f30>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d13c      	bne.n	800351c <menu+0x1f6c>
			if(dilSecim == 0) {
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <menu+0x1f08>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12e      	bne.n	8003508 <menu+0x1f58>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80034aa:	4a16      	ldr	r2, [pc, #88]	; (8003504 <menu+0x1f54>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	2001      	movs	r0, #1
 80034b0:	f005 fc12 	bl	8008cd8 <lcd_print>
 80034b4:	e048      	b.n	8003548 <menu+0x1f98>
 80034b6:	bf00      	nop
 80034b8:	20000b0d 	.word	0x20000b0d
 80034bc:	0800e460 	.word	0x0800e460
 80034c0:	40010800 	.word	0x40010800
 80034c4:	20000b1b 	.word	0x20000b1b
 80034c8:	20000afa 	.word	0x20000afa
 80034cc:	20000a18 	.word	0x20000a18
 80034d0:	20000b18 	.word	0x20000b18
 80034d4:	20000aec 	.word	0x20000aec
 80034d8:	0800e7dc 	.word	0x0800e7dc
 80034dc:	0800e7f0 	.word	0x0800e7f0
 80034e0:	20000afb 	.word	0x20000afb
 80034e4:	0800e804 	.word	0x0800e804
 80034e8:	0800e814 	.word	0x0800e814
 80034ec:	0800e824 	.word	0x0800e824
 80034f0:	0800e834 	.word	0x0800e834
 80034f4:	0800e3ec 	.word	0x0800e3ec
 80034f8:	0800e400 	.word	0x0800e400
 80034fc:	20000aed 	.word	0x20000aed
 8003500:	20000afe 	.word	0x20000afe
 8003504:	0800e844 	.word	0x0800e844
			} else if(dilSecim == 1) {
 8003508:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <menu+0x2148>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d11b      	bne.n	8003548 <menu+0x1f98>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003510:	4a7a      	ldr	r2, [pc, #488]	; (80036fc <menu+0x214c>)
 8003512:	2101      	movs	r1, #1
 8003514:	2001      	movs	r0, #1
 8003516:	f005 fbdf 	bl	8008cd8 <lcd_print>
 800351a:	e015      	b.n	8003548 <menu+0x1f98>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800351c:	4b78      	ldr	r3, [pc, #480]	; (8003700 <menu+0x2150>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d111      	bne.n	8003548 <menu+0x1f98>
			if(dilSecim == 0){
 8003524:	4b74      	ldr	r3, [pc, #464]	; (80036f8 <menu+0x2148>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <menu+0x1f86>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800352c:	4a75      	ldr	r2, [pc, #468]	; (8003704 <menu+0x2154>)
 800352e:	2101      	movs	r1, #1
 8003530:	2001      	movs	r0, #1
 8003532:	f005 fbd1 	bl	8008cd8 <lcd_print>
			}
			if(dilSecim == 1){
 8003536:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <menu+0x2148>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d104      	bne.n	8003548 <menu+0x1f98>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800353e:	4a72      	ldr	r2, [pc, #456]	; (8003708 <menu+0x2158>)
 8003540:	2101      	movs	r1, #1
 8003542:	2001      	movs	r0, #1
 8003544:	f005 fbc8 	bl	8008cd8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003548:	4b70      	ldr	r3, [pc, #448]	; (800370c <menu+0x215c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d113      	bne.n	8003578 <menu+0x1fc8>
			if(dilSecim == 0) {
 8003550:	4b69      	ldr	r3, [pc, #420]	; (80036f8 <menu+0x2148>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <menu+0x1fb4>
				lcd_print(2, 1, "Pasif           ");
 8003558:	4a6d      	ldr	r2, [pc, #436]	; (8003710 <menu+0x2160>)
 800355a:	2101      	movs	r1, #1
 800355c:	2002      	movs	r0, #2
 800355e:	f005 fbbb 	bl	8008cd8 <lcd_print>
 8003562:	e020      	b.n	80035a6 <menu+0x1ff6>
			} else if(dilSecim == 1){
 8003564:	4b64      	ldr	r3, [pc, #400]	; (80036f8 <menu+0x2148>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d11c      	bne.n	80035a6 <menu+0x1ff6>
				lcd_print(2, 1, "Passive         ");
 800356c:	4a69      	ldr	r2, [pc, #420]	; (8003714 <menu+0x2164>)
 800356e:	2101      	movs	r1, #1
 8003570:	2002      	movs	r0, #2
 8003572:	f005 fbb1 	bl	8008cd8 <lcd_print>
 8003576:	e016      	b.n	80035a6 <menu+0x1ff6>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <menu+0x215c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d112      	bne.n	80035a6 <menu+0x1ff6>
			if(dilSecim == 0){
 8003580:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <menu+0x2148>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <menu+0x1fe4>
				lcd_print(2, 1, "Aktif           ");
 8003588:	4a63      	ldr	r2, [pc, #396]	; (8003718 <menu+0x2168>)
 800358a:	2101      	movs	r1, #1
 800358c:	2002      	movs	r0, #2
 800358e:	f005 fba3 	bl	8008cd8 <lcd_print>
 8003592:	e008      	b.n	80035a6 <menu+0x1ff6>
			} else if(dilSecim == 1){
 8003594:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <menu+0x2148>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d104      	bne.n	80035a6 <menu+0x1ff6>
				lcd_print(2, 1, "Active          ");
 800359c:	4a5f      	ldr	r2, [pc, #380]	; (800371c <menu+0x216c>)
 800359e:	2101      	movs	r1, #1
 80035a0:	2002      	movs	r0, #2
 80035a2:	f005 fb99 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035a6:	2102      	movs	r1, #2
 80035a8:	485d      	ldr	r0, [pc, #372]	; (8003720 <menu+0x2170>)
 80035aa:	f006 febb 	bl	800a324 <HAL_GPIO_ReadPin>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d115      	bne.n	80035e0 <menu+0x2030>
 80035b4:	4b5b      	ldr	r3, [pc, #364]	; (8003724 <menu+0x2174>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	f083 0301 	eor.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <menu+0x2030>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80035c2:	4b52      	ldr	r3, [pc, #328]	; (800370c <menu+0x215c>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b50      	ldr	r3, [pc, #320]	; (800370c <menu+0x215c>)
 80035cc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80035ce:	4b4f      	ldr	r3, [pc, #316]	; (800370c <menu+0x215c>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d902      	bls.n	80035dc <menu+0x202c>
				devirmeYukariIleriLimit = 0;
 80035d6:	4b4d      	ldr	r3, [pc, #308]	; (800370c <menu+0x215c>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035dc:	f001 fb1c 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e0:	2104      	movs	r1, #4
 80035e2:	484f      	ldr	r0, [pc, #316]	; (8003720 <menu+0x2170>)
 80035e4:	f006 fe9e 	bl	800a324 <HAL_GPIO_ReadPin>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d115      	bne.n	800361a <menu+0x206a>
 80035ee:	4b4d      	ldr	r3, [pc, #308]	; (8003724 <menu+0x2174>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <menu+0x206a>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80035fc:	4b43      	ldr	r3, [pc, #268]	; (800370c <menu+0x215c>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	3b01      	subs	r3, #1
 8003602:	b2da      	uxtb	r2, r3
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <menu+0x215c>)
 8003606:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003608:	4b40      	ldr	r3, [pc, #256]	; (800370c <menu+0x215c>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <menu+0x2066>
		   		devirmeYukariIleriLimit = 1;
 8003610:	4b3e      	ldr	r3, [pc, #248]	; (800370c <menu+0x215c>)
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003616:	f001 faff 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800361a:	2108      	movs	r1, #8
 800361c:	4840      	ldr	r0, [pc, #256]	; (8003720 <menu+0x2170>)
 800361e:	f006 fe81 	bl	800a324 <HAL_GPIO_ReadPin>
 8003622:	4603      	mov	r3, r0
 8003624:	2b01      	cmp	r3, #1
 8003626:	d10d      	bne.n	8003644 <menu+0x2094>
 8003628:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <menu+0x2174>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	f083 0301 	eor.w	r3, r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <menu+0x2094>
			eepromData[16] = devirmeYukariIleriLimit;
 8003636:	4b35      	ldr	r3, [pc, #212]	; (800370c <menu+0x215c>)
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	4b3b      	ldr	r3, [pc, #236]	; (8003728 <menu+0x2178>)
 800363c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800363e:	4b3b      	ldr	r3, [pc, #236]	; (800372c <menu+0x217c>)
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003644:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <menu+0x2180>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b13      	cmp	r3, #19
 800364a:	f040 80d5 	bne.w	80037f8 <menu+0x2248>
		if(devirmeYuruyusSecim == 2) {
 800364e:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <menu+0x2150>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d113      	bne.n	800367e <menu+0x20ce>
			if(dilSecim == 0) {
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <menu+0x2148>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <menu+0x20ba>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800365e:	4a35      	ldr	r2, [pc, #212]	; (8003734 <menu+0x2184>)
 8003660:	2101      	movs	r1, #1
 8003662:	2001      	movs	r0, #1
 8003664:	f005 fb38 	bl	8008cd8 <lcd_print>
 8003668:	e01f      	b.n	80036aa <menu+0x20fa>
			} else if(dilSecim == 1) {
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <menu+0x2148>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d11b      	bne.n	80036aa <menu+0x20fa>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003672:	4a31      	ldr	r2, [pc, #196]	; (8003738 <menu+0x2188>)
 8003674:	2101      	movs	r1, #1
 8003676:	2001      	movs	r0, #1
 8003678:	f005 fb2e 	bl	8008cd8 <lcd_print>
 800367c:	e015      	b.n	80036aa <menu+0x20fa>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <menu+0x2150>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d111      	bne.n	80036aa <menu+0x20fa>
			if(dilSecim == 0) {
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <menu+0x2148>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <menu+0x20e8>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800368e:	4a2b      	ldr	r2, [pc, #172]	; (800373c <menu+0x218c>)
 8003690:	2101      	movs	r1, #1
 8003692:	2001      	movs	r0, #1
 8003694:	f005 fb20 	bl	8008cd8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <menu+0x2148>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d104      	bne.n	80036aa <menu+0x20fa>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80036a0:	4a27      	ldr	r2, [pc, #156]	; (8003740 <menu+0x2190>)
 80036a2:	2101      	movs	r1, #1
 80036a4:	2001      	movs	r0, #1
 80036a6:	f005 fb17 	bl	8008cd8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80036aa:	4b26      	ldr	r3, [pc, #152]	; (8003744 <menu+0x2194>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d113      	bne.n	80036da <menu+0x212a>
			if(dilSecim == 0) {
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <menu+0x2148>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d105      	bne.n	80036c6 <menu+0x2116>
				lcd_print(2, 1, "Pasif           ");
 80036ba:	4a15      	ldr	r2, [pc, #84]	; (8003710 <menu+0x2160>)
 80036bc:	2101      	movs	r1, #1
 80036be:	2002      	movs	r0, #2
 80036c0:	f005 fb0a 	bl	8008cd8 <lcd_print>
 80036c4:	e049      	b.n	800375a <menu+0x21aa>
			} else if(dilSecim == 1) {
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <menu+0x2148>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d145      	bne.n	800375a <menu+0x21aa>
				lcd_print(2, 1, "Passive         ");
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <menu+0x2164>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	2002      	movs	r0, #2
 80036d4:	f005 fb00 	bl	8008cd8 <lcd_print>
 80036d8:	e03f      	b.n	800375a <menu+0x21aa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <menu+0x2194>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d13b      	bne.n	800375a <menu+0x21aa>
			if(dilSecim == 0) {
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <menu+0x2148>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d12e      	bne.n	8003748 <menu+0x2198>
				lcd_print(2, 1, "Aktif           ");
 80036ea:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <menu+0x2168>)
 80036ec:	2101      	movs	r1, #1
 80036ee:	2002      	movs	r0, #2
 80036f0:	f005 faf2 	bl	8008cd8 <lcd_print>
 80036f4:	e031      	b.n	800375a <menu+0x21aa>
 80036f6:	bf00      	nop
 80036f8:	20000b0d 	.word	0x20000b0d
 80036fc:	0800e858 	.word	0x0800e858
 8003700:	20000afb 	.word	0x20000afb
 8003704:	0800e868 	.word	0x0800e868
 8003708:	0800e87c 	.word	0x0800e87c
 800370c:	20000afc 	.word	0x20000afc
 8003710:	0800e3ec 	.word	0x0800e3ec
 8003714:	0800e400 	.word	0x0800e400
 8003718:	0800e44c 	.word	0x0800e44c
 800371c:	0800e460 	.word	0x0800e460
 8003720:	40010800 	.word	0x40010800
 8003724:	20000b1b 	.word	0x20000b1b
 8003728:	20000a18 	.word	0x20000a18
 800372c:	20000b18 	.word	0x20000b18
 8003730:	20000aec 	.word	0x20000aec
 8003734:	0800e890 	.word	0x0800e890
 8003738:	0800e8a4 	.word	0x0800e8a4
 800373c:	0800e8b8 	.word	0x0800e8b8
 8003740:	0800e8cc 	.word	0x0800e8cc
 8003744:	20000afd 	.word	0x20000afd
			} else if(dilSecim == 1) {
 8003748:	4b90      	ldr	r3, [pc, #576]	; (800398c <menu+0x23dc>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d104      	bne.n	800375a <menu+0x21aa>
				lcd_print(2, 1, "Active          ");
 8003750:	4a8f      	ldr	r2, [pc, #572]	; (8003990 <menu+0x23e0>)
 8003752:	2101      	movs	r1, #1
 8003754:	2002      	movs	r0, #2
 8003756:	f005 fabf 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800375a:	2102      	movs	r1, #2
 800375c:	488d      	ldr	r0, [pc, #564]	; (8003994 <menu+0x23e4>)
 800375e:	f006 fde1 	bl	800a324 <HAL_GPIO_ReadPin>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d115      	bne.n	8003794 <menu+0x21e4>
 8003768:	4b8b      	ldr	r3, [pc, #556]	; (8003998 <menu+0x23e8>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	f083 0301 	eor.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <menu+0x21e4>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003776:	4b89      	ldr	r3, [pc, #548]	; (800399c <menu+0x23ec>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	3301      	adds	r3, #1
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4b87      	ldr	r3, [pc, #540]	; (800399c <menu+0x23ec>)
 8003780:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003782:	4b86      	ldr	r3, [pc, #536]	; (800399c <menu+0x23ec>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d902      	bls.n	8003790 <menu+0x21e0>
				devirmeAsagiGeriLimit = 0;
 800378a:	4b84      	ldr	r3, [pc, #528]	; (800399c <menu+0x23ec>)
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003790:	f001 fa42 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003794:	2104      	movs	r1, #4
 8003796:	487f      	ldr	r0, [pc, #508]	; (8003994 <menu+0x23e4>)
 8003798:	f006 fdc4 	bl	800a324 <HAL_GPIO_ReadPin>
 800379c:	4603      	mov	r3, r0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d115      	bne.n	80037ce <menu+0x221e>
 80037a2:	4b7d      	ldr	r3, [pc, #500]	; (8003998 <menu+0x23e8>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	f083 0301 	eor.w	r3, r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00e      	beq.n	80037ce <menu+0x221e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80037b0:	4b7a      	ldr	r3, [pc, #488]	; (800399c <menu+0x23ec>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	4b78      	ldr	r3, [pc, #480]	; (800399c <menu+0x23ec>)
 80037ba:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80037bc:	4b77      	ldr	r3, [pc, #476]	; (800399c <menu+0x23ec>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <menu+0x221a>
		   		devirmeAsagiGeriLimit = 1;
 80037c4:	4b75      	ldr	r3, [pc, #468]	; (800399c <menu+0x23ec>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037ca:	f001 fa25 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ce:	2108      	movs	r1, #8
 80037d0:	4870      	ldr	r0, [pc, #448]	; (8003994 <menu+0x23e4>)
 80037d2:	f006 fda7 	bl	800a324 <HAL_GPIO_ReadPin>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10d      	bne.n	80037f8 <menu+0x2248>
 80037dc:	4b6e      	ldr	r3, [pc, #440]	; (8003998 <menu+0x23e8>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	f083 0301 	eor.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <menu+0x2248>
			eepromData[17] = devirmeAsagiGeriLimit;
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <menu+0x23ec>)
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <menu+0x23f0>)
 80037f0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80037f2:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <menu+0x23f4>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80037f8:	4b6b      	ldr	r3, [pc, #428]	; (80039a8 <menu+0x23f8>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b14      	cmp	r3, #20
 80037fe:	f040 80b5 	bne.w	800396c <menu+0x23bc>
		if(devirmeYuruyusSecim == 1) {
 8003802:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <menu+0x23fc>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d113      	bne.n	8003832 <menu+0x2282>
			if(dilSecim == 0) {
 800380a:	4b60      	ldr	r3, [pc, #384]	; (800398c <menu+0x23dc>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <menu+0x226e>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003812:	4a67      	ldr	r2, [pc, #412]	; (80039b0 <menu+0x2400>)
 8003814:	2101      	movs	r1, #1
 8003816:	2001      	movs	r0, #1
 8003818:	f005 fa5e 	bl	8008cd8 <lcd_print>
 800381c:	e020      	b.n	8003860 <menu+0x22b0>
			} else if(dilSecim == 1) {
 800381e:	4b5b      	ldr	r3, [pc, #364]	; (800398c <menu+0x23dc>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d11c      	bne.n	8003860 <menu+0x22b0>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003826:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <menu+0x2404>)
 8003828:	2101      	movs	r1, #1
 800382a:	2001      	movs	r0, #1
 800382c:	f005 fa54 	bl	8008cd8 <lcd_print>
 8003830:	e016      	b.n	8003860 <menu+0x22b0>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003832:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <menu+0x23fc>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d112      	bne.n	8003860 <menu+0x22b0>
			if(dilSecim == 0) {
 800383a:	4b54      	ldr	r3, [pc, #336]	; (800398c <menu+0x23dc>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <menu+0x229e>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003842:	4a5d      	ldr	r2, [pc, #372]	; (80039b8 <menu+0x2408>)
 8003844:	2101      	movs	r1, #1
 8003846:	2001      	movs	r0, #1
 8003848:	f005 fa46 	bl	8008cd8 <lcd_print>
 800384c:	e008      	b.n	8003860 <menu+0x22b0>
			} else if(dilSecim == 1) {
 800384e:	4b4f      	ldr	r3, [pc, #316]	; (800398c <menu+0x23dc>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d104      	bne.n	8003860 <menu+0x22b0>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003856:	4a59      	ldr	r2, [pc, #356]	; (80039bc <menu+0x240c>)
 8003858:	2101      	movs	r1, #1
 800385a:	2001      	movs	r0, #1
 800385c:	f005 fa3c 	bl	8008cd8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003860:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <menu+0x2410>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d113      	bne.n	8003890 <menu+0x22e0>
			if(dilSecim == 0) {
 8003868:	4b48      	ldr	r3, [pc, #288]	; (800398c <menu+0x23dc>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <menu+0x22cc>
				lcd_print(2, 1, "Tek tesir       ");
 8003870:	4a54      	ldr	r2, [pc, #336]	; (80039c4 <menu+0x2414>)
 8003872:	2101      	movs	r1, #1
 8003874:	2002      	movs	r0, #2
 8003876:	f005 fa2f 	bl	8008cd8 <lcd_print>
 800387a:	e020      	b.n	80038be <menu+0x230e>
			} else if(dilSecim == 1) {
 800387c:	4b43      	ldr	r3, [pc, #268]	; (800398c <menu+0x23dc>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d11c      	bne.n	80038be <menu+0x230e>
				lcd_print(2, 1, "Single acting  ");
 8003884:	4a50      	ldr	r2, [pc, #320]	; (80039c8 <menu+0x2418>)
 8003886:	2101      	movs	r1, #1
 8003888:	2002      	movs	r0, #2
 800388a:	f005 fa25 	bl	8008cd8 <lcd_print>
 800388e:	e016      	b.n	80038be <menu+0x230e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003890:	4b4b      	ldr	r3, [pc, #300]	; (80039c0 <menu+0x2410>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d112      	bne.n	80038be <menu+0x230e>
			if(dilSecim == 0) {
 8003898:	4b3c      	ldr	r3, [pc, #240]	; (800398c <menu+0x23dc>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <menu+0x22fc>
				lcd_print(2, 1, "Cift tesir      ");
 80038a0:	4a4a      	ldr	r2, [pc, #296]	; (80039cc <menu+0x241c>)
 80038a2:	2101      	movs	r1, #1
 80038a4:	2002      	movs	r0, #2
 80038a6:	f005 fa17 	bl	8008cd8 <lcd_print>
 80038aa:	e008      	b.n	80038be <menu+0x230e>
			} else if(dilSecim == 1) {
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <menu+0x23dc>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d104      	bne.n	80038be <menu+0x230e>
				lcd_print(2, 1, "Double acting  ");
 80038b4:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <menu+0x2420>)
 80038b6:	2101      	movs	r1, #1
 80038b8:	2002      	movs	r0, #2
 80038ba:	f005 fa0d 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80038be:	2102      	movs	r1, #2
 80038c0:	4834      	ldr	r0, [pc, #208]	; (8003994 <menu+0x23e4>)
 80038c2:	f006 fd2f 	bl	800a324 <HAL_GPIO_ReadPin>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d119      	bne.n	8003900 <menu+0x2350>
 80038cc:	4b32      	ldr	r3, [pc, #200]	; (8003998 <menu+0x23e8>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	f083 0301 	eor.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d012      	beq.n	8003900 <menu+0x2350>
 80038da:	4b34      	ldr	r3, [pc, #208]	; (80039ac <menu+0x23fc>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d10e      	bne.n	8003900 <menu+0x2350>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <menu+0x2410>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4b35      	ldr	r3, [pc, #212]	; (80039c0 <menu+0x2410>)
 80038ec:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <menu+0x2410>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d902      	bls.n	80038fc <menu+0x234c>
				devirmeSilindirTipi = 0;
 80038f6:	4b32      	ldr	r3, [pc, #200]	; (80039c0 <menu+0x2410>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038fc:	f001 f98c 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003900:	2104      	movs	r1, #4
 8003902:	4824      	ldr	r0, [pc, #144]	; (8003994 <menu+0x23e4>)
 8003904:	f006 fd0e 	bl	800a324 <HAL_GPIO_ReadPin>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d119      	bne.n	8003942 <menu+0x2392>
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <menu+0x23e8>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	f083 0301 	eor.w	r3, r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d012      	beq.n	8003942 <menu+0x2392>
 800391c:	4b23      	ldr	r3, [pc, #140]	; (80039ac <menu+0x23fc>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d10e      	bne.n	8003942 <menu+0x2392>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <menu+0x2410>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	3b01      	subs	r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <menu+0x2410>)
 800392e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003930:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <menu+0x2410>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <menu+0x238e>
		   		devirmeSilindirTipi = 1;
 8003938:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <menu+0x2410>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800393e:	f001 f96b 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003942:	2108      	movs	r1, #8
 8003944:	4813      	ldr	r0, [pc, #76]	; (8003994 <menu+0x23e4>)
 8003946:	f006 fced 	bl	800a324 <HAL_GPIO_ReadPin>
 800394a:	4603      	mov	r3, r0
 800394c:	2b01      	cmp	r3, #1
 800394e:	d10d      	bne.n	800396c <menu+0x23bc>
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <menu+0x23e8>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d006      	beq.n	800396c <menu+0x23bc>
			eepromData[18] = devirmeSilindirTipi;
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <menu+0x2410>)
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <menu+0x23f0>)
 8003964:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <menu+0x23f4>)
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <menu+0x23f8>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b15      	cmp	r3, #21
 8003972:	f040 80c2 	bne.w	8003afa <menu+0x254a>
		if(dilSecim == 0) {
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <menu+0x23dc>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d12c      	bne.n	80039d8 <menu+0x2428>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <menu+0x2424>)
 8003980:	2101      	movs	r1, #1
 8003982:	2001      	movs	r0, #1
 8003984:	f005 f9a8 	bl	8008cd8 <lcd_print>
 8003988:	e02f      	b.n	80039ea <menu+0x243a>
 800398a:	bf00      	nop
 800398c:	20000b0d 	.word	0x20000b0d
 8003990:	0800e460 	.word	0x0800e460
 8003994:	40010800 	.word	0x40010800
 8003998:	20000b1b 	.word	0x20000b1b
 800399c:	20000afd 	.word	0x20000afd
 80039a0:	20000a18 	.word	0x20000a18
 80039a4:	20000b18 	.word	0x20000b18
 80039a8:	20000aec 	.word	0x20000aec
 80039ac:	20000afb 	.word	0x20000afb
 80039b0:	0800e8e0 	.word	0x0800e8e0
 80039b4:	0800e8f4 	.word	0x0800e8f4
 80039b8:	0800e908 	.word	0x0800e908
 80039bc:	0800e91c 	.word	0x0800e91c
 80039c0:	20000afe 	.word	0x20000afe
 80039c4:	0800e930 	.word	0x0800e930
 80039c8:	0800e944 	.word	0x0800e944
 80039cc:	0800e954 	.word	0x0800e954
 80039d0:	0800e968 	.word	0x0800e968
 80039d4:	0800e978 	.word	0x0800e978
		} else if(dilSecim == 1) {
 80039d8:	4b9c      	ldr	r3, [pc, #624]	; (8003c4c <menu+0x269c>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d104      	bne.n	80039ea <menu+0x243a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80039e0:	4a9b      	ldr	r2, [pc, #620]	; (8003c50 <menu+0x26a0>)
 80039e2:	2101      	movs	r1, #1
 80039e4:	2001      	movs	r0, #1
 80039e6:	f005 f977 	bl	8008cd8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80039ea:	4b9a      	ldr	r3, [pc, #616]	; (8003c54 <menu+0x26a4>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d112      	bne.n	8003a18 <menu+0x2468>
			if(dilSecim == 0) {
 80039f2:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <menu+0x269c>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d104      	bne.n	8003a04 <menu+0x2454>
				lcd_print(2, 1, "Tek tesir       ");
 80039fa:	4a97      	ldr	r2, [pc, #604]	; (8003c58 <menu+0x26a8>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	2002      	movs	r0, #2
 8003a00:	f005 f96a 	bl	8008cd8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a04:	4b91      	ldr	r3, [pc, #580]	; (8003c4c <menu+0x269c>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d11c      	bne.n	8003a46 <menu+0x2496>
				lcd_print(2, 1, "Single acting  ");
 8003a0c:	4a93      	ldr	r2, [pc, #588]	; (8003c5c <menu+0x26ac>)
 8003a0e:	2101      	movs	r1, #1
 8003a10:	2002      	movs	r0, #2
 8003a12:	f005 f961 	bl	8008cd8 <lcd_print>
 8003a16:	e016      	b.n	8003a46 <menu+0x2496>
			}
		} else if(platformSilindirTipi == 1) {
 8003a18:	4b8e      	ldr	r3, [pc, #568]	; (8003c54 <menu+0x26a4>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d112      	bne.n	8003a46 <menu+0x2496>
			if(dilSecim == 0) {
 8003a20:	4b8a      	ldr	r3, [pc, #552]	; (8003c4c <menu+0x269c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d105      	bne.n	8003a34 <menu+0x2484>
				lcd_print(2, 1, "Cift tesir      ");
 8003a28:	4a8d      	ldr	r2, [pc, #564]	; (8003c60 <menu+0x26b0>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	2002      	movs	r0, #2
 8003a2e:	f005 f953 	bl	8008cd8 <lcd_print>
 8003a32:	e008      	b.n	8003a46 <menu+0x2496>
			} else if(dilSecim == 1) {
 8003a34:	4b85      	ldr	r3, [pc, #532]	; (8003c4c <menu+0x269c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d104      	bne.n	8003a46 <menu+0x2496>
				lcd_print(2, 1, "Double acting  ");
 8003a3c:	4a89      	ldr	r2, [pc, #548]	; (8003c64 <menu+0x26b4>)
 8003a3e:	2101      	movs	r1, #1
 8003a40:	2002      	movs	r0, #2
 8003a42:	f005 f949 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a46:	2102      	movs	r1, #2
 8003a48:	4887      	ldr	r0, [pc, #540]	; (8003c68 <menu+0x26b8>)
 8003a4a:	f006 fc6b 	bl	800a324 <HAL_GPIO_ReadPin>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d115      	bne.n	8003a80 <menu+0x24d0>
 8003a54:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <menu+0x26bc>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	f083 0301 	eor.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <menu+0x24d0>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003a62:	4b7c      	ldr	r3, [pc, #496]	; (8003c54 <menu+0x26a4>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b7a      	ldr	r3, [pc, #488]	; (8003c54 <menu+0x26a4>)
 8003a6c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003a6e:	4b79      	ldr	r3, [pc, #484]	; (8003c54 <menu+0x26a4>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d902      	bls.n	8003a7c <menu+0x24cc>
				platformSilindirTipi = 0;
 8003a76:	4b77      	ldr	r3, [pc, #476]	; (8003c54 <menu+0x26a4>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a7c:	f001 f8cc 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a80:	2104      	movs	r1, #4
 8003a82:	4879      	ldr	r0, [pc, #484]	; (8003c68 <menu+0x26b8>)
 8003a84:	f006 fc4e 	bl	800a324 <HAL_GPIO_ReadPin>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d115      	bne.n	8003aba <menu+0x250a>
 8003a8e:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <menu+0x26bc>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	f083 0301 	eor.w	r3, r3, #1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <menu+0x250a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003a9c:	4b6d      	ldr	r3, [pc, #436]	; (8003c54 <menu+0x26a4>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b6b      	ldr	r3, [pc, #428]	; (8003c54 <menu+0x26a4>)
 8003aa6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003aa8:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <menu+0x26a4>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <menu+0x2506>
		   		platformSilindirTipi = 1;
 8003ab0:	4b68      	ldr	r3, [pc, #416]	; (8003c54 <menu+0x26a4>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ab6:	f001 f8af 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aba:	2108      	movs	r1, #8
 8003abc:	486a      	ldr	r0, [pc, #424]	; (8003c68 <menu+0x26b8>)
 8003abe:	f006 fc31 	bl	800a324 <HAL_GPIO_ReadPin>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d118      	bne.n	8003afa <menu+0x254a>
 8003ac8:	4b68      	ldr	r3, [pc, #416]	; (8003c6c <menu+0x26bc>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <menu+0x254a>
			eepromData[19] = platformSilindirTipi;
 8003ad6:	4b5f      	ldr	r3, [pc, #380]	; (8003c54 <menu+0x26a4>)
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <menu+0x26c0>)
 8003adc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003ade:	4b5d      	ldr	r3, [pc, #372]	; (8003c54 <menu+0x26a4>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d106      	bne.n	8003af4 <menu+0x2544>
				altLimit = 1;
 8003ae6:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <menu+0x26c4>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003aec:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <menu+0x26c4>)
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	4b5f      	ldr	r3, [pc, #380]	; (8003c70 <menu+0x26c0>)
 8003af2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003af4:	4b60      	ldr	r3, [pc, #384]	; (8003c78 <menu+0x26c8>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003afa:	4b60      	ldr	r3, [pc, #384]	; (8003c7c <menu+0x26cc>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b16      	cmp	r3, #22
 8003b00:	f040 8081 	bne.w	8003c06 <menu+0x2656>
		if(dilSecim == 0) {
 8003b04:	4b51      	ldr	r3, [pc, #324]	; (8003c4c <menu+0x269c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <menu+0x2568>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003b0c:	4a5c      	ldr	r2, [pc, #368]	; (8003c80 <menu+0x26d0>)
 8003b0e:	2101      	movs	r1, #1
 8003b10:	2001      	movs	r0, #1
 8003b12:	f005 f8e1 	bl	8008cd8 <lcd_print>
 8003b16:	e008      	b.n	8003b2a <menu+0x257a>
		} else if(dilSecim == 1) {
 8003b18:	4b4c      	ldr	r3, [pc, #304]	; (8003c4c <menu+0x269c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d104      	bne.n	8003b2a <menu+0x257a>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <menu+0x26d4>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	2001      	movs	r0, #1
 8003b26:	f005 f8d7 	bl	8008cd8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b2a:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <menu+0x269c>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <menu+0x258e>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b32:	4a55      	ldr	r2, [pc, #340]	; (8003c88 <menu+0x26d8>)
 8003b34:	2101      	movs	r1, #1
 8003b36:	2002      	movs	r0, #2
 8003b38:	f005 f8ce 	bl	8008cd8 <lcd_print>
 8003b3c:	e008      	b.n	8003b50 <menu+0x25a0>
			} else if(dilSecim == 1){
 8003b3e:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <menu+0x269c>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d104      	bne.n	8003b50 <menu+0x25a0>
				lcd_print(2, 1, "Second         ");
 8003b46:	4a51      	ldr	r2, [pc, #324]	; (8003c8c <menu+0x26dc>)
 8003b48:	2101      	movs	r1, #1
 8003b4a:	2002      	movs	r0, #2
 8003b4c:	f005 f8c4 	bl	8008cd8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003b50:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <menu+0x26e0>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	220a      	movs	r2, #10
 8003b56:	494f      	ldr	r1, [pc, #316]	; (8003c94 <menu+0x26e4>)
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f009 fc6b 	bl	800d434 <itoa>
		lcd_print(2,16,snum);
 8003b5e:	4a4d      	ldr	r2, [pc, #308]	; (8003c94 <menu+0x26e4>)
 8003b60:	2110      	movs	r1, #16
 8003b62:	2002      	movs	r0, #2
 8003b64:	f005 f8b8 	bl	8008cd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b68:	2102      	movs	r1, #2
 8003b6a:	483f      	ldr	r0, [pc, #252]	; (8003c68 <menu+0x26b8>)
 8003b6c:	f006 fbda 	bl	800a324 <HAL_GPIO_ReadPin>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d115      	bne.n	8003ba2 <menu+0x25f2>
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <menu+0x26bc>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00e      	beq.n	8003ba2 <menu+0x25f2>
			yukariValfTmr = yukariValfTmr + 1;
 8003b84:	4b42      	ldr	r3, [pc, #264]	; (8003c90 <menu+0x26e0>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <menu+0x26e0>)
 8003b8e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003b90:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <menu+0x26e0>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d902      	bls.n	8003b9e <menu+0x25ee>
				yukariValfTmr = 0;
 8003b98:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <menu+0x26e0>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b9e:	f001 f83b 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ba2:	2104      	movs	r1, #4
 8003ba4:	4830      	ldr	r0, [pc, #192]	; (8003c68 <menu+0x26b8>)
 8003ba6:	f006 fbbd 	bl	800a324 <HAL_GPIO_ReadPin>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d115      	bne.n	8003bdc <menu+0x262c>
 8003bb0:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <menu+0x26bc>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	f083 0301 	eor.w	r3, r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00e      	beq.n	8003bdc <menu+0x262c>
			yukariValfTmr = yukariValfTmr - 1;
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <menu+0x26e0>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <menu+0x26e0>)
 8003bc8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <menu+0x26e0>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d902      	bls.n	8003bd8 <menu+0x2628>
		   		yukariValfTmr = 5;
 8003bd2:	4b2f      	ldr	r3, [pc, #188]	; (8003c90 <menu+0x26e0>)
 8003bd4:	2205      	movs	r2, #5
 8003bd6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003bd8:	f001 f81e 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bdc:	2108      	movs	r1, #8
 8003bde:	4822      	ldr	r0, [pc, #136]	; (8003c68 <menu+0x26b8>)
 8003be0:	f006 fba0 	bl	800a324 <HAL_GPIO_ReadPin>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10d      	bne.n	8003c06 <menu+0x2656>
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <menu+0x26bc>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	f083 0301 	eor.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <menu+0x2656>
			eepromData[20] = yukariValfTmr;
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <menu+0x26e0>)
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <menu+0x26c0>)
 8003bfe:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c00:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <menu+0x26c8>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <menu+0x26cc>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b17      	cmp	r3, #23
 8003c0c:	f040 80ac 	bne.w	8003d68 <menu+0x27b8>
		if(dilSecim == 0) {
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <menu+0x269c>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <menu+0x2674>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <menu+0x26e8>)
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f005 f85b 	bl	8008cd8 <lcd_print>
 8003c22:	e008      	b.n	8003c36 <menu+0x2686>
		} else if(dilSecim == 1) {
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <menu+0x269c>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d104      	bne.n	8003c36 <menu+0x2686>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003c2c:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <menu+0x26ec>)
 8003c2e:	2101      	movs	r1, #1
 8003c30:	2001      	movs	r0, #1
 8003c32:	f005 f851 	bl	8008cd8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <menu+0x269c>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d130      	bne.n	8003ca0 <menu+0x26f0>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <menu+0x26d8>)
 8003c40:	2101      	movs	r1, #1
 8003c42:	2002      	movs	r0, #2
 8003c44:	f005 f848 	bl	8008cd8 <lcd_print>
 8003c48:	e033      	b.n	8003cb2 <menu+0x2702>
 8003c4a:	bf00      	nop
 8003c4c:	20000b0d 	.word	0x20000b0d
 8003c50:	0800e98c 	.word	0x0800e98c
 8003c54:	20000aff 	.word	0x20000aff
 8003c58:	0800e930 	.word	0x0800e930
 8003c5c:	0800e944 	.word	0x0800e944
 8003c60:	0800e954 	.word	0x0800e954
 8003c64:	0800e968 	.word	0x0800e968
 8003c68:	40010800 	.word	0x40010800
 8003c6c:	20000b1b 	.word	0x20000b1b
 8003c70:	20000a18 	.word	0x20000a18
 8003c74:	20000af2 	.word	0x20000af2
 8003c78:	20000b18 	.word	0x20000b18
 8003c7c:	20000aec 	.word	0x20000aec
 8003c80:	0800e99c 	.word	0x0800e99c
 8003c84:	0800e9b0 	.word	0x0800e9b0
 8003c88:	0800e650 	.word	0x0800e650
 8003c8c:	0800e9c4 	.word	0x0800e9c4
 8003c90:	20000b00 	.word	0x20000b00
 8003c94:	20000a88 	.word	0x20000a88
 8003c98:	0800e9d4 	.word	0x0800e9d4
 8003c9c:	0800e9e8 	.word	0x0800e9e8
			} else if(dilSecim == 1) {
 8003ca0:	4b98      	ldr	r3, [pc, #608]	; (8003f04 <menu+0x2954>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d104      	bne.n	8003cb2 <menu+0x2702>
				lcd_print(2, 1, "Second         ");
 8003ca8:	4a97      	ldr	r2, [pc, #604]	; (8003f08 <menu+0x2958>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	2002      	movs	r0, #2
 8003cae:	f005 f813 	bl	8008cd8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003cb2:	4b96      	ldr	r3, [pc, #600]	; (8003f0c <menu+0x295c>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	220a      	movs	r2, #10
 8003cb8:	4995      	ldr	r1, [pc, #596]	; (8003f10 <menu+0x2960>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f009 fbba 	bl	800d434 <itoa>
		lcd_print(2,16,snum);
 8003cc0:	4a93      	ldr	r2, [pc, #588]	; (8003f10 <menu+0x2960>)
 8003cc2:	2110      	movs	r1, #16
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	f005 f807 	bl	8008cd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4891      	ldr	r0, [pc, #580]	; (8003f14 <menu+0x2964>)
 8003cce:	f006 fb29 	bl	800a324 <HAL_GPIO_ReadPin>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d115      	bne.n	8003d04 <menu+0x2754>
 8003cd8:	4b8f      	ldr	r3, [pc, #572]	; (8003f18 <menu+0x2968>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	f083 0301 	eor.w	r3, r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <menu+0x2754>
			asagiValfTmr = asagiValfTmr + 1;
 8003ce6:	4b89      	ldr	r3, [pc, #548]	; (8003f0c <menu+0x295c>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4b87      	ldr	r3, [pc, #540]	; (8003f0c <menu+0x295c>)
 8003cf0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003cf2:	4b86      	ldr	r3, [pc, #536]	; (8003f0c <menu+0x295c>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d902      	bls.n	8003d00 <menu+0x2750>
				asagiValfTmr = 0;
 8003cfa:	4b84      	ldr	r3, [pc, #528]	; (8003f0c <menu+0x295c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d00:	f000 ff8a 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d04:	2104      	movs	r1, #4
 8003d06:	4883      	ldr	r0, [pc, #524]	; (8003f14 <menu+0x2964>)
 8003d08:	f006 fb0c 	bl	800a324 <HAL_GPIO_ReadPin>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d115      	bne.n	8003d3e <menu+0x278e>
 8003d12:	4b81      	ldr	r3, [pc, #516]	; (8003f18 <menu+0x2968>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	f083 0301 	eor.w	r3, r3, #1
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00e      	beq.n	8003d3e <menu+0x278e>
			asagiValfTmr = asagiValfTmr - 1;
 8003d20:	4b7a      	ldr	r3, [pc, #488]	; (8003f0c <menu+0x295c>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	4b78      	ldr	r3, [pc, #480]	; (8003f0c <menu+0x295c>)
 8003d2a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003d2c:	4b77      	ldr	r3, [pc, #476]	; (8003f0c <menu+0x295c>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b06      	cmp	r3, #6
 8003d32:	d902      	bls.n	8003d3a <menu+0x278a>
		   		asagiValfTmr = 5;
 8003d34:	4b75      	ldr	r3, [pc, #468]	; (8003f0c <menu+0x295c>)
 8003d36:	2205      	movs	r2, #5
 8003d38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d3a:	f000 ff6d 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3e:	2108      	movs	r1, #8
 8003d40:	4874      	ldr	r0, [pc, #464]	; (8003f14 <menu+0x2964>)
 8003d42:	f006 faef 	bl	800a324 <HAL_GPIO_ReadPin>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10d      	bne.n	8003d68 <menu+0x27b8>
 8003d4c:	4b72      	ldr	r3, [pc, #456]	; (8003f18 <menu+0x2968>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	f083 0301 	eor.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <menu+0x27b8>
			eepromData[21] = asagiValfTmr;
 8003d5a:	4b6c      	ldr	r3, [pc, #432]	; (8003f0c <menu+0x295c>)
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	4b6f      	ldr	r3, [pc, #444]	; (8003f1c <menu+0x296c>)
 8003d60:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003d62:	4b6f      	ldr	r3, [pc, #444]	; (8003f20 <menu+0x2970>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003d68:	4b6e      	ldr	r3, [pc, #440]	; (8003f24 <menu+0x2974>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b18      	cmp	r3, #24
 8003d6e:	f040 809d 	bne.w	8003eac <menu+0x28fc>
		if(devirmeYuruyusSecim == 2) {
 8003d72:	4b6d      	ldr	r3, [pc, #436]	; (8003f28 <menu+0x2978>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d113      	bne.n	8003da2 <menu+0x27f2>
			if(dilSecim == 0) {
 8003d7a:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <menu+0x2954>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d105      	bne.n	8003d8e <menu+0x27de>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003d82:	4a6a      	ldr	r2, [pc, #424]	; (8003f2c <menu+0x297c>)
 8003d84:	2101      	movs	r1, #1
 8003d86:	2001      	movs	r0, #1
 8003d88:	f004 ffa6 	bl	8008cd8 <lcd_print>
 8003d8c:	e020      	b.n	8003dd0 <menu+0x2820>
			} else if(dilSecim == 1) {
 8003d8e:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <menu+0x2954>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d11c      	bne.n	8003dd0 <menu+0x2820>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003d96:	4a66      	ldr	r2, [pc, #408]	; (8003f30 <menu+0x2980>)
 8003d98:	2101      	movs	r1, #1
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	f004 ff9c 	bl	8008cd8 <lcd_print>
 8003da0:	e016      	b.n	8003dd0 <menu+0x2820>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003da2:	4b61      	ldr	r3, [pc, #388]	; (8003f28 <menu+0x2978>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d112      	bne.n	8003dd0 <menu+0x2820>
			if(dilSecim == 0) {
 8003daa:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <menu+0x2954>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d105      	bne.n	8003dbe <menu+0x280e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003db2:	4a60      	ldr	r2, [pc, #384]	; (8003f34 <menu+0x2984>)
 8003db4:	2101      	movs	r1, #1
 8003db6:	2001      	movs	r0, #1
 8003db8:	f004 ff8e 	bl	8008cd8 <lcd_print>
 8003dbc:	e008      	b.n	8003dd0 <menu+0x2820>
			} else if(dilSecim == 1) {
 8003dbe:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <menu+0x2954>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d104      	bne.n	8003dd0 <menu+0x2820>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003dc6:	4a5c      	ldr	r2, [pc, #368]	; (8003f38 <menu+0x2988>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	2001      	movs	r0, #1
 8003dcc:	f004 ff84 	bl	8008cd8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003dd0:	4b4c      	ldr	r3, [pc, #304]	; (8003f04 <menu+0x2954>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <menu+0x2834>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dd8:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <menu+0x298c>)
 8003dda:	2101      	movs	r1, #1
 8003ddc:	2002      	movs	r0, #2
 8003dde:	f004 ff7b 	bl	8008cd8 <lcd_print>
 8003de2:	e008      	b.n	8003df6 <menu+0x2846>
			} else if(dilSecim == 1) {
 8003de4:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <menu+0x2954>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d104      	bne.n	8003df6 <menu+0x2846>
				lcd_print(2, 1, "Second         ");
 8003dec:	4a46      	ldr	r2, [pc, #280]	; (8003f08 <menu+0x2958>)
 8003dee:	2101      	movs	r1, #1
 8003df0:	2002      	movs	r0, #2
 8003df2:	f004 ff71 	bl	8008cd8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003df6:	4b52      	ldr	r3, [pc, #328]	; (8003f40 <menu+0x2990>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	220a      	movs	r2, #10
 8003dfc:	4944      	ldr	r1, [pc, #272]	; (8003f10 <menu+0x2960>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f009 fb18 	bl	800d434 <itoa>
		lcd_print(2, 16, snum);
 8003e04:	4a42      	ldr	r2, [pc, #264]	; (8003f10 <menu+0x2960>)
 8003e06:	2110      	movs	r1, #16
 8003e08:	2002      	movs	r0, #2
 8003e0a:	f004 ff65 	bl	8008cd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4840      	ldr	r0, [pc, #256]	; (8003f14 <menu+0x2964>)
 8003e12:	f006 fa87 	bl	800a324 <HAL_GPIO_ReadPin>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d115      	bne.n	8003e48 <menu+0x2898>
 8003e1c:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <menu+0x2968>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f083 0301 	eor.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00e      	beq.n	8003e48 <menu+0x2898>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003e2a:	4b45      	ldr	r3, [pc, #276]	; (8003f40 <menu+0x2990>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <menu+0x2990>)
 8003e34:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003e36:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <menu+0x2990>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d902      	bls.n	8003e44 <menu+0x2894>
				devirmeYukariIleriTmr = 0;
 8003e3e:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <menu+0x2990>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e44:	f000 fee8 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e48:	2104      	movs	r1, #4
 8003e4a:	4832      	ldr	r0, [pc, #200]	; (8003f14 <menu+0x2964>)
 8003e4c:	f006 fa6a 	bl	800a324 <HAL_GPIO_ReadPin>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d115      	bne.n	8003e82 <menu+0x28d2>
 8003e56:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <menu+0x2968>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f083 0301 	eor.w	r3, r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <menu+0x28d2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <menu+0x2990>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <menu+0x2990>)
 8003e6e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003e70:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <menu+0x2990>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b06      	cmp	r3, #6
 8003e76:	d902      	bls.n	8003e7e <menu+0x28ce>
		   		devirmeYukariIleriTmr = 5;
 8003e78:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <menu+0x2990>)
 8003e7a:	2205      	movs	r2, #5
 8003e7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e7e:	f000 fecb 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e82:	2108      	movs	r1, #8
 8003e84:	4823      	ldr	r0, [pc, #140]	; (8003f14 <menu+0x2964>)
 8003e86:	f006 fa4d 	bl	800a324 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d10d      	bne.n	8003eac <menu+0x28fc>
 8003e90:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <menu+0x2968>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	f083 0301 	eor.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <menu+0x28fc>
			eepromData[22] = devirmeYukariIleriTmr;
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <menu+0x2990>)
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <menu+0x296c>)
 8003ea4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <menu+0x2970>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <menu+0x2974>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b19      	cmp	r3, #25
 8003eb2:	f040 80c4 	bne.w	800403e <menu+0x2a8e>
		if(devirmeYuruyusSecim == 2) {
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <menu+0x2978>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d113      	bne.n	8003ee6 <menu+0x2936>
			if(dilSecim == 0) {
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <menu+0x2954>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <menu+0x2922>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <menu+0x2994>)
 8003ec8:	2101      	movs	r1, #1
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f004 ff04 	bl	8008cd8 <lcd_print>
 8003ed0:	e047      	b.n	8003f62 <menu+0x29b2>
			} else if(dilSecim == 1) {
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <menu+0x2954>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d143      	bne.n	8003f62 <menu+0x29b2>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003eda:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <menu+0x2998>)
 8003edc:	2101      	movs	r1, #1
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f004 fefa 	bl	8008cd8 <lcd_print>
 8003ee4:	e03d      	b.n	8003f62 <menu+0x29b2>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <menu+0x2978>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d139      	bne.n	8003f62 <menu+0x29b2>
			if(dilSecim == 0) {
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <menu+0x2954>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d12c      	bne.n	8003f50 <menu+0x29a0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003ef6:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <menu+0x299c>)
 8003ef8:	2101      	movs	r1, #1
 8003efa:	2001      	movs	r0, #1
 8003efc:	f004 feec 	bl	8008cd8 <lcd_print>
 8003f00:	e02f      	b.n	8003f62 <menu+0x29b2>
 8003f02:	bf00      	nop
 8003f04:	20000b0d 	.word	0x20000b0d
 8003f08:	0800e9c4 	.word	0x0800e9c4
 8003f0c:	20000b01 	.word	0x20000b01
 8003f10:	20000a88 	.word	0x20000a88
 8003f14:	40010800 	.word	0x40010800
 8003f18:	20000b1b 	.word	0x20000b1b
 8003f1c:	20000a18 	.word	0x20000a18
 8003f20:	20000b18 	.word	0x20000b18
 8003f24:	20000aec 	.word	0x20000aec
 8003f28:	20000afb 	.word	0x20000afb
 8003f2c:	0800e9fc 	.word	0x0800e9fc
 8003f30:	0800ea10 	.word	0x0800ea10
 8003f34:	0800ea24 	.word	0x0800ea24
 8003f38:	0800ea38 	.word	0x0800ea38
 8003f3c:	0800e650 	.word	0x0800e650
 8003f40:	20000b02 	.word	0x20000b02
 8003f44:	0800ea4c 	.word	0x0800ea4c
 8003f48:	0800ea60 	.word	0x0800ea60
 8003f4c:	0800ea74 	.word	0x0800ea74
			} else if(dilSecim == 1) {
 8003f50:	4b73      	ldr	r3, [pc, #460]	; (8004120 <menu+0x2b70>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d104      	bne.n	8003f62 <menu+0x29b2>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003f58:	4a72      	ldr	r2, [pc, #456]	; (8004124 <menu+0x2b74>)
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f004 febb 	bl	8008cd8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003f62:	4b6f      	ldr	r3, [pc, #444]	; (8004120 <menu+0x2b70>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <menu+0x29c6>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f6a:	4a6f      	ldr	r2, [pc, #444]	; (8004128 <menu+0x2b78>)
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	2002      	movs	r0, #2
 8003f70:	f004 feb2 	bl	8008cd8 <lcd_print>
 8003f74:	e008      	b.n	8003f88 <menu+0x29d8>
			} else if(dilSecim == 1) {
 8003f76:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <menu+0x2b70>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d104      	bne.n	8003f88 <menu+0x29d8>
				lcd_print(2, 1, "Second         ");
 8003f7e:	4a6b      	ldr	r2, [pc, #428]	; (800412c <menu+0x2b7c>)
 8003f80:	2101      	movs	r1, #1
 8003f82:	2002      	movs	r0, #2
 8003f84:	f004 fea8 	bl	8008cd8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003f88:	4b69      	ldr	r3, [pc, #420]	; (8004130 <menu+0x2b80>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	220a      	movs	r2, #10
 8003f8e:	4969      	ldr	r1, [pc, #420]	; (8004134 <menu+0x2b84>)
 8003f90:	4618      	mov	r0, r3
 8003f92:	f009 fa4f 	bl	800d434 <itoa>
		lcd_print(2,16,snum);
 8003f96:	4a67      	ldr	r2, [pc, #412]	; (8004134 <menu+0x2b84>)
 8003f98:	2110      	movs	r1, #16
 8003f9a:	2002      	movs	r0, #2
 8003f9c:	f004 fe9c 	bl	8008cd8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4865      	ldr	r0, [pc, #404]	; (8004138 <menu+0x2b88>)
 8003fa4:	f006 f9be 	bl	800a324 <HAL_GPIO_ReadPin>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d115      	bne.n	8003fda <menu+0x2a2a>
 8003fae:	4b63      	ldr	r3, [pc, #396]	; (800413c <menu+0x2b8c>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	f083 0301 	eor.w	r3, r3, #1
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <menu+0x2a2a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003fbc:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <menu+0x2b80>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	4b5a      	ldr	r3, [pc, #360]	; (8004130 <menu+0x2b80>)
 8003fc6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003fc8:	4b59      	ldr	r3, [pc, #356]	; (8004130 <menu+0x2b80>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d902      	bls.n	8003fd6 <menu+0x2a26>
				devirmeAsagiGeriTmr = 0;
 8003fd0:	4b57      	ldr	r3, [pc, #348]	; (8004130 <menu+0x2b80>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fd6:	f000 fe1f 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fda:	2104      	movs	r1, #4
 8003fdc:	4856      	ldr	r0, [pc, #344]	; (8004138 <menu+0x2b88>)
 8003fde:	f006 f9a1 	bl	800a324 <HAL_GPIO_ReadPin>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d115      	bne.n	8004014 <menu+0x2a64>
 8003fe8:	4b54      	ldr	r3, [pc, #336]	; (800413c <menu+0x2b8c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f083 0301 	eor.w	r3, r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00e      	beq.n	8004014 <menu+0x2a64>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <menu+0x2b80>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4b4c      	ldr	r3, [pc, #304]	; (8004130 <menu+0x2b80>)
 8004000:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8004002:	4b4b      	ldr	r3, [pc, #300]	; (8004130 <menu+0x2b80>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b06      	cmp	r3, #6
 8004008:	d902      	bls.n	8004010 <menu+0x2a60>
		   		devirmeAsagiGeriTmr = 5;
 800400a:	4b49      	ldr	r3, [pc, #292]	; (8004130 <menu+0x2b80>)
 800400c:	2205      	movs	r2, #5
 800400e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004010:	f000 fe02 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004014:	2108      	movs	r1, #8
 8004016:	4848      	ldr	r0, [pc, #288]	; (8004138 <menu+0x2b88>)
 8004018:	f006 f984 	bl	800a324 <HAL_GPIO_ReadPin>
 800401c:	4603      	mov	r3, r0
 800401e:	2b01      	cmp	r3, #1
 8004020:	d10d      	bne.n	800403e <menu+0x2a8e>
 8004022:	4b46      	ldr	r3, [pc, #280]	; (800413c <menu+0x2b8c>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f083 0301 	eor.w	r3, r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d006      	beq.n	800403e <menu+0x2a8e>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004030:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <menu+0x2b80>)
 8004032:	781a      	ldrb	r2, [r3, #0]
 8004034:	4b42      	ldr	r3, [pc, #264]	; (8004140 <menu+0x2b90>)
 8004036:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004038:	4b42      	ldr	r3, [pc, #264]	; (8004144 <menu+0x2b94>)
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800403e:	4b42      	ldr	r3, [pc, #264]	; (8004148 <menu+0x2b98>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b1a      	cmp	r3, #26
 8004044:	f040 80ec 	bne.w	8004220 <menu+0x2c70>
		if(dilSecim == 0) {
 8004048:	4b35      	ldr	r3, [pc, #212]	; (8004120 <menu+0x2b70>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <menu+0x2aac>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004050:	4a3e      	ldr	r2, [pc, #248]	; (800414c <menu+0x2b9c>)
 8004052:	2101      	movs	r1, #1
 8004054:	2001      	movs	r0, #1
 8004056:	f004 fe3f 	bl	8008cd8 <lcd_print>
 800405a:	e008      	b.n	800406e <menu+0x2abe>
		} else if(dilSecim == 1) {
 800405c:	4b30      	ldr	r3, [pc, #192]	; (8004120 <menu+0x2b70>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d104      	bne.n	800406e <menu+0x2abe>
			lcd_print(1, 1, "WORKING TIME    ");
 8004064:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <menu+0x2ba0>)
 8004066:	2101      	movs	r1, #1
 8004068:	2001      	movs	r0, #1
 800406a:	f004 fe35 	bl	8008cd8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800406e:	4b39      	ldr	r3, [pc, #228]	; (8004154 <menu+0x2ba4>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b63      	cmp	r3, #99	; 0x63
 8004074:	d91e      	bls.n	80040b4 <menu+0x2b04>
			if(dilSecim == 0) {
 8004076:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <menu+0x2b70>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <menu+0x2ad8>
				lcd_print(2, 1, "Kac Saniye     ");
 800407e:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <menu+0x2b78>)
 8004080:	2101      	movs	r1, #1
 8004082:	2002      	movs	r0, #2
 8004084:	f004 fe28 	bl	8008cd8 <lcd_print>
			}
			if(dilSecim == 1) {
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <menu+0x2b70>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d104      	bne.n	800409a <menu+0x2aea>
				lcd_print(2, 1, "Second         ");
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <menu+0x2b7c>)
 8004092:	2101      	movs	r1, #1
 8004094:	2002      	movs	r0, #2
 8004096:	f004 fe1f 	bl	8008cd8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800409a:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <menu+0x2ba4>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	220a      	movs	r2, #10
 80040a0:	4924      	ldr	r1, [pc, #144]	; (8004134 <menu+0x2b84>)
 80040a2:	4618      	mov	r0, r3
 80040a4:	f009 f9c6 	bl	800d434 <itoa>
			lcd_print(2,14,snum);
 80040a8:	4a22      	ldr	r2, [pc, #136]	; (8004134 <menu+0x2b84>)
 80040aa:	210e      	movs	r1, #14
 80040ac:	2002      	movs	r0, #2
 80040ae:	f004 fe13 	bl	8008cd8 <lcd_print>
 80040b2:	e066      	b.n	8004182 <menu+0x2bd2>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80040b4:	4b27      	ldr	r3, [pc, #156]	; (8004154 <menu+0x2ba4>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b09      	cmp	r3, #9
 80040ba:	d923      	bls.n	8004104 <menu+0x2b54>
 80040bc:	4b25      	ldr	r3, [pc, #148]	; (8004154 <menu+0x2ba4>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b63      	cmp	r3, #99	; 0x63
 80040c2:	d81f      	bhi.n	8004104 <menu+0x2b54>
			if(dilSecim == 0) {
 80040c4:	4b16      	ldr	r3, [pc, #88]	; (8004120 <menu+0x2b70>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80040cc:	4a16      	ldr	r2, [pc, #88]	; (8004128 <menu+0x2b78>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	2002      	movs	r0, #2
 80040d2:	f004 fe01 	bl	8008cd8 <lcd_print>
 80040d6:	e008      	b.n	80040ea <menu+0x2b3a>
			} else if(dilSecim == 1) {
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <menu+0x2b70>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d104      	bne.n	80040ea <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80040e0:	4a12      	ldr	r2, [pc, #72]	; (800412c <menu+0x2b7c>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2002      	movs	r0, #2
 80040e6:	f004 fdf7 	bl	8008cd8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040ea:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <menu+0x2ba4>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	220a      	movs	r2, #10
 80040f0:	4910      	ldr	r1, [pc, #64]	; (8004134 <menu+0x2b84>)
 80040f2:	4618      	mov	r0, r3
 80040f4:	f009 f99e 	bl	800d434 <itoa>
			lcd_print(2, 15, snum);
 80040f8:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <menu+0x2b84>)
 80040fa:	210f      	movs	r1, #15
 80040fc:	2002      	movs	r0, #2
 80040fe:	f004 fdeb 	bl	8008cd8 <lcd_print>
 8004102:	e03e      	b.n	8004182 <menu+0x2bd2>
		} else if(makineCalismaTmr <=  9) {
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <menu+0x2ba4>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b09      	cmp	r3, #9
 800410a:	d83a      	bhi.n	8004182 <menu+0x2bd2>
			if(dilSecim == 0) {
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <menu+0x2b70>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d121      	bne.n	8004158 <menu+0x2ba8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <menu+0x2b78>)
 8004116:	2101      	movs	r1, #1
 8004118:	2002      	movs	r0, #2
 800411a:	f004 fddd 	bl	8008cd8 <lcd_print>
 800411e:	e024      	b.n	800416a <menu+0x2bba>
 8004120:	20000b0d 	.word	0x20000b0d
 8004124:	0800ea88 	.word	0x0800ea88
 8004128:	0800e650 	.word	0x0800e650
 800412c:	0800e9c4 	.word	0x0800e9c4
 8004130:	20000b03 	.word	0x20000b03
 8004134:	20000a88 	.word	0x20000a88
 8004138:	40010800 	.word	0x40010800
 800413c:	20000b1b 	.word	0x20000b1b
 8004140:	20000a18 	.word	0x20000a18
 8004144:	20000b18 	.word	0x20000b18
 8004148:	20000aec 	.word	0x20000aec
 800414c:	0800ea9c 	.word	0x0800ea9c
 8004150:	0800eab0 	.word	0x0800eab0
 8004154:	20000b04 	.word	0x20000b04
			} else if(dilSecim == 1) {
 8004158:	4b8f      	ldr	r3, [pc, #572]	; (8004398 <menu+0x2de8>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d104      	bne.n	800416a <menu+0x2bba>
				lcd_print(2, 1, "Second         ");
 8004160:	4a8e      	ldr	r2, [pc, #568]	; (800439c <menu+0x2dec>)
 8004162:	2101      	movs	r1, #1
 8004164:	2002      	movs	r0, #2
 8004166:	f004 fdb7 	bl	8008cd8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800416a:	4b8d      	ldr	r3, [pc, #564]	; (80043a0 <menu+0x2df0>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	220a      	movs	r2, #10
 8004170:	498c      	ldr	r1, [pc, #560]	; (80043a4 <menu+0x2df4>)
 8004172:	4618      	mov	r0, r3
 8004174:	f009 f95e 	bl	800d434 <itoa>
			lcd_print(2, 16, snum);
 8004178:	4a8a      	ldr	r2, [pc, #552]	; (80043a4 <menu+0x2df4>)
 800417a:	2110      	movs	r1, #16
 800417c:	2002      	movs	r0, #2
 800417e:	f004 fdab 	bl	8008cd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004182:	2102      	movs	r1, #2
 8004184:	4888      	ldr	r0, [pc, #544]	; (80043a8 <menu+0x2df8>)
 8004186:	f006 f8cd 	bl	800a324 <HAL_GPIO_ReadPin>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d115      	bne.n	80041bc <menu+0x2c0c>
 8004190:	4b86      	ldr	r3, [pc, #536]	; (80043ac <menu+0x2dfc>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f083 0301 	eor.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <menu+0x2c0c>
			makineCalismaTmr = makineCalismaTmr + 1;
 800419e:	4b80      	ldr	r3, [pc, #512]	; (80043a0 <menu+0x2df0>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4b7e      	ldr	r3, [pc, #504]	; (80043a0 <menu+0x2df0>)
 80041a8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80041aa:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <menu+0x2df0>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2bb4      	cmp	r3, #180	; 0xb4
 80041b0:	d902      	bls.n	80041b8 <menu+0x2c08>
				makineCalismaTmr = 0;
 80041b2:	4b7b      	ldr	r3, [pc, #492]	; (80043a0 <menu+0x2df0>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041b8:	f000 fd2e 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041bc:	2104      	movs	r1, #4
 80041be:	487a      	ldr	r0, [pc, #488]	; (80043a8 <menu+0x2df8>)
 80041c0:	f006 f8b0 	bl	800a324 <HAL_GPIO_ReadPin>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d115      	bne.n	80041f6 <menu+0x2c46>
 80041ca:	4b78      	ldr	r3, [pc, #480]	; (80043ac <menu+0x2dfc>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	f083 0301 	eor.w	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00e      	beq.n	80041f6 <menu+0x2c46>
			makineCalismaTmr = makineCalismaTmr - 1;
 80041d8:	4b71      	ldr	r3, [pc, #452]	; (80043a0 <menu+0x2df0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b6f      	ldr	r3, [pc, #444]	; (80043a0 <menu+0x2df0>)
 80041e2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80041e4:	4b6e      	ldr	r3, [pc, #440]	; (80043a0 <menu+0x2df0>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2bb5      	cmp	r3, #181	; 0xb5
 80041ea:	d902      	bls.n	80041f2 <menu+0x2c42>
		   		makineCalismaTmr = 180;
 80041ec:	4b6c      	ldr	r3, [pc, #432]	; (80043a0 <menu+0x2df0>)
 80041ee:	22b4      	movs	r2, #180	; 0xb4
 80041f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041f2:	f000 fd11 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041f6:	2108      	movs	r1, #8
 80041f8:	486b      	ldr	r0, [pc, #428]	; (80043a8 <menu+0x2df8>)
 80041fa:	f006 f893 	bl	800a324 <HAL_GPIO_ReadPin>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10d      	bne.n	8004220 <menu+0x2c70>
 8004204:	4b69      	ldr	r3, [pc, #420]	; (80043ac <menu+0x2dfc>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	f083 0301 	eor.w	r3, r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <menu+0x2c70>
			eepromData[24] = makineCalismaTmr;
 8004212:	4b63      	ldr	r3, [pc, #396]	; (80043a0 <menu+0x2df0>)
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	4b66      	ldr	r3, [pc, #408]	; (80043b0 <menu+0x2e00>)
 8004218:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800421a:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <menu+0x2e04>)
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004220:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <menu+0x2e08>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b1b      	cmp	r3, #27
 8004226:	f040 8083 	bne.w	8004330 <menu+0x2d80>
		lcd_print(1, 1, "BUZZER          ");
 800422a:	4a64      	ldr	r2, [pc, #400]	; (80043bc <menu+0x2e0c>)
 800422c:	2101      	movs	r1, #1
 800422e:	2001      	movs	r0, #1
 8004230:	f004 fd52 	bl	8008cd8 <lcd_print>

		if(buzzer == 0) {
 8004234:	4b62      	ldr	r3, [pc, #392]	; (80043c0 <menu+0x2e10>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d113      	bne.n	8004264 <menu+0x2cb4>
			if(dilSecim == 0) {
 800423c:	4b56      	ldr	r3, [pc, #344]	; (8004398 <menu+0x2de8>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <menu+0x2ca0>
				lcd_print(2, 1, "Pasif           ");
 8004244:	4a5f      	ldr	r2, [pc, #380]	; (80043c4 <menu+0x2e14>)
 8004246:	2101      	movs	r1, #1
 8004248:	2002      	movs	r0, #2
 800424a:	f004 fd45 	bl	8008cd8 <lcd_print>
 800424e:	e020      	b.n	8004292 <menu+0x2ce2>
			} else if(dilSecim == 1) {
 8004250:	4b51      	ldr	r3, [pc, #324]	; (8004398 <menu+0x2de8>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d11c      	bne.n	8004292 <menu+0x2ce2>
				lcd_print(2, 1, "Passive         ");
 8004258:	4a5b      	ldr	r2, [pc, #364]	; (80043c8 <menu+0x2e18>)
 800425a:	2101      	movs	r1, #1
 800425c:	2002      	movs	r0, #2
 800425e:	f004 fd3b 	bl	8008cd8 <lcd_print>
 8004262:	e016      	b.n	8004292 <menu+0x2ce2>
			}
		} else if(buzzer == 1) {
 8004264:	4b56      	ldr	r3, [pc, #344]	; (80043c0 <menu+0x2e10>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d112      	bne.n	8004292 <menu+0x2ce2>
			if(dilSecim == 0) {
 800426c:	4b4a      	ldr	r3, [pc, #296]	; (8004398 <menu+0x2de8>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <menu+0x2cd0>
				lcd_print(2, 1, "Aktif           ");
 8004274:	4a55      	ldr	r2, [pc, #340]	; (80043cc <menu+0x2e1c>)
 8004276:	2101      	movs	r1, #1
 8004278:	2002      	movs	r0, #2
 800427a:	f004 fd2d 	bl	8008cd8 <lcd_print>
 800427e:	e008      	b.n	8004292 <menu+0x2ce2>
			} else if(dilSecim == 1) {
 8004280:	4b45      	ldr	r3, [pc, #276]	; (8004398 <menu+0x2de8>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d104      	bne.n	8004292 <menu+0x2ce2>
				lcd_print(2, 1, "Active          ");
 8004288:	4a51      	ldr	r2, [pc, #324]	; (80043d0 <menu+0x2e20>)
 800428a:	2101      	movs	r1, #1
 800428c:	2002      	movs	r0, #2
 800428e:	f004 fd23 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004292:	2102      	movs	r1, #2
 8004294:	4844      	ldr	r0, [pc, #272]	; (80043a8 <menu+0x2df8>)
 8004296:	f006 f845 	bl	800a324 <HAL_GPIO_ReadPin>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d115      	bne.n	80042cc <menu+0x2d1c>
 80042a0:	4b42      	ldr	r3, [pc, #264]	; (80043ac <menu+0x2dfc>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <menu+0x2d1c>
			buzzer = buzzer + 1;
 80042ae:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <menu+0x2e10>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <menu+0x2e10>)
 80042b8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80042ba:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <menu+0x2e10>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d902      	bls.n	80042c8 <menu+0x2d18>
				buzzer = 0;
 80042c2:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <menu+0x2e10>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042c8:	f000 fca6 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042cc:	2104      	movs	r1, #4
 80042ce:	4836      	ldr	r0, [pc, #216]	; (80043a8 <menu+0x2df8>)
 80042d0:	f006 f828 	bl	800a324 <HAL_GPIO_ReadPin>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d115      	bne.n	8004306 <menu+0x2d56>
 80042da:	4b34      	ldr	r3, [pc, #208]	; (80043ac <menu+0x2dfc>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f083 0301 	eor.w	r3, r3, #1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <menu+0x2d56>
			buzzer = buzzer - 1;
 80042e8:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <menu+0x2e10>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <menu+0x2e10>)
 80042f2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80042f4:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <menu+0x2e10>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <menu+0x2d52>
		   		buzzer = 1;
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <menu+0x2e10>)
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004302:	f000 fc89 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004306:	2108      	movs	r1, #8
 8004308:	4827      	ldr	r0, [pc, #156]	; (80043a8 <menu+0x2df8>)
 800430a:	f006 f80b 	bl	800a324 <HAL_GPIO_ReadPin>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d10d      	bne.n	8004330 <menu+0x2d80>
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <menu+0x2dfc>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	f083 0301 	eor.w	r3, r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d006      	beq.n	8004330 <menu+0x2d80>
			eepromData[25] = buzzer;
 8004322:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <menu+0x2e10>)
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <menu+0x2e00>)
 8004328:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <menu+0x2e04>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004330:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <menu+0x2e08>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b1c      	cmp	r3, #28
 8004336:	f040 80ab 	bne.w	8004490 <menu+0x2ee0>
		calismaSayModu = 0;
 800433a:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <menu+0x2e24>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004340:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <menu+0x2e28>)
 8004342:	2101      	movs	r1, #1
 8004344:	2001      	movs	r0, #1
 8004346:	f004 fcc7 	bl	8008cd8 <lcd_print>

		if(demoMode == 0) {
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <menu+0x2e2c>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d113      	bne.n	800437a <menu+0x2dca>
			if(dilSecim == 0) {
 8004352:	4b11      	ldr	r3, [pc, #68]	; (8004398 <menu+0x2de8>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d105      	bne.n	8004366 <menu+0x2db6>
				lcd_print(2, 1, "Pasif           ");
 800435a:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <menu+0x2e14>)
 800435c:	2101      	movs	r1, #1
 800435e:	2002      	movs	r0, #2
 8004360:	f004 fcba 	bl	8008cd8 <lcd_print>
 8004364:	e045      	b.n	80043f2 <menu+0x2e42>
			} else if(dilSecim == 1) {
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <menu+0x2de8>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d141      	bne.n	80043f2 <menu+0x2e42>
				lcd_print(2, 1, "Passive         ");
 800436e:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <menu+0x2e18>)
 8004370:	2101      	movs	r1, #1
 8004372:	2002      	movs	r0, #2
 8004374:	f004 fcb0 	bl	8008cd8 <lcd_print>
 8004378:	e03b      	b.n	80043f2 <menu+0x2e42>
			}
		} else if(demoMode == 1) {
 800437a:	4b18      	ldr	r3, [pc, #96]	; (80043dc <menu+0x2e2c>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d137      	bne.n	80043f2 <menu+0x2e42>
			if(dilSecim == 0){
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <menu+0x2de8>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d12a      	bne.n	80043e0 <menu+0x2e30>
				lcd_print(2, 1, "Aktif           ");
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <menu+0x2e1c>)
 800438c:	2101      	movs	r1, #1
 800438e:	2002      	movs	r0, #2
 8004390:	f004 fca2 	bl	8008cd8 <lcd_print>
 8004394:	e02d      	b.n	80043f2 <menu+0x2e42>
 8004396:	bf00      	nop
 8004398:	20000b0d 	.word	0x20000b0d
 800439c:	0800e9c4 	.word	0x0800e9c4
 80043a0:	20000b04 	.word	0x20000b04
 80043a4:	20000a88 	.word	0x20000a88
 80043a8:	40010800 	.word	0x40010800
 80043ac:	20000b1b 	.word	0x20000b1b
 80043b0:	20000a18 	.word	0x20000a18
 80043b4:	20000b18 	.word	0x20000b18
 80043b8:	20000aec 	.word	0x20000aec
 80043bc:	0800eac4 	.word	0x0800eac4
 80043c0:	20000b08 	.word	0x20000b08
 80043c4:	0800e3ec 	.word	0x0800e3ec
 80043c8:	0800e400 	.word	0x0800e400
 80043cc:	0800e44c 	.word	0x0800e44c
 80043d0:	0800e460 	.word	0x0800e460
 80043d4:	20000b0c 	.word	0x20000b0c
 80043d8:	0800ead8 	.word	0x0800ead8
 80043dc:	20000b0a 	.word	0x20000b0a
			} else if(dilSecim == 1) {
 80043e0:	4b71      	ldr	r3, [pc, #452]	; (80045a8 <menu+0x2ff8>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d104      	bne.n	80043f2 <menu+0x2e42>
				lcd_print(2, 1, "Active          ");
 80043e8:	4a70      	ldr	r2, [pc, #448]	; (80045ac <menu+0x2ffc>)
 80043ea:	2101      	movs	r1, #1
 80043ec:	2002      	movs	r0, #2
 80043ee:	f004 fc73 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043f2:	2102      	movs	r1, #2
 80043f4:	486e      	ldr	r0, [pc, #440]	; (80045b0 <menu+0x3000>)
 80043f6:	f005 ff95 	bl	800a324 <HAL_GPIO_ReadPin>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d115      	bne.n	800442c <menu+0x2e7c>
 8004400:	4b6c      	ldr	r3, [pc, #432]	; (80045b4 <menu+0x3004>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f083 0301 	eor.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00e      	beq.n	800442c <menu+0x2e7c>
			demoMode = demoMode + 1;
 800440e:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <menu+0x3008>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4b68      	ldr	r3, [pc, #416]	; (80045b8 <menu+0x3008>)
 8004418:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800441a:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <menu+0x3008>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d902      	bls.n	8004428 <menu+0x2e78>
				demoMode = 0;
 8004422:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <menu+0x3008>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004428:	f000 fbf6 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800442c:	2104      	movs	r1, #4
 800442e:	4860      	ldr	r0, [pc, #384]	; (80045b0 <menu+0x3000>)
 8004430:	f005 ff78 	bl	800a324 <HAL_GPIO_ReadPin>
 8004434:	4603      	mov	r3, r0
 8004436:	2b01      	cmp	r3, #1
 8004438:	d115      	bne.n	8004466 <menu+0x2eb6>
 800443a:	4b5e      	ldr	r3, [pc, #376]	; (80045b4 <menu+0x3004>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <menu+0x2eb6>
			demoMode = demoMode - 1;
 8004448:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <menu+0x3008>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	3b01      	subs	r3, #1
 800444e:	b2da      	uxtb	r2, r3
 8004450:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <menu+0x3008>)
 8004452:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004454:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <menu+0x3008>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <menu+0x2eb2>
		   		demoMode = 1;
 800445c:	4b56      	ldr	r3, [pc, #344]	; (80045b8 <menu+0x3008>)
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004462:	f000 fbd9 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004466:	2108      	movs	r1, #8
 8004468:	4851      	ldr	r0, [pc, #324]	; (80045b0 <menu+0x3000>)
 800446a:	f005 ff5b 	bl	800a324 <HAL_GPIO_ReadPin>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d10d      	bne.n	8004490 <menu+0x2ee0>
 8004474:	4b4f      	ldr	r3, [pc, #316]	; (80045b4 <menu+0x3004>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	f083 0301 	eor.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <menu+0x2ee0>
			eepromData[26] = demoMode;
 8004482:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <menu+0x3008>)
 8004484:	781a      	ldrb	r2, [r3, #0]
 8004486:	4b4d      	ldr	r3, [pc, #308]	; (80045bc <menu+0x300c>)
 8004488:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800448a:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <menu+0x3010>)
 800448c:	2201      	movs	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004490:	4b4c      	ldr	r3, [pc, #304]	; (80045c4 <menu+0x3014>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b1d      	cmp	r3, #29
 8004496:	f040 8132 	bne.w	80046fe <menu+0x314e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800449a:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <menu+0x3018>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d113      	bne.n	80044ca <menu+0x2f1a>
 80044a2:	4b4a      	ldr	r3, [pc, #296]	; (80045cc <menu+0x301c>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <menu+0x2f1a>
 80044aa:	4b49      	ldr	r3, [pc, #292]	; (80045d0 <menu+0x3020>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <menu+0x2f1a>
 80044b2:	4b48      	ldr	r3, [pc, #288]	; (80045d4 <menu+0x3024>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <menu+0x2f1a>
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <menu+0x3028>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <menu+0x2f1a>
			calismaSayisiYar = 0;
 80044c2:	4b46      	ldr	r3, [pc, #280]	; (80045dc <menu+0x302c>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e002      	b.n	80044d0 <menu+0x2f20>
		} else {
			calismaSayisiYar = 1;
 80044ca:	4b44      	ldr	r3, [pc, #272]	; (80045dc <menu+0x302c>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80044d0:	4b43      	ldr	r3, [pc, #268]	; (80045e0 <menu+0x3030>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d154      	bne.n	8004582 <menu+0x2fd2>
			if(dilSecim == 0) {
 80044d8:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <menu+0x2ff8>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <menu+0x2f3c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80044e0:	4a40      	ldr	r2, [pc, #256]	; (80045e4 <menu+0x3034>)
 80044e2:	2101      	movs	r1, #1
 80044e4:	2001      	movs	r0, #1
 80044e6:	f004 fbf7 	bl	8008cd8 <lcd_print>
 80044ea:	e008      	b.n	80044fe <menu+0x2f4e>
			} else if(dilSecim == 1) {
 80044ec:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <menu+0x2ff8>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d104      	bne.n	80044fe <menu+0x2f4e>
				lcd_print(1, 1, "Working Cycle   ");
 80044f4:	4a3c      	ldr	r2, [pc, #240]	; (80045e8 <menu+0x3038>)
 80044f6:	2101      	movs	r1, #1
 80044f8:	2001      	movs	r0, #1
 80044fa:	f004 fbed 	bl	8008cd8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <menu+0x3028>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	220a      	movs	r2, #10
 8004504:	4939      	ldr	r1, [pc, #228]	; (80045ec <menu+0x303c>)
 8004506:	4618      	mov	r0, r3
 8004508:	f008 ff94 	bl	800d434 <itoa>
			lcd_print(2, 12, snum);
 800450c:	4a37      	ldr	r2, [pc, #220]	; (80045ec <menu+0x303c>)
 800450e:	210c      	movs	r1, #12
 8004510:	2002      	movs	r0, #2
 8004512:	f004 fbe1 	bl	8008cd8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004516:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <menu+0x3024>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	220a      	movs	r2, #10
 800451c:	4933      	ldr	r1, [pc, #204]	; (80045ec <menu+0x303c>)
 800451e:	4618      	mov	r0, r3
 8004520:	f008 ff88 	bl	800d434 <itoa>
			lcd_print(2, 13, snum);
 8004524:	4a31      	ldr	r2, [pc, #196]	; (80045ec <menu+0x303c>)
 8004526:	210d      	movs	r1, #13
 8004528:	2002      	movs	r0, #2
 800452a:	f004 fbd5 	bl	8008cd8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800452e:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <menu+0x3020>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	220a      	movs	r2, #10
 8004534:	492d      	ldr	r1, [pc, #180]	; (80045ec <menu+0x303c>)
 8004536:	4618      	mov	r0, r3
 8004538:	f008 ff7c 	bl	800d434 <itoa>
			lcd_print(2, 14, snum);
 800453c:	4a2b      	ldr	r2, [pc, #172]	; (80045ec <menu+0x303c>)
 800453e:	210e      	movs	r1, #14
 8004540:	2002      	movs	r0, #2
 8004542:	f004 fbc9 	bl	8008cd8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004546:	4b21      	ldr	r3, [pc, #132]	; (80045cc <menu+0x301c>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	220a      	movs	r2, #10
 800454c:	4927      	ldr	r1, [pc, #156]	; (80045ec <menu+0x303c>)
 800454e:	4618      	mov	r0, r3
 8004550:	f008 ff70 	bl	800d434 <itoa>
			lcd_print(2, 15, snum);
 8004554:	4a25      	ldr	r2, [pc, #148]	; (80045ec <menu+0x303c>)
 8004556:	210f      	movs	r1, #15
 8004558:	2002      	movs	r0, #2
 800455a:	f004 fbbd 	bl	8008cd8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <menu+0x3018>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	220a      	movs	r2, #10
 8004564:	4921      	ldr	r1, [pc, #132]	; (80045ec <menu+0x303c>)
 8004566:	4618      	mov	r0, r3
 8004568:	f008 ff64 	bl	800d434 <itoa>
			lcd_print(2, 16, snum);
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <menu+0x303c>)
 800456e:	2110      	movs	r1, #16
 8004570:	2002      	movs	r0, #2
 8004572:	f004 fbb1 	bl	8008cd8 <lcd_print>

			lcd_print(2, 1, "           ");
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <menu+0x3040>)
 8004578:	2101      	movs	r1, #1
 800457a:	2002      	movs	r0, #2
 800457c:	f004 fbac 	bl	8008cd8 <lcd_print>
 8004580:	e048      	b.n	8004614 <menu+0x3064>
		} else if(calismaSayModu == 1) {
 8004582:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <menu+0x3030>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d144      	bne.n	8004614 <menu+0x3064>
			if(dilSecim == 0) {
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <menu+0x2ff8>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d132      	bne.n	80045f8 <menu+0x3048>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004592:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <menu+0x3034>)
 8004594:	2101      	movs	r1, #1
 8004596:	2001      	movs	r0, #1
 8004598:	f004 fb9e 	bl	8008cd8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <menu+0x3044>)
 800459e:	2101      	movs	r1, #1
 80045a0:	2002      	movs	r0, #2
 80045a2:	f004 fb99 	bl	8008cd8 <lcd_print>
 80045a6:	e035      	b.n	8004614 <menu+0x3064>
 80045a8:	20000b0d 	.word	0x20000b0d
 80045ac:	0800e460 	.word	0x0800e460
 80045b0:	40010800 	.word	0x40010800
 80045b4:	20000b1b 	.word	0x20000b1b
 80045b8:	20000b0a 	.word	0x20000b0a
 80045bc:	20000a18 	.word	0x20000a18
 80045c0:	20000b18 	.word	0x20000b18
 80045c4:	20000aec 	.word	0x20000aec
 80045c8:	20000ae9 	.word	0x20000ae9
 80045cc:	20000aea 	.word	0x20000aea
 80045d0:	20000000 	.word	0x20000000
 80045d4:	20000001 	.word	0x20000001
 80045d8:	20000aeb 	.word	0x20000aeb
 80045dc:	20000b2d 	.word	0x20000b2d
 80045e0:	20000b0c 	.word	0x20000b0c
 80045e4:	0800eae8 	.word	0x0800eae8
 80045e8:	0800eafc 	.word	0x0800eafc
 80045ec:	20000a88 	.word	0x20000a88
 80045f0:	0800eb10 	.word	0x0800eb10
 80045f4:	0800eb1c 	.word	0x0800eb1c
			} else if(dilSecim == 1) {
 80045f8:	4b94      	ldr	r3, [pc, #592]	; (800484c <menu+0x329c>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d109      	bne.n	8004614 <menu+0x3064>
				lcd_print(1, 1, "Working Cycle   ");
 8004600:	4a93      	ldr	r2, [pc, #588]	; (8004850 <menu+0x32a0>)
 8004602:	2101      	movs	r1, #1
 8004604:	2001      	movs	r0, #1
 8004606:	f004 fb67 	bl	8008cd8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800460a:	4a92      	ldr	r2, [pc, #584]	; (8004854 <menu+0x32a4>)
 800460c:	2101      	movs	r1, #1
 800460e:	2002      	movs	r0, #2
 8004610:	f004 fb62 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004614:	2102      	movs	r1, #2
 8004616:	4890      	ldr	r0, [pc, #576]	; (8004858 <menu+0x32a8>)
 8004618:	f005 fe84 	bl	800a324 <HAL_GPIO_ReadPin>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d119      	bne.n	8004656 <menu+0x30a6>
 8004622:	4b8e      	ldr	r3, [pc, #568]	; (800485c <menu+0x32ac>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	f083 0301 	eor.w	r3, r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d012      	beq.n	8004656 <menu+0x30a6>
 8004630:	4b8b      	ldr	r3, [pc, #556]	; (8004860 <menu+0x32b0>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00e      	beq.n	8004656 <menu+0x30a6>
			calismaSayModu = calismaSayModu + 1;
 8004638:	4b8a      	ldr	r3, [pc, #552]	; (8004864 <menu+0x32b4>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	b2da      	uxtb	r2, r3
 8004640:	4b88      	ldr	r3, [pc, #544]	; (8004864 <menu+0x32b4>)
 8004642:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004644:	4b87      	ldr	r3, [pc, #540]	; (8004864 <menu+0x32b4>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d902      	bls.n	8004652 <menu+0x30a2>
				calismaSayModu = 0;
 800464c:	4b85      	ldr	r3, [pc, #532]	; (8004864 <menu+0x32b4>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004652:	f000 fae1 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004656:	2104      	movs	r1, #4
 8004658:	487f      	ldr	r0, [pc, #508]	; (8004858 <menu+0x32a8>)
 800465a:	f005 fe63 	bl	800a324 <HAL_GPIO_ReadPin>
 800465e:	4603      	mov	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	d119      	bne.n	8004698 <menu+0x30e8>
 8004664:	4b7d      	ldr	r3, [pc, #500]	; (800485c <menu+0x32ac>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f083 0301 	eor.w	r3, r3, #1
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d012      	beq.n	8004698 <menu+0x30e8>
 8004672:	4b7b      	ldr	r3, [pc, #492]	; (8004860 <menu+0x32b0>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <menu+0x30e8>
			calismaSayModu = calismaSayModu - 1;
 800467a:	4b7a      	ldr	r3, [pc, #488]	; (8004864 <menu+0x32b4>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b78      	ldr	r3, [pc, #480]	; (8004864 <menu+0x32b4>)
 8004684:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004686:	4b77      	ldr	r3, [pc, #476]	; (8004864 <menu+0x32b4>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <menu+0x30e4>
		   		calismaSayModu = 1;
 800468e:	4b75      	ldr	r3, [pc, #468]	; (8004864 <menu+0x32b4>)
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004694:	f000 fac0 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004698:	2108      	movs	r1, #8
 800469a:	486f      	ldr	r0, [pc, #444]	; (8004858 <menu+0x32a8>)
 800469c:	f005 fe42 	bl	800a324 <HAL_GPIO_ReadPin>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d12b      	bne.n	80046fe <menu+0x314e>
 80046a6:	4b6d      	ldr	r3, [pc, #436]	; (800485c <menu+0x32ac>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	f083 0301 	eor.w	r3, r3, #1
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d024      	beq.n	80046fe <menu+0x314e>
			eepromData[32] = 0;
 80046b4:	4b6c      	ldr	r3, [pc, #432]	; (8004868 <menu+0x32b8>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80046bc:	4b6a      	ldr	r3, [pc, #424]	; (8004868 <menu+0x32b8>)
 80046be:	2200      	movs	r2, #0
 80046c0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80046c2:	4b69      	ldr	r3, [pc, #420]	; (8004868 <menu+0x32b8>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80046c8:	4b67      	ldr	r3, [pc, #412]	; (8004868 <menu+0x32b8>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80046ce:	4b66      	ldr	r3, [pc, #408]	; (8004868 <menu+0x32b8>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80046d4:	4b65      	ldr	r3, [pc, #404]	; (800486c <menu+0x32bc>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80046da:	4b65      	ldr	r3, [pc, #404]	; (8004870 <menu+0x32c0>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80046e0:	4b64      	ldr	r3, [pc, #400]	; (8004874 <menu+0x32c4>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80046e6:	4b64      	ldr	r3, [pc, #400]	; (8004878 <menu+0x32c8>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80046ec:	4b63      	ldr	r3, [pc, #396]	; (800487c <menu+0x32cc>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80046f2:	4b5c      	ldr	r3, [pc, #368]	; (8004864 <menu+0x32b4>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80046f8:	4b61      	ldr	r3, [pc, #388]	; (8004880 <menu+0x32d0>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80046fe:	4b61      	ldr	r3, [pc, #388]	; (8004884 <menu+0x32d4>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b1e      	cmp	r3, #30
 8004704:	d16f      	bne.n	80047e6 <menu+0x3236>
		calismaSayModu = 0;
 8004706:	4b57      	ldr	r3, [pc, #348]	; (8004864 <menu+0x32b4>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800470c:	4b4f      	ldr	r3, [pc, #316]	; (800484c <menu+0x329c>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <menu+0x317a>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004714:	4a5c      	ldr	r2, [pc, #368]	; (8004888 <menu+0x32d8>)
 8004716:	2101      	movs	r1, #1
 8004718:	2001      	movs	r0, #1
 800471a:	f004 fadd 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800471e:	4a5b      	ldr	r2, [pc, #364]	; (800488c <menu+0x32dc>)
 8004720:	2101      	movs	r1, #1
 8004722:	2002      	movs	r0, #2
 8004724:	f004 fad8 	bl	8008cd8 <lcd_print>
 8004728:	e00d      	b.n	8004746 <menu+0x3196>
		} else if(dilSecim == 1) {
 800472a:	4b48      	ldr	r3, [pc, #288]	; (800484c <menu+0x329c>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d109      	bne.n	8004746 <menu+0x3196>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004732:	4a57      	ldr	r2, [pc, #348]	; (8004890 <menu+0x32e0>)
 8004734:	2101      	movs	r1, #1
 8004736:	2001      	movs	r0, #1
 8004738:	f004 face 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800473c:	4a55      	ldr	r2, [pc, #340]	; (8004894 <menu+0x32e4>)
 800473e:	2101      	movs	r1, #1
 8004740:	2002      	movs	r0, #2
 8004742:	f004 fac9 	bl	8008cd8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004746:	2102      	movs	r1, #2
 8004748:	4843      	ldr	r0, [pc, #268]	; (8004858 <menu+0x32a8>)
 800474a:	f005 fdeb 	bl	800a324 <HAL_GPIO_ReadPin>
 800474e:	4603      	mov	r3, r0
 8004750:	2b01      	cmp	r3, #1
 8004752:	d115      	bne.n	8004780 <menu+0x31d0>
 8004754:	4b41      	ldr	r3, [pc, #260]	; (800485c <menu+0x32ac>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f083 0301 	eor.w	r3, r3, #1
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00e      	beq.n	8004780 <menu+0x31d0>
			dilSecim = dilSecim + 1;
 8004762:	4b3a      	ldr	r3, [pc, #232]	; (800484c <menu+0x329c>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	4b38      	ldr	r3, [pc, #224]	; (800484c <menu+0x329c>)
 800476c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800476e:	4b37      	ldr	r3, [pc, #220]	; (800484c <menu+0x329c>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d902      	bls.n	800477c <menu+0x31cc>
				dilSecim = 0;
 8004776:	4b35      	ldr	r3, [pc, #212]	; (800484c <menu+0x329c>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800477c:	f000 fa4c 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004780:	2104      	movs	r1, #4
 8004782:	4835      	ldr	r0, [pc, #212]	; (8004858 <menu+0x32a8>)
 8004784:	f005 fdce 	bl	800a324 <HAL_GPIO_ReadPin>
 8004788:	4603      	mov	r3, r0
 800478a:	2b01      	cmp	r3, #1
 800478c:	d115      	bne.n	80047ba <menu+0x320a>
 800478e:	4b33      	ldr	r3, [pc, #204]	; (800485c <menu+0x32ac>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f083 0301 	eor.w	r3, r3, #1
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00e      	beq.n	80047ba <menu+0x320a>
			dilSecim = dilSecim - 1;
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <menu+0x329c>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	4b29      	ldr	r3, [pc, #164]	; (800484c <menu+0x329c>)
 80047a6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80047a8:	4b28      	ldr	r3, [pc, #160]	; (800484c <menu+0x329c>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <menu+0x3206>
		   		dilSecim = 1;
 80047b0:	4b26      	ldr	r3, [pc, #152]	; (800484c <menu+0x329c>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80047b6:	f000 fa2f 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ba:	2108      	movs	r1, #8
 80047bc:	4826      	ldr	r0, [pc, #152]	; (8004858 <menu+0x32a8>)
 80047be:	f005 fdb1 	bl	800a324 <HAL_GPIO_ReadPin>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10e      	bne.n	80047e6 <menu+0x3236>
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <menu+0x32ac>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <menu+0x3236>
			eepromData[33] = dilSecim;
 80047d6:	4b1d      	ldr	r3, [pc, #116]	; (800484c <menu+0x329c>)
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <menu+0x32b8>)
 80047dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <menu+0x32d0>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80047e6:	4b27      	ldr	r3, [pc, #156]	; (8004884 <menu+0x32d4>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b1f      	cmp	r3, #31
 80047ec:	f040 80b7 	bne.w	800495e <menu+0x33ae>
		calismaSayModu = 0;
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <menu+0x32b4>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80047f6:	4a28      	ldr	r2, [pc, #160]	; (8004898 <menu+0x32e8>)
 80047f8:	2101      	movs	r1, #1
 80047fa:	2001      	movs	r0, #1
 80047fc:	f004 fa6c 	bl	8008cd8 <lcd_print>

		if(iotMode == 0) {
 8004800:	4b26      	ldr	r3, [pc, #152]	; (800489c <menu+0x32ec>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d113      	bne.n	8004830 <menu+0x3280>
			if(dilSecim == 0) {
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <menu+0x329c>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d105      	bne.n	800481c <menu+0x326c>
				lcd_print(2, 1, "Pasif           ");
 8004810:	4a23      	ldr	r2, [pc, #140]	; (80048a0 <menu+0x32f0>)
 8004812:	2101      	movs	r1, #1
 8004814:	2002      	movs	r0, #2
 8004816:	f004 fa5f 	bl	8008cd8 <lcd_print>
 800481a:	e050      	b.n	80048be <menu+0x330e>
			} else if(dilSecim == 1) {
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <menu+0x329c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d14c      	bne.n	80048be <menu+0x330e>
				lcd_print(2, 1, "Passive         ");
 8004824:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <menu+0x32f4>)
 8004826:	2101      	movs	r1, #1
 8004828:	2002      	movs	r0, #2
 800482a:	f004 fa55 	bl	8008cd8 <lcd_print>
 800482e:	e046      	b.n	80048be <menu+0x330e>
			}
		} else if(iotMode == 1) {
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <menu+0x32ec>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d142      	bne.n	80048be <menu+0x330e>
			if(dilSecim == 0) {
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <menu+0x329c>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d135      	bne.n	80048ac <menu+0x32fc>
				lcd_print(2, 1, "Aktif           ");
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <menu+0x32f8>)
 8004842:	2101      	movs	r1, #1
 8004844:	2002      	movs	r0, #2
 8004846:	f004 fa47 	bl	8008cd8 <lcd_print>
 800484a:	e038      	b.n	80048be <menu+0x330e>
 800484c:	20000b0d 	.word	0x20000b0d
 8004850:	0800eafc 	.word	0x0800eafc
 8004854:	0800eb30 	.word	0x0800eb30
 8004858:	40010800 	.word	0x40010800
 800485c:	20000b1b 	.word	0x20000b1b
 8004860:	20000b2d 	.word	0x20000b2d
 8004864:	20000b0c 	.word	0x20000b0c
 8004868:	20000a18 	.word	0x20000a18
 800486c:	20000aeb 	.word	0x20000aeb
 8004870:	20000001 	.word	0x20000001
 8004874:	20000000 	.word	0x20000000
 8004878:	20000aea 	.word	0x20000aea
 800487c:	20000ae9 	.word	0x20000ae9
 8004880:	20000b18 	.word	0x20000b18
 8004884:	20000aec 	.word	0x20000aec
 8004888:	0800eb44 	.word	0x0800eb44
 800488c:	0800eb58 	.word	0x0800eb58
 8004890:	0800eb6c 	.word	0x0800eb6c
 8004894:	0800eb80 	.word	0x0800eb80
 8004898:	0800eb94 	.word	0x0800eb94
 800489c:	20000b0b 	.word	0x20000b0b
 80048a0:	0800e3ec 	.word	0x0800e3ec
 80048a4:	0800e400 	.word	0x0800e400
 80048a8:	0800e44c 	.word	0x0800e44c
			} else if(dilSecim == 1) {
 80048ac:	4ba1      	ldr	r3, [pc, #644]	; (8004b34 <menu+0x3584>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d104      	bne.n	80048be <menu+0x330e>
				lcd_print(2, 1, "Active          ");
 80048b4:	4aa0      	ldr	r2, [pc, #640]	; (8004b38 <menu+0x3588>)
 80048b6:	2101      	movs	r1, #1
 80048b8:	2002      	movs	r0, #2
 80048ba:	f004 fa0d 	bl	8008cd8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80048be:	2102      	movs	r1, #2
 80048c0:	489e      	ldr	r0, [pc, #632]	; (8004b3c <menu+0x358c>)
 80048c2:	f005 fd2f 	bl	800a324 <HAL_GPIO_ReadPin>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d115      	bne.n	80048f8 <menu+0x3348>
 80048cc:	4b9c      	ldr	r3, [pc, #624]	; (8004b40 <menu+0x3590>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	f083 0301 	eor.w	r3, r3, #1
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <menu+0x3348>
			iotMode = iotMode + 1;
 80048da:	4b9a      	ldr	r3, [pc, #616]	; (8004b44 <menu+0x3594>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4b98      	ldr	r3, [pc, #608]	; (8004b44 <menu+0x3594>)
 80048e4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80048e6:	4b97      	ldr	r3, [pc, #604]	; (8004b44 <menu+0x3594>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d902      	bls.n	80048f4 <menu+0x3344>
				iotMode = 0;
 80048ee:	4b95      	ldr	r3, [pc, #596]	; (8004b44 <menu+0x3594>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80048f4:	f000 f990 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048f8:	2104      	movs	r1, #4
 80048fa:	4890      	ldr	r0, [pc, #576]	; (8004b3c <menu+0x358c>)
 80048fc:	f005 fd12 	bl	800a324 <HAL_GPIO_ReadPin>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d115      	bne.n	8004932 <menu+0x3382>
 8004906:	4b8e      	ldr	r3, [pc, #568]	; (8004b40 <menu+0x3590>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	f083 0301 	eor.w	r3, r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00e      	beq.n	8004932 <menu+0x3382>
			iotMode = iotMode - 1;
 8004914:	4b8b      	ldr	r3, [pc, #556]	; (8004b44 <menu+0x3594>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	3b01      	subs	r3, #1
 800491a:	b2da      	uxtb	r2, r3
 800491c:	4b89      	ldr	r3, [pc, #548]	; (8004b44 <menu+0x3594>)
 800491e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004920:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <menu+0x3594>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <menu+0x337e>
		   		iotMode = 1;
 8004928:	4b86      	ldr	r3, [pc, #536]	; (8004b44 <menu+0x3594>)
 800492a:	2201      	movs	r2, #1
 800492c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800492e:	f000 f973 	bl	8004c18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004932:	2108      	movs	r1, #8
 8004934:	4881      	ldr	r0, [pc, #516]	; (8004b3c <menu+0x358c>)
 8004936:	f005 fcf5 	bl	800a324 <HAL_GPIO_ReadPin>
 800493a:	4603      	mov	r3, r0
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10e      	bne.n	800495e <menu+0x33ae>
 8004940:	4b7f      	ldr	r3, [pc, #508]	; (8004b40 <menu+0x3590>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	f083 0301 	eor.w	r3, r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <menu+0x33ae>
			eepromData[48] = iotMode;
 800494e:	4b7d      	ldr	r3, [pc, #500]	; (8004b44 <menu+0x3594>)
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	4b7d      	ldr	r3, [pc, #500]	; (8004b48 <menu+0x3598>)
 8004954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004958:	4b7c      	ldr	r3, [pc, #496]	; (8004b4c <menu+0x359c>)
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800495e:	4b7c      	ldr	r3, [pc, #496]	; (8004b50 <menu+0x35a0>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b20      	cmp	r3, #32
 8004964:	d12b      	bne.n	80049be <menu+0x340e>
		calismaSayModu = 0;
 8004966:	4b7b      	ldr	r3, [pc, #492]	; (8004b54 <menu+0x35a4>)
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 800496c:	2001      	movs	r0, #1
 800496e:	f7fb fee7 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8004972:	2032      	movs	r0, #50	; 0x32
 8004974:	f004 ff06 	bl	8009784 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8004978:	2001      	movs	r0, #1
 800497a:	f7fc fd77 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800497e:	2102      	movs	r1, #2
 8004980:	486e      	ldr	r0, [pc, #440]	; (8004b3c <menu+0x358c>)
 8004982:	f005 fccf 	bl	800a324 <HAL_GPIO_ReadPin>
 8004986:	4603      	mov	r3, r0
 8004988:	2b01      	cmp	r3, #1
 800498a:	d118      	bne.n	80049be <menu+0x340e>
 800498c:	2104      	movs	r1, #4
 800498e:	486b      	ldr	r0, [pc, #428]	; (8004b3c <menu+0x358c>)
 8004990:	f005 fcc8 	bl	800a324 <HAL_GPIO_ReadPin>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d111      	bne.n	80049be <menu+0x340e>
 800499a:	4b69      	ldr	r3, [pc, #420]	; (8004b40 <menu+0x3590>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	f083 0301 	eor.w	r3, r3, #1
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <menu+0x340e>
			takeMachineID();
 80049a8:	f003 f924 	bl	8007bf4 <takeMachineID>

			convertArrays(1);
 80049ac:	2001      	movs	r0, #1
 80049ae:	f7fb fec7 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 80049b2:	2032      	movs	r0, #50	; 0x32
 80049b4:	f004 fee6 	bl	8009784 <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 80049b8:	2001      	movs	r0, #1
 80049ba:	f7fc fd57 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 33) {
 80049be:	4b64      	ldr	r3, [pc, #400]	; (8004b50 <menu+0x35a0>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b21      	cmp	r3, #33	; 0x21
 80049c4:	d12e      	bne.n	8004a24 <menu+0x3474>
		calismaSayModu = 0;
 80049c6:	4b63      	ldr	r3, [pc, #396]	; (8004b54 <menu+0x35a4>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 80049cc:	2001      	movs	r0, #1
 80049ce:	f004 f9cf 	bl	8008d70 <lcd_backlight>

		convertArrays(2);
 80049d2:	2002      	movs	r0, #2
 80049d4:	f7fb feb4 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 80049d8:	2032      	movs	r0, #50	; 0x32
 80049da:	f004 fed3 	bl	8009784 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 80049de:	2002      	movs	r0, #2
 80049e0:	f7fc fd44 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049e4:	2102      	movs	r1, #2
 80049e6:	4855      	ldr	r0, [pc, #340]	; (8004b3c <menu+0x358c>)
 80049e8:	f005 fc9c 	bl	800a324 <HAL_GPIO_ReadPin>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d118      	bne.n	8004a24 <menu+0x3474>
 80049f2:	2104      	movs	r1, #4
 80049f4:	4851      	ldr	r0, [pc, #324]	; (8004b3c <menu+0x358c>)
 80049f6:	f005 fc95 	bl	800a324 <HAL_GPIO_ReadPin>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d111      	bne.n	8004a24 <menu+0x3474>
 8004a00:	4b4f      	ldr	r3, [pc, #316]	; (8004b40 <menu+0x3590>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	f083 0301 	eor.w	r3, r3, #1
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <menu+0x3474>
			takeWifiSSID();
 8004a0e:	f003 fa89 	bl	8007f24 <takeWifiSSID>

			convertArrays(2);
 8004a12:	2002      	movs	r0, #2
 8004a14:	f7fb fe94 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8004a18:	2032      	movs	r0, #50	; 0x32
 8004a1a:	f004 feb3 	bl	8009784 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8004a1e:	2002      	movs	r0, #2
 8004a20:	f7fc fd24 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8004a24:	4b4a      	ldr	r3, [pc, #296]	; (8004b50 <menu+0x35a0>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b22      	cmp	r3, #34	; 0x22
 8004a2a:	d12e      	bne.n	8004a8a <menu+0x34da>
		calismaSayModu = 0;
 8004a2c:	4b49      	ldr	r3, [pc, #292]	; (8004b54 <menu+0x35a4>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004a32:	2001      	movs	r0, #1
 8004a34:	f004 f99c 	bl	8008d70 <lcd_backlight>

		convertArrays(3);
 8004a38:	2003      	movs	r0, #3
 8004a3a:	f7fb fe81 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8004a3e:	2032      	movs	r0, #50	; 0x32
 8004a40:	f004 fea0 	bl	8009784 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8004a44:	2003      	movs	r0, #3
 8004a46:	f7fc fd11 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a4a:	2102      	movs	r1, #2
 8004a4c:	483b      	ldr	r0, [pc, #236]	; (8004b3c <menu+0x358c>)
 8004a4e:	f005 fc69 	bl	800a324 <HAL_GPIO_ReadPin>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d118      	bne.n	8004a8a <menu+0x34da>
 8004a58:	2104      	movs	r1, #4
 8004a5a:	4838      	ldr	r0, [pc, #224]	; (8004b3c <menu+0x358c>)
 8004a5c:	f005 fc62 	bl	800a324 <HAL_GPIO_ReadPin>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d111      	bne.n	8004a8a <menu+0x34da>
 8004a66:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <menu+0x3590>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	f083 0301 	eor.w	r3, r3, #1
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <menu+0x34da>
			takeWifiPass();
 8004a74:	f003 fbe4 	bl	8008240 <takeWifiPass>

			convertArrays(3);
 8004a78:	2003      	movs	r0, #3
 8004a7a:	f7fb fe61 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8004a7e:	2032      	movs	r0, #50	; 0x32
 8004a80:	f004 fe80 	bl	8009784 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8004a84:	2003      	movs	r0, #3
 8004a86:	f7fc fcf1 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <menu+0x35a0>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b23      	cmp	r3, #35	; 0x23
 8004a90:	d14d      	bne.n	8004b2e <menu+0x357e>
		if(dilSecim == 0) {
 8004a92:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <menu+0x3584>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <menu+0x3500>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004a9a:	4a2f      	ldr	r2, [pc, #188]	; (8004b58 <menu+0x35a8>)
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f004 f91a 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004aa4:	4a2d      	ldr	r2, [pc, #180]	; (8004b5c <menu+0x35ac>)
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	2002      	movs	r0, #2
 8004aaa:	f004 f915 	bl	8008cd8 <lcd_print>
 8004aae:	e00d      	b.n	8004acc <menu+0x351c>
		} else if(dilSecim == 1) {
 8004ab0:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <menu+0x3584>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d109      	bne.n	8004acc <menu+0x351c>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004ab8:	4a29      	ldr	r2, [pc, #164]	; (8004b60 <menu+0x35b0>)
 8004aba:	2101      	movs	r1, #1
 8004abc:	2001      	movs	r0, #1
 8004abe:	f004 f90b 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004ac2:	4a28      	ldr	r2, [pc, #160]	; (8004b64 <menu+0x35b4>)
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	2002      	movs	r0, #2
 8004ac8:	f004 f906 	bl	8008cd8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004acc:	2108      	movs	r1, #8
 8004ace:	481b      	ldr	r0, [pc, #108]	; (8004b3c <menu+0x358c>)
 8004ad0:	f005 fc28 	bl	800a324 <HAL_GPIO_ReadPin>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d129      	bne.n	8004b2e <menu+0x357e>
			menuGiris = 0;
 8004ada:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <menu+0x35b8>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004ae0:	bf00      	nop
 8004ae2:	4822      	ldr	r0, [pc, #136]	; (8004b6c <menu+0x35bc>)
 8004ae4:	f006 fa47 	bl	800af76 <HAL_I2C_GetError>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d0f9      	beq.n	8004ae2 <menu+0x3532>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004aee:	bf00      	nop
 8004af0:	481e      	ldr	r0, [pc, #120]	; (8004b6c <menu+0x35bc>)
 8004af2:	f006 fa33 	bl	800af5c <HAL_I2C_GetState>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d1f9      	bne.n	8004af0 <menu+0x3540>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004afc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004b00:	9302      	str	r3, [sp, #8]
 8004b02:	236e      	movs	r3, #110	; 0x6e
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <menu+0x3598>)
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	236e      	movs	r3, #110	; 0x6e
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	21a0      	movs	r1, #160	; 0xa0
 8004b10:	4816      	ldr	r0, [pc, #88]	; (8004b6c <menu+0x35bc>)
 8004b12:	f005 fec1 	bl	800a898 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004b16:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004b1a:	f004 fe33 	bl	8009784 <HAL_Delay>

			lcd_clear();
 8004b1e:	f004 f907 	bl	8008d30 <lcd_clear>
			HAL_Delay(500);
 8004b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b26:	f004 fe2d 	bl	8009784 <HAL_Delay>
			NVIC_SystemReset();
 8004b2a:	f7fc fd2b 	bl	8001584 <__NVIC_SystemReset>
		}
	}
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000b0d 	.word	0x20000b0d
 8004b38:	0800e460 	.word	0x0800e460
 8004b3c:	40010800 	.word	0x40010800
 8004b40:	20000b1b 	.word	0x20000b1b
 8004b44:	20000b0b 	.word	0x20000b0b
 8004b48:	20000a18 	.word	0x20000a18
 8004b4c:	20000b18 	.word	0x20000b18
 8004b50:	20000aec 	.word	0x20000aec
 8004b54:	20000b0c 	.word	0x20000b0c
 8004b58:	0800eba8 	.word	0x0800eba8
 8004b5c:	0800ebbc 	.word	0x0800ebbc
 8004b60:	0800ebd0 	.word	0x0800ebd0
 8004b64:	0800ebe4 	.word	0x0800ebe4
 8004b68:	20000b09 	.word	0x20000b09
 8004b6c:	200010d8 	.word	0x200010d8

08004b70 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"

void lcdUpdate(uint8_t y) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <lcdUpdate+0x9c>)
 8004b82:	2101      	movs	r1, #1
 8004b84:	2002      	movs	r0, #2
 8004b86:	f004 f8a7 	bl	8008cd8 <lcd_print>
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		//lcd_print(1, 4, "ESP-RMK");
		//lcd_print(2, 6, "RUN");
	}
}
 8004b8a:	e03b      	b.n	8004c04 <lcdUpdate+0x94>
	} else if(y==2) {
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d105      	bne.n	8004b9e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004b92:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <lcdUpdate+0x9c>)
 8004b94:	2102      	movs	r1, #2
 8004b96:	2002      	movs	r0, #2
 8004b98:	f004 f89e 	bl	8008cd8 <lcd_print>
}
 8004b9c:	e032      	b.n	8004c04 <lcdUpdate+0x94>
	} else if(y==3) {
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d105      	bne.n	8004bb0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <lcdUpdate+0x9c>)
 8004ba6:	2103      	movs	r1, #3
 8004ba8:	2002      	movs	r0, #2
 8004baa:	f004 f895 	bl	8008cd8 <lcd_print>
}
 8004bae:	e029      	b.n	8004c04 <lcdUpdate+0x94>
	} else if(y==4) {
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d105      	bne.n	8004bc2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004bb6:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <lcdUpdate+0x9c>)
 8004bb8:	2104      	movs	r1, #4
 8004bba:	2002      	movs	r0, #2
 8004bbc:	f004 f88c 	bl	8008cd8 <lcd_print>
}
 8004bc0:	e020      	b.n	8004c04 <lcdUpdate+0x94>
	} else if(y==5) {
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b05      	cmp	r3, #5
 8004bc6:	d105      	bne.n	8004bd4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004bc8:	4a10      	ldr	r2, [pc, #64]	; (8004c0c <lcdUpdate+0x9c>)
 8004bca:	2105      	movs	r1, #5
 8004bcc:	2002      	movs	r0, #2
 8004bce:	f004 f883 	bl	8008cd8 <lcd_print>
}
 8004bd2:	e017      	b.n	8004c04 <lcdUpdate+0x94>
	} else if(y==6) {
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d105      	bne.n	8004be6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004bda:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <lcdUpdate+0x9c>)
 8004bdc:	2106      	movs	r1, #6
 8004bde:	2002      	movs	r0, #2
 8004be0:	f004 f87a 	bl	8008cd8 <lcd_print>
}
 8004be4:	e00e      	b.n	8004c04 <lcdUpdate+0x94>
	} else if (y==7) {
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b07      	cmp	r3, #7
 8004bea:	d10b      	bne.n	8004c04 <lcdUpdate+0x94>
		lcd_clear();
 8004bec:	f004 f8a0 	bl	8008d30 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8004bf0:	4a07      	ldr	r2, [pc, #28]	; (8004c10 <lcdUpdate+0xa0>)
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	f004 f86f 	bl	8008cd8 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8004bfa:	4a06      	ldr	r2, [pc, #24]	; (8004c14 <lcdUpdate+0xa4>)
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	2002      	movs	r0, #2
 8004c00:	f004 f86a 	bl	8008cd8 <lcd_print>
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	0800ebf8 	.word	0x0800ebf8
 8004c10:	200000c0 	.word	0x200000c0
 8004c14:	200000d0 	.word	0x200000d0

08004c18 <bekle>:

void bekle() {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	timer1=millis;
 8004c1c:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <bekle+0x124>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a47      	ldr	r2, [pc, #284]	; (8004d40 <bekle+0x128>)
 8004c22:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c24:	e002      	b.n	8004c2c <bekle+0x14>
    	butonKontrol = 1;
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <bekle+0x12c>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	4846      	ldr	r0, [pc, #280]	; (8004d48 <bekle+0x130>)
 8004c30:	f005 fb78 	bl	800a324 <HAL_GPIO_ReadPin>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d109      	bne.n	8004c4e <bekle+0x36>
 8004c3a:	4b40      	ldr	r3, [pc, #256]	; (8004d3c <bekle+0x124>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b40      	ldr	r3, [pc, #256]	; (8004d40 <bekle+0x128>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d0ef      	beq.n	8004c26 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c46:	e002      	b.n	8004c4e <bekle+0x36>
    	butonKontrol = 1;
 8004c48:	4b3e      	ldr	r3, [pc, #248]	; (8004d44 <bekle+0x12c>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c4e:	2108      	movs	r1, #8
 8004c50:	483e      	ldr	r0, [pc, #248]	; (8004d4c <bekle+0x134>)
 8004c52:	f005 fb67 	bl	800a324 <HAL_GPIO_ReadPin>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d109      	bne.n	8004c70 <bekle+0x58>
 8004c5c:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <bekle+0x124>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <bekle+0x128>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d0ef      	beq.n	8004c48 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c68:	e002      	b.n	8004c70 <bekle+0x58>
    	butonKontrol = 1;
 8004c6a:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <bekle+0x12c>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c70:	2102      	movs	r1, #2
 8004c72:	4835      	ldr	r0, [pc, #212]	; (8004d48 <bekle+0x130>)
 8004c74:	f005 fb56 	bl	800a324 <HAL_GPIO_ReadPin>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d109      	bne.n	8004c92 <bekle+0x7a>
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <bekle+0x124>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <bekle+0x128>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d0ef      	beq.n	8004c6a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c8a:	e002      	b.n	8004c92 <bekle+0x7a>
    	butonKontrol = 1;
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <bekle+0x12c>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c92:	2104      	movs	r1, #4
 8004c94:	482c      	ldr	r0, [pc, #176]	; (8004d48 <bekle+0x130>)
 8004c96:	f005 fb45 	bl	800a324 <HAL_GPIO_ReadPin>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d109      	bne.n	8004cb4 <bekle+0x9c>
 8004ca0:	4b26      	ldr	r3, [pc, #152]	; (8004d3c <bekle+0x124>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b26      	ldr	r3, [pc, #152]	; (8004d40 <bekle+0x128>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d0ef      	beq.n	8004c8c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cac:	e002      	b.n	8004cb4 <bekle+0x9c>
    	butonKontrol = 1;
 8004cae:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <bekle+0x12c>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cb4:	2108      	movs	r1, #8
 8004cb6:	4824      	ldr	r0, [pc, #144]	; (8004d48 <bekle+0x130>)
 8004cb8:	f005 fb34 	bl	800a324 <HAL_GPIO_ReadPin>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d109      	bne.n	8004cd6 <bekle+0xbe>
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <bekle+0x124>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <bekle+0x128>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d0ef      	beq.n	8004cae <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cce:	e002      	b.n	8004cd6 <bekle+0xbe>
    	butonKontrol = 1;
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <bekle+0x12c>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	481c      	ldr	r0, [pc, #112]	; (8004d4c <bekle+0x134>)
 8004cda:	f005 fb23 	bl	800a324 <HAL_GPIO_ReadPin>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <bekle+0xe0>
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <bekle+0x124>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <bekle+0x128>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d0ef      	beq.n	8004cd0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cf0:	e002      	b.n	8004cf8 <bekle+0xe0>
    	butonKontrol = 1;
 8004cf2:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <bekle+0x12c>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cfc:	4813      	ldr	r0, [pc, #76]	; (8004d4c <bekle+0x134>)
 8004cfe:	f005 fb11 	bl	800a324 <HAL_GPIO_ReadPin>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <bekle+0x104>
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <bekle+0x124>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <bekle+0x128>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d0ee      	beq.n	8004cf2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d14:	e002      	b.n	8004d1c <bekle+0x104>
    	butonKontrol = 1;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <bekle+0x12c>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d20:	480a      	ldr	r0, [pc, #40]	; (8004d4c <bekle+0x134>)
 8004d22:	f005 faff 	bl	800a324 <HAL_GPIO_ReadPin>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <bekle+0x120>
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <bekle+0x124>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <bekle+0x128>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d0ee      	beq.n	8004d16 <bekle+0xfe>
    }

}
 8004d38:	bf00      	nop
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000ac8 	.word	0x20000ac8
 8004d40:	20000ad0 	.word	0x20000ad0
 8004d44:	20000b1b 	.word	0x20000b1b
 8004d48:	40010800 	.word	0x40010800
 8004d4c:	40011000 	.word	0x40011000

08004d50 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004d54:	2101      	movs	r1, #1
 8004d56:	4815      	ldr	r0, [pc, #84]	; (8004dac <buttonCheck+0x5c>)
 8004d58:	f005 fae4 	bl	800a324 <HAL_GPIO_ReadPin>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d01b      	beq.n	8004d9a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004d62:	2108      	movs	r1, #8
 8004d64:	4812      	ldr	r0, [pc, #72]	; (8004db0 <buttonCheck+0x60>)
 8004d66:	f005 fadd 	bl	800a324 <HAL_GPIO_ReadPin>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d014      	beq.n	8004d9a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004d70:	2102      	movs	r1, #2
 8004d72:	480e      	ldr	r0, [pc, #56]	; (8004dac <buttonCheck+0x5c>)
 8004d74:	f005 fad6 	bl	800a324 <HAL_GPIO_ReadPin>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d00d      	beq.n	8004d9a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004d7e:	2104      	movs	r1, #4
 8004d80:	480a      	ldr	r0, [pc, #40]	; (8004dac <buttonCheck+0x5c>)
 8004d82:	f005 facf 	bl	800a324 <HAL_GPIO_ReadPin>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d006      	beq.n	8004d9a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004d8c:	2108      	movs	r1, #8
 8004d8e:	4807      	ldr	r0, [pc, #28]	; (8004dac <buttonCheck+0x5c>)
 8004d90:	f005 fac8 	bl	800a324 <HAL_GPIO_ReadPin>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d104      	bne.n	8004da4 <buttonCheck+0x54>
		backLightTimer = 0;
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <buttonCheck+0x64>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
		return 1;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <buttonCheck+0x56>
	}
	return 0;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40010800 	.word	0x40010800
 8004db0:	40011000 	.word	0x40011000
 8004db4:	20000ae4 	.word	0x20000ae4

08004db8 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <checkLCDBacklight+0x24>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <checkLCDBacklight+0x28>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b3b      	cmp	r3, #59	; 0x3b
 8004dc8:	d903      	bls.n	8004dd2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f003 ffd0 	bl	8008d70 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004dd0:	e002      	b.n	8004dd8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	f003 ffcc 	bl	8008d70 <lcd_backlight>
}
 8004dd8:	bf00      	nop
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000ac8 	.word	0x20000ac8
 8004de0:	20000ae4 	.word	0x20000ae4

08004de4 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <checkBasincSalteri+0x54>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <checkBasincSalteri+0x12>
		basincVar=1;
 8004df0:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <checkBasincSalteri+0x58>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <checkBasincSalteri+0x54>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d119      	bne.n	8004e32 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e02:	480f      	ldr	r0, [pc, #60]	; (8004e40 <checkBasincSalteri+0x5c>)
 8004e04:	f005 fa8e 	bl	800a324 <HAL_GPIO_ReadPin>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <checkBasincSalteri+0x60>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <checkBasincSalteri+0x64>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d90a      	bls.n	8004e32 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <checkBasincSalteri+0x58>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004e22:	e006      	b.n	8004e32 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <checkBasincSalteri+0x60>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <checkBasincSalteri+0x64>)
 8004e2a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <checkBasincSalteri+0x58>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000af3 	.word	0x20000af3
 8004e3c:	20000aef 	.word	0x20000aef
 8004e40:	40011000 	.word	0x40011000
 8004e44:	20000ac8 	.word	0x20000ac8
 8004e48:	20000ae0 	.word	0x20000ae0

08004e4c <checkBasGonder>:

void checkBasGonder() {
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <checkBasGonder+0x74>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10b      	bne.n	8004e70 <checkBasGonder+0x24>
 8004e58:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <checkBasGonder+0x78>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <checkBasGonder+0x24>
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <checkBasGonder+0x7c>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004e68:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <checkBasGonder+0x80>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e009      	b.n	8004e84 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004e70:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <checkBasGonder+0x78>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f083 0301 	eor.w	r3, r3, #1
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <checkBasGonder+0x80>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <checkBasGonder+0x74>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d10b      	bne.n	8004ea4 <checkBasGonder+0x58>
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <checkBasGonder+0x84>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <checkBasGonder+0x58>
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <checkBasGonder+0x7c>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <checkBasGonder+0x88>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004ea2:	e009      	b.n	8004eb8 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <checkBasGonder+0x84>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	f083 0301 	eor.w	r3, r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <checkBasGonder+0x88>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	20000aed 	.word	0x20000aed
 8004ec4:	20000b21 	.word	0x20000b21
 8004ec8:	20000afb 	.word	0x20000afb
 8004ecc:	20000b28 	.word	0x20000b28
 8004ed0:	20000b24 	.word	0x20000b24
 8004ed4:	20000b29 	.word	0x20000b29

08004ed8 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004edc:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <checkKapiSecimleri+0x98>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004ee4:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <checkKapiSecimleri+0x9c>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004eea:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <checkKapiSecimleri+0x98>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10e      	bne.n	8004f10 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef6:	4820      	ldr	r0, [pc, #128]	; (8004f78 <checkKapiSecimleri+0xa0>)
 8004ef8:	f005 fa14 	bl	800a324 <HAL_GPIO_ReadPin>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <checkKapiSecimleri+0x9c>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	e002      	b.n	8004f10 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004f0a:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <checkKapiSecimleri+0x9c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004f10:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <checkKapiSecimleri+0x98>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d10e      	bne.n	8004f36 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f1c:	4816      	ldr	r0, [pc, #88]	; (8004f78 <checkKapiSecimleri+0xa0>)
 8004f1e:	f005 fa01 	bl	800a324 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004f28:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <checkKapiSecimleri+0x9c>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <checkKapiSecimleri+0x9c>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004f36:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <checkKapiSecimleri+0x98>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d116      	bne.n	8004f6c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f42:	480d      	ldr	r0, [pc, #52]	; (8004f78 <checkKapiSecimleri+0xa0>)
 8004f44:	f005 f9ee 	bl	800a324 <HAL_GPIO_ReadPin>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <checkKapiSecimleri+0x8e>
 8004f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f52:	4809      	ldr	r0, [pc, #36]	; (8004f78 <checkKapiSecimleri+0xa0>)
 8004f54:	f005 f9e6 	bl	800a324 <HAL_GPIO_ReadPin>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <checkKapiSecimleri+0x9c>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004f64:	e002      	b.n	8004f6c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004f66:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <checkKapiSecimleri+0x9c>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000af4 	.word	0x20000af4
 8004f74:	20000b3f 	.word	0x20000b3f
 8004f78:	40010800 	.word	0x40010800

08004f7c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004f80:	4b62      	ldr	r3, [pc, #392]	; (800510c <checkAktifCalisma+0x190>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f041 833e 	bne.w	8006606 <checkAktifCalisma+0x168a>
 8004f8a:	4b61      	ldr	r3, [pc, #388]	; (8005110 <checkAktifCalisma+0x194>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f041 8339 	bne.w	8006606 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004f94:	4b5f      	ldr	r3, [pc, #380]	; (8005114 <checkAktifCalisma+0x198>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d11a      	bne.n	8004fd2 <checkAktifCalisma+0x56>
 8004f9c:	4b5e      	ldr	r3, [pc, #376]	; (8005118 <checkAktifCalisma+0x19c>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d116      	bne.n	8004fd2 <checkAktifCalisma+0x56>
 8004fa4:	4b5d      	ldr	r3, [pc, #372]	; (800511c <checkAktifCalisma+0x1a0>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <checkAktifCalisma+0x46>
 8004fac:	4b5c      	ldr	r3, [pc, #368]	; (8005120 <checkAktifCalisma+0x1a4>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	f083 0301 	eor.w	r3, r3, #1
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <checkAktifCalisma+0x46>
 8004fba:	4b5a      	ldr	r3, [pc, #360]	; (8005124 <checkAktifCalisma+0x1a8>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d007      	beq.n	8004fd2 <checkAktifCalisma+0x56>
 8004fc2:	4b59      	ldr	r3, [pc, #356]	; (8005128 <checkAktifCalisma+0x1ac>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d018      	beq.n	8004ffc <checkAktifCalisma+0x80>
 8004fca:	4b58      	ldr	r3, [pc, #352]	; (800512c <checkAktifCalisma+0x1b0>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d114      	bne.n	8004ffc <checkAktifCalisma+0x80>
 8004fd2:	4b57      	ldr	r3, [pc, #348]	; (8005130 <checkAktifCalisma+0x1b4>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d010      	beq.n	8004ffc <checkAktifCalisma+0x80>
 8004fda:	4b56      	ldr	r3, [pc, #344]	; (8005134 <checkAktifCalisma+0x1b8>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00c      	beq.n	8004ffc <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fe8:	4853      	ldr	r0, [pc, #332]	; (8005138 <checkAktifCalisma+0x1bc>)
 8004fea:	f005 f9b2 	bl	800a352 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004fee:	4b53      	ldr	r3, [pc, #332]	; (800513c <checkAktifCalisma+0x1c0>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004ff4:	4b52      	ldr	r3, [pc, #328]	; (8005140 <checkAktifCalisma+0x1c4>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e008      	b.n	800500e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005002:	484d      	ldr	r0, [pc, #308]	; (8005138 <checkAktifCalisma+0x1bc>)
 8005004:	f005 f9a5 	bl	800a352 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8005008:	4b4c      	ldr	r3, [pc, #304]	; (800513c <checkAktifCalisma+0x1c0>)
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 800500e:	4b40      	ldr	r3, [pc, #256]	; (8005110 <checkAktifCalisma+0x194>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d160      	bne.n	80050d8 <checkAktifCalisma+0x15c>
 8005016:	4b46      	ldr	r3, [pc, #280]	; (8005130 <checkAktifCalisma+0x1b4>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d05c      	beq.n	80050d8 <checkAktifCalisma+0x15c>
 800501e:	4b45      	ldr	r3, [pc, #276]	; (8005134 <checkAktifCalisma+0x1b8>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d058      	beq.n	80050d8 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800502a:	4843      	ldr	r0, [pc, #268]	; (8005138 <checkAktifCalisma+0x1bc>)
 800502c:	f005 f97a 	bl	800a324 <HAL_GPIO_ReadPin>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <checkAktifCalisma+0xc2>
 8005036:	4b43      	ldr	r3, [pc, #268]	; (8005144 <checkAktifCalisma+0x1c8>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d04c      	beq.n	80050d8 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800503e:	2102      	movs	r1, #2
 8005040:	4841      	ldr	r0, [pc, #260]	; (8005148 <checkAktifCalisma+0x1cc>)
 8005042:	f005 f96f 	bl	800a324 <HAL_GPIO_ReadPin>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d145      	bne.n	80050d8 <checkAktifCalisma+0x15c>
				&& (basincVar)
 800504c:	4b3f      	ldr	r3, [pc, #252]	; (800514c <checkAktifCalisma+0x1d0>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d041      	beq.n	80050d8 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005058:	4837      	ldr	r0, [pc, #220]	; (8005138 <checkAktifCalisma+0x1bc>)
 800505a:	f005 f963 	bl	800a324 <HAL_GPIO_ReadPin>
 800505e:	4603      	mov	r3, r0
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10e      	bne.n	8005082 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005068:	4833      	ldr	r0, [pc, #204]	; (8005138 <checkAktifCalisma+0x1bc>)
 800506a:	f005 f95b 	bl	800a324 <HAL_GPIO_ReadPin>
 800506e:	4603      	mov	r3, r0
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	4834      	ldr	r0, [pc, #208]	; (8005148 <checkAktifCalisma+0x1cc>)
 8005078:	f005 f954 	bl	800a324 <HAL_GPIO_ReadPin>
 800507c:	4603      	mov	r3, r0
 800507e:	2b01      	cmp	r3, #1
 8005080:	d003      	beq.n	800508a <checkAktifCalisma+0x10e>
 8005082:	4b24      	ldr	r3, [pc, #144]	; (8005114 <checkAktifCalisma+0x198>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d026      	beq.n	80050d8 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <checkAktifCalisma+0x1a0>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	f083 0301 	eor.w	r3, r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01f      	beq.n	80050d8 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005098:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <checkAktifCalisma+0x19c>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f083 0301 	eor.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d018      	beq.n	80050d8 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80050a6:	4b20      	ldr	r3, [pc, #128]	; (8005128 <checkAktifCalisma+0x1ac>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f083 0301 	eor.w	r3, r3, #1
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d011      	beq.n	80050d8 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <checkAktifCalisma+0x1d4>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f083 0301 	eor.w	r3, r3, #1
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <checkAktifCalisma+0x1d8>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	f083 0301 	eor.w	r3, r3, #1
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80050d0:	4b10      	ldr	r3, [pc, #64]	; (8005114 <checkAktifCalisma+0x198>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e002      	b.n	80050de <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <checkAktifCalisma+0x198>)
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80050de:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <checkAktifCalisma+0x198>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d03a      	beq.n	800515c <checkAktifCalisma+0x1e0>
 80050e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050ea:	4817      	ldr	r0, [pc, #92]	; (8005148 <checkAktifCalisma+0x1cc>)
 80050ec:	f005 f91a 	bl	800a324 <HAL_GPIO_ReadPin>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d132      	bne.n	800515c <checkAktifCalisma+0x1e0>
 80050f6:	4b18      	ldr	r3, [pc, #96]	; (8005158 <checkAktifCalisma+0x1dc>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d02e      	beq.n	800515c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80050fe:	2201      	movs	r2, #1
 8005100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005104:	480c      	ldr	r0, [pc, #48]	; (8005138 <checkAktifCalisma+0x1bc>)
 8005106:	f005 f924 	bl	800a352 <HAL_GPIO_WritePin>
 800510a:	e02d      	b.n	8005168 <checkAktifCalisma+0x1ec>
 800510c:	20000b0a 	.word	0x20000b0a
 8005110:	20000b09 	.word	0x20000b09
 8005114:	20000b21 	.word	0x20000b21
 8005118:	20000b22 	.word	0x20000b22
 800511c:	20000b24 	.word	0x20000b24
 8005120:	20000b1c 	.word	0x20000b1c
 8005124:	20000aff 	.word	0x20000aff
 8005128:	20000b23 	.word	0x20000b23
 800512c:	20000afe 	.word	0x20000afe
 8005130:	20000b3e 	.word	0x20000b3e
 8005134:	20000b3f 	.word	0x20000b3f
 8005138:	40010c00 	.word	0x40010c00
 800513c:	20000b40 	.word	0x20000b40
 8005140:	20000b2b 	.word	0x20000b2b
 8005144:	20000b28 	.word	0x20000b28
 8005148:	40011000 	.word	0x40011000
 800514c:	20000aef 	.word	0x20000aef
 8005150:	20000b26 	.word	0x20000b26
 8005154:	20000b27 	.word	0x20000b27
 8005158:	20000afa 	.word	0x20000afa
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800515c:	2200      	movs	r2, #0
 800515e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005162:	4860      	ldr	r0, [pc, #384]	; (80052e4 <checkAktifCalisma+0x368>)
 8005164:	f005 f8f5 	bl	800a352 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005168:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <checkAktifCalisma+0x36c>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d013      	beq.n	8005198 <checkAktifCalisma+0x21c>
 8005170:	4b5e      	ldr	r3, [pc, #376]	; (80052ec <checkAktifCalisma+0x370>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d007      	beq.n	8005188 <checkAktifCalisma+0x20c>
 8005178:	4b5c      	ldr	r3, [pc, #368]	; (80052ec <checkAktifCalisma+0x370>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d003      	beq.n	8005188 <checkAktifCalisma+0x20c>
 8005180:	4b5b      	ldr	r3, [pc, #364]	; (80052f0 <checkAktifCalisma+0x374>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d107      	bne.n	8005198 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005188:	2201      	movs	r2, #1
 800518a:	2104      	movs	r1, #4
 800518c:	4855      	ldr	r0, [pc, #340]	; (80052e4 <checkAktifCalisma+0x368>)
 800518e:	f005 f8e0 	bl	800a352 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005192:	4b58      	ldr	r3, [pc, #352]	; (80052f4 <checkAktifCalisma+0x378>)
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005198:	4b56      	ldr	r3, [pc, #344]	; (80052f4 <checkAktifCalisma+0x378>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02f      	beq.n	8005200 <checkAktifCalisma+0x284>
 80051a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051a4:	484f      	ldr	r0, [pc, #316]	; (80052e4 <checkAktifCalisma+0x368>)
 80051a6:	f005 f8bd 	bl	800a324 <HAL_GPIO_ReadPin>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d106      	bne.n	80051be <checkAktifCalisma+0x242>
 80051b0:	4b51      	ldr	r3, [pc, #324]	; (80052f8 <checkAktifCalisma+0x37c>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f083 0301 	eor.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <checkAktifCalisma+0x250>
 80051be:	2102      	movs	r1, #2
 80051c0:	484e      	ldr	r0, [pc, #312]	; (80052fc <checkAktifCalisma+0x380>)
 80051c2:	f005 f8af 	bl	800a324 <HAL_GPIO_ReadPin>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d119      	bne.n	8005200 <checkAktifCalisma+0x284>
 80051cc:	4b4c      	ldr	r3, [pc, #304]	; (8005300 <checkAktifCalisma+0x384>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <checkAktifCalisma+0x284>
 80051d4:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <checkAktifCalisma+0x388>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d011      	beq.n	8005200 <checkAktifCalisma+0x284>
 80051dc:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <checkAktifCalisma+0x38c>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <checkAktifCalisma+0x284>
 80051e4:	4b49      	ldr	r3, [pc, #292]	; (800530c <checkAktifCalisma+0x390>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f083 0301 	eor.w	r3, r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d006      	beq.n	8005200 <checkAktifCalisma+0x284>
			timer2=millis;
 80051f2:	4b47      	ldr	r3, [pc, #284]	; (8005310 <checkAktifCalisma+0x394>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a47      	ldr	r2, [pc, #284]	; (8005314 <checkAktifCalisma+0x398>)
 80051f8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80051fa:	4b44      	ldr	r3, [pc, #272]	; (800530c <checkAktifCalisma+0x390>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005200:	4b43      	ldr	r3, [pc, #268]	; (8005310 <checkAktifCalisma+0x394>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <checkAktifCalisma+0x398>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	4a43      	ldr	r2, [pc, #268]	; (8005318 <checkAktifCalisma+0x39c>)
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	4293      	cmp	r3, r2
 8005210:	d303      	bcc.n	800521a <checkAktifCalisma+0x29e>
 8005212:	4b3e      	ldr	r3, [pc, #248]	; (800530c <checkAktifCalisma+0x390>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d111      	bne.n	800523e <checkAktifCalisma+0x2c2>
 800521a:	4b39      	ldr	r3, [pc, #228]	; (8005300 <checkAktifCalisma+0x384>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f083 0301 	eor.w	r3, r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <checkAktifCalisma+0x2c2>
 8005228:	4b36      	ldr	r3, [pc, #216]	; (8005304 <checkAktifCalisma+0x388>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	f083 0301 	eor.w	r3, r3, #1
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <checkAktifCalisma+0x2c2>
 8005236:	4b34      	ldr	r3, [pc, #208]	; (8005308 <checkAktifCalisma+0x38c>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800523e:	2200      	movs	r2, #0
 8005240:	2104      	movs	r1, #4
 8005242:	4828      	ldr	r0, [pc, #160]	; (80052e4 <checkAktifCalisma+0x368>)
 8005244:	f005 f885 	bl	800a352 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005248:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <checkAktifCalisma+0x378>)
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800524e:	4b2f      	ldr	r3, [pc, #188]	; (800530c <checkAktifCalisma+0x390>)
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005254:	4b31      	ldr	r3, [pc, #196]	; (800531c <checkAktifCalisma+0x3a0>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 800525c:	4b30      	ldr	r3, [pc, #192]	; (8005320 <checkAktifCalisma+0x3a4>)
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005262:	4b2e      	ldr	r3, [pc, #184]	; (800531c <checkAktifCalisma+0x3a0>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d116      	bne.n	8005298 <checkAktifCalisma+0x31c>
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <checkAktifCalisma+0x3a8>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d112      	bne.n	8005298 <checkAktifCalisma+0x31c>
 8005272:	2101      	movs	r1, #1
 8005274:	4821      	ldr	r0, [pc, #132]	; (80052fc <checkAktifCalisma+0x380>)
 8005276:	f005 f855 	bl	800a324 <HAL_GPIO_ReadPin>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <checkAktifCalisma+0x31c>
 8005280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005284:	4817      	ldr	r0, [pc, #92]	; (80052e4 <checkAktifCalisma+0x368>)
 8005286:	f005 f84d 	bl	800a324 <HAL_GPIO_ReadPin>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005290:	4b23      	ldr	r3, [pc, #140]	; (8005320 <checkAktifCalisma+0x3a4>)
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e011      	b.n	80052bc <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <checkAktifCalisma+0x3a0>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10d      	bne.n	80052bc <checkAktifCalisma+0x340>
 80052a0:	2101      	movs	r1, #1
 80052a2:	4816      	ldr	r0, [pc, #88]	; (80052fc <checkAktifCalisma+0x380>)
 80052a4:	f005 f83e 	bl	800a324 <HAL_GPIO_ReadPin>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d106      	bne.n	80052bc <checkAktifCalisma+0x340>
 80052ae:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <checkAktifCalisma+0x3a8>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <checkAktifCalisma+0x340>
			cerceveVar=0;
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <checkAktifCalisma+0x3a4>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <checkAktifCalisma+0x3a0>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d134      	bne.n	800532e <checkAktifCalisma+0x3b2>
 80052c4:	4b17      	ldr	r3, [pc, #92]	; (8005324 <checkAktifCalisma+0x3a8>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d130      	bne.n	800532e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80052cc:	2101      	movs	r1, #1
 80052ce:	480b      	ldr	r0, [pc, #44]	; (80052fc <checkAktifCalisma+0x380>)
 80052d0:	f005 f828 	bl	800a324 <HAL_GPIO_ReadPin>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d126      	bne.n	8005328 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <checkAktifCalisma+0x3a4>)
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	e025      	b.n	800532e <checkAktifCalisma+0x3b2>
 80052e2:	bf00      	nop
 80052e4:	40010c00 	.word	0x40010c00
 80052e8:	20000b21 	.word	0x20000b21
 80052ec:	20000afb 	.word	0x20000afb
 80052f0:	20000aff 	.word	0x20000aff
 80052f4:	20000b25 	.word	0x20000b25
 80052f8:	20000b28 	.word	0x20000b28
 80052fc:	40011000 	.word	0x40011000
 8005300:	20000b3e 	.word	0x20000b3e
 8005304:	20000b3f 	.word	0x20000b3f
 8005308:	20000aef 	.word	0x20000aef
 800530c:	20000b1d 	.word	0x20000b1d
 8005310:	20000ac8 	.word	0x20000ac8
 8005314:	20000ad4 	.word	0x20000ad4
 8005318:	20000b00 	.word	0x20000b00
 800531c:	20000af0 	.word	0x20000af0
 8005320:	20000b43 	.word	0x20000b43
 8005324:	20000aed 	.word	0x20000aed
			} else {
				cerceveVar=0;
 8005328:	4b7f      	ldr	r3, [pc, #508]	; (8005528 <checkAktifCalisma+0x5ac>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800532e:	4b7f      	ldr	r3, [pc, #508]	; (800552c <checkAktifCalisma+0x5b0>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d17c      	bne.n	8005430 <checkAktifCalisma+0x4b4>
 8005336:	4b7e      	ldr	r3, [pc, #504]	; (8005530 <checkAktifCalisma+0x5b4>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d078      	beq.n	8005430 <checkAktifCalisma+0x4b4>
 800533e:	4b7d      	ldr	r3, [pc, #500]	; (8005534 <checkAktifCalisma+0x5b8>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d074      	beq.n	8005430 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005346:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800534a:	487b      	ldr	r0, [pc, #492]	; (8005538 <checkAktifCalisma+0x5bc>)
 800534c:	f004 ffea 	bl	800a324 <HAL_GPIO_ReadPin>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <checkAktifCalisma+0x3e2>
 8005356:	4b79      	ldr	r3, [pc, #484]	; (800553c <checkAktifCalisma+0x5c0>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d068      	beq.n	8005430 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800535e:	4b72      	ldr	r3, [pc, #456]	; (8005528 <checkAktifCalisma+0x5ac>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d064      	beq.n	8005430 <checkAktifCalisma+0x4b4>
 8005366:	4b76      	ldr	r3, [pc, #472]	; (8005540 <checkAktifCalisma+0x5c4>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	f083 0301 	eor.w	r3, r3, #1
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d05d      	beq.n	8005430 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005374:	2104      	movs	r1, #4
 8005376:	4873      	ldr	r0, [pc, #460]	; (8005544 <checkAktifCalisma+0x5c8>)
 8005378:	f004 ffd4 	bl	800a324 <HAL_GPIO_ReadPin>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <checkAktifCalisma+0x40e>
 8005382:	4b71      	ldr	r3, [pc, #452]	; (8005548 <checkAktifCalisma+0x5cc>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d152      	bne.n	8005430 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800538a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800538e:	486a      	ldr	r0, [pc, #424]	; (8005538 <checkAktifCalisma+0x5bc>)
 8005390:	f004 ffc8 	bl	800a324 <HAL_GPIO_ReadPin>
 8005394:	4603      	mov	r3, r0
 8005396:	2b01      	cmp	r3, #1
 8005398:	d10e      	bne.n	80053b8 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800539a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800539e:	4866      	ldr	r0, [pc, #408]	; (8005538 <checkAktifCalisma+0x5bc>)
 80053a0:	f004 ffc0 	bl	800a324 <HAL_GPIO_ReadPin>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d106      	bne.n	80053b8 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80053aa:	2140      	movs	r1, #64	; 0x40
 80053ac:	4865      	ldr	r0, [pc, #404]	; (8005544 <checkAktifCalisma+0x5c8>)
 80053ae:	f004 ffb9 	bl	800a324 <HAL_GPIO_ReadPin>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d003      	beq.n	80053c0 <checkAktifCalisma+0x444>
 80053b8:	4b64      	ldr	r3, [pc, #400]	; (800554c <checkAktifCalisma+0x5d0>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d037      	beq.n	8005430 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80053c0:	4b63      	ldr	r3, [pc, #396]	; (8005550 <checkAktifCalisma+0x5d4>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f083 0301 	eor.w	r3, r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d030      	beq.n	8005430 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80053ce:	4b61      	ldr	r3, [pc, #388]	; (8005554 <checkAktifCalisma+0x5d8>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	f083 0301 	eor.w	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d029      	beq.n	8005430 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80053dc:	4b5e      	ldr	r3, [pc, #376]	; (8005558 <checkAktifCalisma+0x5dc>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	f083 0301 	eor.w	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d022      	beq.n	8005430 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80053ea:	4b5c      	ldr	r3, [pc, #368]	; (800555c <checkAktifCalisma+0x5e0>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f083 0301 	eor.w	r3, r3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01b      	beq.n	8005430 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80053f8:	4b59      	ldr	r3, [pc, #356]	; (8005560 <checkAktifCalisma+0x5e4>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f083 0301 	eor.w	r3, r3, #1
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d014      	beq.n	8005430 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005406:	4b57      	ldr	r3, [pc, #348]	; (8005564 <checkAktifCalisma+0x5e8>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f083 0301 	eor.w	r3, r3, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00d      	beq.n	8005430 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005414:	2201      	movs	r2, #1
 8005416:	2102      	movs	r1, #2
 8005418:	4847      	ldr	r0, [pc, #284]	; (8005538 <checkAktifCalisma+0x5bc>)
 800541a:	f004 ff9a 	bl	800a352 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800541e:	4b4b      	ldr	r3, [pc, #300]	; (800554c <checkAktifCalisma+0x5d0>)
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005424:	4b50      	ldr	r3, [pc, #320]	; (8005568 <checkAktifCalisma+0x5ec>)
 8005426:	2201      	movs	r2, #1
 8005428:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800542a:	4b50      	ldr	r3, [pc, #320]	; (800556c <checkAktifCalisma+0x5f0>)
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005430:	4b46      	ldr	r3, [pc, #280]	; (800554c <checkAktifCalisma+0x5d0>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d033      	beq.n	80054a0 <checkAktifCalisma+0x524>
 8005438:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800543c:	483e      	ldr	r0, [pc, #248]	; (8005538 <checkAktifCalisma+0x5bc>)
 800543e:	f004 ff71 	bl	800a324 <HAL_GPIO_ReadPin>
 8005442:	4603      	mov	r3, r0
 8005444:	2b01      	cmp	r3, #1
 8005446:	d106      	bne.n	8005456 <checkAktifCalisma+0x4da>
 8005448:	4b3c      	ldr	r3, [pc, #240]	; (800553c <checkAktifCalisma+0x5c0>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f083 0301 	eor.w	r3, r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <checkAktifCalisma+0x4f0>
 8005456:	2104      	movs	r1, #4
 8005458:	483a      	ldr	r0, [pc, #232]	; (8005544 <checkAktifCalisma+0x5c8>)
 800545a:	f004 ff63 	bl	800a324 <HAL_GPIO_ReadPin>
 800545e:	4603      	mov	r3, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d11d      	bne.n	80054a0 <checkAktifCalisma+0x524>
 8005464:	4b38      	ldr	r3, [pc, #224]	; (8005548 <checkAktifCalisma+0x5cc>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d019      	beq.n	80054a0 <checkAktifCalisma+0x524>
 800546c:	4b30      	ldr	r3, [pc, #192]	; (8005530 <checkAktifCalisma+0x5b4>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <checkAktifCalisma+0x524>
 8005474:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <checkAktifCalisma+0x5b8>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d011      	beq.n	80054a0 <checkAktifCalisma+0x524>
 800547c:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <checkAktifCalisma+0x5ac>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <checkAktifCalisma+0x524>
 8005484:	4b3a      	ldr	r3, [pc, #232]	; (8005570 <checkAktifCalisma+0x5f4>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f083 0301 	eor.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <checkAktifCalisma+0x524>
			timer2=millis;
 8005492:	4b38      	ldr	r3, [pc, #224]	; (8005574 <checkAktifCalisma+0x5f8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a38      	ldr	r2, [pc, #224]	; (8005578 <checkAktifCalisma+0x5fc>)
 8005498:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800549a:	4b35      	ldr	r3, [pc, #212]	; (8005570 <checkAktifCalisma+0x5f4>)
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80054a0:	4b34      	ldr	r3, [pc, #208]	; (8005574 <checkAktifCalisma+0x5f8>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b34      	ldr	r3, [pc, #208]	; (8005578 <checkAktifCalisma+0x5fc>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	4a34      	ldr	r2, [pc, #208]	; (800557c <checkAktifCalisma+0x600>)
 80054ac:	7812      	ldrb	r2, [r2, #0]
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d303      	bcc.n	80054ba <checkAktifCalisma+0x53e>
 80054b2:	4b2f      	ldr	r3, [pc, #188]	; (8005570 <checkAktifCalisma+0x5f4>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d114      	bne.n	80054e4 <checkAktifCalisma+0x568>
 80054ba:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <checkAktifCalisma+0x5b4>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f083 0301 	eor.w	r3, r3, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10d      	bne.n	80054e4 <checkAktifCalisma+0x568>
 80054c8:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <checkAktifCalisma+0x5b8>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f083 0301 	eor.w	r3, r3, #1
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <checkAktifCalisma+0x568>
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <checkAktifCalisma+0x5ac>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	f083 0301 	eor.w	r3, r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80054e4:	2200      	movs	r2, #0
 80054e6:	2102      	movs	r1, #2
 80054e8:	4813      	ldr	r0, [pc, #76]	; (8005538 <checkAktifCalisma+0x5bc>)
 80054ea:	f004 ff32 	bl	800a352 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80054ee:	4b17      	ldr	r3, [pc, #92]	; (800554c <checkAktifCalisma+0x5d0>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80054f4:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <checkAktifCalisma+0x5f4>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <checkAktifCalisma+0x5d0>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d040      	beq.n	8005584 <checkAktifCalisma+0x608>
 8005502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005506:	480f      	ldr	r0, [pc, #60]	; (8005544 <checkAktifCalisma+0x5c8>)
 8005508:	f004 ff0c 	bl	800a324 <HAL_GPIO_ReadPin>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d138      	bne.n	8005584 <checkAktifCalisma+0x608>
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <checkAktifCalisma+0x604>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d034      	beq.n	8005584 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800551a:	2201      	movs	r2, #1
 800551c:	2101      	movs	r1, #1
 800551e:	4806      	ldr	r0, [pc, #24]	; (8005538 <checkAktifCalisma+0x5bc>)
 8005520:	f004 ff17 	bl	800a352 <HAL_GPIO_WritePin>
 8005524:	e033      	b.n	800558e <checkAktifCalisma+0x612>
 8005526:	bf00      	nop
 8005528:	20000b43 	.word	0x20000b43
 800552c:	20000b09 	.word	0x20000b09
 8005530:	20000b3e 	.word	0x20000b3e
 8005534:	20000b3f 	.word	0x20000b3f
 8005538:	40010c00 	.word	0x40010c00
 800553c:	20000b29 	.word	0x20000b29
 8005540:	20000b3d 	.word	0x20000b3d
 8005544:	40011000 	.word	0x40011000
 8005548:	20000af2 	.word	0x20000af2
 800554c:	20000b24 	.word	0x20000b24
 8005550:	20000b21 	.word	0x20000b21
 8005554:	20000b25 	.word	0x20000b25
 8005558:	20000b22 	.word	0x20000b22
 800555c:	20000b23 	.word	0x20000b23
 8005560:	20000b26 	.word	0x20000b26
 8005564:	20000b27 	.word	0x20000b27
 8005568:	20000b2c 	.word	0x20000b2c
 800556c:	20000b4d 	.word	0x20000b4d
 8005570:	20000b1c 	.word	0x20000b1c
 8005574:	20000ac8 	.word	0x20000ac8
 8005578:	20000ad4 	.word	0x20000ad4
 800557c:	20000b01 	.word	0x20000b01
 8005580:	20000af1 	.word	0x20000af1
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005584:	2200      	movs	r2, #0
 8005586:	2101      	movs	r1, #1
 8005588:	4836      	ldr	r0, [pc, #216]	; (8005664 <checkAktifCalisma+0x6e8>)
 800558a:	f004 fee2 	bl	800a352 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800558e:	4b36      	ldr	r3, [pc, #216]	; (8005668 <checkAktifCalisma+0x6ec>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 8080 	bne.w	8005698 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005598:	4b34      	ldr	r3, [pc, #208]	; (800566c <checkAktifCalisma+0x6f0>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d003      	beq.n	80055a8 <checkAktifCalisma+0x62c>
 80055a0:	4b32      	ldr	r3, [pc, #200]	; (800566c <checkAktifCalisma+0x6f0>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d177      	bne.n	8005698 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80055a8:	4b31      	ldr	r3, [pc, #196]	; (8005670 <checkAktifCalisma+0x6f4>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d073      	beq.n	8005698 <checkAktifCalisma+0x71c>
 80055b0:	4b30      	ldr	r3, [pc, #192]	; (8005674 <checkAktifCalisma+0x6f8>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d06f      	beq.n	8005698 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80055b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055bc:	4829      	ldr	r0, [pc, #164]	; (8005664 <checkAktifCalisma+0x6e8>)
 80055be:	f004 feb1 	bl	800a324 <HAL_GPIO_ReadPin>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d167      	bne.n	8005698 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80055c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055cc:	482a      	ldr	r0, [pc, #168]	; (8005678 <checkAktifCalisma+0x6fc>)
 80055ce:	f004 fea9 	bl	800a324 <HAL_GPIO_ReadPin>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <checkAktifCalisma+0x664>
 80055d8:	4b28      	ldr	r3, [pc, #160]	; (800567c <checkAktifCalisma+0x700>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d15b      	bne.n	8005698 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80055e0:	2140      	movs	r1, #64	; 0x40
 80055e2:	4825      	ldr	r0, [pc, #148]	; (8005678 <checkAktifCalisma+0x6fc>)
 80055e4:	f004 fe9e 	bl	800a324 <HAL_GPIO_ReadPin>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d10f      	bne.n	800560e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80055ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055f2:	481c      	ldr	r0, [pc, #112]	; (8005664 <checkAktifCalisma+0x6e8>)
 80055f4:	f004 fe96 	bl	800a324 <HAL_GPIO_ReadPin>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d107      	bne.n	800560e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80055fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005602:	4818      	ldr	r0, [pc, #96]	; (8005664 <checkAktifCalisma+0x6e8>)
 8005604:	f004 fe8e 	bl	800a324 <HAL_GPIO_ReadPin>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d003      	beq.n	8005616 <checkAktifCalisma+0x69a>
 800560e:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <checkAktifCalisma+0x704>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d040      	beq.n	8005698 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005616:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <checkAktifCalisma+0x708>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	f083 0301 	eor.w	r3, r3, #1
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d039      	beq.n	8005698 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005624:	4b18      	ldr	r3, [pc, #96]	; (8005688 <checkAktifCalisma+0x70c>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f083 0301 	eor.w	r3, r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d032      	beq.n	8005698 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005632:	4b16      	ldr	r3, [pc, #88]	; (800568c <checkAktifCalisma+0x710>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	f083 0301 	eor.w	r3, r3, #1
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02b      	beq.n	8005698 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <checkAktifCalisma+0x714>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	f083 0301 	eor.w	r3, r3, #1
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d024      	beq.n	8005698 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <checkAktifCalisma+0x718>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	f083 0301 	eor.w	r3, r3, #1
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01d      	beq.n	8005698 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800565c:	4b08      	ldr	r3, [pc, #32]	; (8005680 <checkAktifCalisma+0x704>)
 800565e:	2201      	movs	r2, #1
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e01c      	b.n	800569e <checkAktifCalisma+0x722>
 8005664:	40010c00 	.word	0x40010c00
 8005668:	20000b09 	.word	0x20000b09
 800566c:	20000afb 	.word	0x20000afb
 8005670:	20000b3e 	.word	0x20000b3e
 8005674:	20000b3f 	.word	0x20000b3f
 8005678:	40011000 	.word	0x40011000
 800567c:	20000afc 	.word	0x20000afc
 8005680:	20000b22 	.word	0x20000b22
 8005684:	20000b21 	.word	0x20000b21
 8005688:	20000b25 	.word	0x20000b25
 800568c:	20000b24 	.word	0x20000b24
 8005690:	20000b23 	.word	0x20000b23
 8005694:	20000b27 	.word	0x20000b27
		} else {
			devmotoryukaricalisiyor=0;
 8005698:	4b64      	ldr	r3, [pc, #400]	; (800582c <checkAktifCalisma+0x8b0>)
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800569e:	4b63      	ldr	r3, [pc, #396]	; (800582c <checkAktifCalisma+0x8b0>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80056a6:	2201      	movs	r2, #1
 80056a8:	2120      	movs	r1, #32
 80056aa:	4861      	ldr	r0, [pc, #388]	; (8005830 <checkAktifCalisma+0x8b4>)
 80056ac:	f004 fe51 	bl	800a352 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80056b0:	4b60      	ldr	r3, [pc, #384]	; (8005834 <checkAktifCalisma+0x8b8>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80056b6:	4b5f      	ldr	r3, [pc, #380]	; (8005834 <checkAktifCalisma+0x8b8>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d025      	beq.n	800570a <checkAktifCalisma+0x78e>
 80056be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056c2:	485d      	ldr	r0, [pc, #372]	; (8005838 <checkAktifCalisma+0x8bc>)
 80056c4:	f004 fe2e 	bl	800a324 <HAL_GPIO_ReadPin>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d007      	beq.n	80056de <checkAktifCalisma+0x762>
 80056ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056d2:	4857      	ldr	r0, [pc, #348]	; (8005830 <checkAktifCalisma+0x8b4>)
 80056d4:	f004 fe26 	bl	800a324 <HAL_GPIO_ReadPin>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d115      	bne.n	800570a <checkAktifCalisma+0x78e>
 80056de:	4b57      	ldr	r3, [pc, #348]	; (800583c <checkAktifCalisma+0x8c0>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d011      	beq.n	800570a <checkAktifCalisma+0x78e>
 80056e6:	4b56      	ldr	r3, [pc, #344]	; (8005840 <checkAktifCalisma+0x8c4>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00d      	beq.n	800570a <checkAktifCalisma+0x78e>
 80056ee:	4b55      	ldr	r3, [pc, #340]	; (8005844 <checkAktifCalisma+0x8c8>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	f083 0301 	eor.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d006      	beq.n	800570a <checkAktifCalisma+0x78e>
			timer2=millis;
 80056fc:	4b52      	ldr	r3, [pc, #328]	; (8005848 <checkAktifCalisma+0x8cc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a52      	ldr	r2, [pc, #328]	; (800584c <checkAktifCalisma+0x8d0>)
 8005702:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005704:	4b4f      	ldr	r3, [pc, #316]	; (8005844 <checkAktifCalisma+0x8c8>)
 8005706:	2201      	movs	r2, #1
 8005708:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800570a:	4b4f      	ldr	r3, [pc, #316]	; (8005848 <checkAktifCalisma+0x8cc>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4b4f      	ldr	r3, [pc, #316]	; (800584c <checkAktifCalisma+0x8d0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	4a4e      	ldr	r2, [pc, #312]	; (8005850 <checkAktifCalisma+0x8d4>)
 8005716:	7812      	ldrb	r2, [r2, #0]
 8005718:	4293      	cmp	r3, r2
 800571a:	d303      	bcc.n	8005724 <checkAktifCalisma+0x7a8>
 800571c:	4b49      	ldr	r3, [pc, #292]	; (8005844 <checkAktifCalisma+0x8c8>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10d      	bne.n	8005740 <checkAktifCalisma+0x7c4>
 8005724:	4b45      	ldr	r3, [pc, #276]	; (800583c <checkAktifCalisma+0x8c0>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f083 0301 	eor.w	r3, r3, #1
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <checkAktifCalisma+0x7c4>
 8005732:	4b43      	ldr	r3, [pc, #268]	; (8005840 <checkAktifCalisma+0x8c4>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	f083 0301 	eor.w	r3, r3, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005740:	2200      	movs	r2, #0
 8005742:	2120      	movs	r1, #32
 8005744:	483a      	ldr	r0, [pc, #232]	; (8005830 <checkAktifCalisma+0x8b4>)
 8005746:	f004 fe04 	bl	800a352 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800574a:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <checkAktifCalisma+0x8b8>)
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005750:	4b3c      	ldr	r3, [pc, #240]	; (8005844 <checkAktifCalisma+0x8c8>)
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005756:	4b3f      	ldr	r3, [pc, #252]	; (8005854 <checkAktifCalisma+0x8d8>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 8088 	bne.w	8005870 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005760:	4b3d      	ldr	r3, [pc, #244]	; (8005858 <checkAktifCalisma+0x8dc>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d003      	beq.n	8005770 <checkAktifCalisma+0x7f4>
 8005768:	4b3b      	ldr	r3, [pc, #236]	; (8005858 <checkAktifCalisma+0x8dc>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d17f      	bne.n	8005870 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005770:	4b32      	ldr	r3, [pc, #200]	; (800583c <checkAktifCalisma+0x8c0>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d07b      	beq.n	8005870 <checkAktifCalisma+0x8f4>
 8005778:	4b31      	ldr	r3, [pc, #196]	; (8005840 <checkAktifCalisma+0x8c4>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d077      	beq.n	8005870 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005780:	2140      	movs	r1, #64	; 0x40
 8005782:	482b      	ldr	r0, [pc, #172]	; (8005830 <checkAktifCalisma+0x8b4>)
 8005784:	f004 fdce 	bl	800a324 <HAL_GPIO_ReadPin>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d170      	bne.n	8005870 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800578e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005792:	4827      	ldr	r0, [pc, #156]	; (8005830 <checkAktifCalisma+0x8b4>)
 8005794:	f004 fdc6 	bl	800a324 <HAL_GPIO_ReadPin>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <checkAktifCalisma+0x82a>
 800579e:	4b2f      	ldr	r3, [pc, #188]	; (800585c <checkAktifCalisma+0x8e0>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d164      	bne.n	8005870 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80057a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057aa:	4823      	ldr	r0, [pc, #140]	; (8005838 <checkAktifCalisma+0x8bc>)
 80057ac:	f004 fdba 	bl	800a324 <HAL_GPIO_ReadPin>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10f      	bne.n	80057d6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80057b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057ba:	481f      	ldr	r0, [pc, #124]	; (8005838 <checkAktifCalisma+0x8bc>)
 80057bc:	f004 fdb2 	bl	800a324 <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d107      	bne.n	80057d6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80057c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057ca:	481b      	ldr	r0, [pc, #108]	; (8005838 <checkAktifCalisma+0x8bc>)
 80057cc:	f004 fdaa 	bl	800a324 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d003      	beq.n	80057de <checkAktifCalisma+0x862>
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <checkAktifCalisma+0x8e4>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d048      	beq.n	8005870 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <checkAktifCalisma+0x8e8>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f083 0301 	eor.w	r3, r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d041      	beq.n	8005870 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80057ec:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <checkAktifCalisma+0x8ec>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f083 0301 	eor.w	r3, r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03a      	beq.n	8005870 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80057fa:	4b1c      	ldr	r3, [pc, #112]	; (800586c <checkAktifCalisma+0x8f0>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	f083 0301 	eor.w	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d033      	beq.n	8005870 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <checkAktifCalisma+0x8b8>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d02c      	beq.n	8005870 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005816:	4b05      	ldr	r3, [pc, #20]	; (800582c <checkAktifCalisma+0x8b0>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f083 0301 	eor.w	r3, r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d025      	beq.n	8005870 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <checkAktifCalisma+0x8e4>)
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	e024      	b.n	8005876 <checkAktifCalisma+0x8fa>
 800582c:	20000b22 	.word	0x20000b22
 8005830:	40011000 	.word	0x40011000
 8005834:	20000b26 	.word	0x20000b26
 8005838:	40010c00 	.word	0x40010c00
 800583c:	20000b3e 	.word	0x20000b3e
 8005840:	20000b3f 	.word	0x20000b3f
 8005844:	20000b1e 	.word	0x20000b1e
 8005848:	20000ac8 	.word	0x20000ac8
 800584c:	20000ad4 	.word	0x20000ad4
 8005850:	20000b02 	.word	0x20000b02
 8005854:	20000b09 	.word	0x20000b09
 8005858:	20000afb 	.word	0x20000afb
 800585c:	20000afd 	.word	0x20000afd
 8005860:	20000b23 	.word	0x20000b23
 8005864:	20000b21 	.word	0x20000b21
 8005868:	20000b25 	.word	0x20000b25
 800586c:	20000b24 	.word	0x20000b24
		} else {
			devmotorasagicalisiyor=0;
 8005870:	4b96      	ldr	r3, [pc, #600]	; (8005acc <checkAktifCalisma+0xb50>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005876:	4b95      	ldr	r3, [pc, #596]	; (8005acc <checkAktifCalisma+0xb50>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800587e:	2201      	movs	r2, #1
 8005880:	2110      	movs	r1, #16
 8005882:	4893      	ldr	r0, [pc, #588]	; (8005ad0 <checkAktifCalisma+0xb54>)
 8005884:	f004 fd65 	bl	800a352 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005888:	4b92      	ldr	r3, [pc, #584]	; (8005ad4 <checkAktifCalisma+0xb58>)
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800588e:	4b91      	ldr	r3, [pc, #580]	; (8005ad4 <checkAktifCalisma+0xb58>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d024      	beq.n	80058e0 <checkAktifCalisma+0x964>
 8005896:	2140      	movs	r1, #64	; 0x40
 8005898:	488d      	ldr	r0, [pc, #564]	; (8005ad0 <checkAktifCalisma+0xb54>)
 800589a:	f004 fd43 	bl	800a324 <HAL_GPIO_ReadPin>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d007      	beq.n	80058b4 <checkAktifCalisma+0x938>
 80058a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058a8:	4889      	ldr	r0, [pc, #548]	; (8005ad0 <checkAktifCalisma+0xb54>)
 80058aa:	f004 fd3b 	bl	800a324 <HAL_GPIO_ReadPin>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d115      	bne.n	80058e0 <checkAktifCalisma+0x964>
 80058b4:	4b88      	ldr	r3, [pc, #544]	; (8005ad8 <checkAktifCalisma+0xb5c>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d011      	beq.n	80058e0 <checkAktifCalisma+0x964>
 80058bc:	4b87      	ldr	r3, [pc, #540]	; (8005adc <checkAktifCalisma+0xb60>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00d      	beq.n	80058e0 <checkAktifCalisma+0x964>
 80058c4:	4b86      	ldr	r3, [pc, #536]	; (8005ae0 <checkAktifCalisma+0xb64>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f083 0301 	eor.w	r3, r3, #1
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d006      	beq.n	80058e0 <checkAktifCalisma+0x964>
			timer2=millis;
 80058d2:	4b84      	ldr	r3, [pc, #528]	; (8005ae4 <checkAktifCalisma+0xb68>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a84      	ldr	r2, [pc, #528]	; (8005ae8 <checkAktifCalisma+0xb6c>)
 80058d8:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80058da:	4b81      	ldr	r3, [pc, #516]	; (8005ae0 <checkAktifCalisma+0xb64>)
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80058e0:	4b80      	ldr	r3, [pc, #512]	; (8005ae4 <checkAktifCalisma+0xb68>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b80      	ldr	r3, [pc, #512]	; (8005ae8 <checkAktifCalisma+0xb6c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	4a80      	ldr	r2, [pc, #512]	; (8005aec <checkAktifCalisma+0xb70>)
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d303      	bcc.n	80058fa <checkAktifCalisma+0x97e>
 80058f2:	4b7b      	ldr	r3, [pc, #492]	; (8005ae0 <checkAktifCalisma+0xb64>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10d      	bne.n	8005916 <checkAktifCalisma+0x99a>
 80058fa:	4b77      	ldr	r3, [pc, #476]	; (8005ad8 <checkAktifCalisma+0xb5c>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f083 0301 	eor.w	r3, r3, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <checkAktifCalisma+0x99a>
 8005908:	4b74      	ldr	r3, [pc, #464]	; (8005adc <checkAktifCalisma+0xb60>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f083 0301 	eor.w	r3, r3, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005916:	2200      	movs	r2, #0
 8005918:	2110      	movs	r1, #16
 800591a:	486d      	ldr	r0, [pc, #436]	; (8005ad0 <checkAktifCalisma+0xb54>)
 800591c:	f004 fd19 	bl	800a352 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005920:	4b6c      	ldr	r3, [pc, #432]	; (8005ad4 <checkAktifCalisma+0xb58>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005926:	4b6e      	ldr	r3, [pc, #440]	; (8005ae0 <checkAktifCalisma+0xb64>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800592c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005930:	486f      	ldr	r0, [pc, #444]	; (8005af0 <checkAktifCalisma+0xb74>)
 8005932:	f004 fcf7 	bl	800a324 <HAL_GPIO_ReadPin>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d120      	bne.n	800597e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800593c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005940:	486b      	ldr	r0, [pc, #428]	; (8005af0 <checkAktifCalisma+0xb74>)
 8005942:	f004 fcef 	bl	800a324 <HAL_GPIO_ReadPin>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d118      	bne.n	800597e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800594c:	2104      	movs	r1, #4
 800594e:	4868      	ldr	r0, [pc, #416]	; (8005af0 <checkAktifCalisma+0xb74>)
 8005950:	f004 fce8 	bl	800a324 <HAL_GPIO_ReadPin>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d111      	bne.n	800597e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800595a:	2102      	movs	r1, #2
 800595c:	4864      	ldr	r0, [pc, #400]	; (8005af0 <checkAktifCalisma+0xb74>)
 800595e:	f004 fce1 	bl	800a324 <HAL_GPIO_ReadPin>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005968:	2101      	movs	r1, #1
 800596a:	4861      	ldr	r0, [pc, #388]	; (8005af0 <checkAktifCalisma+0xb74>)
 800596c:	f004 fcda 	bl	800a324 <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d103      	bne.n	800597e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005976:	4b5f      	ldr	r3, [pc, #380]	; (8005af4 <checkAktifCalisma+0xb78>)
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	e002      	b.n	8005984 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800597e:	4b5d      	ldr	r3, [pc, #372]	; (8005af4 <checkAktifCalisma+0xb78>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005984:	4b5c      	ldr	r3, [pc, #368]	; (8005af8 <checkAktifCalisma+0xb7c>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d144      	bne.n	8005a16 <checkAktifCalisma+0xa9a>
 800598c:	4b5b      	ldr	r3, [pc, #364]	; (8005afc <checkAktifCalisma+0xb80>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d003      	beq.n	800599c <checkAktifCalisma+0xa20>
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <checkAktifCalisma+0xb80>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d13c      	bne.n	8005a16 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800599c:	2180      	movs	r1, #128	; 0x80
 800599e:	484c      	ldr	r0, [pc, #304]	; (8005ad0 <checkAktifCalisma+0xb54>)
 80059a0:	f004 fcc0 	bl	800a324 <HAL_GPIO_ReadPin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <checkAktifCalisma+0xa36>
 80059aa:	4b55      	ldr	r3, [pc, #340]	; (8005b00 <checkAktifCalisma+0xb84>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <checkAktifCalisma+0xa4e>
 80059b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059b6:	484e      	ldr	r0, [pc, #312]	; (8005af0 <checkAktifCalisma+0xb74>)
 80059b8:	f004 fcb4 	bl	800a324 <HAL_GPIO_ReadPin>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d129      	bne.n	8005a16 <checkAktifCalisma+0xa9a>
 80059c2:	4b4f      	ldr	r3, [pc, #316]	; (8005b00 <checkAktifCalisma+0xb84>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d125      	bne.n	8005a16 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059ca:	2104      	movs	r1, #4
 80059cc:	4840      	ldr	r0, [pc, #256]	; (8005ad0 <checkAktifCalisma+0xb54>)
 80059ce:	f004 fca9 	bl	800a324 <HAL_GPIO_ReadPin>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d003      	beq.n	80059e0 <checkAktifCalisma+0xa64>
 80059d8:	4b4a      	ldr	r3, [pc, #296]	; (8005b04 <checkAktifCalisma+0xb88>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d11a      	bne.n	8005a16 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059e0:	2102      	movs	r1, #2
 80059e2:	483b      	ldr	r0, [pc, #236]	; (8005ad0 <checkAktifCalisma+0xb54>)
 80059e4:	f004 fc9e 	bl	800a324 <HAL_GPIO_ReadPin>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d113      	bne.n	8005a16 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80059ee:	4b46      	ldr	r3, [pc, #280]	; (8005b08 <checkAktifCalisma+0xb8c>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f083 0301 	eor.w	r3, r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00c      	beq.n	8005a16 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80059fc:	4b3d      	ldr	r3, [pc, #244]	; (8005af4 <checkAktifCalisma+0xb78>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005a04:	4b41      	ldr	r3, [pc, #260]	; (8005b0c <checkAktifCalisma+0xb90>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a0a:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <checkAktifCalisma+0xb68>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a40      	ldr	r2, [pc, #256]	; (8005b10 <checkAktifCalisma+0xb94>)
 8005a10:	6013      	str	r3, [r2, #0]
			bekle();
 8005a12:	f7ff f901 	bl	8004c18 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005a16:	4b33      	ldr	r3, [pc, #204]	; (8005ae4 <checkAktifCalisma+0xb68>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <checkAktifCalisma+0xb94>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	4a3c      	ldr	r2, [pc, #240]	; (8005b14 <checkAktifCalisma+0xb98>)
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d211      	bcs.n	8005a4c <checkAktifCalisma+0xad0>
 8005a28:	2104      	movs	r1, #4
 8005a2a:	4829      	ldr	r0, [pc, #164]	; (8005ad0 <checkAktifCalisma+0xb54>)
 8005a2c:	f004 fc7a 	bl	800a324 <HAL_GPIO_ReadPin>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <checkAktifCalisma+0xad0>
 8005a36:	4b33      	ldr	r3, [pc, #204]	; (8005b04 <checkAktifCalisma+0xb88>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d006      	beq.n	8005a4c <checkAktifCalisma+0xad0>
 8005a3e:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <checkAktifCalisma+0xb78>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f083 0301 	eor.w	r3, r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005a4c:	4b2f      	ldr	r3, [pc, #188]	; (8005b0c <checkAktifCalisma+0xb90>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <checkAktifCalisma+0xb7c>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d160      	bne.n	8005b1c <checkAktifCalisma+0xba0>
 8005a5a:	4b28      	ldr	r3, [pc, #160]	; (8005afc <checkAktifCalisma+0xb80>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d003      	beq.n	8005a6a <checkAktifCalisma+0xaee>
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <checkAktifCalisma+0xb80>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d158      	bne.n	8005b1c <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a6a:	2104      	movs	r1, #4
 8005a6c:	4818      	ldr	r0, [pc, #96]	; (8005ad0 <checkAktifCalisma+0xb54>)
 8005a6e:	f004 fc59 	bl	800a324 <HAL_GPIO_ReadPin>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d003      	beq.n	8005a80 <checkAktifCalisma+0xb04>
 8005a78:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <checkAktifCalisma+0xb88>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d14d      	bne.n	8005b1c <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a80:	2102      	movs	r1, #2
 8005a82:	4813      	ldr	r0, [pc, #76]	; (8005ad0 <checkAktifCalisma+0xb54>)
 8005a84:	f004 fc4e 	bl	800a324 <HAL_GPIO_ReadPin>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d146      	bne.n	8005b1c <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a8e:	2180      	movs	r1, #128	; 0x80
 8005a90:	480f      	ldr	r0, [pc, #60]	; (8005ad0 <checkAktifCalisma+0xb54>)
 8005a92:	f004 fc47 	bl	800a324 <HAL_GPIO_ReadPin>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d103      	bne.n	8005aa4 <checkAktifCalisma+0xb28>
 8005a9c:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <checkAktifCalisma+0xb84>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <checkAktifCalisma+0xb40>
 8005aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005aa8:	4811      	ldr	r0, [pc, #68]	; (8005af0 <checkAktifCalisma+0xb74>)
 8005aaa:	f004 fc3b 	bl	800a324 <HAL_GPIO_ReadPin>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d133      	bne.n	8005b1c <checkAktifCalisma+0xba0>
 8005ab4:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <checkAktifCalisma+0xb84>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d12f      	bne.n	8005b1c <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <checkAktifCalisma+0xb78>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d02b      	beq.n	8005b1c <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005ac4:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <checkAktifCalisma+0xb9c>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	e02a      	b.n	8005b22 <checkAktifCalisma+0xba6>
 8005acc:	20000b23 	.word	0x20000b23
 8005ad0:	40011000 	.word	0x40011000
 8005ad4:	20000b27 	.word	0x20000b27
 8005ad8:	20000b3e 	.word	0x20000b3e
 8005adc:	20000b3f 	.word	0x20000b3f
 8005ae0:	20000b1f 	.word	0x20000b1f
 8005ae4:	20000ac8 	.word	0x20000ac8
 8005ae8:	20000ad4 	.word	0x20000ad4
 8005aec:	20000b02 	.word	0x20000b02
 8005af0:	40010c00 	.word	0x40010c00
 8005af4:	20000b2e 	.word	0x20000b2e
 8005af8:	20000af5 	.word	0x20000af5
 8005afc:	20000af4 	.word	0x20000af4
 8005b00:	20000af8 	.word	0x20000af8
 8005b04:	20000af2 	.word	0x20000af2
 8005b08:	20000b1b 	.word	0x20000b1b
 8005b0c:	20000b2f 	.word	0x20000b2f
 8005b10:	20000acc 	.word	0x20000acc
 8005b14:	20000b05 	.word	0x20000b05
 8005b18:	20000b30 	.word	0x20000b30
		} else {
			kapi1butonkontrol=0;
 8005b1c:	4b8b      	ldr	r3, [pc, #556]	; (8005d4c <checkAktifCalisma+0xdd0>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b22:	4b8b      	ldr	r3, [pc, #556]	; (8005d50 <checkAktifCalisma+0xdd4>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d121      	bne.n	8005b6e <checkAktifCalisma+0xbf2>
 8005b2a:	4b8a      	ldr	r3, [pc, #552]	; (8005d54 <checkAktifCalisma+0xdd8>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d003      	beq.n	8005b3a <checkAktifCalisma+0xbbe>
 8005b32:	4b88      	ldr	r3, [pc, #544]	; (8005d54 <checkAktifCalisma+0xdd8>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d119      	bne.n	8005b6e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b3a:	2104      	movs	r1, #4
 8005b3c:	4886      	ldr	r0, [pc, #536]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005b3e:	f004 fbf1 	bl	800a324 <HAL_GPIO_ReadPin>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d003      	beq.n	8005b50 <checkAktifCalisma+0xbd4>
 8005b48:	4b84      	ldr	r3, [pc, #528]	; (8005d5c <checkAktifCalisma+0xde0>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10e      	bne.n	8005b6e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005b50:	2102      	movs	r1, #2
 8005b52:	4881      	ldr	r0, [pc, #516]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005b54:	f004 fbe6 	bl	800a324 <HAL_GPIO_ReadPin>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d107      	bne.n	8005b6e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005b5e:	4b80      	ldr	r3, [pc, #512]	; (8005d60 <checkAktifCalisma+0xde4>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005b66:	4b7f      	ldr	r3, [pc, #508]	; (8005d64 <checkAktifCalisma+0xde8>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	e002      	b.n	8005b74 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005b6e:	4b7d      	ldr	r3, [pc, #500]	; (8005d64 <checkAktifCalisma+0xde8>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005b74:	4b75      	ldr	r3, [pc, #468]	; (8005d4c <checkAktifCalisma+0xdd0>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d107      	bne.n	8005b8c <checkAktifCalisma+0xc10>
 8005b7c:	4b79      	ldr	r3, [pc, #484]	; (8005d64 <checkAktifCalisma+0xde8>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <checkAktifCalisma+0xc10>
 8005b84:	4b78      	ldr	r3, [pc, #480]	; (8005d68 <checkAktifCalisma+0xdec>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	4876      	ldr	r0, [pc, #472]	; (8005d6c <checkAktifCalisma+0xdf0>)
 8005b92:	f004 fbde 	bl	800a352 <HAL_GPIO_WritePin>
 8005b96:	e004      	b.n	8005ba2 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	4873      	ldr	r0, [pc, #460]	; (8005d6c <checkAktifCalisma+0xdf0>)
 8005b9e:	f004 fbd8 	bl	800a352 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ba2:	4b73      	ldr	r3, [pc, #460]	; (8005d70 <checkAktifCalisma+0xdf4>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d141      	bne.n	8005c2e <checkAktifCalisma+0xcb2>
 8005baa:	4b6a      	ldr	r3, [pc, #424]	; (8005d54 <checkAktifCalisma+0xdd8>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d003      	beq.n	8005bba <checkAktifCalisma+0xc3e>
 8005bb2:	4b68      	ldr	r3, [pc, #416]	; (8005d54 <checkAktifCalisma+0xdd8>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d139      	bne.n	8005c2e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bbe:	4866      	ldr	r0, [pc, #408]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005bc0:	f004 fbb0 	bl	800a324 <HAL_GPIO_ReadPin>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <checkAktifCalisma+0xc56>
 8005bca:	4b6a      	ldr	r3, [pc, #424]	; (8005d74 <checkAktifCalisma+0xdf8>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <checkAktifCalisma+0xc6e>
 8005bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bd6:	4868      	ldr	r0, [pc, #416]	; (8005d78 <checkAktifCalisma+0xdfc>)
 8005bd8:	f004 fba4 	bl	800a324 <HAL_GPIO_ReadPin>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d125      	bne.n	8005c2e <checkAktifCalisma+0xcb2>
 8005be2:	4b64      	ldr	r3, [pc, #400]	; (8005d74 <checkAktifCalisma+0xdf8>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d121      	bne.n	8005c2e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bea:	2102      	movs	r1, #2
 8005bec:	485a      	ldr	r0, [pc, #360]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005bee:	f004 fb99 	bl	800a324 <HAL_GPIO_ReadPin>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d11a      	bne.n	8005c2e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bf8:	2104      	movs	r1, #4
 8005bfa:	4857      	ldr	r0, [pc, #348]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005bfc:	f004 fb92 	bl	800a324 <HAL_GPIO_ReadPin>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d113      	bne.n	8005c2e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005c06:	4b56      	ldr	r3, [pc, #344]	; (8005d60 <checkAktifCalisma+0xde4>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00f      	beq.n	8005c2e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005c0e:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <checkAktifCalisma+0xe00>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f083 0301 	eor.w	r3, r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005c1c:	4b58      	ldr	r3, [pc, #352]	; (8005d80 <checkAktifCalisma+0xe04>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005c22:	4b58      	ldr	r3, [pc, #352]	; (8005d84 <checkAktifCalisma+0xe08>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a58      	ldr	r2, [pc, #352]	; (8005d88 <checkAktifCalisma+0xe0c>)
 8005c28:	6013      	str	r3, [r2, #0]
			bekle();
 8005c2a:	f7fe fff5 	bl	8004c18 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005c2e:	4b55      	ldr	r3, [pc, #340]	; (8005d84 <checkAktifCalisma+0xe08>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b55      	ldr	r3, [pc, #340]	; (8005d88 <checkAktifCalisma+0xe0c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	4a54      	ldr	r2, [pc, #336]	; (8005d8c <checkAktifCalisma+0xe10>)
 8005c3a:	7812      	ldrb	r2, [r2, #0]
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d20d      	bcs.n	8005c5c <checkAktifCalisma+0xce0>
 8005c40:	2102      	movs	r1, #2
 8005c42:	4845      	ldr	r0, [pc, #276]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005c44:	f004 fb6e 	bl	800a324 <HAL_GPIO_ReadPin>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d006      	beq.n	8005c5c <checkAktifCalisma+0xce0>
 8005c4e:	4b44      	ldr	r3, [pc, #272]	; (8005d60 <checkAktifCalisma+0xde4>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	f083 0301 	eor.w	r3, r3, #1
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005c5c:	4b48      	ldr	r3, [pc, #288]	; (8005d80 <checkAktifCalisma+0xe04>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c62:	4b43      	ldr	r3, [pc, #268]	; (8005d70 <checkAktifCalisma+0xdf4>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d135      	bne.n	8005cd6 <checkAktifCalisma+0xd5a>
 8005c6a:	4b3a      	ldr	r3, [pc, #232]	; (8005d54 <checkAktifCalisma+0xdd8>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d003      	beq.n	8005c7a <checkAktifCalisma+0xcfe>
 8005c72:	4b38      	ldr	r3, [pc, #224]	; (8005d54 <checkAktifCalisma+0xdd8>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d12d      	bne.n	8005cd6 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c7e:	4836      	ldr	r0, [pc, #216]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005c80:	f004 fb50 	bl	800a324 <HAL_GPIO_ReadPin>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <checkAktifCalisma+0xd16>
 8005c8a:	4b3a      	ldr	r3, [pc, #232]	; (8005d74 <checkAktifCalisma+0xdf8>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <checkAktifCalisma+0xd2e>
 8005c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c96:	4838      	ldr	r0, [pc, #224]	; (8005d78 <checkAktifCalisma+0xdfc>)
 8005c98:	f004 fb44 	bl	800a324 <HAL_GPIO_ReadPin>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d119      	bne.n	8005cd6 <checkAktifCalisma+0xd5a>
 8005ca2:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <checkAktifCalisma+0xdf8>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d115      	bne.n	8005cd6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005caa:	2102      	movs	r1, #2
 8005cac:	482a      	ldr	r0, [pc, #168]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005cae:	f004 fb39 	bl	800a324 <HAL_GPIO_ReadPin>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d10e      	bne.n	8005cd6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005cb8:	2104      	movs	r1, #4
 8005cba:	4827      	ldr	r0, [pc, #156]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005cbc:	f004 fb32 	bl	800a324 <HAL_GPIO_ReadPin>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d107      	bne.n	8005cd6 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005cc6:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <checkAktifCalisma+0xde4>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005cce:	4b30      	ldr	r3, [pc, #192]	; (8005d90 <checkAktifCalisma+0xe14>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	e002      	b.n	8005cdc <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005cd6:	4b2e      	ldr	r3, [pc, #184]	; (8005d90 <checkAktifCalisma+0xe14>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005cdc:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <checkAktifCalisma+0xdf4>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d11d      	bne.n	8005d20 <checkAktifCalisma+0xda4>
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <checkAktifCalisma+0xdd8>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d003      	beq.n	8005cf4 <checkAktifCalisma+0xd78>
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <checkAktifCalisma+0xdd8>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d115      	bne.n	8005d20 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	4818      	ldr	r0, [pc, #96]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005cf8:	f004 fb14 	bl	800a324 <HAL_GPIO_ReadPin>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d10e      	bne.n	8005d20 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d02:	2104      	movs	r1, #4
 8005d04:	4814      	ldr	r0, [pc, #80]	; (8005d58 <checkAktifCalisma+0xddc>)
 8005d06:	f004 fb0d 	bl	800a324 <HAL_GPIO_ReadPin>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <checkAktifCalisma+0xde4>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <checkAktifCalisma+0xe18>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	e002      	b.n	8005d26 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005d20:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <checkAktifCalisma+0xe18>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005d26:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <checkAktifCalisma+0xe14>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <checkAktifCalisma+0xdc2>
 8005d2e:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <checkAktifCalisma+0xe18>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <checkAktifCalisma+0xdc2>
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <checkAktifCalisma+0xe04>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d02c      	beq.n	8005d98 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005d3e:	2201      	movs	r2, #1
 8005d40:	2140      	movs	r1, #64	; 0x40
 8005d42:	480a      	ldr	r0, [pc, #40]	; (8005d6c <checkAktifCalisma+0xdf0>)
 8005d44:	f004 fb05 	bl	800a352 <HAL_GPIO_WritePin>
 8005d48:	e02b      	b.n	8005da2 <checkAktifCalisma+0xe26>
 8005d4a:	bf00      	nop
 8005d4c:	20000b30 	.word	0x20000b30
 8005d50:	20000af5 	.word	0x20000af5
 8005d54:	20000af4 	.word	0x20000af4
 8005d58:	40011000 	.word	0x40011000
 8005d5c:	20000af2 	.word	0x20000af2
 8005d60:	20000b2e 	.word	0x20000b2e
 8005d64:	20000b31 	.word	0x20000b31
 8005d68:	20000b2f 	.word	0x20000b2f
 8005d6c:	40010800 	.word	0x40010800
 8005d70:	20000af6 	.word	0x20000af6
 8005d74:	20000af8 	.word	0x20000af8
 8005d78:	40010c00 	.word	0x40010c00
 8005d7c:	20000b1b 	.word	0x20000b1b
 8005d80:	20000b32 	.word	0x20000b32
 8005d84:	20000ac8 	.word	0x20000ac8
 8005d88:	20000acc 	.word	0x20000acc
 8005d8c:	20000b06 	.word	0x20000b06
 8005d90:	20000b33 	.word	0x20000b33
 8005d94:	20000b34 	.word	0x20000b34
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2140      	movs	r1, #64	; 0x40
 8005d9c:	488d      	ldr	r0, [pc, #564]	; (8005fd4 <checkAktifCalisma+0x1058>)
 8005d9e:	f004 fad8 	bl	800a352 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005da2:	4b8d      	ldr	r3, [pc, #564]	; (8005fd8 <checkAktifCalisma+0x105c>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <checkAktifCalisma+0xe36>
 8005daa:	4b8b      	ldr	r3, [pc, #556]	; (8005fd8 <checkAktifCalisma+0x105c>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d115      	bne.n	8005dde <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005db2:	2104      	movs	r1, #4
 8005db4:	4889      	ldr	r0, [pc, #548]	; (8005fdc <checkAktifCalisma+0x1060>)
 8005db6:	f004 fab5 	bl	800a324 <HAL_GPIO_ReadPin>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d003      	beq.n	8005dc8 <checkAktifCalisma+0xe4c>
 8005dc0:	4b87      	ldr	r3, [pc, #540]	; (8005fe0 <checkAktifCalisma+0x1064>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005dc8:	2102      	movs	r1, #2
 8005dca:	4884      	ldr	r0, [pc, #528]	; (8005fdc <checkAktifCalisma+0x1060>)
 8005dcc:	f004 faaa 	bl	800a324 <HAL_GPIO_ReadPin>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d103      	bne.n	8005dde <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005dd6:	4b83      	ldr	r3, [pc, #524]	; (8005fe4 <checkAktifCalisma+0x1068>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e002      	b.n	8005de4 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005dde:	4b81      	ldr	r3, [pc, #516]	; (8005fe4 <checkAktifCalisma+0x1068>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005de4:	4b7c      	ldr	r3, [pc, #496]	; (8005fd8 <checkAktifCalisma+0x105c>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d003      	beq.n	8005df4 <checkAktifCalisma+0xe78>
 8005dec:	4b7a      	ldr	r3, [pc, #488]	; (8005fd8 <checkAktifCalisma+0x105c>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d111      	bne.n	8005e18 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005df4:	2102      	movs	r1, #2
 8005df6:	4879      	ldr	r0, [pc, #484]	; (8005fdc <checkAktifCalisma+0x1060>)
 8005df8:	f004 fa94 	bl	800a324 <HAL_GPIO_ReadPin>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d10a      	bne.n	8005e18 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005e02:	2104      	movs	r1, #4
 8005e04:	4875      	ldr	r0, [pc, #468]	; (8005fdc <checkAktifCalisma+0x1060>)
 8005e06:	f004 fa8d 	bl	800a324 <HAL_GPIO_ReadPin>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005e10:	4b75      	ldr	r3, [pc, #468]	; (8005fe8 <checkAktifCalisma+0x106c>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	e002      	b.n	8005e1e <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005e18:	4b73      	ldr	r3, [pc, #460]	; (8005fe8 <checkAktifCalisma+0x106c>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005e1e:	4b71      	ldr	r3, [pc, #452]	; (8005fe4 <checkAktifCalisma+0x1068>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00f      	beq.n	8005e46 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005e26:	4b71      	ldr	r3, [pc, #452]	; (8005fec <checkAktifCalisma+0x1070>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d10b      	bne.n	8005e46 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e32:	486f      	ldr	r0, [pc, #444]	; (8005ff0 <checkAktifCalisma+0x1074>)
 8005e34:	f004 fa76 	bl	800a324 <HAL_GPIO_ReadPin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005e3e:	4b6d      	ldr	r3, [pc, #436]	; (8005ff4 <checkAktifCalisma+0x1078>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	e002      	b.n	8005e4c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005e46:	4b6b      	ldr	r3, [pc, #428]	; (8005ff4 <checkAktifCalisma+0x1078>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005e4c:	4b66      	ldr	r3, [pc, #408]	; (8005fe8 <checkAktifCalisma+0x106c>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00f      	beq.n	8005e74 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005e54:	4b65      	ldr	r3, [pc, #404]	; (8005fec <checkAktifCalisma+0x1070>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d10b      	bne.n	8005e74 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e60:	4863      	ldr	r0, [pc, #396]	; (8005ff0 <checkAktifCalisma+0x1074>)
 8005e62:	f004 fa5f 	bl	800a324 <HAL_GPIO_ReadPin>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d103      	bne.n	8005e74 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005e6c:	4b62      	ldr	r3, [pc, #392]	; (8005ff8 <checkAktifCalisma+0x107c>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e002      	b.n	8005e7a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005e74:	4b60      	ldr	r3, [pc, #384]	; (8005ff8 <checkAktifCalisma+0x107c>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e7a:	4b60      	ldr	r3, [pc, #384]	; (8005ffc <checkAktifCalisma+0x1080>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d137      	bne.n	8005ef2 <checkAktifCalisma+0xf76>
 8005e82:	4b5f      	ldr	r3, [pc, #380]	; (8006000 <checkAktifCalisma+0x1084>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d003      	beq.n	8005e92 <checkAktifCalisma+0xf16>
 8005e8a:	4b5d      	ldr	r3, [pc, #372]	; (8006000 <checkAktifCalisma+0x1084>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d12f      	bne.n	8005ef2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e92:	4b54      	ldr	r3, [pc, #336]	; (8005fe4 <checkAktifCalisma+0x1068>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <checkAktifCalisma+0xf26>
 8005e9a:	4b53      	ldr	r3, [pc, #332]	; (8005fe8 <checkAktifCalisma+0x106c>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d027      	beq.n	8005ef2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ea6:	484d      	ldr	r0, [pc, #308]	; (8005fdc <checkAktifCalisma+0x1060>)
 8005ea8:	f004 fa3c 	bl	800a324 <HAL_GPIO_ReadPin>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <checkAktifCalisma+0xf3e>
 8005eb2:	4b4e      	ldr	r3, [pc, #312]	; (8005fec <checkAktifCalisma+0x1070>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005eba:	4b4e      	ldr	r3, [pc, #312]	; (8005ff4 <checkAktifCalisma+0x1078>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <checkAktifCalisma+0xf4e>
 8005ec2:	4b4d      	ldr	r3, [pc, #308]	; (8005ff8 <checkAktifCalisma+0x107c>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d013      	beq.n	8005ef2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005eca:	4b4e      	ldr	r3, [pc, #312]	; (8006004 <checkAktifCalisma+0x1088>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00f      	beq.n	8005ef2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005ed2:	4b4d      	ldr	r3, [pc, #308]	; (8006008 <checkAktifCalisma+0x108c>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	f083 0301 	eor.w	r3, r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005ee0:	4b4a      	ldr	r3, [pc, #296]	; (800600c <checkAktifCalisma+0x1090>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <checkAktifCalisma+0x1094>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a4a      	ldr	r2, [pc, #296]	; (8006014 <checkAktifCalisma+0x1098>)
 8005eec:	6013      	str	r3, [r2, #0]
			bekle();
 8005eee:	f7fe fe93 	bl	8004c18 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <checkAktifCalisma+0x1094>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b47      	ldr	r3, [pc, #284]	; (8006014 <checkAktifCalisma+0x1098>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	4a46      	ldr	r2, [pc, #280]	; (8006018 <checkAktifCalisma+0x109c>)
 8005efe:	7812      	ldrb	r2, [r2, #0]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d214      	bcs.n	8005f2e <checkAktifCalisma+0xfb2>
 8005f04:	4b37      	ldr	r3, [pc, #220]	; (8005fe4 <checkAktifCalisma+0x1068>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	f083 0301 	eor.w	r3, r3, #1
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d006      	beq.n	8005f20 <checkAktifCalisma+0xfa4>
 8005f12:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <checkAktifCalisma+0x106c>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	f083 0301 	eor.w	r3, r3, #1
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <checkAktifCalisma+0xfb2>
 8005f20:	4b38      	ldr	r3, [pc, #224]	; (8006004 <checkAktifCalisma+0x1088>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f083 0301 	eor.w	r3, r3, #1
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005f2e:	4b37      	ldr	r3, [pc, #220]	; (800600c <checkAktifCalisma+0x1090>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f34:	4b31      	ldr	r3, [pc, #196]	; (8005ffc <checkAktifCalisma+0x1080>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d12b      	bne.n	8005f94 <checkAktifCalisma+0x1018>
 8005f3c:	4b30      	ldr	r3, [pc, #192]	; (8006000 <checkAktifCalisma+0x1084>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d003      	beq.n	8005f4c <checkAktifCalisma+0xfd0>
 8005f44:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <checkAktifCalisma+0x1084>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d123      	bne.n	8005f94 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f4c:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <checkAktifCalisma+0x1068>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <checkAktifCalisma+0xfe0>
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <checkAktifCalisma+0x106c>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01b      	beq.n	8005f94 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f60:	481e      	ldr	r0, [pc, #120]	; (8005fdc <checkAktifCalisma+0x1060>)
 8005f62:	f004 f9df 	bl	800a324 <HAL_GPIO_ReadPin>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d103      	bne.n	8005f74 <checkAktifCalisma+0xff8>
 8005f6c:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <checkAktifCalisma+0x1070>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005f74:	4b1f      	ldr	r3, [pc, #124]	; (8005ff4 <checkAktifCalisma+0x1078>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <checkAktifCalisma+0x1008>
 8005f7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ff8 <checkAktifCalisma+0x107c>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005f84:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <checkAktifCalisma+0x1088>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005f8c:	4b23      	ldr	r3, [pc, #140]	; (800601c <checkAktifCalisma+0x10a0>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e002      	b.n	8005f9a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005f94:	4b21      	ldr	r3, [pc, #132]	; (800601c <checkAktifCalisma+0x10a0>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f9a:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <checkAktifCalisma+0x1080>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d140      	bne.n	8006024 <checkAktifCalisma+0x10a8>
 8005fa2:	4b17      	ldr	r3, [pc, #92]	; (8006000 <checkAktifCalisma+0x1084>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d003      	beq.n	8005fb2 <checkAktifCalisma+0x1036>
 8005faa:	4b15      	ldr	r3, [pc, #84]	; (8006000 <checkAktifCalisma+0x1084>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d138      	bne.n	8006024 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <checkAktifCalisma+0x1068>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d103      	bne.n	8005fc2 <checkAktifCalisma+0x1046>
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <checkAktifCalisma+0x106c>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d030      	beq.n	8006024 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <checkAktifCalisma+0x1088>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d02c      	beq.n	8006024 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <checkAktifCalisma+0x10a4>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	e02b      	b.n	800602a <checkAktifCalisma+0x10ae>
 8005fd2:	bf00      	nop
 8005fd4:	40010800 	.word	0x40010800
 8005fd8:	20000af9 	.word	0x20000af9
 8005fdc:	40011000 	.word	0x40011000
 8005fe0:	20000af2 	.word	0x20000af2
 8005fe4:	20000b38 	.word	0x20000b38
 8005fe8:	20000b39 	.word	0x20000b39
 8005fec:	20000af8 	.word	0x20000af8
 8005ff0:	40010c00 	.word	0x40010c00
 8005ff4:	20000b48 	.word	0x20000b48
 8005ff8:	20000b49 	.word	0x20000b49
 8005ffc:	20000af7 	.word	0x20000af7
 8006000:	20000af4 	.word	0x20000af4
 8006004:	20000b2e 	.word	0x20000b2e
 8006008:	20000b1b 	.word	0x20000b1b
 800600c:	20000b35 	.word	0x20000b35
 8006010:	20000ac8 	.word	0x20000ac8
 8006014:	20000acc 	.word	0x20000acc
 8006018:	20000b07 	.word	0x20000b07
 800601c:	20000b36 	.word	0x20000b36
 8006020:	20000b37 	.word	0x20000b37
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006024:	4b8b      	ldr	r3, [pc, #556]	; (8006254 <checkAktifCalisma+0x12d8>)
 8006026:	2200      	movs	r2, #0
 8006028:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800602a:	4b8b      	ldr	r3, [pc, #556]	; (8006258 <checkAktifCalisma+0x12dc>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d107      	bne.n	8006042 <checkAktifCalisma+0x10c6>
 8006032:	4b8a      	ldr	r3, [pc, #552]	; (800625c <checkAktifCalisma+0x12e0>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d103      	bne.n	8006042 <checkAktifCalisma+0x10c6>
 800603a:	4b86      	ldr	r3, [pc, #536]	; (8006254 <checkAktifCalisma+0x12d8>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006042:	2201      	movs	r2, #1
 8006044:	2120      	movs	r1, #32
 8006046:	4886      	ldr	r0, [pc, #536]	; (8006260 <checkAktifCalisma+0x12e4>)
 8006048:	f004 f983 	bl	800a352 <HAL_GPIO_WritePin>
 800604c:	e004      	b.n	8006058 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800604e:	2200      	movs	r2, #0
 8006050:	2120      	movs	r1, #32
 8006052:	4883      	ldr	r0, [pc, #524]	; (8006260 <checkAktifCalisma+0x12e4>)
 8006054:	f004 f97d 	bl	800a352 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006058:	4b82      	ldr	r3, [pc, #520]	; (8006264 <checkAktifCalisma+0x12e8>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00e      	beq.n	800607e <checkAktifCalisma+0x1102>
 8006060:	2102      	movs	r1, #2
 8006062:	4881      	ldr	r0, [pc, #516]	; (8006268 <checkAktifCalisma+0x12ec>)
 8006064:	f004 f95e 	bl	800a324 <HAL_GPIO_ReadPin>
 8006068:	4603      	mov	r3, r0
 800606a:	2b01      	cmp	r3, #1
 800606c:	d107      	bne.n	800607e <checkAktifCalisma+0x1102>
 800606e:	4b7f      	ldr	r3, [pc, #508]	; (800626c <checkAktifCalisma+0x12f0>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <checkAktifCalisma+0x1102>
 8006076:	4b7e      	ldr	r3, [pc, #504]	; (8006270 <checkAktifCalisma+0x12f4>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d112      	bne.n	80060a4 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800607e:	4b7d      	ldr	r3, [pc, #500]	; (8006274 <checkAktifCalisma+0x12f8>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d066      	beq.n	8006154 <checkAktifCalisma+0x11d8>
 8006086:	2104      	movs	r1, #4
 8006088:	4877      	ldr	r0, [pc, #476]	; (8006268 <checkAktifCalisma+0x12ec>)
 800608a:	f004 f94b 	bl	800a324 <HAL_GPIO_ReadPin>
 800608e:	4603      	mov	r3, r0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d15f      	bne.n	8006154 <checkAktifCalisma+0x11d8>
 8006094:	4b75      	ldr	r3, [pc, #468]	; (800626c <checkAktifCalisma+0x12f0>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d05b      	beq.n	8006154 <checkAktifCalisma+0x11d8>
 800609c:	4b74      	ldr	r3, [pc, #464]	; (8006270 <checkAktifCalisma+0x12f4>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d057      	beq.n	8006154 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80060a4:	4b74      	ldr	r3, [pc, #464]	; (8006278 <checkAktifCalisma+0x12fc>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	4b72      	ldr	r3, [pc, #456]	; (8006278 <checkAktifCalisma+0x12fc>)
 80060ae:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80060b0:	4b71      	ldr	r3, [pc, #452]	; (8006278 <checkAktifCalisma+0x12fc>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b09      	cmp	r3, #9
 80060b6:	d908      	bls.n	80060ca <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80060b8:	4b6f      	ldr	r3, [pc, #444]	; (8006278 <checkAktifCalisma+0x12fc>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80060be:	4b6f      	ldr	r3, [pc, #444]	; (800627c <checkAktifCalisma+0x1300>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b6d      	ldr	r3, [pc, #436]	; (800627c <checkAktifCalisma+0x1300>)
 80060c8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80060ca:	4b6c      	ldr	r3, [pc, #432]	; (800627c <checkAktifCalisma+0x1300>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	d908      	bls.n	80060e4 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80060d2:	4b6a      	ldr	r3, [pc, #424]	; (800627c <checkAktifCalisma+0x1300>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80060d8:	4b69      	ldr	r3, [pc, #420]	; (8006280 <checkAktifCalisma+0x1304>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b67      	ldr	r3, [pc, #412]	; (8006280 <checkAktifCalisma+0x1304>)
 80060e2:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80060e4:	4b66      	ldr	r3, [pc, #408]	; (8006280 <checkAktifCalisma+0x1304>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	d908      	bls.n	80060fe <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80060ec:	4b64      	ldr	r3, [pc, #400]	; (8006280 <checkAktifCalisma+0x1304>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80060f2:	4b64      	ldr	r3, [pc, #400]	; (8006284 <checkAktifCalisma+0x1308>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	4b62      	ldr	r3, [pc, #392]	; (8006284 <checkAktifCalisma+0x1308>)
 80060fc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80060fe:	4b61      	ldr	r3, [pc, #388]	; (8006284 <checkAktifCalisma+0x1308>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b09      	cmp	r3, #9
 8006104:	d908      	bls.n	8006118 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8006106:	4b5f      	ldr	r3, [pc, #380]	; (8006284 <checkAktifCalisma+0x1308>)
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 800610c:	4b5e      	ldr	r3, [pc, #376]	; (8006288 <checkAktifCalisma+0x130c>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	b2da      	uxtb	r2, r3
 8006114:	4b5c      	ldr	r3, [pc, #368]	; (8006288 <checkAktifCalisma+0x130c>)
 8006116:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006118:	4b5b      	ldr	r3, [pc, #364]	; (8006288 <checkAktifCalisma+0x130c>)
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	4b5b      	ldr	r3, [pc, #364]	; (800628c <checkAktifCalisma+0x1310>)
 800611e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006122:	4b58      	ldr	r3, [pc, #352]	; (8006284 <checkAktifCalisma+0x1308>)
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	4b59      	ldr	r3, [pc, #356]	; (800628c <checkAktifCalisma+0x1310>)
 8006128:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800612a:	4b55      	ldr	r3, [pc, #340]	; (8006280 <checkAktifCalisma+0x1304>)
 800612c:	781a      	ldrb	r2, [r3, #0]
 800612e:	4b57      	ldr	r3, [pc, #348]	; (800628c <checkAktifCalisma+0x1310>)
 8006130:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006132:	4b52      	ldr	r3, [pc, #328]	; (800627c <checkAktifCalisma+0x1300>)
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	4b55      	ldr	r3, [pc, #340]	; (800628c <checkAktifCalisma+0x1310>)
 8006138:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800613a:	4b4f      	ldr	r3, [pc, #316]	; (8006278 <checkAktifCalisma+0x12fc>)
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	4b53      	ldr	r3, [pc, #332]	; (800628c <checkAktifCalisma+0x1310>)
 8006140:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006142:	4b53      	ldr	r3, [pc, #332]	; (8006290 <checkAktifCalisma+0x1314>)
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006148:	4b46      	ldr	r3, [pc, #280]	; (8006264 <checkAktifCalisma+0x12e8>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800614e:	4b49      	ldr	r3, [pc, #292]	; (8006274 <checkAktifCalisma+0x12f8>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006158:	484e      	ldr	r0, [pc, #312]	; (8006294 <checkAktifCalisma+0x1318>)
 800615a:	f004 f8e3 	bl	800a324 <HAL_GPIO_ReadPin>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d016      	beq.n	8006192 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006168:	484a      	ldr	r0, [pc, #296]	; (8006294 <checkAktifCalisma+0x1318>)
 800616a:	f004 f8db 	bl	800a324 <HAL_GPIO_ReadPin>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00e      	beq.n	8006192 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006178:	4846      	ldr	r0, [pc, #280]	; (8006294 <checkAktifCalisma+0x1318>)
 800617a:	f004 f8d3 	bl	800a324 <HAL_GPIO_ReadPin>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d006      	beq.n	8006192 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006184:	2140      	movs	r1, #64	; 0x40
 8006186:	4838      	ldr	r0, [pc, #224]	; (8006268 <checkAktifCalisma+0x12ec>)
 8006188:	f004 f8cc 	bl	800a324 <HAL_GPIO_ReadPin>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <checkAktifCalisma+0x121e>
			startBasili=1;
 8006192:	4b41      	ldr	r3, [pc, #260]	; (8006298 <checkAktifCalisma+0x131c>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	e002      	b.n	80061a0 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800619a:	4b3f      	ldr	r3, [pc, #252]	; (8006298 <checkAktifCalisma+0x131c>)
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80061a0:	4b3d      	ldr	r3, [pc, #244]	; (8006298 <checkAktifCalisma+0x131c>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d016      	beq.n	80061d6 <checkAktifCalisma+0x125a>
 80061a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061ac:	4839      	ldr	r0, [pc, #228]	; (8006294 <checkAktifCalisma+0x1318>)
 80061ae:	f004 f8b9 	bl	800a324 <HAL_GPIO_ReadPin>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d10e      	bne.n	80061d6 <checkAktifCalisma+0x125a>
			hataVar=1;
 80061b8:	4b38      	ldr	r3, [pc, #224]	; (800629c <checkAktifCalisma+0x1320>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80061be:	2001      	movs	r0, #1
 80061c0:	f7fa fd90 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80061c4:	2001      	movs	r0, #1
 80061c6:	f7fa fd35 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 80061ca:	f002 fae7 	bl	800879c <convertAndSendData>
			acilstophatasi=1;
 80061ce:	4b34      	ldr	r3, [pc, #208]	; (80062a0 <checkAktifCalisma+0x1324>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e018      	b.n	8006208 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80061d6:	4b32      	ldr	r3, [pc, #200]	; (80062a0 <checkAktifCalisma+0x1324>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d014      	beq.n	8006208 <checkAktifCalisma+0x128c>
 80061de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061e2:	482c      	ldr	r0, [pc, #176]	; (8006294 <checkAktifCalisma+0x1318>)
 80061e4:	f004 f89e 	bl	800a324 <HAL_GPIO_ReadPin>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10c      	bne.n	8006208 <checkAktifCalisma+0x128c>
 80061ee:	4b2a      	ldr	r3, [pc, #168]	; (8006298 <checkAktifCalisma+0x131c>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f083 0301 	eor.w	r3, r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80061fc:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <checkAktifCalisma+0x1324>)
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006202:	2001      	movs	r0, #1
 8006204:	f7fe fcb4 	bl	8004b70 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006208:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <checkAktifCalisma+0x1328>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f083 0301 	eor.w	r3, r3, #1
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d04e      	beq.n	80062b4 <checkAktifCalisma+0x1338>
 8006216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800621a:	481e      	ldr	r0, [pc, #120]	; (8006294 <checkAktifCalisma+0x1318>)
 800621c:	f004 f882 	bl	800a324 <HAL_GPIO_ReadPin>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <checkAktifCalisma+0x12b2>
 8006226:	4b20      	ldr	r3, [pc, #128]	; (80062a8 <checkAktifCalisma+0x132c>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d042      	beq.n	80062b4 <checkAktifCalisma+0x1338>
 800622e:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <checkAktifCalisma+0x1330>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d13e      	bne.n	80062b4 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006236:	4b19      	ldr	r3, [pc, #100]	; (800629c <checkAktifCalisma+0x1320>)
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800623c:	2002      	movs	r0, #2
 800623e:	f7fa fd51 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006242:	2002      	movs	r0, #2
 8006244:	f7fa fcf6 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8006248:	f002 faa8 	bl	800879c <convertAndSendData>
			emniyetCercevesihatasi=1;
 800624c:	4b18      	ldr	r3, [pc, #96]	; (80062b0 <checkAktifCalisma+0x1334>)
 800624e:	2201      	movs	r2, #1
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	e047      	b.n	80062e4 <checkAktifCalisma+0x1368>
 8006254:	20000b37 	.word	0x20000b37
 8006258:	20000b36 	.word	0x20000b36
 800625c:	20000b35 	.word	0x20000b35
 8006260:	40010800 	.word	0x40010800
 8006264:	20000b2b 	.word	0x20000b2b
 8006268:	40011000 	.word	0x40011000
 800626c:	20000af2 	.word	0x20000af2
 8006270:	20000b2e 	.word	0x20000b2e
 8006274:	20000b2c 	.word	0x20000b2c
 8006278:	20000ae9 	.word	0x20000ae9
 800627c:	20000aea 	.word	0x20000aea
 8006280:	20000000 	.word	0x20000000
 8006284:	20000001 	.word	0x20000001
 8006288:	20000aeb 	.word	0x20000aeb
 800628c:	20000a18 	.word	0x20000a18
 8006290:	20000b18 	.word	0x20000b18
 8006294:	40010c00 	.word	0x40010c00
 8006298:	20000b3a 	.word	0x20000b3a
 800629c:	20000b41 	.word	0x20000b41
 80062a0:	20000b3c 	.word	0x20000b3c
 80062a4:	20000b43 	.word	0x20000b43
 80062a8:	20000b4d 	.word	0x20000b4d
 80062ac:	20000af0 	.word	0x20000af0
 80062b0:	20000b3d 	.word	0x20000b3d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80062b4:	4b9b      	ldr	r3, [pc, #620]	; (8006524 <checkAktifCalisma+0x15a8>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d013      	beq.n	80062e4 <checkAktifCalisma+0x1368>
 80062bc:	4b9a      	ldr	r3, [pc, #616]	; (8006528 <checkAktifCalisma+0x15ac>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00f      	beq.n	80062e4 <checkAktifCalisma+0x1368>
 80062c4:	4b99      	ldr	r3, [pc, #612]	; (800652c <checkAktifCalisma+0x15b0>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	f083 0301 	eor.w	r3, r3, #1
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d008      	beq.n	80062e4 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80062d2:	4b94      	ldr	r3, [pc, #592]	; (8006524 <checkAktifCalisma+0x15a8>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80062d8:	4b95      	ldr	r3, [pc, #596]	; (8006530 <checkAktifCalisma+0x15b4>)
 80062da:	2200      	movs	r2, #0
 80062dc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80062de:	2002      	movs	r0, #2
 80062e0:	f7fe fc46 	bl	8004b70 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80062e4:	4b93      	ldr	r3, [pc, #588]	; (8006534 <checkAktifCalisma+0x15b8>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11e      	bne.n	800632a <checkAktifCalisma+0x13ae>
 80062ec:	4b92      	ldr	r3, [pc, #584]	; (8006538 <checkAktifCalisma+0x15bc>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d11a      	bne.n	800632a <checkAktifCalisma+0x13ae>
 80062f4:	4b91      	ldr	r3, [pc, #580]	; (800653c <checkAktifCalisma+0x15c0>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d016      	beq.n	800632a <checkAktifCalisma+0x13ae>
 80062fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006300:	488f      	ldr	r0, [pc, #572]	; (8006540 <checkAktifCalisma+0x15c4>)
 8006302:	f004 f80f 	bl	800a324 <HAL_GPIO_ReadPin>
 8006306:	4603      	mov	r3, r0
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10e      	bne.n	800632a <checkAktifCalisma+0x13ae>
			hataVar=1;
 800630c:	4b8d      	ldr	r3, [pc, #564]	; (8006544 <checkAktifCalisma+0x15c8>)
 800630e:	2201      	movs	r2, #1
 8006310:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006312:	2003      	movs	r0, #3
 8006314:	f7fa fce6 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006318:	2003      	movs	r0, #3
 800631a:	f7fa fc8b 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 800631e:	f002 fa3d 	bl	800879c <convertAndSendData>
			basinchatasi=1;
 8006322:	4b89      	ldr	r3, [pc, #548]	; (8006548 <checkAktifCalisma+0x15cc>)
 8006324:	2201      	movs	r2, #1
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	e015      	b.n	8006356 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800632a:	4b87      	ldr	r3, [pc, #540]	; (8006548 <checkAktifCalisma+0x15cc>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d011      	beq.n	8006356 <checkAktifCalisma+0x13da>
 8006332:	4b80      	ldr	r3, [pc, #512]	; (8006534 <checkAktifCalisma+0x15b8>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d10d      	bne.n	8006356 <checkAktifCalisma+0x13da>
 800633a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800633e:	4883      	ldr	r0, [pc, #524]	; (800654c <checkAktifCalisma+0x15d0>)
 8006340:	f003 fff0 	bl	800a324 <HAL_GPIO_ReadPin>
 8006344:	4603      	mov	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d105      	bne.n	8006356 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800634a:	4b7f      	ldr	r3, [pc, #508]	; (8006548 <checkAktifCalisma+0x15cc>)
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006350:	2003      	movs	r0, #3
 8006352:	f7fe fc0d 	bl	8004b70 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006356:	4b7e      	ldr	r3, [pc, #504]	; (8006550 <checkAktifCalisma+0x15d4>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <checkAktifCalisma+0x13ea>
 800635e:	4b7d      	ldr	r3, [pc, #500]	; (8006554 <checkAktifCalisma+0x15d8>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01e      	beq.n	80063a4 <checkAktifCalisma+0x1428>
 8006366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800636a:	487b      	ldr	r0, [pc, #492]	; (8006558 <checkAktifCalisma+0x15dc>)
 800636c:	f003 ffda 	bl	800a324 <HAL_GPIO_ReadPin>
 8006370:	4603      	mov	r3, r0
 8006372:	2b01      	cmp	r3, #1
 8006374:	d116      	bne.n	80063a4 <checkAktifCalisma+0x1428>
 8006376:	4b79      	ldr	r3, [pc, #484]	; (800655c <checkAktifCalisma+0x15e0>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d003      	beq.n	8006386 <checkAktifCalisma+0x140a>
 800637e:	4b77      	ldr	r3, [pc, #476]	; (800655c <checkAktifCalisma+0x15e0>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b03      	cmp	r3, #3
 8006384:	d10e      	bne.n	80063a4 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006386:	4b6f      	ldr	r3, [pc, #444]	; (8006544 <checkAktifCalisma+0x15c8>)
 8006388:	2201      	movs	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800638c:	2004      	movs	r0, #4
 800638e:	f7fa fca9 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006392:	2004      	movs	r0, #4
 8006394:	f7fa fc4e 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8006398:	f002 fa00 	bl	800879c <convertAndSendData>
			katkapisivicihatasi=1;
 800639c:	4b70      	ldr	r3, [pc, #448]	; (8006560 <checkAktifCalisma+0x15e4>)
 800639e:	2201      	movs	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	e01f      	b.n	80063e4 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80063a4:	4b6e      	ldr	r3, [pc, #440]	; (8006560 <checkAktifCalisma+0x15e4>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01b      	beq.n	80063e4 <checkAktifCalisma+0x1468>
 80063ac:	4b6d      	ldr	r3, [pc, #436]	; (8006564 <checkAktifCalisma+0x15e8>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d017      	beq.n	80063e4 <checkAktifCalisma+0x1468>
 80063b4:	4b66      	ldr	r3, [pc, #408]	; (8006550 <checkAktifCalisma+0x15d4>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f083 0301 	eor.w	r3, r3, #1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d010      	beq.n	80063e4 <checkAktifCalisma+0x1468>
 80063c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063c6:	4864      	ldr	r0, [pc, #400]	; (8006558 <checkAktifCalisma+0x15dc>)
 80063c8:	f003 ffac 	bl	800a324 <HAL_GPIO_ReadPin>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80063d2:	4b63      	ldr	r3, [pc, #396]	; (8006560 <checkAktifCalisma+0x15e4>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80063d8:	4b5e      	ldr	r3, [pc, #376]	; (8006554 <checkAktifCalisma+0x15d8>)
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80063de:	2004      	movs	r0, #4
 80063e0:	f7fe fbc6 	bl	8004b70 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80063e4:	4b5a      	ldr	r3, [pc, #360]	; (8006550 <checkAktifCalisma+0x15d4>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d103      	bne.n	80063f4 <checkAktifCalisma+0x1478>
 80063ec:	4b5e      	ldr	r3, [pc, #376]	; (8006568 <checkAktifCalisma+0x15ec>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01e      	beq.n	8006432 <checkAktifCalisma+0x14b6>
 80063f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063f8:	4857      	ldr	r0, [pc, #348]	; (8006558 <checkAktifCalisma+0x15dc>)
 80063fa:	f003 ff93 	bl	800a324 <HAL_GPIO_ReadPin>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b01      	cmp	r3, #1
 8006402:	d116      	bne.n	8006432 <checkAktifCalisma+0x14b6>
 8006404:	4b55      	ldr	r3, [pc, #340]	; (800655c <checkAktifCalisma+0x15e0>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d003      	beq.n	8006414 <checkAktifCalisma+0x1498>
 800640c:	4b53      	ldr	r3, [pc, #332]	; (800655c <checkAktifCalisma+0x15e0>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b03      	cmp	r3, #3
 8006412:	d10e      	bne.n	8006432 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006414:	4b4b      	ldr	r3, [pc, #300]	; (8006544 <checkAktifCalisma+0x15c8>)
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800641a:	2005      	movs	r0, #5
 800641c:	f7fa fc62 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006420:	2005      	movs	r0, #5
 8006422:	f7fa fc07 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8006426:	f002 f9b9 	bl	800879c <convertAndSendData>
			tablakapisivicihatasi=1;
 800642a:	4b50      	ldr	r3, [pc, #320]	; (800656c <checkAktifCalisma+0x15f0>)
 800642c:	2201      	movs	r2, #1
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	e023      	b.n	800647a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006432:	4b4e      	ldr	r3, [pc, #312]	; (800656c <checkAktifCalisma+0x15f0>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01f      	beq.n	800647a <checkAktifCalisma+0x14fe>
 800643a:	4b4a      	ldr	r3, [pc, #296]	; (8006564 <checkAktifCalisma+0x15e8>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01b      	beq.n	800647a <checkAktifCalisma+0x14fe>
 8006442:	4b43      	ldr	r3, [pc, #268]	; (8006550 <checkAktifCalisma+0x15d4>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	f083 0301 	eor.w	r3, r3, #1
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d014      	beq.n	800647a <checkAktifCalisma+0x14fe>
 8006450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006454:	4840      	ldr	r0, [pc, #256]	; (8006558 <checkAktifCalisma+0x15dc>)
 8006456:	f003 ff65 	bl	800a324 <HAL_GPIO_ReadPin>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10c      	bne.n	800647a <checkAktifCalisma+0x14fe>
 8006460:	4b40      	ldr	r3, [pc, #256]	; (8006564 <checkAktifCalisma+0x15e8>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006468:	4b40      	ldr	r3, [pc, #256]	; (800656c <checkAktifCalisma+0x15f0>)
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800646e:	4b3e      	ldr	r3, [pc, #248]	; (8006568 <checkAktifCalisma+0x15ec>)
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006474:	2005      	movs	r0, #5
 8006476:	f7fe fb7b 	bl	8004b70 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800647a:	4b30      	ldr	r3, [pc, #192]	; (800653c <checkAktifCalisma+0x15c0>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <checkAktifCalisma+0x1516>
 8006482:	4b2a      	ldr	r3, [pc, #168]	; (800652c <checkAktifCalisma+0x15b0>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <checkAktifCalisma+0x1516>
 800648a:	4b39      	ldr	r3, [pc, #228]	; (8006570 <checkAktifCalisma+0x15f4>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d016      	beq.n	80064c0 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006492:	4b38      	ldr	r3, [pc, #224]	; (8006574 <checkAktifCalisma+0x15f8>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b38      	ldr	r3, [pc, #224]	; (8006578 <checkAktifCalisma+0x15fc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	4a37      	ldr	r2, [pc, #220]	; (800657c <checkAktifCalisma+0x1600>)
 800649e:	7812      	ldrb	r2, [r2, #0]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d30d      	bcc.n	80064c0 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80064a4:	4b27      	ldr	r3, [pc, #156]	; (8006544 <checkAktifCalisma+0x15c8>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80064aa:	2006      	movs	r0, #6
 80064ac:	f7fa fc1a 	bl	8000ce4 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80064b0:	2006      	movs	r0, #6
 80064b2:	f7fa fbbf 	bl	8000c34 <hata2EEPROM>
			  	convertAndSendData();
 80064b6:	f002 f971 	bl	800879c <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80064ba:	4b31      	ldr	r3, [pc, #196]	; (8006580 <checkAktifCalisma+0x1604>)
 80064bc:	2201      	movs	r2, #1
 80064be:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80064c0:	4b2f      	ldr	r3, [pc, #188]	; (8006580 <checkAktifCalisma+0x1604>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d013      	beq.n	80064f0 <checkAktifCalisma+0x1574>
 80064c8:	2108      	movs	r1, #8
 80064ca:	4823      	ldr	r0, [pc, #140]	; (8006558 <checkAktifCalisma+0x15dc>)
 80064cc:	f003 ff2a 	bl	800a324 <HAL_GPIO_ReadPin>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00c      	beq.n	80064f0 <checkAktifCalisma+0x1574>
 80064d6:	4b1e      	ldr	r3, [pc, #120]	; (8006550 <checkAktifCalisma+0x15d4>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	f083 0301 	eor.w	r3, r3, #1
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80064e4:	4b26      	ldr	r3, [pc, #152]	; (8006580 <checkAktifCalisma+0x1604>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80064ea:	2006      	movs	r0, #6
 80064ec:	f7fe fb40 	bl	8004b70 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80064f0:	4b24      	ldr	r3, [pc, #144]	; (8006584 <checkAktifCalisma+0x1608>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10b      	bne.n	8006510 <checkAktifCalisma+0x1594>
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <checkAktifCalisma+0x15b0>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <checkAktifCalisma+0x1594>
 8006500:	4b21      	ldr	r3, [pc, #132]	; (8006588 <checkAktifCalisma+0x160c>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <checkAktifCalisma+0x1594>
 8006508:	4b19      	ldr	r3, [pc, #100]	; (8006570 <checkAktifCalisma+0x15f4>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d03f      	beq.n	8006590 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006510:	4b1e      	ldr	r3, [pc, #120]	; (800658c <checkAktifCalisma+0x1610>)
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006516:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <checkAktifCalisma+0x15d8>)
 8006518:	2201      	movs	r2, #1
 800651a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 800651c:	4b12      	ldr	r3, [pc, #72]	; (8006568 <checkAktifCalisma+0x15ec>)
 800651e:	2201      	movs	r2, #1
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e03c      	b.n	800659e <checkAktifCalisma+0x1622>
 8006524:	20000b3d 	.word	0x20000b3d
 8006528:	20000b43 	.word	0x20000b43
 800652c:	20000b24 	.word	0x20000b24
 8006530:	20000b4d 	.word	0x20000b4d
 8006534:	20000aef 	.word	0x20000aef
 8006538:	20000af3 	.word	0x20000af3
 800653c:	20000b40 	.word	0x20000b40
 8006540:	40011000 	.word	0x40011000
 8006544:	20000b41 	.word	0x20000b41
 8006548:	20000b4a 	.word	0x20000b4a
 800654c:	40010c00 	.word	0x40010c00
 8006550:	20000b3a 	.word	0x20000b3a
 8006554:	20000b4e 	.word	0x20000b4e
 8006558:	40010800 	.word	0x40010800
 800655c:	20000af4 	.word	0x20000af4
 8006560:	20000b4b 	.word	0x20000b4b
 8006564:	20000b2e 	.word	0x20000b2e
 8006568:	20000b4f 	.word	0x20000b4f
 800656c:	20000b4c 	.word	0x20000b4c
 8006570:	20000b23 	.word	0x20000b23
 8006574:	20000ac8 	.word	0x20000ac8
 8006578:	20000adc 	.word	0x20000adc
 800657c:	20000b04 	.word	0x20000b04
 8006580:	20000b3b 	.word	0x20000b3b
 8006584:	20000b21 	.word	0x20000b21
 8006588:	20000b22 	.word	0x20000b22
 800658c:	20000b42 	.word	0x20000b42
		} else {
			makineCalisiyor=1;
 8006590:	4b1e      	ldr	r3, [pc, #120]	; (800660c <checkAktifCalisma+0x1690>)
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006596:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <checkAktifCalisma+0x1694>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <checkAktifCalisma+0x1698>)
 800659c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800659e:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <checkAktifCalisma+0x169c>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d02f      	beq.n	8006606 <checkAktifCalisma+0x168a>
 80065a6:	4b1d      	ldr	r3, [pc, #116]	; (800661c <checkAktifCalisma+0x16a0>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	f083 0301 	eor.w	r3, r3, #1
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d028      	beq.n	8006606 <checkAktifCalisma+0x168a>
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <checkAktifCalisma+0x16a4>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f083 0301 	eor.w	r3, r3, #1
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d021      	beq.n	8006606 <checkAktifCalisma+0x168a>
 80065c2:	4b18      	ldr	r3, [pc, #96]	; (8006624 <checkAktifCalisma+0x16a8>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	f083 0301 	eor.w	r3, r3, #1
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <checkAktifCalisma+0x16ac>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	f083 0301 	eor.w	r3, r3, #1
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d013      	beq.n	8006606 <checkAktifCalisma+0x168a>
 80065de:	4b13      	ldr	r3, [pc, #76]	; (800662c <checkAktifCalisma+0x16b0>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	f083 0301 	eor.w	r3, r3, #1
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00c      	beq.n	8006606 <checkAktifCalisma+0x168a>
 80065ec:	4b10      	ldr	r3, [pc, #64]	; (8006630 <checkAktifCalisma+0x16b4>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f083 0301 	eor.w	r3, r3, #1
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <checkAktifCalisma+0x168a>
			hataVar=0;
 80065fa:	4b07      	ldr	r3, [pc, #28]	; (8006618 <checkAktifCalisma+0x169c>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006600:	2007      	movs	r0, #7
 8006602:	f7fe fab5 	bl	8004b70 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006606:	bf00      	nop
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000b42 	.word	0x20000b42
 8006610:	20000ac8 	.word	0x20000ac8
 8006614:	20000adc 	.word	0x20000adc
 8006618:	20000b41 	.word	0x20000b41
 800661c:	20000b3c 	.word	0x20000b3c
 8006620:	20000b3d 	.word	0x20000b3d
 8006624:	20000b4a 	.word	0x20000b4a
 8006628:	20000b4b 	.word	0x20000b4b
 800662c:	20000b4c 	.word	0x20000b4c
 8006630:	20000b3b 	.word	0x20000b3b

08006634 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006638:	4b8b      	ldr	r3, [pc, #556]	; (8006868 <checkDemoModCalisma+0x234>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b01      	cmp	r3, #1
 800663e:	f040 8229 	bne.w	8006a94 <checkDemoModCalisma+0x460>
 8006642:	4b8a      	ldr	r3, [pc, #552]	; (800686c <checkDemoModCalisma+0x238>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 8224 	beq.w	8006a94 <checkDemoModCalisma+0x460>
 800664c:	4b88      	ldr	r3, [pc, #544]	; (8006870 <checkDemoModCalisma+0x23c>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 821f 	bne.w	8006a94 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006656:	2102      	movs	r1, #2
 8006658:	4886      	ldr	r0, [pc, #536]	; (8006874 <checkDemoModCalisma+0x240>)
 800665a:	f003 fe63 	bl	800a324 <HAL_GPIO_ReadPin>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d11d      	bne.n	80066a0 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006664:	4b84      	ldr	r3, [pc, #528]	; (8006878 <checkDemoModCalisma+0x244>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f083 0301 	eor.w	r3, r3, #1
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006672:	4b82      	ldr	r3, [pc, #520]	; (800687c <checkDemoModCalisma+0x248>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	f083 0301 	eor.w	r3, r3, #1
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00f      	beq.n	80066a0 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006680:	4b7f      	ldr	r3, [pc, #508]	; (8006880 <checkDemoModCalisma+0x24c>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f083 0301 	eor.w	r3, r3, #1
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d008      	beq.n	80066a0 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800668e:	2201      	movs	r2, #1
 8006690:	2104      	movs	r1, #4
 8006692:	487c      	ldr	r0, [pc, #496]	; (8006884 <checkDemoModCalisma+0x250>)
 8006694:	f003 fe5d 	bl	800a352 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006698:	4b7b      	ldr	r3, [pc, #492]	; (8006888 <checkDemoModCalisma+0x254>)
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	e00e      	b.n	80066be <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80066a0:	2102      	movs	r1, #2
 80066a2:	4874      	ldr	r0, [pc, #464]	; (8006874 <checkDemoModCalisma+0x240>)
 80066a4:	f003 fe3e 	bl	800a324 <HAL_GPIO_ReadPin>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d107      	bne.n	80066be <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066ae:	2200      	movs	r2, #0
 80066b0:	2104      	movs	r1, #4
 80066b2:	4874      	ldr	r0, [pc, #464]	; (8006884 <checkDemoModCalisma+0x250>)
 80066b4:	f003 fe4d 	bl	800a352 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80066b8:	4b73      	ldr	r3, [pc, #460]	; (8006888 <checkDemoModCalisma+0x254>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80066be:	4b72      	ldr	r3, [pc, #456]	; (8006888 <checkDemoModCalisma+0x254>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <checkDemoModCalisma+0xaa>
 80066c6:	4b6d      	ldr	r3, [pc, #436]	; (800687c <checkDemoModCalisma+0x248>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <checkDemoModCalisma+0xaa>
 80066ce:	4b6c      	ldr	r3, [pc, #432]	; (8006880 <checkDemoModCalisma+0x24c>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <checkDemoModCalisma+0xaa>
 80066d6:	4b68      	ldr	r3, [pc, #416]	; (8006878 <checkDemoModCalisma+0x244>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00c      	beq.n	80066f8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80066de:	2201      	movs	r2, #1
 80066e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066e4:	4867      	ldr	r0, [pc, #412]	; (8006884 <checkDemoModCalisma+0x250>)
 80066e6:	f003 fe34 	bl	800a352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80066ea:	2201      	movs	r2, #1
 80066ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066f0:	4864      	ldr	r0, [pc, #400]	; (8006884 <checkDemoModCalisma+0x250>)
 80066f2:	f003 fe2e 	bl	800a352 <HAL_GPIO_WritePin>
 80066f6:	e00b      	b.n	8006710 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066fe:	4861      	ldr	r0, [pc, #388]	; (8006884 <checkDemoModCalisma+0x250>)
 8006700:	f003 fe27 	bl	800a352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006704:	2200      	movs	r2, #0
 8006706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800670a:	485e      	ldr	r0, [pc, #376]	; (8006884 <checkDemoModCalisma+0x250>)
 800670c:	f003 fe21 	bl	800a352 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006710:	2102      	movs	r1, #2
 8006712:	4858      	ldr	r0, [pc, #352]	; (8006874 <checkDemoModCalisma+0x240>)
 8006714:	f003 fe06 	bl	800a324 <HAL_GPIO_ReadPin>
 8006718:	4603      	mov	r3, r0
 800671a:	2b01      	cmp	r3, #1
 800671c:	d10d      	bne.n	800673a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800671e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006722:	4854      	ldr	r0, [pc, #336]	; (8006874 <checkDemoModCalisma+0x240>)
 8006724:	f003 fdfe 	bl	800a324 <HAL_GPIO_ReadPin>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800672e:	4b56      	ldr	r3, [pc, #344]	; (8006888 <checkDemoModCalisma+0x254>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	f083 0301 	eor.w	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800673a:	2102      	movs	r1, #2
 800673c:	484d      	ldr	r0, [pc, #308]	; (8006874 <checkDemoModCalisma+0x240>)
 800673e:	f003 fdf1 	bl	800a324 <HAL_GPIO_ReadPin>
 8006742:	4603      	mov	r3, r0
 8006744:	2b01      	cmp	r3, #1
 8006746:	d125      	bne.n	8006794 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800674c:	4849      	ldr	r0, [pc, #292]	; (8006874 <checkDemoModCalisma+0x240>)
 800674e:	f003 fde9 	bl	800a324 <HAL_GPIO_ReadPin>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d11d      	bne.n	8006794 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006758:	4b4b      	ldr	r3, [pc, #300]	; (8006888 <checkDemoModCalisma+0x254>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f083 0301 	eor.w	r3, r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d016      	beq.n	8006794 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006766:	4b44      	ldr	r3, [pc, #272]	; (8006878 <checkDemoModCalisma+0x244>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	f083 0301 	eor.w	r3, r3, #1
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00f      	beq.n	8006794 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006774:	4b42      	ldr	r3, [pc, #264]	; (8006880 <checkDemoModCalisma+0x24c>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f083 0301 	eor.w	r3, r3, #1
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d008      	beq.n	8006794 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006782:	2201      	movs	r2, #1
 8006784:	2120      	movs	r1, #32
 8006786:	483b      	ldr	r0, [pc, #236]	; (8006874 <checkDemoModCalisma+0x240>)
 8006788:	f003 fde3 	bl	800a352 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800678c:	4b3b      	ldr	r3, [pc, #236]	; (800687c <checkDemoModCalisma+0x248>)
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	e007      	b.n	80067a4 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006794:	2200      	movs	r2, #0
 8006796:	2120      	movs	r1, #32
 8006798:	4836      	ldr	r0, [pc, #216]	; (8006874 <checkDemoModCalisma+0x240>)
 800679a:	f003 fdda 	bl	800a352 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800679e:	4b37      	ldr	r3, [pc, #220]	; (800687c <checkDemoModCalisma+0x248>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80067a4:	2102      	movs	r1, #2
 80067a6:	4833      	ldr	r0, [pc, #204]	; (8006874 <checkDemoModCalisma+0x240>)
 80067a8:	f003 fdbc 	bl	800a324 <HAL_GPIO_ReadPin>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d125      	bne.n	80067fe <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80067b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067b6:	482f      	ldr	r0, [pc, #188]	; (8006874 <checkDemoModCalisma+0x240>)
 80067b8:	f003 fdb4 	bl	800a324 <HAL_GPIO_ReadPin>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d11d      	bne.n	80067fe <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80067c2:	4b31      	ldr	r3, [pc, #196]	; (8006888 <checkDemoModCalisma+0x254>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f083 0301 	eor.w	r3, r3, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d016      	beq.n	80067fe <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80067d0:	4b2a      	ldr	r3, [pc, #168]	; (800687c <checkDemoModCalisma+0x248>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	f083 0301 	eor.w	r3, r3, #1
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00f      	beq.n	80067fe <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80067de:	4b26      	ldr	r3, [pc, #152]	; (8006878 <checkDemoModCalisma+0x244>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	f083 0301 	eor.w	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80067ec:	2201      	movs	r2, #1
 80067ee:	2110      	movs	r1, #16
 80067f0:	4820      	ldr	r0, [pc, #128]	; (8006874 <checkDemoModCalisma+0x240>)
 80067f2:	f003 fdae 	bl	800a352 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80067f6:	4b22      	ldr	r3, [pc, #136]	; (8006880 <checkDemoModCalisma+0x24c>)
 80067f8:	2201      	movs	r2, #1
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	e007      	b.n	800680e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80067fe:	2200      	movs	r2, #0
 8006800:	2110      	movs	r1, #16
 8006802:	481c      	ldr	r0, [pc, #112]	; (8006874 <checkDemoModCalisma+0x240>)
 8006804:	f003 fda5 	bl	800a352 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006808:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <checkDemoModCalisma+0x24c>)
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800680e:	2104      	movs	r1, #4
 8006810:	4818      	ldr	r0, [pc, #96]	; (8006874 <checkDemoModCalisma+0x240>)
 8006812:	f003 fd87 	bl	800a324 <HAL_GPIO_ReadPin>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d139      	bne.n	8006890 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 800681c:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <checkDemoModCalisma+0x254>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f083 0301 	eor.w	r3, r3, #1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d032      	beq.n	8006890 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800682a:	4b15      	ldr	r3, [pc, #84]	; (8006880 <checkDemoModCalisma+0x24c>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	f083 0301 	eor.w	r3, r3, #1
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d02b      	beq.n	8006890 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006838:	4b10      	ldr	r3, [pc, #64]	; (800687c <checkDemoModCalisma+0x248>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	f083 0301 	eor.w	r3, r3, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d024      	beq.n	8006890 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006846:	2201      	movs	r2, #1
 8006848:	2102      	movs	r1, #2
 800684a:	480e      	ldr	r0, [pc, #56]	; (8006884 <checkDemoModCalisma+0x250>)
 800684c:	f003 fd81 	bl	800a352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006850:	2201      	movs	r2, #1
 8006852:	2101      	movs	r1, #1
 8006854:	480b      	ldr	r0, [pc, #44]	; (8006884 <checkDemoModCalisma+0x250>)
 8006856:	f003 fd7c 	bl	800a352 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <checkDemoModCalisma+0x244>)
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <checkDemoModCalisma+0x258>)
 8006862:	2201      	movs	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e027      	b.n	80068b8 <checkDemoModCalisma+0x284>
 8006868:	20000b0a 	.word	0x20000b0a
 800686c:	20000b3e 	.word	0x20000b3e
 8006870:	20000b09 	.word	0x20000b09
 8006874:	40011000 	.word	0x40011000
 8006878:	20000b45 	.word	0x20000b45
 800687c:	20000b46 	.word	0x20000b46
 8006880:	20000b47 	.word	0x20000b47
 8006884:	40010c00 	.word	0x40010c00
 8006888:	20000b44 	.word	0x20000b44
 800688c:	20000b2a 	.word	0x20000b2a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006890:	2104      	movs	r1, #4
 8006892:	48a0      	ldr	r0, [pc, #640]	; (8006b14 <checkDemoModCalisma+0x4e0>)
 8006894:	f003 fd46 	bl	800a324 <HAL_GPIO_ReadPin>
 8006898:	4603      	mov	r3, r0
 800689a:	2b01      	cmp	r3, #1
 800689c:	d10c      	bne.n	80068b8 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800689e:	2200      	movs	r2, #0
 80068a0:	2102      	movs	r1, #2
 80068a2:	489d      	ldr	r0, [pc, #628]	; (8006b18 <checkDemoModCalisma+0x4e4>)
 80068a4:	f003 fd55 	bl	800a352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80068a8:	2200      	movs	r2, #0
 80068aa:	2101      	movs	r1, #1
 80068ac:	489a      	ldr	r0, [pc, #616]	; (8006b18 <checkDemoModCalisma+0x4e4>)
 80068ae:	f003 fd50 	bl	800a352 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80068b2:	4b9a      	ldr	r3, [pc, #616]	; (8006b1c <checkDemoModCalisma+0x4e8>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80068b8:	2104      	movs	r1, #4
 80068ba:	4896      	ldr	r0, [pc, #600]	; (8006b14 <checkDemoModCalisma+0x4e0>)
 80068bc:	f003 fd32 	bl	800a324 <HAL_GPIO_ReadPin>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d10d      	bne.n	80068e2 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80068c6:	2201      	movs	r2, #1
 80068c8:	2180      	movs	r1, #128	; 0x80
 80068ca:	4895      	ldr	r0, [pc, #596]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 80068cc:	f003 fd41 	bl	800a352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80068d0:	2201      	movs	r2, #1
 80068d2:	2120      	movs	r1, #32
 80068d4:	4892      	ldr	r0, [pc, #584]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 80068d6:	f003 fd3c 	bl	800a352 <HAL_GPIO_WritePin>
			timer3 = millis;
 80068da:	4b92      	ldr	r3, [pc, #584]	; (8006b24 <checkDemoModCalisma+0x4f0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a92      	ldr	r2, [pc, #584]	; (8006b28 <checkDemoModCalisma+0x4f4>)
 80068e0:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80068e2:	4b90      	ldr	r3, [pc, #576]	; (8006b24 <checkDemoModCalisma+0x4f0>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b90      	ldr	r3, [pc, #576]	; (8006b28 <checkDemoModCalisma+0x4f4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d909      	bls.n	8006904 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80068f0:	2200      	movs	r2, #0
 80068f2:	2180      	movs	r1, #128	; 0x80
 80068f4:	488a      	ldr	r0, [pc, #552]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 80068f6:	f003 fd2c 	bl	800a352 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2120      	movs	r1, #32
 80068fe:	4888      	ldr	r0, [pc, #544]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 8006900:	f003 fd27 	bl	800a352 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006904:	2102      	movs	r1, #2
 8006906:	4883      	ldr	r0, [pc, #524]	; (8006b14 <checkDemoModCalisma+0x4e0>)
 8006908:	f003 fd0c 	bl	800a324 <HAL_GPIO_ReadPin>
 800690c:	4603      	mov	r3, r0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d108      	bne.n	8006924 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006912:	2201      	movs	r2, #1
 8006914:	2140      	movs	r1, #64	; 0x40
 8006916:	4882      	ldr	r0, [pc, #520]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 8006918:	f003 fd1b 	bl	800a352 <HAL_GPIO_WritePin>
			timer3 = millis;
 800691c:	4b81      	ldr	r3, [pc, #516]	; (8006b24 <checkDemoModCalisma+0x4f0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a81      	ldr	r2, [pc, #516]	; (8006b28 <checkDemoModCalisma+0x4f4>)
 8006922:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006924:	4b7f      	ldr	r3, [pc, #508]	; (8006b24 <checkDemoModCalisma+0x4f0>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b7f      	ldr	r3, [pc, #508]	; (8006b28 <checkDemoModCalisma+0x4f4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b04      	cmp	r3, #4
 8006930:	d904      	bls.n	800693c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006932:	2200      	movs	r2, #0
 8006934:	2140      	movs	r1, #64	; 0x40
 8006936:	487a      	ldr	r0, [pc, #488]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 8006938:	f003 fd0b 	bl	800a352 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800693c:	4b7b      	ldr	r3, [pc, #492]	; (8006b2c <checkDemoModCalisma+0x4f8>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d058      	beq.n	80069f6 <checkDemoModCalisma+0x3c2>
 8006944:	4b7a      	ldr	r3, [pc, #488]	; (8006b30 <checkDemoModCalisma+0x4fc>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d054      	beq.n	80069f6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800694c:	4b79      	ldr	r3, [pc, #484]	; (8006b34 <checkDemoModCalisma+0x500>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	3301      	adds	r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	4b77      	ldr	r3, [pc, #476]	; (8006b34 <checkDemoModCalisma+0x500>)
 8006956:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006958:	4b76      	ldr	r3, [pc, #472]	; (8006b34 <checkDemoModCalisma+0x500>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b09      	cmp	r3, #9
 800695e:	d908      	bls.n	8006972 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006960:	4b74      	ldr	r3, [pc, #464]	; (8006b34 <checkDemoModCalisma+0x500>)
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006966:	4b74      	ldr	r3, [pc, #464]	; (8006b38 <checkDemoModCalisma+0x504>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	b2da      	uxtb	r2, r3
 800696e:	4b72      	ldr	r3, [pc, #456]	; (8006b38 <checkDemoModCalisma+0x504>)
 8006970:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006972:	4b71      	ldr	r3, [pc, #452]	; (8006b38 <checkDemoModCalisma+0x504>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b09      	cmp	r3, #9
 8006978:	d908      	bls.n	800698c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800697a:	4b6f      	ldr	r3, [pc, #444]	; (8006b38 <checkDemoModCalisma+0x504>)
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006980:	4b6e      	ldr	r3, [pc, #440]	; (8006b3c <checkDemoModCalisma+0x508>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	b2da      	uxtb	r2, r3
 8006988:	4b6c      	ldr	r3, [pc, #432]	; (8006b3c <checkDemoModCalisma+0x508>)
 800698a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800698c:	4b6b      	ldr	r3, [pc, #428]	; (8006b3c <checkDemoModCalisma+0x508>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b09      	cmp	r3, #9
 8006992:	d908      	bls.n	80069a6 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006994:	4b69      	ldr	r3, [pc, #420]	; (8006b3c <checkDemoModCalisma+0x508>)
 8006996:	2200      	movs	r2, #0
 8006998:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800699a:	4b69      	ldr	r3, [pc, #420]	; (8006b40 <checkDemoModCalisma+0x50c>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	3301      	adds	r3, #1
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	4b67      	ldr	r3, [pc, #412]	; (8006b40 <checkDemoModCalisma+0x50c>)
 80069a4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80069a6:	4b66      	ldr	r3, [pc, #408]	; (8006b40 <checkDemoModCalisma+0x50c>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b09      	cmp	r3, #9
 80069ac:	d908      	bls.n	80069c0 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80069ae:	4b64      	ldr	r3, [pc, #400]	; (8006b40 <checkDemoModCalisma+0x50c>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80069b4:	4b63      	ldr	r3, [pc, #396]	; (8006b44 <checkDemoModCalisma+0x510>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	3301      	adds	r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	4b61      	ldr	r3, [pc, #388]	; (8006b44 <checkDemoModCalisma+0x510>)
 80069be:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80069c0:	4b60      	ldr	r3, [pc, #384]	; (8006b44 <checkDemoModCalisma+0x510>)
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	4b60      	ldr	r3, [pc, #384]	; (8006b48 <checkDemoModCalisma+0x514>)
 80069c6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80069ca:	4b5d      	ldr	r3, [pc, #372]	; (8006b40 <checkDemoModCalisma+0x50c>)
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	4b5e      	ldr	r3, [pc, #376]	; (8006b48 <checkDemoModCalisma+0x514>)
 80069d0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80069d2:	4b5a      	ldr	r3, [pc, #360]	; (8006b3c <checkDemoModCalisma+0x508>)
 80069d4:	781a      	ldrb	r2, [r3, #0]
 80069d6:	4b5c      	ldr	r3, [pc, #368]	; (8006b48 <checkDemoModCalisma+0x514>)
 80069d8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80069da:	4b57      	ldr	r3, [pc, #348]	; (8006b38 <checkDemoModCalisma+0x504>)
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	4b5a      	ldr	r3, [pc, #360]	; (8006b48 <checkDemoModCalisma+0x514>)
 80069e0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80069e2:	4b54      	ldr	r3, [pc, #336]	; (8006b34 <checkDemoModCalisma+0x500>)
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	4b58      	ldr	r3, [pc, #352]	; (8006b48 <checkDemoModCalisma+0x514>)
 80069e8:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80069ea:	4b58      	ldr	r3, [pc, #352]	; (8006b4c <checkDemoModCalisma+0x518>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80069f0:	4b4f      	ldr	r3, [pc, #316]	; (8006b30 <checkDemoModCalisma+0x4fc>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80069f6:	4b56      	ldr	r3, [pc, #344]	; (8006b50 <checkDemoModCalisma+0x51c>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f040 8087 	bne.w	8006b0e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006a00:	4a54      	ldr	r2, [pc, #336]	; (8006b54 <checkDemoModCalisma+0x520>)
 8006a02:	2101      	movs	r1, #1
 8006a04:	2002      	movs	r0, #2
 8006a06:	f002 f967 	bl	8008cd8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006a0a:	4a53      	ldr	r2, [pc, #332]	; (8006b58 <checkDemoModCalisma+0x524>)
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	2001      	movs	r0, #1
 8006a10:	f002 f962 	bl	8008cd8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006a14:	4b4b      	ldr	r3, [pc, #300]	; (8006b44 <checkDemoModCalisma+0x510>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	220a      	movs	r2, #10
 8006a1a:	4950      	ldr	r1, [pc, #320]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f006 fd09 	bl	800d434 <itoa>
			lcd_print(2,12,snum);
 8006a22:	4a4e      	ldr	r2, [pc, #312]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a24:	210c      	movs	r1, #12
 8006a26:	2002      	movs	r0, #2
 8006a28:	f002 f956 	bl	8008cd8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006a2c:	4b44      	ldr	r3, [pc, #272]	; (8006b40 <checkDemoModCalisma+0x50c>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	220a      	movs	r2, #10
 8006a32:	494a      	ldr	r1, [pc, #296]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a34:	4618      	mov	r0, r3
 8006a36:	f006 fcfd 	bl	800d434 <itoa>
			lcd_print(2,13,snum);
 8006a3a:	4a48      	ldr	r2, [pc, #288]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a3c:	210d      	movs	r1, #13
 8006a3e:	2002      	movs	r0, #2
 8006a40:	f002 f94a 	bl	8008cd8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006a44:	4b3d      	ldr	r3, [pc, #244]	; (8006b3c <checkDemoModCalisma+0x508>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	220a      	movs	r2, #10
 8006a4a:	4944      	ldr	r1, [pc, #272]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f006 fcf1 	bl	800d434 <itoa>
			lcd_print(2,14,snum);
 8006a52:	4a42      	ldr	r2, [pc, #264]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a54:	210e      	movs	r1, #14
 8006a56:	2002      	movs	r0, #2
 8006a58:	f002 f93e 	bl	8008cd8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006a5c:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <checkDemoModCalisma+0x504>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	220a      	movs	r2, #10
 8006a62:	493e      	ldr	r1, [pc, #248]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a64:	4618      	mov	r0, r3
 8006a66:	f006 fce5 	bl	800d434 <itoa>
			lcd_print(2,15,snum);
 8006a6a:	4a3c      	ldr	r2, [pc, #240]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a6c:	210f      	movs	r1, #15
 8006a6e:	2002      	movs	r0, #2
 8006a70:	f002 f932 	bl	8008cd8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006a74:	4b2f      	ldr	r3, [pc, #188]	; (8006b34 <checkDemoModCalisma+0x500>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	220a      	movs	r2, #10
 8006a7a:	4938      	ldr	r1, [pc, #224]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f006 fcd9 	bl	800d434 <itoa>
			lcd_print(2,16,snum);
 8006a82:	4a36      	ldr	r2, [pc, #216]	; (8006b5c <checkDemoModCalisma+0x528>)
 8006a84:	2110      	movs	r1, #16
 8006a86:	2002      	movs	r0, #2
 8006a88:	f002 f926 	bl	8008cd8 <lcd_print>
			mesajYazildi=1;
 8006a8c:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <checkDemoModCalisma+0x52c>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006a92:	e03c      	b.n	8006b0e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006a94:	4b33      	ldr	r3, [pc, #204]	; (8006b64 <checkDemoModCalisma+0x530>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d003      	beq.n	8006aa4 <checkDemoModCalisma+0x470>
 8006a9c:	4b2c      	ldr	r3, [pc, #176]	; (8006b50 <checkDemoModCalisma+0x51c>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d134      	bne.n	8006b0e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006aaa:	481b      	ldr	r0, [pc, #108]	; (8006b18 <checkDemoModCalisma+0x4e4>)
 8006aac:	f003 fc51 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ab6:	4818      	ldr	r0, [pc, #96]	; (8006b18 <checkDemoModCalisma+0x4e4>)
 8006ab8:	f003 fc4b 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006abc:	2200      	movs	r2, #0
 8006abe:	2104      	movs	r1, #4
 8006ac0:	4815      	ldr	r0, [pc, #84]	; (8006b18 <checkDemoModCalisma+0x4e4>)
 8006ac2:	f003 fc46 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2102      	movs	r1, #2
 8006aca:	4813      	ldr	r0, [pc, #76]	; (8006b18 <checkDemoModCalisma+0x4e4>)
 8006acc:	f003 fc41 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	4810      	ldr	r0, [pc, #64]	; (8006b18 <checkDemoModCalisma+0x4e4>)
 8006ad6:	f003 fc3c 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006ada:	2200      	movs	r2, #0
 8006adc:	2120      	movs	r1, #32
 8006ade:	480d      	ldr	r0, [pc, #52]	; (8006b14 <checkDemoModCalisma+0x4e0>)
 8006ae0:	f003 fc37 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2110      	movs	r1, #16
 8006ae8:	480a      	ldr	r0, [pc, #40]	; (8006b14 <checkDemoModCalisma+0x4e0>)
 8006aea:	f003 fc32 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006aee:	2200      	movs	r2, #0
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	480b      	ldr	r0, [pc, #44]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 8006af4:	f003 fc2d 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006af8:	2200      	movs	r2, #0
 8006afa:	2140      	movs	r1, #64	; 0x40
 8006afc:	4808      	ldr	r0, [pc, #32]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 8006afe:	f003 fc28 	bl	800a352 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006b02:	2200      	movs	r2, #0
 8006b04:	2120      	movs	r1, #32
 8006b06:	4806      	ldr	r0, [pc, #24]	; (8006b20 <checkDemoModCalisma+0x4ec>)
 8006b08:	f003 fc23 	bl	800a352 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006b0c:	e7ff      	b.n	8006b0e <checkDemoModCalisma+0x4da>
 8006b0e:	bf00      	nop
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40011000 	.word	0x40011000
 8006b18:	40010c00 	.word	0x40010c00
 8006b1c:	20000b45 	.word	0x20000b45
 8006b20:	40010800 	.word	0x40010800
 8006b24:	20000ac8 	.word	0x20000ac8
 8006b28:	20000ad8 	.word	0x20000ad8
 8006b2c:	20000b44 	.word	0x20000b44
 8006b30:	20000b2a 	.word	0x20000b2a
 8006b34:	20000ae9 	.word	0x20000ae9
 8006b38:	20000aea 	.word	0x20000aea
 8006b3c:	20000000 	.word	0x20000000
 8006b40:	20000001 	.word	0x20000001
 8006b44:	20000aeb 	.word	0x20000aeb
 8006b48:	20000a18 	.word	0x20000a18
 8006b4c:	20000b18 	.word	0x20000b18
 8006b50:	20000b09 	.word	0x20000b09
 8006b54:	0800ebfc 	.word	0x0800ebfc
 8006b58:	0800ec08 	.word	0x0800ec08
 8006b5c:	20000a88 	.word	0x20000a88
 8006b60:	20000b20 	.word	0x20000b20
 8006b64:	20000b0a 	.word	0x20000b0a

08006b68 <mainLoop>:

void mainLoop() {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006b6e:	f7fe f923 	bl	8004db8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006b72:	2101      	movs	r1, #1
 8006b74:	48a9      	ldr	r0, [pc, #676]	; (8006e1c <mainLoop+0x2b4>)
 8006b76:	f003 fbd5 	bl	800a324 <HAL_GPIO_ReadPin>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d136      	bne.n	8006bee <mainLoop+0x86>
 8006b80:	2108      	movs	r1, #8
 8006b82:	48a7      	ldr	r0, [pc, #668]	; (8006e20 <mainLoop+0x2b8>)
 8006b84:	f003 fbce 	bl	800a324 <HAL_GPIO_ReadPin>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d12f      	bne.n	8006bee <mainLoop+0x86>
 8006b8e:	2102      	movs	r1, #2
 8006b90:	48a2      	ldr	r0, [pc, #648]	; (8006e1c <mainLoop+0x2b4>)
 8006b92:	f003 fbc7 	bl	800a324 <HAL_GPIO_ReadPin>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d128      	bne.n	8006bee <mainLoop+0x86>
 8006b9c:	2104      	movs	r1, #4
 8006b9e:	489f      	ldr	r0, [pc, #636]	; (8006e1c <mainLoop+0x2b4>)
 8006ba0:	f003 fbc0 	bl	800a324 <HAL_GPIO_ReadPin>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d121      	bne.n	8006bee <mainLoop+0x86>
 8006baa:	2108      	movs	r1, #8
 8006bac:	489b      	ldr	r0, [pc, #620]	; (8006e1c <mainLoop+0x2b4>)
 8006bae:	f003 fbb9 	bl	800a324 <HAL_GPIO_ReadPin>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11a      	bne.n	8006bee <mainLoop+0x86>
 8006bb8:	2180      	movs	r1, #128	; 0x80
 8006bba:	4899      	ldr	r0, [pc, #612]	; (8006e20 <mainLoop+0x2b8>)
 8006bbc:	f003 fbb2 	bl	800a324 <HAL_GPIO_ReadPin>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d113      	bne.n	8006bee <mainLoop+0x86>
 8006bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bca:	4895      	ldr	r0, [pc, #596]	; (8006e20 <mainLoop+0x2b8>)
 8006bcc:	f003 fbaa 	bl	800a324 <HAL_GPIO_ReadPin>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d10b      	bne.n	8006bee <mainLoop+0x86>
 8006bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bda:	4891      	ldr	r0, [pc, #580]	; (8006e20 <mainLoop+0x2b8>)
 8006bdc:	f003 fba2 	bl	800a324 <HAL_GPIO_ReadPin>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d103      	bne.n	8006bee <mainLoop+0x86>
			butonKontrol=0;
 8006be6:	4b8f      	ldr	r3, [pc, #572]	; (8006e24 <mainLoop+0x2bc>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e003      	b.n	8006bf6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006bee:	4b8e      	ldr	r3, [pc, #568]	; (8006e28 <mainLoop+0x2c0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a8e      	ldr	r2, [pc, #568]	; (8006e2c <mainLoop+0x2c4>)
 8006bf4:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8006bf6:	f7fe f8ab 	bl	8004d50 <buttonCheck>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d003      	beq.n	8006c08 <mainLoop+0xa0>
			backLightTimer = millis;
 8006c00:	4b89      	ldr	r3, [pc, #548]	; (8006e28 <mainLoop+0x2c0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a89      	ldr	r2, [pc, #548]	; (8006e2c <mainLoop+0x2c4>)
 8006c06:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006c08:	4b89      	ldr	r3, [pc, #548]	; (8006e30 <mainLoop+0x2c8>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d03a      	beq.n	8006c86 <mainLoop+0x11e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006c10:	bf00      	nop
 8006c12:	4888      	ldr	r0, [pc, #544]	; (8006e34 <mainLoop+0x2cc>)
 8006c14:	f004 f9af 	bl	800af76 <HAL_I2C_GetError>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d0f9      	beq.n	8006c12 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006c1e:	bf00      	nop
 8006c20:	4884      	ldr	r0, [pc, #528]	; (8006e34 <mainLoop+0x2cc>)
 8006c22:	f004 f99b 	bl	800af5c <HAL_I2C_GetState>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d1f9      	bne.n	8006c20 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006c2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	236e      	movs	r3, #110	; 0x6e
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	4b80      	ldr	r3, [pc, #512]	; (8006e38 <mainLoop+0x2d0>)
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	236e      	movs	r3, #110	; 0x6e
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	21a0      	movs	r1, #160	; 0xa0
 8006c40:	487c      	ldr	r0, [pc, #496]	; (8006e34 <mainLoop+0x2cc>)
 8006c42:	f003 fe29 	bl	800a898 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c4a:	f002 fd9b 	bl	8009784 <HAL_Delay>

		  hafizaYaz=0;
 8006c4e:	4b78      	ldr	r3, [pc, #480]	; (8006e30 <mainLoop+0x2c8>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006c54:	4b79      	ldr	r3, [pc, #484]	; (8006e3c <mainLoop+0x2d4>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d105      	bne.n	8006c68 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 8006c5c:	4a78      	ldr	r2, [pc, #480]	; (8006e40 <mainLoop+0x2d8>)
 8006c5e:	2101      	movs	r1, #1
 8006c60:	2002      	movs	r0, #2
 8006c62:	f002 f839 	bl	8008cd8 <lcd_print>
 8006c66:	e008      	b.n	8006c7a <mainLoop+0x112>
		  } else if(dilSecim==1) {
 8006c68:	4b74      	ldr	r3, [pc, #464]	; (8006e3c <mainLoop+0x2d4>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d104      	bne.n	8006c7a <mainLoop+0x112>
			  lcd_print(2,1,"Data Wrote      ");
 8006c70:	4a74      	ldr	r2, [pc, #464]	; (8006e44 <mainLoop+0x2dc>)
 8006c72:	2101      	movs	r1, #1
 8006c74:	2002      	movs	r0, #2
 8006c76:	f002 f82f 	bl	8008cd8 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c7e:	f002 fd81 	bl	8009784 <HAL_Delay>
		  lcd_clear();
 8006c82:	f002 f855 	bl	8008d30 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006c86:	4b70      	ldr	r3, [pc, #448]	; (8006e48 <mainLoop+0x2e0>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f083 0301 	eor.w	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d06d      	beq.n	8006d70 <mainLoop+0x208>
 8006c94:	4867      	ldr	r0, [pc, #412]	; (8006e34 <mainLoop+0x2cc>)
 8006c96:	f004 f961 	bl	800af5c <HAL_I2C_GetState>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d167      	bne.n	8006d70 <mainLoop+0x208>
		  if(ilkOkuma==0) {
 8006ca0:	4b6a      	ldr	r3, [pc, #424]	; (8006e4c <mainLoop+0x2e4>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f083 0301 	eor.w	r3, r3, #1
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d044      	beq.n	8006d38 <mainLoop+0x1d0>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006cae:	4a68      	ldr	r2, [pc, #416]	; (8006e50 <mainLoop+0x2e8>)
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	2001      	movs	r0, #1
 8006cb4:	f002 f810 	bl	8008cd8 <lcd_print>
			  if(dilSecim==0) {
 8006cb8:	4b60      	ldr	r3, [pc, #384]	; (8006e3c <mainLoop+0x2d4>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <mainLoop+0x164>
				  lcd_print(2,1,"Data Okunuyor...");
 8006cc0:	4a64      	ldr	r2, [pc, #400]	; (8006e54 <mainLoop+0x2ec>)
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	2002      	movs	r0, #2
 8006cc6:	f002 f807 	bl	8008cd8 <lcd_print>
 8006cca:	e008      	b.n	8006cde <mainLoop+0x176>
			  } else if(dilSecim==1) {
 8006ccc:	4b5b      	ldr	r3, [pc, #364]	; (8006e3c <mainLoop+0x2d4>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d104      	bne.n	8006cde <mainLoop+0x176>
				  lcd_print(2,1,"Data Reading... ");
 8006cd4:	4a60      	ldr	r2, [pc, #384]	; (8006e58 <mainLoop+0x2f0>)
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	2002      	movs	r0, #2
 8006cda:	f001 fffd 	bl	8008cd8 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ce2:	f002 fd4f 	bl	8009784 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006ce6:	bf00      	nop
 8006ce8:	4852      	ldr	r0, [pc, #328]	; (8006e34 <mainLoop+0x2cc>)
 8006cea:	f004 f944 	bl	800af76 <HAL_I2C_GetError>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d0f9      	beq.n	8006ce8 <mainLoop+0x180>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006cf4:	e003      	b.n	8006cfe <mainLoop+0x196>
				  HAL_Delay(1000);
 8006cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cfa:	f002 fd43 	bl	8009784 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006cfe:	484d      	ldr	r0, [pc, #308]	; (8006e34 <mainLoop+0x2cc>)
 8006d00:	f004 f92c 	bl	800af5c <HAL_I2C_GetState>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	d1f5      	bne.n	8006cf6 <mainLoop+0x18e>
			  }

			  if(dilSecim==0) {
 8006d0a:	4b4c      	ldr	r3, [pc, #304]	; (8006e3c <mainLoop+0x2d4>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Okundu.    ");
 8006d12:	4a52      	ldr	r2, [pc, #328]	; (8006e5c <mainLoop+0x2f4>)
 8006d14:	2101      	movs	r1, #1
 8006d16:	2002      	movs	r0, #2
 8006d18:	f001 ffde 	bl	8008cd8 <lcd_print>
 8006d1c:	e008      	b.n	8006d30 <mainLoop+0x1c8>
			  } else if(dilSecim==1) {
 8006d1e:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <mainLoop+0x2d4>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d104      	bne.n	8006d30 <mainLoop+0x1c8>
				  lcd_print(2,1,"Data Read.      ");
 8006d26:	4a4e      	ldr	r2, [pc, #312]	; (8006e60 <mainLoop+0x2f8>)
 8006d28:	2101      	movs	r1, #1
 8006d2a:	2002      	movs	r0, #2
 8006d2c:	f001 ffd4 	bl	8008cd8 <lcd_print>
			  }

			  ilkOkuma=1;
 8006d30:	4b46      	ldr	r3, [pc, #280]	; (8006e4c <mainLoop+0x2e4>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e014      	b.n	8006d62 <mainLoop+0x1fa>
		  } else {
			  if(dilSecim==0) {
 8006d38:	4b40      	ldr	r3, [pc, #256]	; (8006e3c <mainLoop+0x2d4>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d105      	bne.n	8006d4c <mainLoop+0x1e4>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006d40:	4a48      	ldr	r2, [pc, #288]	; (8006e64 <mainLoop+0x2fc>)
 8006d42:	2101      	movs	r1, #1
 8006d44:	2002      	movs	r0, #2
 8006d46:	f001 ffc7 	bl	8008cd8 <lcd_print>
 8006d4a:	e008      	b.n	8006d5e <mainLoop+0x1f6>
			  } else if(dilSecim==1) {
 8006d4c:	4b3b      	ldr	r3, [pc, #236]	; (8006e3c <mainLoop+0x2d4>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d104      	bne.n	8006d5e <mainLoop+0x1f6>
				  lcd_print(2,1,"Value Saved     ");
 8006d54:	4a44      	ldr	r2, [pc, #272]	; (8006e68 <mainLoop+0x300>)
 8006d56:	2101      	movs	r1, #1
 8006d58:	2002      	movs	r0, #2
 8006d5a:	f001 ffbd 	bl	8008cd8 <lcd_print>
			  }
			  lcd_clear();
 8006d5e:	f001 ffe7 	bl	8008d30 <lcd_clear>
		  }

		  lcd_clear();
 8006d62:	f001 ffe5 	bl	8008d30 <lcd_clear>

		  eepromKontrol();
 8006d66:	f7f9 fa65 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006d6a:	4b37      	ldr	r3, [pc, #220]	; (8006e48 <mainLoop+0x2e0>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006d70:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <mainLoop+0x304>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d11c      	bne.n	8006db2 <mainLoop+0x24a>
 8006d78:	4b3d      	ldr	r3, [pc, #244]	; (8006e70 <mainLoop+0x308>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f083 0301 	eor.w	r3, r3, #1
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d015      	beq.n	8006db2 <mainLoop+0x24a>
 8006d86:	4b3b      	ldr	r3, [pc, #236]	; (8006e74 <mainLoop+0x30c>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d111      	bne.n	8006db2 <mainLoop+0x24a>
			lcd_clear();
 8006d8e:	f001 ffcf 	bl	8008d30 <lcd_clear>
			HAL_Delay(10);
 8006d92:	200a      	movs	r0, #10
 8006d94:	f002 fcf6 	bl	8009784 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006d98:	4a37      	ldr	r2, [pc, #220]	; (8006e78 <mainLoop+0x310>)
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	f001 ff9b 	bl	8008cd8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006da2:	4a36      	ldr	r2, [pc, #216]	; (8006e7c <mainLoop+0x314>)
 8006da4:	2101      	movs	r1, #1
 8006da6:	2002      	movs	r0, #2
 8006da8:	f001 ff96 	bl	8008cd8 <lcd_print>
			mesajYazildi=1;
 8006dac:	4b30      	ldr	r3, [pc, #192]	; (8006e70 <mainLoop+0x308>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006db2:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <mainLoop+0x304>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d112      	bne.n	8006de0 <mainLoop+0x278>
 8006dba:	2102      	movs	r1, #2
 8006dbc:	4817      	ldr	r0, [pc, #92]	; (8006e1c <mainLoop+0x2b4>)
 8006dbe:	f003 fab1 	bl	800a324 <HAL_GPIO_ReadPin>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10b      	bne.n	8006de0 <mainLoop+0x278>
 8006dc8:	2104      	movs	r1, #4
 8006dca:	4814      	ldr	r0, [pc, #80]	; (8006e1c <mainLoop+0x2b4>)
 8006dcc:	f003 faaa 	bl	800a324 <HAL_GPIO_ReadPin>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d104      	bne.n	8006de0 <mainLoop+0x278>
			menuGiris=1;
 8006dd6:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <mainLoop+0x304>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006ddc:	f001 ffa8 	bl	8008d30 <lcd_clear>
		}

		if(menuGiris==1) {
 8006de0:	4b22      	ldr	r3, [pc, #136]	; (8006e6c <mainLoop+0x304>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <mainLoop+0x284>
			menu();
 8006de8:	f7fa fbe2 	bl	80015b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006df0:	480b      	ldr	r0, [pc, #44]	; (8006e20 <mainLoop+0x2b8>)
 8006df2:	f003 fac6 	bl	800a382 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006dfa:	4821      	ldr	r0, [pc, #132]	; (8006e80 <mainLoop+0x318>)
 8006dfc:	f003 fa92 	bl	800a324 <HAL_GPIO_ReadPin>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d142      	bne.n	8006e8c <mainLoop+0x324>
 8006e06:	4b1f      	ldr	r3, [pc, #124]	; (8006e84 <mainLoop+0x31c>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	f083 0301 	eor.w	r3, r3, #1
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d03b      	beq.n	8006e8c <mainLoop+0x324>
			stopVar=1;
 8006e14:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <mainLoop+0x320>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e03a      	b.n	8006e92 <mainLoop+0x32a>
 8006e1c:	40010800 	.word	0x40010800
 8006e20:	40011000 	.word	0x40011000
 8006e24:	20000b1b 	.word	0x20000b1b
 8006e28:	20000ac8 	.word	0x20000ac8
 8006e2c:	20000ae4 	.word	0x20000ae4
 8006e30:	20000b18 	.word	0x20000b18
 8006e34:	200010d8 	.word	0x200010d8
 8006e38:	20000a18 	.word	0x20000a18
 8006e3c:	20000b0d 	.word	0x20000b0d
 8006e40:	0800ec1c 	.word	0x0800ec1c
 8006e44:	0800ec30 	.word	0x0800ec30
 8006e48:	20000b19 	.word	0x20000b19
 8006e4c:	20000b1a 	.word	0x20000b1a
 8006e50:	0800ec44 	.word	0x0800ec44
 8006e54:	0800ec58 	.word	0x0800ec58
 8006e58:	0800ec6c 	.word	0x0800ec6c
 8006e5c:	0800ec80 	.word	0x0800ec80
 8006e60:	0800ec94 	.word	0x0800ec94
 8006e64:	0800eca8 	.word	0x0800eca8
 8006e68:	0800ecbc 	.word	0x0800ecbc
 8006e6c:	20000b09 	.word	0x20000b09
 8006e70:	20000b20 	.word	0x20000b20
 8006e74:	20000b0a 	.word	0x20000b0a
 8006e78:	0800ecd0 	.word	0x0800ecd0
 8006e7c:	0800ece4 	.word	0x0800ece4
 8006e80:	40010c00 	.word	0x40010c00
 8006e84:	20000b41 	.word	0x20000b41
 8006e88:	20000b3e 	.word	0x20000b3e
		} else {
			stopVar=0;
 8006e8c:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <mainLoop+0x340>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006e92:	f7fd ffa7 	bl	8004de4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006e96:	f7fd ffd9 	bl	8004e4c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006e9a:	f7fe f81d 	bl	8004ed8 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006e9e:	f7fe f86d 	bl	8004f7c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006ea2:	f7ff fbc7 	bl	8006634 <checkDemoModCalisma>
		checkLCDBacklight();
 8006ea6:	e662      	b.n	8006b6e <mainLoop+0x6>
 8006ea8:	20000b3e 	.word	0x20000b3e

08006eac <loadMenuTexts>:
char secilenDilText[16];
char menudenCikisText[16];
char enteraBasinizText[16];
char hataKoduText[16];

void loadMenuTexts(uint8_t dilSecim) {
 8006eac:	b490      	push	{r4, r7}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 1) {
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	f040 834b 	bne.w	8007554 <loadMenuTexts+0x6a8>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 16); //destination, source, size
 8006ebe:	4ab8      	ldr	r2, [pc, #736]	; (80071a0 <loadMenuTexts+0x2f4>)
 8006ec0:	4bb8      	ldr	r3, [pc, #736]	; (80071a4 <loadMenuTexts+0x2f8>)
 8006ec2:	4614      	mov	r4, r2
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	6859      	ldr	r1, [r3, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ayarlarText, ayarlarTextTR, 16);
 8006ece:	4ab6      	ldr	r2, [pc, #728]	; (80071a8 <loadMenuTexts+0x2fc>)
 8006ed0:	4bb6      	ldr	r3, [pc, #728]	; (80071ac <loadMenuTexts+0x300>)
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	6859      	ldr	r1, [r3, #4]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKayitListText, hataKayitListTextTR, 16);
 8006ede:	4ab4      	ldr	r2, [pc, #720]	; (80071b0 <loadMenuTexts+0x304>)
 8006ee0:	4bb4      	ldr	r3, [pc, #720]	; (80071b4 <loadMenuTexts+0x308>)
 8006ee2:	4614      	mov	r4, r2
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	6859      	ldr	r1, [r3, #4]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birHataKoduText, birHataKoduTextTR, 16);
 8006eee:	4ab2      	ldr	r2, [pc, #712]	; (80071b8 <loadMenuTexts+0x30c>)
 8006ef0:	4bb2      	ldr	r3, [pc, #712]	; (80071bc <loadMenuTexts+0x310>)
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	6859      	ldr	r1, [r3, #4]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 16);
 8006efe:	4ab0      	ldr	r2, [pc, #704]	; (80071c0 <loadMenuTexts+0x314>)
 8006f00:	4bb0      	ldr	r3, [pc, #704]	; (80071c4 <loadMenuTexts+0x318>)
 8006f02:	4614      	mov	r4, r2
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	6859      	ldr	r1, [r3, #4]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ucHataKoduText, ucHataKoduTextTR, 16);
 8006f0e:	4aae      	ldr	r2, [pc, #696]	; (80071c8 <loadMenuTexts+0x31c>)
 8006f10:	4bae      	ldr	r3, [pc, #696]	; (80071cc <loadMenuTexts+0x320>)
 8006f12:	4614      	mov	r4, r2
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	6859      	ldr	r1, [r3, #4]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dortHataKoduText, dortHataKoduTextTR, 16);
 8006f1e:	4aac      	ldr	r2, [pc, #688]	; (80071d0 <loadMenuTexts+0x324>)
 8006f20:	4bac      	ldr	r3, [pc, #688]	; (80071d4 <loadMenuTexts+0x328>)
 8006f22:	4614      	mov	r4, r2
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	6859      	ldr	r1, [r3, #4]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(besHataKoduText, besHataKoduTextTR, 16);
 8006f2e:	4aaa      	ldr	r2, [pc, #680]	; (80071d8 <loadMenuTexts+0x32c>)
 8006f30:	4baa      	ldr	r3, [pc, #680]	; (80071dc <loadMenuTexts+0x330>)
 8006f32:	4614      	mov	r4, r2
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	6859      	ldr	r1, [r3, #4]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altiHataKoduText, altiHataKoduTextTR, 16);
 8006f3e:	4aa8      	ldr	r2, [pc, #672]	; (80071e0 <loadMenuTexts+0x334>)
 8006f40:	4ba8      	ldr	r3, [pc, #672]	; (80071e4 <loadMenuTexts+0x338>)
 8006f42:	4614      	mov	r4, r2
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yediHataKoduText, yediHataKoduTextTR, 16);
 8006f4e:	4aa6      	ldr	r2, [pc, #664]	; (80071e8 <loadMenuTexts+0x33c>)
 8006f50:	4ba6      	ldr	r3, [pc, #664]	; (80071ec <loadMenuTexts+0x340>)
 8006f52:	4614      	mov	r4, r2
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	6859      	ldr	r1, [r3, #4]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 16);
 8006f5e:	4aa4      	ldr	r2, [pc, #656]	; (80071f0 <loadMenuTexts+0x344>)
 8006f60:	4ba4      	ldr	r3, [pc, #656]	; (80071f4 <loadMenuTexts+0x348>)
 8006f62:	4614      	mov	r4, r2
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	6859      	ldr	r1, [r3, #4]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 16);
 8006f6e:	4aa2      	ldr	r2, [pc, #648]	; (80071f8 <loadMenuTexts+0x34c>)
 8006f70:	4ba2      	ldr	r3, [pc, #648]	; (80071fc <loadMenuTexts+0x350>)
 8006f72:	4614      	mov	r4, r2
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	6859      	ldr	r1, [r3, #4]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(onHataKoduText, onHataKoduTextTR, 16);
 8006f7e:	4aa0      	ldr	r2, [pc, #640]	; (8007200 <loadMenuTexts+0x354>)
 8006f80:	4ba0      	ldr	r3, [pc, #640]	; (8007204 <loadMenuTexts+0x358>)
 8006f82:	4614      	mov	r4, r2
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	6859      	ldr	r1, [r3, #4]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(silmekIcinText, silmekIcinTextTR, 16);
 8006f8e:	4a9e      	ldr	r2, [pc, #632]	; (8007208 <loadMenuTexts+0x35c>)
 8006f90:	4b9e      	ldr	r3, [pc, #632]	; (800720c <loadMenuTexts+0x360>)
 8006f92:	4614      	mov	r4, r2
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	6859      	ldr	r1, [r3, #4]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSekliText, calismaSekliTextTR, 16);
 8006f9e:	4a9c      	ldr	r2, [pc, #624]	; (8007210 <loadMenuTexts+0x364>)
 8006fa0:	4b9c      	ldr	r3, [pc, #624]	; (8007214 <loadMenuTexts+0x368>)
 8006fa2:	4614      	mov	r4, r2
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	6859      	ldr	r1, [r3, #4]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 16);
 8006fae:	4a9a      	ldr	r2, [pc, #616]	; (8007218 <loadMenuTexts+0x36c>)
 8006fb0:	4b9a      	ldr	r3, [pc, #616]	; (800721c <loadMenuTexts+0x370>)
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	6859      	ldr	r1, [r3, #4]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 16);
 8006fbe:	4a98      	ldr	r2, [pc, #608]	; (8007220 <loadMenuTexts+0x374>)
 8006fc0:	4b98      	ldr	r3, [pc, #608]	; (8007224 <loadMenuTexts+0x378>)
 8006fc2:	4614      	mov	r4, r2
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basGonderText, basGonderTextTR, 16);
 8006fce:	4a96      	ldr	r2, [pc, #600]	; (8007228 <loadMenuTexts+0x37c>)
 8006fd0:	4b96      	ldr	r3, [pc, #600]	; (800722c <loadMenuTexts+0x380>)
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	6859      	ldr	r1, [r3, #4]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 16);
 8006fde:	4a94      	ldr	r2, [pc, #592]	; (8007230 <loadMenuTexts+0x384>)
 8006fe0:	4b94      	ldr	r3, [pc, #592]	; (8007234 <loadMenuTexts+0x388>)
 8006fe2:	4614      	mov	r4, r2
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	6859      	ldr	r1, [r3, #4]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(pasifText, pasifTextTR, 16);
 8006fee:	4a92      	ldr	r2, [pc, #584]	; (8007238 <loadMenuTexts+0x38c>)
 8006ff0:	4b92      	ldr	r3, [pc, #584]	; (800723c <loadMenuTexts+0x390>)
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	6859      	ldr	r1, [r3, #4]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(aktifText, aktifTextTR, 16);
 8006ffe:	4a90      	ldr	r2, [pc, #576]	; (8007240 <loadMenuTexts+0x394>)
 8007000:	4b90      	ldr	r3, [pc, #576]	; (8007244 <loadMenuTexts+0x398>)
 8007002:	4614      	mov	r4, r2
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	6859      	ldr	r1, [r3, #4]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 16);
 800700e:	4a8e      	ldr	r2, [pc, #568]	; (8007248 <loadMenuTexts+0x39c>)
 8007010:	4b8e      	ldr	r3, [pc, #568]	; (800724c <loadMenuTexts+0x3a0>)
 8007012:	4614      	mov	r4, r2
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	6859      	ldr	r1, [r3, #4]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altLimitText, altLimitTextTR, 16);
 800701e:	4a8c      	ldr	r2, [pc, #560]	; (8007250 <loadMenuTexts+0x3a4>)
 8007020:	4b8c      	ldr	r3, [pc, #560]	; (8007254 <loadMenuTexts+0x3a8>)
 8007022:	4614      	mov	r4, r2
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	6859      	ldr	r1, [r3, #4]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basincSalteriText, basincSalteriTextTR, 16);
 800702e:	4a8a      	ldr	r2, [pc, #552]	; (8007258 <loadMenuTexts+0x3ac>)
 8007030:	4b8a      	ldr	r3, [pc, #552]	; (800725c <loadMenuTexts+0x3b0>)
 8007032:	4614      	mov	r4, r2
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	6859      	ldr	r1, [r3, #4]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 16);
 800703e:	4a88      	ldr	r2, [pc, #544]	; (8007260 <loadMenuTexts+0x3b4>)
 8007040:	4b88      	ldr	r3, [pc, #544]	; (8007264 <loadMenuTexts+0x3b8>)
 8007042:	4614      	mov	r4, r2
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	6859      	ldr	r1, [r3, #4]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 16);
 800704e:	4a86      	ldr	r2, [pc, #536]	; (8007268 <loadMenuTexts+0x3bc>)
 8007050:	4b86      	ldr	r3, [pc, #536]	; (800726c <loadMenuTexts+0x3c0>)
 8007052:	4614      	mov	r4, r2
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	6859      	ldr	r1, [r3, #4]
 8007058:	689a      	ldr	r2, [r3, #8]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 16);
 800705e:	4a84      	ldr	r2, [pc, #528]	; (8007270 <loadMenuTexts+0x3c4>)
 8007060:	4b84      	ldr	r3, [pc, #528]	; (8007274 <loadMenuTexts+0x3c8>)
 8007062:	4614      	mov	r4, r2
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	6859      	ldr	r1, [r3, #4]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 16);
 800706e:	4a82      	ldr	r2, [pc, #520]	; (8007278 <loadMenuTexts+0x3cc>)
 8007070:	4b82      	ldr	r3, [pc, #520]	; (800727c <loadMenuTexts+0x3d0>)
 8007072:	4614      	mov	r4, r2
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	6859      	ldr	r1, [r3, #4]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 16);
 800707e:	4a80      	ldr	r2, [pc, #512]	; (8007280 <loadMenuTexts+0x3d4>)
 8007080:	4b80      	ldr	r3, [pc, #512]	; (8007284 <loadMenuTexts+0x3d8>)
 8007082:	4614      	mov	r4, r2
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	6859      	ldr	r1, [r3, #4]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 16);
 800708e:	4a7e      	ldr	r2, [pc, #504]	; (8007288 <loadMenuTexts+0x3dc>)
 8007090:	4b7e      	ldr	r3, [pc, #504]	; (800728c <loadMenuTexts+0x3e0>)
 8007092:	4614      	mov	r4, r2
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	6859      	ldr	r1, [r3, #4]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katButonuEXTText, katButonuEXTTextTR, 16);
 800709e:	4a7c      	ldr	r2, [pc, #496]	; (8007290 <loadMenuTexts+0x3e4>)
 80070a0:	4b7c      	ldr	r3, [pc, #496]	; (8007294 <loadMenuTexts+0x3e8>)
 80070a2:	4614      	mov	r4, r2
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	6859      	ldr	r1, [r3, #4]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 16);
 80070ae:	4a7a      	ldr	r2, [pc, #488]	; (8007298 <loadMenuTexts+0x3ec>)
 80070b0:	4b7a      	ldr	r3, [pc, #488]	; (800729c <loadMenuTexts+0x3f0>)
 80070b2:	4614      	mov	r4, r2
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	6859      	ldr	r1, [r3, #4]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(butonKontrolluText, butonKontrolluTextTR, 16);
 80070be:	4a78      	ldr	r2, [pc, #480]	; (80072a0 <loadMenuTexts+0x3f4>)
 80070c0:	4b78      	ldr	r3, [pc, #480]	; (80072a4 <loadMenuTexts+0x3f8>)
 80070c2:	4614      	mov	r4, r2
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	6859      	ldr	r1, [r3, #4]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 16);
 80070ce:	4a76      	ldr	r2, [pc, #472]	; (80072a8 <loadMenuTexts+0x3fc>)
 80070d0:	4b76      	ldr	r3, [pc, #472]	; (80072ac <loadMenuTexts+0x400>)
 80070d2:	4614      	mov	r4, r2
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	6859      	ldr	r1, [r3, #4]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kacSaniyeText, kacSaniyeTextTR, 16);
 80070de:	4a74      	ldr	r2, [pc, #464]	; (80072b0 <loadMenuTexts+0x404>)
 80070e0:	4b74      	ldr	r3, [pc, #464]	; (80072b4 <loadMenuTexts+0x408>)
 80070e2:	4614      	mov	r4, r2
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	6859      	ldr	r1, [r3, #4]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 16);
 80070ee:	4a72      	ldr	r2, [pc, #456]	; (80072b8 <loadMenuTexts+0x40c>)
 80070f0:	4b72      	ldr	r3, [pc, #456]	; (80072bc <loadMenuTexts+0x410>)
 80070f2:	4614      	mov	r4, r2
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	6859      	ldr	r1, [r3, #4]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 16);
 80070fe:	4a70      	ldr	r2, [pc, #448]	; (80072c0 <loadMenuTexts+0x414>)
 8007100:	4b70      	ldr	r3, [pc, #448]	; (80072c4 <loadMenuTexts+0x418>)
 8007102:	4614      	mov	r4, r2
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	6859      	ldr	r1, [r3, #4]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 16);
 800710e:	4a6e      	ldr	r2, [pc, #440]	; (80072c8 <loadMenuTexts+0x41c>)
 8007110:	4b6e      	ldr	r3, [pc, #440]	; (80072cc <loadMenuTexts+0x420>)
 8007112:	4614      	mov	r4, r2
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	6859      	ldr	r1, [r3, #4]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 16);
 800711e:	4a6c      	ldr	r2, [pc, #432]	; (80072d0 <loadMenuTexts+0x424>)
 8007120:	4b6c      	ldr	r3, [pc, #432]	; (80072d4 <loadMenuTexts+0x428>)
 8007122:	4614      	mov	r4, r2
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	6859      	ldr	r1, [r3, #4]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 16);
 800712e:	4a6a      	ldr	r2, [pc, #424]	; (80072d8 <loadMenuTexts+0x42c>)
 8007130:	4b6a      	ldr	r3, [pc, #424]	; (80072dc <loadMenuTexts+0x430>)
 8007132:	4614      	mov	r4, r2
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	6859      	ldr	r1, [r3, #4]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 16);
 800713e:	4a68      	ldr	r2, [pc, #416]	; (80072e0 <loadMenuTexts+0x434>)
 8007140:	4b68      	ldr	r3, [pc, #416]	; (80072e4 <loadMenuTexts+0x438>)
 8007142:	4614      	mov	r4, r2
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	6859      	ldr	r1, [r3, #4]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 16);
 800714e:	4a66      	ldr	r2, [pc, #408]	; (80072e8 <loadMenuTexts+0x43c>)
 8007150:	4b66      	ldr	r3, [pc, #408]	; (80072ec <loadMenuTexts+0x440>)
 8007152:	4614      	mov	r4, r2
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	6859      	ldr	r1, [r3, #4]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 16);
 800715e:	4a64      	ldr	r2, [pc, #400]	; (80072f0 <loadMenuTexts+0x444>)
 8007160:	4b64      	ldr	r3, [pc, #400]	; (80072f4 <loadMenuTexts+0x448>)
 8007162:	4614      	mov	r4, r2
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	6859      	ldr	r1, [r3, #4]
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 16);
 800716e:	4a62      	ldr	r2, [pc, #392]	; (80072f8 <loadMenuTexts+0x44c>)
 8007170:	4b62      	ldr	r3, [pc, #392]	; (80072fc <loadMenuTexts+0x450>)
 8007172:	4614      	mov	r4, r2
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	6859      	ldr	r1, [r3, #4]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 16);
 800717e:	4a60      	ldr	r2, [pc, #384]	; (8007300 <loadMenuTexts+0x454>)
 8007180:	4b60      	ldr	r3, [pc, #384]	; (8007304 <loadMenuTexts+0x458>)
 8007182:	4614      	mov	r4, r2
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	6859      	ldr	r1, [r3, #4]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAktifText, devirmeAktifTextTR, 16);
 800718e:	4a5e      	ldr	r2, [pc, #376]	; (8007308 <loadMenuTexts+0x45c>)
 8007190:	4b5e      	ldr	r3, [pc, #376]	; (800730c <loadMenuTexts+0x460>)
 8007192:	4614      	mov	r4, r2
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	6859      	ldr	r1, [r3, #4]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800719e:	e0b7      	b.n	8007310 <loadMenuTexts+0x464>
 80071a0:	20000c4c 	.word	0x20000c4c
 80071a4:	200000e0 	.word	0x200000e0
 80071a8:	20000c5c 	.word	0x20000c5c
 80071ac:	200000f0 	.word	0x200000f0
 80071b0:	20000c6c 	.word	0x20000c6c
 80071b4:	20000100 	.word	0x20000100
 80071b8:	20000c7c 	.word	0x20000c7c
 80071bc:	20000110 	.word	0x20000110
 80071c0:	20000c8c 	.word	0x20000c8c
 80071c4:	20000120 	.word	0x20000120
 80071c8:	20000c9c 	.word	0x20000c9c
 80071cc:	20000130 	.word	0x20000130
 80071d0:	20000cac 	.word	0x20000cac
 80071d4:	20000140 	.word	0x20000140
 80071d8:	20000cbc 	.word	0x20000cbc
 80071dc:	20000150 	.word	0x20000150
 80071e0:	20000ccc 	.word	0x20000ccc
 80071e4:	20000160 	.word	0x20000160
 80071e8:	20000cdc 	.word	0x20000cdc
 80071ec:	20000170 	.word	0x20000170
 80071f0:	20000cec 	.word	0x20000cec
 80071f4:	20000180 	.word	0x20000180
 80071f8:	20000cfc 	.word	0x20000cfc
 80071fc:	20000190 	.word	0x20000190
 8007200:	20000d0c 	.word	0x20000d0c
 8007204:	200001a0 	.word	0x200001a0
 8007208:	20000d1c 	.word	0x20000d1c
 800720c:	200001b0 	.word	0x200001b0
 8007210:	20000d2c 	.word	0x20000d2c
 8007214:	200001c0 	.word	0x200001c0
 8007218:	20000d3c 	.word	0x20000d3c
 800721c:	200001d0 	.word	0x200001d0
 8007220:	20000d4c 	.word	0x20000d4c
 8007224:	200001e0 	.word	0x200001e0
 8007228:	20000d5c 	.word	0x20000d5c
 800722c:	200001f0 	.word	0x200001f0
 8007230:	20000d6c 	.word	0x20000d6c
 8007234:	20000200 	.word	0x20000200
 8007238:	20000d7c 	.word	0x20000d7c
 800723c:	20000210 	.word	0x20000210
 8007240:	20000d8c 	.word	0x20000d8c
 8007244:	20000220 	.word	0x20000220
 8007248:	20000d9c 	.word	0x20000d9c
 800724c:	20000230 	.word	0x20000230
 8007250:	20000dac 	.word	0x20000dac
 8007254:	20000240 	.word	0x20000240
 8007258:	20000dbc 	.word	0x20000dbc
 800725c:	20000250 	.word	0x20000250
 8007260:	20000dcc 	.word	0x20000dcc
 8007264:	20000260 	.word	0x20000260
 8007268:	20000ddc 	.word	0x20000ddc
 800726c:	20000270 	.word	0x20000270
 8007270:	20000dec 	.word	0x20000dec
 8007274:	20000280 	.word	0x20000280
 8007278:	20000dfc 	.word	0x20000dfc
 800727c:	20000290 	.word	0x20000290
 8007280:	20000e0c 	.word	0x20000e0c
 8007284:	200002a0 	.word	0x200002a0
 8007288:	20000e1c 	.word	0x20000e1c
 800728c:	200002b0 	.word	0x200002b0
 8007290:	20000e2c 	.word	0x20000e2c
 8007294:	200002c0 	.word	0x200002c0
 8007298:	20000e3c 	.word	0x20000e3c
 800729c:	200002d0 	.word	0x200002d0
 80072a0:	20000e4c 	.word	0x20000e4c
 80072a4:	200002e0 	.word	0x200002e0
 80072a8:	20000e5c 	.word	0x20000e5c
 80072ac:	200002f0 	.word	0x200002f0
 80072b0:	20000e6c 	.word	0x20000e6c
 80072b4:	20000300 	.word	0x20000300
 80072b8:	20000e7c 	.word	0x20000e7c
 80072bc:	20000310 	.word	0x20000310
 80072c0:	20000e8c 	.word	0x20000e8c
 80072c4:	20000320 	.word	0x20000320
 80072c8:	20000e9c 	.word	0x20000e9c
 80072cc:	20000330 	.word	0x20000330
 80072d0:	20000eac 	.word	0x20000eac
 80072d4:	20000340 	.word	0x20000340
 80072d8:	20000ebc 	.word	0x20000ebc
 80072dc:	20000350 	.word	0x20000350
 80072e0:	20000ecc 	.word	0x20000ecc
 80072e4:	20000360 	.word	0x20000360
 80072e8:	20000edc 	.word	0x20000edc
 80072ec:	20000370 	.word	0x20000370
 80072f0:	20000eec 	.word	0x20000eec
 80072f4:	20000380 	.word	0x20000380
 80072f8:	20000efc 	.word	0x20000efc
 80072fc:	20000390 	.word	0x20000390
 8007300:	20000f0c 	.word	0x20000f0c
 8007304:	200003a0 	.word	0x200003a0
 8007308:	20000f1c 	.word	0x20000f1c
 800730c:	200003b0 	.word	0x200003b0
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 16);
 8007310:	4a60      	ldr	r2, [pc, #384]	; (8007494 <loadMenuTexts+0x5e8>)
 8007312:	4b61      	ldr	r3, [pc, #388]	; (8007498 <loadMenuTexts+0x5ec>)
 8007314:	4614      	mov	r4, r2
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	6859      	ldr	r1, [r3, #4]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariText, devirmeYukariTextTR, 16);
 8007320:	4a5e      	ldr	r2, [pc, #376]	; (800749c <loadMenuTexts+0x5f0>)
 8007322:	4b5f      	ldr	r3, [pc, #380]	; (80074a0 <loadMenuTexts+0x5f4>)
 8007324:	4614      	mov	r4, r2
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	6859      	ldr	r1, [r3, #4]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 16);
 8007330:	4a5c      	ldr	r2, [pc, #368]	; (80074a4 <loadMenuTexts+0x5f8>)
 8007332:	4b5d      	ldr	r3, [pc, #372]	; (80074a8 <loadMenuTexts+0x5fc>)
 8007334:	4614      	mov	r4, r2
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	6859      	ldr	r1, [r3, #4]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 16);
 8007340:	4a5a      	ldr	r2, [pc, #360]	; (80074ac <loadMenuTexts+0x600>)
 8007342:	4b5b      	ldr	r3, [pc, #364]	; (80074b0 <loadMenuTexts+0x604>)
 8007344:	4614      	mov	r4, r2
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	6859      	ldr	r1, [r3, #4]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 16);
 8007350:	4a58      	ldr	r2, [pc, #352]	; (80074b4 <loadMenuTexts+0x608>)
 8007352:	4b59      	ldr	r3, [pc, #356]	; (80074b8 <loadMenuTexts+0x60c>)
 8007354:	4614      	mov	r4, r2
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 16);
 8007360:	4a56      	ldr	r2, [pc, #344]	; (80074bc <loadMenuTexts+0x610>)
 8007362:	4b57      	ldr	r3, [pc, #348]	; (80074c0 <loadMenuTexts+0x614>)
 8007364:	4614      	mov	r4, r2
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	6859      	ldr	r1, [r3, #4]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 16);
 8007370:	4a54      	ldr	r2, [pc, #336]	; (80074c4 <loadMenuTexts+0x618>)
 8007372:	4b55      	ldr	r3, [pc, #340]	; (80074c8 <loadMenuTexts+0x61c>)
 8007374:	4614      	mov	r4, r2
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tekTesirText, tekTesirTextTR, 16);
 8007380:	4a52      	ldr	r2, [pc, #328]	; (80074cc <loadMenuTexts+0x620>)
 8007382:	4b53      	ldr	r3, [pc, #332]	; (80074d0 <loadMenuTexts+0x624>)
 8007384:	4614      	mov	r4, r2
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ciftTesirText, ciftTesirTextTR, 16);
 8007390:	4a50      	ldr	r2, [pc, #320]	; (80074d4 <loadMenuTexts+0x628>)
 8007392:	4b51      	ldr	r3, [pc, #324]	; (80074d8 <loadMenuTexts+0x62c>)
 8007394:	4614      	mov	r4, r2
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 16);
 80073a0:	4a4e      	ldr	r2, [pc, #312]	; (80074dc <loadMenuTexts+0x630>)
 80073a2:	4b4f      	ldr	r3, [pc, #316]	; (80074e0 <loadMenuTexts+0x634>)
 80073a4:	4614      	mov	r4, r2
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	6859      	ldr	r1, [r3, #4]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariValfSureText, yukariValfSureTextTR, 16);
 80073b0:	4a4c      	ldr	r2, [pc, #304]	; (80074e4 <loadMenuTexts+0x638>)
 80073b2:	4b4d      	ldr	r3, [pc, #308]	; (80074e8 <loadMenuTexts+0x63c>)
 80073b4:	4614      	mov	r4, r2
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	6859      	ldr	r1, [r3, #4]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(asagiValfSureText, asagiValfSureTextTR, 16);
 80073c0:	4a4a      	ldr	r2, [pc, #296]	; (80074ec <loadMenuTexts+0x640>)
 80073c2:	4b4b      	ldr	r3, [pc, #300]	; (80074f0 <loadMenuTexts+0x644>)
 80073c4:	4614      	mov	r4, r2
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	6859      	ldr	r1, [r3, #4]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 16);
 80073d0:	4a48      	ldr	r2, [pc, #288]	; (80074f4 <loadMenuTexts+0x648>)
 80073d2:	4b49      	ldr	r3, [pc, #292]	; (80074f8 <loadMenuTexts+0x64c>)
 80073d4:	4614      	mov	r4, r2
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	6859      	ldr	r1, [r3, #4]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ileriValfSureText, ileriValfSureTextTR, 16);
 80073e0:	4a46      	ldr	r2, [pc, #280]	; (80074fc <loadMenuTexts+0x650>)
 80073e2:	4b47      	ldr	r3, [pc, #284]	; (8007500 <loadMenuTexts+0x654>)
 80073e4:	4614      	mov	r4, r2
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	6859      	ldr	r1, [r3, #4]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 16);
 80073f0:	4a44      	ldr	r2, [pc, #272]	; (8007504 <loadMenuTexts+0x658>)
 80073f2:	4b45      	ldr	r3, [pc, #276]	; (8007508 <loadMenuTexts+0x65c>)
 80073f4:	4614      	mov	r4, r2
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	6859      	ldr	r1, [r3, #4]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(geriValfSureText, geriValfSureTextTR, 16);
 8007400:	4a42      	ldr	r2, [pc, #264]	; (800750c <loadMenuTexts+0x660>)
 8007402:	4b43      	ldr	r3, [pc, #268]	; (8007510 <loadMenuTexts+0x664>)
 8007404:	4614      	mov	r4, r2
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	6859      	ldr	r1, [r3, #4]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSuresiText, calismaSuresiTextTR, 16);
 8007410:	4a40      	ldr	r2, [pc, #256]	; (8007514 <loadMenuTexts+0x668>)
 8007412:	4b41      	ldr	r3, [pc, #260]	; (8007518 <loadMenuTexts+0x66c>)
 8007414:	4614      	mov	r4, r2
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	6859      	ldr	r1, [r3, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSayisiText, calismaSayisiTextTR, 16);
 8007420:	4a3e      	ldr	r2, [pc, #248]	; (800751c <loadMenuTexts+0x670>)
 8007422:	4b3f      	ldr	r3, [pc, #252]	; (8007520 <loadMenuTexts+0x674>)
 8007424:	4614      	mov	r4, r2
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 16);
 8007430:	4a3c      	ldr	r2, [pc, #240]	; (8007524 <loadMenuTexts+0x678>)
 8007432:	4b3d      	ldr	r3, [pc, #244]	; (8007528 <loadMenuTexts+0x67c>)
 8007434:	4614      	mov	r4, r2
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	6859      	ldr	r1, [r3, #4]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dilSecimText, dilSecimTextTR, 16);
 8007440:	4a3a      	ldr	r2, [pc, #232]	; (800752c <loadMenuTexts+0x680>)
 8007442:	4b3b      	ldr	r3, [pc, #236]	; (8007530 <loadMenuTexts+0x684>)
 8007444:	4614      	mov	r4, r2
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	6859      	ldr	r1, [r3, #4]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(secilenDilText, secilenDilTextTR, 16);
 8007450:	4a38      	ldr	r2, [pc, #224]	; (8007534 <loadMenuTexts+0x688>)
 8007452:	4b39      	ldr	r3, [pc, #228]	; (8007538 <loadMenuTexts+0x68c>)
 8007454:	4614      	mov	r4, r2
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	6859      	ldr	r1, [r3, #4]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(menudenCikisText, menudenCikisTextTR, 16);
 8007460:	4a36      	ldr	r2, [pc, #216]	; (800753c <loadMenuTexts+0x690>)
 8007462:	4b37      	ldr	r3, [pc, #220]	; (8007540 <loadMenuTexts+0x694>)
 8007464:	4614      	mov	r4, r2
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	6859      	ldr	r1, [r3, #4]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enteraBasinizText, enteraBasinizTextTR, 16);
 8007470:	4a34      	ldr	r2, [pc, #208]	; (8007544 <loadMenuTexts+0x698>)
 8007472:	4b35      	ldr	r3, [pc, #212]	; (8007548 <loadMenuTexts+0x69c>)
 8007474:	4614      	mov	r4, r2
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKoduText, hataKoduTextTR, 16);
 8007480:	4a32      	ldr	r2, [pc, #200]	; (800754c <loadMenuTexts+0x6a0>)
 8007482:	4b33      	ldr	r3, [pc, #204]	; (8007550 <loadMenuTexts+0x6a4>)
 8007484:	4614      	mov	r4, r2
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	6859      	ldr	r1, [r3, #4]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(secilenDilText, secilenDilTextEN, 16);
		memcpy(menudenCikisText, menudenCikisTextEN, 16);
		memcpy(enteraBasinizText, enteraBasinizTextEN, 16);
		memcpy(hataKoduText, hataKoduTextEN, 16);
	}
}
 8007490:	e34a      	b.n	8007b28 <loadMenuTexts+0xc7c>
 8007492:	bf00      	nop
 8007494:	20000f2c 	.word	0x20000f2c
 8007498:	200003c0 	.word	0x200003c0
 800749c:	20000f3c 	.word	0x20000f3c
 80074a0:	200003d0 	.word	0x200003d0
 80074a4:	20000f4c 	.word	0x20000f4c
 80074a8:	200003e0 	.word	0x200003e0
 80074ac:	20000f5c 	.word	0x20000f5c
 80074b0:	200003f0 	.word	0x200003f0
 80074b4:	20000f6c 	.word	0x20000f6c
 80074b8:	20000400 	.word	0x20000400
 80074bc:	20000f7c 	.word	0x20000f7c
 80074c0:	20000410 	.word	0x20000410
 80074c4:	20000f8c 	.word	0x20000f8c
 80074c8:	20000420 	.word	0x20000420
 80074cc:	20000f9c 	.word	0x20000f9c
 80074d0:	20000430 	.word	0x20000430
 80074d4:	20000fac 	.word	0x20000fac
 80074d8:	20000440 	.word	0x20000440
 80074dc:	20000fbc 	.word	0x20000fbc
 80074e0:	20000450 	.word	0x20000450
 80074e4:	20000fcc 	.word	0x20000fcc
 80074e8:	20000460 	.word	0x20000460
 80074ec:	20000fdc 	.word	0x20000fdc
 80074f0:	20000470 	.word	0x20000470
 80074f4:	20000fec 	.word	0x20000fec
 80074f8:	20000480 	.word	0x20000480
 80074fc:	20000ffc 	.word	0x20000ffc
 8007500:	20000490 	.word	0x20000490
 8007504:	2000100c 	.word	0x2000100c
 8007508:	200004a0 	.word	0x200004a0
 800750c:	2000101c 	.word	0x2000101c
 8007510:	200004b0 	.word	0x200004b0
 8007514:	2000102c 	.word	0x2000102c
 8007518:	200004c0 	.word	0x200004c0
 800751c:	2000103c 	.word	0x2000103c
 8007520:	200004d0 	.word	0x200004d0
 8007524:	2000104c 	.word	0x2000104c
 8007528:	200004e0 	.word	0x200004e0
 800752c:	2000105c 	.word	0x2000105c
 8007530:	200004f0 	.word	0x200004f0
 8007534:	2000106c 	.word	0x2000106c
 8007538:	20000500 	.word	0x20000500
 800753c:	2000107c 	.word	0x2000107c
 8007540:	20000510 	.word	0x20000510
 8007544:	2000108c 	.word	0x2000108c
 8007548:	20000520 	.word	0x20000520
 800754c:	2000109c 	.word	0x2000109c
 8007550:	20000530 	.word	0x20000530
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 16); //destination, source, size
 8007554:	4ab8      	ldr	r2, [pc, #736]	; (8007838 <loadMenuTexts+0x98c>)
 8007556:	4bb9      	ldr	r3, [pc, #740]	; (800783c <loadMenuTexts+0x990>)
 8007558:	4614      	mov	r4, r2
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	6859      	ldr	r1, [r3, #4]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ayarlarText, ayarlarTextEN, 16);
 8007564:	4ab6      	ldr	r2, [pc, #728]	; (8007840 <loadMenuTexts+0x994>)
 8007566:	4bb7      	ldr	r3, [pc, #732]	; (8007844 <loadMenuTexts+0x998>)
 8007568:	4614      	mov	r4, r2
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKayitListText, hataKayitListTextEN, 16);
 8007574:	4ab4      	ldr	r2, [pc, #720]	; (8007848 <loadMenuTexts+0x99c>)
 8007576:	4bb5      	ldr	r3, [pc, #724]	; (800784c <loadMenuTexts+0x9a0>)
 8007578:	4614      	mov	r4, r2
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	6859      	ldr	r1, [r3, #4]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birHataKoduText, birHataKoduTextEN, 16);
 8007584:	4ab2      	ldr	r2, [pc, #712]	; (8007850 <loadMenuTexts+0x9a4>)
 8007586:	4bb3      	ldr	r3, [pc, #716]	; (8007854 <loadMenuTexts+0x9a8>)
 8007588:	4614      	mov	r4, r2
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	6859      	ldr	r1, [r3, #4]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 16);
 8007594:	4ab0      	ldr	r2, [pc, #704]	; (8007858 <loadMenuTexts+0x9ac>)
 8007596:	4bb1      	ldr	r3, [pc, #708]	; (800785c <loadMenuTexts+0x9b0>)
 8007598:	4614      	mov	r4, r2
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	6859      	ldr	r1, [r3, #4]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ucHataKoduText, ucHataKoduTextEN, 16);
 80075a4:	4aae      	ldr	r2, [pc, #696]	; (8007860 <loadMenuTexts+0x9b4>)
 80075a6:	4baf      	ldr	r3, [pc, #700]	; (8007864 <loadMenuTexts+0x9b8>)
 80075a8:	4614      	mov	r4, r2
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	6859      	ldr	r1, [r3, #4]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dortHataKoduText, dortHataKoduTextEN, 16);
 80075b4:	4aac      	ldr	r2, [pc, #688]	; (8007868 <loadMenuTexts+0x9bc>)
 80075b6:	4bad      	ldr	r3, [pc, #692]	; (800786c <loadMenuTexts+0x9c0>)
 80075b8:	4614      	mov	r4, r2
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	6859      	ldr	r1, [r3, #4]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(besHataKoduText, besHataKoduTextEN, 16);
 80075c4:	4aaa      	ldr	r2, [pc, #680]	; (8007870 <loadMenuTexts+0x9c4>)
 80075c6:	4bab      	ldr	r3, [pc, #684]	; (8007874 <loadMenuTexts+0x9c8>)
 80075c8:	4614      	mov	r4, r2
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	6859      	ldr	r1, [r3, #4]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altiHataKoduText, altiHataKoduTextEN, 16);
 80075d4:	4aa8      	ldr	r2, [pc, #672]	; (8007878 <loadMenuTexts+0x9cc>)
 80075d6:	4ba9      	ldr	r3, [pc, #676]	; (800787c <loadMenuTexts+0x9d0>)
 80075d8:	4614      	mov	r4, r2
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	6859      	ldr	r1, [r3, #4]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yediHataKoduText, yediHataKoduTextEN, 16);
 80075e4:	4aa6      	ldr	r2, [pc, #664]	; (8007880 <loadMenuTexts+0x9d4>)
 80075e6:	4ba7      	ldr	r3, [pc, #668]	; (8007884 <loadMenuTexts+0x9d8>)
 80075e8:	4614      	mov	r4, r2
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	6859      	ldr	r1, [r3, #4]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 16);
 80075f4:	4aa4      	ldr	r2, [pc, #656]	; (8007888 <loadMenuTexts+0x9dc>)
 80075f6:	4ba5      	ldr	r3, [pc, #660]	; (800788c <loadMenuTexts+0x9e0>)
 80075f8:	4614      	mov	r4, r2
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	6859      	ldr	r1, [r3, #4]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 16);
 8007604:	4aa2      	ldr	r2, [pc, #648]	; (8007890 <loadMenuTexts+0x9e4>)
 8007606:	4ba3      	ldr	r3, [pc, #652]	; (8007894 <loadMenuTexts+0x9e8>)
 8007608:	4614      	mov	r4, r2
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	6859      	ldr	r1, [r3, #4]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(onHataKoduText, onHataKoduTextEN, 16);
 8007614:	4aa0      	ldr	r2, [pc, #640]	; (8007898 <loadMenuTexts+0x9ec>)
 8007616:	4ba1      	ldr	r3, [pc, #644]	; (800789c <loadMenuTexts+0x9f0>)
 8007618:	4614      	mov	r4, r2
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	6859      	ldr	r1, [r3, #4]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(silmekIcinText, silmekIcinTextEN, 16);
 8007624:	4a9e      	ldr	r2, [pc, #632]	; (80078a0 <loadMenuTexts+0x9f4>)
 8007626:	4b9f      	ldr	r3, [pc, #636]	; (80078a4 <loadMenuTexts+0x9f8>)
 8007628:	4614      	mov	r4, r2
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	6859      	ldr	r1, [r3, #4]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSekliText, calismaSekliTextEN, 16);
 8007634:	4a9c      	ldr	r2, [pc, #624]	; (80078a8 <loadMenuTexts+0x9fc>)
 8007636:	4b9d      	ldr	r3, [pc, #628]	; (80078ac <loadMenuTexts+0xa00>)
 8007638:	4614      	mov	r4, r2
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	6859      	ldr	r1, [r3, #4]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 16);
 8007644:	4a9a      	ldr	r2, [pc, #616]	; (80078b0 <loadMenuTexts+0xa04>)
 8007646:	4b9b      	ldr	r3, [pc, #620]	; (80078b4 <loadMenuTexts+0xa08>)
 8007648:	4614      	mov	r4, r2
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	6859      	ldr	r1, [r3, #4]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 16);
 8007654:	4a98      	ldr	r2, [pc, #608]	; (80078b8 <loadMenuTexts+0xa0c>)
 8007656:	4b99      	ldr	r3, [pc, #612]	; (80078bc <loadMenuTexts+0xa10>)
 8007658:	4614      	mov	r4, r2
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	6859      	ldr	r1, [r3, #4]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basGonderText, basGonderTextEN, 16);
 8007664:	4a96      	ldr	r2, [pc, #600]	; (80078c0 <loadMenuTexts+0xa14>)
 8007666:	4b97      	ldr	r3, [pc, #604]	; (80078c4 <loadMenuTexts+0xa18>)
 8007668:	4614      	mov	r4, r2
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	6859      	ldr	r1, [r3, #4]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 16);
 8007674:	4a94      	ldr	r2, [pc, #592]	; (80078c8 <loadMenuTexts+0xa1c>)
 8007676:	4b95      	ldr	r3, [pc, #596]	; (80078cc <loadMenuTexts+0xa20>)
 8007678:	4614      	mov	r4, r2
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	6859      	ldr	r1, [r3, #4]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(pasifText, pasifTextEN, 16);
 8007684:	4a92      	ldr	r2, [pc, #584]	; (80078d0 <loadMenuTexts+0xa24>)
 8007686:	4b93      	ldr	r3, [pc, #588]	; (80078d4 <loadMenuTexts+0xa28>)
 8007688:	4614      	mov	r4, r2
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	6859      	ldr	r1, [r3, #4]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(aktifText, aktifTextEN, 16);
 8007694:	4a90      	ldr	r2, [pc, #576]	; (80078d8 <loadMenuTexts+0xa2c>)
 8007696:	4b91      	ldr	r3, [pc, #580]	; (80078dc <loadMenuTexts+0xa30>)
 8007698:	4614      	mov	r4, r2
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	6859      	ldr	r1, [r3, #4]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 16);
 80076a4:	4a8e      	ldr	r2, [pc, #568]	; (80078e0 <loadMenuTexts+0xa34>)
 80076a6:	4b8f      	ldr	r3, [pc, #572]	; (80078e4 <loadMenuTexts+0xa38>)
 80076a8:	4614      	mov	r4, r2
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	6859      	ldr	r1, [r3, #4]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altLimitText, altLimitTextEN, 16);
 80076b4:	4a8c      	ldr	r2, [pc, #560]	; (80078e8 <loadMenuTexts+0xa3c>)
 80076b6:	4b8d      	ldr	r3, [pc, #564]	; (80078ec <loadMenuTexts+0xa40>)
 80076b8:	4614      	mov	r4, r2
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	6859      	ldr	r1, [r3, #4]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basincSalteriText, basincSalteriTextEN, 16);
 80076c4:	4a8a      	ldr	r2, [pc, #552]	; (80078f0 <loadMenuTexts+0xa44>)
 80076c6:	4b8b      	ldr	r3, [pc, #556]	; (80078f4 <loadMenuTexts+0xa48>)
 80076c8:	4614      	mov	r4, r2
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	6859      	ldr	r1, [r3, #4]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 16);
 80076d4:	4a88      	ldr	r2, [pc, #544]	; (80078f8 <loadMenuTexts+0xa4c>)
 80076d6:	4b89      	ldr	r3, [pc, #548]	; (80078fc <loadMenuTexts+0xa50>)
 80076d8:	4614      	mov	r4, r2
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	6859      	ldr	r1, [r3, #4]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 16);
 80076e4:	4a86      	ldr	r2, [pc, #536]	; (8007900 <loadMenuTexts+0xa54>)
 80076e6:	4b87      	ldr	r3, [pc, #540]	; (8007904 <loadMenuTexts+0xa58>)
 80076e8:	4614      	mov	r4, r2
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 16);
 80076f4:	4a84      	ldr	r2, [pc, #528]	; (8007908 <loadMenuTexts+0xa5c>)
 80076f6:	4b85      	ldr	r3, [pc, #532]	; (800790c <loadMenuTexts+0xa60>)
 80076f8:	4614      	mov	r4, r2
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	6859      	ldr	r1, [r3, #4]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 16);
 8007704:	4a82      	ldr	r2, [pc, #520]	; (8007910 <loadMenuTexts+0xa64>)
 8007706:	4b83      	ldr	r3, [pc, #524]	; (8007914 <loadMenuTexts+0xa68>)
 8007708:	4614      	mov	r4, r2
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 16);
 8007714:	4a80      	ldr	r2, [pc, #512]	; (8007918 <loadMenuTexts+0xa6c>)
 8007716:	4b81      	ldr	r3, [pc, #516]	; (800791c <loadMenuTexts+0xa70>)
 8007718:	4614      	mov	r4, r2
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	6859      	ldr	r1, [r3, #4]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 16);
 8007724:	4a7e      	ldr	r2, [pc, #504]	; (8007920 <loadMenuTexts+0xa74>)
 8007726:	4b7f      	ldr	r3, [pc, #508]	; (8007924 <loadMenuTexts+0xa78>)
 8007728:	4614      	mov	r4, r2
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katButonuEXTText, katButonuEXTTextEN, 16);
 8007734:	4a7c      	ldr	r2, [pc, #496]	; (8007928 <loadMenuTexts+0xa7c>)
 8007736:	4b7d      	ldr	r3, [pc, #500]	; (800792c <loadMenuTexts+0xa80>)
 8007738:	4614      	mov	r4, r2
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 16);
 8007744:	4a7a      	ldr	r2, [pc, #488]	; (8007930 <loadMenuTexts+0xa84>)
 8007746:	4b7b      	ldr	r3, [pc, #492]	; (8007934 <loadMenuTexts+0xa88>)
 8007748:	4614      	mov	r4, r2
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	6859      	ldr	r1, [r3, #4]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(butonKontrolluText, butonKontrolluTextEN, 16);
 8007754:	4a78      	ldr	r2, [pc, #480]	; (8007938 <loadMenuTexts+0xa8c>)
 8007756:	4b79      	ldr	r3, [pc, #484]	; (800793c <loadMenuTexts+0xa90>)
 8007758:	4614      	mov	r4, r2
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	6859      	ldr	r1, [r3, #4]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 16);
 8007764:	4a76      	ldr	r2, [pc, #472]	; (8007940 <loadMenuTexts+0xa94>)
 8007766:	4b77      	ldr	r3, [pc, #476]	; (8007944 <loadMenuTexts+0xa98>)
 8007768:	4614      	mov	r4, r2
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	6859      	ldr	r1, [r3, #4]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kacSaniyeText, kacSaniyeTextEN, 16);
 8007774:	4a74      	ldr	r2, [pc, #464]	; (8007948 <loadMenuTexts+0xa9c>)
 8007776:	4b75      	ldr	r3, [pc, #468]	; (800794c <loadMenuTexts+0xaa0>)
 8007778:	4614      	mov	r4, r2
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	6859      	ldr	r1, [r3, #4]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 16);
 8007784:	4a72      	ldr	r2, [pc, #456]	; (8007950 <loadMenuTexts+0xaa4>)
 8007786:	4b73      	ldr	r3, [pc, #460]	; (8007954 <loadMenuTexts+0xaa8>)
 8007788:	4614      	mov	r4, r2
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	6859      	ldr	r1, [r3, #4]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 16);
 8007794:	4a70      	ldr	r2, [pc, #448]	; (8007958 <loadMenuTexts+0xaac>)
 8007796:	4b71      	ldr	r3, [pc, #452]	; (800795c <loadMenuTexts+0xab0>)
 8007798:	4614      	mov	r4, r2
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	6859      	ldr	r1, [r3, #4]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 16);
 80077a4:	4a6e      	ldr	r2, [pc, #440]	; (8007960 <loadMenuTexts+0xab4>)
 80077a6:	4b6f      	ldr	r3, [pc, #444]	; (8007964 <loadMenuTexts+0xab8>)
 80077a8:	4614      	mov	r4, r2
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 16);
 80077b4:	4a6c      	ldr	r2, [pc, #432]	; (8007968 <loadMenuTexts+0xabc>)
 80077b6:	4b6d      	ldr	r3, [pc, #436]	; (800796c <loadMenuTexts+0xac0>)
 80077b8:	4614      	mov	r4, r2
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	6859      	ldr	r1, [r3, #4]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 16);
 80077c4:	4a6a      	ldr	r2, [pc, #424]	; (8007970 <loadMenuTexts+0xac4>)
 80077c6:	4b6b      	ldr	r3, [pc, #428]	; (8007974 <loadMenuTexts+0xac8>)
 80077c8:	4614      	mov	r4, r2
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 16);
 80077d4:	4a68      	ldr	r2, [pc, #416]	; (8007978 <loadMenuTexts+0xacc>)
 80077d6:	4b69      	ldr	r3, [pc, #420]	; (800797c <loadMenuTexts+0xad0>)
 80077d8:	4614      	mov	r4, r2
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	6859      	ldr	r1, [r3, #4]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 16);
 80077e4:	4a66      	ldr	r2, [pc, #408]	; (8007980 <loadMenuTexts+0xad4>)
 80077e6:	4b67      	ldr	r3, [pc, #412]	; (8007984 <loadMenuTexts+0xad8>)
 80077e8:	4614      	mov	r4, r2
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	6859      	ldr	r1, [r3, #4]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 16);
 80077f4:	4a64      	ldr	r2, [pc, #400]	; (8007988 <loadMenuTexts+0xadc>)
 80077f6:	4b65      	ldr	r3, [pc, #404]	; (800798c <loadMenuTexts+0xae0>)
 80077f8:	4614      	mov	r4, r2
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	6859      	ldr	r1, [r3, #4]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 16);
 8007804:	4a62      	ldr	r2, [pc, #392]	; (8007990 <loadMenuTexts+0xae4>)
 8007806:	4b63      	ldr	r3, [pc, #396]	; (8007994 <loadMenuTexts+0xae8>)
 8007808:	4614      	mov	r4, r2
 800780a:	6818      	ldr	r0, [r3, #0]
 800780c:	6859      	ldr	r1, [r3, #4]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 16);
 8007814:	4a60      	ldr	r2, [pc, #384]	; (8007998 <loadMenuTexts+0xaec>)
 8007816:	4b61      	ldr	r3, [pc, #388]	; (800799c <loadMenuTexts+0xaf0>)
 8007818:	4614      	mov	r4, r2
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	6859      	ldr	r1, [r3, #4]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAktifText, devirmeAktifTextEN, 16);
 8007824:	4a5e      	ldr	r2, [pc, #376]	; (80079a0 <loadMenuTexts+0xaf4>)
 8007826:	4b5f      	ldr	r3, [pc, #380]	; (80079a4 <loadMenuTexts+0xaf8>)
 8007828:	4614      	mov	r4, r2
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	6859      	ldr	r1, [r3, #4]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007834:	e0b8      	b.n	80079a8 <loadMenuTexts+0xafc>
 8007836:	bf00      	nop
 8007838:	20000c4c 	.word	0x20000c4c
 800783c:	20000540 	.word	0x20000540
 8007840:	20000c5c 	.word	0x20000c5c
 8007844:	20000550 	.word	0x20000550
 8007848:	20000c6c 	.word	0x20000c6c
 800784c:	20000560 	.word	0x20000560
 8007850:	20000c7c 	.word	0x20000c7c
 8007854:	20000570 	.word	0x20000570
 8007858:	20000c8c 	.word	0x20000c8c
 800785c:	20000580 	.word	0x20000580
 8007860:	20000c9c 	.word	0x20000c9c
 8007864:	20000590 	.word	0x20000590
 8007868:	20000cac 	.word	0x20000cac
 800786c:	200005a0 	.word	0x200005a0
 8007870:	20000cbc 	.word	0x20000cbc
 8007874:	200005b0 	.word	0x200005b0
 8007878:	20000ccc 	.word	0x20000ccc
 800787c:	200005c0 	.word	0x200005c0
 8007880:	20000cdc 	.word	0x20000cdc
 8007884:	200005d0 	.word	0x200005d0
 8007888:	20000cec 	.word	0x20000cec
 800788c:	200005e0 	.word	0x200005e0
 8007890:	20000cfc 	.word	0x20000cfc
 8007894:	200005f0 	.word	0x200005f0
 8007898:	20000d0c 	.word	0x20000d0c
 800789c:	20000600 	.word	0x20000600
 80078a0:	20000d1c 	.word	0x20000d1c
 80078a4:	20000610 	.word	0x20000610
 80078a8:	20000d2c 	.word	0x20000d2c
 80078ac:	20000620 	.word	0x20000620
 80078b0:	20000d3c 	.word	0x20000d3c
 80078b4:	20000630 	.word	0x20000630
 80078b8:	20000d4c 	.word	0x20000d4c
 80078bc:	20000640 	.word	0x20000640
 80078c0:	20000d5c 	.word	0x20000d5c
 80078c4:	20000650 	.word	0x20000650
 80078c8:	20000d6c 	.word	0x20000d6c
 80078cc:	20000660 	.word	0x20000660
 80078d0:	20000d7c 	.word	0x20000d7c
 80078d4:	20000670 	.word	0x20000670
 80078d8:	20000d8c 	.word	0x20000d8c
 80078dc:	20000680 	.word	0x20000680
 80078e0:	20000d9c 	.word	0x20000d9c
 80078e4:	20000690 	.word	0x20000690
 80078e8:	20000dac 	.word	0x20000dac
 80078ec:	200006a0 	.word	0x200006a0
 80078f0:	20000dbc 	.word	0x20000dbc
 80078f4:	200006b0 	.word	0x200006b0
 80078f8:	20000dcc 	.word	0x20000dcc
 80078fc:	200006c0 	.word	0x200006c0
 8007900:	20000ddc 	.word	0x20000ddc
 8007904:	200006d0 	.word	0x200006d0
 8007908:	20000dec 	.word	0x20000dec
 800790c:	200006e0 	.word	0x200006e0
 8007910:	20000dfc 	.word	0x20000dfc
 8007914:	200006f0 	.word	0x200006f0
 8007918:	20000e0c 	.word	0x20000e0c
 800791c:	20000700 	.word	0x20000700
 8007920:	20000e1c 	.word	0x20000e1c
 8007924:	20000710 	.word	0x20000710
 8007928:	20000e2c 	.word	0x20000e2c
 800792c:	20000720 	.word	0x20000720
 8007930:	20000e3c 	.word	0x20000e3c
 8007934:	20000730 	.word	0x20000730
 8007938:	20000e4c 	.word	0x20000e4c
 800793c:	20000740 	.word	0x20000740
 8007940:	20000e5c 	.word	0x20000e5c
 8007944:	20000750 	.word	0x20000750
 8007948:	20000e6c 	.word	0x20000e6c
 800794c:	20000760 	.word	0x20000760
 8007950:	20000e7c 	.word	0x20000e7c
 8007954:	20000770 	.word	0x20000770
 8007958:	20000e8c 	.word	0x20000e8c
 800795c:	20000780 	.word	0x20000780
 8007960:	20000e9c 	.word	0x20000e9c
 8007964:	20000790 	.word	0x20000790
 8007968:	20000eac 	.word	0x20000eac
 800796c:	200007a0 	.word	0x200007a0
 8007970:	20000ebc 	.word	0x20000ebc
 8007974:	200007b0 	.word	0x200007b0
 8007978:	20000ecc 	.word	0x20000ecc
 800797c:	200007c0 	.word	0x200007c0
 8007980:	20000edc 	.word	0x20000edc
 8007984:	200007d0 	.word	0x200007d0
 8007988:	20000eec 	.word	0x20000eec
 800798c:	200007e0 	.word	0x200007e0
 8007990:	20000efc 	.word	0x20000efc
 8007994:	200007f0 	.word	0x200007f0
 8007998:	20000f0c 	.word	0x20000f0c
 800799c:	20000800 	.word	0x20000800
 80079a0:	20000f1c 	.word	0x20000f1c
 80079a4:	20000810 	.word	0x20000810
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 16);
 80079a8:	4a62      	ldr	r2, [pc, #392]	; (8007b34 <loadMenuTexts+0xc88>)
 80079aa:	4b63      	ldr	r3, [pc, #396]	; (8007b38 <loadMenuTexts+0xc8c>)
 80079ac:	4614      	mov	r4, r2
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	6859      	ldr	r1, [r3, #4]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariText, devirmeYukariTextEN, 16);
 80079b8:	4a60      	ldr	r2, [pc, #384]	; (8007b3c <loadMenuTexts+0xc90>)
 80079ba:	4b61      	ldr	r3, [pc, #388]	; (8007b40 <loadMenuTexts+0xc94>)
 80079bc:	4614      	mov	r4, r2
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	6859      	ldr	r1, [r3, #4]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 16);
 80079c8:	4a5e      	ldr	r2, [pc, #376]	; (8007b44 <loadMenuTexts+0xc98>)
 80079ca:	4b5f      	ldr	r3, [pc, #380]	; (8007b48 <loadMenuTexts+0xc9c>)
 80079cc:	4614      	mov	r4, r2
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	6859      	ldr	r1, [r3, #4]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 16);
 80079d8:	4a5c      	ldr	r2, [pc, #368]	; (8007b4c <loadMenuTexts+0xca0>)
 80079da:	4b5d      	ldr	r3, [pc, #372]	; (8007b50 <loadMenuTexts+0xca4>)
 80079dc:	4614      	mov	r4, r2
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	6859      	ldr	r1, [r3, #4]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 16);
 80079e8:	4a5a      	ldr	r2, [pc, #360]	; (8007b54 <loadMenuTexts+0xca8>)
 80079ea:	4b5b      	ldr	r3, [pc, #364]	; (8007b58 <loadMenuTexts+0xcac>)
 80079ec:	4614      	mov	r4, r2
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	6859      	ldr	r1, [r3, #4]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 16);
 80079f8:	4a58      	ldr	r2, [pc, #352]	; (8007b5c <loadMenuTexts+0xcb0>)
 80079fa:	4b59      	ldr	r3, [pc, #356]	; (8007b60 <loadMenuTexts+0xcb4>)
 80079fc:	4614      	mov	r4, r2
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	6859      	ldr	r1, [r3, #4]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 16);
 8007a08:	4a56      	ldr	r2, [pc, #344]	; (8007b64 <loadMenuTexts+0xcb8>)
 8007a0a:	4b57      	ldr	r3, [pc, #348]	; (8007b68 <loadMenuTexts+0xcbc>)
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	6859      	ldr	r1, [r3, #4]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tekTesirText, tekTesirTextEN, 16);
 8007a18:	4a54      	ldr	r2, [pc, #336]	; (8007b6c <loadMenuTexts+0xcc0>)
 8007a1a:	4b55      	ldr	r3, [pc, #340]	; (8007b70 <loadMenuTexts+0xcc4>)
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	6859      	ldr	r1, [r3, #4]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ciftTesirText, ciftTesirTextEN, 16);
 8007a28:	4a52      	ldr	r2, [pc, #328]	; (8007b74 <loadMenuTexts+0xcc8>)
 8007a2a:	4b53      	ldr	r3, [pc, #332]	; (8007b78 <loadMenuTexts+0xccc>)
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	6859      	ldr	r1, [r3, #4]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 16);
 8007a38:	4a50      	ldr	r2, [pc, #320]	; (8007b7c <loadMenuTexts+0xcd0>)
 8007a3a:	4b51      	ldr	r3, [pc, #324]	; (8007b80 <loadMenuTexts+0xcd4>)
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	6859      	ldr	r1, [r3, #4]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariValfSureText, yukariValfSureTextEN, 16);
 8007a48:	4a4e      	ldr	r2, [pc, #312]	; (8007b84 <loadMenuTexts+0xcd8>)
 8007a4a:	4b4f      	ldr	r3, [pc, #316]	; (8007b88 <loadMenuTexts+0xcdc>)
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	6859      	ldr	r1, [r3, #4]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(asagiValfSureText, asagiValfSureTextEN, 16);
 8007a58:	4a4c      	ldr	r2, [pc, #304]	; (8007b8c <loadMenuTexts+0xce0>)
 8007a5a:	4b4d      	ldr	r3, [pc, #308]	; (8007b90 <loadMenuTexts+0xce4>)
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	6859      	ldr	r1, [r3, #4]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 16);
 8007a68:	4a4a      	ldr	r2, [pc, #296]	; (8007b94 <loadMenuTexts+0xce8>)
 8007a6a:	4b4b      	ldr	r3, [pc, #300]	; (8007b98 <loadMenuTexts+0xcec>)
 8007a6c:	4614      	mov	r4, r2
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	6859      	ldr	r1, [r3, #4]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ileriValfSureText, ileriValfSureTextEN, 16);
 8007a78:	4a48      	ldr	r2, [pc, #288]	; (8007b9c <loadMenuTexts+0xcf0>)
 8007a7a:	4b49      	ldr	r3, [pc, #292]	; (8007ba0 <loadMenuTexts+0xcf4>)
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	6859      	ldr	r1, [r3, #4]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 16);
 8007a88:	4a46      	ldr	r2, [pc, #280]	; (8007ba4 <loadMenuTexts+0xcf8>)
 8007a8a:	4b47      	ldr	r3, [pc, #284]	; (8007ba8 <loadMenuTexts+0xcfc>)
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	6859      	ldr	r1, [r3, #4]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(geriValfSureText, geriValfSureTextEN, 16);
 8007a98:	4a44      	ldr	r2, [pc, #272]	; (8007bac <loadMenuTexts+0xd00>)
 8007a9a:	4b45      	ldr	r3, [pc, #276]	; (8007bb0 <loadMenuTexts+0xd04>)
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	6859      	ldr	r1, [r3, #4]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSuresiText, calismaSuresiTextEN, 16);
 8007aa8:	4a42      	ldr	r2, [pc, #264]	; (8007bb4 <loadMenuTexts+0xd08>)
 8007aaa:	4b43      	ldr	r3, [pc, #268]	; (8007bb8 <loadMenuTexts+0xd0c>)
 8007aac:	4614      	mov	r4, r2
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSayisiText, calismaSayisiTextEN, 16);
 8007ab8:	4a40      	ldr	r2, [pc, #256]	; (8007bbc <loadMenuTexts+0xd10>)
 8007aba:	4b41      	ldr	r3, [pc, #260]	; (8007bc0 <loadMenuTexts+0xd14>)
 8007abc:	4614      	mov	r4, r2
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	6859      	ldr	r1, [r3, #4]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 16);
 8007ac8:	4a3e      	ldr	r2, [pc, #248]	; (8007bc4 <loadMenuTexts+0xd18>)
 8007aca:	4b3f      	ldr	r3, [pc, #252]	; (8007bc8 <loadMenuTexts+0xd1c>)
 8007acc:	4614      	mov	r4, r2
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	6859      	ldr	r1, [r3, #4]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dilSecimText, dilSecimTextEN, 16);
 8007ad8:	4a3c      	ldr	r2, [pc, #240]	; (8007bcc <loadMenuTexts+0xd20>)
 8007ada:	4b3d      	ldr	r3, [pc, #244]	; (8007bd0 <loadMenuTexts+0xd24>)
 8007adc:	4614      	mov	r4, r2
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	6859      	ldr	r1, [r3, #4]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(secilenDilText, secilenDilTextEN, 16);
 8007ae8:	4a3a      	ldr	r2, [pc, #232]	; (8007bd4 <loadMenuTexts+0xd28>)
 8007aea:	4b3b      	ldr	r3, [pc, #236]	; (8007bd8 <loadMenuTexts+0xd2c>)
 8007aec:	4614      	mov	r4, r2
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	6859      	ldr	r1, [r3, #4]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(menudenCikisText, menudenCikisTextEN, 16);
 8007af8:	4a38      	ldr	r2, [pc, #224]	; (8007bdc <loadMenuTexts+0xd30>)
 8007afa:	4b39      	ldr	r3, [pc, #228]	; (8007be0 <loadMenuTexts+0xd34>)
 8007afc:	4614      	mov	r4, r2
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	6859      	ldr	r1, [r3, #4]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enteraBasinizText, enteraBasinizTextEN, 16);
 8007b08:	4a36      	ldr	r2, [pc, #216]	; (8007be4 <loadMenuTexts+0xd38>)
 8007b0a:	4b37      	ldr	r3, [pc, #220]	; (8007be8 <loadMenuTexts+0xd3c>)
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	6859      	ldr	r1, [r3, #4]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKoduText, hataKoduTextEN, 16);
 8007b18:	4a34      	ldr	r2, [pc, #208]	; (8007bec <loadMenuTexts+0xd40>)
 8007b1a:	4b35      	ldr	r3, [pc, #212]	; (8007bf0 <loadMenuTexts+0xd44>)
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	6859      	ldr	r1, [r3, #4]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc90      	pop	{r4, r7}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000f2c 	.word	0x20000f2c
 8007b38:	20000820 	.word	0x20000820
 8007b3c:	20000f3c 	.word	0x20000f3c
 8007b40:	20000830 	.word	0x20000830
 8007b44:	20000f4c 	.word	0x20000f4c
 8007b48:	20000840 	.word	0x20000840
 8007b4c:	20000f5c 	.word	0x20000f5c
 8007b50:	20000850 	.word	0x20000850
 8007b54:	20000f6c 	.word	0x20000f6c
 8007b58:	20000860 	.word	0x20000860
 8007b5c:	20000f7c 	.word	0x20000f7c
 8007b60:	20000870 	.word	0x20000870
 8007b64:	20000f8c 	.word	0x20000f8c
 8007b68:	20000880 	.word	0x20000880
 8007b6c:	20000f9c 	.word	0x20000f9c
 8007b70:	20000890 	.word	0x20000890
 8007b74:	20000fac 	.word	0x20000fac
 8007b78:	200008a0 	.word	0x200008a0
 8007b7c:	20000fbc 	.word	0x20000fbc
 8007b80:	200008b0 	.word	0x200008b0
 8007b84:	20000fcc 	.word	0x20000fcc
 8007b88:	200008c0 	.word	0x200008c0
 8007b8c:	20000fdc 	.word	0x20000fdc
 8007b90:	200008d0 	.word	0x200008d0
 8007b94:	20000fec 	.word	0x20000fec
 8007b98:	200008e0 	.word	0x200008e0
 8007b9c:	20000ffc 	.word	0x20000ffc
 8007ba0:	200008f0 	.word	0x200008f0
 8007ba4:	2000100c 	.word	0x2000100c
 8007ba8:	20000900 	.word	0x20000900
 8007bac:	2000101c 	.word	0x2000101c
 8007bb0:	20000910 	.word	0x20000910
 8007bb4:	2000102c 	.word	0x2000102c
 8007bb8:	20000920 	.word	0x20000920
 8007bbc:	2000103c 	.word	0x2000103c
 8007bc0:	20000930 	.word	0x20000930
 8007bc4:	2000104c 	.word	0x2000104c
 8007bc8:	20000940 	.word	0x20000940
 8007bcc:	2000105c 	.word	0x2000105c
 8007bd0:	20000950 	.word	0x20000950
 8007bd4:	2000106c 	.word	0x2000106c
 8007bd8:	20000960 	.word	0x20000960
 8007bdc:	2000107c 	.word	0x2000107c
 8007be0:	20000970 	.word	0x20000970
 8007be4:	2000108c 	.word	0x2000108c
 8007be8:	20000980 	.word	0x20000980
 8007bec:	2000109c 	.word	0x2000109c
 8007bf0:	20000990 	.word	0x20000990

08007bf4 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8007bfa:	2001      	movs	r0, #1
 8007bfc:	f001 f8ca 	bl	8008d94 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007c00:	220c      	movs	r2, #12
 8007c02:	2100      	movs	r1, #0
 8007c04:	48a3      	ldr	r0, [pc, #652]	; (8007e94 <takeMachineID+0x2a0>)
 8007c06:	f005 fd65 	bl	800d6d4 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007c0a:	2305      	movs	r3, #5
 8007c0c:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007c0e:	2303      	movs	r3, #3
 8007c10:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007c16:	4ba0      	ldr	r3, [pc, #640]	; (8007e98 <takeMachineID+0x2a4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f7f9 fa12 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007c24:	2108      	movs	r1, #8
 8007c26:	489d      	ldr	r0, [pc, #628]	; (8007e9c <takeMachineID+0x2a8>)
 8007c28:	f002 fb7c 	bl	800a324 <HAL_GPIO_ReadPin>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d139      	bne.n	8007ca6 <takeMachineID+0xb2>
        	lcd_cursor(0);
 8007c32:	2000      	movs	r0, #0
 8007c34:	f001 f8ae 	bl	8008d94 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007c38:	f000 fe90 	bl	800895c <checkEEPROM4ID>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d01f      	beq.n	8007c82 <takeMachineID+0x8e>
        		lcd_clear();
 8007c42:	f001 f875 	bl	8008d30 <lcd_clear>
        		if(dilSecim == 1) {
 8007c46:	4b96      	ldr	r3, [pc, #600]	; (8007ea0 <takeMachineID+0x2ac>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10a      	bne.n	8007c64 <takeMachineID+0x70>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8007c4e:	4a95      	ldr	r2, [pc, #596]	; (8007ea4 <takeMachineID+0x2b0>)
 8007c50:	2101      	movs	r1, #1
 8007c52:	2001      	movs	r0, #1
 8007c54:	f001 f840 	bl	8008cd8 <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8007c58:	4a93      	ldr	r2, [pc, #588]	; (8007ea8 <takeMachineID+0x2b4>)
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	2002      	movs	r0, #2
 8007c5e:	f001 f83b 	bl	8008cd8 <lcd_print>
 8007c62:	e009      	b.n	8007c78 <takeMachineID+0x84>
        		} else {
        			lcd_print(1, 1, " ID MUST BE  12 ");
 8007c64:	4a91      	ldr	r2, [pc, #580]	; (8007eac <takeMachineID+0x2b8>)
 8007c66:	2101      	movs	r1, #1
 8007c68:	2001      	movs	r0, #1
 8007c6a:	f001 f835 	bl	8008cd8 <lcd_print>
        			lcd_print(2, 1, "   CHARACTERS   ");
 8007c6e:	4a90      	ldr	r2, [pc, #576]	; (8007eb0 <takeMachineID+0x2bc>)
 8007c70:	2101      	movs	r1, #1
 8007c72:	2002      	movs	r0, #2
 8007c74:	f001 f830 	bl	8008cd8 <lcd_print>
        		}
        		HAL_Delay(1250);
 8007c78:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007c7c:	f001 fd82 	bl	8009784 <HAL_Delay>

        		goto mainSection;
 8007c80:	e7bb      	b.n	8007bfa <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007c82:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	236e      	movs	r3, #110	; 0x6e
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	4b89      	ldr	r3, [pc, #548]	; (8007eb4 <takeMachineID+0x2c0>)
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	236e      	movs	r3, #110	; 0x6e
 8007c92:	2200      	movs	r2, #0
 8007c94:	21a0      	movs	r1, #160	; 0xa0
 8007c96:	4888      	ldr	r0, [pc, #544]	; (8007eb8 <takeMachineID+0x2c4>)
 8007c98:	f002 fdfe 	bl	800a898 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ca0:	f001 fd70 	bl	8009784 <HAL_Delay>

            	break;
 8007ca4:	e138      	b.n	8007f18 <takeMachineID+0x324>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	487c      	ldr	r0, [pc, #496]	; (8007e9c <takeMachineID+0x2a8>)
 8007caa:	f002 fb3b 	bl	800a324 <HAL_GPIO_ReadPin>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d111      	bne.n	8007cd8 <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2b07      	cmp	r3, #7
 8007cb8:	d102      	bne.n	8007cc0 <takeMachineID+0xcc>
        		cursorPosition = 10;
 8007cba:	230a      	movs	r3, #10
 8007cbc:	60bb      	str	r3, [r7, #8]
 8007cbe:	e008      	b.n	8007cd2 <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b0e      	cmp	r3, #14
 8007cc4:	d102      	bne.n	8007ccc <takeMachineID+0xd8>
                cursorPosition = 3;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	60bb      	str	r3, [r7, #8]
 8007cca:	e002      	b.n	8007cd2 <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007cd2:	2096      	movs	r0, #150	; 0x96
 8007cd4:	f001 fd56 	bl	8009784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007cd8:	2108      	movs	r1, #8
 8007cda:	4878      	ldr	r0, [pc, #480]	; (8007ebc <takeMachineID+0x2c8>)
 8007cdc:	f002 fb22 	bl	800a324 <HAL_GPIO_ReadPin>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d111      	bne.n	8007d0a <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d102      	bne.n	8007cf2 <takeMachineID+0xfe>
                cursorPosition = 14;
 8007cec:	230e      	movs	r3, #14
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	e008      	b.n	8007d04 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b0a      	cmp	r3, #10
 8007cf6:	d102      	bne.n	8007cfe <takeMachineID+0x10a>
            	cursorPosition = 7;
 8007cf8:	2307      	movs	r3, #7
 8007cfa:	60bb      	str	r3, [r7, #8]
 8007cfc:	e002      	b.n	8007d04 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007d04:	20fa      	movs	r0, #250	; 0xfa
 8007d06:	f001 fd3d 	bl	8009784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007d0a:	2102      	movs	r1, #2
 8007d0c:	4863      	ldr	r0, [pc, #396]	; (8007e9c <takeMachineID+0x2a8>)
 8007d0e:	f002 fb09 	bl	800a324 <HAL_GPIO_ReadPin>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	f040 80a1 	bne.w	8007e5c <takeMachineID+0x268>
        	if(cursorPosition == 3) {
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d10a      	bne.n	8007d36 <takeMachineID+0x142>
        		machineID[arrayPos] = '0';
 8007d20:	4a5c      	ldr	r2, [pc, #368]	; (8007e94 <takeMachineID+0x2a0>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	2230      	movs	r2, #48	; 0x30
 8007d28:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007d2a:	4a62      	ldr	r2, [pc, #392]	; (8007eb4 <takeMachineID+0x2c0>)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	4413      	add	r3, r2
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e07c      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 4) {
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d10a      	bne.n	8007d52 <takeMachineID+0x15e>
        		machineID[arrayPos] = '1';
 8007d3c:	4a55      	ldr	r2, [pc, #340]	; (8007e94 <takeMachineID+0x2a0>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	2231      	movs	r2, #49	; 0x31
 8007d44:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007d46:	4a5b      	ldr	r2, [pc, #364]	; (8007eb4 <takeMachineID+0x2c0>)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	701a      	strb	r2, [r3, #0]
 8007d50:	e06e      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 5) {
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d10a      	bne.n	8007d6e <takeMachineID+0x17a>
        		machineID[arrayPos] = '2';
 8007d58:	4a4e      	ldr	r2, [pc, #312]	; (8007e94 <takeMachineID+0x2a0>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	2232      	movs	r2, #50	; 0x32
 8007d60:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007d62:	4a54      	ldr	r2, [pc, #336]	; (8007eb4 <takeMachineID+0x2c0>)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	4413      	add	r3, r2
 8007d68:	2202      	movs	r2, #2
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	e060      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 6) {
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b06      	cmp	r3, #6
 8007d72:	d10a      	bne.n	8007d8a <takeMachineID+0x196>
        		machineID[arrayPos] = '3';
 8007d74:	4a47      	ldr	r2, [pc, #284]	; (8007e94 <takeMachineID+0x2a0>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4413      	add	r3, r2
 8007d7a:	2233      	movs	r2, #51	; 0x33
 8007d7c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007d7e:	4a4d      	ldr	r2, [pc, #308]	; (8007eb4 <takeMachineID+0x2c0>)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	4413      	add	r3, r2
 8007d84:	2203      	movs	r2, #3
 8007d86:	701a      	strb	r2, [r3, #0]
 8007d88:	e052      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 7) {
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b07      	cmp	r3, #7
 8007d8e:	d10a      	bne.n	8007da6 <takeMachineID+0x1b2>
        		machineID[arrayPos] = '4';
 8007d90:	4a40      	ldr	r2, [pc, #256]	; (8007e94 <takeMachineID+0x2a0>)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	2234      	movs	r2, #52	; 0x34
 8007d98:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007d9a:	4a46      	ldr	r2, [pc, #280]	; (8007eb4 <takeMachineID+0x2c0>)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	4413      	add	r3, r2
 8007da0:	2204      	movs	r2, #4
 8007da2:	701a      	strb	r2, [r3, #0]
 8007da4:	e044      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 10) {
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b0a      	cmp	r3, #10
 8007daa:	d10a      	bne.n	8007dc2 <takeMachineID+0x1ce>
        		machineID[arrayPos] = '5';
 8007dac:	4a39      	ldr	r2, [pc, #228]	; (8007e94 <takeMachineID+0x2a0>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4413      	add	r3, r2
 8007db2:	2235      	movs	r2, #53	; 0x35
 8007db4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007db6:	4a3f      	ldr	r2, [pc, #252]	; (8007eb4 <takeMachineID+0x2c0>)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	4413      	add	r3, r2
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	e036      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 11) {
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b0b      	cmp	r3, #11
 8007dc6:	d10a      	bne.n	8007dde <takeMachineID+0x1ea>
        		machineID[arrayPos] = '6';
 8007dc8:	4a32      	ldr	r2, [pc, #200]	; (8007e94 <takeMachineID+0x2a0>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	2236      	movs	r2, #54	; 0x36
 8007dd0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007dd2:	4a38      	ldr	r2, [pc, #224]	; (8007eb4 <takeMachineID+0x2c0>)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	2206      	movs	r2, #6
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	e028      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 12) {
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	d10a      	bne.n	8007dfa <takeMachineID+0x206>
        		machineID[arrayPos] = '7';
 8007de4:	4a2b      	ldr	r2, [pc, #172]	; (8007e94 <takeMachineID+0x2a0>)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4413      	add	r3, r2
 8007dea:	2237      	movs	r2, #55	; 0x37
 8007dec:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007dee:	4a31      	ldr	r2, [pc, #196]	; (8007eb4 <takeMachineID+0x2c0>)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	4413      	add	r3, r2
 8007df4:	2207      	movs	r2, #7
 8007df6:	701a      	strb	r2, [r3, #0]
 8007df8:	e01a      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 13) {
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b0d      	cmp	r3, #13
 8007dfe:	d10a      	bne.n	8007e16 <takeMachineID+0x222>
        		machineID[arrayPos] = '8';
 8007e00:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <takeMachineID+0x2a0>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4413      	add	r3, r2
 8007e06:	2238      	movs	r2, #56	; 0x38
 8007e08:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007e0a:	4a2a      	ldr	r2, [pc, #168]	; (8007eb4 <takeMachineID+0x2c0>)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	4413      	add	r3, r2
 8007e10:	2208      	movs	r2, #8
 8007e12:	701a      	strb	r2, [r3, #0]
 8007e14:	e00c      	b.n	8007e30 <takeMachineID+0x23c>
        	} else if(cursorPosition == 14) {
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b0e      	cmp	r3, #14
 8007e1a:	d109      	bne.n	8007e30 <takeMachineID+0x23c>
        		machineID[arrayPos] = '9';
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <takeMachineID+0x2a0>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4413      	add	r3, r2
 8007e22:	2239      	movs	r2, #57	; 0x39
 8007e24:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007e26:	4a23      	ldr	r2, [pc, #140]	; (8007eb4 <takeMachineID+0x2c0>)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	2209      	movs	r2, #9
 8007e2e:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	b2d9      	uxtb	r1, r3
 8007e34:	4a17      	ldr	r2, [pc, #92]	; (8007e94 <takeMachineID+0x2a0>)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4413      	add	r3, r2
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	2001      	movs	r0, #1
 8007e40:	f000 ff5f 	bl	8008d02 <lcd_print_char>

        	writeLoc++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	3301      	adds	r3, #1
 8007e54:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007e56:	2096      	movs	r0, #150	; 0x96
 8007e58:	f001 fc94 	bl	8009784 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007e5c:	2104      	movs	r1, #4
 8007e5e:	480f      	ldr	r0, [pc, #60]	; (8007e9c <takeMachineID+0x2a8>)
 8007e60:	f002 fa60 	bl	800a324 <HAL_GPIO_ReadPin>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d14f      	bne.n	8007f0a <takeMachineID+0x316>
            if(strlen(machineID) >= 1) {
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <takeMachineID+0x2a0>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d048      	beq.n	8007f04 <takeMachineID+0x310>
                machineID[arrayPos] = '\0';
 8007e72:	4a08      	ldr	r2, [pc, #32]	; (8007e94 <takeMachineID+0x2a0>)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4413      	add	r3, r2
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007e7c:	4a0d      	ldr	r2, [pc, #52]	; (8007eb4 <takeMachineID+0x2c0>)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	4413      	add	r3, r2
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b05      	cmp	r3, #5
 8007e8a:	dd19      	ble.n	8007ec0 <takeMachineID+0x2cc>
                	writeLoc--;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e01a      	b.n	8007eca <takeMachineID+0x2d6>
 8007e94:	20000a90 	.word	0x20000a90
 8007e98:	20000004 	.word	0x20000004
 8007e9c:	40010800 	.word	0x40010800
 8007ea0:	20000b0d 	.word	0x20000b0d
 8007ea4:	0800ecf8 	.word	0x0800ecf8
 8007ea8:	0800ed0c 	.word	0x0800ed0c
 8007eac:	0800ed20 	.word	0x0800ed20
 8007eb0:	0800ed34 	.word	0x0800ed34
 8007eb4:	20000a18 	.word	0x20000a18
 8007eb8:	200010d8 	.word	0x200010d8
 8007ebc:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	dc01      	bgt.n	8007eca <takeMachineID+0x2d6>
                	writeLoc = 5;
 8007ec6:	2305      	movs	r3, #5
 8007ec8:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dd06      	ble.n	8007ede <takeMachineID+0x2ea>
                	arrayPos--;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	e007      	b.n	8007eee <takeMachineID+0x2fa>
                } else if(arrayPos < 0) {
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da04      	bge.n	8007eee <takeMachineID+0x2fa>
                	arrayPos = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <takeMachineID+0x32c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f000 ff23 	bl	8008d44 <lcd_delete_char>
                HAL_Delay(50);
 8007efe:	2032      	movs	r0, #50	; 0x32
 8007f00:	f001 fc40 	bl	8009784 <HAL_Delay>
            }

            HAL_Delay(150);
 8007f04:	2096      	movs	r0, #150	; 0x96
 8007f06:	f001 fc3d 	bl	8009784 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	4619      	mov	r1, r3
 8007f10:	2002      	movs	r0, #2
 8007f12:	f000 fec2 	bl	8008c9a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f16:	e685      	b.n	8007c24 <takeMachineID+0x30>
    }
}
 8007f18:	bf00      	nop
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000004 	.word	0x20000004

08007f24 <takeWifiSSID>:

void takeWifiSSID() {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08a      	sub	sp, #40	; 0x28
 8007f28:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	f000 ff32 	bl	8008d94 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007f30:	2214      	movs	r2, #20
 8007f32:	2100      	movs	r1, #0
 8007f34:	48a4      	ldr	r0, [pc, #656]	; (80081c8 <takeWifiSSID+0x2a4>)
 8007f36:	f005 fbcd 	bl	800d6d4 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007f3e:	2307      	movs	r3, #7
 8007f40:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007f42:	2301      	movs	r3, #1
 8007f44:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007f4a:	4ba0      	ldr	r3, [pc, #640]	; (80081cc <takeWifiSSID+0x2a8>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007f50:	2101      	movs	r1, #1
 8007f52:	2002      	movs	r0, #2
 8007f54:	f7f9 f878 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f58:	2108      	movs	r1, #8
 8007f5a:	489d      	ldr	r0, [pc, #628]	; (80081d0 <takeWifiSSID+0x2ac>)
 8007f5c:	f002 f9e2 	bl	800a324 <HAL_GPIO_ReadPin>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d13a      	bne.n	8007fdc <takeWifiSSID+0xb8>
            lcd_cursor(0);
 8007f66:	2000      	movs	r0, #0
 8007f68:	f000 ff14 	bl	8008d94 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007f6c:	4896      	ldr	r0, [pc, #600]	; (80081c8 <takeWifiSSID+0x2a4>)
 8007f6e:	f7f8 f959 	bl	8000224 <strlen>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b14      	cmp	r3, #20
 8007f76:	d91f      	bls.n	8007fb8 <takeWifiSSID+0x94>
                lcd_clear();
 8007f78:	f000 feda 	bl	8008d30 <lcd_clear>
                if(dilSecim == 1) {
 8007f7c:	4b95      	ldr	r3, [pc, #596]	; (80081d4 <takeWifiSSID+0x2b0>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d10a      	bne.n	8007f9a <takeWifiSSID+0x76>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007f84:	4a94      	ldr	r2, [pc, #592]	; (80081d8 <takeWifiSSID+0x2b4>)
 8007f86:	2101      	movs	r1, #1
 8007f88:	2001      	movs	r0, #1
 8007f8a:	f000 fea5 	bl	8008cd8 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007f8e:	4a93      	ldr	r2, [pc, #588]	; (80081dc <takeWifiSSID+0x2b8>)
 8007f90:	2101      	movs	r1, #1
 8007f92:	2002      	movs	r0, #2
 8007f94:	f000 fea0 	bl	8008cd8 <lcd_print>
 8007f98:	e009      	b.n	8007fae <takeWifiSSID+0x8a>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8007f9a:	4a91      	ldr	r2, [pc, #580]	; (80081e0 <takeWifiSSID+0x2bc>)
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	f000 fe9a 	bl	8008cd8 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 8007fa4:	4a8f      	ldr	r2, [pc, #572]	; (80081e4 <takeWifiSSID+0x2c0>)
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	2002      	movs	r0, #2
 8007faa:	f000 fe95 	bl	8008cd8 <lcd_print>
                }
                HAL_Delay(1250);
 8007fae:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007fb2:	f001 fbe7 	bl	8009784 <HAL_Delay>

                goto mainSSIDSection;
 8007fb6:	e7b8      	b.n	8007f2a <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007fb8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007fbc:	9302      	str	r3, [sp, #8]
 8007fbe:	236e      	movs	r3, #110	; 0x6e
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	4b89      	ldr	r3, [pc, #548]	; (80081e8 <takeWifiSSID+0x2c4>)
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	236e      	movs	r3, #110	; 0x6e
 8007fc8:	2200      	movs	r2, #0
 8007fca:	21a0      	movs	r1, #160	; 0xa0
 8007fcc:	4887      	ldr	r0, [pc, #540]	; (80081ec <takeWifiSSID+0x2c8>)
 8007fce:	f002 fc63 	bl	800a898 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fd6:	f001 fbd5 	bl	8009784 <HAL_Delay>

            	break;
 8007fda:	e12a      	b.n	8008232 <takeWifiSSID+0x30e>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007fdc:	2101      	movs	r1, #1
 8007fde:	487c      	ldr	r0, [pc, #496]	; (80081d0 <takeWifiSSID+0x2ac>)
 8007fe0:	f002 f9a0 	bl	800a324 <HAL_GPIO_ReadPin>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d14d      	bne.n	8008086 <takeWifiSSID+0x162>
        	if(cursorPosition > 80) {
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b50      	cmp	r3, #80	; 0x50
 8007fee:	dd01      	ble.n	8007ff4 <takeWifiSSID+0xd0>
        		cursorPosition = 1;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b10      	cmp	r3, #16
 8007ff8:	d13f      	bne.n	800807a <takeWifiSSID+0x156>
            	if(page == 1) {
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d109      	bne.n	8008014 <takeWifiSSID+0xf0>
            		cursorPosition = 1;
 8008000:	2301      	movs	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]
            		page++;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	3301      	adds	r3, #1
 8008008:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800800a:	2102      	movs	r1, #2
 800800c:	2002      	movs	r0, #2
 800800e:	f7f9 f81b 	bl	8001048 <printTemplate>
 8008012:	e035      	b.n	8008080 <takeWifiSSID+0x15c>
            	} else if(page == 2) {
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d109      	bne.n	800802e <takeWifiSSID+0x10a>
            		cursorPosition = 1;
 800801a:	2301      	movs	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
            		page++;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	3301      	adds	r3, #1
 8008022:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008024:	2103      	movs	r1, #3
 8008026:	2002      	movs	r0, #2
 8008028:	f7f9 f80e 	bl	8001048 <printTemplate>
 800802c:	e028      	b.n	8008080 <takeWifiSSID+0x15c>
            	} else if(page == 3) {
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b03      	cmp	r3, #3
 8008032:	d109      	bne.n	8008048 <takeWifiSSID+0x124>
            		cursorPosition = 1;
 8008034:	2301      	movs	r3, #1
 8008036:	60fb      	str	r3, [r7, #12]
            		page++;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	3301      	adds	r3, #1
 800803c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800803e:	2104      	movs	r1, #4
 8008040:	2002      	movs	r0, #2
 8008042:	f7f9 f801 	bl	8001048 <printTemplate>
 8008046:	e01b      	b.n	8008080 <takeWifiSSID+0x15c>
            	} else if(page == 4) {
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b04      	cmp	r3, #4
 800804c:	d109      	bne.n	8008062 <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 800804e:	2301      	movs	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]
            		page++;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	3301      	adds	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008058:	2105      	movs	r1, #5
 800805a:	2002      	movs	r0, #2
 800805c:	f7f8 fff4 	bl	8001048 <printTemplate>
 8008060:	e00e      	b.n	8008080 <takeWifiSSID+0x15c>
            	} else if(page == 5) {
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b05      	cmp	r3, #5
 8008066:	d10b      	bne.n	8008080 <takeWifiSSID+0x15c>
            		cursorPosition = 1;
 8008068:	2301      	movs	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800806c:	2301      	movs	r3, #1
 800806e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008070:	2101      	movs	r1, #1
 8008072:	2002      	movs	r0, #2
 8008074:	f7f8 ffe8 	bl	8001048 <printTemplate>
 8008078:	e002      	b.n	8008080 <takeWifiSSID+0x15c>
            	}
            } else {
            	cursorPosition++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008080:	2096      	movs	r0, #150	; 0x96
 8008082:	f001 fb7f 	bl	8009784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008086:	2108      	movs	r1, #8
 8008088:	4859      	ldr	r0, [pc, #356]	; (80081f0 <takeWifiSSID+0x2cc>)
 800808a:	f002 f94b 	bl	800a324 <HAL_GPIO_ReadPin>
 800808e:	4603      	mov	r3, r0
 8008090:	2b01      	cmp	r3, #1
 8008092:	d149      	bne.n	8008128 <takeWifiSSID+0x204>
        	if(cursorPosition < 1) {
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	dc01      	bgt.n	800809e <takeWifiSSID+0x17a>
        		cursorPosition = 80;
 800809a:	2350      	movs	r3, #80	; 0x50
 800809c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d13b      	bne.n	800811c <takeWifiSSID+0x1f8>
            	if(page == 1) {
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d108      	bne.n	80080bc <takeWifiSSID+0x198>
            		cursorPosition = 16;
 80080aa:	2310      	movs	r3, #16
 80080ac:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80080ae:	2305      	movs	r3, #5
 80080b0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80080b2:	2105      	movs	r1, #5
 80080b4:	2002      	movs	r0, #2
 80080b6:	f7f8 ffc7 	bl	8001048 <printTemplate>
 80080ba:	e032      	b.n	8008122 <takeWifiSSID+0x1fe>
            	} else if(page == 2) {
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d108      	bne.n	80080d4 <takeWifiSSID+0x1b0>
            		cursorPosition = 16;
 80080c2:	2310      	movs	r3, #16
 80080c4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80080c6:	2301      	movs	r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80080ca:	2101      	movs	r1, #1
 80080cc:	2002      	movs	r0, #2
 80080ce:	f7f8 ffbb 	bl	8001048 <printTemplate>
 80080d2:	e026      	b.n	8008122 <takeWifiSSID+0x1fe>
            	} else if(page == 3) {
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d108      	bne.n	80080ec <takeWifiSSID+0x1c8>
            		cursorPosition = 16;
 80080da:	2310      	movs	r3, #16
 80080dc:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80080de:	2302      	movs	r3, #2
 80080e0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80080e2:	2102      	movs	r1, #2
 80080e4:	2002      	movs	r0, #2
 80080e6:	f7f8 ffaf 	bl	8001048 <printTemplate>
 80080ea:	e01a      	b.n	8008122 <takeWifiSSID+0x1fe>
            	} else if(page == 4) {
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d108      	bne.n	8008104 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 80080f2:	2310      	movs	r3, #16
 80080f4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80080f6:	2303      	movs	r3, #3
 80080f8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80080fa:	2103      	movs	r1, #3
 80080fc:	2002      	movs	r0, #2
 80080fe:	f7f8 ffa3 	bl	8001048 <printTemplate>
 8008102:	e00e      	b.n	8008122 <takeWifiSSID+0x1fe>
            	} else if(page == 5) {
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2b05      	cmp	r3, #5
 8008108:	d10b      	bne.n	8008122 <takeWifiSSID+0x1fe>
            		cursorPosition = 16;
 800810a:	2310      	movs	r3, #16
 800810c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800810e:	2304      	movs	r3, #4
 8008110:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008112:	2104      	movs	r1, #4
 8008114:	2002      	movs	r0, #2
 8008116:	f7f8 ff97 	bl	8001048 <printTemplate>
 800811a:	e002      	b.n	8008122 <takeWifiSSID+0x1fe>
            	}
            } else {
            	cursorPosition--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3b01      	subs	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008122:	2096      	movs	r0, #150	; 0x96
 8008124:	f001 fb2e 	bl	8009784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008128:	2102      	movs	r1, #2
 800812a:	4829      	ldr	r0, [pc, #164]	; (80081d0 <takeWifiSSID+0x2ac>)
 800812c:	f002 f8fa 	bl	800a324 <HAL_GPIO_ReadPin>
 8008130:	4603      	mov	r3, r0
 8008132:	2b01      	cmp	r3, #1
 8008134:	d121      	bne.n	800817a <takeWifiSSID+0x256>
            eepromData[eepromVal] = cursorPosition;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	b2d9      	uxtb	r1, r3
 800813a:	4a2b      	ldr	r2, [pc, #172]	; (80081e8 <takeWifiSSID+0x2c4>)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4413      	add	r3, r2
 8008140:	460a      	mov	r2, r1
 8008142:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	b2d9      	uxtb	r1, r3
 8008148:	4a2a      	ldr	r2, [pc, #168]	; (80081f4 <takeWifiSSID+0x2d0>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4413      	add	r3, r2
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	2001      	movs	r0, #1
 8008154:	f000 fdd5 	bl	8008d02 <lcd_print_char>

            writeLoc++;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	3301      	adds	r3, #1
 800815c:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	3301      	adds	r3, #1
 8008162:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3301      	adds	r3, #1
 8008168:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800816a:	4a1f      	ldr	r2, [pc, #124]	; (80081e8 <takeWifiSSID+0x2c4>)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4413      	add	r3, r2
 8008170:	2200      	movs	r2, #0
 8008172:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008174:	2096      	movs	r0, #150	; 0x96
 8008176:	f001 fb05 	bl	8009784 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800817a:	2104      	movs	r1, #4
 800817c:	4814      	ldr	r0, [pc, #80]	; (80081d0 <takeWifiSSID+0x2ac>)
 800817e:	f002 f8d1 	bl	800a324 <HAL_GPIO_ReadPin>
 8008182:	4603      	mov	r3, r0
 8008184:	2b01      	cmp	r3, #1
 8008186:	d14d      	bne.n	8008224 <takeWifiSSID+0x300>
        	if(strlen(wifiSSID) >= 1) {
 8008188:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <takeWifiSSID+0x2a4>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d046      	beq.n	800821e <takeWifiSSID+0x2fa>
        		eepromData[eepromVal] = '\0';
 8008190:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <takeWifiSSID+0x2c4>)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b07      	cmp	r3, #7
 800819e:	dd03      	ble.n	80081a8 <takeWifiSSID+0x284>
        			writeLoc--;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	e004      	b.n	80081b2 <takeWifiSSID+0x28e>
        		} else if(writeLoc < 7) {
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b06      	cmp	r3, #6
 80081ac:	dc01      	bgt.n	80081b2 <takeWifiSSID+0x28e>
        			writeLoc = 7;
 80081ae:	2307      	movs	r3, #7
 80081b0:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd1f      	ble.n	80081f8 <takeWifiSSID+0x2d4>
        			arrayPosition--;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	607b      	str	r3, [r7, #4]
 80081c4:	e020      	b.n	8008208 <takeWifiSSID+0x2e4>
 80081c6:	bf00      	nop
 80081c8:	20000a9c 	.word	0x20000a9c
 80081cc:	20000008 	.word	0x20000008
 80081d0:	40010800 	.word	0x40010800
 80081d4:	20000b0d 	.word	0x20000b0d
 80081d8:	0800ed48 	.word	0x0800ed48
 80081dc:	0800ed5c 	.word	0x0800ed5c
 80081e0:	0800ed70 	.word	0x0800ed70
 80081e4:	0800ed84 	.word	0x0800ed84
 80081e8:	20000a18 	.word	0x20000a18
 80081ec:	200010d8 	.word	0x200010d8
 80081f0:	40011000 	.word	0x40011000
 80081f4:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da04      	bge.n	8008208 <takeWifiSSID+0x2e4>
        			arrayPosition = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <takeWifiSSID+0x318>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	3306      	adds	r3, #6
 800820e:	b2db      	uxtb	r3, r3
 8008210:	4619      	mov	r1, r3
 8008212:	2001      	movs	r0, #1
 8008214:	f000 fd96 	bl	8008d44 <lcd_delete_char>
        		HAL_Delay(50);
 8008218:	2032      	movs	r0, #50	; 0x32
 800821a:	f001 fab3 	bl	8009784 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800821e:	2096      	movs	r0, #150	; 0x96
 8008220:	f001 fab0 	bl	8009784 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	4619      	mov	r1, r3
 800822a:	2002      	movs	r0, #2
 800822c:	f000 fd35 	bl	8008c9a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008230:	e692      	b.n	8007f58 <takeWifiSSID+0x34>
    }
}
 8008232:	bf00      	nop
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000008 	.word	0x20000008

08008240 <takeWifiPass>:

void takeWifiPass() {
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	; 0x28
 8008244:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8008246:	2001      	movs	r0, #1
 8008248:	f000 fda4 	bl	8008d94 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800824c:	2214      	movs	r2, #20
 800824e:	2100      	movs	r1, #0
 8008250:	48a4      	ldr	r0, [pc, #656]	; (80084e4 <takeWifiPass+0x2a4>)
 8008252:	f005 fa3f 	bl	800d6d4 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008256:	2301      	movs	r3, #1
 8008258:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800825a:	2307      	movs	r3, #7
 800825c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800825e:	2301      	movs	r3, #1
 8008260:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8008262:	2300      	movs	r3, #0
 8008264:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008266:	4ba0      	ldr	r3, [pc, #640]	; (80084e8 <takeWifiPass+0x2a8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800826c:	2101      	movs	r1, #1
 800826e:	2003      	movs	r0, #3
 8008270:	f7f8 feea 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008274:	2108      	movs	r1, #8
 8008276:	489d      	ldr	r0, [pc, #628]	; (80084ec <takeWifiPass+0x2ac>)
 8008278:	f002 f854 	bl	800a324 <HAL_GPIO_ReadPin>
 800827c:	4603      	mov	r3, r0
 800827e:	2b01      	cmp	r3, #1
 8008280:	d13a      	bne.n	80082f8 <takeWifiPass+0xb8>
            lcd_cursor(0);
 8008282:	2000      	movs	r0, #0
 8008284:	f000 fd86 	bl	8008d94 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8008288:	4899      	ldr	r0, [pc, #612]	; (80084f0 <takeWifiPass+0x2b0>)
 800828a:	f7f7 ffcb 	bl	8000224 <strlen>
 800828e:	4603      	mov	r3, r0
 8008290:	2b14      	cmp	r3, #20
 8008292:	d91f      	bls.n	80082d4 <takeWifiPass+0x94>
                lcd_clear();
 8008294:	f000 fd4c 	bl	8008d30 <lcd_clear>
                if(dilSecim == 1) {
 8008298:	4b96      	ldr	r3, [pc, #600]	; (80084f4 <takeWifiPass+0x2b4>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d10a      	bne.n	80082b6 <takeWifiPass+0x76>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80082a0:	4a95      	ldr	r2, [pc, #596]	; (80084f8 <takeWifiPass+0x2b8>)
 80082a2:	2101      	movs	r1, #1
 80082a4:	2001      	movs	r0, #1
 80082a6:	f000 fd17 	bl	8008cd8 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80082aa:	4a94      	ldr	r2, [pc, #592]	; (80084fc <takeWifiPass+0x2bc>)
 80082ac:	2101      	movs	r1, #1
 80082ae:	2002      	movs	r0, #2
 80082b0:	f000 fd12 	bl	8008cd8 <lcd_print>
 80082b4:	e009      	b.n	80082ca <takeWifiPass+0x8a>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 80082b6:	4a92      	ldr	r2, [pc, #584]	; (8008500 <takeWifiPass+0x2c0>)
 80082b8:	2101      	movs	r1, #1
 80082ba:	2001      	movs	r0, #1
 80082bc:	f000 fd0c 	bl	8008cd8 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80082c0:	4a90      	ldr	r2, [pc, #576]	; (8008504 <takeWifiPass+0x2c4>)
 80082c2:	2101      	movs	r1, #1
 80082c4:	2002      	movs	r0, #2
 80082c6:	f000 fd07 	bl	8008cd8 <lcd_print>
                }
                HAL_Delay(1250);
 80082ca:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80082ce:	f001 fa59 	bl	8009784 <HAL_Delay>

                goto mainPassSection;
 80082d2:	e7b8      	b.n	8008246 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80082d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	236e      	movs	r3, #110	; 0x6e
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	4b8a      	ldr	r3, [pc, #552]	; (8008508 <takeWifiPass+0x2c8>)
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	236e      	movs	r3, #110	; 0x6e
 80082e4:	2200      	movs	r2, #0
 80082e6:	21a0      	movs	r1, #160	; 0xa0
 80082e8:	4888      	ldr	r0, [pc, #544]	; (800850c <takeWifiPass+0x2cc>)
 80082ea:	f002 fad5 	bl	800a898 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80082ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082f2:	f001 fa47 	bl	8009784 <HAL_Delay>

            	break;
 80082f6:	e12c      	b.n	8008552 <takeWifiPass+0x312>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80082f8:	2101      	movs	r1, #1
 80082fa:	487c      	ldr	r0, [pc, #496]	; (80084ec <takeWifiPass+0x2ac>)
 80082fc:	f002 f812 	bl	800a324 <HAL_GPIO_ReadPin>
 8008300:	4603      	mov	r3, r0
 8008302:	2b01      	cmp	r3, #1
 8008304:	d14d      	bne.n	80083a2 <takeWifiPass+0x162>
        	if(cursorPosition > 80) {
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b50      	cmp	r3, #80	; 0x50
 800830a:	dd01      	ble.n	8008310 <takeWifiPass+0xd0>
        		cursorPosition = 1;
 800830c:	2301      	movs	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b10      	cmp	r3, #16
 8008314:	d13f      	bne.n	8008396 <takeWifiPass+0x156>
            	if(page == 1) {
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d109      	bne.n	8008330 <takeWifiPass+0xf0>
            		cursorPosition = 1;
 800831c:	2301      	movs	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	3301      	adds	r3, #1
 8008324:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008326:	2102      	movs	r1, #2
 8008328:	2003      	movs	r0, #3
 800832a:	f7f8 fe8d 	bl	8001048 <printTemplate>
 800832e:	e035      	b.n	800839c <takeWifiPass+0x15c>
            	} else if(page == 2) {
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d109      	bne.n	800834a <takeWifiPass+0x10a>
            		cursorPosition = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
            		page++;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	3301      	adds	r3, #1
 800833e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008340:	2103      	movs	r1, #3
 8008342:	2003      	movs	r0, #3
 8008344:	f7f8 fe80 	bl	8001048 <printTemplate>
 8008348:	e028      	b.n	800839c <takeWifiPass+0x15c>
            	} else if(page == 3) {
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b03      	cmp	r3, #3
 800834e:	d109      	bne.n	8008364 <takeWifiPass+0x124>
            		cursorPosition = 1;
 8008350:	2301      	movs	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
            		page++;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	3301      	adds	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800835a:	2104      	movs	r1, #4
 800835c:	2003      	movs	r0, #3
 800835e:	f7f8 fe73 	bl	8001048 <printTemplate>
 8008362:	e01b      	b.n	800839c <takeWifiPass+0x15c>
            	} else if(page == 4) {
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2b04      	cmp	r3, #4
 8008368:	d109      	bne.n	800837e <takeWifiPass+0x13e>
            		cursorPosition = 1;
 800836a:	2301      	movs	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
            		page++;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	3301      	adds	r3, #1
 8008372:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008374:	2105      	movs	r1, #5
 8008376:	2003      	movs	r0, #3
 8008378:	f7f8 fe66 	bl	8001048 <printTemplate>
 800837c:	e00e      	b.n	800839c <takeWifiPass+0x15c>
            	} else if(page == 5) {
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b05      	cmp	r3, #5
 8008382:	d10b      	bne.n	800839c <takeWifiPass+0x15c>
            		cursorPosition = 1;
 8008384:	2301      	movs	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008388:	2301      	movs	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800838c:	2101      	movs	r1, #1
 800838e:	2003      	movs	r0, #3
 8008390:	f7f8 fe5a 	bl	8001048 <printTemplate>
 8008394:	e002      	b.n	800839c <takeWifiPass+0x15c>
            	}
            } else {
            	cursorPosition++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800839c:	2096      	movs	r0, #150	; 0x96
 800839e:	f001 f9f1 	bl	8009784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80083a2:	2108      	movs	r1, #8
 80083a4:	485a      	ldr	r0, [pc, #360]	; (8008510 <takeWifiPass+0x2d0>)
 80083a6:	f001 ffbd 	bl	800a324 <HAL_GPIO_ReadPin>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d149      	bne.n	8008444 <takeWifiPass+0x204>
        	if(cursorPosition < 1) {
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dc01      	bgt.n	80083ba <takeWifiPass+0x17a>
        		cursorPosition = 80;
 80083b6:	2350      	movs	r3, #80	; 0x50
 80083b8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d13b      	bne.n	8008438 <takeWifiPass+0x1f8>
            	if(page == 1) {
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d108      	bne.n	80083d8 <takeWifiPass+0x198>
            		cursorPosition = 16;
 80083c6:	2310      	movs	r3, #16
 80083c8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80083ca:	2305      	movs	r3, #5
 80083cc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80083ce:	2105      	movs	r1, #5
 80083d0:	2003      	movs	r0, #3
 80083d2:	f7f8 fe39 	bl	8001048 <printTemplate>
 80083d6:	e032      	b.n	800843e <takeWifiPass+0x1fe>
            	} else if(page == 2) {
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d108      	bne.n	80083f0 <takeWifiPass+0x1b0>
            		cursorPosition = 16;
 80083de:	2310      	movs	r3, #16
 80083e0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80083e2:	2301      	movs	r3, #1
 80083e4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80083e6:	2101      	movs	r1, #1
 80083e8:	2003      	movs	r0, #3
 80083ea:	f7f8 fe2d 	bl	8001048 <printTemplate>
 80083ee:	e026      	b.n	800843e <takeWifiPass+0x1fe>
            	} else if(page == 3) {
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d108      	bne.n	8008408 <takeWifiPass+0x1c8>
            		cursorPosition = 16;
 80083f6:	2310      	movs	r3, #16
 80083f8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80083fa:	2302      	movs	r3, #2
 80083fc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80083fe:	2102      	movs	r1, #2
 8008400:	2003      	movs	r0, #3
 8008402:	f7f8 fe21 	bl	8001048 <printTemplate>
 8008406:	e01a      	b.n	800843e <takeWifiPass+0x1fe>
            	} else if(page == 4) {
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b04      	cmp	r3, #4
 800840c:	d108      	bne.n	8008420 <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 800840e:	2310      	movs	r3, #16
 8008410:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008412:	2303      	movs	r3, #3
 8008414:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008416:	2103      	movs	r1, #3
 8008418:	2003      	movs	r0, #3
 800841a:	f7f8 fe15 	bl	8001048 <printTemplate>
 800841e:	e00e      	b.n	800843e <takeWifiPass+0x1fe>
            	} else if(page == 5) {
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2b05      	cmp	r3, #5
 8008424:	d10b      	bne.n	800843e <takeWifiPass+0x1fe>
            		cursorPosition = 16;
 8008426:	2310      	movs	r3, #16
 8008428:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800842a:	2304      	movs	r3, #4
 800842c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800842e:	2104      	movs	r1, #4
 8008430:	2003      	movs	r0, #3
 8008432:	f7f8 fe09 	bl	8001048 <printTemplate>
 8008436:	e002      	b.n	800843e <takeWifiPass+0x1fe>
            	}
            } else {
            	cursorPosition--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3b01      	subs	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800843e:	2096      	movs	r0, #150	; 0x96
 8008440:	f001 f9a0 	bl	8009784 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008444:	2102      	movs	r1, #2
 8008446:	4829      	ldr	r0, [pc, #164]	; (80084ec <takeWifiPass+0x2ac>)
 8008448:	f001 ff6c 	bl	800a324 <HAL_GPIO_ReadPin>
 800844c:	4603      	mov	r3, r0
 800844e:	2b01      	cmp	r3, #1
 8008450:	d121      	bne.n	8008496 <takeWifiPass+0x256>
            eepromData[eepromVal] = cursorPosition;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	b2d9      	uxtb	r1, r3
 8008456:	4a2c      	ldr	r2, [pc, #176]	; (8008508 <takeWifiPass+0x2c8>)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	460a      	mov	r2, r1
 800845e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	b2d9      	uxtb	r1, r3
 8008464:	4a2b      	ldr	r2, [pc, #172]	; (8008514 <takeWifiPass+0x2d4>)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
 800846e:	2001      	movs	r0, #1
 8008470:	f000 fc47 	bl	8008d02 <lcd_print_char>

            writeLoc++;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	3301      	adds	r3, #1
 8008478:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	3301      	adds	r3, #1
 800847e:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3301      	adds	r3, #1
 8008484:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008486:	4a20      	ldr	r2, [pc, #128]	; (8008508 <takeWifiPass+0x2c8>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008490:	2096      	movs	r0, #150	; 0x96
 8008492:	f001 f977 	bl	8009784 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008496:	2104      	movs	r1, #4
 8008498:	4814      	ldr	r0, [pc, #80]	; (80084ec <takeWifiPass+0x2ac>)
 800849a:	f001 ff43 	bl	800a324 <HAL_GPIO_ReadPin>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d14f      	bne.n	8008544 <takeWifiPass+0x304>
        	if(strlen(wifiSSID) >= 1) {
 80084a4:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <takeWifiPass+0x2b0>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d048      	beq.n	800853e <takeWifiPass+0x2fe>
        		eepromData[eepromVal] = '\0';
 80084ac:	4a16      	ldr	r2, [pc, #88]	; (8008508 <takeWifiPass+0x2c8>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b07      	cmp	r3, #7
 80084ba:	dd03      	ble.n	80084c4 <takeWifiPass+0x284>
        			writeLoc--;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	3b01      	subs	r3, #1
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	e004      	b.n	80084ce <takeWifiPass+0x28e>
        		} else if(writeLoc < 7) {
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	2b06      	cmp	r3, #6
 80084c8:	dc01      	bgt.n	80084ce <takeWifiPass+0x28e>
        			writeLoc = 7;
 80084ca:	2307      	movs	r3, #7
 80084cc:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	dd21      	ble.n	8008518 <takeWifiPass+0x2d8>
        			arrayPosition--;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3b01      	subs	r3, #1
 80084de:	607b      	str	r3, [r7, #4]
 80084e0:	e022      	b.n	8008528 <takeWifiPass+0x2e8>
 80084e2:	bf00      	nop
 80084e4:	20000ab0 	.word	0x20000ab0
 80084e8:	2000000c 	.word	0x2000000c
 80084ec:	40010800 	.word	0x40010800
 80084f0:	20000a9c 	.word	0x20000a9c
 80084f4:	20000b0d 	.word	0x20000b0d
 80084f8:	0800ed48 	.word	0x0800ed48
 80084fc:	0800ed5c 	.word	0x0800ed5c
 8008500:	0800ed98 	.word	0x0800ed98
 8008504:	0800ed84 	.word	0x0800ed84
 8008508:	20000a18 	.word	0x20000a18
 800850c:	200010d8 	.word	0x200010d8
 8008510:	40011000 	.word	0x40011000
 8008514:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	da04      	bge.n	8008528 <takeWifiPass+0x2e8>
        			arrayPosition = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008522:	4b0e      	ldr	r3, [pc, #56]	; (800855c <takeWifiPass+0x31c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	3306      	adds	r3, #6
 800852e:	b2db      	uxtb	r3, r3
 8008530:	4619      	mov	r1, r3
 8008532:	2001      	movs	r0, #1
 8008534:	f000 fc06 	bl	8008d44 <lcd_delete_char>
        		HAL_Delay(50);
 8008538:	2032      	movs	r0, #50	; 0x32
 800853a:	f001 f923 	bl	8009784 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800853e:	2096      	movs	r0, #150	; 0x96
 8008540:	f001 f920 	bl	8009784 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	4619      	mov	r1, r3
 800854a:	2002      	movs	r0, #2
 800854c:	f000 fba5 	bl	8008c9a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008550:	e690      	b.n	8008274 <takeWifiPass+0x34>
    }
}
 8008552:	bf00      	nop
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	2000000c 	.word	0x2000000c

08008560 <mergeData>:

char* mergeData() {
 8008560:	b580      	push	{r7, lr}
 8008562:	b09c      	sub	sp, #112	; 0x70
 8008564:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008566:	2300      	movs	r3, #0
 8008568:	63bb      	str	r3, [r7, #56]	; 0x38
 800856a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800856e:	2229      	movs	r2, #41	; 0x29
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f005 f8ae 	bl	800d6d4 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008578:	4b65      	ldr	r3, [pc, #404]	; (8008710 <mergeData+0x1b0>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	703b      	strb	r3, [r7, #0]
 800857e:	4b65      	ldr	r3, [pc, #404]	; (8008714 <mergeData+0x1b4>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	707b      	strb	r3, [r7, #1]
 8008584:	4b64      	ldr	r3, [pc, #400]	; (8008718 <mergeData+0x1b8>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	70bb      	strb	r3, [r7, #2]
 800858a:	4b64      	ldr	r3, [pc, #400]	; (800871c <mergeData+0x1bc>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	70fb      	strb	r3, [r7, #3]
 8008590:	4b63      	ldr	r3, [pc, #396]	; (8008720 <mergeData+0x1c0>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	713b      	strb	r3, [r7, #4]
 8008596:	4b63      	ldr	r3, [pc, #396]	; (8008724 <mergeData+0x1c4>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	717b      	strb	r3, [r7, #5]
 800859c:	4b62      	ldr	r3, [pc, #392]	; (8008728 <mergeData+0x1c8>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	71bb      	strb	r3, [r7, #6]
 80085a2:	4b62      	ldr	r3, [pc, #392]	; (800872c <mergeData+0x1cc>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	71fb      	strb	r3, [r7, #7]
 80085a8:	4b61      	ldr	r3, [pc, #388]	; (8008730 <mergeData+0x1d0>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	723b      	strb	r3, [r7, #8]
 80085ae:	4b61      	ldr	r3, [pc, #388]	; (8008734 <mergeData+0x1d4>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	727b      	strb	r3, [r7, #9]
 80085b4:	4b60      	ldr	r3, [pc, #384]	; (8008738 <mergeData+0x1d8>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	72bb      	strb	r3, [r7, #10]
 80085ba:	4b60      	ldr	r3, [pc, #384]	; (800873c <mergeData+0x1dc>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	72fb      	strb	r3, [r7, #11]
 80085c0:	4b5f      	ldr	r3, [pc, #380]	; (8008740 <mergeData+0x1e0>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	733b      	strb	r3, [r7, #12]
 80085c6:	4b5f      	ldr	r3, [pc, #380]	; (8008744 <mergeData+0x1e4>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	737b      	strb	r3, [r7, #13]
 80085cc:	4b5e      	ldr	r3, [pc, #376]	; (8008748 <mergeData+0x1e8>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	73bb      	strb	r3, [r7, #14]
 80085d2:	4b5e      	ldr	r3, [pc, #376]	; (800874c <mergeData+0x1ec>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	73fb      	strb	r3, [r7, #15]
 80085d8:	4b5d      	ldr	r3, [pc, #372]	; (8008750 <mergeData+0x1f0>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	743b      	strb	r3, [r7, #16]
 80085de:	4b5d      	ldr	r3, [pc, #372]	; (8008754 <mergeData+0x1f4>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	747b      	strb	r3, [r7, #17]
 80085e4:	4b5c      	ldr	r3, [pc, #368]	; (8008758 <mergeData+0x1f8>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	74bb      	strb	r3, [r7, #18]
 80085ea:	4b5c      	ldr	r3, [pc, #368]	; (800875c <mergeData+0x1fc>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	74fb      	strb	r3, [r7, #19]
 80085f0:	4b5b      	ldr	r3, [pc, #364]	; (8008760 <mergeData+0x200>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	753b      	strb	r3, [r7, #20]
 80085f6:	4b5b      	ldr	r3, [pc, #364]	; (8008764 <mergeData+0x204>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	757b      	strb	r3, [r7, #21]
 80085fc:	4b5a      	ldr	r3, [pc, #360]	; (8008768 <mergeData+0x208>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	75bb      	strb	r3, [r7, #22]
 8008602:	4b5a      	ldr	r3, [pc, #360]	; (800876c <mergeData+0x20c>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	75fb      	strb	r3, [r7, #23]
 8008608:	4b59      	ldr	r3, [pc, #356]	; (8008770 <mergeData+0x210>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	763b      	strb	r3, [r7, #24]
 800860e:	4b59      	ldr	r3, [pc, #356]	; (8008774 <mergeData+0x214>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	767b      	strb	r3, [r7, #25]
 8008614:	4b58      	ldr	r3, [pc, #352]	; (8008778 <mergeData+0x218>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	76bb      	strb	r3, [r7, #26]
 800861a:	4b58      	ldr	r3, [pc, #352]	; (800877c <mergeData+0x21c>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	76fb      	strb	r3, [r7, #27]
 8008620:	4b57      	ldr	r3, [pc, #348]	; (8008780 <mergeData+0x220>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	773b      	strb	r3, [r7, #28]
 8008626:	4b57      	ldr	r3, [pc, #348]	; (8008784 <mergeData+0x224>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	777b      	strb	r3, [r7, #29]
 800862c:	4b56      	ldr	r3, [pc, #344]	; (8008788 <mergeData+0x228>)
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	77bb      	strb	r3, [r7, #30]
 8008632:	4b56      	ldr	r3, [pc, #344]	; (800878c <mergeData+0x22c>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	77fb      	strb	r3, [r7, #31]
 8008638:	4b55      	ldr	r3, [pc, #340]	; (8008790 <mergeData+0x230>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8008640:	4b54      	ldr	r3, [pc, #336]	; (8008794 <mergeData+0x234>)
 8008642:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008646:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			eepromData[39],
 800864a:	4b52      	ldr	r3, [pc, #328]	; (8008794 <mergeData+0x234>)
 800864c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8008650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			eepromData[40],
 8008654:	4b4f      	ldr	r3, [pc, #316]	; (8008794 <mergeData+0x234>)
 8008656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800865a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			eepromData[41],
 800865e:	4b4d      	ldr	r3, [pc, #308]	; (8008794 <mergeData+0x234>)
 8008660:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8008664:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			eepromData[42],
 8008668:	4b4a      	ldr	r3, [pc, #296]	; (8008794 <mergeData+0x234>)
 800866a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800866e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[43],
 8008672:	4b48      	ldr	r3, [pc, #288]	; (8008794 <mergeData+0x234>)
 8008674:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[44],
 800867c:	4b45      	ldr	r3, [pc, #276]	; (8008794 <mergeData+0x234>)
 800867e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8008682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[45],
 8008686:	4b43      	ldr	r3, [pc, #268]	; (8008794 <mergeData+0x234>)
 8008688:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800868c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[46],
 8008690:	4b40      	ldr	r3, [pc, #256]	; (8008794 <mergeData+0x234>)
 8008692:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008696:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[47],
 800869a:	4b3e      	ldr	r3, [pc, #248]	; (8008794 <mergeData+0x234>)
 800869c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80086a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086a4:	2306      	movs	r3, #6
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80086aa:	2300      	movs	r3, #0
 80086ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086ae:	e015      	b.n	80086dc <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 80086b0:	463a      	mov	r2, r7
 80086b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b4:	4413      	add	r3, r2
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	461a      	mov	r2, r3
 80086ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086be:	4936      	ldr	r1, [pc, #216]	; (8008798 <mergeData+0x238>)
 80086c0:	4618      	mov	r0, r3
 80086c2:	f004 ff6d 	bl	800d5a0 <siprintf>
	    strcat(combinedString, temp);
 80086c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80086ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086ce:	4611      	mov	r1, r2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f004 ffc7 	bl	800d664 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80086d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d8:	3301      	adds	r3, #1
 80086da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086de:	2b2b      	cmp	r3, #43	; 0x2b
 80086e0:	d9e6      	bls.n	80086b0 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80086e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7f7 fd9c 	bl	8000224 <strlen>
 80086ec:	4603      	mov	r3, r0
 80086ee:	3301      	adds	r3, #1
 80086f0:	4618      	mov	r0, r3
 80086f2:	f004 fea1 	bl	800d438 <malloc>
 80086f6:	4603      	mov	r3, r0
 80086f8:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80086fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086fe:	4619      	mov	r1, r3
 8008700:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008702:	f005 f82b 	bl	800d75c <strcpy>
	return result;
 8008706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8008708:	4618      	mov	r0, r3
 800870a:	3770      	adds	r7, #112	; 0x70
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000afb 	.word	0x20000afb
 8008714:	20000aed 	.word	0x20000aed
 8008718:	20000af0 	.word	0x20000af0
 800871c:	20000af1 	.word	0x20000af1
 8008720:	20000af2 	.word	0x20000af2
 8008724:	20000af9 	.word	0x20000af9
 8008728:	20000af3 	.word	0x20000af3
 800872c:	20000af4 	.word	0x20000af4
 8008730:	20000af8 	.word	0x20000af8
 8008734:	20000af5 	.word	0x20000af5
 8008738:	20000b05 	.word	0x20000b05
 800873c:	20000af6 	.word	0x20000af6
 8008740:	20000b06 	.word	0x20000b06
 8008744:	20000af7 	.word	0x20000af7
 8008748:	20000b07 	.word	0x20000b07
 800874c:	20000afa 	.word	0x20000afa
 8008750:	20000afc 	.word	0x20000afc
 8008754:	20000afd 	.word	0x20000afd
 8008758:	20000afe 	.word	0x20000afe
 800875c:	20000aff 	.word	0x20000aff
 8008760:	20000b00 	.word	0x20000b00
 8008764:	20000b01 	.word	0x20000b01
 8008768:	20000b02 	.word	0x20000b02
 800876c:	20000b03 	.word	0x20000b03
 8008770:	20000b04 	.word	0x20000b04
 8008774:	20000b08 	.word	0x20000b08
 8008778:	20000b0a 	.word	0x20000b0a
 800877c:	20000ae9 	.word	0x20000ae9
 8008780:	20000aea 	.word	0x20000aea
 8008784:	20000000 	.word	0x20000000
 8008788:	20000001 	.word	0x20000001
 800878c:	20000aeb 	.word	0x20000aeb
 8008790:	20000b0d 	.word	0x20000b0d
 8008794:	20000a18 	.word	0x20000a18
 8008798:	0800edac 	.word	0x0800edac

0800879c <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 80087a2:	4b1b      	ldr	r3, [pc, #108]	; (8008810 <convertAndSendData+0x74>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80087aa:	4a1a      	ldr	r2, [pc, #104]	; (8008814 <convertAndSendData+0x78>)
 80087ac:	2101      	movs	r1, #1
 80087ae:	2001      	movs	r0, #1
 80087b0:	f000 fa92 	bl	8008cd8 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80087b4:	4a18      	ldr	r2, [pc, #96]	; (8008818 <convertAndSendData+0x7c>)
 80087b6:	2101      	movs	r1, #1
 80087b8:	2002      	movs	r0, #2
 80087ba:	f000 fa8d 	bl	8008cd8 <lcd_print>
 80087be:	e009      	b.n	80087d4 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80087c0:	4a16      	ldr	r2, [pc, #88]	; (800881c <convertAndSendData+0x80>)
 80087c2:	2101      	movs	r1, #1
 80087c4:	2001      	movs	r0, #1
 80087c6:	f000 fa87 	bl	8008cd8 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80087ca:	4a15      	ldr	r2, [pc, #84]	; (8008820 <convertAndSendData+0x84>)
 80087cc:	2101      	movs	r1, #1
 80087ce:	2002      	movs	r0, #2
 80087d0:	f000 fa82 	bl	8008cd8 <lcd_print>
	}

	for(int i=0; i<2; i++) {
 80087d4:	2300      	movs	r3, #0
 80087d6:	607b      	str	r3, [r7, #4]
 80087d8:	e00c      	b.n	80087f4 <convertAndSendData+0x58>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80087da:	f7ff fec1 	bl	8008560 <mergeData>
 80087de:	4603      	mov	r3, r0
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	4b10      	ldr	r3, [pc, #64]	; (8008824 <convertAndSendData+0x88>)
 80087e4:	4a10      	ldr	r2, [pc, #64]	; (8008828 <convertAndSendData+0x8c>)
 80087e6:	4911      	ldr	r1, [pc, #68]	; (800882c <convertAndSendData+0x90>)
 80087e8:	4811      	ldr	r0, [pc, #68]	; (8008830 <convertAndSendData+0x94>)
 80087ea:	f7f8 f8d5 	bl	8000998 <sendMachineData>
	for(int i=0; i<2; i++) {
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3301      	adds	r3, #1
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	ddef      	ble.n	80087da <convertAndSendData+0x3e>
	}

	HAL_Delay(500);
 80087fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087fe:	f000 ffc1 	bl	8009784 <HAL_Delay>
	lcd_clear();
 8008802:	f000 fa95 	bl	8008d30 <lcd_clear>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000b0d 	.word	0x20000b0d
 8008814:	0800edb0 	.word	0x0800edb0
 8008818:	0800edc4 	.word	0x0800edc4
 800881c:	0800edd8 	.word	0x0800edd8
 8008820:	0800edec 	.word	0x0800edec
 8008824:	20000ab0 	.word	0x20000ab0
 8008828:	20000a9c 	.word	0x20000a9c
 800882c:	20000a90 	.word	0x20000a90
 8008830:	20001174 	.word	0x20001174

08008834 <iotSetup>:

void iotSetup() {
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af04      	add	r7, sp, #16
	if(iotMode != 0) {
 800883a:	4b39      	ldr	r3, [pc, #228]	; (8008920 <iotSetup+0xec>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d016      	beq.n	8008870 <iotSetup+0x3c>
		if(checkEEPROM4ID() != 1) {
 8008842:	f000 f88b 	bl	800895c <checkEEPROM4ID>
 8008846:	4603      	mov	r3, r0
 8008848:	2b01      	cmp	r3, #1
 800884a:	d001      	beq.n	8008850 <iotSetup+0x1c>
			takeMachineID();
 800884c:	f7ff f9d2 	bl	8007bf4 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008850:	4834      	ldr	r0, [pc, #208]	; (8008924 <iotSetup+0xf0>)
 8008852:	f7f7 fce7 	bl	8000224 <strlen>
 8008856:	4603      	mov	r3, r0
 8008858:	2b01      	cmp	r3, #1
 800885a:	d801      	bhi.n	8008860 <iotSetup+0x2c>
			takeWifiSSID();
 800885c:	f7ff fb62 	bl	8007f24 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008860:	4831      	ldr	r0, [pc, #196]	; (8008928 <iotSetup+0xf4>)
 8008862:	f7f7 fcdf 	bl	8000224 <strlen>
 8008866:	4603      	mov	r3, r0
 8008868:	2b01      	cmp	r3, #1
 800886a:	d801      	bhi.n	8008870 <iotSetup+0x3c>
			takeWifiPass();
 800886c:	f7ff fce8 	bl	8008240 <takeWifiPass>
		}
	}

	if(setupCompleted != 1) {
 8008870:	4b2e      	ldr	r3, [pc, #184]	; (800892c <iotSetup+0xf8>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d044      	beq.n	8008902 <iotSetup+0xce>
		takeIDSection:
 8008878:	bf00      	nop
		if(checkMachineID(&huart1, machineID) == 1) {
 800887a:	492d      	ldr	r1, [pc, #180]	; (8008930 <iotSetup+0xfc>)
 800887c:	482d      	ldr	r0, [pc, #180]	; (8008934 <iotSetup+0x100>)
 800887e:	f7f8 f92b 	bl	8000ad8 <checkMachineID>
 8008882:	4603      	mov	r3, r0
 8008884:	2b01      	cmp	r3, #1
 8008886:	d119      	bne.n	80088bc <iotSetup+0x88>
			setupCompleted = 1;
 8008888:	4b28      	ldr	r3, [pc, #160]	; (800892c <iotSetup+0xf8>)
 800888a:	2201      	movs	r2, #1
 800888c:	701a      	strb	r2, [r3, #0]
			eepromData[104] = setupCompleted;
 800888e:	4b27      	ldr	r3, [pc, #156]	; (800892c <iotSetup+0xf8>)
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	4b29      	ldr	r3, [pc, #164]	; (8008938 <iotSetup+0x104>)
 8008894:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			//EEPROMA yazma işlemini başlat
        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008898:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800889c:	9302      	str	r3, [sp, #8]
 800889e:	236e      	movs	r3, #110	; 0x6e
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	4b25      	ldr	r3, [pc, #148]	; (8008938 <iotSetup+0x104>)
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	236e      	movs	r3, #110	; 0x6e
 80088a8:	2200      	movs	r2, #0
 80088aa:	21a0      	movs	r1, #160	; 0xa0
 80088ac:	4823      	ldr	r0, [pc, #140]	; (800893c <iotSetup+0x108>)
 80088ae:	f001 fff3 	bl	800a898 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 80088b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088b6:	f000 ff65 	bl	8009784 <HAL_Delay>
 80088ba:	e022      	b.n	8008902 <iotSetup+0xce>
		} else {
			if(dilSecim == 1) {
 80088bc:	4b20      	ldr	r3, [pc, #128]	; (8008940 <iotSetup+0x10c>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d10a      	bne.n	80088da <iotSetup+0xa6>
				//türkçe hata mesajı
				lcd_print(1, 1, " BU ID MAKINEDE ");
 80088c4:	4a1f      	ldr	r2, [pc, #124]	; (8008944 <iotSetup+0x110>)
 80088c6:	2101      	movs	r1, #1
 80088c8:	2001      	movs	r0, #1
 80088ca:	f000 fa05 	bl	8008cd8 <lcd_print>
				lcd_print(2, 1, "  KULLANILAMAZ  ");
 80088ce:	4a1e      	ldr	r2, [pc, #120]	; (8008948 <iotSetup+0x114>)
 80088d0:	2101      	movs	r1, #1
 80088d2:	2002      	movs	r0, #2
 80088d4:	f000 fa00 	bl	8008cd8 <lcd_print>
 80088d8:	e009      	b.n	80088ee <iotSetup+0xba>
			} else {
				//ingilizce hata mesajı
				lcd_print(1, 1, "ID NOT AVAILABLE");
 80088da:	4a1c      	ldr	r2, [pc, #112]	; (800894c <iotSetup+0x118>)
 80088dc:	2101      	movs	r1, #1
 80088de:	2001      	movs	r0, #1
 80088e0:	f000 f9fa 	bl	8008cd8 <lcd_print>
				lcd_print(2, 1, "FOR THIS MACHINE");
 80088e4:	4a1a      	ldr	r2, [pc, #104]	; (8008950 <iotSetup+0x11c>)
 80088e6:	2101      	movs	r1, #1
 80088e8:	2002      	movs	r0, #2
 80088ea:	f000 f9f5 	bl	8008cd8 <lcd_print>
			}

			HAL_Delay(1250);
 80088ee:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80088f2:	f000 ff47 	bl	8009784 <HAL_Delay>
			//Tekrar id alma işlemi
			takeMachineID();
 80088f6:	f7ff f97d 	bl	8007bf4 <takeMachineID>
			HAL_Delay(200);
 80088fa:	20c8      	movs	r0, #200	; 0xc8
 80088fc:	f000 ff42 	bl	8009784 <HAL_Delay>
			goto takeIDSection;
 8008900:	e7bb      	b.n	800887a <iotSetup+0x46>
		}
	}

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008902:	4a14      	ldr	r2, [pc, #80]	; (8008954 <iotSetup+0x120>)
 8008904:	4914      	ldr	r1, [pc, #80]	; (8008958 <iotSetup+0x124>)
 8008906:	480b      	ldr	r0, [pc, #44]	; (8008934 <iotSetup+0x100>)
 8008908:	f7f7 ff9c 	bl	8000844 <ESP8266_Init>
	HAL_Delay(500);
 800890c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008910:	f000 ff38 	bl	8009784 <HAL_Delay>
	convertAndSendData();
 8008914:	f7ff ff42 	bl	800879c <convertAndSendData>
}
 8008918:	bf00      	nop
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000b0b 	.word	0x20000b0b
 8008924:	20000a9c 	.word	0x20000a9c
 8008928:	20000ab0 	.word	0x20000ab0
 800892c:	20000ac4 	.word	0x20000ac4
 8008930:	20000a90 	.word	0x20000a90
 8008934:	20001174 	.word	0x20001174
 8008938:	20000a18 	.word	0x20000a18
 800893c:	200010d8 	.word	0x200010d8
 8008940:	20000b0d 	.word	0x20000b0d
 8008944:	0800ee00 	.word	0x0800ee00
 8008948:	0800ee14 	.word	0x0800ee14
 800894c:	0800ee28 	.word	0x0800ee28
 8008950:	0800ee3c 	.word	0x0800ee3c
 8008954:	0800ee50 	.word	0x0800ee50
 8008958:	0800ee68 	.word	0x0800ee68

0800895c <checkEEPROM4ID>:

int checkEEPROM4ID() {
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008962:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <checkEEPROM4ID+0x44>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008968:	2301      	movs	r3, #1
 800896a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 800896c:	2300      	movs	r3, #0
 800896e:	607b      	str	r3, [r7, #4]
 8008970:	e00d      	b.n	800898e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008972:	4a0c      	ldr	r2, [pc, #48]	; (80089a4 <checkEEPROM4ID+0x48>)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <checkEEPROM4ID+0x26>
			returnVal = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3301      	adds	r3, #1
 8008986:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3301      	adds	r3, #1
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b0b      	cmp	r3, #11
 8008992:	ddee      	ble.n	8008972 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008994:	68bb      	ldr	r3, [r7, #8]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr
 80089a0:	20000004 	.word	0x20000004
 80089a4:	20000a18 	.word	0x20000a18

080089a8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	4603      	mov	r3, r0
 80089b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	f023 030f 	bic.w	r3, r3, #15
 80089b8:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80089c0:	7b7b      	ldrb	r3, [r7, #13]
 80089c2:	f043 030c 	orr.w	r3, r3, #12
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80089ca:	7b7b      	ldrb	r3, [r7, #13]
 80089cc:	f043 0308 	orr.w	r3, r3, #8
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80089d4:	7b3b      	ldrb	r3, [r7, #12]
 80089d6:	f043 030c 	orr.w	r3, r3, #12
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80089de:	7b3b      	ldrb	r3, [r7, #12]
 80089e0:	f043 0308 	orr.w	r3, r3, #8
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80089e8:	bf00      	nop
 80089ea:	4825      	ldr	r0, [pc, #148]	; (8008a80 <lcd_send_cmd+0xd8>)
 80089ec:	f002 fac3 	bl	800af76 <HAL_I2C_GetError>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d0f9      	beq.n	80089ea <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80089f6:	bf00      	nop
 80089f8:	4821      	ldr	r0, [pc, #132]	; (8008a80 <lcd_send_cmd+0xd8>)
 80089fa:	f002 faaf 	bl	800af5c <HAL_I2C_GetState>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d1f9      	bne.n	80089f8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008a04:	4b1f      	ldr	r3, [pc, #124]	; (8008a84 <lcd_send_cmd+0xdc>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d116      	bne.n	8008a3a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73fb      	strb	r3, [r7, #15]
 8008a10:	e00f      	b.n	8008a32 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	3310      	adds	r3, #16
 8008a16:	443b      	add	r3, r7
 8008a18:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	f022 0208 	bic.w	r2, r2, #8
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	3310      	adds	r3, #16
 8008a26:	443b      	add	r3, r7
 8008a28:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	73fb      	strb	r3, [r7, #15]
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d9ec      	bls.n	8008a12 <lcd_send_cmd+0x6a>
 8008a38:	e015      	b.n	8008a66 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73bb      	strb	r3, [r7, #14]
 8008a3e:	e00f      	b.n	8008a60 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	3310      	adds	r3, #16
 8008a44:	443b      	add	r3, r7
 8008a46:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	f042 0208 	orr.w	r2, r2, #8
 8008a50:	b2d2      	uxtb	r2, r2
 8008a52:	3310      	adds	r3, #16
 8008a54:	443b      	add	r3, r7
 8008a56:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	73bb      	strb	r3, [r7, #14]
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d9ec      	bls.n	8008a40 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008a66:	f107 0208 	add.w	r2, r7, #8
 8008a6a:	2364      	movs	r3, #100	; 0x64
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	2304      	movs	r3, #4
 8008a70:	214e      	movs	r1, #78	; 0x4e
 8008a72:	4803      	ldr	r0, [pc, #12]	; (8008a80 <lcd_send_cmd+0xd8>)
 8008a74:	f001 fe12 	bl	800a69c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008a78:	bf00      	nop
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	200010d8 	.word	0x200010d8
 8008a84:	200010ac 	.word	0x200010ac

08008a88 <lcd_send_data>:

void lcd_send_data (char data) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af02      	add	r7, sp, #8
 8008a8e:	4603      	mov	r3, r0
 8008a90:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	f023 030f 	bic.w	r3, r3, #15
 8008a98:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008aa0:	7b7b      	ldrb	r3, [r7, #13]
 8008aa2:	f043 030d 	orr.w	r3, r3, #13
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008aaa:	7b7b      	ldrb	r3, [r7, #13]
 8008aac:	f043 0309 	orr.w	r3, r3, #9
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008ab4:	7b3b      	ldrb	r3, [r7, #12]
 8008ab6:	f043 030d 	orr.w	r3, r3, #13
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008abe:	7b3b      	ldrb	r3, [r7, #12]
 8008ac0:	f043 0309 	orr.w	r3, r3, #9
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008ac8:	bf00      	nop
 8008aca:	4825      	ldr	r0, [pc, #148]	; (8008b60 <lcd_send_data+0xd8>)
 8008acc:	f002 fa53 	bl	800af76 <HAL_I2C_GetError>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d0f9      	beq.n	8008aca <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008ad6:	bf00      	nop
 8008ad8:	4821      	ldr	r0, [pc, #132]	; (8008b60 <lcd_send_data+0xd8>)
 8008ada:	f002 fa3f 	bl	800af5c <HAL_I2C_GetState>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d1f9      	bne.n	8008ad8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008ae4:	4b1f      	ldr	r3, [pc, #124]	; (8008b64 <lcd_send_data+0xdc>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d116      	bne.n	8008b1a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
 8008af0:	e00f      	b.n	8008b12 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	3310      	adds	r3, #16
 8008af6:	443b      	add	r3, r7
 8008af8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	f022 0208 	bic.w	r2, r2, #8
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	3310      	adds	r3, #16
 8008b06:	443b      	add	r3, r7
 8008b08:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	73fb      	strb	r3, [r7, #15]
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d9ec      	bls.n	8008af2 <lcd_send_data+0x6a>
 8008b18:	e015      	b.n	8008b46 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73bb      	strb	r3, [r7, #14]
 8008b1e:	e00f      	b.n	8008b40 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	3310      	adds	r3, #16
 8008b24:	443b      	add	r3, r7
 8008b26:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	f042 0208 	orr.w	r2, r2, #8
 8008b30:	b2d2      	uxtb	r2, r2
 8008b32:	3310      	adds	r3, #16
 8008b34:	443b      	add	r3, r7
 8008b36:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	73bb      	strb	r3, [r7, #14]
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d9ec      	bls.n	8008b20 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008b46:	f107 0208 	add.w	r2, r7, #8
 8008b4a:	2364      	movs	r3, #100	; 0x64
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	2304      	movs	r3, #4
 8008b50:	214e      	movs	r1, #78	; 0x4e
 8008b52:	4803      	ldr	r0, [pc, #12]	; (8008b60 <lcd_send_data+0xd8>)
 8008b54:	f001 fda2 	bl	800a69c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	200010d8 	.word	0x200010d8
 8008b64:	200010ac 	.word	0x200010ac

08008b68 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008b70:	e006      	b.n	8008b80 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff ff84 	bl	8008a88 <lcd_send_data>
	while (*str) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1f4      	bne.n	8008b72 <lcd_send_string+0xa>
	}
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008b9e:	79fb      	ldrb	r3, [r7, #7]
 8008ba0:	f023 030f 	bic.w	r3, r3, #15
 8008ba4:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008bac:	7b7b      	ldrb	r3, [r7, #13]
 8008bae:	f043 030d 	orr.w	r3, r3, #13
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008bb6:	7b7b      	ldrb	r3, [r7, #13]
 8008bb8:	f043 0309 	orr.w	r3, r3, #9
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008bc0:	7b3b      	ldrb	r3, [r7, #12]
 8008bc2:	f043 030d 	orr.w	r3, r3, #13
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008bca:	7b3b      	ldrb	r3, [r7, #12]
 8008bcc:	f043 0309 	orr.w	r3, r3, #9
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008bd4:	bf00      	nop
 8008bd6:	4825      	ldr	r0, [pc, #148]	; (8008c6c <lcd_send_char+0xd8>)
 8008bd8:	f002 f9cd 	bl	800af76 <HAL_I2C_GetError>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d0f9      	beq.n	8008bd6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008be2:	bf00      	nop
 8008be4:	4821      	ldr	r0, [pc, #132]	; (8008c6c <lcd_send_char+0xd8>)
 8008be6:	f002 f9b9 	bl	800af5c <HAL_I2C_GetState>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b20      	cmp	r3, #32
 8008bee:	d1f9      	bne.n	8008be4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008bf0:	4b1f      	ldr	r3, [pc, #124]	; (8008c70 <lcd_send_char+0xdc>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d116      	bne.n	8008c26 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
 8008bfc:	e00f      	b.n	8008c1e <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	3310      	adds	r3, #16
 8008c02:	443b      	add	r3, r7
 8008c04:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	f022 0208 	bic.w	r2, r2, #8
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	3310      	adds	r3, #16
 8008c12:	443b      	add	r3, r7
 8008c14:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	73fb      	strb	r3, [r7, #15]
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d9ec      	bls.n	8008bfe <lcd_send_char+0x6a>
 8008c24:	e015      	b.n	8008c52 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008c26:	2300      	movs	r3, #0
 8008c28:	73bb      	strb	r3, [r7, #14]
 8008c2a:	e00f      	b.n	8008c4c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	3310      	adds	r3, #16
 8008c30:	443b      	add	r3, r7
 8008c32:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	f042 0208 	orr.w	r2, r2, #8
 8008c3c:	b2d2      	uxtb	r2, r2
 8008c3e:	3310      	adds	r3, #16
 8008c40:	443b      	add	r3, r7
 8008c42:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	73bb      	strb	r3, [r7, #14]
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d9ec      	bls.n	8008c2c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008c52:	f107 0208 	add.w	r2, r7, #8
 8008c56:	2364      	movs	r3, #100	; 0x64
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	2304      	movs	r3, #4
 8008c5c:	214e      	movs	r1, #78	; 0x4e
 8008c5e:	4803      	ldr	r0, [pc, #12]	; (8008c6c <lcd_send_char+0xd8>)
 8008c60:	f001 fd1c 	bl	800a69c <HAL_I2C_Master_Transmit>
}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	200010d8 	.word	0x200010d8
 8008c70:	200010ac 	.word	0x200010ac

08008c74 <lcd_init>:

void lcd_init (void) {
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008c78:	2002      	movs	r0, #2
 8008c7a:	f7ff fe95 	bl	80089a8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008c7e:	2028      	movs	r0, #40	; 0x28
 8008c80:	f7ff fe92 	bl	80089a8 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008c84:	200c      	movs	r0, #12
 8008c86:	f7ff fe8f 	bl	80089a8 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008c8a:	2080      	movs	r0, #128	; 0x80
 8008c8c:	f7ff fe8c 	bl	80089a8 <lcd_send_cmd>
	lcd_backlight(1);
 8008c90:	2001      	movs	r0, #1
 8008c92:	f000 f86d 	bl	8008d70 <lcd_backlight>
}
 8008c96:	bf00      	nop
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	460a      	mov	r2, r1
 8008ca4:	71fb      	strb	r3, [r7, #7]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d106      	bne.n	8008cbe <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008cb0:	79bb      	ldrb	r3, [r7, #6]
 8008cb2:	337f      	adds	r3, #127	; 0x7f
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fe76 	bl	80089a8 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008cbc:	e008      	b.n	8008cd0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d105      	bne.n	8008cd0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008cc4:	79bb      	ldrb	r3, [r7, #6]
 8008cc6:	3b41      	subs	r3, #65	; 0x41
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff fe6c 	bl	80089a8 <lcd_send_cmd>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	603a      	str	r2, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008ce8:	79ba      	ldrb	r2, [r7, #6]
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff ffd3 	bl	8008c9a <lcd_gotoxy>
	lcd_send_string(str);
 8008cf4:	6838      	ldr	r0, [r7, #0]
 8008cf6:	f7ff ff37 	bl	8008b68 <lcd_send_string>
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	4603      	mov	r3, r0
 8008d0a:	71fb      	strb	r3, [r7, #7]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	71bb      	strb	r3, [r7, #6]
 8008d10:	4613      	mov	r3, r2
 8008d12:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008d14:	79ba      	ldrb	r2, [r7, #6]
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff ffbd 	bl	8008c9a <lcd_gotoxy>
    lcd_send_char(ch);
 8008d20:	797b      	ldrb	r3, [r7, #5]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff ff36 	bl	8008b94 <lcd_send_char>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <lcd_clear>:

void lcd_clear(void) {
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008d34:	2001      	movs	r0, #1
 8008d36:	f7ff fe37 	bl	80089a8 <lcd_send_cmd>
    HAL_Delay(2);
 8008d3a:	2002      	movs	r0, #2
 8008d3c:	f000 fd22 	bl	8009784 <HAL_Delay>
}
 8008d40:	bf00      	nop
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	460a      	mov	r2, r1
 8008d4e:	71fb      	strb	r3, [r7, #7]
 8008d50:	4613      	mov	r3, r2
 8008d52:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008d54:	79ba      	ldrb	r2, [r7, #6]
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff ff9d 	bl	8008c9a <lcd_gotoxy>

    lcd_send_char(' ');
 8008d60:	2020      	movs	r0, #32
 8008d62:	f7ff ff17 	bl	8008b94 <lcd_send_char>
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008d7a:	4a05      	ldr	r2, [pc, #20]	; (8008d90 <lcd_backlight+0x20>)
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008d80:	2000      	movs	r0, #0
 8008d82:	f7ff fe11 	bl	80089a8 <lcd_send_cmd>
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	200010ac 	.word	0x200010ac

08008d94 <lcd_cursor>:

void lcd_cursor(int state) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d106      	bne.n	8008db0 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8008da2:	200e      	movs	r0, #14
 8008da4:	f7ff fe00 	bl	80089a8 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008da8:	200f      	movs	r0, #15
 8008daa:	f7ff fdfd 	bl	80089a8 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008dae:	e002      	b.n	8008db6 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008db0:	200c      	movs	r0, #12
 8008db2:	f7ff fdf9 	bl	80089a8 <lcd_send_cmd>
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	4a03      	ldr	r2, [pc, #12]	; (8008ddc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008dd0:	6013      	str	r3, [r2, #0]
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr
 8008ddc:	20000ac8 	.word	0x20000ac8

08008de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008de4:	f000 fc6c 	bl	80096c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008de8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008dec:	f000 fcca 	bl	8009784 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008df0:	f000 f89c 	bl	8008f2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008df4:	f000 f9be 	bl	8009174 <MX_GPIO_Init>
  MX_CAN_Init();
 8008df8:	f000 f8de 	bl	8008fb8 <MX_CAN_Init>
  MX_I2C1_Init();
 8008dfc:	f000 f910 	bl	8009020 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008e00:	f000 f93c 	bl	800907c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008e04:	f000 f98c 	bl	8009120 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008e08:	2201      	movs	r2, #1
 8008e0a:	2140      	movs	r1, #64	; 0x40
 8008e0c:	483e      	ldr	r0, [pc, #248]	; (8008f08 <main+0x128>)
 8008e0e:	f001 faa0 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008e12:	2201      	movs	r2, #1
 8008e14:	2180      	movs	r1, #128	; 0x80
 8008e16:	483c      	ldr	r0, [pc, #240]	; (8008f08 <main+0x128>)
 8008e18:	f001 fa9b 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008e1c:	200a      	movs	r0, #10
 8008e1e:	f000 fcb1 	bl	8009784 <HAL_Delay>
  lcd_init();
 8008e22:	f7ff ff27 	bl	8008c74 <lcd_init>
  HAL_Delay(10);
 8008e26:	200a      	movs	r0, #10
 8008e28:	f000 fcac 	bl	8009784 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008e2c:	4837      	ldr	r0, [pc, #220]	; (8008f0c <main+0x12c>)
 8008e2e:	f003 f943 	bl	800c0b8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008e32:	bf00      	nop
 8008e34:	4836      	ldr	r0, [pc, #216]	; (8008f10 <main+0x130>)
 8008e36:	f002 f89e 	bl	800af76 <HAL_I2C_GetError>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d0f9      	beq.n	8008e34 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008e40:	bf00      	nop
 8008e42:	4833      	ldr	r0, [pc, #204]	; (8008f10 <main+0x130>)
 8008e44:	f002 f88a 	bl	800af5c <HAL_I2C_GetState>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d1f9      	bne.n	8008e42 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e54:	482c      	ldr	r0, [pc, #176]	; (8008f08 <main+0x128>)
 8008e56:	f001 fa7c 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e60:	4829      	ldr	r0, [pc, #164]	; (8008f08 <main+0x128>)
 8008e62:	f001 fa76 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008e66:	2200      	movs	r2, #0
 8008e68:	2104      	movs	r1, #4
 8008e6a:	4827      	ldr	r0, [pc, #156]	; (8008f08 <main+0x128>)
 8008e6c:	f001 fa71 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008e70:	2200      	movs	r2, #0
 8008e72:	2102      	movs	r1, #2
 8008e74:	4824      	ldr	r0, [pc, #144]	; (8008f08 <main+0x128>)
 8008e76:	f001 fa6c 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	4822      	ldr	r0, [pc, #136]	; (8008f08 <main+0x128>)
 8008e80:	f001 fa67 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008e84:	2200      	movs	r2, #0
 8008e86:	2120      	movs	r1, #32
 8008e88:	4822      	ldr	r0, [pc, #136]	; (8008f14 <main+0x134>)
 8008e8a:	f001 fa62 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2110      	movs	r1, #16
 8008e92:	4820      	ldr	r0, [pc, #128]	; (8008f14 <main+0x134>)
 8008e94:	f001 fa5d 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2180      	movs	r1, #128	; 0x80
 8008e9c:	481e      	ldr	r0, [pc, #120]	; (8008f18 <main+0x138>)
 8008e9e:	f001 fa58 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2140      	movs	r1, #64	; 0x40
 8008ea6:	481c      	ldr	r0, [pc, #112]	; (8008f18 <main+0x138>)
 8008ea8:	f001 fa53 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008eac:	2200      	movs	r2, #0
 8008eae:	2120      	movs	r1, #32
 8008eb0:	4819      	ldr	r0, [pc, #100]	; (8008f18 <main+0x138>)
 8008eb2:	f001 fa4e 	bl	800a352 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2110      	movs	r1, #16
 8008eba:	4817      	ldr	r0, [pc, #92]	; (8008f18 <main+0x138>)
 8008ebc:	f001 fa49 	bl	800a352 <HAL_GPIO_WritePin>

  i2cTest();
 8008ec0:	f7f8 f814 	bl	8000eec <i2cTest>
  HAL_Delay(100);
 8008ec4:	2064      	movs	r0, #100	; 0x64
 8008ec6:	f000 fc5d 	bl	8009784 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008eca:	4a14      	ldr	r2, [pc, #80]	; (8008f1c <main+0x13c>)
 8008ecc:	2101      	movs	r1, #1
 8008ece:	2001      	movs	r0, #1
 8008ed0:	f7ff ff02 	bl	8008cd8 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008ed4:	4a12      	ldr	r2, [pc, #72]	; (8008f20 <main+0x140>)
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	2002      	movs	r0, #2
 8008eda:	f7ff fefd 	bl	8008cd8 <lcd_print>
  //lcd_print(1,1,"     RMK-V1     ");
  //lcd_print(2,1,"ONDTECH ESP CONT");
  HAL_Delay(1000);
 8008ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ee2:	f000 fc4f 	bl	8009784 <HAL_Delay>
  lcd_clear();
 8008ee6:	f7ff ff23 	bl	8008d30 <lcd_clear>

  eepromKontrol();
 8008eea:	f7f7 f9a3 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008eee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ef2:	f000 fc47 	bl	8009784 <HAL_Delay>

  backLightTimer = millis;
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <main+0x144>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a0b      	ldr	r2, [pc, #44]	; (8008f28 <main+0x148>)
 8008efc:	6013      	str	r3, [r2, #0]

  iotSetup();
 8008efe:	f7ff fc99 	bl	8008834 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008f02:	f7fd fe31 	bl	8006b68 <mainLoop>
 8008f06:	e7fc      	b.n	8008f02 <main+0x122>
 8008f08:	40010c00 	.word	0x40010c00
 8008f0c:	2000112c 	.word	0x2000112c
 8008f10:	200010d8 	.word	0x200010d8
 8008f14:	40011000 	.word	0x40011000
 8008f18:	40010800 	.word	0x40010800
 8008f1c:	200000a0 	.word	0x200000a0
 8008f20:	200000b0 	.word	0x200000b0
 8008f24:	20000ac8 	.word	0x20000ac8
 8008f28:	20000ae4 	.word	0x20000ae4

08008f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b090      	sub	sp, #64	; 0x40
 8008f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f32:	f107 0318 	add.w	r3, r7, #24
 8008f36:	2228      	movs	r2, #40	; 0x28
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f004 fbca 	bl	800d6d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f40:	1d3b      	adds	r3, r7, #4
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	605a      	str	r2, [r3, #4]
 8008f48:	609a      	str	r2, [r3, #8]
 8008f4a:	60da      	str	r2, [r3, #12]
 8008f4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f60:	2302      	movs	r3, #2
 8008f62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008f6a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f70:	f107 0318 	add.w	r3, r7, #24
 8008f74:	4618      	mov	r0, r3
 8008f76:	f002 fc3f 	bl	800b7f8 <HAL_RCC_OscConfig>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008f80:	f000 f9a2 	bl	80092c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f84:	230f      	movs	r3, #15
 8008f86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008f96:	2300      	movs	r3, #0
 8008f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008f9a:	1d3b      	adds	r3, r7, #4
 8008f9c:	2102      	movs	r1, #2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f002 feac 	bl	800bcfc <HAL_RCC_ClockConfig>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008faa:	f000 f98d 	bl	80092c8 <Error_Handler>
  }
}
 8008fae:	bf00      	nop
 8008fb0:	3740      	adds	r7, #64	; 0x40
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008fbc:	4b16      	ldr	r3, [pc, #88]	; (8009018 <MX_CAN_Init+0x60>)
 8008fbe:	4a17      	ldr	r2, [pc, #92]	; (800901c <MX_CAN_Init+0x64>)
 8008fc0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008fc2:	4b15      	ldr	r3, [pc, #84]	; (8009018 <MX_CAN_Init+0x60>)
 8008fc4:	2210      	movs	r2, #16
 8008fc6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008fc8:	4b13      	ldr	r3, [pc, #76]	; (8009018 <MX_CAN_Init+0x60>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <MX_CAN_Init+0x60>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008fd4:	4b10      	ldr	r3, [pc, #64]	; (8009018 <MX_CAN_Init+0x60>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008fda:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <MX_CAN_Init+0x60>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <MX_CAN_Init+0x60>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <MX_CAN_Init+0x60>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <MX_CAN_Init+0x60>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008ff2:	4b09      	ldr	r3, [pc, #36]	; (8009018 <MX_CAN_Init+0x60>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <MX_CAN_Init+0x60>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008ffe:	4b06      	ldr	r3, [pc, #24]	; (8009018 <MX_CAN_Init+0x60>)
 8009000:	2200      	movs	r2, #0
 8009002:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009004:	4804      	ldr	r0, [pc, #16]	; (8009018 <MX_CAN_Init+0x60>)
 8009006:	f000 fbe1 	bl	80097cc <HAL_CAN_Init>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009010:	f000 f95a 	bl	80092c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009014:	bf00      	nop
 8009016:	bd80      	pop	{r7, pc}
 8009018:	200010b0 	.word	0x200010b0
 800901c:	40006400 	.word	0x40006400

08009020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009024:	4b12      	ldr	r3, [pc, #72]	; (8009070 <MX_I2C1_Init+0x50>)
 8009026:	4a13      	ldr	r2, [pc, #76]	; (8009074 <MX_I2C1_Init+0x54>)
 8009028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800902a:	4b11      	ldr	r3, [pc, #68]	; (8009070 <MX_I2C1_Init+0x50>)
 800902c:	4a12      	ldr	r2, [pc, #72]	; (8009078 <MX_I2C1_Init+0x58>)
 800902e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009030:	4b0f      	ldr	r3, [pc, #60]	; (8009070 <MX_I2C1_Init+0x50>)
 8009032:	2200      	movs	r2, #0
 8009034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009036:	4b0e      	ldr	r3, [pc, #56]	; (8009070 <MX_I2C1_Init+0x50>)
 8009038:	2200      	movs	r2, #0
 800903a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800903c:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <MX_I2C1_Init+0x50>)
 800903e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009042:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <MX_I2C1_Init+0x50>)
 8009046:	2200      	movs	r2, #0
 8009048:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800904a:	4b09      	ldr	r3, [pc, #36]	; (8009070 <MX_I2C1_Init+0x50>)
 800904c:	2200      	movs	r2, #0
 800904e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009050:	4b07      	ldr	r3, [pc, #28]	; (8009070 <MX_I2C1_Init+0x50>)
 8009052:	2200      	movs	r2, #0
 8009054:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009056:	4b06      	ldr	r3, [pc, #24]	; (8009070 <MX_I2C1_Init+0x50>)
 8009058:	2200      	movs	r2, #0
 800905a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800905c:	4804      	ldr	r0, [pc, #16]	; (8009070 <MX_I2C1_Init+0x50>)
 800905e:	f001 f9a9 	bl	800a3b4 <HAL_I2C_Init>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009068:	f000 f92e 	bl	80092c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800906c:	bf00      	nop
 800906e:	bd80      	pop	{r7, pc}
 8009070:	200010d8 	.word	0x200010d8
 8009074:	40005400 	.word	0x40005400
 8009078:	00061a80 	.word	0x00061a80

0800907c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	605a      	str	r2, [r3, #4]
 800908c:	609a      	str	r2, [r3, #8]
 800908e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009090:	463b      	mov	r3, r7
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009098:	4b1f      	ldr	r3, [pc, #124]	; (8009118 <MX_TIM1_Init+0x9c>)
 800909a:	4a20      	ldr	r2, [pc, #128]	; (800911c <MX_TIM1_Init+0xa0>)
 800909c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800909e:	4b1e      	ldr	r3, [pc, #120]	; (8009118 <MX_TIM1_Init+0x9c>)
 80090a0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80090a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090a6:	4b1c      	ldr	r3, [pc, #112]	; (8009118 <MX_TIM1_Init+0x9c>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80090ac:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <MX_TIM1_Init+0x9c>)
 80090ae:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80090b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090b4:	4b18      	ldr	r3, [pc, #96]	; (8009118 <MX_TIM1_Init+0x9c>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80090ba:	4b17      	ldr	r3, [pc, #92]	; (8009118 <MX_TIM1_Init+0x9c>)
 80090bc:	2200      	movs	r2, #0
 80090be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090c0:	4b15      	ldr	r3, [pc, #84]	; (8009118 <MX_TIM1_Init+0x9c>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80090c6:	4814      	ldr	r0, [pc, #80]	; (8009118 <MX_TIM1_Init+0x9c>)
 80090c8:	f002 ffa6 	bl	800c018 <HAL_TIM_Base_Init>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80090d2:	f000 f8f9 	bl	80092c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80090dc:	f107 0308 	add.w	r3, r7, #8
 80090e0:	4619      	mov	r1, r3
 80090e2:	480d      	ldr	r0, [pc, #52]	; (8009118 <MX_TIM1_Init+0x9c>)
 80090e4:	f003 f950 	bl	800c388 <HAL_TIM_ConfigClockSource>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80090ee:	f000 f8eb 	bl	80092c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090f2:	2300      	movs	r3, #0
 80090f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80090fa:	463b      	mov	r3, r7
 80090fc:	4619      	mov	r1, r3
 80090fe:	4806      	ldr	r0, [pc, #24]	; (8009118 <MX_TIM1_Init+0x9c>)
 8009100:	f003 fb3e 	bl	800c780 <HAL_TIMEx_MasterConfigSynchronization>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800910a:	f000 f8dd 	bl	80092c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800910e:	bf00      	nop
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	2000112c 	.word	0x2000112c
 800911c:	40012c00 	.word	0x40012c00

08009120 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009124:	4b11      	ldr	r3, [pc, #68]	; (800916c <MX_USART1_UART_Init+0x4c>)
 8009126:	4a12      	ldr	r2, [pc, #72]	; (8009170 <MX_USART1_UART_Init+0x50>)
 8009128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800912a:	4b10      	ldr	r3, [pc, #64]	; (800916c <MX_USART1_UART_Init+0x4c>)
 800912c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009132:	4b0e      	ldr	r3, [pc, #56]	; (800916c <MX_USART1_UART_Init+0x4c>)
 8009134:	2200      	movs	r2, #0
 8009136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009138:	4b0c      	ldr	r3, [pc, #48]	; (800916c <MX_USART1_UART_Init+0x4c>)
 800913a:	2200      	movs	r2, #0
 800913c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800913e:	4b0b      	ldr	r3, [pc, #44]	; (800916c <MX_USART1_UART_Init+0x4c>)
 8009140:	2200      	movs	r2, #0
 8009142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009144:	4b09      	ldr	r3, [pc, #36]	; (800916c <MX_USART1_UART_Init+0x4c>)
 8009146:	220c      	movs	r2, #12
 8009148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800914a:	4b08      	ldr	r3, [pc, #32]	; (800916c <MX_USART1_UART_Init+0x4c>)
 800914c:	2200      	movs	r2, #0
 800914e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009150:	4b06      	ldr	r3, [pc, #24]	; (800916c <MX_USART1_UART_Init+0x4c>)
 8009152:	2200      	movs	r2, #0
 8009154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009156:	4805      	ldr	r0, [pc, #20]	; (800916c <MX_USART1_UART_Init+0x4c>)
 8009158:	f003 fb90 	bl	800c87c <HAL_UART_Init>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009162:	f000 f8b1 	bl	80092c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009166:	bf00      	nop
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20001174 	.word	0x20001174
 8009170:	40013800 	.word	0x40013800

08009174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800917a:	f107 0310 	add.w	r3, r7, #16
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	605a      	str	r2, [r3, #4]
 8009184:	609a      	str	r2, [r3, #8]
 8009186:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009188:	4b4b      	ldr	r3, [pc, #300]	; (80092b8 <MX_GPIO_Init+0x144>)
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	4a4a      	ldr	r2, [pc, #296]	; (80092b8 <MX_GPIO_Init+0x144>)
 800918e:	f043 0310 	orr.w	r3, r3, #16
 8009192:	6193      	str	r3, [r2, #24]
 8009194:	4b48      	ldr	r3, [pc, #288]	; (80092b8 <MX_GPIO_Init+0x144>)
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80091a0:	4b45      	ldr	r3, [pc, #276]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	4a44      	ldr	r2, [pc, #272]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091a6:	f043 0320 	orr.w	r3, r3, #32
 80091aa:	6193      	str	r3, [r2, #24]
 80091ac:	4b42      	ldr	r3, [pc, #264]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	f003 0320 	and.w	r3, r3, #32
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80091b8:	4b3f      	ldr	r3, [pc, #252]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	4a3e      	ldr	r2, [pc, #248]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091be:	f043 0304 	orr.w	r3, r3, #4
 80091c2:	6193      	str	r3, [r2, #24]
 80091c4:	4b3c      	ldr	r3, [pc, #240]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	607b      	str	r3, [r7, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80091d0:	4b39      	ldr	r3, [pc, #228]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	4a38      	ldr	r2, [pc, #224]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091d6:	f043 0308 	orr.w	r3, r3, #8
 80091da:	6193      	str	r3, [r2, #24]
 80091dc:	4b36      	ldr	r3, [pc, #216]	; (80092b8 <MX_GPIO_Init+0x144>)
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	603b      	str	r3, [r7, #0]
 80091e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80091e8:	2200      	movs	r2, #0
 80091ea:	21f0      	movs	r1, #240	; 0xf0
 80091ec:	4833      	ldr	r0, [pc, #204]	; (80092bc <MX_GPIO_Init+0x148>)
 80091ee:	f001 f8b0 	bl	800a352 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80091f2:	2200      	movs	r2, #0
 80091f4:	f241 0130 	movw	r1, #4144	; 0x1030
 80091f8:	4831      	ldr	r0, [pc, #196]	; (80092c0 <MX_GPIO_Init+0x14c>)
 80091fa:	f001 f8aa 	bl	800a352 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80091fe:	2200      	movs	r2, #0
 8009200:	f640 4107 	movw	r1, #3079	; 0xc07
 8009204:	482f      	ldr	r0, [pc, #188]	; (80092c4 <MX_GPIO_Init+0x150>)
 8009206:	f001 f8a4 	bl	800a352 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800920a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800920e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009214:	2300      	movs	r3, #0
 8009216:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009218:	f107 0310 	add.w	r3, r7, #16
 800921c:	4619      	mov	r1, r3
 800921e:	4828      	ldr	r0, [pc, #160]	; (80092c0 <MX_GPIO_Init+0x14c>)
 8009220:	f000 fe20 	bl	8009e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009224:	f248 130f 	movw	r3, #33039	; 0x810f
 8009228:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800922e:	2300      	movs	r3, #0
 8009230:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	4619      	mov	r1, r3
 8009238:	4820      	ldr	r0, [pc, #128]	; (80092bc <MX_GPIO_Init+0x148>)
 800923a:	f000 fe13 	bl	8009e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800923e:	23f0      	movs	r3, #240	; 0xf0
 8009240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009242:	2301      	movs	r3, #1
 8009244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009246:	2300      	movs	r3, #0
 8009248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800924a:	2302      	movs	r3, #2
 800924c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800924e:	f107 0310 	add.w	r3, r7, #16
 8009252:	4619      	mov	r1, r3
 8009254:	4819      	ldr	r0, [pc, #100]	; (80092bc <MX_GPIO_Init+0x148>)
 8009256:	f000 fe05 	bl	8009e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800925a:	f241 0330 	movw	r3, #4144	; 0x1030
 800925e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009260:	2301      	movs	r3, #1
 8009262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009268:	2302      	movs	r3, #2
 800926a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800926c:	f107 0310 	add.w	r3, r7, #16
 8009270:	4619      	mov	r1, r3
 8009272:	4813      	ldr	r0, [pc, #76]	; (80092c0 <MX_GPIO_Init+0x14c>)
 8009274:	f000 fdf6 	bl	8009e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009278:	f640 4307 	movw	r3, #3079	; 0xc07
 800927c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800927e:	2301      	movs	r3, #1
 8009280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009282:	2300      	movs	r3, #0
 8009284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009286:	2302      	movs	r3, #2
 8009288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800928a:	f107 0310 	add.w	r3, r7, #16
 800928e:	4619      	mov	r1, r3
 8009290:	480c      	ldr	r0, [pc, #48]	; (80092c4 <MX_GPIO_Init+0x150>)
 8009292:	f000 fde7 	bl	8009e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8009296:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800929a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092a4:	f107 0310 	add.w	r3, r7, #16
 80092a8:	4619      	mov	r1, r3
 80092aa:	4806      	ldr	r0, [pc, #24]	; (80092c4 <MX_GPIO_Init+0x150>)
 80092ac:	f000 fdda 	bl	8009e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80092b0:	bf00      	nop
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	40021000 	.word	0x40021000
 80092bc:	40010800 	.word	0x40010800
 80092c0:	40011000 	.word	0x40011000
 80092c4:	40010c00 	.word	0x40010c00

080092c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80092cc:	bf00      	nop
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bc80      	pop	{r7}
 80092d2:	4770      	bx	lr

080092d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80092da:	4b15      	ldr	r3, [pc, #84]	; (8009330 <HAL_MspInit+0x5c>)
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	4a14      	ldr	r2, [pc, #80]	; (8009330 <HAL_MspInit+0x5c>)
 80092e0:	f043 0301 	orr.w	r3, r3, #1
 80092e4:	6193      	str	r3, [r2, #24]
 80092e6:	4b12      	ldr	r3, [pc, #72]	; (8009330 <HAL_MspInit+0x5c>)
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	60bb      	str	r3, [r7, #8]
 80092f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092f2:	4b0f      	ldr	r3, [pc, #60]	; (8009330 <HAL_MspInit+0x5c>)
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	4a0e      	ldr	r2, [pc, #56]	; (8009330 <HAL_MspInit+0x5c>)
 80092f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092fc:	61d3      	str	r3, [r2, #28]
 80092fe:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <HAL_MspInit+0x5c>)
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009306:	607b      	str	r3, [r7, #4]
 8009308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800930a:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <HAL_MspInit+0x60>)
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	4a04      	ldr	r2, [pc, #16]	; (8009334 <HAL_MspInit+0x60>)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009326:	bf00      	nop
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr
 8009330:	40021000 	.word	0x40021000
 8009334:	40010000 	.word	0x40010000

08009338 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009340:	f107 0310 	add.w	r3, r7, #16
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	609a      	str	r2, [r3, #8]
 800934c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1c      	ldr	r2, [pc, #112]	; (80093c4 <HAL_CAN_MspInit+0x8c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d131      	bne.n	80093bc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009358:	4b1b      	ldr	r3, [pc, #108]	; (80093c8 <HAL_CAN_MspInit+0x90>)
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	4a1a      	ldr	r2, [pc, #104]	; (80093c8 <HAL_CAN_MspInit+0x90>)
 800935e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009362:	61d3      	str	r3, [r2, #28]
 8009364:	4b18      	ldr	r3, [pc, #96]	; (80093c8 <HAL_CAN_MspInit+0x90>)
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009370:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <HAL_CAN_MspInit+0x90>)
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	4a14      	ldr	r2, [pc, #80]	; (80093c8 <HAL_CAN_MspInit+0x90>)
 8009376:	f043 0304 	orr.w	r3, r3, #4
 800937a:	6193      	str	r3, [r2, #24]
 800937c:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <HAL_CAN_MspInit+0x90>)
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	60bb      	str	r3, [r7, #8]
 8009386:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800938c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009392:	2300      	movs	r3, #0
 8009394:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009396:	f107 0310 	add.w	r3, r7, #16
 800939a:	4619      	mov	r1, r3
 800939c:	480b      	ldr	r0, [pc, #44]	; (80093cc <HAL_CAN_MspInit+0x94>)
 800939e:	f000 fd61 	bl	8009e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80093a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a8:	2302      	movs	r3, #2
 80093aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80093ac:	2303      	movs	r3, #3
 80093ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093b0:	f107 0310 	add.w	r3, r7, #16
 80093b4:	4619      	mov	r1, r3
 80093b6:	4805      	ldr	r0, [pc, #20]	; (80093cc <HAL_CAN_MspInit+0x94>)
 80093b8:	f000 fd54 	bl	8009e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80093bc:	bf00      	nop
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40006400 	.word	0x40006400
 80093c8:	40021000 	.word	0x40021000
 80093cc:	40010800 	.word	0x40010800

080093d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093d8:	f107 0310 	add.w	r3, r7, #16
 80093dc:	2200      	movs	r2, #0
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	605a      	str	r2, [r3, #4]
 80093e2:	609a      	str	r2, [r3, #8]
 80093e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a15      	ldr	r2, [pc, #84]	; (8009440 <HAL_I2C_MspInit+0x70>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d123      	bne.n	8009438 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093f0:	4b14      	ldr	r3, [pc, #80]	; (8009444 <HAL_I2C_MspInit+0x74>)
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	4a13      	ldr	r2, [pc, #76]	; (8009444 <HAL_I2C_MspInit+0x74>)
 80093f6:	f043 0308 	orr.w	r3, r3, #8
 80093fa:	6193      	str	r3, [r2, #24]
 80093fc:	4b11      	ldr	r3, [pc, #68]	; (8009444 <HAL_I2C_MspInit+0x74>)
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	f003 0308 	and.w	r3, r3, #8
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009408:	23c0      	movs	r3, #192	; 0xc0
 800940a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800940c:	2312      	movs	r3, #18
 800940e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009410:	2303      	movs	r3, #3
 8009412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009414:	f107 0310 	add.w	r3, r7, #16
 8009418:	4619      	mov	r1, r3
 800941a:	480b      	ldr	r0, [pc, #44]	; (8009448 <HAL_I2C_MspInit+0x78>)
 800941c:	f000 fd22 	bl	8009e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009420:	4b08      	ldr	r3, [pc, #32]	; (8009444 <HAL_I2C_MspInit+0x74>)
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	4a07      	ldr	r2, [pc, #28]	; (8009444 <HAL_I2C_MspInit+0x74>)
 8009426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800942a:	61d3      	str	r3, [r2, #28]
 800942c:	4b05      	ldr	r3, [pc, #20]	; (8009444 <HAL_I2C_MspInit+0x74>)
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009434:	60bb      	str	r3, [r7, #8]
 8009436:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009438:	bf00      	nop
 800943a:	3720      	adds	r7, #32
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	40005400 	.word	0x40005400
 8009444:	40021000 	.word	0x40021000
 8009448:	40010c00 	.word	0x40010c00

0800944c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a0a      	ldr	r2, [pc, #40]	; (8009484 <HAL_I2C_MspDeInit+0x38>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d10d      	bne.n	800947a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800945e:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <HAL_I2C_MspDeInit+0x3c>)
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	4a09      	ldr	r2, [pc, #36]	; (8009488 <HAL_I2C_MspDeInit+0x3c>)
 8009464:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009468:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800946a:	2140      	movs	r1, #64	; 0x40
 800946c:	4807      	ldr	r0, [pc, #28]	; (800948c <HAL_I2C_MspDeInit+0x40>)
 800946e:	f000 fe8d 	bl	800a18c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009472:	2180      	movs	r1, #128	; 0x80
 8009474:	4805      	ldr	r0, [pc, #20]	; (800948c <HAL_I2C_MspDeInit+0x40>)
 8009476:	f000 fe89 	bl	800a18c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	40005400 	.word	0x40005400
 8009488:	40021000 	.word	0x40021000
 800948c:	40010c00 	.word	0x40010c00

08009490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <HAL_TIM_Base_MspInit+0x44>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d113      	bne.n	80094ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <HAL_TIM_Base_MspInit+0x48>)
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	4a0c      	ldr	r2, [pc, #48]	; (80094d8 <HAL_TIM_Base_MspInit+0x48>)
 80094a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80094ac:	6193      	str	r3, [r2, #24]
 80094ae:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <HAL_TIM_Base_MspInit+0x48>)
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	2019      	movs	r0, #25
 80094c0:	f000 fb57 	bl	8009b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80094c4:	2019      	movs	r0, #25
 80094c6:	f000 fb70 	bl	8009baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40012c00 	.word	0x40012c00
 80094d8:	40021000 	.word	0x40021000

080094dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094e4:	f107 0310 	add.w	r3, r7, #16
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	605a      	str	r2, [r3, #4]
 80094ee:	609a      	str	r2, [r3, #8]
 80094f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a20      	ldr	r2, [pc, #128]	; (8009578 <HAL_UART_MspInit+0x9c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d139      	bne.n	8009570 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80094fc:	4b1f      	ldr	r3, [pc, #124]	; (800957c <HAL_UART_MspInit+0xa0>)
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	4a1e      	ldr	r2, [pc, #120]	; (800957c <HAL_UART_MspInit+0xa0>)
 8009502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009506:	6193      	str	r3, [r2, #24]
 8009508:	4b1c      	ldr	r3, [pc, #112]	; (800957c <HAL_UART_MspInit+0xa0>)
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009514:	4b19      	ldr	r3, [pc, #100]	; (800957c <HAL_UART_MspInit+0xa0>)
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	4a18      	ldr	r2, [pc, #96]	; (800957c <HAL_UART_MspInit+0xa0>)
 800951a:	f043 0304 	orr.w	r3, r3, #4
 800951e:	6193      	str	r3, [r2, #24]
 8009520:	4b16      	ldr	r3, [pc, #88]	; (800957c <HAL_UART_MspInit+0xa0>)
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	60bb      	str	r3, [r7, #8]
 800952a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800952c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009532:	2302      	movs	r3, #2
 8009534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009536:	2303      	movs	r3, #3
 8009538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800953a:	f107 0310 	add.w	r3, r7, #16
 800953e:	4619      	mov	r1, r3
 8009540:	480f      	ldr	r0, [pc, #60]	; (8009580 <HAL_UART_MspInit+0xa4>)
 8009542:	f000 fc8f 	bl	8009e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800954a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009550:	2300      	movs	r3, #0
 8009552:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009554:	f107 0310 	add.w	r3, r7, #16
 8009558:	4619      	mov	r1, r3
 800955a:	4809      	ldr	r0, [pc, #36]	; (8009580 <HAL_UART_MspInit+0xa4>)
 800955c:	f000 fc82 	bl	8009e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009560:	2200      	movs	r2, #0
 8009562:	2100      	movs	r1, #0
 8009564:	2025      	movs	r0, #37	; 0x25
 8009566:	f000 fb04 	bl	8009b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800956a:	2025      	movs	r0, #37	; 0x25
 800956c:	f000 fb1d 	bl	8009baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009570:	bf00      	nop
 8009572:	3720      	adds	r7, #32
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	40013800 	.word	0x40013800
 800957c:	40021000 	.word	0x40021000
 8009580:	40010800 	.word	0x40010800

08009584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009584:	b480      	push	{r7}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009588:	e7fe      	b.n	8009588 <NMI_Handler+0x4>

0800958a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800958a:	b480      	push	{r7}
 800958c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800958e:	e7fe      	b.n	800958e <HardFault_Handler+0x4>

08009590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009594:	e7fe      	b.n	8009594 <MemManage_Handler+0x4>

08009596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009596:	b480      	push	{r7}
 8009598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800959a:	e7fe      	b.n	800959a <BusFault_Handler+0x4>

0800959c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80095a0:	e7fe      	b.n	80095a0 <UsageFault_Handler+0x4>

080095a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80095a2:	b480      	push	{r7}
 80095a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr

080095ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80095ae:	b480      	push	{r7}
 80095b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80095b2:	bf00      	nop
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr

080095ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80095ba:	b480      	push	{r7}
 80095bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80095be:	bf00      	nop
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr

080095c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80095ca:	f000 f8bf 	bl	800974c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80095ce:	bf00      	nop
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095d8:	4802      	ldr	r0, [pc, #8]	; (80095e4 <TIM1_UP_IRQHandler+0x10>)
 80095da:	f002 fdcd 	bl	800c178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	2000112c 	.word	0x2000112c

080095e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80095ec:	4802      	ldr	r0, [pc, #8]	; (80095f8 <USART1_IRQHandler+0x10>)
 80095ee:	f003 f9ef 	bl	800c9d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80095f2:	bf00      	nop
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	20001174 	.word	0x20001174

080095fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009604:	4a14      	ldr	r2, [pc, #80]	; (8009658 <_sbrk+0x5c>)
 8009606:	4b15      	ldr	r3, [pc, #84]	; (800965c <_sbrk+0x60>)
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009610:	4b13      	ldr	r3, [pc, #76]	; (8009660 <_sbrk+0x64>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009618:	4b11      	ldr	r3, [pc, #68]	; (8009660 <_sbrk+0x64>)
 800961a:	4a12      	ldr	r2, [pc, #72]	; (8009664 <_sbrk+0x68>)
 800961c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800961e:	4b10      	ldr	r3, [pc, #64]	; (8009660 <_sbrk+0x64>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4413      	add	r3, r2
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	429a      	cmp	r2, r3
 800962a:	d207      	bcs.n	800963c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800962c:	f004 f86a 	bl	800d704 <__errno>
 8009630:	4603      	mov	r3, r0
 8009632:	220c      	movs	r2, #12
 8009634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800963a:	e009      	b.n	8009650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800963c:	4b08      	ldr	r3, [pc, #32]	; (8009660 <_sbrk+0x64>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009642:	4b07      	ldr	r3, [pc, #28]	; (8009660 <_sbrk+0x64>)
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	4a05      	ldr	r2, [pc, #20]	; (8009660 <_sbrk+0x64>)
 800964c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800964e:	68fb      	ldr	r3, [r7, #12]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	2000c000 	.word	0x2000c000
 800965c:	00000400 	.word	0x00000400
 8009660:	200011bc 	.word	0x200011bc
 8009664:	20001310 	.word	0x20001310

08009668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009668:	b480      	push	{r7}
 800966a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800966c:	bf00      	nop
 800966e:	46bd      	mov	sp, r7
 8009670:	bc80      	pop	{r7}
 8009672:	4770      	bx	lr

08009674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009674:	480c      	ldr	r0, [pc, #48]	; (80096a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009676:	490d      	ldr	r1, [pc, #52]	; (80096ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009678:	4a0d      	ldr	r2, [pc, #52]	; (80096b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800967a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800967c:	e002      	b.n	8009684 <LoopCopyDataInit>

0800967e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800967e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009682:	3304      	adds	r3, #4

08009684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009688:	d3f9      	bcc.n	800967e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800968a:	4a0a      	ldr	r2, [pc, #40]	; (80096b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800968c:	4c0a      	ldr	r4, [pc, #40]	; (80096b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800968e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009690:	e001      	b.n	8009696 <LoopFillZerobss>

08009692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009694:	3204      	adds	r2, #4

08009696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009698:	d3fb      	bcc.n	8009692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800969a:	f7ff ffe5 	bl	8009668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800969e:	f004 f837 	bl	800d710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80096a2:	f7ff fb9d 	bl	8008de0 <main>
  bx lr
 80096a6:	4770      	bx	lr
  ldr r0, =_sdata
 80096a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80096ac:	200009fc 	.word	0x200009fc
  ldr r2, =_sidata
 80096b0:	0800eefc 	.word	0x0800eefc
  ldr r2, =_sbss
 80096b4:	200009fc 	.word	0x200009fc
  ldr r4, =_ebss
 80096b8:	2000130c 	.word	0x2000130c

080096bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80096bc:	e7fe      	b.n	80096bc <ADC1_2_IRQHandler>
	...

080096c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80096c4:	4b08      	ldr	r3, [pc, #32]	; (80096e8 <HAL_Init+0x28>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a07      	ldr	r2, [pc, #28]	; (80096e8 <HAL_Init+0x28>)
 80096ca:	f043 0310 	orr.w	r3, r3, #16
 80096ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80096d0:	2003      	movs	r0, #3
 80096d2:	f000 fa43 	bl	8009b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80096d6:	200f      	movs	r0, #15
 80096d8:	f000 f808 	bl	80096ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80096dc:	f7ff fdfa 	bl	80092d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	40022000 	.word	0x40022000

080096ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80096f4:	4b12      	ldr	r3, [pc, #72]	; (8009740 <HAL_InitTick+0x54>)
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	4b12      	ldr	r3, [pc, #72]	; (8009744 <HAL_InitTick+0x58>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	4619      	mov	r1, r3
 80096fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009702:	fbb3 f3f1 	udiv	r3, r3, r1
 8009706:	fbb2 f3f3 	udiv	r3, r2, r3
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fa5b 	bl	8009bc6 <HAL_SYSTICK_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e00e      	b.n	8009738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b0f      	cmp	r3, #15
 800971e:	d80a      	bhi.n	8009736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009720:	2200      	movs	r2, #0
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009728:	f000 fa23 	bl	8009b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800972c:	4a06      	ldr	r2, [pc, #24]	; (8009748 <HAL_InitTick+0x5c>)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	e000      	b.n	8009738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	200009a0 	.word	0x200009a0
 8009744:	200009a8 	.word	0x200009a8
 8009748:	200009a4 	.word	0x200009a4

0800974c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009750:	4b05      	ldr	r3, [pc, #20]	; (8009768 <HAL_IncTick+0x1c>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	461a      	mov	r2, r3
 8009756:	4b05      	ldr	r3, [pc, #20]	; (800976c <HAL_IncTick+0x20>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4413      	add	r3, r2
 800975c:	4a03      	ldr	r2, [pc, #12]	; (800976c <HAL_IncTick+0x20>)
 800975e:	6013      	str	r3, [r2, #0]
}
 8009760:	bf00      	nop
 8009762:	46bd      	mov	sp, r7
 8009764:	bc80      	pop	{r7}
 8009766:	4770      	bx	lr
 8009768:	200009a8 	.word	0x200009a8
 800976c:	200011c0 	.word	0x200011c0

08009770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
  return uwTick;
 8009774:	4b02      	ldr	r3, [pc, #8]	; (8009780 <HAL_GetTick+0x10>)
 8009776:	681b      	ldr	r3, [r3, #0]
}
 8009778:	4618      	mov	r0, r3
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr
 8009780:	200011c0 	.word	0x200011c0

08009784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800978c:	f7ff fff0 	bl	8009770 <HAL_GetTick>
 8009790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800979c:	d005      	beq.n	80097aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800979e:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <HAL_Delay+0x44>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4413      	add	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80097aa:	bf00      	nop
 80097ac:	f7ff ffe0 	bl	8009770 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d8f7      	bhi.n	80097ac <HAL_Delay+0x28>
  {
  }
}
 80097bc:	bf00      	nop
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	200009a8 	.word	0x200009a8

080097cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e0ed      	b.n	80099ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff fda4 	bl	8009338 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f042 0201 	orr.w	r2, r2, #1
 80097fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009800:	f7ff ffb6 	bl	8009770 <HAL_GetTick>
 8009804:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009806:	e012      	b.n	800982e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009808:	f7ff ffb2 	bl	8009770 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b0a      	cmp	r3, #10
 8009814:	d90b      	bls.n	800982e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2205      	movs	r2, #5
 8009826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e0c5      	b.n	80099ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0e5      	beq.n	8009808 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f022 0202 	bic.w	r2, r2, #2
 800984a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800984c:	f7ff ff90 	bl	8009770 <HAL_GetTick>
 8009850:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009852:	e012      	b.n	800987a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009854:	f7ff ff8c 	bl	8009770 <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	2b0a      	cmp	r3, #10
 8009860:	d90b      	bls.n	800987a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2205      	movs	r2, #5
 8009872:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e09f      	b.n	80099ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e5      	bne.n	8009854 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7e1b      	ldrb	r3, [r3, #24]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d108      	bne.n	80098a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	e007      	b.n	80098b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	7e5b      	ldrb	r3, [r3, #25]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d108      	bne.n	80098cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	e007      	b.n	80098dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7e9b      	ldrb	r3, [r3, #26]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d108      	bne.n	80098f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0220 	orr.w	r2, r2, #32
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e007      	b.n	8009906 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 0220 	bic.w	r2, r2, #32
 8009904:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	7edb      	ldrb	r3, [r3, #27]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d108      	bne.n	8009920 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f022 0210 	bic.w	r2, r2, #16
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	e007      	b.n	8009930 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0210 	orr.w	r2, r2, #16
 800992e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7f1b      	ldrb	r3, [r3, #28]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d108      	bne.n	800994a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0208 	orr.w	r2, r2, #8
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	e007      	b.n	800995a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f022 0208 	bic.w	r2, r2, #8
 8009958:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7f5b      	ldrb	r3, [r3, #29]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d108      	bne.n	8009974 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f042 0204 	orr.w	r2, r2, #4
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	e007      	b.n	8009984 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0204 	bic.w	r2, r2, #4
 8009982:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	431a      	orrs	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	ea42 0103 	orr.w	r1, r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	1e5a      	subs	r2, r3, #1
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <__NVIC_SetPriorityGrouping>:
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <__NVIC_SetPriorityGrouping+0x44>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099e0:	4013      	ands	r3, r2
 80099e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80099ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099f6:	4a04      	ldr	r2, [pc, #16]	; (8009a08 <__NVIC_SetPriorityGrouping+0x44>)
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	60d3      	str	r3, [r2, #12]
}
 80099fc:	bf00      	nop
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bc80      	pop	{r7}
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	e000ed00 	.word	0xe000ed00

08009a0c <__NVIC_GetPriorityGrouping>:
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <__NVIC_GetPriorityGrouping+0x18>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	0a1b      	lsrs	r3, r3, #8
 8009a16:	f003 0307 	and.w	r3, r3, #7
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	e000ed00 	.word	0xe000ed00

08009a28 <__NVIC_EnableIRQ>:
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	db0b      	blt.n	8009a52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	f003 021f 	and.w	r2, r3, #31
 8009a40:	4906      	ldr	r1, [pc, #24]	; (8009a5c <__NVIC_EnableIRQ+0x34>)
 8009a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a46:	095b      	lsrs	r3, r3, #5
 8009a48:	2001      	movs	r0, #1
 8009a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8009a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr
 8009a5c:	e000e100 	.word	0xe000e100

08009a60 <__NVIC_SetPriority>:
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	6039      	str	r1, [r7, #0]
 8009a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	db0a      	blt.n	8009a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	490c      	ldr	r1, [pc, #48]	; (8009aac <__NVIC_SetPriority+0x4c>)
 8009a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a7e:	0112      	lsls	r2, r2, #4
 8009a80:	b2d2      	uxtb	r2, r2
 8009a82:	440b      	add	r3, r1
 8009a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a88:	e00a      	b.n	8009aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	4908      	ldr	r1, [pc, #32]	; (8009ab0 <__NVIC_SetPriority+0x50>)
 8009a90:	79fb      	ldrb	r3, [r7, #7]
 8009a92:	f003 030f 	and.w	r3, r3, #15
 8009a96:	3b04      	subs	r3, #4
 8009a98:	0112      	lsls	r2, r2, #4
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	761a      	strb	r2, [r3, #24]
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc80      	pop	{r7}
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	e000e100 	.word	0xe000e100
 8009ab0:	e000ed00 	.word	0xe000ed00

08009ab4 <NVIC_EncodePriority>:
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b089      	sub	sp, #36	; 0x24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	f1c3 0307 	rsb	r3, r3, #7
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	bf28      	it	cs
 8009ad2:	2304      	movcs	r3, #4
 8009ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	2b06      	cmp	r3, #6
 8009adc:	d902      	bls.n	8009ae4 <NVIC_EncodePriority+0x30>
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	3b03      	subs	r3, #3
 8009ae2:	e000      	b.n	8009ae6 <NVIC_EncodePriority+0x32>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	fa02 f303 	lsl.w	r3, r2, r3
 8009af2:	43da      	mvns	r2, r3
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	401a      	ands	r2, r3
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	fa01 f303 	lsl.w	r3, r1, r3
 8009b06:	43d9      	mvns	r1, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b0c:	4313      	orrs	r3, r2
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3724      	adds	r7, #36	; 0x24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr

08009b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b28:	d301      	bcc.n	8009b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e00f      	b.n	8009b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b2e:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <SysTick_Config+0x40>)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b36:	210f      	movs	r1, #15
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b3c:	f7ff ff90 	bl	8009a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <SysTick_Config+0x40>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b46:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <SysTick_Config+0x40>)
 8009b48:	2207      	movs	r2, #7
 8009b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	e000e010 	.word	0xe000e010

08009b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ff2d 	bl	80099c4 <__NVIC_SetPriorityGrouping>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b086      	sub	sp, #24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	4603      	mov	r3, r0
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b84:	f7ff ff42 	bl	8009a0c <__NVIC_GetPriorityGrouping>
 8009b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	68b9      	ldr	r1, [r7, #8]
 8009b8e:	6978      	ldr	r0, [r7, #20]
 8009b90:	f7ff ff90 	bl	8009ab4 <NVIC_EncodePriority>
 8009b94:	4602      	mov	r2, r0
 8009b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff ff5f 	bl	8009a60 <__NVIC_SetPriority>
}
 8009ba2:	bf00      	nop
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff ff35 	bl	8009a28 <__NVIC_EnableIRQ>
}
 8009bbe:	bf00      	nop
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b082      	sub	sp, #8
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff ffa2 	bl	8009b18 <SysTick_Config>
 8009bd4:	4603      	mov	r3, r0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d008      	beq.n	8009c08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e020      	b.n	8009c4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 020e 	bic.w	r2, r2, #14
 8009c16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0201 	bic.w	r2, r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c30:	2101      	movs	r1, #1
 8009c32:	fa01 f202 	lsl.w	r2, r1, r2
 8009c36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr

08009c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d005      	beq.n	8009c78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2204      	movs	r2, #4
 8009c70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	73fb      	strb	r3, [r7, #15]
 8009c76:	e0d6      	b.n	8009e26 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f022 020e 	bic.w	r2, r2, #14
 8009c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0201 	bic.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4b64      	ldr	r3, [pc, #400]	; (8009e30 <HAL_DMA_Abort_IT+0x1dc>)
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d958      	bls.n	8009d56 <HAL_DMA_Abort_IT+0x102>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a62      	ldr	r2, [pc, #392]	; (8009e34 <HAL_DMA_Abort_IT+0x1e0>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d04f      	beq.n	8009d4e <HAL_DMA_Abort_IT+0xfa>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a61      	ldr	r2, [pc, #388]	; (8009e38 <HAL_DMA_Abort_IT+0x1e4>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d048      	beq.n	8009d4a <HAL_DMA_Abort_IT+0xf6>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a5f      	ldr	r2, [pc, #380]	; (8009e3c <HAL_DMA_Abort_IT+0x1e8>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d040      	beq.n	8009d44 <HAL_DMA_Abort_IT+0xf0>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a5e      	ldr	r2, [pc, #376]	; (8009e40 <HAL_DMA_Abort_IT+0x1ec>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d038      	beq.n	8009d3e <HAL_DMA_Abort_IT+0xea>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a5c      	ldr	r2, [pc, #368]	; (8009e44 <HAL_DMA_Abort_IT+0x1f0>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d030      	beq.n	8009d38 <HAL_DMA_Abort_IT+0xe4>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a5b      	ldr	r2, [pc, #364]	; (8009e48 <HAL_DMA_Abort_IT+0x1f4>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d028      	beq.n	8009d32 <HAL_DMA_Abort_IT+0xde>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a52      	ldr	r2, [pc, #328]	; (8009e30 <HAL_DMA_Abort_IT+0x1dc>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d020      	beq.n	8009d2c <HAL_DMA_Abort_IT+0xd8>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a57      	ldr	r2, [pc, #348]	; (8009e4c <HAL_DMA_Abort_IT+0x1f8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d019      	beq.n	8009d28 <HAL_DMA_Abort_IT+0xd4>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a55      	ldr	r2, [pc, #340]	; (8009e50 <HAL_DMA_Abort_IT+0x1fc>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d012      	beq.n	8009d24 <HAL_DMA_Abort_IT+0xd0>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a54      	ldr	r2, [pc, #336]	; (8009e54 <HAL_DMA_Abort_IT+0x200>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00a      	beq.n	8009d1e <HAL_DMA_Abort_IT+0xca>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a52      	ldr	r2, [pc, #328]	; (8009e58 <HAL_DMA_Abort_IT+0x204>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d102      	bne.n	8009d18 <HAL_DMA_Abort_IT+0xc4>
 8009d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d16:	e01b      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d1c:	e018      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d22:	e015      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d24:	2310      	movs	r3, #16
 8009d26:	e013      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e011      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d30:	e00e      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d36:	e00b      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d3c:	e008      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d42:	e005      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d48:	e002      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d4a:	2310      	movs	r3, #16
 8009d4c:	e000      	b.n	8009d50 <HAL_DMA_Abort_IT+0xfc>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4a42      	ldr	r2, [pc, #264]	; (8009e5c <HAL_DMA_Abort_IT+0x208>)
 8009d52:	6053      	str	r3, [r2, #4]
 8009d54:	e057      	b.n	8009e06 <HAL_DMA_Abort_IT+0x1b2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a36      	ldr	r2, [pc, #216]	; (8009e34 <HAL_DMA_Abort_IT+0x1e0>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d04f      	beq.n	8009e00 <HAL_DMA_Abort_IT+0x1ac>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a34      	ldr	r2, [pc, #208]	; (8009e38 <HAL_DMA_Abort_IT+0x1e4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d048      	beq.n	8009dfc <HAL_DMA_Abort_IT+0x1a8>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a33      	ldr	r2, [pc, #204]	; (8009e3c <HAL_DMA_Abort_IT+0x1e8>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d040      	beq.n	8009df6 <HAL_DMA_Abort_IT+0x1a2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a31      	ldr	r2, [pc, #196]	; (8009e40 <HAL_DMA_Abort_IT+0x1ec>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d038      	beq.n	8009df0 <HAL_DMA_Abort_IT+0x19c>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a30      	ldr	r2, [pc, #192]	; (8009e44 <HAL_DMA_Abort_IT+0x1f0>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d030      	beq.n	8009dea <HAL_DMA_Abort_IT+0x196>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a2e      	ldr	r2, [pc, #184]	; (8009e48 <HAL_DMA_Abort_IT+0x1f4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d028      	beq.n	8009de4 <HAL_DMA_Abort_IT+0x190>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a26      	ldr	r2, [pc, #152]	; (8009e30 <HAL_DMA_Abort_IT+0x1dc>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d020      	beq.n	8009dde <HAL_DMA_Abort_IT+0x18a>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a2a      	ldr	r2, [pc, #168]	; (8009e4c <HAL_DMA_Abort_IT+0x1f8>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d019      	beq.n	8009dda <HAL_DMA_Abort_IT+0x186>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a29      	ldr	r2, [pc, #164]	; (8009e50 <HAL_DMA_Abort_IT+0x1fc>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d012      	beq.n	8009dd6 <HAL_DMA_Abort_IT+0x182>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a27      	ldr	r2, [pc, #156]	; (8009e54 <HAL_DMA_Abort_IT+0x200>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00a      	beq.n	8009dd0 <HAL_DMA_Abort_IT+0x17c>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a26      	ldr	r2, [pc, #152]	; (8009e58 <HAL_DMA_Abort_IT+0x204>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d102      	bne.n	8009dca <HAL_DMA_Abort_IT+0x176>
 8009dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dc8:	e01b      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dce:	e018      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dd4:	e015      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009dd6:	2310      	movs	r3, #16
 8009dd8:	e013      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e011      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009de2:	e00e      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009de4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009de8:	e00b      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dee:	e008      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009df4:	e005      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dfa:	e002      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	e000      	b.n	8009e02 <HAL_DMA_Abort_IT+0x1ae>
 8009e00:	2301      	movs	r3, #1
 8009e02:	4a17      	ldr	r2, [pc, #92]	; (8009e60 <HAL_DMA_Abort_IT+0x20c>)
 8009e04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	4798      	blx	r3
    } 
  }
  return status;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	40020080 	.word	0x40020080
 8009e34:	40020008 	.word	0x40020008
 8009e38:	4002001c 	.word	0x4002001c
 8009e3c:	40020030 	.word	0x40020030
 8009e40:	40020044 	.word	0x40020044
 8009e44:	40020058 	.word	0x40020058
 8009e48:	4002006c 	.word	0x4002006c
 8009e4c:	40020408 	.word	0x40020408
 8009e50:	4002041c 	.word	0x4002041c
 8009e54:	40020430 	.word	0x40020430
 8009e58:	40020444 	.word	0x40020444
 8009e5c:	40020400 	.word	0x40020400
 8009e60:	40020000 	.word	0x40020000

08009e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b08b      	sub	sp, #44	; 0x2c
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009e72:	2300      	movs	r3, #0
 8009e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e76:	e179      	b.n	800a16c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009e78:	2201      	movs	r2, #1
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	69fa      	ldr	r2, [r7, #28]
 8009e88:	4013      	ands	r3, r2
 8009e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	f040 8168 	bne.w	800a166 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	4a96      	ldr	r2, [pc, #600]	; (800a0f4 <HAL_GPIO_Init+0x290>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d05e      	beq.n	8009f5e <HAL_GPIO_Init+0xfa>
 8009ea0:	4a94      	ldr	r2, [pc, #592]	; (800a0f4 <HAL_GPIO_Init+0x290>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d875      	bhi.n	8009f92 <HAL_GPIO_Init+0x12e>
 8009ea6:	4a94      	ldr	r2, [pc, #592]	; (800a0f8 <HAL_GPIO_Init+0x294>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d058      	beq.n	8009f5e <HAL_GPIO_Init+0xfa>
 8009eac:	4a92      	ldr	r2, [pc, #584]	; (800a0f8 <HAL_GPIO_Init+0x294>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d86f      	bhi.n	8009f92 <HAL_GPIO_Init+0x12e>
 8009eb2:	4a92      	ldr	r2, [pc, #584]	; (800a0fc <HAL_GPIO_Init+0x298>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d052      	beq.n	8009f5e <HAL_GPIO_Init+0xfa>
 8009eb8:	4a90      	ldr	r2, [pc, #576]	; (800a0fc <HAL_GPIO_Init+0x298>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d869      	bhi.n	8009f92 <HAL_GPIO_Init+0x12e>
 8009ebe:	4a90      	ldr	r2, [pc, #576]	; (800a100 <HAL_GPIO_Init+0x29c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d04c      	beq.n	8009f5e <HAL_GPIO_Init+0xfa>
 8009ec4:	4a8e      	ldr	r2, [pc, #568]	; (800a100 <HAL_GPIO_Init+0x29c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d863      	bhi.n	8009f92 <HAL_GPIO_Init+0x12e>
 8009eca:	4a8e      	ldr	r2, [pc, #568]	; (800a104 <HAL_GPIO_Init+0x2a0>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d046      	beq.n	8009f5e <HAL_GPIO_Init+0xfa>
 8009ed0:	4a8c      	ldr	r2, [pc, #560]	; (800a104 <HAL_GPIO_Init+0x2a0>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d85d      	bhi.n	8009f92 <HAL_GPIO_Init+0x12e>
 8009ed6:	2b12      	cmp	r3, #18
 8009ed8:	d82a      	bhi.n	8009f30 <HAL_GPIO_Init+0xcc>
 8009eda:	2b12      	cmp	r3, #18
 8009edc:	d859      	bhi.n	8009f92 <HAL_GPIO_Init+0x12e>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <HAL_GPIO_Init+0x80>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f5f 	.word	0x08009f5f
 8009ee8:	08009f39 	.word	0x08009f39
 8009eec:	08009f4b 	.word	0x08009f4b
 8009ef0:	08009f8d 	.word	0x08009f8d
 8009ef4:	08009f93 	.word	0x08009f93
 8009ef8:	08009f93 	.word	0x08009f93
 8009efc:	08009f93 	.word	0x08009f93
 8009f00:	08009f93 	.word	0x08009f93
 8009f04:	08009f93 	.word	0x08009f93
 8009f08:	08009f93 	.word	0x08009f93
 8009f0c:	08009f93 	.word	0x08009f93
 8009f10:	08009f93 	.word	0x08009f93
 8009f14:	08009f93 	.word	0x08009f93
 8009f18:	08009f93 	.word	0x08009f93
 8009f1c:	08009f93 	.word	0x08009f93
 8009f20:	08009f93 	.word	0x08009f93
 8009f24:	08009f93 	.word	0x08009f93
 8009f28:	08009f41 	.word	0x08009f41
 8009f2c:	08009f55 	.word	0x08009f55
 8009f30:	4a75      	ldr	r2, [pc, #468]	; (800a108 <HAL_GPIO_Init+0x2a4>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d013      	beq.n	8009f5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009f36:	e02c      	b.n	8009f92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	623b      	str	r3, [r7, #32]
          break;
 8009f3e:	e029      	b.n	8009f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	3304      	adds	r3, #4
 8009f46:	623b      	str	r3, [r7, #32]
          break;
 8009f48:	e024      	b.n	8009f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	623b      	str	r3, [r7, #32]
          break;
 8009f52:	e01f      	b.n	8009f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	330c      	adds	r3, #12
 8009f5a:	623b      	str	r3, [r7, #32]
          break;
 8009f5c:	e01a      	b.n	8009f94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d102      	bne.n	8009f6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009f66:	2304      	movs	r3, #4
 8009f68:	623b      	str	r3, [r7, #32]
          break;
 8009f6a:	e013      	b.n	8009f94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d105      	bne.n	8009f80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009f74:	2308      	movs	r3, #8
 8009f76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	611a      	str	r2, [r3, #16]
          break;
 8009f7e:	e009      	b.n	8009f94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009f80:	2308      	movs	r3, #8
 8009f82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	69fa      	ldr	r2, [r7, #28]
 8009f88:	615a      	str	r2, [r3, #20]
          break;
 8009f8a:	e003      	b.n	8009f94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	623b      	str	r3, [r7, #32]
          break;
 8009f90:	e000      	b.n	8009f94 <HAL_GPIO_Init+0x130>
          break;
 8009f92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	2bff      	cmp	r3, #255	; 0xff
 8009f98:	d801      	bhi.n	8009f9e <HAL_GPIO_Init+0x13a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	e001      	b.n	8009fa2 <HAL_GPIO_Init+0x13e>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	2bff      	cmp	r3, #255	; 0xff
 8009fa8:	d802      	bhi.n	8009fb0 <HAL_GPIO_Init+0x14c>
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	e002      	b.n	8009fb6 <HAL_GPIO_Init+0x152>
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	3b08      	subs	r3, #8
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	210f      	movs	r1, #15
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	401a      	ands	r2, r3
 8009fc8:	6a39      	ldr	r1, [r7, #32]
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 80c1 	beq.w	800a166 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009fe4:	4b49      	ldr	r3, [pc, #292]	; (800a10c <HAL_GPIO_Init+0x2a8>)
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	4a48      	ldr	r2, [pc, #288]	; (800a10c <HAL_GPIO_Init+0x2a8>)
 8009fea:	f043 0301 	orr.w	r3, r3, #1
 8009fee:	6193      	str	r3, [r2, #24]
 8009ff0:	4b46      	ldr	r3, [pc, #280]	; (800a10c <HAL_GPIO_Init+0x2a8>)
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	60bb      	str	r3, [r7, #8]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009ffc:	4a44      	ldr	r2, [pc, #272]	; (800a110 <HAL_GPIO_Init+0x2ac>)
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	089b      	lsrs	r3, r3, #2
 800a002:	3302      	adds	r3, #2
 800a004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a008:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	220f      	movs	r2, #15
 800a014:	fa02 f303 	lsl.w	r3, r2, r3
 800a018:	43db      	mvns	r3, r3
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	4013      	ands	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a3c      	ldr	r2, [pc, #240]	; (800a114 <HAL_GPIO_Init+0x2b0>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d01f      	beq.n	800a068 <HAL_GPIO_Init+0x204>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a3b      	ldr	r2, [pc, #236]	; (800a118 <HAL_GPIO_Init+0x2b4>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d019      	beq.n	800a064 <HAL_GPIO_Init+0x200>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a3a      	ldr	r2, [pc, #232]	; (800a11c <HAL_GPIO_Init+0x2b8>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d013      	beq.n	800a060 <HAL_GPIO_Init+0x1fc>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a39      	ldr	r2, [pc, #228]	; (800a120 <HAL_GPIO_Init+0x2bc>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d00d      	beq.n	800a05c <HAL_GPIO_Init+0x1f8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a38      	ldr	r2, [pc, #224]	; (800a124 <HAL_GPIO_Init+0x2c0>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d007      	beq.n	800a058 <HAL_GPIO_Init+0x1f4>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a37      	ldr	r2, [pc, #220]	; (800a128 <HAL_GPIO_Init+0x2c4>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d101      	bne.n	800a054 <HAL_GPIO_Init+0x1f0>
 800a050:	2305      	movs	r3, #5
 800a052:	e00a      	b.n	800a06a <HAL_GPIO_Init+0x206>
 800a054:	2306      	movs	r3, #6
 800a056:	e008      	b.n	800a06a <HAL_GPIO_Init+0x206>
 800a058:	2304      	movs	r3, #4
 800a05a:	e006      	b.n	800a06a <HAL_GPIO_Init+0x206>
 800a05c:	2303      	movs	r3, #3
 800a05e:	e004      	b.n	800a06a <HAL_GPIO_Init+0x206>
 800a060:	2302      	movs	r3, #2
 800a062:	e002      	b.n	800a06a <HAL_GPIO_Init+0x206>
 800a064:	2301      	movs	r3, #1
 800a066:	e000      	b.n	800a06a <HAL_GPIO_Init+0x206>
 800a068:	2300      	movs	r3, #0
 800a06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a06c:	f002 0203 	and.w	r2, r2, #3
 800a070:	0092      	lsls	r2, r2, #2
 800a072:	4093      	lsls	r3, r2
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4313      	orrs	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a07a:	4925      	ldr	r1, [pc, #148]	; (800a110 <HAL_GPIO_Init+0x2ac>)
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	089b      	lsrs	r3, r3, #2
 800a080:	3302      	adds	r3, #2
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a094:	4b25      	ldr	r3, [pc, #148]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	4924      	ldr	r1, [pc, #144]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	608b      	str	r3, [r1, #8]
 800a0a0:	e006      	b.n	800a0b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a0a2:	4b22      	ldr	r3, [pc, #136]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a0a4:	689a      	ldr	r2, [r3, #8]
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	43db      	mvns	r3, r3
 800a0aa:	4920      	ldr	r1, [pc, #128]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d006      	beq.n	800a0ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a0bc:	4b1b      	ldr	r3, [pc, #108]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a0be:	68da      	ldr	r2, [r3, #12]
 800a0c0:	491a      	ldr	r1, [pc, #104]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	60cb      	str	r3, [r1, #12]
 800a0c8:	e006      	b.n	800a0d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a0ca:	4b18      	ldr	r3, [pc, #96]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	43db      	mvns	r3, r3
 800a0d2:	4916      	ldr	r1, [pc, #88]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d025      	beq.n	800a130 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a0e4:	4b11      	ldr	r3, [pc, #68]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	4910      	ldr	r1, [pc, #64]	; (800a12c <HAL_GPIO_Init+0x2c8>)
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	604b      	str	r3, [r1, #4]
 800a0f0:	e025      	b.n	800a13e <HAL_GPIO_Init+0x2da>
 800a0f2:	bf00      	nop
 800a0f4:	10320000 	.word	0x10320000
 800a0f8:	10310000 	.word	0x10310000
 800a0fc:	10220000 	.word	0x10220000
 800a100:	10210000 	.word	0x10210000
 800a104:	10120000 	.word	0x10120000
 800a108:	10110000 	.word	0x10110000
 800a10c:	40021000 	.word	0x40021000
 800a110:	40010000 	.word	0x40010000
 800a114:	40010800 	.word	0x40010800
 800a118:	40010c00 	.word	0x40010c00
 800a11c:	40011000 	.word	0x40011000
 800a120:	40011400 	.word	0x40011400
 800a124:	40011800 	.word	0x40011800
 800a128:	40011c00 	.word	0x40011c00
 800a12c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a130:	4b15      	ldr	r3, [pc, #84]	; (800a188 <HAL_GPIO_Init+0x324>)
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	43db      	mvns	r3, r3
 800a138:	4913      	ldr	r1, [pc, #76]	; (800a188 <HAL_GPIO_Init+0x324>)
 800a13a:	4013      	ands	r3, r2
 800a13c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d006      	beq.n	800a158 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a14a:	4b0f      	ldr	r3, [pc, #60]	; (800a188 <HAL_GPIO_Init+0x324>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	490e      	ldr	r1, [pc, #56]	; (800a188 <HAL_GPIO_Init+0x324>)
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	4313      	orrs	r3, r2
 800a154:	600b      	str	r3, [r1, #0]
 800a156:	e006      	b.n	800a166 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a158:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <HAL_GPIO_Init+0x324>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	43db      	mvns	r3, r3
 800a160:	4909      	ldr	r1, [pc, #36]	; (800a188 <HAL_GPIO_Init+0x324>)
 800a162:	4013      	ands	r3, r2
 800a164:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	3301      	adds	r3, #1
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	fa22 f303 	lsr.w	r3, r2, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	f47f ae7e 	bne.w	8009e78 <HAL_GPIO_Init+0x14>
  }
}
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	372c      	adds	r7, #44	; 0x2c
 800a182:	46bd      	mov	sp, r7
 800a184:	bc80      	pop	{r7}
 800a186:	4770      	bx	lr
 800a188:	40010400 	.word	0x40010400

0800a18c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b089      	sub	sp, #36	; 0x24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a196:	2300      	movs	r3, #0
 800a198:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a19a:	e0a6      	b.n	800a2ea <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a19c:	2201      	movs	r2, #1
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 8099 	beq.w	800a2e4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a1b2:	4a54      	ldr	r2, [pc, #336]	; (800a304 <HAL_GPIO_DeInit+0x178>)
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	089b      	lsrs	r3, r3, #2
 800a1b8:	3302      	adds	r3, #2
 800a1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	f003 0303 	and.w	r3, r3, #3
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	220f      	movs	r2, #15
 800a1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a4c      	ldr	r2, [pc, #304]	; (800a308 <HAL_GPIO_DeInit+0x17c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d01f      	beq.n	800a21c <HAL_GPIO_DeInit+0x90>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a4b      	ldr	r2, [pc, #300]	; (800a30c <HAL_GPIO_DeInit+0x180>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d019      	beq.n	800a218 <HAL_GPIO_DeInit+0x8c>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a4a      	ldr	r2, [pc, #296]	; (800a310 <HAL_GPIO_DeInit+0x184>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d013      	beq.n	800a214 <HAL_GPIO_DeInit+0x88>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a49      	ldr	r2, [pc, #292]	; (800a314 <HAL_GPIO_DeInit+0x188>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d00d      	beq.n	800a210 <HAL_GPIO_DeInit+0x84>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a48      	ldr	r2, [pc, #288]	; (800a318 <HAL_GPIO_DeInit+0x18c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d007      	beq.n	800a20c <HAL_GPIO_DeInit+0x80>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a47      	ldr	r2, [pc, #284]	; (800a31c <HAL_GPIO_DeInit+0x190>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d101      	bne.n	800a208 <HAL_GPIO_DeInit+0x7c>
 800a204:	2305      	movs	r3, #5
 800a206:	e00a      	b.n	800a21e <HAL_GPIO_DeInit+0x92>
 800a208:	2306      	movs	r3, #6
 800a20a:	e008      	b.n	800a21e <HAL_GPIO_DeInit+0x92>
 800a20c:	2304      	movs	r3, #4
 800a20e:	e006      	b.n	800a21e <HAL_GPIO_DeInit+0x92>
 800a210:	2303      	movs	r3, #3
 800a212:	e004      	b.n	800a21e <HAL_GPIO_DeInit+0x92>
 800a214:	2302      	movs	r3, #2
 800a216:	e002      	b.n	800a21e <HAL_GPIO_DeInit+0x92>
 800a218:	2301      	movs	r3, #1
 800a21a:	e000      	b.n	800a21e <HAL_GPIO_DeInit+0x92>
 800a21c:	2300      	movs	r3, #0
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	f002 0203 	and.w	r2, r2, #3
 800a224:	0092      	lsls	r2, r2, #2
 800a226:	4093      	lsls	r3, r2
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d132      	bne.n	800a294 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a22e:	4b3c      	ldr	r3, [pc, #240]	; (800a320 <HAL_GPIO_DeInit+0x194>)
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	43db      	mvns	r3, r3
 800a236:	493a      	ldr	r1, [pc, #232]	; (800a320 <HAL_GPIO_DeInit+0x194>)
 800a238:	4013      	ands	r3, r2
 800a23a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a23c:	4b38      	ldr	r3, [pc, #224]	; (800a320 <HAL_GPIO_DeInit+0x194>)
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	43db      	mvns	r3, r3
 800a244:	4936      	ldr	r1, [pc, #216]	; (800a320 <HAL_GPIO_DeInit+0x194>)
 800a246:	4013      	ands	r3, r2
 800a248:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a24a:	4b35      	ldr	r3, [pc, #212]	; (800a320 <HAL_GPIO_DeInit+0x194>)
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	43db      	mvns	r3, r3
 800a252:	4933      	ldr	r1, [pc, #204]	; (800a320 <HAL_GPIO_DeInit+0x194>)
 800a254:	4013      	ands	r3, r2
 800a256:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a258:	4b31      	ldr	r3, [pc, #196]	; (800a320 <HAL_GPIO_DeInit+0x194>)
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	43db      	mvns	r3, r3
 800a260:	492f      	ldr	r1, [pc, #188]	; (800a320 <HAL_GPIO_DeInit+0x194>)
 800a262:	4013      	ands	r3, r2
 800a264:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	220f      	movs	r2, #15
 800a270:	fa02 f303 	lsl.w	r3, r2, r3
 800a274:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a276:	4a23      	ldr	r2, [pc, #140]	; (800a304 <HAL_GPIO_DeInit+0x178>)
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	089b      	lsrs	r3, r3, #2
 800a27c:	3302      	adds	r3, #2
 800a27e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	43da      	mvns	r2, r3
 800a286:	481f      	ldr	r0, [pc, #124]	; (800a304 <HAL_GPIO_DeInit+0x178>)
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	089b      	lsrs	r3, r3, #2
 800a28c:	400a      	ands	r2, r1
 800a28e:	3302      	adds	r3, #2
 800a290:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	2bff      	cmp	r3, #255	; 0xff
 800a298:	d801      	bhi.n	800a29e <HAL_GPIO_DeInit+0x112>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	e001      	b.n	800a2a2 <HAL_GPIO_DeInit+0x116>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	2bff      	cmp	r3, #255	; 0xff
 800a2a8:	d802      	bhi.n	800a2b0 <HAL_GPIO_DeInit+0x124>
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	e002      	b.n	800a2b6 <HAL_GPIO_DeInit+0x12a>
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	3b08      	subs	r3, #8
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	210f      	movs	r1, #15
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	401a      	ands	r2, r3
 800a2c8:	2104      	movs	r1, #4
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68da      	ldr	r2, [r3, #12]
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	401a      	ands	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f47f af52 	bne.w	800a19c <HAL_GPIO_DeInit+0x10>
  }
}
 800a2f8:	bf00      	nop
 800a2fa:	bf00      	nop
 800a2fc:	3724      	adds	r7, #36	; 0x24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bc80      	pop	{r7}
 800a302:	4770      	bx	lr
 800a304:	40010000 	.word	0x40010000
 800a308:	40010800 	.word	0x40010800
 800a30c:	40010c00 	.word	0x40010c00
 800a310:	40011000 	.word	0x40011000
 800a314:	40011400 	.word	0x40011400
 800a318:	40011800 	.word	0x40011800
 800a31c:	40011c00 	.word	0x40011c00
 800a320:	40010400 	.word	0x40010400

0800a324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	887b      	ldrh	r3, [r7, #2]
 800a336:	4013      	ands	r3, r2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a33c:	2301      	movs	r3, #1
 800a33e:	73fb      	strb	r3, [r7, #15]
 800a340:	e001      	b.n	800a346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr

0800a352 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a352:	b480      	push	{r7}
 800a354:	b083      	sub	sp, #12
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	460b      	mov	r3, r1
 800a35c:	807b      	strh	r3, [r7, #2]
 800a35e:	4613      	mov	r3, r2
 800a360:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a362:	787b      	ldrb	r3, [r7, #1]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a368:	887a      	ldrh	r2, [r7, #2]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a36e:	e003      	b.n	800a378 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a370:	887b      	ldrh	r3, [r7, #2]
 800a372:	041a      	lsls	r2, r3, #16
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	611a      	str	r2, [r3, #16]
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bc80      	pop	{r7}
 800a380:	4770      	bx	lr

0800a382 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a382:	b480      	push	{r7}
 800a384:	b085      	sub	sp, #20
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	460b      	mov	r3, r1
 800a38c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a394:	887a      	ldrh	r2, [r7, #2]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4013      	ands	r3, r2
 800a39a:	041a      	lsls	r2, r3, #16
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	43d9      	mvns	r1, r3
 800a3a0:	887b      	ldrh	r3, [r7, #2]
 800a3a2:	400b      	ands	r3, r1
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	611a      	str	r2, [r3, #16]
}
 800a3aa:	bf00      	nop
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bc80      	pop	{r7}
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e12b      	b.n	800a61e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7fe fff8 	bl	80093d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2224      	movs	r2, #36	; 0x24
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f022 0201 	bic.w	r2, r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a418:	f001 fdb8 	bl	800bf8c <HAL_RCC_GetPCLK1Freq>
 800a41c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	4a81      	ldr	r2, [pc, #516]	; (800a628 <HAL_I2C_Init+0x274>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d807      	bhi.n	800a438 <HAL_I2C_Init+0x84>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4a80      	ldr	r2, [pc, #512]	; (800a62c <HAL_I2C_Init+0x278>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	bf94      	ite	ls
 800a430:	2301      	movls	r3, #1
 800a432:	2300      	movhi	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	e006      	b.n	800a446 <HAL_I2C_Init+0x92>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4a7d      	ldr	r2, [pc, #500]	; (800a630 <HAL_I2C_Init+0x27c>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	bf94      	ite	ls
 800a440:	2301      	movls	r3, #1
 800a442:	2300      	movhi	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e0e7      	b.n	800a61e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4a78      	ldr	r2, [pc, #480]	; (800a634 <HAL_I2C_Init+0x280>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	0c9b      	lsrs	r3, r3, #18
 800a458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	4a6a      	ldr	r2, [pc, #424]	; (800a628 <HAL_I2C_Init+0x274>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d802      	bhi.n	800a488 <HAL_I2C_Init+0xd4>
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	3301      	adds	r3, #1
 800a486:	e009      	b.n	800a49c <HAL_I2C_Init+0xe8>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	4a69      	ldr	r2, [pc, #420]	; (800a638 <HAL_I2C_Init+0x284>)
 800a494:	fba2 2303 	umull	r2, r3, r2, r3
 800a498:	099b      	lsrs	r3, r3, #6
 800a49a:	3301      	adds	r3, #1
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a4ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	495c      	ldr	r1, [pc, #368]	; (800a628 <HAL_I2C_Init+0x274>)
 800a4b8:	428b      	cmp	r3, r1
 800a4ba:	d819      	bhi.n	800a4f0 <HAL_I2C_Init+0x13c>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	1e59      	subs	r1, r3, #1
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4ca:	1c59      	adds	r1, r3, #1
 800a4cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a4d0:	400b      	ands	r3, r1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_I2C_Init+0x138>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	1e59      	subs	r1, r3, #1
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4ea:	e051      	b.n	800a590 <HAL_I2C_Init+0x1dc>
 800a4ec:	2304      	movs	r3, #4
 800a4ee:	e04f      	b.n	800a590 <HAL_I2C_Init+0x1dc>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d111      	bne.n	800a51c <HAL_I2C_Init+0x168>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	1e58      	subs	r0, r3, #1
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6859      	ldr	r1, [r3, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	440b      	add	r3, r1
 800a506:	fbb0 f3f3 	udiv	r3, r0, r3
 800a50a:	3301      	adds	r3, #1
 800a50c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a510:	2b00      	cmp	r3, #0
 800a512:	bf0c      	ite	eq
 800a514:	2301      	moveq	r3, #1
 800a516:	2300      	movne	r3, #0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	e012      	b.n	800a542 <HAL_I2C_Init+0x18e>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	1e58      	subs	r0, r3, #1
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6859      	ldr	r1, [r3, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	440b      	add	r3, r1
 800a52a:	0099      	lsls	r1, r3, #2
 800a52c:	440b      	add	r3, r1
 800a52e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a532:	3301      	adds	r3, #1
 800a534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a538:	2b00      	cmp	r3, #0
 800a53a:	bf0c      	ite	eq
 800a53c:	2301      	moveq	r3, #1
 800a53e:	2300      	movne	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <HAL_I2C_Init+0x196>
 800a546:	2301      	movs	r3, #1
 800a548:	e022      	b.n	800a590 <HAL_I2C_Init+0x1dc>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10e      	bne.n	800a570 <HAL_I2C_Init+0x1bc>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	1e58      	subs	r0, r3, #1
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6859      	ldr	r1, [r3, #4]
 800a55a:	460b      	mov	r3, r1
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	440b      	add	r3, r1
 800a560:	fbb0 f3f3 	udiv	r3, r0, r3
 800a564:	3301      	adds	r3, #1
 800a566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a56a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a56e:	e00f      	b.n	800a590 <HAL_I2C_Init+0x1dc>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	1e58      	subs	r0, r3, #1
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6859      	ldr	r1, [r3, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	0099      	lsls	r1, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	fbb0 f3f3 	udiv	r3, r0, r3
 800a586:	3301      	adds	r3, #1
 800a588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a58c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a590:	6879      	ldr	r1, [r7, #4]
 800a592:	6809      	ldr	r1, [r1, #0]
 800a594:	4313      	orrs	r3, r2
 800a596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	69da      	ldr	r2, [r3, #28]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	431a      	orrs	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a5be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	6911      	ldr	r1, [r2, #16]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	68d2      	ldr	r2, [r2, #12]
 800a5ca:	4311      	orrs	r1, r2
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	695a      	ldr	r2, [r3, #20]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f042 0201 	orr.w	r2, r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2220      	movs	r2, #32
 800a60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	000186a0 	.word	0x000186a0
 800a62c:	001e847f 	.word	0x001e847f
 800a630:	003d08ff 	.word	0x003d08ff
 800a634:	431bde83 	.word	0x431bde83
 800a638:	10624dd3 	.word	0x10624dd3

0800a63c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e021      	b.n	800a692 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2224      	movs	r2, #36	; 0x24
 800a652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f022 0201 	bic.w	r2, r2, #1
 800a664:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7fe fef0 	bl	800944c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
	...

0800a69c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	607a      	str	r2, [r7, #4]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	817b      	strh	r3, [r7, #10]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a6b0:	f7ff f85e 	bl	8009770 <HAL_GetTick>
 800a6b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b20      	cmp	r3, #32
 800a6c0:	f040 80e0 	bne.w	800a884 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	2319      	movs	r3, #25
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	4970      	ldr	r1, [pc, #448]	; (800a890 <HAL_I2C_Master_Transmit+0x1f4>)
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fe5c 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e0d3      	b.n	800a886 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d101      	bne.n	800a6ec <HAL_I2C_Master_Transmit+0x50>
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	e0cc      	b.n	800a886 <HAL_I2C_Master_Transmit+0x1ea>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d007      	beq.n	800a712 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f042 0201 	orr.w	r2, r2, #1
 800a710:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a720:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2221      	movs	r2, #33	; 0x21
 800a726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2210      	movs	r2, #16
 800a72e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	893a      	ldrh	r2, [r7, #8]
 800a742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a748:	b29a      	uxth	r2, r3
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4a50      	ldr	r2, [pc, #320]	; (800a894 <HAL_I2C_Master_Transmit+0x1f8>)
 800a752:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a754:	8979      	ldrh	r1, [r7, #10]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	6a3a      	ldr	r2, [r7, #32]
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f000 fc16 	bl	800af8c <I2C_MasterRequestWrite>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e08d      	b.n	800a886 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a76a:	2300      	movs	r3, #0
 800a76c:	613b      	str	r3, [r7, #16]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	613b      	str	r3, [r7, #16]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	613b      	str	r3, [r7, #16]
 800a77e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a780:	e066      	b.n	800a850 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	6a39      	ldr	r1, [r7, #32]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 ff1a 	bl	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00d      	beq.n	800a7ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	2b04      	cmp	r3, #4
 800a798:	d107      	bne.n	800a7aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e06b      	b.n	800a886 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b2:	781a      	ldrb	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	1c5a      	adds	r2, r3, #1
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f003 0304 	and.w	r3, r3, #4
 800a7e8:	2b04      	cmp	r3, #4
 800a7ea:	d11b      	bne.n	800a824 <HAL_I2C_Master_Transmit+0x188>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d017      	beq.n	800a824 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a80e:	b29b      	uxth	r3, r3
 800a810:	3b01      	subs	r3, #1
 800a812:	b29a      	uxth	r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a81c:	3b01      	subs	r3, #1
 800a81e:	b29a      	uxth	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	6a39      	ldr	r1, [r7, #32]
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 ff11 	bl	800b650 <I2C_WaitOnBTFFlagUntilTimeout>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00d      	beq.n	800a850 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a838:	2b04      	cmp	r3, #4
 800a83a:	d107      	bne.n	800a84c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a84a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e01a      	b.n	800a886 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a854:	2b00      	cmp	r3, #0
 800a856:	d194      	bne.n	800a782 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2220      	movs	r2, #32
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	e000      	b.n	800a886 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a884:	2302      	movs	r3, #2
  }
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	00100002 	.word	0x00100002
 800a894:	ffff0000 	.word	0xffff0000

0800a898 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af02      	add	r7, sp, #8
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	817b      	strh	r3, [r7, #10]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	813b      	strh	r3, [r7, #8]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a8b2:	f7fe ff5d 	bl	8009770 <HAL_GetTick>
 800a8b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b20      	cmp	r3, #32
 800a8c2:	f040 80d9 	bne.w	800aa78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	2319      	movs	r3, #25
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	496d      	ldr	r1, [pc, #436]	; (800aa84 <HAL_I2C_Mem_Write+0x1ec>)
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 fd5b 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e0cc      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <HAL_I2C_Mem_Write+0x56>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e0c5      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	2b01      	cmp	r3, #1
 800a902:	d007      	beq.n	800a914 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f042 0201 	orr.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a922:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2221      	movs	r2, #33	; 0x21
 800a928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2240      	movs	r2, #64	; 0x40
 800a930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6a3a      	ldr	r2, [r7, #32]
 800a93e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4a4d      	ldr	r2, [pc, #308]	; (800aa88 <HAL_I2C_Mem_Write+0x1f0>)
 800a954:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a956:	88f8      	ldrh	r0, [r7, #6]
 800a958:	893a      	ldrh	r2, [r7, #8]
 800a95a:	8979      	ldrh	r1, [r7, #10]
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	4603      	mov	r3, r0
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 fb92 	bl	800b090 <I2C_RequestMemoryWrite>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d052      	beq.n	800aa18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e081      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fe20 	bl	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	d107      	bne.n	800a99e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a99c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e06b      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	781a      	ldrb	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d11b      	bne.n	800aa18 <HAL_I2C_Mem_Write+0x180>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d017      	beq.n	800aa18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	781a      	ldrb	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	3b01      	subs	r3, #1
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1aa      	bne.n	800a976 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 fe13 	bl	800b650 <I2C_WaitOnBTFFlagUntilTimeout>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00d      	beq.n	800aa4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d107      	bne.n	800aa48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e016      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	e000      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aa78:	2302      	movs	r3, #2
  }
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	00100002 	.word	0x00100002
 800aa88:	ffff0000 	.word	0xffff0000

0800aa8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b08c      	sub	sp, #48	; 0x30
 800aa90:	af02      	add	r7, sp, #8
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	4608      	mov	r0, r1
 800aa96:	4611      	mov	r1, r2
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	817b      	strh	r3, [r7, #10]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	813b      	strh	r3, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aaaa:	f7fe fe61 	bl	8009770 <HAL_GetTick>
 800aaae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b20      	cmp	r3, #32
 800aaba:	f040 8244 	bne.w	800af46 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	2319      	movs	r3, #25
 800aac4:	2201      	movs	r2, #1
 800aac6:	4982      	ldr	r1, [pc, #520]	; (800acd0 <HAL_I2C_Mem_Read+0x244>)
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 fc5f 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800aad4:	2302      	movs	r3, #2
 800aad6:	e237      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_I2C_Mem_Read+0x5a>
 800aae2:	2302      	movs	r3, #2
 800aae4:	e230      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d007      	beq.n	800ab0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0201 	orr.w	r2, r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2222      	movs	r2, #34	; 0x22
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2240      	movs	r2, #64	; 0x40
 800ab28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ab3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4a62      	ldr	r2, [pc, #392]	; (800acd4 <HAL_I2C_Mem_Read+0x248>)
 800ab4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab4e:	88f8      	ldrh	r0, [r7, #6]
 800ab50:	893a      	ldrh	r2, [r7, #8]
 800ab52:	8979      	ldrh	r1, [r7, #10]
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 fb2c 	bl	800b1bc <I2C_RequestMemoryRead>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e1ec      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d113      	bne.n	800ab9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab76:	2300      	movs	r3, #0
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	61fb      	str	r3, [r7, #28]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	61fb      	str	r3, [r7, #28]
 800ab8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab9a:	601a      	str	r2, [r3, #0]
 800ab9c:	e1c0      	b.n	800af20 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d11e      	bne.n	800abe4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800abb6:	b672      	cpsid	i
}
 800abb8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abba:	2300      	movs	r3, #0
 800abbc:	61bb      	str	r3, [r7, #24]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	61bb      	str	r3, [r7, #24]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	61bb      	str	r3, [r7, #24]
 800abce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800abe0:	b662      	cpsie	i
}
 800abe2:	e035      	b.n	800ac50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d11e      	bne.n	800ac2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800abfc:	b672      	cpsid	i
}
 800abfe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac00:	2300      	movs	r3, #0
 800ac02:	617b      	str	r3, [r7, #20]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	617b      	str	r3, [r7, #20]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ac26:	b662      	cpsie	i
}
 800ac28:	e012      	b.n	800ac50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	613b      	str	r3, [r7, #16]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	695b      	ldr	r3, [r3, #20]
 800ac44:	613b      	str	r3, [r7, #16]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	613b      	str	r3, [r7, #16]
 800ac4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800ac50:	e166      	b.n	800af20 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	f200 811f 	bhi.w	800ae9a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d123      	bne.n	800acac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 fd39 	bl	800b6e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e167      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	691a      	ldr	r2, [r3, #16]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	b2d2      	uxtb	r2, r2
 800ac84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8a:	1c5a      	adds	r2, r3, #1
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac94:	3b01      	subs	r3, #1
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	3b01      	subs	r3, #1
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800acaa:	e139      	b.n	800af20 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d152      	bne.n	800ad5a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	2200      	movs	r2, #0
 800acbc:	4906      	ldr	r1, [pc, #24]	; (800acd8 <HAL_I2C_Mem_Read+0x24c>)
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f000 fb64 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d008      	beq.n	800acdc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e13c      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
 800acce:	bf00      	nop
 800acd0:	00100002 	.word	0x00100002
 800acd4:	ffff0000 	.word	0xffff0000
 800acd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800acdc:	b672      	cpsid	i
}
 800acde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	691a      	ldr	r2, [r3, #16]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	b2d2      	uxtb	r2, r2
 800acfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ad22:	b662      	cpsie	i
}
 800ad24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	691a      	ldr	r2, [r3, #16]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	b2d2      	uxtb	r2, r2
 800ad32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad42:	3b01      	subs	r3, #1
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	3b01      	subs	r3, #1
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad58:	e0e2      	b.n	800af20 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	2200      	movs	r2, #0
 800ad62:	497b      	ldr	r1, [pc, #492]	; (800af50 <HAL_I2C_Mem_Read+0x4c4>)
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 fb11 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e0e9      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad84:	b672      	cpsid	i
}
 800ad86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	691a      	ldr	r2, [r3, #16]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	b2d2      	uxtb	r2, r2
 800ad94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ada4:	3b01      	subs	r3, #1
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	3b01      	subs	r3, #1
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800adba:	4b66      	ldr	r3, [pc, #408]	; (800af54 <HAL_I2C_Mem_Read+0x4c8>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	08db      	lsrs	r3, r3, #3
 800adc0:	4a65      	ldr	r2, [pc, #404]	; (800af58 <HAL_I2C_Mem_Read+0x4cc>)
 800adc2:	fba2 2303 	umull	r2, r3, r2, r3
 800adc6:	0a1a      	lsrs	r2, r3, #8
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	00da      	lsls	r2, r3, #3
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	3b01      	subs	r3, #1
 800add8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d118      	bne.n	800ae12 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2220      	movs	r2, #32
 800adea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfa:	f043 0220 	orr.w	r2, r3, #32
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800ae02:	b662      	cpsie	i
}
 800ae04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e09a      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	f003 0304 	and.w	r3, r3, #4
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d1d9      	bne.n	800add4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	691a      	ldr	r2, [r3, #16]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	b2d2      	uxtb	r2, r2
 800ae3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ae62:	b662      	cpsie	i
}
 800ae64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae70:	b2d2      	uxtb	r2, r2
 800ae72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae82:	3b01      	subs	r3, #1
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	3b01      	subs	r3, #1
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ae98:	e042      	b.n	800af20 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f000 fc1e 	bl	800b6e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e04c      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	691a      	ldr	r2, [r3, #16]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	b2d2      	uxtb	r2, r2
 800aeba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	1c5a      	adds	r2, r3, #1
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeca:	3b01      	subs	r3, #1
 800aecc:	b29a      	uxth	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	3b01      	subs	r3, #1
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	f003 0304 	and.w	r3, r3, #4
 800aeea:	2b04      	cmp	r3, #4
 800aeec:	d118      	bne.n	800af20 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	691a      	ldr	r2, [r3, #16]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef8:	b2d2      	uxtb	r2, r2
 800aefa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	1c5a      	adds	r2, r3, #1
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af0a:	3b01      	subs	r3, #1
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af16:	b29b      	uxth	r3, r3
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af24:	2b00      	cmp	r3, #0
 800af26:	f47f ae94 	bne.w	800ac52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2220      	movs	r2, #32
 800af2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	e000      	b.n	800af48 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800af46:	2302      	movs	r3, #2
  }
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3728      	adds	r7, #40	; 0x28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	00010004 	.word	0x00010004
 800af54:	200009a0 	.word	0x200009a0
 800af58:	14f8b589 	.word	0x14f8b589

0800af5c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af6a:	b2db      	uxtb	r3, r3
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	bc80      	pop	{r7}
 800af74:	4770      	bx	lr

0800af76 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800af82:	4618      	mov	r0, r3
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr

0800af8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	607a      	str	r2, [r7, #4]
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	460b      	mov	r3, r1
 800af9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2b08      	cmp	r3, #8
 800afa6:	d006      	beq.n	800afb6 <I2C_MasterRequestWrite+0x2a>
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d003      	beq.n	800afb6 <I2C_MasterRequestWrite+0x2a>
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800afb4:	d108      	bne.n	800afc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	e00b      	b.n	800afe0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afcc:	2b12      	cmp	r3, #18
 800afce:	d107      	bne.n	800afe0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 f9cd 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00d      	beq.n	800b014 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b006:	d103      	bne.n	800b010 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b00e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	e035      	b.n	800b080 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b01c:	d108      	bne.n	800b030 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b01e:	897b      	ldrh	r3, [r7, #10]
 800b020:	b2db      	uxtb	r3, r3
 800b022:	461a      	mov	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b02c:	611a      	str	r2, [r3, #16]
 800b02e:	e01b      	b.n	800b068 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b030:	897b      	ldrh	r3, [r7, #10]
 800b032:	11db      	asrs	r3, r3, #7
 800b034:	b2db      	uxtb	r3, r3
 800b036:	f003 0306 	and.w	r3, r3, #6
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f063 030f 	orn	r3, r3, #15
 800b040:	b2da      	uxtb	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	490e      	ldr	r1, [pc, #56]	; (800b088 <I2C_MasterRequestWrite+0xfc>)
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 fa16 	bl	800b480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e010      	b.n	800b080 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b05e:	897b      	ldrh	r3, [r7, #10]
 800b060:	b2da      	uxtb	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4907      	ldr	r1, [pc, #28]	; (800b08c <I2C_MasterRequestWrite+0x100>)
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 fa06 	bl	800b480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	00010008 	.word	0x00010008
 800b08c:	00010002 	.word	0x00010002

0800b090 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af02      	add	r7, sp, #8
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	461a      	mov	r2, r3
 800b09e:	4603      	mov	r3, r0
 800b0a0:	817b      	strh	r3, [r7, #10]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	813b      	strh	r3, [r7, #8]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 f960 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00d      	beq.n	800b0ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e0:	d103      	bne.n	800b0ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	e05f      	b.n	800b1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b0ee:	897b      	ldrh	r3, [r7, #10]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	6a3a      	ldr	r2, [r7, #32]
 800b102:	492d      	ldr	r1, [pc, #180]	; (800b1b8 <I2C_RequestMemoryWrite+0x128>)
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 f9bb 	bl	800b480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e04c      	b.n	800b1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b114:	2300      	movs	r3, #0
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	617b      	str	r3, [r7, #20]
 800b128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b12c:	6a39      	ldr	r1, [r7, #32]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f000 fa46 	bl	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00d      	beq.n	800b156 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13e:	2b04      	cmp	r3, #4
 800b140:	d107      	bne.n	800b152 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	e02b      	b.n	800b1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b156:	88fb      	ldrh	r3, [r7, #6]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d105      	bne.n	800b168 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b15c:	893b      	ldrh	r3, [r7, #8]
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	611a      	str	r2, [r3, #16]
 800b166:	e021      	b.n	800b1ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b168:	893b      	ldrh	r3, [r7, #8]
 800b16a:	0a1b      	lsrs	r3, r3, #8
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b178:	6a39      	ldr	r1, [r7, #32]
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 fa20 	bl	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00d      	beq.n	800b1a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d107      	bne.n	800b19e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b19c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e005      	b.n	800b1ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b1a2:	893b      	ldrh	r3, [r7, #8]
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	00010002 	.word	0x00010002

0800b1bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	817b      	strh	r3, [r7, #10]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	813b      	strh	r3, [r7, #8]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 f8c2 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00d      	beq.n	800b22a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21c:	d103      	bne.n	800b226 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b224:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b226:	2303      	movs	r3, #3
 800b228:	e0aa      	b.n	800b380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b22a:	897b      	ldrh	r3, [r7, #10]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	461a      	mov	r2, r3
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	6a3a      	ldr	r2, [r7, #32]
 800b23e:	4952      	ldr	r1, [pc, #328]	; (800b388 <I2C_RequestMemoryRead+0x1cc>)
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 f91d 	bl	800b480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e097      	b.n	800b380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b250:	2300      	movs	r3, #0
 800b252:	617b      	str	r3, [r7, #20]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	617b      	str	r3, [r7, #20]
 800b264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b268:	6a39      	ldr	r1, [r7, #32]
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 f9a8 	bl	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00d      	beq.n	800b292 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	2b04      	cmp	r3, #4
 800b27c:	d107      	bne.n	800b28e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b28c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	e076      	b.n	800b380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b292:	88fb      	ldrh	r3, [r7, #6]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d105      	bne.n	800b2a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b298:	893b      	ldrh	r3, [r7, #8]
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	611a      	str	r2, [r3, #16]
 800b2a2:	e021      	b.n	800b2e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b2a4:	893b      	ldrh	r3, [r7, #8]
 800b2a6:	0a1b      	lsrs	r3, r3, #8
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b4:	6a39      	ldr	r1, [r7, #32]
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 f982 	bl	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00d      	beq.n	800b2de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c6:	2b04      	cmp	r3, #4
 800b2c8:	d107      	bne.n	800b2da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e050      	b.n	800b380 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b2de:	893b      	ldrh	r3, [r7, #8]
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ea:	6a39      	ldr	r1, [r7, #32]
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 f967 	bl	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00d      	beq.n	800b314 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d107      	bne.n	800b310 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b30e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e035      	b.n	800b380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b322:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 f82b 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00d      	beq.n	800b358 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b34a:	d103      	bne.n	800b354 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b354:	2303      	movs	r3, #3
 800b356:	e013      	b.n	800b380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b358:	897b      	ldrh	r3, [r7, #10]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	f043 0301 	orr.w	r3, r3, #1
 800b360:	b2da      	uxtb	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	6a3a      	ldr	r2, [r7, #32]
 800b36c:	4906      	ldr	r1, [pc, #24]	; (800b388 <I2C_RequestMemoryRead+0x1cc>)
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 f886 	bl	800b480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e000      	b.n	800b380 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	00010002 	.word	0x00010002

0800b38c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	4613      	mov	r3, r2
 800b39a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b39c:	e048      	b.n	800b430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3a4:	d044      	beq.n	800b430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3a6:	f7fe f9e3 	bl	8009770 <HAL_GetTick>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d302      	bcc.n	800b3bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d139      	bne.n	800b430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	0c1b      	lsrs	r3, r3, #16
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d10d      	bne.n	800b3e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	43da      	mvns	r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	bf0c      	ite	eq
 800b3d8:	2301      	moveq	r3, #1
 800b3da:	2300      	movne	r3, #0
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	461a      	mov	r2, r3
 800b3e0:	e00c      	b.n	800b3fc <I2C_WaitOnFlagUntilTimeout+0x70>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	43da      	mvns	r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bf0c      	ite	eq
 800b3f4:	2301      	moveq	r3, #1
 800b3f6:	2300      	movne	r3, #0
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d116      	bne.n	800b430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41c:	f043 0220 	orr.w	r2, r3, #32
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e023      	b.n	800b478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	0c1b      	lsrs	r3, r3, #16
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b01      	cmp	r3, #1
 800b438:	d10d      	bne.n	800b456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	43da      	mvns	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	4013      	ands	r3, r2
 800b446:	b29b      	uxth	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bf0c      	ite	eq
 800b44c:	2301      	moveq	r3, #1
 800b44e:	2300      	movne	r3, #0
 800b450:	b2db      	uxtb	r3, r3
 800b452:	461a      	mov	r2, r3
 800b454:	e00c      	b.n	800b470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	43da      	mvns	r2, r3
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	4013      	ands	r3, r2
 800b462:	b29b      	uxth	r3, r3
 800b464:	2b00      	cmp	r3, #0
 800b466:	bf0c      	ite	eq
 800b468:	2301      	moveq	r3, #1
 800b46a:	2300      	movne	r3, #0
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	461a      	mov	r2, r3
 800b470:	79fb      	ldrb	r3, [r7, #7]
 800b472:	429a      	cmp	r2, r3
 800b474:	d093      	beq.n	800b39e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
 800b48c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b48e:	e071      	b.n	800b574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b49e:	d123      	bne.n	800b4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b4b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2220      	movs	r2, #32
 800b4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d4:	f043 0204 	orr.w	r2, r3, #4
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e067      	b.n	800b5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ee:	d041      	beq.n	800b574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4f0:	f7fe f93e 	bl	8009770 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d302      	bcc.n	800b506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d136      	bne.n	800b574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	0c1b      	lsrs	r3, r3, #16
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d10c      	bne.n	800b52a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	43da      	mvns	r2, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	4013      	ands	r3, r2
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bf14      	ite	ne
 800b522:	2301      	movne	r3, #1
 800b524:	2300      	moveq	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	e00b      	b.n	800b542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	43da      	mvns	r2, r3
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	4013      	ands	r3, r2
 800b536:	b29b      	uxth	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bf14      	ite	ne
 800b53c:	2301      	movne	r3, #1
 800b53e:	2300      	moveq	r3, #0
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d016      	beq.n	800b574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2220      	movs	r2, #32
 800b550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b560:	f043 0220 	orr.w	r2, r3, #32
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e021      	b.n	800b5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	0c1b      	lsrs	r3, r3, #16
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d10c      	bne.n	800b598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	43da      	mvns	r2, r3
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	4013      	ands	r3, r2
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	bf14      	ite	ne
 800b590:	2301      	movne	r3, #1
 800b592:	2300      	moveq	r3, #0
 800b594:	b2db      	uxtb	r3, r3
 800b596:	e00b      	b.n	800b5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	43da      	mvns	r2, r3
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	bf14      	ite	ne
 800b5aa:	2301      	movne	r3, #1
 800b5ac:	2300      	moveq	r3, #0
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f47f af6d 	bne.w	800b490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5cc:	e034      	b.n	800b638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 f8e3 	bl	800b79a <I2C_IsAcknowledgeFailed>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e034      	b.n	800b648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5e4:	d028      	beq.n	800b638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5e6:	f7fe f8c3 	bl	8009770 <HAL_GetTick>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d302      	bcc.n	800b5fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d11d      	bne.n	800b638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b606:	2b80      	cmp	r3, #128	; 0x80
 800b608:	d016      	beq.n	800b638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2220      	movs	r2, #32
 800b614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b624:	f043 0220 	orr.w	r2, r3, #32
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	e007      	b.n	800b648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b642:	2b80      	cmp	r3, #128	; 0x80
 800b644:	d1c3      	bne.n	800b5ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b65c:	e034      	b.n	800b6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 f89b 	bl	800b79a <I2C_IsAcknowledgeFailed>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e034      	b.n	800b6d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b674:	d028      	beq.n	800b6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b676:	f7fe f87b 	bl	8009770 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	429a      	cmp	r2, r3
 800b684:	d302      	bcc.n	800b68c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d11d      	bne.n	800b6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	f003 0304 	and.w	r3, r3, #4
 800b696:	2b04      	cmp	r3, #4
 800b698:	d016      	beq.n	800b6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2220      	movs	r2, #32
 800b6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b4:	f043 0220 	orr.w	r2, r3, #32
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e007      	b.n	800b6d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	d1c3      	bne.n	800b65e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b6ec:	e049      	b.n	800b782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	f003 0310 	and.w	r3, r3, #16
 800b6f8:	2b10      	cmp	r3, #16
 800b6fa:	d119      	bne.n	800b730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f06f 0210 	mvn.w	r2, #16
 800b704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2220      	movs	r2, #32
 800b710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e030      	b.n	800b792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b730:	f7fe f81e 	bl	8009770 <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d302      	bcc.n	800b746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d11d      	bne.n	800b782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b750:	2b40      	cmp	r3, #64	; 0x40
 800b752:	d016      	beq.n	800b782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2220      	movs	r2, #32
 800b75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76e:	f043 0220 	orr.w	r2, r3, #32
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e007      	b.n	800b792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78c:	2b40      	cmp	r3, #64	; 0x40
 800b78e:	d1ae      	bne.n	800b6ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7b0:	d11b      	bne.n	800b7ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b7ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2220      	movs	r2, #32
 800b7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d6:	f043 0204 	orr.w	r2, r3, #4
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bc80      	pop	{r7}
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e272      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 8087 	beq.w	800b926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b818:	4b92      	ldr	r3, [pc, #584]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	f003 030c 	and.w	r3, r3, #12
 800b820:	2b04      	cmp	r3, #4
 800b822:	d00c      	beq.n	800b83e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b824:	4b8f      	ldr	r3, [pc, #572]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f003 030c 	and.w	r3, r3, #12
 800b82c:	2b08      	cmp	r3, #8
 800b82e:	d112      	bne.n	800b856 <HAL_RCC_OscConfig+0x5e>
 800b830:	4b8c      	ldr	r3, [pc, #560]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b83c:	d10b      	bne.n	800b856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b83e:	4b89      	ldr	r3, [pc, #548]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d06c      	beq.n	800b924 <HAL_RCC_OscConfig+0x12c>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d168      	bne.n	800b924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e24c      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b85e:	d106      	bne.n	800b86e <HAL_RCC_OscConfig+0x76>
 800b860:	4b80      	ldr	r3, [pc, #512]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a7f      	ldr	r2, [pc, #508]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	e02e      	b.n	800b8cc <HAL_RCC_OscConfig+0xd4>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10c      	bne.n	800b890 <HAL_RCC_OscConfig+0x98>
 800b876:	4b7b      	ldr	r3, [pc, #492]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a7a      	ldr	r2, [pc, #488]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b87c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b880:	6013      	str	r3, [r2, #0]
 800b882:	4b78      	ldr	r3, [pc, #480]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a77      	ldr	r2, [pc, #476]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b88c:	6013      	str	r3, [r2, #0]
 800b88e:	e01d      	b.n	800b8cc <HAL_RCC_OscConfig+0xd4>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b898:	d10c      	bne.n	800b8b4 <HAL_RCC_OscConfig+0xbc>
 800b89a:	4b72      	ldr	r3, [pc, #456]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a71      	ldr	r2, [pc, #452]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b8a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	4b6f      	ldr	r3, [pc, #444]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a6e      	ldr	r2, [pc, #440]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b8ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	e00b      	b.n	800b8cc <HAL_RCC_OscConfig+0xd4>
 800b8b4:	4b6b      	ldr	r3, [pc, #428]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a6a      	ldr	r2, [pc, #424]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b8ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	4b68      	ldr	r3, [pc, #416]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a67      	ldr	r2, [pc, #412]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b8c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d013      	beq.n	800b8fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8d4:	f7fd ff4c 	bl	8009770 <HAL_GetTick>
 800b8d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8da:	e008      	b.n	800b8ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8dc:	f7fd ff48 	bl	8009770 <HAL_GetTick>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	2b64      	cmp	r3, #100	; 0x64
 800b8e8:	d901      	bls.n	800b8ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e200      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8ee:	4b5d      	ldr	r3, [pc, #372]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0f0      	beq.n	800b8dc <HAL_RCC_OscConfig+0xe4>
 800b8fa:	e014      	b.n	800b926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8fc:	f7fd ff38 	bl	8009770 <HAL_GetTick>
 800b900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b902:	e008      	b.n	800b916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b904:	f7fd ff34 	bl	8009770 <HAL_GetTick>
 800b908:	4602      	mov	r2, r0
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	1ad3      	subs	r3, r2, r3
 800b90e:	2b64      	cmp	r3, #100	; 0x64
 800b910:	d901      	bls.n	800b916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b912:	2303      	movs	r3, #3
 800b914:	e1ec      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b916:	4b53      	ldr	r3, [pc, #332]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1f0      	bne.n	800b904 <HAL_RCC_OscConfig+0x10c>
 800b922:	e000      	b.n	800b926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 0302 	and.w	r3, r3, #2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d063      	beq.n	800b9fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b932:	4b4c      	ldr	r3, [pc, #304]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f003 030c 	and.w	r3, r3, #12
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00b      	beq.n	800b956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b93e:	4b49      	ldr	r3, [pc, #292]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f003 030c 	and.w	r3, r3, #12
 800b946:	2b08      	cmp	r3, #8
 800b948:	d11c      	bne.n	800b984 <HAL_RCC_OscConfig+0x18c>
 800b94a:	4b46      	ldr	r3, [pc, #280]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b952:	2b00      	cmp	r3, #0
 800b954:	d116      	bne.n	800b984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b956:	4b43      	ldr	r3, [pc, #268]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f003 0302 	and.w	r3, r3, #2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d005      	beq.n	800b96e <HAL_RCC_OscConfig+0x176>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d001      	beq.n	800b96e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e1c0      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b96e:	4b3d      	ldr	r3, [pc, #244]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	00db      	lsls	r3, r3, #3
 800b97c:	4939      	ldr	r1, [pc, #228]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b982:	e03a      	b.n	800b9fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d020      	beq.n	800b9ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b98c:	4b36      	ldr	r3, [pc, #216]	; (800ba68 <HAL_RCC_OscConfig+0x270>)
 800b98e:	2201      	movs	r2, #1
 800b990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b992:	f7fd feed 	bl	8009770 <HAL_GetTick>
 800b996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b998:	e008      	b.n	800b9ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b99a:	f7fd fee9 	bl	8009770 <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d901      	bls.n	800b9ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	e1a1      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9ac:	4b2d      	ldr	r3, [pc, #180]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d0f0      	beq.n	800b99a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9b8:	4b2a      	ldr	r3, [pc, #168]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	00db      	lsls	r3, r3, #3
 800b9c6:	4927      	ldr	r1, [pc, #156]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	600b      	str	r3, [r1, #0]
 800b9cc:	e015      	b.n	800b9fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b9ce:	4b26      	ldr	r3, [pc, #152]	; (800ba68 <HAL_RCC_OscConfig+0x270>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9d4:	f7fd fecc 	bl	8009770 <HAL_GetTick>
 800b9d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9da:	e008      	b.n	800b9ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9dc:	f7fd fec8 	bl	8009770 <HAL_GetTick>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d901      	bls.n	800b9ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	e180      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9ee:	4b1d      	ldr	r3, [pc, #116]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0302 	and.w	r3, r3, #2
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1f0      	bne.n	800b9dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 0308 	and.w	r3, r3, #8
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d03a      	beq.n	800ba7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d019      	beq.n	800ba42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba0e:	4b17      	ldr	r3, [pc, #92]	; (800ba6c <HAL_RCC_OscConfig+0x274>)
 800ba10:	2201      	movs	r2, #1
 800ba12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba14:	f7fd feac 	bl	8009770 <HAL_GetTick>
 800ba18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba1a:	e008      	b.n	800ba2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba1c:	f7fd fea8 	bl	8009770 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d901      	bls.n	800ba2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	e160      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba2e:	4b0d      	ldr	r3, [pc, #52]	; (800ba64 <HAL_RCC_OscConfig+0x26c>)
 800ba30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0f0      	beq.n	800ba1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ba3a:	2001      	movs	r0, #1
 800ba3c:	f000 face 	bl	800bfdc <RCC_Delay>
 800ba40:	e01c      	b.n	800ba7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba42:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <HAL_RCC_OscConfig+0x274>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba48:	f7fd fe92 	bl	8009770 <HAL_GetTick>
 800ba4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba4e:	e00f      	b.n	800ba70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba50:	f7fd fe8e 	bl	8009770 <HAL_GetTick>
 800ba54:	4602      	mov	r2, r0
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d908      	bls.n	800ba70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	e146      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
 800ba62:	bf00      	nop
 800ba64:	40021000 	.word	0x40021000
 800ba68:	42420000 	.word	0x42420000
 800ba6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba70:	4b92      	ldr	r3, [pc, #584]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba74:	f003 0302 	and.w	r3, r3, #2
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1e9      	bne.n	800ba50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0304 	and.w	r3, r3, #4
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 80a6 	beq.w	800bbd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba8e:	4b8b      	ldr	r3, [pc, #556]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10d      	bne.n	800bab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba9a:	4b88      	ldr	r3, [pc, #544]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800ba9c:	69db      	ldr	r3, [r3, #28]
 800ba9e:	4a87      	ldr	r2, [pc, #540]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800baa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baa4:	61d3      	str	r3, [r2, #28]
 800baa6:	4b85      	ldr	r3, [pc, #532]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baae:	60bb      	str	r3, [r7, #8]
 800bab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bab2:	2301      	movs	r3, #1
 800bab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bab6:	4b82      	ldr	r3, [pc, #520]	; (800bcc0 <HAL_RCC_OscConfig+0x4c8>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d118      	bne.n	800baf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bac2:	4b7f      	ldr	r3, [pc, #508]	; (800bcc0 <HAL_RCC_OscConfig+0x4c8>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a7e      	ldr	r2, [pc, #504]	; (800bcc0 <HAL_RCC_OscConfig+0x4c8>)
 800bac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bacc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bace:	f7fd fe4f 	bl	8009770 <HAL_GetTick>
 800bad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bad4:	e008      	b.n	800bae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bad6:	f7fd fe4b 	bl	8009770 <HAL_GetTick>
 800bada:	4602      	mov	r2, r0
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	2b64      	cmp	r3, #100	; 0x64
 800bae2:	d901      	bls.n	800bae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bae4:	2303      	movs	r3, #3
 800bae6:	e103      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bae8:	4b75      	ldr	r3, [pc, #468]	; (800bcc0 <HAL_RCC_OscConfig+0x4c8>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0f0      	beq.n	800bad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d106      	bne.n	800bb0a <HAL_RCC_OscConfig+0x312>
 800bafc:	4b6f      	ldr	r3, [pc, #444]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	4a6e      	ldr	r2, [pc, #440]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb02:	f043 0301 	orr.w	r3, r3, #1
 800bb06:	6213      	str	r3, [r2, #32]
 800bb08:	e02d      	b.n	800bb66 <HAL_RCC_OscConfig+0x36e>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10c      	bne.n	800bb2c <HAL_RCC_OscConfig+0x334>
 800bb12:	4b6a      	ldr	r3, [pc, #424]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	4a69      	ldr	r2, [pc, #420]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb18:	f023 0301 	bic.w	r3, r3, #1
 800bb1c:	6213      	str	r3, [r2, #32]
 800bb1e:	4b67      	ldr	r3, [pc, #412]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	4a66      	ldr	r2, [pc, #408]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb24:	f023 0304 	bic.w	r3, r3, #4
 800bb28:	6213      	str	r3, [r2, #32]
 800bb2a:	e01c      	b.n	800bb66 <HAL_RCC_OscConfig+0x36e>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	2b05      	cmp	r3, #5
 800bb32:	d10c      	bne.n	800bb4e <HAL_RCC_OscConfig+0x356>
 800bb34:	4b61      	ldr	r3, [pc, #388]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb36:	6a1b      	ldr	r3, [r3, #32]
 800bb38:	4a60      	ldr	r2, [pc, #384]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb3a:	f043 0304 	orr.w	r3, r3, #4
 800bb3e:	6213      	str	r3, [r2, #32]
 800bb40:	4b5e      	ldr	r3, [pc, #376]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb42:	6a1b      	ldr	r3, [r3, #32]
 800bb44:	4a5d      	ldr	r2, [pc, #372]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb46:	f043 0301 	orr.w	r3, r3, #1
 800bb4a:	6213      	str	r3, [r2, #32]
 800bb4c:	e00b      	b.n	800bb66 <HAL_RCC_OscConfig+0x36e>
 800bb4e:	4b5b      	ldr	r3, [pc, #364]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb50:	6a1b      	ldr	r3, [r3, #32]
 800bb52:	4a5a      	ldr	r2, [pc, #360]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb54:	f023 0301 	bic.w	r3, r3, #1
 800bb58:	6213      	str	r3, [r2, #32]
 800bb5a:	4b58      	ldr	r3, [pc, #352]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	4a57      	ldr	r2, [pc, #348]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb60:	f023 0304 	bic.w	r3, r3, #4
 800bb64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d015      	beq.n	800bb9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb6e:	f7fd fdff 	bl	8009770 <HAL_GetTick>
 800bb72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb74:	e00a      	b.n	800bb8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb76:	f7fd fdfb 	bl	8009770 <HAL_GetTick>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d901      	bls.n	800bb8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e0b1      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb8c:	4b4b      	ldr	r3, [pc, #300]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	f003 0302 	and.w	r3, r3, #2
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d0ee      	beq.n	800bb76 <HAL_RCC_OscConfig+0x37e>
 800bb98:	e014      	b.n	800bbc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb9a:	f7fd fde9 	bl	8009770 <HAL_GetTick>
 800bb9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bba0:	e00a      	b.n	800bbb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bba2:	f7fd fde5 	bl	8009770 <HAL_GetTick>
 800bba6:	4602      	mov	r2, r0
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	1ad3      	subs	r3, r2, r3
 800bbac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d901      	bls.n	800bbb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e09b      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbb8:	4b40      	ldr	r3, [pc, #256]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bbba:	6a1b      	ldr	r3, [r3, #32]
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1ee      	bne.n	800bba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d105      	bne.n	800bbd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bbca:	4b3c      	ldr	r3, [pc, #240]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	4a3b      	ldr	r2, [pc, #236]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bbd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f000 8087 	beq.w	800bcee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bbe0:	4b36      	ldr	r3, [pc, #216]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	f003 030c 	and.w	r3, r3, #12
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d061      	beq.n	800bcb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d146      	bne.n	800bc82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbf4:	4b33      	ldr	r3, [pc, #204]	; (800bcc4 <HAL_RCC_OscConfig+0x4cc>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbfa:	f7fd fdb9 	bl	8009770 <HAL_GetTick>
 800bbfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc00:	e008      	b.n	800bc14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc02:	f7fd fdb5 	bl	8009770 <HAL_GetTick>
 800bc06:	4602      	mov	r2, r0
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d901      	bls.n	800bc14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bc10:	2303      	movs	r3, #3
 800bc12:	e06d      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc14:	4b29      	ldr	r3, [pc, #164]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1f0      	bne.n	800bc02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a1b      	ldr	r3, [r3, #32]
 800bc24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc28:	d108      	bne.n	800bc3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bc2a:	4b24      	ldr	r3, [pc, #144]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	4921      	ldr	r1, [pc, #132]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc3c:	4b1f      	ldr	r3, [pc, #124]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a19      	ldr	r1, [r3, #32]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	430b      	orrs	r3, r1
 800bc4e:	491b      	ldr	r1, [pc, #108]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc54:	4b1b      	ldr	r3, [pc, #108]	; (800bcc4 <HAL_RCC_OscConfig+0x4cc>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc5a:	f7fd fd89 	bl	8009770 <HAL_GetTick>
 800bc5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bc60:	e008      	b.n	800bc74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc62:	f7fd fd85 	bl	8009770 <HAL_GetTick>
 800bc66:	4602      	mov	r2, r0
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d901      	bls.n	800bc74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e03d      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bc74:	4b11      	ldr	r3, [pc, #68]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d0f0      	beq.n	800bc62 <HAL_RCC_OscConfig+0x46a>
 800bc80:	e035      	b.n	800bcee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc82:	4b10      	ldr	r3, [pc, #64]	; (800bcc4 <HAL_RCC_OscConfig+0x4cc>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc88:	f7fd fd72 	bl	8009770 <HAL_GetTick>
 800bc8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc8e:	e008      	b.n	800bca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc90:	f7fd fd6e 	bl	8009770 <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d901      	bls.n	800bca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	e026      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bca2:	4b06      	ldr	r3, [pc, #24]	; (800bcbc <HAL_RCC_OscConfig+0x4c4>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1f0      	bne.n	800bc90 <HAL_RCC_OscConfig+0x498>
 800bcae:	e01e      	b.n	800bcee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d107      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e019      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
 800bcbc:	40021000 	.word	0x40021000
 800bcc0:	40007000 	.word	0x40007000
 800bcc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bcc8:	4b0b      	ldr	r3, [pc, #44]	; (800bcf8 <HAL_RCC_OscConfig+0x500>)
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a1b      	ldr	r3, [r3, #32]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d106      	bne.n	800bcea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d001      	beq.n	800bcee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e000      	b.n	800bcf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	40021000 	.word	0x40021000

0800bcfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e0d0      	b.n	800beb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bd10:	4b6a      	ldr	r3, [pc, #424]	; (800bebc <HAL_RCC_ClockConfig+0x1c0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0307 	and.w	r3, r3, #7
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d910      	bls.n	800bd40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd1e:	4b67      	ldr	r3, [pc, #412]	; (800bebc <HAL_RCC_ClockConfig+0x1c0>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f023 0207 	bic.w	r2, r3, #7
 800bd26:	4965      	ldr	r1, [pc, #404]	; (800bebc <HAL_RCC_ClockConfig+0x1c0>)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd2e:	4b63      	ldr	r3, [pc, #396]	; (800bebc <HAL_RCC_ClockConfig+0x1c0>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 0307 	and.w	r3, r3, #7
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d001      	beq.n	800bd40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e0b8      	b.n	800beb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 0302 	and.w	r3, r3, #2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d020      	beq.n	800bd8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d005      	beq.n	800bd64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd58:	4b59      	ldr	r3, [pc, #356]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	4a58      	ldr	r2, [pc, #352]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bd5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bd62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0308 	and.w	r3, r3, #8
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd70:	4b53      	ldr	r3, [pc, #332]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	4a52      	ldr	r2, [pc, #328]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bd76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800bd7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd7c:	4b50      	ldr	r3, [pc, #320]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	494d      	ldr	r1, [pc, #308]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 0301 	and.w	r3, r3, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d040      	beq.n	800be1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d107      	bne.n	800bdb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bda2:	4b47      	ldr	r3, [pc, #284]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d115      	bne.n	800bdda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e07f      	b.n	800beb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d107      	bne.n	800bdca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdba:	4b41      	ldr	r3, [pc, #260]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d109      	bne.n	800bdda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e073      	b.n	800beb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdca:	4b3d      	ldr	r3, [pc, #244]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f003 0302 	and.w	r3, r3, #2
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e06b      	b.n	800beb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bdda:	4b39      	ldr	r3, [pc, #228]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f023 0203 	bic.w	r2, r3, #3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	4936      	ldr	r1, [pc, #216]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bdec:	f7fd fcc0 	bl	8009770 <HAL_GetTick>
 800bdf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdf2:	e00a      	b.n	800be0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdf4:	f7fd fcbc 	bl	8009770 <HAL_GetTick>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800be02:	4293      	cmp	r3, r2
 800be04:	d901      	bls.n	800be0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e053      	b.n	800beb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be0a:	4b2d      	ldr	r3, [pc, #180]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	f003 020c 	and.w	r2, r3, #12
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	429a      	cmp	r2, r3
 800be1a:	d1eb      	bne.n	800bdf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800be1c:	4b27      	ldr	r3, [pc, #156]	; (800bebc <HAL_RCC_ClockConfig+0x1c0>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 0307 	and.w	r3, r3, #7
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	429a      	cmp	r2, r3
 800be28:	d210      	bcs.n	800be4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be2a:	4b24      	ldr	r3, [pc, #144]	; (800bebc <HAL_RCC_ClockConfig+0x1c0>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f023 0207 	bic.w	r2, r3, #7
 800be32:	4922      	ldr	r1, [pc, #136]	; (800bebc <HAL_RCC_ClockConfig+0x1c0>)
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	4313      	orrs	r3, r2
 800be38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be3a:	4b20      	ldr	r3, [pc, #128]	; (800bebc <HAL_RCC_ClockConfig+0x1c0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 0307 	and.w	r3, r3, #7
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d001      	beq.n	800be4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e032      	b.n	800beb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b00      	cmp	r3, #0
 800be56:	d008      	beq.n	800be6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be58:	4b19      	ldr	r3, [pc, #100]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	4916      	ldr	r1, [pc, #88]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800be66:	4313      	orrs	r3, r2
 800be68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 0308 	and.w	r3, r3, #8
 800be72:	2b00      	cmp	r3, #0
 800be74:	d009      	beq.n	800be8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800be76:	4b12      	ldr	r3, [pc, #72]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	490e      	ldr	r1, [pc, #56]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800be86:	4313      	orrs	r3, r2
 800be88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800be8a:	f000 f821 	bl	800bed0 <HAL_RCC_GetSysClockFreq>
 800be8e:	4602      	mov	r2, r0
 800be90:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <HAL_RCC_ClockConfig+0x1c4>)
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	091b      	lsrs	r3, r3, #4
 800be96:	f003 030f 	and.w	r3, r3, #15
 800be9a:	490a      	ldr	r1, [pc, #40]	; (800bec4 <HAL_RCC_ClockConfig+0x1c8>)
 800be9c:	5ccb      	ldrb	r3, [r1, r3]
 800be9e:	fa22 f303 	lsr.w	r3, r2, r3
 800bea2:	4a09      	ldr	r2, [pc, #36]	; (800bec8 <HAL_RCC_ClockConfig+0x1cc>)
 800bea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bea6:	4b09      	ldr	r3, [pc, #36]	; (800becc <HAL_RCC_ClockConfig+0x1d0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fd fc1e 	bl	80096ec <HAL_InitTick>

  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	40022000 	.word	0x40022000
 800bec0:	40021000 	.word	0x40021000
 800bec4:	0800ee70 	.word	0x0800ee70
 800bec8:	200009a0 	.word	0x200009a0
 800becc:	200009a4 	.word	0x200009a4

0800bed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bed6:	2300      	movs	r3, #0
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	2300      	movs	r3, #0
 800bedc:	60bb      	str	r3, [r7, #8]
 800bede:	2300      	movs	r3, #0
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	2300      	movs	r3, #0
 800bee4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800beea:	4b1e      	ldr	r3, [pc, #120]	; (800bf64 <HAL_RCC_GetSysClockFreq+0x94>)
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f003 030c 	and.w	r3, r3, #12
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d002      	beq.n	800bf00 <HAL_RCC_GetSysClockFreq+0x30>
 800befa:	2b08      	cmp	r3, #8
 800befc:	d003      	beq.n	800bf06 <HAL_RCC_GetSysClockFreq+0x36>
 800befe:	e027      	b.n	800bf50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bf00:	4b19      	ldr	r3, [pc, #100]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x98>)
 800bf02:	613b      	str	r3, [r7, #16]
      break;
 800bf04:	e027      	b.n	800bf56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	0c9b      	lsrs	r3, r3, #18
 800bf0a:	f003 030f 	and.w	r3, r3, #15
 800bf0e:	4a17      	ldr	r2, [pc, #92]	; (800bf6c <HAL_RCC_GetSysClockFreq+0x9c>)
 800bf10:	5cd3      	ldrb	r3, [r2, r3]
 800bf12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d010      	beq.n	800bf40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bf1e:	4b11      	ldr	r3, [pc, #68]	; (800bf64 <HAL_RCC_GetSysClockFreq+0x94>)
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	0c5b      	lsrs	r3, r3, #17
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	4a11      	ldr	r2, [pc, #68]	; (800bf70 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bf2a:	5cd3      	ldrb	r3, [r2, r3]
 800bf2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a0d      	ldr	r2, [pc, #52]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x98>)
 800bf32:	fb03 f202 	mul.w	r2, r3, r2
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf3c:	617b      	str	r3, [r7, #20]
 800bf3e:	e004      	b.n	800bf4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a0c      	ldr	r2, [pc, #48]	; (800bf74 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bf44:	fb02 f303 	mul.w	r3, r2, r3
 800bf48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	613b      	str	r3, [r7, #16]
      break;
 800bf4e:	e002      	b.n	800bf56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bf50:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <HAL_RCC_GetSysClockFreq+0x98>)
 800bf52:	613b      	str	r3, [r7, #16]
      break;
 800bf54:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf56:	693b      	ldr	r3, [r7, #16]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	371c      	adds	r7, #28
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bc80      	pop	{r7}
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	40021000 	.word	0x40021000
 800bf68:	007a1200 	.word	0x007a1200
 800bf6c:	0800ee88 	.word	0x0800ee88
 800bf70:	0800ee98 	.word	0x0800ee98
 800bf74:	003d0900 	.word	0x003d0900

0800bf78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf7c:	4b02      	ldr	r3, [pc, #8]	; (800bf88 <HAL_RCC_GetHCLKFreq+0x10>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bc80      	pop	{r7}
 800bf86:	4770      	bx	lr
 800bf88:	200009a0 	.word	0x200009a0

0800bf8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bf90:	f7ff fff2 	bl	800bf78 <HAL_RCC_GetHCLKFreq>
 800bf94:	4602      	mov	r2, r0
 800bf96:	4b05      	ldr	r3, [pc, #20]	; (800bfac <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	0a1b      	lsrs	r3, r3, #8
 800bf9c:	f003 0307 	and.w	r3, r3, #7
 800bfa0:	4903      	ldr	r1, [pc, #12]	; (800bfb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bfa2:	5ccb      	ldrb	r3, [r1, r3]
 800bfa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	40021000 	.word	0x40021000
 800bfb0:	0800ee80 	.word	0x0800ee80

0800bfb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bfb8:	f7ff ffde 	bl	800bf78 <HAL_RCC_GetHCLKFreq>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	4b05      	ldr	r3, [pc, #20]	; (800bfd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	0adb      	lsrs	r3, r3, #11
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	4903      	ldr	r1, [pc, #12]	; (800bfd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bfca:	5ccb      	ldrb	r3, [r1, r3]
 800bfcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	40021000 	.word	0x40021000
 800bfd8:	0800ee80 	.word	0x0800ee80

0800bfdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bfe4:	4b0a      	ldr	r3, [pc, #40]	; (800c010 <RCC_Delay+0x34>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a0a      	ldr	r2, [pc, #40]	; (800c014 <RCC_Delay+0x38>)
 800bfea:	fba2 2303 	umull	r2, r3, r2, r3
 800bfee:	0a5b      	lsrs	r3, r3, #9
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	fb02 f303 	mul.w	r3, r2, r3
 800bff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bff8:	bf00      	nop
  }
  while (Delay --);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	1e5a      	subs	r2, r3, #1
 800bffe:	60fa      	str	r2, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1f9      	bne.n	800bff8 <RCC_Delay+0x1c>
}
 800c004:	bf00      	nop
 800c006:	bf00      	nop
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bc80      	pop	{r7}
 800c00e:	4770      	bx	lr
 800c010:	200009a0 	.word	0x200009a0
 800c014:	10624dd3 	.word	0x10624dd3

0800c018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	e041      	b.n	800c0ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7fd fa26 	bl	8009490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2202      	movs	r2, #2
 800c048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3304      	adds	r3, #4
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f000 fa82 	bl	800c560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d001      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e044      	b.n	800c15a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68da      	ldr	r2, [r3, #12]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f042 0201 	orr.w	r2, r2, #1
 800c0e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a1d      	ldr	r2, [pc, #116]	; (800c164 <HAL_TIM_Base_Start_IT+0xac>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d018      	beq.n	800c124 <HAL_TIM_Base_Start_IT+0x6c>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a1c      	ldr	r2, [pc, #112]	; (800c168 <HAL_TIM_Base_Start_IT+0xb0>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d013      	beq.n	800c124 <HAL_TIM_Base_Start_IT+0x6c>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c104:	d00e      	beq.n	800c124 <HAL_TIM_Base_Start_IT+0x6c>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a18      	ldr	r2, [pc, #96]	; (800c16c <HAL_TIM_Base_Start_IT+0xb4>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d009      	beq.n	800c124 <HAL_TIM_Base_Start_IT+0x6c>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a16      	ldr	r2, [pc, #88]	; (800c170 <HAL_TIM_Base_Start_IT+0xb8>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d004      	beq.n	800c124 <HAL_TIM_Base_Start_IT+0x6c>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a15      	ldr	r2, [pc, #84]	; (800c174 <HAL_TIM_Base_Start_IT+0xbc>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d111      	bne.n	800c148 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f003 0307 	and.w	r3, r3, #7
 800c12e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b06      	cmp	r3, #6
 800c134:	d010      	beq.n	800c158 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f042 0201 	orr.w	r2, r2, #1
 800c144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c146:	e007      	b.n	800c158 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f042 0201 	orr.w	r2, r2, #1
 800c156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	bc80      	pop	{r7}
 800c162:	4770      	bx	lr
 800c164:	40012c00 	.word	0x40012c00
 800c168:	40013400 	.word	0x40013400
 800c16c:	40000400 	.word	0x40000400
 800c170:	40000800 	.word	0x40000800
 800c174:	40000c00 	.word	0x40000c00

0800c178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d122      	bne.n	800c1d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f003 0302 	and.w	r3, r3, #2
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d11b      	bne.n	800c1d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f06f 0202 	mvn.w	r2, #2
 800c1a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	f003 0303 	and.w	r3, r3, #3
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f9b4 	bl	800c528 <HAL_TIM_IC_CaptureCallback>
 800c1c0:	e005      	b.n	800c1ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f9a7 	bl	800c516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f9b6 	bl	800c53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	f003 0304 	and.w	r3, r3, #4
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d122      	bne.n	800c228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	f003 0304 	and.w	r3, r3, #4
 800c1ec:	2b04      	cmp	r3, #4
 800c1ee:	d11b      	bne.n	800c228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f06f 0204 	mvn.w	r2, #4
 800c1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f98a 	bl	800c528 <HAL_TIM_IC_CaptureCallback>
 800c214:	e005      	b.n	800c222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f97d 	bl	800c516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f98c 	bl	800c53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	f003 0308 	and.w	r3, r3, #8
 800c232:	2b08      	cmp	r3, #8
 800c234:	d122      	bne.n	800c27c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	f003 0308 	and.w	r3, r3, #8
 800c240:	2b08      	cmp	r3, #8
 800c242:	d11b      	bne.n	800c27c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f06f 0208 	mvn.w	r2, #8
 800c24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2204      	movs	r2, #4
 800c252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f960 	bl	800c528 <HAL_TIM_IC_CaptureCallback>
 800c268:	e005      	b.n	800c276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f953 	bl	800c516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f962 	bl	800c53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	f003 0310 	and.w	r3, r3, #16
 800c286:	2b10      	cmp	r3, #16
 800c288:	d122      	bne.n	800c2d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	f003 0310 	and.w	r3, r3, #16
 800c294:	2b10      	cmp	r3, #16
 800c296:	d11b      	bne.n	800c2d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f06f 0210 	mvn.w	r2, #16
 800c2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2208      	movs	r2, #8
 800c2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	69db      	ldr	r3, [r3, #28]
 800c2ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 f936 	bl	800c528 <HAL_TIM_IC_CaptureCallback>
 800c2bc:	e005      	b.n	800c2ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f929 	bl	800c516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f938 	bl	800c53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	f003 0301 	and.w	r3, r3, #1
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d10e      	bne.n	800c2fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d107      	bne.n	800c2fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f06f 0201 	mvn.w	r2, #1
 800c2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7fc fd62 	bl	8008dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c306:	2b80      	cmp	r3, #128	; 0x80
 800c308:	d10e      	bne.n	800c328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c314:	2b80      	cmp	r3, #128	; 0x80
 800c316:	d107      	bne.n	800c328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 faa1 	bl	800c86a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c332:	2b40      	cmp	r3, #64	; 0x40
 800c334:	d10e      	bne.n	800c354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c340:	2b40      	cmp	r3, #64	; 0x40
 800c342:	d107      	bne.n	800c354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f8fc 	bl	800c54c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b20      	cmp	r3, #32
 800c360:	d10e      	bne.n	800c380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	f003 0320 	and.w	r3, r3, #32
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	d107      	bne.n	800c380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f06f 0220 	mvn.w	r2, #32
 800c378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fa6c 	bl	800c858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d101      	bne.n	800c3a4 <HAL_TIM_ConfigClockSource+0x1c>
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	e0b4      	b.n	800c50e <HAL_TIM_ConfigClockSource+0x186>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c3c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3dc:	d03e      	beq.n	800c45c <HAL_TIM_ConfigClockSource+0xd4>
 800c3de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3e2:	f200 8087 	bhi.w	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c3e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3ea:	f000 8086 	beq.w	800c4fa <HAL_TIM_ConfigClockSource+0x172>
 800c3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3f2:	d87f      	bhi.n	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c3f4:	2b70      	cmp	r3, #112	; 0x70
 800c3f6:	d01a      	beq.n	800c42e <HAL_TIM_ConfigClockSource+0xa6>
 800c3f8:	2b70      	cmp	r3, #112	; 0x70
 800c3fa:	d87b      	bhi.n	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c3fc:	2b60      	cmp	r3, #96	; 0x60
 800c3fe:	d050      	beq.n	800c4a2 <HAL_TIM_ConfigClockSource+0x11a>
 800c400:	2b60      	cmp	r3, #96	; 0x60
 800c402:	d877      	bhi.n	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c404:	2b50      	cmp	r3, #80	; 0x50
 800c406:	d03c      	beq.n	800c482 <HAL_TIM_ConfigClockSource+0xfa>
 800c408:	2b50      	cmp	r3, #80	; 0x50
 800c40a:	d873      	bhi.n	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c40c:	2b40      	cmp	r3, #64	; 0x40
 800c40e:	d058      	beq.n	800c4c2 <HAL_TIM_ConfigClockSource+0x13a>
 800c410:	2b40      	cmp	r3, #64	; 0x40
 800c412:	d86f      	bhi.n	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c414:	2b30      	cmp	r3, #48	; 0x30
 800c416:	d064      	beq.n	800c4e2 <HAL_TIM_ConfigClockSource+0x15a>
 800c418:	2b30      	cmp	r3, #48	; 0x30
 800c41a:	d86b      	bhi.n	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c41c:	2b20      	cmp	r3, #32
 800c41e:	d060      	beq.n	800c4e2 <HAL_TIM_ConfigClockSource+0x15a>
 800c420:	2b20      	cmp	r3, #32
 800c422:	d867      	bhi.n	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
 800c424:	2b00      	cmp	r3, #0
 800c426:	d05c      	beq.n	800c4e2 <HAL_TIM_ConfigClockSource+0x15a>
 800c428:	2b10      	cmp	r3, #16
 800c42a:	d05a      	beq.n	800c4e2 <HAL_TIM_ConfigClockSource+0x15a>
 800c42c:	e062      	b.n	800c4f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c43e:	f000 f980 	bl	800c742 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	609a      	str	r2, [r3, #8]
      break;
 800c45a:	e04f      	b.n	800c4fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c46c:	f000 f969 	bl	800c742 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	689a      	ldr	r2, [r3, #8]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c47e:	609a      	str	r2, [r3, #8]
      break;
 800c480:	e03c      	b.n	800c4fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c48e:	461a      	mov	r2, r3
 800c490:	f000 f8e0 	bl	800c654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2150      	movs	r1, #80	; 0x50
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 f937 	bl	800c70e <TIM_ITRx_SetConfig>
      break;
 800c4a0:	e02c      	b.n	800c4fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	f000 f8fe 	bl	800c6b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2160      	movs	r1, #96	; 0x60
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 f927 	bl	800c70e <TIM_ITRx_SetConfig>
      break;
 800c4c0:	e01c      	b.n	800c4fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	f000 f8c0 	bl	800c654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2140      	movs	r1, #64	; 0x40
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 f917 	bl	800c70e <TIM_ITRx_SetConfig>
      break;
 800c4e0:	e00c      	b.n	800c4fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	f000 f90e 	bl	800c70e <TIM_ITRx_SetConfig>
      break;
 800c4f2:	e003      	b.n	800c4fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4f8:	e000      	b.n	800c4fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c4fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c516:	b480      	push	{r7}
 800c518:	b083      	sub	sp, #12
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c51e:	bf00      	nop
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	bc80      	pop	{r7}
 800c526:	4770      	bx	lr

0800c528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	bc80      	pop	{r7}
 800c538:	4770      	bx	lr

0800c53a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b083      	sub	sp, #12
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c542:	bf00      	nop
 800c544:	370c      	adds	r7, #12
 800c546:	46bd      	mov	sp, r7
 800c548:	bc80      	pop	{r7}
 800c54a:	4770      	bx	lr

0800c54c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c554:	bf00      	nop
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	bc80      	pop	{r7}
 800c55c:	4770      	bx	lr
	...

0800c560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a33      	ldr	r2, [pc, #204]	; (800c640 <TIM_Base_SetConfig+0xe0>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d013      	beq.n	800c5a0 <TIM_Base_SetConfig+0x40>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a32      	ldr	r2, [pc, #200]	; (800c644 <TIM_Base_SetConfig+0xe4>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d00f      	beq.n	800c5a0 <TIM_Base_SetConfig+0x40>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c586:	d00b      	beq.n	800c5a0 <TIM_Base_SetConfig+0x40>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a2f      	ldr	r2, [pc, #188]	; (800c648 <TIM_Base_SetConfig+0xe8>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d007      	beq.n	800c5a0 <TIM_Base_SetConfig+0x40>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a2e      	ldr	r2, [pc, #184]	; (800c64c <TIM_Base_SetConfig+0xec>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d003      	beq.n	800c5a0 <TIM_Base_SetConfig+0x40>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a2d      	ldr	r2, [pc, #180]	; (800c650 <TIM_Base_SetConfig+0xf0>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d108      	bne.n	800c5b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a22      	ldr	r2, [pc, #136]	; (800c640 <TIM_Base_SetConfig+0xe0>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d013      	beq.n	800c5e2 <TIM_Base_SetConfig+0x82>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a21      	ldr	r2, [pc, #132]	; (800c644 <TIM_Base_SetConfig+0xe4>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d00f      	beq.n	800c5e2 <TIM_Base_SetConfig+0x82>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5c8:	d00b      	beq.n	800c5e2 <TIM_Base_SetConfig+0x82>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a1e      	ldr	r2, [pc, #120]	; (800c648 <TIM_Base_SetConfig+0xe8>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d007      	beq.n	800c5e2 <TIM_Base_SetConfig+0x82>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a1d      	ldr	r2, [pc, #116]	; (800c64c <TIM_Base_SetConfig+0xec>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d003      	beq.n	800c5e2 <TIM_Base_SetConfig+0x82>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a1c      	ldr	r2, [pc, #112]	; (800c650 <TIM_Base_SetConfig+0xf0>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d108      	bne.n	800c5f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	695b      	ldr	r3, [r3, #20]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a09      	ldr	r2, [pc, #36]	; (800c640 <TIM_Base_SetConfig+0xe0>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d003      	beq.n	800c628 <TIM_Base_SetConfig+0xc8>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a08      	ldr	r2, [pc, #32]	; (800c644 <TIM_Base_SetConfig+0xe4>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d103      	bne.n	800c630 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	691a      	ldr	r2, [r3, #16]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	615a      	str	r2, [r3, #20]
}
 800c636:	bf00      	nop
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bc80      	pop	{r7}
 800c63e:	4770      	bx	lr
 800c640:	40012c00 	.word	0x40012c00
 800c644:	40013400 	.word	0x40013400
 800c648:	40000400 	.word	0x40000400
 800c64c:	40000800 	.word	0x40000800
 800c650:	40000c00 	.word	0x40000c00

0800c654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c654:	b480      	push	{r7}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6a1b      	ldr	r3, [r3, #32]
 800c664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	f023 0201 	bic.w	r2, r3, #1
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c67e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	011b      	lsls	r3, r3, #4
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	4313      	orrs	r3, r2
 800c688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f023 030a 	bic.w	r3, r3, #10
 800c690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	4313      	orrs	r3, r2
 800c698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	621a      	str	r2, [r3, #32]
}
 800c6a6:	bf00      	nop
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bc80      	pop	{r7}
 800c6ae:	4770      	bx	lr

0800c6b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6a1b      	ldr	r3, [r3, #32]
 800c6c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	f023 0210 	bic.w	r2, r3, #16
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	031b      	lsls	r3, r3, #12
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	011b      	lsls	r3, r3, #4
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	621a      	str	r2, [r3, #32]
}
 800c704:	bf00      	nop
 800c706:	371c      	adds	r7, #28
 800c708:	46bd      	mov	sp, r7
 800c70a:	bc80      	pop	{r7}
 800c70c:	4770      	bx	lr

0800c70e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c70e:	b480      	push	{r7}
 800c710:	b085      	sub	sp, #20
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	f043 0307 	orr.w	r3, r3, #7
 800c730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	609a      	str	r2, [r3, #8]
}
 800c738:	bf00      	nop
 800c73a:	3714      	adds	r7, #20
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bc80      	pop	{r7}
 800c740:	4770      	bx	lr

0800c742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c742:	b480      	push	{r7}
 800c744:	b087      	sub	sp, #28
 800c746:	af00      	add	r7, sp, #0
 800c748:	60f8      	str	r0, [r7, #12]
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	607a      	str	r2, [r7, #4]
 800c74e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c75c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	021a      	lsls	r2, r3, #8
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	431a      	orrs	r2, r3
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	4313      	orrs	r3, r2
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	697a      	ldr	r2, [r7, #20]
 800c774:	609a      	str	r2, [r3, #8]
}
 800c776:	bf00      	nop
 800c778:	371c      	adds	r7, #28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bc80      	pop	{r7}
 800c77e:	4770      	bx	lr

0800c780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c790:	2b01      	cmp	r3, #1
 800c792:	d101      	bne.n	800c798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c794:	2302      	movs	r3, #2
 800c796:	e050      	b.n	800c83a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a1b      	ldr	r2, [pc, #108]	; (800c844 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d018      	beq.n	800c80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a19      	ldr	r2, [pc, #100]	; (800c848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d013      	beq.n	800c80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ee:	d00e      	beq.n	800c80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a15      	ldr	r2, [pc, #84]	; (800c84c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d009      	beq.n	800c80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a14      	ldr	r2, [pc, #80]	; (800c850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d004      	beq.n	800c80e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a12      	ldr	r2, [pc, #72]	; (800c854 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d10c      	bne.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr
 800c844:	40012c00 	.word	0x40012c00
 800c848:	40013400 	.word	0x40013400
 800c84c:	40000400 	.word	0x40000400
 800c850:	40000800 	.word	0x40000800
 800c854:	40000c00 	.word	0x40000c00

0800c858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	bc80      	pop	{r7}
 800c868:	4770      	bx	lr

0800c86a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b083      	sub	sp, #12
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c872:	bf00      	nop
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	bc80      	pop	{r7}
 800c87a:	4770      	bx	lr

0800c87c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e042      	b.n	800c914 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b00      	cmp	r3, #0
 800c898:	d106      	bne.n	800c8a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7fc fe1a 	bl	80094dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2224      	movs	r2, #36	; 0x24
 800c8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fd11 	bl	800d2e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	691a      	ldr	r2, [r3, #16]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	695a      	ldr	r2, [r3, #20]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68da      	ldr	r2, [r3, #12]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2220      	movs	r2, #32
 800c900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2220      	movs	r2, #32
 800c908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	4613      	mov	r3, r2
 800c928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b20      	cmp	r3, #32
 800c934:	d121      	bne.n	800c97a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <HAL_UART_Transmit_IT+0x26>
 800c93c:	88fb      	ldrh	r3, [r7, #6]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e01a      	b.n	800c97c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	88fa      	ldrh	r2, [r7, #6]
 800c950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	88fa      	ldrh	r2, [r7, #6]
 800c956:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2221      	movs	r2, #33	; 0x21
 800c962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68da      	ldr	r2, [r3, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c974:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	e000      	b.n	800c97c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c97a:	2302      	movs	r3, #2
  }
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	bc80      	pop	{r7}
 800c984:	4770      	bx	lr

0800c986 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	4613      	mov	r3, r2
 800c992:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b20      	cmp	r3, #32
 800c99e:	d112      	bne.n	800c9c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <HAL_UART_Receive_IT+0x26>
 800c9a6:	88fb      	ldrh	r3, [r7, #6]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e00b      	b.n	800c9c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c9b6:	88fb      	ldrh	r3, [r7, #6]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	68b9      	ldr	r1, [r7, #8]
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f000 fabf 	bl	800cf40 <UART_Start_Receive_IT>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	e000      	b.n	800c9c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c9c6:	2302      	movs	r3, #2
  }
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b0ba      	sub	sp, #232	; 0xe8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	695b      	ldr	r3, [r3, #20]
 800c9f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ca02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca06:	f003 030f 	and.w	r3, r3, #15
 800ca0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ca0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10f      	bne.n	800ca36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ca16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca1a:	f003 0320 	and.w	r3, r3, #32
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d009      	beq.n	800ca36 <HAL_UART_IRQHandler+0x66>
 800ca22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca26:	f003 0320 	and.w	r3, r3, #32
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d003      	beq.n	800ca36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fb9c 	bl	800d16c <UART_Receive_IT>
      return;
 800ca34:	e25b      	b.n	800ceee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ca36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 80de 	beq.w	800cbfc <HAL_UART_IRQHandler+0x22c>
 800ca40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d106      	bne.n	800ca5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ca4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 80d1 	beq.w	800cbfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ca5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00b      	beq.n	800ca7e <HAL_UART_IRQHandler+0xae>
 800ca66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d005      	beq.n	800ca7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca76:	f043 0201 	orr.w	r2, r3, #1
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca82:	f003 0304 	and.w	r3, r3, #4
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00b      	beq.n	800caa2 <HAL_UART_IRQHandler+0xd2>
 800ca8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca8e:	f003 0301 	and.w	r3, r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d005      	beq.n	800caa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca9a:	f043 0202 	orr.w	r2, r3, #2
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800caa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa6:	f003 0302 	and.w	r3, r3, #2
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00b      	beq.n	800cac6 <HAL_UART_IRQHandler+0xf6>
 800caae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d005      	beq.n	800cac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cabe:	f043 0204 	orr.w	r2, r3, #4
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caca:	f003 0308 	and.w	r3, r3, #8
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d011      	beq.n	800caf6 <HAL_UART_IRQHandler+0x126>
 800cad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cad6:	f003 0320 	and.w	r3, r3, #32
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d105      	bne.n	800caea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d005      	beq.n	800caf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caee:	f043 0208 	orr.w	r2, r3, #8
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 81f2 	beq.w	800cee4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cb00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb04:	f003 0320 	and.w	r3, r3, #32
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d008      	beq.n	800cb1e <HAL_UART_IRQHandler+0x14e>
 800cb0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb10:	f003 0320 	and.w	r3, r3, #32
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 fb27 	bl	800d16c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	695b      	ldr	r3, [r3, #20]
 800cb24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	bf14      	ite	ne
 800cb2c:	2301      	movne	r3, #1
 800cb2e:	2300      	moveq	r3, #0
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb3a:	f003 0308 	and.w	r3, r3, #8
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d103      	bne.n	800cb4a <HAL_UART_IRQHandler+0x17a>
 800cb42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d04f      	beq.n	800cbea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fa31 	bl	800cfb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d041      	beq.n	800cbe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3314      	adds	r3, #20
 800cb64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb6c:	e853 3f00 	ldrex	r3, [r3]
 800cb70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cb74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cb78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3314      	adds	r3, #20
 800cb86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cb8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cb8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cb96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cb9a:	e841 2300 	strex	r3, r2, [r1]
 800cb9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1d9      	bne.n	800cb5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d013      	beq.n	800cbda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbb6:	4a7e      	ldr	r2, [pc, #504]	; (800cdb0 <HAL_UART_IRQHandler+0x3e0>)
 800cbb8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fd f848 	bl	8009c54 <HAL_DMA_Abort_IT>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d016      	beq.n	800cbf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbd8:	e00e      	b.n	800cbf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f99c 	bl	800cf18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbe0:	e00a      	b.n	800cbf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f998 	bl	800cf18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbe8:	e006      	b.n	800cbf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f994 	bl	800cf18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800cbf6:	e175      	b.n	800cee4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbf8:	bf00      	nop
    return;
 800cbfa:	e173      	b.n	800cee4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	f040 814f 	bne.w	800cea4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cc06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc0a:	f003 0310 	and.w	r3, r3, #16
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 8148 	beq.w	800cea4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc18:	f003 0310 	and.w	r3, r3, #16
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 8141 	beq.w	800cea4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc22:	2300      	movs	r3, #0
 800cc24:	60bb      	str	r3, [r7, #8]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	60bb      	str	r3, [r7, #8]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	60bb      	str	r3, [r7, #8]
 800cc36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f000 80b6 	beq.w	800cdb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cc54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f000 8145 	beq.w	800cee8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cc62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc66:	429a      	cmp	r2, r3
 800cc68:	f080 813e 	bcs.w	800cee8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	2b20      	cmp	r3, #32
 800cc7c:	f000 8088 	beq.w	800cd90 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	330c      	adds	r3, #12
 800cc86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc8e:	e853 3f00 	ldrex	r3, [r3]
 800cc92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	330c      	adds	r3, #12
 800cca8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ccac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ccb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ccb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ccc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1d9      	bne.n	800cc80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	3314      	adds	r3, #20
 800ccd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccd6:	e853 3f00 	ldrex	r3, [r3]
 800ccda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ccdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ccde:	f023 0301 	bic.w	r3, r3, #1
 800cce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	3314      	adds	r3, #20
 800ccec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ccf0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ccf4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ccf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e1      	bne.n	800cccc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3314      	adds	r3, #20
 800cd0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd12:	e853 3f00 	ldrex	r3, [r3]
 800cd16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	3314      	adds	r3, #20
 800cd28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cd2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cd2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd34:	e841 2300 	strex	r3, r2, [r1]
 800cd38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1e3      	bne.n	800cd08 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2220      	movs	r2, #32
 800cd44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	330c      	adds	r3, #12
 800cd54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd58:	e853 3f00 	ldrex	r3, [r3]
 800cd5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cd5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd60:	f023 0310 	bic.w	r3, r3, #16
 800cd64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	330c      	adds	r3, #12
 800cd6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cd72:	65ba      	str	r2, [r7, #88]	; 0x58
 800cd74:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd7a:	e841 2300 	strex	r3, r2, [r1]
 800cd7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1e3      	bne.n	800cd4e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fc ff27 	bl	8009bde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2202      	movs	r2, #2
 800cd94:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	4619      	mov	r1, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f8bf 	bl	800cf2a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cdac:	e09c      	b.n	800cee8 <HAL_UART_IRQHandler+0x518>
 800cdae:	bf00      	nop
 800cdb0:	0800d077 	.word	0x0800d077
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f000 808e 	beq.w	800ceec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cdd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 8089 	beq.w	800ceec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	330c      	adds	r3, #12
 800cde0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	e853 3f00 	ldrex	r3, [r3]
 800cde8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	330c      	adds	r3, #12
 800cdfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cdfe:	647a      	str	r2, [r7, #68]	; 0x44
 800ce00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce06:	e841 2300 	strex	r3, r2, [r1]
 800ce0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1e3      	bne.n	800cdda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	3314      	adds	r3, #20
 800ce18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	e853 3f00 	ldrex	r3, [r3]
 800ce20:	623b      	str	r3, [r7, #32]
   return(result);
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	f023 0301 	bic.w	r3, r3, #1
 800ce28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3314      	adds	r3, #20
 800ce32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ce36:	633a      	str	r2, [r7, #48]	; 0x30
 800ce38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce3e:	e841 2300 	strex	r3, r2, [r1]
 800ce42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1e3      	bne.n	800ce12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2220      	movs	r2, #32
 800ce4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2200      	movs	r2, #0
 800ce56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	330c      	adds	r3, #12
 800ce5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	e853 3f00 	ldrex	r3, [r3]
 800ce66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f023 0310 	bic.w	r3, r3, #16
 800ce6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	330c      	adds	r3, #12
 800ce78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ce7c:	61fa      	str	r2, [r7, #28]
 800ce7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce80:	69b9      	ldr	r1, [r7, #24]
 800ce82:	69fa      	ldr	r2, [r7, #28]
 800ce84:	e841 2300 	strex	r3, r2, [r1]
 800ce88:	617b      	str	r3, [r7, #20]
   return(result);
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1e3      	bne.n	800ce58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2202      	movs	r2, #2
 800ce94:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f844 	bl	800cf2a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cea2:	e023      	b.n	800ceec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d009      	beq.n	800cec4 <HAL_UART_IRQHandler+0x4f4>
 800ceb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ceb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 f8ee 	bl	800d09e <UART_Transmit_IT>
    return;
 800cec2:	e014      	b.n	800ceee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00e      	beq.n	800ceee <HAL_UART_IRQHandler+0x51e>
 800ced0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ced4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d008      	beq.n	800ceee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f92d 	bl	800d13c <UART_EndTransmit_IT>
    return;
 800cee2:	e004      	b.n	800ceee <HAL_UART_IRQHandler+0x51e>
    return;
 800cee4:	bf00      	nop
 800cee6:	e002      	b.n	800ceee <HAL_UART_IRQHandler+0x51e>
      return;
 800cee8:	bf00      	nop
 800ceea:	e000      	b.n	800ceee <HAL_UART_IRQHandler+0x51e>
      return;
 800ceec:	bf00      	nop
  }
}
 800ceee:	37e8      	adds	r7, #232	; 0xe8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bc80      	pop	{r7}
 800cf04:	4770      	bx	lr

0800cf06 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cf0e:	bf00      	nop
 800cf10:	370c      	adds	r7, #12
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bc80      	pop	{r7}
 800cf16:	4770      	bx	lr

0800cf18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cf20:	bf00      	nop
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bc80      	pop	{r7}
 800cf28:	4770      	bx	lr

0800cf2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b083      	sub	sp, #12
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	460b      	mov	r3, r1
 800cf34:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf36:	bf00      	nop
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bc80      	pop	{r7}
 800cf3e:	4770      	bx	lr

0800cf40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	88fa      	ldrh	r2, [r7, #6]
 800cf58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	88fa      	ldrh	r2, [r7, #6]
 800cf5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2200      	movs	r2, #0
 800cf64:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2222      	movs	r2, #34	; 0x22
 800cf6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d007      	beq.n	800cf86 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	68da      	ldr	r2, [r3, #12]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	695a      	ldr	r2, [r3, #20]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f042 0201 	orr.w	r2, r2, #1
 800cf94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	68da      	ldr	r2, [r3, #12]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f042 0220 	orr.w	r2, r2, #32
 800cfa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bc80      	pop	{r7}
 800cfb0:	4770      	bx	lr

0800cfb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b095      	sub	sp, #84	; 0x54
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	330c      	adds	r3, #12
 800cfc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc4:	e853 3f00 	ldrex	r3, [r3]
 800cfc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	330c      	adds	r3, #12
 800cfd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfda:	643a      	str	r2, [r7, #64]	; 0x40
 800cfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfe2:	e841 2300 	strex	r3, r2, [r1]
 800cfe6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1e5      	bne.n	800cfba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	3314      	adds	r3, #20
 800cff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	e853 3f00 	ldrex	r3, [r3]
 800cffc:	61fb      	str	r3, [r7, #28]
   return(result);
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	f023 0301 	bic.w	r3, r3, #1
 800d004:	64bb      	str	r3, [r7, #72]	; 0x48
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	3314      	adds	r3, #20
 800d00c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d00e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d010:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d016:	e841 2300 	strex	r3, r2, [r1]
 800d01a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1e5      	bne.n	800cfee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d026:	2b01      	cmp	r3, #1
 800d028:	d119      	bne.n	800d05e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	330c      	adds	r3, #12
 800d030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	e853 3f00 	ldrex	r3, [r3]
 800d038:	60bb      	str	r3, [r7, #8]
   return(result);
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	f023 0310 	bic.w	r3, r3, #16
 800d040:	647b      	str	r3, [r7, #68]	; 0x44
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	330c      	adds	r3, #12
 800d048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d04a:	61ba      	str	r2, [r7, #24]
 800d04c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04e:	6979      	ldr	r1, [r7, #20]
 800d050:	69ba      	ldr	r2, [r7, #24]
 800d052:	e841 2300 	strex	r3, r2, [r1]
 800d056:	613b      	str	r3, [r7, #16]
   return(result);
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1e5      	bne.n	800d02a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2220      	movs	r2, #32
 800d062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d06c:	bf00      	nop
 800d06e:	3754      	adds	r7, #84	; 0x54
 800d070:	46bd      	mov	sp, r7
 800d072:	bc80      	pop	{r7}
 800d074:	4770      	bx	lr

0800d076 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b084      	sub	sp, #16
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d082:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f7ff ff41 	bl	800cf18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d096:	bf00      	nop
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d09e:	b480      	push	{r7}
 800d0a0:	b085      	sub	sp, #20
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	2b21      	cmp	r3, #33	; 0x21
 800d0b0:	d13e      	bne.n	800d130 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0ba:	d114      	bne.n	800d0e6 <UART_Transmit_IT+0x48>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d110      	bne.n	800d0e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6a1b      	ldr	r3, [r3, #32]
 800d0c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	881b      	ldrh	r3, [r3, #0]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6a1b      	ldr	r3, [r3, #32]
 800d0de:	1c9a      	adds	r2, r3, #2
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	621a      	str	r2, [r3, #32]
 800d0e4:	e008      	b.n	800d0f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	1c59      	adds	r1, r3, #1
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	6211      	str	r1, [r2, #32]
 800d0f0:	781a      	ldrb	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	3b01      	subs	r3, #1
 800d100:	b29b      	uxth	r3, r3
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	4619      	mov	r1, r3
 800d106:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10f      	bne.n	800d12c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68da      	ldr	r2, [r3, #12]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d11a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68da      	ldr	r2, [r3, #12]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d12a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	e000      	b.n	800d132 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d130:	2302      	movs	r3, #2
  }
}
 800d132:	4618      	mov	r0, r3
 800d134:	3714      	adds	r7, #20
 800d136:	46bd      	mov	sp, r7
 800d138:	bc80      	pop	{r7}
 800d13a:	4770      	bx	lr

0800d13c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68da      	ldr	r2, [r3, #12]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d152:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2220      	movs	r2, #32
 800d158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7ff fec9 	bl	800cef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08c      	sub	sp, #48	; 0x30
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	2b22      	cmp	r3, #34	; 0x22
 800d17e:	f040 80ae 	bne.w	800d2de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d18a:	d117      	bne.n	800d1bc <UART_Receive_IT+0x50>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d113      	bne.n	800d1bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d194:	2300      	movs	r3, #0
 800d196:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d19c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b4:	1c9a      	adds	r2, r3, #2
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	629a      	str	r2, [r3, #40]	; 0x28
 800d1ba:	e026      	b.n	800d20a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ce:	d007      	beq.n	800d1e0 <UART_Receive_IT+0x74>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10a      	bne.n	800d1ee <UART_Receive_IT+0x82>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d106      	bne.n	800d1ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	701a      	strb	r2, [r3, #0]
 800d1ec:	e008      	b.n	800d200 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d20e:	b29b      	uxth	r3, r3
 800d210:	3b01      	subs	r3, #1
 800d212:	b29b      	uxth	r3, r3
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	4619      	mov	r1, r3
 800d218:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d15d      	bne.n	800d2da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	68da      	ldr	r2, [r3, #12]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f022 0220 	bic.w	r2, r2, #32
 800d22c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68da      	ldr	r2, [r3, #12]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d23c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	695a      	ldr	r2, [r3, #20]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f022 0201 	bic.w	r2, r2, #1
 800d24c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2220      	movs	r2, #32
 800d252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d260:	2b01      	cmp	r3, #1
 800d262:	d135      	bne.n	800d2d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	330c      	adds	r3, #12
 800d270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	e853 3f00 	ldrex	r3, [r3]
 800d278:	613b      	str	r3, [r7, #16]
   return(result);
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f023 0310 	bic.w	r3, r3, #16
 800d280:	627b      	str	r3, [r7, #36]	; 0x24
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	330c      	adds	r3, #12
 800d288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d28a:	623a      	str	r2, [r7, #32]
 800d28c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d28e:	69f9      	ldr	r1, [r7, #28]
 800d290:	6a3a      	ldr	r2, [r7, #32]
 800d292:	e841 2300 	strex	r3, r2, [r1]
 800d296:	61bb      	str	r3, [r7, #24]
   return(result);
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d1e5      	bne.n	800d26a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 0310 	and.w	r3, r3, #16
 800d2a8:	2b10      	cmp	r3, #16
 800d2aa:	d10a      	bne.n	800d2c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	60fb      	str	r3, [r7, #12]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	60fb      	str	r3, [r7, #12]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7ff fe2e 	bl	800cf2a <HAL_UARTEx_RxEventCallback>
 800d2ce:	e002      	b.n	800d2d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7ff fe18 	bl	800cf06 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	e002      	b.n	800d2e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e000      	b.n	800d2e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d2de:	2302      	movs	r3, #2
  }
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3730      	adds	r7, #48	; 0x30
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68da      	ldr	r2, [r3, #12]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	430a      	orrs	r2, r1
 800d304:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	689a      	ldr	r2, [r3, #8]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	431a      	orrs	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	4313      	orrs	r3, r2
 800d316:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d322:	f023 030c 	bic.w	r3, r3, #12
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	6812      	ldr	r2, [r2, #0]
 800d32a:	68b9      	ldr	r1, [r7, #8]
 800d32c:	430b      	orrs	r3, r1
 800d32e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	699a      	ldr	r2, [r3, #24]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	430a      	orrs	r2, r1
 800d344:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a2c      	ldr	r2, [pc, #176]	; (800d3fc <UART_SetConfig+0x114>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d103      	bne.n	800d358 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d350:	f7fe fe30 	bl	800bfb4 <HAL_RCC_GetPCLK2Freq>
 800d354:	60f8      	str	r0, [r7, #12]
 800d356:	e002      	b.n	800d35e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d358:	f7fe fe18 	bl	800bf8c <HAL_RCC_GetPCLK1Freq>
 800d35c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	4613      	mov	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	009a      	lsls	r2, r3, #2
 800d368:	441a      	add	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	fbb2 f3f3 	udiv	r3, r2, r3
 800d374:	4a22      	ldr	r2, [pc, #136]	; (800d400 <UART_SetConfig+0x118>)
 800d376:	fba2 2303 	umull	r2, r3, r2, r3
 800d37a:	095b      	lsrs	r3, r3, #5
 800d37c:	0119      	lsls	r1, r3, #4
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009a      	lsls	r2, r3, #2
 800d388:	441a      	add	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	fbb2 f2f3 	udiv	r2, r2, r3
 800d394:	4b1a      	ldr	r3, [pc, #104]	; (800d400 <UART_SetConfig+0x118>)
 800d396:	fba3 0302 	umull	r0, r3, r3, r2
 800d39a:	095b      	lsrs	r3, r3, #5
 800d39c:	2064      	movs	r0, #100	; 0x64
 800d39e:	fb00 f303 	mul.w	r3, r0, r3
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	011b      	lsls	r3, r3, #4
 800d3a6:	3332      	adds	r3, #50	; 0x32
 800d3a8:	4a15      	ldr	r2, [pc, #84]	; (800d400 <UART_SetConfig+0x118>)
 800d3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ae:	095b      	lsrs	r3, r3, #5
 800d3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3b4:	4419      	add	r1, r3
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4413      	add	r3, r2
 800d3be:	009a      	lsls	r2, r3, #2
 800d3c0:	441a      	add	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	fbb2 f2f3 	udiv	r2, r2, r3
 800d3cc:	4b0c      	ldr	r3, [pc, #48]	; (800d400 <UART_SetConfig+0x118>)
 800d3ce:	fba3 0302 	umull	r0, r3, r3, r2
 800d3d2:	095b      	lsrs	r3, r3, #5
 800d3d4:	2064      	movs	r0, #100	; 0x64
 800d3d6:	fb00 f303 	mul.w	r3, r0, r3
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	3332      	adds	r3, #50	; 0x32
 800d3e0:	4a07      	ldr	r2, [pc, #28]	; (800d400 <UART_SetConfig+0x118>)
 800d3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e6:	095b      	lsrs	r3, r3, #5
 800d3e8:	f003 020f 	and.w	r2, r3, #15
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	440a      	add	r2, r1
 800d3f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d3f4:	bf00      	nop
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	40013800 	.word	0x40013800
 800d400:	51eb851f 	.word	0x51eb851f

0800d404 <__itoa>:
 800d404:	1e93      	subs	r3, r2, #2
 800d406:	2b22      	cmp	r3, #34	; 0x22
 800d408:	b510      	push	{r4, lr}
 800d40a:	460c      	mov	r4, r1
 800d40c:	d904      	bls.n	800d418 <__itoa+0x14>
 800d40e:	2300      	movs	r3, #0
 800d410:	461c      	mov	r4, r3
 800d412:	700b      	strb	r3, [r1, #0]
 800d414:	4620      	mov	r0, r4
 800d416:	bd10      	pop	{r4, pc}
 800d418:	2a0a      	cmp	r2, #10
 800d41a:	d109      	bne.n	800d430 <__itoa+0x2c>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	da07      	bge.n	800d430 <__itoa+0x2c>
 800d420:	232d      	movs	r3, #45	; 0x2d
 800d422:	700b      	strb	r3, [r1, #0]
 800d424:	2101      	movs	r1, #1
 800d426:	4240      	negs	r0, r0
 800d428:	4421      	add	r1, r4
 800d42a:	f000 f8d9 	bl	800d5e0 <__utoa>
 800d42e:	e7f1      	b.n	800d414 <__itoa+0x10>
 800d430:	2100      	movs	r1, #0
 800d432:	e7f9      	b.n	800d428 <__itoa+0x24>

0800d434 <itoa>:
 800d434:	f7ff bfe6 	b.w	800d404 <__itoa>

0800d438 <malloc>:
 800d438:	4b02      	ldr	r3, [pc, #8]	; (800d444 <malloc+0xc>)
 800d43a:	4601      	mov	r1, r0
 800d43c:	6818      	ldr	r0, [r3, #0]
 800d43e:	f000 b823 	b.w	800d488 <_malloc_r>
 800d442:	bf00      	nop
 800d444:	200009f8 	.word	0x200009f8

0800d448 <sbrk_aligned>:
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	4e0e      	ldr	r6, [pc, #56]	; (800d484 <sbrk_aligned+0x3c>)
 800d44c:	460c      	mov	r4, r1
 800d44e:	6831      	ldr	r1, [r6, #0]
 800d450:	4605      	mov	r5, r0
 800d452:	b911      	cbnz	r1, 800d45a <sbrk_aligned+0x12>
 800d454:	f000 f946 	bl	800d6e4 <_sbrk_r>
 800d458:	6030      	str	r0, [r6, #0]
 800d45a:	4621      	mov	r1, r4
 800d45c:	4628      	mov	r0, r5
 800d45e:	f000 f941 	bl	800d6e4 <_sbrk_r>
 800d462:	1c43      	adds	r3, r0, #1
 800d464:	d00a      	beq.n	800d47c <sbrk_aligned+0x34>
 800d466:	1cc4      	adds	r4, r0, #3
 800d468:	f024 0403 	bic.w	r4, r4, #3
 800d46c:	42a0      	cmp	r0, r4
 800d46e:	d007      	beq.n	800d480 <sbrk_aligned+0x38>
 800d470:	1a21      	subs	r1, r4, r0
 800d472:	4628      	mov	r0, r5
 800d474:	f000 f936 	bl	800d6e4 <_sbrk_r>
 800d478:	3001      	adds	r0, #1
 800d47a:	d101      	bne.n	800d480 <sbrk_aligned+0x38>
 800d47c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d480:	4620      	mov	r0, r4
 800d482:	bd70      	pop	{r4, r5, r6, pc}
 800d484:	200011c8 	.word	0x200011c8

0800d488 <_malloc_r>:
 800d488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d48c:	1ccd      	adds	r5, r1, #3
 800d48e:	f025 0503 	bic.w	r5, r5, #3
 800d492:	3508      	adds	r5, #8
 800d494:	2d0c      	cmp	r5, #12
 800d496:	bf38      	it	cc
 800d498:	250c      	movcc	r5, #12
 800d49a:	2d00      	cmp	r5, #0
 800d49c:	4607      	mov	r7, r0
 800d49e:	db01      	blt.n	800d4a4 <_malloc_r+0x1c>
 800d4a0:	42a9      	cmp	r1, r5
 800d4a2:	d905      	bls.n	800d4b0 <_malloc_r+0x28>
 800d4a4:	230c      	movs	r3, #12
 800d4a6:	2600      	movs	r6, #0
 800d4a8:	603b      	str	r3, [r7, #0]
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d584 <_malloc_r+0xfc>
 800d4b4:	f000 f868 	bl	800d588 <__malloc_lock>
 800d4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800d4bc:	461c      	mov	r4, r3
 800d4be:	bb5c      	cbnz	r4, 800d518 <_malloc_r+0x90>
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	4638      	mov	r0, r7
 800d4c4:	f7ff ffc0 	bl	800d448 <sbrk_aligned>
 800d4c8:	1c43      	adds	r3, r0, #1
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	d155      	bne.n	800d57a <_malloc_r+0xf2>
 800d4ce:	f8d8 4000 	ldr.w	r4, [r8]
 800d4d2:	4626      	mov	r6, r4
 800d4d4:	2e00      	cmp	r6, #0
 800d4d6:	d145      	bne.n	800d564 <_malloc_r+0xdc>
 800d4d8:	2c00      	cmp	r4, #0
 800d4da:	d048      	beq.n	800d56e <_malloc_r+0xe6>
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	4631      	mov	r1, r6
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	eb04 0903 	add.w	r9, r4, r3
 800d4e6:	f000 f8fd 	bl	800d6e4 <_sbrk_r>
 800d4ea:	4581      	cmp	r9, r0
 800d4ec:	d13f      	bne.n	800d56e <_malloc_r+0xe6>
 800d4ee:	6821      	ldr	r1, [r4, #0]
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	1a6d      	subs	r5, r5, r1
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f7ff ffa7 	bl	800d448 <sbrk_aligned>
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	d037      	beq.n	800d56e <_malloc_r+0xe6>
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	442b      	add	r3, r5
 800d502:	6023      	str	r3, [r4, #0]
 800d504:	f8d8 3000 	ldr.w	r3, [r8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d038      	beq.n	800d57e <_malloc_r+0xf6>
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	42a2      	cmp	r2, r4
 800d510:	d12b      	bne.n	800d56a <_malloc_r+0xe2>
 800d512:	2200      	movs	r2, #0
 800d514:	605a      	str	r2, [r3, #4]
 800d516:	e00f      	b.n	800d538 <_malloc_r+0xb0>
 800d518:	6822      	ldr	r2, [r4, #0]
 800d51a:	1b52      	subs	r2, r2, r5
 800d51c:	d41f      	bmi.n	800d55e <_malloc_r+0xd6>
 800d51e:	2a0b      	cmp	r2, #11
 800d520:	d917      	bls.n	800d552 <_malloc_r+0xca>
 800d522:	1961      	adds	r1, r4, r5
 800d524:	42a3      	cmp	r3, r4
 800d526:	6025      	str	r5, [r4, #0]
 800d528:	bf18      	it	ne
 800d52a:	6059      	strne	r1, [r3, #4]
 800d52c:	6863      	ldr	r3, [r4, #4]
 800d52e:	bf08      	it	eq
 800d530:	f8c8 1000 	streq.w	r1, [r8]
 800d534:	5162      	str	r2, [r4, r5]
 800d536:	604b      	str	r3, [r1, #4]
 800d538:	4638      	mov	r0, r7
 800d53a:	f104 060b 	add.w	r6, r4, #11
 800d53e:	f000 f829 	bl	800d594 <__malloc_unlock>
 800d542:	f026 0607 	bic.w	r6, r6, #7
 800d546:	1d23      	adds	r3, r4, #4
 800d548:	1af2      	subs	r2, r6, r3
 800d54a:	d0ae      	beq.n	800d4aa <_malloc_r+0x22>
 800d54c:	1b9b      	subs	r3, r3, r6
 800d54e:	50a3      	str	r3, [r4, r2]
 800d550:	e7ab      	b.n	800d4aa <_malloc_r+0x22>
 800d552:	42a3      	cmp	r3, r4
 800d554:	6862      	ldr	r2, [r4, #4]
 800d556:	d1dd      	bne.n	800d514 <_malloc_r+0x8c>
 800d558:	f8c8 2000 	str.w	r2, [r8]
 800d55c:	e7ec      	b.n	800d538 <_malloc_r+0xb0>
 800d55e:	4623      	mov	r3, r4
 800d560:	6864      	ldr	r4, [r4, #4]
 800d562:	e7ac      	b.n	800d4be <_malloc_r+0x36>
 800d564:	4634      	mov	r4, r6
 800d566:	6876      	ldr	r6, [r6, #4]
 800d568:	e7b4      	b.n	800d4d4 <_malloc_r+0x4c>
 800d56a:	4613      	mov	r3, r2
 800d56c:	e7cc      	b.n	800d508 <_malloc_r+0x80>
 800d56e:	230c      	movs	r3, #12
 800d570:	4638      	mov	r0, r7
 800d572:	603b      	str	r3, [r7, #0]
 800d574:	f000 f80e 	bl	800d594 <__malloc_unlock>
 800d578:	e797      	b.n	800d4aa <_malloc_r+0x22>
 800d57a:	6025      	str	r5, [r4, #0]
 800d57c:	e7dc      	b.n	800d538 <_malloc_r+0xb0>
 800d57e:	605b      	str	r3, [r3, #4]
 800d580:	deff      	udf	#255	; 0xff
 800d582:	bf00      	nop
 800d584:	200011c4 	.word	0x200011c4

0800d588 <__malloc_lock>:
 800d588:	4801      	ldr	r0, [pc, #4]	; (800d590 <__malloc_lock+0x8>)
 800d58a:	f000 b8e5 	b.w	800d758 <__retarget_lock_acquire_recursive>
 800d58e:	bf00      	nop
 800d590:	20001304 	.word	0x20001304

0800d594 <__malloc_unlock>:
 800d594:	4801      	ldr	r0, [pc, #4]	; (800d59c <__malloc_unlock+0x8>)
 800d596:	f000 b8e0 	b.w	800d75a <__retarget_lock_release_recursive>
 800d59a:	bf00      	nop
 800d59c:	20001304 	.word	0x20001304

0800d5a0 <siprintf>:
 800d5a0:	b40e      	push	{r1, r2, r3}
 800d5a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5a6:	b500      	push	{lr}
 800d5a8:	b09c      	sub	sp, #112	; 0x70
 800d5aa:	ab1d      	add	r3, sp, #116	; 0x74
 800d5ac:	9002      	str	r0, [sp, #8]
 800d5ae:	9006      	str	r0, [sp, #24]
 800d5b0:	9107      	str	r1, [sp, #28]
 800d5b2:	9104      	str	r1, [sp, #16]
 800d5b4:	4808      	ldr	r0, [pc, #32]	; (800d5d8 <siprintf+0x38>)
 800d5b6:	4909      	ldr	r1, [pc, #36]	; (800d5dc <siprintf+0x3c>)
 800d5b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5bc:	9105      	str	r1, [sp, #20]
 800d5be:	6800      	ldr	r0, [r0, #0]
 800d5c0:	a902      	add	r1, sp, #8
 800d5c2:	9301      	str	r3, [sp, #4]
 800d5c4:	f000 f974 	bl	800d8b0 <_svfiprintf_r>
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	9b02      	ldr	r3, [sp, #8]
 800d5cc:	701a      	strb	r2, [r3, #0]
 800d5ce:	b01c      	add	sp, #112	; 0x70
 800d5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d4:	b003      	add	sp, #12
 800d5d6:	4770      	bx	lr
 800d5d8:	200009f8 	.word	0x200009f8
 800d5dc:	ffff0208 	.word	0xffff0208

0800d5e0 <__utoa>:
 800d5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5e2:	b08b      	sub	sp, #44	; 0x2c
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	466e      	mov	r6, sp
 800d5ea:	4c1d      	ldr	r4, [pc, #116]	; (800d660 <__utoa+0x80>)
 800d5ec:	f104 0c20 	add.w	ip, r4, #32
 800d5f0:	4637      	mov	r7, r6
 800d5f2:	6820      	ldr	r0, [r4, #0]
 800d5f4:	6861      	ldr	r1, [r4, #4]
 800d5f6:	3408      	adds	r4, #8
 800d5f8:	c703      	stmia	r7!, {r0, r1}
 800d5fa:	4564      	cmp	r4, ip
 800d5fc:	463e      	mov	r6, r7
 800d5fe:	d1f7      	bne.n	800d5f0 <__utoa+0x10>
 800d600:	7921      	ldrb	r1, [r4, #4]
 800d602:	6820      	ldr	r0, [r4, #0]
 800d604:	7139      	strb	r1, [r7, #4]
 800d606:	1e91      	subs	r1, r2, #2
 800d608:	2922      	cmp	r1, #34	; 0x22
 800d60a:	6038      	str	r0, [r7, #0]
 800d60c:	f04f 0100 	mov.w	r1, #0
 800d610:	d904      	bls.n	800d61c <__utoa+0x3c>
 800d612:	7019      	strb	r1, [r3, #0]
 800d614:	460b      	mov	r3, r1
 800d616:	4618      	mov	r0, r3
 800d618:	b00b      	add	sp, #44	; 0x2c
 800d61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d61c:	1e58      	subs	r0, r3, #1
 800d61e:	4684      	mov	ip, r0
 800d620:	fbb5 f7f2 	udiv	r7, r5, r2
 800d624:	fb02 5617 	mls	r6, r2, r7, r5
 800d628:	3628      	adds	r6, #40	; 0x28
 800d62a:	446e      	add	r6, sp
 800d62c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d630:	460c      	mov	r4, r1
 800d632:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d636:	462e      	mov	r6, r5
 800d638:	42b2      	cmp	r2, r6
 800d63a:	463d      	mov	r5, r7
 800d63c:	f101 0101 	add.w	r1, r1, #1
 800d640:	d9ee      	bls.n	800d620 <__utoa+0x40>
 800d642:	2200      	movs	r2, #0
 800d644:	545a      	strb	r2, [r3, r1]
 800d646:	1919      	adds	r1, r3, r4
 800d648:	1aa5      	subs	r5, r4, r2
 800d64a:	42aa      	cmp	r2, r5
 800d64c:	dae3      	bge.n	800d616 <__utoa+0x36>
 800d64e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d652:	780e      	ldrb	r6, [r1, #0]
 800d654:	3201      	adds	r2, #1
 800d656:	7006      	strb	r6, [r0, #0]
 800d658:	f801 5901 	strb.w	r5, [r1], #-1
 800d65c:	e7f4      	b.n	800d648 <__utoa+0x68>
 800d65e:	bf00      	nop
 800d660:	0800ee9a 	.word	0x0800ee9a

0800d664 <strcat>:
 800d664:	4602      	mov	r2, r0
 800d666:	b510      	push	{r4, lr}
 800d668:	7814      	ldrb	r4, [r2, #0]
 800d66a:	4613      	mov	r3, r2
 800d66c:	3201      	adds	r2, #1
 800d66e:	2c00      	cmp	r4, #0
 800d670:	d1fa      	bne.n	800d668 <strcat+0x4>
 800d672:	3b01      	subs	r3, #1
 800d674:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d678:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d67c:	2a00      	cmp	r2, #0
 800d67e:	d1f9      	bne.n	800d674 <strcat+0x10>
 800d680:	bd10      	pop	{r4, pc}

0800d682 <strncpy>:
 800d682:	4603      	mov	r3, r0
 800d684:	b510      	push	{r4, lr}
 800d686:	3901      	subs	r1, #1
 800d688:	b132      	cbz	r2, 800d698 <strncpy+0x16>
 800d68a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d68e:	3a01      	subs	r2, #1
 800d690:	f803 4b01 	strb.w	r4, [r3], #1
 800d694:	2c00      	cmp	r4, #0
 800d696:	d1f7      	bne.n	800d688 <strncpy+0x6>
 800d698:	2100      	movs	r1, #0
 800d69a:	441a      	add	r2, r3
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d100      	bne.n	800d6a2 <strncpy+0x20>
 800d6a0:	bd10      	pop	{r4, pc}
 800d6a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d6a6:	e7f9      	b.n	800d69c <strncpy+0x1a>

0800d6a8 <strstr>:
 800d6a8:	780a      	ldrb	r2, [r1, #0]
 800d6aa:	b570      	push	{r4, r5, r6, lr}
 800d6ac:	b96a      	cbnz	r2, 800d6ca <strstr+0x22>
 800d6ae:	bd70      	pop	{r4, r5, r6, pc}
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d109      	bne.n	800d6c8 <strstr+0x20>
 800d6b4:	460c      	mov	r4, r1
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d0f6      	beq.n	800d6ae <strstr+0x6>
 800d6c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d6c4:	429e      	cmp	r6, r3
 800d6c6:	d0f7      	beq.n	800d6b8 <strstr+0x10>
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	7803      	ldrb	r3, [r0, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d1ef      	bne.n	800d6b0 <strstr+0x8>
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	e7ec      	b.n	800d6ae <strstr+0x6>

0800d6d4 <memset>:
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4402      	add	r2, r0
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d100      	bne.n	800d6de <memset+0xa>
 800d6dc:	4770      	bx	lr
 800d6de:	f803 1b01 	strb.w	r1, [r3], #1
 800d6e2:	e7f9      	b.n	800d6d8 <memset+0x4>

0800d6e4 <_sbrk_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	4d05      	ldr	r5, [pc, #20]	; (800d700 <_sbrk_r+0x1c>)
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	4608      	mov	r0, r1
 800d6ee:	602b      	str	r3, [r5, #0]
 800d6f0:	f7fb ff84 	bl	80095fc <_sbrk>
 800d6f4:	1c43      	adds	r3, r0, #1
 800d6f6:	d102      	bne.n	800d6fe <_sbrk_r+0x1a>
 800d6f8:	682b      	ldr	r3, [r5, #0]
 800d6fa:	b103      	cbz	r3, 800d6fe <_sbrk_r+0x1a>
 800d6fc:	6023      	str	r3, [r4, #0]
 800d6fe:	bd38      	pop	{r3, r4, r5, pc}
 800d700:	20001308 	.word	0x20001308

0800d704 <__errno>:
 800d704:	4b01      	ldr	r3, [pc, #4]	; (800d70c <__errno+0x8>)
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	200009f8 	.word	0x200009f8

0800d710 <__libc_init_array>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	2600      	movs	r6, #0
 800d714:	4d0c      	ldr	r5, [pc, #48]	; (800d748 <__libc_init_array+0x38>)
 800d716:	4c0d      	ldr	r4, [pc, #52]	; (800d74c <__libc_init_array+0x3c>)
 800d718:	1b64      	subs	r4, r4, r5
 800d71a:	10a4      	asrs	r4, r4, #2
 800d71c:	42a6      	cmp	r6, r4
 800d71e:	d109      	bne.n	800d734 <__libc_init_array+0x24>
 800d720:	f000 fbc6 	bl	800deb0 <_init>
 800d724:	2600      	movs	r6, #0
 800d726:	4d0a      	ldr	r5, [pc, #40]	; (800d750 <__libc_init_array+0x40>)
 800d728:	4c0a      	ldr	r4, [pc, #40]	; (800d754 <__libc_init_array+0x44>)
 800d72a:	1b64      	subs	r4, r4, r5
 800d72c:	10a4      	asrs	r4, r4, #2
 800d72e:	42a6      	cmp	r6, r4
 800d730:	d105      	bne.n	800d73e <__libc_init_array+0x2e>
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	f855 3b04 	ldr.w	r3, [r5], #4
 800d738:	4798      	blx	r3
 800d73a:	3601      	adds	r6, #1
 800d73c:	e7ee      	b.n	800d71c <__libc_init_array+0xc>
 800d73e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d742:	4798      	blx	r3
 800d744:	3601      	adds	r6, #1
 800d746:	e7f2      	b.n	800d72e <__libc_init_array+0x1e>
 800d748:	0800eef4 	.word	0x0800eef4
 800d74c:	0800eef4 	.word	0x0800eef4
 800d750:	0800eef4 	.word	0x0800eef4
 800d754:	0800eef8 	.word	0x0800eef8

0800d758 <__retarget_lock_acquire_recursive>:
 800d758:	4770      	bx	lr

0800d75a <__retarget_lock_release_recursive>:
 800d75a:	4770      	bx	lr

0800d75c <strcpy>:
 800d75c:	4603      	mov	r3, r0
 800d75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d762:	f803 2b01 	strb.w	r2, [r3], #1
 800d766:	2a00      	cmp	r2, #0
 800d768:	d1f9      	bne.n	800d75e <strcpy+0x2>
 800d76a:	4770      	bx	lr

0800d76c <_free_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4605      	mov	r5, r0
 800d770:	2900      	cmp	r1, #0
 800d772:	d040      	beq.n	800d7f6 <_free_r+0x8a>
 800d774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d778:	1f0c      	subs	r4, r1, #4
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bfb8      	it	lt
 800d77e:	18e4      	addlt	r4, r4, r3
 800d780:	f7ff ff02 	bl	800d588 <__malloc_lock>
 800d784:	4a1c      	ldr	r2, [pc, #112]	; (800d7f8 <_free_r+0x8c>)
 800d786:	6813      	ldr	r3, [r2, #0]
 800d788:	b933      	cbnz	r3, 800d798 <_free_r+0x2c>
 800d78a:	6063      	str	r3, [r4, #4]
 800d78c:	6014      	str	r4, [r2, #0]
 800d78e:	4628      	mov	r0, r5
 800d790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d794:	f7ff befe 	b.w	800d594 <__malloc_unlock>
 800d798:	42a3      	cmp	r3, r4
 800d79a:	d908      	bls.n	800d7ae <_free_r+0x42>
 800d79c:	6820      	ldr	r0, [r4, #0]
 800d79e:	1821      	adds	r1, r4, r0
 800d7a0:	428b      	cmp	r3, r1
 800d7a2:	bf01      	itttt	eq
 800d7a4:	6819      	ldreq	r1, [r3, #0]
 800d7a6:	685b      	ldreq	r3, [r3, #4]
 800d7a8:	1809      	addeq	r1, r1, r0
 800d7aa:	6021      	streq	r1, [r4, #0]
 800d7ac:	e7ed      	b.n	800d78a <_free_r+0x1e>
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	b10b      	cbz	r3, 800d7b8 <_free_r+0x4c>
 800d7b4:	42a3      	cmp	r3, r4
 800d7b6:	d9fa      	bls.n	800d7ae <_free_r+0x42>
 800d7b8:	6811      	ldr	r1, [r2, #0]
 800d7ba:	1850      	adds	r0, r2, r1
 800d7bc:	42a0      	cmp	r0, r4
 800d7be:	d10b      	bne.n	800d7d8 <_free_r+0x6c>
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	4401      	add	r1, r0
 800d7c4:	1850      	adds	r0, r2, r1
 800d7c6:	4283      	cmp	r3, r0
 800d7c8:	6011      	str	r1, [r2, #0]
 800d7ca:	d1e0      	bne.n	800d78e <_free_r+0x22>
 800d7cc:	6818      	ldr	r0, [r3, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	4408      	add	r0, r1
 800d7d2:	6010      	str	r0, [r2, #0]
 800d7d4:	6053      	str	r3, [r2, #4]
 800d7d6:	e7da      	b.n	800d78e <_free_r+0x22>
 800d7d8:	d902      	bls.n	800d7e0 <_free_r+0x74>
 800d7da:	230c      	movs	r3, #12
 800d7dc:	602b      	str	r3, [r5, #0]
 800d7de:	e7d6      	b.n	800d78e <_free_r+0x22>
 800d7e0:	6820      	ldr	r0, [r4, #0]
 800d7e2:	1821      	adds	r1, r4, r0
 800d7e4:	428b      	cmp	r3, r1
 800d7e6:	bf01      	itttt	eq
 800d7e8:	6819      	ldreq	r1, [r3, #0]
 800d7ea:	685b      	ldreq	r3, [r3, #4]
 800d7ec:	1809      	addeq	r1, r1, r0
 800d7ee:	6021      	streq	r1, [r4, #0]
 800d7f0:	6063      	str	r3, [r4, #4]
 800d7f2:	6054      	str	r4, [r2, #4]
 800d7f4:	e7cb      	b.n	800d78e <_free_r+0x22>
 800d7f6:	bd38      	pop	{r3, r4, r5, pc}
 800d7f8:	200011c4 	.word	0x200011c4

0800d7fc <__ssputs_r>:
 800d7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d800:	461f      	mov	r7, r3
 800d802:	688e      	ldr	r6, [r1, #8]
 800d804:	4682      	mov	sl, r0
 800d806:	42be      	cmp	r6, r7
 800d808:	460c      	mov	r4, r1
 800d80a:	4690      	mov	r8, r2
 800d80c:	680b      	ldr	r3, [r1, #0]
 800d80e:	d82c      	bhi.n	800d86a <__ssputs_r+0x6e>
 800d810:	898a      	ldrh	r2, [r1, #12]
 800d812:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d816:	d026      	beq.n	800d866 <__ssputs_r+0x6a>
 800d818:	6965      	ldr	r5, [r4, #20]
 800d81a:	6909      	ldr	r1, [r1, #16]
 800d81c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d820:	eba3 0901 	sub.w	r9, r3, r1
 800d824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d828:	1c7b      	adds	r3, r7, #1
 800d82a:	444b      	add	r3, r9
 800d82c:	106d      	asrs	r5, r5, #1
 800d82e:	429d      	cmp	r5, r3
 800d830:	bf38      	it	cc
 800d832:	461d      	movcc	r5, r3
 800d834:	0553      	lsls	r3, r2, #21
 800d836:	d527      	bpl.n	800d888 <__ssputs_r+0x8c>
 800d838:	4629      	mov	r1, r5
 800d83a:	f7ff fe25 	bl	800d488 <_malloc_r>
 800d83e:	4606      	mov	r6, r0
 800d840:	b360      	cbz	r0, 800d89c <__ssputs_r+0xa0>
 800d842:	464a      	mov	r2, r9
 800d844:	6921      	ldr	r1, [r4, #16]
 800d846:	f000 fb1c 	bl	800de82 <memcpy>
 800d84a:	89a3      	ldrh	r3, [r4, #12]
 800d84c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d854:	81a3      	strh	r3, [r4, #12]
 800d856:	6126      	str	r6, [r4, #16]
 800d858:	444e      	add	r6, r9
 800d85a:	6026      	str	r6, [r4, #0]
 800d85c:	463e      	mov	r6, r7
 800d85e:	6165      	str	r5, [r4, #20]
 800d860:	eba5 0509 	sub.w	r5, r5, r9
 800d864:	60a5      	str	r5, [r4, #8]
 800d866:	42be      	cmp	r6, r7
 800d868:	d900      	bls.n	800d86c <__ssputs_r+0x70>
 800d86a:	463e      	mov	r6, r7
 800d86c:	4632      	mov	r2, r6
 800d86e:	4641      	mov	r1, r8
 800d870:	6820      	ldr	r0, [r4, #0]
 800d872:	f000 fade 	bl	800de32 <memmove>
 800d876:	2000      	movs	r0, #0
 800d878:	68a3      	ldr	r3, [r4, #8]
 800d87a:	1b9b      	subs	r3, r3, r6
 800d87c:	60a3      	str	r3, [r4, #8]
 800d87e:	6823      	ldr	r3, [r4, #0]
 800d880:	4433      	add	r3, r6
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d888:	462a      	mov	r2, r5
 800d88a:	f000 faa3 	bl	800ddd4 <_realloc_r>
 800d88e:	4606      	mov	r6, r0
 800d890:	2800      	cmp	r0, #0
 800d892:	d1e0      	bne.n	800d856 <__ssputs_r+0x5a>
 800d894:	4650      	mov	r0, sl
 800d896:	6921      	ldr	r1, [r4, #16]
 800d898:	f7ff ff68 	bl	800d76c <_free_r>
 800d89c:	230c      	movs	r3, #12
 800d89e:	f8ca 3000 	str.w	r3, [sl]
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ac:	81a3      	strh	r3, [r4, #12]
 800d8ae:	e7e9      	b.n	800d884 <__ssputs_r+0x88>

0800d8b0 <_svfiprintf_r>:
 800d8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b4:	4698      	mov	r8, r3
 800d8b6:	898b      	ldrh	r3, [r1, #12]
 800d8b8:	4607      	mov	r7, r0
 800d8ba:	061b      	lsls	r3, r3, #24
 800d8bc:	460d      	mov	r5, r1
 800d8be:	4614      	mov	r4, r2
 800d8c0:	b09d      	sub	sp, #116	; 0x74
 800d8c2:	d50e      	bpl.n	800d8e2 <_svfiprintf_r+0x32>
 800d8c4:	690b      	ldr	r3, [r1, #16]
 800d8c6:	b963      	cbnz	r3, 800d8e2 <_svfiprintf_r+0x32>
 800d8c8:	2140      	movs	r1, #64	; 0x40
 800d8ca:	f7ff fddd 	bl	800d488 <_malloc_r>
 800d8ce:	6028      	str	r0, [r5, #0]
 800d8d0:	6128      	str	r0, [r5, #16]
 800d8d2:	b920      	cbnz	r0, 800d8de <_svfiprintf_r+0x2e>
 800d8d4:	230c      	movs	r3, #12
 800d8d6:	603b      	str	r3, [r7, #0]
 800d8d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8dc:	e0d0      	b.n	800da80 <_svfiprintf_r+0x1d0>
 800d8de:	2340      	movs	r3, #64	; 0x40
 800d8e0:	616b      	str	r3, [r5, #20]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e6:	2320      	movs	r3, #32
 800d8e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8ec:	2330      	movs	r3, #48	; 0x30
 800d8ee:	f04f 0901 	mov.w	r9, #1
 800d8f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800da98 <_svfiprintf_r+0x1e8>
 800d8fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8fe:	4623      	mov	r3, r4
 800d900:	469a      	mov	sl, r3
 800d902:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d906:	b10a      	cbz	r2, 800d90c <_svfiprintf_r+0x5c>
 800d908:	2a25      	cmp	r2, #37	; 0x25
 800d90a:	d1f9      	bne.n	800d900 <_svfiprintf_r+0x50>
 800d90c:	ebba 0b04 	subs.w	fp, sl, r4
 800d910:	d00b      	beq.n	800d92a <_svfiprintf_r+0x7a>
 800d912:	465b      	mov	r3, fp
 800d914:	4622      	mov	r2, r4
 800d916:	4629      	mov	r1, r5
 800d918:	4638      	mov	r0, r7
 800d91a:	f7ff ff6f 	bl	800d7fc <__ssputs_r>
 800d91e:	3001      	adds	r0, #1
 800d920:	f000 80a9 	beq.w	800da76 <_svfiprintf_r+0x1c6>
 800d924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d926:	445a      	add	r2, fp
 800d928:	9209      	str	r2, [sp, #36]	; 0x24
 800d92a:	f89a 3000 	ldrb.w	r3, [sl]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f000 80a1 	beq.w	800da76 <_svfiprintf_r+0x1c6>
 800d934:	2300      	movs	r3, #0
 800d936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d93a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d93e:	f10a 0a01 	add.w	sl, sl, #1
 800d942:	9304      	str	r3, [sp, #16]
 800d944:	9307      	str	r3, [sp, #28]
 800d946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d94a:	931a      	str	r3, [sp, #104]	; 0x68
 800d94c:	4654      	mov	r4, sl
 800d94e:	2205      	movs	r2, #5
 800d950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d954:	4850      	ldr	r0, [pc, #320]	; (800da98 <_svfiprintf_r+0x1e8>)
 800d956:	f000 fa86 	bl	800de66 <memchr>
 800d95a:	9a04      	ldr	r2, [sp, #16]
 800d95c:	b9d8      	cbnz	r0, 800d996 <_svfiprintf_r+0xe6>
 800d95e:	06d0      	lsls	r0, r2, #27
 800d960:	bf44      	itt	mi
 800d962:	2320      	movmi	r3, #32
 800d964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d968:	0711      	lsls	r1, r2, #28
 800d96a:	bf44      	itt	mi
 800d96c:	232b      	movmi	r3, #43	; 0x2b
 800d96e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d972:	f89a 3000 	ldrb.w	r3, [sl]
 800d976:	2b2a      	cmp	r3, #42	; 0x2a
 800d978:	d015      	beq.n	800d9a6 <_svfiprintf_r+0xf6>
 800d97a:	4654      	mov	r4, sl
 800d97c:	2000      	movs	r0, #0
 800d97e:	f04f 0c0a 	mov.w	ip, #10
 800d982:	9a07      	ldr	r2, [sp, #28]
 800d984:	4621      	mov	r1, r4
 800d986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d98a:	3b30      	subs	r3, #48	; 0x30
 800d98c:	2b09      	cmp	r3, #9
 800d98e:	d94d      	bls.n	800da2c <_svfiprintf_r+0x17c>
 800d990:	b1b0      	cbz	r0, 800d9c0 <_svfiprintf_r+0x110>
 800d992:	9207      	str	r2, [sp, #28]
 800d994:	e014      	b.n	800d9c0 <_svfiprintf_r+0x110>
 800d996:	eba0 0308 	sub.w	r3, r0, r8
 800d99a:	fa09 f303 	lsl.w	r3, r9, r3
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	46a2      	mov	sl, r4
 800d9a2:	9304      	str	r3, [sp, #16]
 800d9a4:	e7d2      	b.n	800d94c <_svfiprintf_r+0x9c>
 800d9a6:	9b03      	ldr	r3, [sp, #12]
 800d9a8:	1d19      	adds	r1, r3, #4
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	9103      	str	r1, [sp, #12]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	bfbb      	ittet	lt
 800d9b2:	425b      	neglt	r3, r3
 800d9b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d9b8:	9307      	strge	r3, [sp, #28]
 800d9ba:	9307      	strlt	r3, [sp, #28]
 800d9bc:	bfb8      	it	lt
 800d9be:	9204      	strlt	r2, [sp, #16]
 800d9c0:	7823      	ldrb	r3, [r4, #0]
 800d9c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d9c4:	d10c      	bne.n	800d9e0 <_svfiprintf_r+0x130>
 800d9c6:	7863      	ldrb	r3, [r4, #1]
 800d9c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ca:	d134      	bne.n	800da36 <_svfiprintf_r+0x186>
 800d9cc:	9b03      	ldr	r3, [sp, #12]
 800d9ce:	3402      	adds	r4, #2
 800d9d0:	1d1a      	adds	r2, r3, #4
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	9203      	str	r2, [sp, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	bfb8      	it	lt
 800d9da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d9de:	9305      	str	r3, [sp, #20]
 800d9e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800da9c <_svfiprintf_r+0x1ec>
 800d9e4:	2203      	movs	r2, #3
 800d9e6:	4650      	mov	r0, sl
 800d9e8:	7821      	ldrb	r1, [r4, #0]
 800d9ea:	f000 fa3c 	bl	800de66 <memchr>
 800d9ee:	b138      	cbz	r0, 800da00 <_svfiprintf_r+0x150>
 800d9f0:	2240      	movs	r2, #64	; 0x40
 800d9f2:	9b04      	ldr	r3, [sp, #16]
 800d9f4:	eba0 000a 	sub.w	r0, r0, sl
 800d9f8:	4082      	lsls	r2, r0
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	3401      	adds	r4, #1
 800d9fe:	9304      	str	r3, [sp, #16]
 800da00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da04:	2206      	movs	r2, #6
 800da06:	4826      	ldr	r0, [pc, #152]	; (800daa0 <_svfiprintf_r+0x1f0>)
 800da08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da0c:	f000 fa2b 	bl	800de66 <memchr>
 800da10:	2800      	cmp	r0, #0
 800da12:	d038      	beq.n	800da86 <_svfiprintf_r+0x1d6>
 800da14:	4b23      	ldr	r3, [pc, #140]	; (800daa4 <_svfiprintf_r+0x1f4>)
 800da16:	bb1b      	cbnz	r3, 800da60 <_svfiprintf_r+0x1b0>
 800da18:	9b03      	ldr	r3, [sp, #12]
 800da1a:	3307      	adds	r3, #7
 800da1c:	f023 0307 	bic.w	r3, r3, #7
 800da20:	3308      	adds	r3, #8
 800da22:	9303      	str	r3, [sp, #12]
 800da24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da26:	4433      	add	r3, r6
 800da28:	9309      	str	r3, [sp, #36]	; 0x24
 800da2a:	e768      	b.n	800d8fe <_svfiprintf_r+0x4e>
 800da2c:	460c      	mov	r4, r1
 800da2e:	2001      	movs	r0, #1
 800da30:	fb0c 3202 	mla	r2, ip, r2, r3
 800da34:	e7a6      	b.n	800d984 <_svfiprintf_r+0xd4>
 800da36:	2300      	movs	r3, #0
 800da38:	f04f 0c0a 	mov.w	ip, #10
 800da3c:	4619      	mov	r1, r3
 800da3e:	3401      	adds	r4, #1
 800da40:	9305      	str	r3, [sp, #20]
 800da42:	4620      	mov	r0, r4
 800da44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da48:	3a30      	subs	r2, #48	; 0x30
 800da4a:	2a09      	cmp	r2, #9
 800da4c:	d903      	bls.n	800da56 <_svfiprintf_r+0x1a6>
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0c6      	beq.n	800d9e0 <_svfiprintf_r+0x130>
 800da52:	9105      	str	r1, [sp, #20]
 800da54:	e7c4      	b.n	800d9e0 <_svfiprintf_r+0x130>
 800da56:	4604      	mov	r4, r0
 800da58:	2301      	movs	r3, #1
 800da5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800da5e:	e7f0      	b.n	800da42 <_svfiprintf_r+0x192>
 800da60:	ab03      	add	r3, sp, #12
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	462a      	mov	r2, r5
 800da66:	4638      	mov	r0, r7
 800da68:	4b0f      	ldr	r3, [pc, #60]	; (800daa8 <_svfiprintf_r+0x1f8>)
 800da6a:	a904      	add	r1, sp, #16
 800da6c:	f3af 8000 	nop.w
 800da70:	1c42      	adds	r2, r0, #1
 800da72:	4606      	mov	r6, r0
 800da74:	d1d6      	bne.n	800da24 <_svfiprintf_r+0x174>
 800da76:	89ab      	ldrh	r3, [r5, #12]
 800da78:	065b      	lsls	r3, r3, #25
 800da7a:	f53f af2d 	bmi.w	800d8d8 <_svfiprintf_r+0x28>
 800da7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da80:	b01d      	add	sp, #116	; 0x74
 800da82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da86:	ab03      	add	r3, sp, #12
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	462a      	mov	r2, r5
 800da8c:	4638      	mov	r0, r7
 800da8e:	4b06      	ldr	r3, [pc, #24]	; (800daa8 <_svfiprintf_r+0x1f8>)
 800da90:	a904      	add	r1, sp, #16
 800da92:	f000 f87d 	bl	800db90 <_printf_i>
 800da96:	e7eb      	b.n	800da70 <_svfiprintf_r+0x1c0>
 800da98:	0800eebf 	.word	0x0800eebf
 800da9c:	0800eec5 	.word	0x0800eec5
 800daa0:	0800eec9 	.word	0x0800eec9
 800daa4:	00000000 	.word	0x00000000
 800daa8:	0800d7fd 	.word	0x0800d7fd

0800daac <_printf_common>:
 800daac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab0:	4616      	mov	r6, r2
 800dab2:	4699      	mov	r9, r3
 800dab4:	688a      	ldr	r2, [r1, #8]
 800dab6:	690b      	ldr	r3, [r1, #16]
 800dab8:	4607      	mov	r7, r0
 800daba:	4293      	cmp	r3, r2
 800dabc:	bfb8      	it	lt
 800dabe:	4613      	movlt	r3, r2
 800dac0:	6033      	str	r3, [r6, #0]
 800dac2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dac6:	460c      	mov	r4, r1
 800dac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dacc:	b10a      	cbz	r2, 800dad2 <_printf_common+0x26>
 800dace:	3301      	adds	r3, #1
 800dad0:	6033      	str	r3, [r6, #0]
 800dad2:	6823      	ldr	r3, [r4, #0]
 800dad4:	0699      	lsls	r1, r3, #26
 800dad6:	bf42      	ittt	mi
 800dad8:	6833      	ldrmi	r3, [r6, #0]
 800dada:	3302      	addmi	r3, #2
 800dadc:	6033      	strmi	r3, [r6, #0]
 800dade:	6825      	ldr	r5, [r4, #0]
 800dae0:	f015 0506 	ands.w	r5, r5, #6
 800dae4:	d106      	bne.n	800daf4 <_printf_common+0x48>
 800dae6:	f104 0a19 	add.w	sl, r4, #25
 800daea:	68e3      	ldr	r3, [r4, #12]
 800daec:	6832      	ldr	r2, [r6, #0]
 800daee:	1a9b      	subs	r3, r3, r2
 800daf0:	42ab      	cmp	r3, r5
 800daf2:	dc2b      	bgt.n	800db4c <_printf_common+0xa0>
 800daf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800daf8:	1e13      	subs	r3, r2, #0
 800dafa:	6822      	ldr	r2, [r4, #0]
 800dafc:	bf18      	it	ne
 800dafe:	2301      	movne	r3, #1
 800db00:	0692      	lsls	r2, r2, #26
 800db02:	d430      	bmi.n	800db66 <_printf_common+0xba>
 800db04:	4649      	mov	r1, r9
 800db06:	4638      	mov	r0, r7
 800db08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db0c:	47c0      	blx	r8
 800db0e:	3001      	adds	r0, #1
 800db10:	d023      	beq.n	800db5a <_printf_common+0xae>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	6922      	ldr	r2, [r4, #16]
 800db16:	f003 0306 	and.w	r3, r3, #6
 800db1a:	2b04      	cmp	r3, #4
 800db1c:	bf14      	ite	ne
 800db1e:	2500      	movne	r5, #0
 800db20:	6833      	ldreq	r3, [r6, #0]
 800db22:	f04f 0600 	mov.w	r6, #0
 800db26:	bf08      	it	eq
 800db28:	68e5      	ldreq	r5, [r4, #12]
 800db2a:	f104 041a 	add.w	r4, r4, #26
 800db2e:	bf08      	it	eq
 800db30:	1aed      	subeq	r5, r5, r3
 800db32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800db36:	bf08      	it	eq
 800db38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db3c:	4293      	cmp	r3, r2
 800db3e:	bfc4      	itt	gt
 800db40:	1a9b      	subgt	r3, r3, r2
 800db42:	18ed      	addgt	r5, r5, r3
 800db44:	42b5      	cmp	r5, r6
 800db46:	d11a      	bne.n	800db7e <_printf_common+0xd2>
 800db48:	2000      	movs	r0, #0
 800db4a:	e008      	b.n	800db5e <_printf_common+0xb2>
 800db4c:	2301      	movs	r3, #1
 800db4e:	4652      	mov	r2, sl
 800db50:	4649      	mov	r1, r9
 800db52:	4638      	mov	r0, r7
 800db54:	47c0      	blx	r8
 800db56:	3001      	adds	r0, #1
 800db58:	d103      	bne.n	800db62 <_printf_common+0xb6>
 800db5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db62:	3501      	adds	r5, #1
 800db64:	e7c1      	b.n	800daea <_printf_common+0x3e>
 800db66:	2030      	movs	r0, #48	; 0x30
 800db68:	18e1      	adds	r1, r4, r3
 800db6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db74:	4422      	add	r2, r4
 800db76:	3302      	adds	r3, #2
 800db78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db7c:	e7c2      	b.n	800db04 <_printf_common+0x58>
 800db7e:	2301      	movs	r3, #1
 800db80:	4622      	mov	r2, r4
 800db82:	4649      	mov	r1, r9
 800db84:	4638      	mov	r0, r7
 800db86:	47c0      	blx	r8
 800db88:	3001      	adds	r0, #1
 800db8a:	d0e6      	beq.n	800db5a <_printf_common+0xae>
 800db8c:	3601      	adds	r6, #1
 800db8e:	e7d9      	b.n	800db44 <_printf_common+0x98>

0800db90 <_printf_i>:
 800db90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db94:	7e0f      	ldrb	r7, [r1, #24]
 800db96:	4691      	mov	r9, r2
 800db98:	2f78      	cmp	r7, #120	; 0x78
 800db9a:	4680      	mov	r8, r0
 800db9c:	460c      	mov	r4, r1
 800db9e:	469a      	mov	sl, r3
 800dba0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dba6:	d807      	bhi.n	800dbb8 <_printf_i+0x28>
 800dba8:	2f62      	cmp	r7, #98	; 0x62
 800dbaa:	d80a      	bhi.n	800dbc2 <_printf_i+0x32>
 800dbac:	2f00      	cmp	r7, #0
 800dbae:	f000 80d5 	beq.w	800dd5c <_printf_i+0x1cc>
 800dbb2:	2f58      	cmp	r7, #88	; 0x58
 800dbb4:	f000 80c1 	beq.w	800dd3a <_printf_i+0x1aa>
 800dbb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dbc0:	e03a      	b.n	800dc38 <_printf_i+0xa8>
 800dbc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dbc6:	2b15      	cmp	r3, #21
 800dbc8:	d8f6      	bhi.n	800dbb8 <_printf_i+0x28>
 800dbca:	a101      	add	r1, pc, #4	; (adr r1, 800dbd0 <_printf_i+0x40>)
 800dbcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbd0:	0800dc29 	.word	0x0800dc29
 800dbd4:	0800dc3d 	.word	0x0800dc3d
 800dbd8:	0800dbb9 	.word	0x0800dbb9
 800dbdc:	0800dbb9 	.word	0x0800dbb9
 800dbe0:	0800dbb9 	.word	0x0800dbb9
 800dbe4:	0800dbb9 	.word	0x0800dbb9
 800dbe8:	0800dc3d 	.word	0x0800dc3d
 800dbec:	0800dbb9 	.word	0x0800dbb9
 800dbf0:	0800dbb9 	.word	0x0800dbb9
 800dbf4:	0800dbb9 	.word	0x0800dbb9
 800dbf8:	0800dbb9 	.word	0x0800dbb9
 800dbfc:	0800dd43 	.word	0x0800dd43
 800dc00:	0800dc69 	.word	0x0800dc69
 800dc04:	0800dcfd 	.word	0x0800dcfd
 800dc08:	0800dbb9 	.word	0x0800dbb9
 800dc0c:	0800dbb9 	.word	0x0800dbb9
 800dc10:	0800dd65 	.word	0x0800dd65
 800dc14:	0800dbb9 	.word	0x0800dbb9
 800dc18:	0800dc69 	.word	0x0800dc69
 800dc1c:	0800dbb9 	.word	0x0800dbb9
 800dc20:	0800dbb9 	.word	0x0800dbb9
 800dc24:	0800dd05 	.word	0x0800dd05
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	1d1a      	adds	r2, r3, #4
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	602a      	str	r2, [r5, #0]
 800dc30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e0a0      	b.n	800dd7e <_printf_i+0x1ee>
 800dc3c:	6820      	ldr	r0, [r4, #0]
 800dc3e:	682b      	ldr	r3, [r5, #0]
 800dc40:	0607      	lsls	r7, r0, #24
 800dc42:	f103 0104 	add.w	r1, r3, #4
 800dc46:	6029      	str	r1, [r5, #0]
 800dc48:	d501      	bpl.n	800dc4e <_printf_i+0xbe>
 800dc4a:	681e      	ldr	r6, [r3, #0]
 800dc4c:	e003      	b.n	800dc56 <_printf_i+0xc6>
 800dc4e:	0646      	lsls	r6, r0, #25
 800dc50:	d5fb      	bpl.n	800dc4a <_printf_i+0xba>
 800dc52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dc56:	2e00      	cmp	r6, #0
 800dc58:	da03      	bge.n	800dc62 <_printf_i+0xd2>
 800dc5a:	232d      	movs	r3, #45	; 0x2d
 800dc5c:	4276      	negs	r6, r6
 800dc5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc62:	230a      	movs	r3, #10
 800dc64:	4859      	ldr	r0, [pc, #356]	; (800ddcc <_printf_i+0x23c>)
 800dc66:	e012      	b.n	800dc8e <_printf_i+0xfe>
 800dc68:	682b      	ldr	r3, [r5, #0]
 800dc6a:	6820      	ldr	r0, [r4, #0]
 800dc6c:	1d19      	adds	r1, r3, #4
 800dc6e:	6029      	str	r1, [r5, #0]
 800dc70:	0605      	lsls	r5, r0, #24
 800dc72:	d501      	bpl.n	800dc78 <_printf_i+0xe8>
 800dc74:	681e      	ldr	r6, [r3, #0]
 800dc76:	e002      	b.n	800dc7e <_printf_i+0xee>
 800dc78:	0641      	lsls	r1, r0, #25
 800dc7a:	d5fb      	bpl.n	800dc74 <_printf_i+0xe4>
 800dc7c:	881e      	ldrh	r6, [r3, #0]
 800dc7e:	2f6f      	cmp	r7, #111	; 0x6f
 800dc80:	bf0c      	ite	eq
 800dc82:	2308      	moveq	r3, #8
 800dc84:	230a      	movne	r3, #10
 800dc86:	4851      	ldr	r0, [pc, #324]	; (800ddcc <_printf_i+0x23c>)
 800dc88:	2100      	movs	r1, #0
 800dc8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc8e:	6865      	ldr	r5, [r4, #4]
 800dc90:	2d00      	cmp	r5, #0
 800dc92:	bfa8      	it	ge
 800dc94:	6821      	ldrge	r1, [r4, #0]
 800dc96:	60a5      	str	r5, [r4, #8]
 800dc98:	bfa4      	itt	ge
 800dc9a:	f021 0104 	bicge.w	r1, r1, #4
 800dc9e:	6021      	strge	r1, [r4, #0]
 800dca0:	b90e      	cbnz	r6, 800dca6 <_printf_i+0x116>
 800dca2:	2d00      	cmp	r5, #0
 800dca4:	d04b      	beq.n	800dd3e <_printf_i+0x1ae>
 800dca6:	4615      	mov	r5, r2
 800dca8:	fbb6 f1f3 	udiv	r1, r6, r3
 800dcac:	fb03 6711 	mls	r7, r3, r1, r6
 800dcb0:	5dc7      	ldrb	r7, [r0, r7]
 800dcb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dcb6:	4637      	mov	r7, r6
 800dcb8:	42bb      	cmp	r3, r7
 800dcba:	460e      	mov	r6, r1
 800dcbc:	d9f4      	bls.n	800dca8 <_printf_i+0x118>
 800dcbe:	2b08      	cmp	r3, #8
 800dcc0:	d10b      	bne.n	800dcda <_printf_i+0x14a>
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	07de      	lsls	r6, r3, #31
 800dcc6:	d508      	bpl.n	800dcda <_printf_i+0x14a>
 800dcc8:	6923      	ldr	r3, [r4, #16]
 800dcca:	6861      	ldr	r1, [r4, #4]
 800dccc:	4299      	cmp	r1, r3
 800dcce:	bfde      	ittt	le
 800dcd0:	2330      	movle	r3, #48	; 0x30
 800dcd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dcd6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dcda:	1b52      	subs	r2, r2, r5
 800dcdc:	6122      	str	r2, [r4, #16]
 800dcde:	464b      	mov	r3, r9
 800dce0:	4621      	mov	r1, r4
 800dce2:	4640      	mov	r0, r8
 800dce4:	f8cd a000 	str.w	sl, [sp]
 800dce8:	aa03      	add	r2, sp, #12
 800dcea:	f7ff fedf 	bl	800daac <_printf_common>
 800dcee:	3001      	adds	r0, #1
 800dcf0:	d14a      	bne.n	800dd88 <_printf_i+0x1f8>
 800dcf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcf6:	b004      	add	sp, #16
 800dcf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	f043 0320 	orr.w	r3, r3, #32
 800dd02:	6023      	str	r3, [r4, #0]
 800dd04:	2778      	movs	r7, #120	; 0x78
 800dd06:	4832      	ldr	r0, [pc, #200]	; (800ddd0 <_printf_i+0x240>)
 800dd08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dd0c:	6823      	ldr	r3, [r4, #0]
 800dd0e:	6829      	ldr	r1, [r5, #0]
 800dd10:	061f      	lsls	r7, r3, #24
 800dd12:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd16:	d402      	bmi.n	800dd1e <_printf_i+0x18e>
 800dd18:	065f      	lsls	r7, r3, #25
 800dd1a:	bf48      	it	mi
 800dd1c:	b2b6      	uxthmi	r6, r6
 800dd1e:	07df      	lsls	r7, r3, #31
 800dd20:	bf48      	it	mi
 800dd22:	f043 0320 	orrmi.w	r3, r3, #32
 800dd26:	6029      	str	r1, [r5, #0]
 800dd28:	bf48      	it	mi
 800dd2a:	6023      	strmi	r3, [r4, #0]
 800dd2c:	b91e      	cbnz	r6, 800dd36 <_printf_i+0x1a6>
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	f023 0320 	bic.w	r3, r3, #32
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	2310      	movs	r3, #16
 800dd38:	e7a6      	b.n	800dc88 <_printf_i+0xf8>
 800dd3a:	4824      	ldr	r0, [pc, #144]	; (800ddcc <_printf_i+0x23c>)
 800dd3c:	e7e4      	b.n	800dd08 <_printf_i+0x178>
 800dd3e:	4615      	mov	r5, r2
 800dd40:	e7bd      	b.n	800dcbe <_printf_i+0x12e>
 800dd42:	682b      	ldr	r3, [r5, #0]
 800dd44:	6826      	ldr	r6, [r4, #0]
 800dd46:	1d18      	adds	r0, r3, #4
 800dd48:	6961      	ldr	r1, [r4, #20]
 800dd4a:	6028      	str	r0, [r5, #0]
 800dd4c:	0635      	lsls	r5, r6, #24
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	d501      	bpl.n	800dd56 <_printf_i+0x1c6>
 800dd52:	6019      	str	r1, [r3, #0]
 800dd54:	e002      	b.n	800dd5c <_printf_i+0x1cc>
 800dd56:	0670      	lsls	r0, r6, #25
 800dd58:	d5fb      	bpl.n	800dd52 <_printf_i+0x1c2>
 800dd5a:	8019      	strh	r1, [r3, #0]
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4615      	mov	r5, r2
 800dd60:	6123      	str	r3, [r4, #16]
 800dd62:	e7bc      	b.n	800dcde <_printf_i+0x14e>
 800dd64:	682b      	ldr	r3, [r5, #0]
 800dd66:	2100      	movs	r1, #0
 800dd68:	1d1a      	adds	r2, r3, #4
 800dd6a:	602a      	str	r2, [r5, #0]
 800dd6c:	681d      	ldr	r5, [r3, #0]
 800dd6e:	6862      	ldr	r2, [r4, #4]
 800dd70:	4628      	mov	r0, r5
 800dd72:	f000 f878 	bl	800de66 <memchr>
 800dd76:	b108      	cbz	r0, 800dd7c <_printf_i+0x1ec>
 800dd78:	1b40      	subs	r0, r0, r5
 800dd7a:	6060      	str	r0, [r4, #4]
 800dd7c:	6863      	ldr	r3, [r4, #4]
 800dd7e:	6123      	str	r3, [r4, #16]
 800dd80:	2300      	movs	r3, #0
 800dd82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd86:	e7aa      	b.n	800dcde <_printf_i+0x14e>
 800dd88:	462a      	mov	r2, r5
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	6923      	ldr	r3, [r4, #16]
 800dd90:	47d0      	blx	sl
 800dd92:	3001      	adds	r0, #1
 800dd94:	d0ad      	beq.n	800dcf2 <_printf_i+0x162>
 800dd96:	6823      	ldr	r3, [r4, #0]
 800dd98:	079b      	lsls	r3, r3, #30
 800dd9a:	d413      	bmi.n	800ddc4 <_printf_i+0x234>
 800dd9c:	68e0      	ldr	r0, [r4, #12]
 800dd9e:	9b03      	ldr	r3, [sp, #12]
 800dda0:	4298      	cmp	r0, r3
 800dda2:	bfb8      	it	lt
 800dda4:	4618      	movlt	r0, r3
 800dda6:	e7a6      	b.n	800dcf6 <_printf_i+0x166>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	4632      	mov	r2, r6
 800ddac:	4649      	mov	r1, r9
 800ddae:	4640      	mov	r0, r8
 800ddb0:	47d0      	blx	sl
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	d09d      	beq.n	800dcf2 <_printf_i+0x162>
 800ddb6:	3501      	adds	r5, #1
 800ddb8:	68e3      	ldr	r3, [r4, #12]
 800ddba:	9903      	ldr	r1, [sp, #12]
 800ddbc:	1a5b      	subs	r3, r3, r1
 800ddbe:	42ab      	cmp	r3, r5
 800ddc0:	dcf2      	bgt.n	800dda8 <_printf_i+0x218>
 800ddc2:	e7eb      	b.n	800dd9c <_printf_i+0x20c>
 800ddc4:	2500      	movs	r5, #0
 800ddc6:	f104 0619 	add.w	r6, r4, #25
 800ddca:	e7f5      	b.n	800ddb8 <_printf_i+0x228>
 800ddcc:	0800eed0 	.word	0x0800eed0
 800ddd0:	0800eee1 	.word	0x0800eee1

0800ddd4 <_realloc_r>:
 800ddd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd8:	4680      	mov	r8, r0
 800ddda:	4614      	mov	r4, r2
 800dddc:	460e      	mov	r6, r1
 800ddde:	b921      	cbnz	r1, 800ddea <_realloc_r+0x16>
 800dde0:	4611      	mov	r1, r2
 800dde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dde6:	f7ff bb4f 	b.w	800d488 <_malloc_r>
 800ddea:	b92a      	cbnz	r2, 800ddf8 <_realloc_r+0x24>
 800ddec:	f7ff fcbe 	bl	800d76c <_free_r>
 800ddf0:	4625      	mov	r5, r4
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf8:	f000 f851 	bl	800de9e <_malloc_usable_size_r>
 800ddfc:	4284      	cmp	r4, r0
 800ddfe:	4607      	mov	r7, r0
 800de00:	d802      	bhi.n	800de08 <_realloc_r+0x34>
 800de02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de06:	d812      	bhi.n	800de2e <_realloc_r+0x5a>
 800de08:	4621      	mov	r1, r4
 800de0a:	4640      	mov	r0, r8
 800de0c:	f7ff fb3c 	bl	800d488 <_malloc_r>
 800de10:	4605      	mov	r5, r0
 800de12:	2800      	cmp	r0, #0
 800de14:	d0ed      	beq.n	800ddf2 <_realloc_r+0x1e>
 800de16:	42bc      	cmp	r4, r7
 800de18:	4622      	mov	r2, r4
 800de1a:	4631      	mov	r1, r6
 800de1c:	bf28      	it	cs
 800de1e:	463a      	movcs	r2, r7
 800de20:	f000 f82f 	bl	800de82 <memcpy>
 800de24:	4631      	mov	r1, r6
 800de26:	4640      	mov	r0, r8
 800de28:	f7ff fca0 	bl	800d76c <_free_r>
 800de2c:	e7e1      	b.n	800ddf2 <_realloc_r+0x1e>
 800de2e:	4635      	mov	r5, r6
 800de30:	e7df      	b.n	800ddf2 <_realloc_r+0x1e>

0800de32 <memmove>:
 800de32:	4288      	cmp	r0, r1
 800de34:	b510      	push	{r4, lr}
 800de36:	eb01 0402 	add.w	r4, r1, r2
 800de3a:	d902      	bls.n	800de42 <memmove+0x10>
 800de3c:	4284      	cmp	r4, r0
 800de3e:	4623      	mov	r3, r4
 800de40:	d807      	bhi.n	800de52 <memmove+0x20>
 800de42:	1e43      	subs	r3, r0, #1
 800de44:	42a1      	cmp	r1, r4
 800de46:	d008      	beq.n	800de5a <memmove+0x28>
 800de48:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de50:	e7f8      	b.n	800de44 <memmove+0x12>
 800de52:	4601      	mov	r1, r0
 800de54:	4402      	add	r2, r0
 800de56:	428a      	cmp	r2, r1
 800de58:	d100      	bne.n	800de5c <memmove+0x2a>
 800de5a:	bd10      	pop	{r4, pc}
 800de5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de64:	e7f7      	b.n	800de56 <memmove+0x24>

0800de66 <memchr>:
 800de66:	4603      	mov	r3, r0
 800de68:	b510      	push	{r4, lr}
 800de6a:	b2c9      	uxtb	r1, r1
 800de6c:	4402      	add	r2, r0
 800de6e:	4293      	cmp	r3, r2
 800de70:	4618      	mov	r0, r3
 800de72:	d101      	bne.n	800de78 <memchr+0x12>
 800de74:	2000      	movs	r0, #0
 800de76:	e003      	b.n	800de80 <memchr+0x1a>
 800de78:	7804      	ldrb	r4, [r0, #0]
 800de7a:	3301      	adds	r3, #1
 800de7c:	428c      	cmp	r4, r1
 800de7e:	d1f6      	bne.n	800de6e <memchr+0x8>
 800de80:	bd10      	pop	{r4, pc}

0800de82 <memcpy>:
 800de82:	440a      	add	r2, r1
 800de84:	4291      	cmp	r1, r2
 800de86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de8a:	d100      	bne.n	800de8e <memcpy+0xc>
 800de8c:	4770      	bx	lr
 800de8e:	b510      	push	{r4, lr}
 800de90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de94:	4291      	cmp	r1, r2
 800de96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de9a:	d1f9      	bne.n	800de90 <memcpy+0xe>
 800de9c:	bd10      	pop	{r4, pc}

0800de9e <_malloc_usable_size_r>:
 800de9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dea2:	1f18      	subs	r0, r3, #4
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	bfbc      	itt	lt
 800dea8:	580b      	ldrlt	r3, [r1, r0]
 800deaa:	18c0      	addlt	r0, r0, r3
 800deac:	4770      	bx	lr
	...

0800deb0 <_init>:
 800deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb2:	bf00      	nop
 800deb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deb6:	bc08      	pop	{r3}
 800deb8:	469e      	mov	lr, r3
 800deba:	4770      	bx	lr

0800debc <_fini>:
 800debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800debe:	bf00      	nop
 800dec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dec2:	bc08      	pop	{r3}
 800dec4:	469e      	mov	lr, r3
 800dec6:	4770      	bx	lr
