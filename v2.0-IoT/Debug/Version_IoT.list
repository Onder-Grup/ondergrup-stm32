
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d544  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f5c  0800d728  0800d728  0001d728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e684  0800e684  00020a14  2**0
                  CONTENTS
  4 .ARM          00000000  0800e684  0800e684  00020a14  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e684  0800e684  00020a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e684  0800e684  0001e684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e688  0800e688  0001e688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a14  20000000  0800e68c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000a14  0800f0a0  00020a14  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff0  0800f0a0  00020ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a3d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013605  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002699  00000000  00000000  00034085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0c  00000000  00000000  000378e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef5  00000000  00000000  000386ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001895d  00000000  00000000  000535e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd5c  00000000  00000000  0006bf3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005204  00000000  00000000  0010bc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a14 	.word	0x20000a14
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d710 	.word	0x0800d710

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a18 	.word	0x20000a18
 8000220:	0800d710 	.word	0x0800d710

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f00c fe39 	bl	800ced4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f00c f804 	bl	800c284 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f008 ff34 	bl	80090ec <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f00c fe17 	bl	800ced4 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00c fe07 	bl	800ced4 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f00b ffcf 	bl	800c284 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f008 feff 	bl	80090ec <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f00b ffbb 	bl	800c284 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f008 feeb 	bl	80090ec <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800d774 	.word	0x0800d774
 8000324:	0800d784 	.word	0x0800d784
 8000328:	20000a30 	.word	0x20000a30
 800032c:	0800d800 	.word	0x0800d800
 8000330:	0800d7a4 	.word	0x0800d7a4
 8000334:	0800d814 	.word	0x0800d814

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f00a faaf 	bl	800a8de <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f00a fa9b 	bl	800a8c4 <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f009 fdfe 	bl	800a004 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000b54 	.word	0x20000b54
 8000414:	20000b2a 	.word	0x20000b2a

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f00a fa3f 	bl	800a8de <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f00a fa2b 	bl	800a8c4 <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f009 fd8e 	bl	800a004 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000b54 	.word	0x20000b54
 80004f4:	20000b2a 	.word	0x20000b2a

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f00a f9b9 	bl	800a8de <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f00a f9a5 	bl	800a8c4 <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f009 fd08 	bl	800a004 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000b54 	.word	0x20000b54
 8000600:	20000b2a 	.word	0x20000b2a

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f86d 	bl	8000700 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f008 fd0e 	bl	80090ec <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9d 	bl	800062a <lcd_gotoxy>

    lcd_send_char(' ');
 80006f0:	2020      	movs	r0, #32
 80006f2:	f7ff ff17 	bl	8000524 <lcd_send_char>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <lcd_backlight+0x20>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe11 	bl	8000338 <lcd_send_cmd>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000b2a 	.word	0x20000b2a

08000724 <lcd_cursor>:

void lcd_cursor(int state) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff fe00 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fdfd 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800073e:	e002      	b.n	8000746 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fdf9 	bl	8000338 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <__NVIC_SystemReset+0x24>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000762:	4904      	ldr	r1, [pc, #16]	; (8000774 <__NVIC_SystemReset+0x24>)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x28>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <__NVIC_SystemReset+0x20>
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	05fa0004 	.word	0x05fa0004

0800077c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3301      	adds	r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f00c faaa 	bl	800cce8 <malloc>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <copyText+0x2a>
        strcpy(result, text);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f00c fc0b 	bl	800cfbc <strcpy>
    }
    return result;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007ba:	20c8      	movs	r0, #200	; 0xc8
 80007bc:	f008 fc96 	bl	80090ec <HAL_Delay>
	lcd_clear();
 80007c0:	f7ff ff7e 	bl	80006c0 <lcd_clear>
	if(type == 1 && page == 0) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d143      	bne.n	8000852 <printTemplate+0xa2>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d140      	bne.n	8000852 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007d0:	4a9d      	ldr	r2, [pc, #628]	; (8000a48 <printTemplate+0x298>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff47 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 80007da:	4a9c      	ldr	r2, [pc, #624]	; (8000a4c <printTemplate+0x29c>)
 80007dc:	2103      	movs	r1, #3
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff42 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 80007e4:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <printTemplate+0x2a0>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff3d 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 80007ee:	4a99      	ldr	r2, [pc, #612]	; (8000a54 <printTemplate+0x2a4>)
 80007f0:	2105      	movs	r1, #5
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 80007f8:	4a97      	ldr	r2, [pc, #604]	; (8000a58 <printTemplate+0x2a8>)
 80007fa:	2106      	movs	r1, #6
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8000802:	4a96      	ldr	r2, [pc, #600]	; (8000a5c <printTemplate+0x2ac>)
 8000804:	2107      	movs	r1, #7
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 800080c:	4a94      	ldr	r2, [pc, #592]	; (8000a60 <printTemplate+0x2b0>)
 800080e:	210a      	movs	r1, #10
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff29 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8000816:	4a93      	ldr	r2, [pc, #588]	; (8000a64 <printTemplate+0x2b4>)
 8000818:	210b      	movs	r1, #11
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff24 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8000820:	4a91      	ldr	r2, [pc, #580]	; (8000a68 <printTemplate+0x2b8>)
 8000822:	210c      	movs	r1, #12
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff1f 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 800082a:	4a90      	ldr	r2, [pc, #576]	; (8000a6c <printTemplate+0x2bc>)
 800082c:	210d      	movs	r1, #13
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff1a 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8000834:	4a8e      	ldr	r2, [pc, #568]	; (8000a70 <printTemplate+0x2c0>)
 8000836:	210e      	movs	r1, #14
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff15 	bl	8000668 <lcd_print>
		lcd_print(1, 5, machineID);
 800083e:	4a8d      	ldr	r2, [pc, #564]	; (8000a74 <printTemplate+0x2c4>)
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff10 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000850:	e0f5      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 2) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d178      	bne.n	800094a <printTemplate+0x19a>
		if(page == 1) {
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d114      	bne.n	8000888 <printTemplate+0xd8>
			lcd_clear();
 800085e:	f7ff ff2f 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f008 fc42 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000868:	4a83      	ldr	r2, [pc, #524]	; (8000a78 <printTemplate+0x2c8>)
 800086a:	2101      	movs	r1, #1
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fefb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000872:	4a82      	ldr	r2, [pc, #520]	; (8000a7c <printTemplate+0x2cc>)
 8000874:	2107      	movs	r1, #7
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fef6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800087c:	4a80      	ldr	r2, [pc, #512]	; (8000a80 <printTemplate+0x2d0>)
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fef1 	bl	8000668 <lcd_print>
}
 8000886:	e0da      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d114      	bne.n	80008b8 <printTemplate+0x108>
			lcd_clear();
 800088e:	f7ff ff17 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f008 fc2a 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000898:	4a77      	ldr	r2, [pc, #476]	; (8000a78 <printTemplate+0x2c8>)
 800089a:	2101      	movs	r1, #1
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fee3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008a2:	4a76      	ldr	r2, [pc, #472]	; (8000a7c <printTemplate+0x2cc>)
 80008a4:	2107      	movs	r1, #7
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fede 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008ac:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <printTemplate+0x2d4>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fed9 	bl	8000668 <lcd_print>
}
 80008b6:	e0c2      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d114      	bne.n	80008e8 <printTemplate+0x138>
			lcd_clear();
 80008be:	f7ff feff 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f008 fc12 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008c8:	4a6b      	ldr	r2, [pc, #428]	; (8000a78 <printTemplate+0x2c8>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fecb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008d2:	4a6a      	ldr	r2, [pc, #424]	; (8000a7c <printTemplate+0x2cc>)
 80008d4:	2107      	movs	r1, #7
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fec6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008dc:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <printTemplate+0x2d8>)
 80008de:	2101      	movs	r1, #1
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fec1 	bl	8000668 <lcd_print>
}
 80008e6:	e0aa      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d114      	bne.n	8000918 <printTemplate+0x168>
			lcd_clear();
 80008ee:	f7ff fee7 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f008 fbfa 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008f8:	4a5f      	ldr	r2, [pc, #380]	; (8000a78 <printTemplate+0x2c8>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff feb3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000902:	4a5e      	ldr	r2, [pc, #376]	; (8000a7c <printTemplate+0x2cc>)
 8000904:	2107      	movs	r1, #7
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff feae 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800090c:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <printTemplate+0x2dc>)
 800090e:	2101      	movs	r1, #1
 8000910:	2002      	movs	r0, #2
 8000912:	f7ff fea9 	bl	8000668 <lcd_print>
}
 8000916:	e092      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b05      	cmp	r3, #5
 800091c:	f040 808f 	bne.w	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000920:	f7ff fece 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f008 fbe1 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800092a:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <printTemplate+0x2c8>)
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fe9a 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <printTemplate+0x2cc>)
 8000936:	2107      	movs	r1, #7
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe95 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <printTemplate+0x2e0>)
 8000940:	2101      	movs	r1, #1
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fe90 	bl	8000668 <lcd_print>
}
 8000948:	e079      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 3) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d176      	bne.n	8000a3e <printTemplate+0x28e>
		if(page == 1) {
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d114      	bne.n	8000980 <printTemplate+0x1d0>
			lcd_clear();
 8000956:	f7ff feb3 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f008 fbc6 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000960:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <printTemplate+0x2e4>)
 8000962:	2101      	movs	r1, #1
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fe7f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <printTemplate+0x2e8>)
 800096c:	2107      	movs	r1, #7
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe7a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000974:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <printTemplate+0x2d0>)
 8000976:	2101      	movs	r1, #1
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fe75 	bl	8000668 <lcd_print>
}
 800097e:	e05e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d114      	bne.n	80009b0 <printTemplate+0x200>
			lcd_clear();
 8000986:	f7ff fe9b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f008 fbae 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <printTemplate+0x2e4>)
 8000992:	2101      	movs	r1, #1
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe67 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800099a:	4a3f      	ldr	r2, [pc, #252]	; (8000a98 <printTemplate+0x2e8>)
 800099c:	2107      	movs	r1, #7
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe62 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009a4:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <printTemplate+0x2d4>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fe5d 	bl	8000668 <lcd_print>
}
 80009ae:	e046      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d114      	bne.n	80009e0 <printTemplate+0x230>
			lcd_clear();
 80009b6:	f7ff fe83 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f008 fb96 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <printTemplate+0x2e4>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fe4f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <printTemplate+0x2e8>)
 80009cc:	2107      	movs	r1, #7
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fe4a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80009d4:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <printTemplate+0x2d8>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fe45 	bl	8000668 <lcd_print>
}
 80009de:	e02e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d114      	bne.n	8000a10 <printTemplate+0x260>
			lcd_clear();
 80009e6:	f7ff fe6b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f008 fb7e 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <printTemplate+0x2e4>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe37 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <printTemplate+0x2e8>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fe32 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <printTemplate+0x2dc>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fe2d 	bl	8000668 <lcd_print>
}
 8000a0e:	e016      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d113      	bne.n	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000a16:	f7ff fe53 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f008 fb66 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <printTemplate+0x2e4>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe1f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <printTemplate+0x2e8>)
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe1a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <printTemplate+0x2e0>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f7ff fe15 	bl	8000668 <lcd_print>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800d8a0 	.word	0x0800d8a0
 8000a4c:	0800d8a8 	.word	0x0800d8a8
 8000a50:	0800d8ac 	.word	0x0800d8ac
 8000a54:	0800d8b0 	.word	0x0800d8b0
 8000a58:	0800d8b4 	.word	0x0800d8b4
 8000a5c:	0800d8b8 	.word	0x0800d8b8
 8000a60:	0800d8bc 	.word	0x0800d8bc
 8000a64:	0800d8c0 	.word	0x0800d8c0
 8000a68:	0800d8c4 	.word	0x0800d8c4
 8000a6c:	0800d8c8 	.word	0x0800d8c8
 8000a70:	0800d8cc 	.word	0x0800d8cc
 8000a74:	20000cd4 	.word	0x20000cd4
 8000a78:	0800d8d0 	.word	0x0800d8d0
 8000a7c:	20000ce0 	.word	0x20000ce0
 8000a80:	0800d8d8 	.word	0x0800d8d8
 8000a84:	0800d8ec 	.word	0x0800d8ec
 8000a88:	0800d900 	.word	0x0800d900
 8000a8c:	0800d914 	.word	0x0800d914
 8000a90:	0800d928 	.word	0x0800d928
 8000a94:	0800d93c 	.word	0x0800d93c
 8000a98:	20000cf4 	.word	0x20000cf4

08000a9c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <getCharFromCursorPosition+0x1c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000960 	.word	0x20000960

08000abc <takeMachineID>:
	}

	return -1;
}

void takeMachineID(int state) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff fe2d 	bl	8000724 <lcd_cursor>

    int cursorPosition = 3;
 8000aca:	2303      	movs	r3, #3
 8000acc:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d104      	bne.n	8000ae6 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000adc:	220c      	movs	r2, #12
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4899      	ldr	r0, [pc, #612]	; (8000d48 <takeMachineID+0x28c>)
 8000ae2:	f00c fa17 	bl	800cf14 <memset>
    }
    HAL_Delay(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f008 fb00 	bl	80090ec <HAL_Delay>

    printTemplate(1, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fe5e 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000af4:	2108      	movs	r1, #8
 8000af6:	4895      	ldr	r0, [pc, #596]	; (8000d4c <takeMachineID+0x290>)
 8000af8:	f009 f8c8 	bl	8009c8c <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d138      	bne.n	8000b74 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fe0e 	bl	8000724 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000b08:	4b8f      	ldr	r3, [pc, #572]	; (8000d48 <takeMachineID+0x28c>)
 8000b0a:	7adb      	ldrb	r3, [r3, #11]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d110      	bne.n	8000b32 <takeMachineID+0x76>
        		lcd_clear();
 8000b10:	f7ff fdd6 	bl	80006c0 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000b14:	4a8e      	ldr	r2, [pc, #568]	; (8000d50 <takeMachineID+0x294>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fda5 	bl	8000668 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000b1e:	4a8d      	ldr	r2, [pc, #564]	; (8000d54 <takeMachineID+0x298>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff fda0 	bl	8000668 <lcd_print>
        		HAL_Delay(1200);
 8000b28:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000b2c:	f008 fade 	bl	80090ec <HAL_Delay>
        		goto mainSection;
 8000b30:	e7c8      	b.n	8000ac4 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000b32:	4b89      	ldr	r3, [pc, #548]	; (8000d58 <takeMachineID+0x29c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b88      	ldr	r3, [pc, #544]	; (8000d5c <takeMachineID+0x2a0>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a82      	ldr	r2, [pc, #520]	; (8000d48 <takeMachineID+0x28c>)
 8000b3e:	461c      	mov	r4, r3
 8000b40:	4613      	mov	r3, r2
 8000b42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b44:	6020      	str	r0, [r4, #0]
 8000b46:	6061      	str	r1, [r4, #4]
 8000b48:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000b4a:	20c8      	movs	r0, #200	; 0xc8
 8000b4c:	f008 face 	bl	80090ec <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 113, eepromData, 113, 3000);
 8000b50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	2371      	movs	r3, #113	; 0x71
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	4b80      	ldr	r3, [pc, #512]	; (8000d5c <takeMachineID+0x2a0>)
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2371      	movs	r3, #113	; 0x71
 8000b60:	2200      	movs	r2, #0
 8000b62:	21a0      	movs	r1, #160	; 0xa0
 8000b64:	487e      	ldr	r0, [pc, #504]	; (8000d60 <takeMachineID+0x2a4>)
 8000b66:	f009 fb4b 	bl	800a200 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6e:	f008 fabd 	bl	80090ec <HAL_Delay>

            break;
 8000b72:	e0e5      	b.n	8000d40 <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000b74:	2101      	movs	r1, #1
 8000b76:	4875      	ldr	r0, [pc, #468]	; (8000d4c <takeMachineID+0x290>)
 8000b78:	f009 f888 	bl	8009c8c <HAL_GPIO_ReadPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d112      	bne.n	8000ba8 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	d102      	bne.n	8000b8e <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000b88:	230a      	movs	r3, #10
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e008      	b.n	8000ba0 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b0e      	cmp	r3, #14
 8000b92:	d102      	bne.n	8000b9a <takeMachineID+0xde>
                cursorPosition = 3;
 8000b94:	2303      	movs	r3, #3
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e002      	b.n	8000ba0 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000ba0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ba4:	f008 faa2 	bl	80090ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000ba8:	2108      	movs	r1, #8
 8000baa:	486e      	ldr	r0, [pc, #440]	; (8000d64 <takeMachineID+0x2a8>)
 8000bac:	f009 f86e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d112      	bne.n	8000bdc <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d102      	bne.n	8000bc2 <takeMachineID+0x106>
                cursorPosition = 14;
 8000bbc:	230e      	movs	r3, #14
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e008      	b.n	8000bd4 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2b0a      	cmp	r3, #10
 8000bc6:	d102      	bne.n	8000bce <takeMachineID+0x112>
            	cursorPosition = 7;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e002      	b.n	8000bd4 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000bd4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bd8:	f008 fa88 	bl	80090ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000bdc:	2102      	movs	r1, #2
 8000bde:	485b      	ldr	r0, [pc, #364]	; (8000d4c <takeMachineID+0x290>)
 8000be0:	f009 f854 	bl	8009c8c <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d16c      	bne.n	8000cc4 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d105      	bne.n	8000bfc <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000bf0:	4a55      	ldr	r2, [pc, #340]	; (8000d48 <takeMachineID+0x28c>)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	2230      	movs	r2, #48	; 0x30
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e04f      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d105      	bne.n	8000c0e <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000c02:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <takeMachineID+0x28c>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4413      	add	r3, r2
 8000c08:	2231      	movs	r2, #49	; 0x31
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e046      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2b05      	cmp	r3, #5
 8000c12:	d105      	bne.n	8000c20 <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000c14:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <takeMachineID+0x28c>)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2232      	movs	r2, #50	; 0x32
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e03d      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d105      	bne.n	8000c32 <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000c26:	4a48      	ldr	r2, [pc, #288]	; (8000d48 <takeMachineID+0x28c>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	2233      	movs	r2, #51	; 0x33
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e034      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d105      	bne.n	8000c44 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000c38:	4a43      	ldr	r2, [pc, #268]	; (8000d48 <takeMachineID+0x28c>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2234      	movs	r2, #52	; 0x34
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e02b      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	d105      	bne.n	8000c56 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000c4a:	4a3f      	ldr	r2, [pc, #252]	; (8000d48 <takeMachineID+0x28c>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4413      	add	r3, r2
 8000c50:	2235      	movs	r2, #53	; 0x35
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e022      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2b0b      	cmp	r3, #11
 8000c5a:	d105      	bne.n	8000c68 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000c5c:	4a3a      	ldr	r2, [pc, #232]	; (8000d48 <takeMachineID+0x28c>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4413      	add	r3, r2
 8000c62:	2236      	movs	r2, #54	; 0x36
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e019      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	2b0c      	cmp	r3, #12
 8000c6c:	d105      	bne.n	8000c7a <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000c6e:	4a36      	ldr	r2, [pc, #216]	; (8000d48 <takeMachineID+0x28c>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4413      	add	r3, r2
 8000c74:	2237      	movs	r2, #55	; 0x37
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e010      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b0d      	cmp	r3, #13
 8000c7e:	d105      	bne.n	8000c8c <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <takeMachineID+0x28c>)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4413      	add	r3, r2
 8000c86:	2238      	movs	r2, #56	; 0x38
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e007      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b0e      	cmp	r3, #14
 8000c90:	d104      	bne.n	8000c9c <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000c92:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <takeMachineID+0x28c>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4413      	add	r3, r2
 8000c98:	2239      	movs	r2, #57	; 0x39
 8000c9a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	b2d9      	uxtb	r1, r3
 8000ca0:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <takeMachineID+0x28c>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fcf1 	bl	8000692 <lcd_print_char>

        	writeLoc++;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000cbc:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000cc0:	f008 fa14 	bl	80090ec <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4821      	ldr	r0, [pc, #132]	; (8000d4c <takeMachineID+0x290>)
 8000cc8:	f008 ffe0 	bl	8009c8c <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d12f      	bne.n	8000d32 <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <takeMachineID+0x28c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d027      	beq.n	8000d2a <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000cda:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <takeMachineID+0x28c>)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4413      	add	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	3304      	adds	r3, #4
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fcf0 	bl	80006d4 <lcd_delete_char>
                HAL_Delay(50);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f008 f9f9 	bl	80090ec <HAL_Delay>

                if(writeLoc > 5) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	dd03      	ble.n	8000d08 <takeMachineID+0x24c>
                	writeLoc--;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e004      	b.n	8000d12 <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	dc01      	bgt.n	8000d12 <takeMachineID+0x256>
                	writeLoc = 5;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	dd03      	ble.n	8000d20 <takeMachineID+0x264>
                	machineIDLoc--;
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	e004      	b.n	8000d2a <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da01      	bge.n	8000d2a <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000d2a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d2e:	f008 f9dd 	bl	80090ec <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f7ff fc76 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d3e:	e6d9      	b.n	8000af4 <takeMachineID+0x38>
    }
}
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	20000cd4 	.word	0x20000cd4
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	0800d944 	.word	0x0800d944
 8000d54:	0800d958 	.word	0x0800d958
 8000d58:	200009b1 	.word	0x200009b1
 8000d5c:	20000c38 	.word	0x20000c38
 8000d60:	20000b54 	.word	0x20000b54
 8000d64:	40011000 	.word	0x40011000

08000d68 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af04      	add	r7, sp, #16
 8000d6e:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fcd7 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000d7c:	2214      	movs	r2, #20
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4890      	ldr	r0, [pc, #576]	; (8000fc4 <takeWifiSSID+0x25c>)
 8000d82:	f00c f8c7 	bl	800cf14 <memset>
    }

    int realCharPos = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000d8a:	4b8f      	ldr	r3, [pc, #572]	; (8000fc8 <takeWifiSSID+0x260>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
    page = 1;
 8000d90:	4b8e      	ldr	r3, [pc, #568]	; (8000fcc <takeWifiSSID+0x264>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fd05 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000da6:	2108      	movs	r1, #8
 8000da8:	4889      	ldr	r0, [pc, #548]	; (8000fd0 <takeWifiSSID+0x268>)
 8000daa:	f008 ff6f 	bl	8009c8c <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d13b      	bne.n	8000e2c <takeWifiSSID+0xc4>
            lcd_cursor(0);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fcb5 	bl	8000724 <lcd_cursor>

            if(wifiSSID[19] == '\0') {
 8000dba:	4b82      	ldr	r3, [pc, #520]	; (8000fc4 <takeWifiSSID+0x25c>)
 8000dbc:	7cdb      	ldrb	r3, [r3, #19]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d110      	bne.n	8000de4 <takeWifiSSID+0x7c>
                lcd_clear();
 8000dc2:	f7ff fc7d 	bl	80006c0 <lcd_clear>
                lcd_print(1, 1, "SSID 12 KARAKTER");
 8000dc6:	4a83      	ldr	r2, [pc, #524]	; (8000fd4 <takeWifiSSID+0x26c>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fc4c 	bl	8000668 <lcd_print>
                lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000dd0:	4a81      	ldr	r2, [pc, #516]	; (8000fd8 <takeWifiSSID+0x270>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f7ff fc47 	bl	8000668 <lcd_print>
                HAL_Delay(1200);
 8000dda:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000dde:	f008 f985 	bl	80090ec <HAL_Delay>
                goto mainSSIDSection;
 8000de2:	e7c5      	b.n	8000d70 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, 20);
 8000de4:	4b7d      	ldr	r3, [pc, #500]	; (8000fdc <takeWifiSSID+0x274>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <takeWifiSSID+0x278>)
 8000dec:	4413      	add	r3, r2
 8000dee:	4a75      	ldr	r2, [pc, #468]	; (8000fc4 <takeWifiSSID+0x25c>)
 8000df0:	461d      	mov	r5, r3
 8000df2:	4614      	mov	r4, r2
 8000df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df6:	6028      	str	r0, [r5, #0]
 8000df8:	6069      	str	r1, [r5, #4]
 8000dfa:	60aa      	str	r2, [r5, #8]
 8000dfc:	60eb      	str	r3, [r5, #12]
 8000dfe:	6820      	ldr	r0, [r4, #0]
 8000e00:	6128      	str	r0, [r5, #16]
            HAL_Delay(200);
 8000e02:	20c8      	movs	r0, #200	; 0xc8
 8000e04:	f008 f972 	bl	80090ec <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 113, eepromData, 113, 3000);
 8000e08:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e0c:	9302      	str	r3, [sp, #8]
 8000e0e:	2371      	movs	r3, #113	; 0x71
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	4b73      	ldr	r3, [pc, #460]	; (8000fe0 <takeWifiSSID+0x278>)
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2371      	movs	r3, #113	; 0x71
 8000e18:	2200      	movs	r2, #0
 8000e1a:	21a0      	movs	r1, #160	; 0xa0
 8000e1c:	4871      	ldr	r0, [pc, #452]	; (8000fe4 <takeWifiSSID+0x27c>)
 8000e1e:	f009 f9ef 	bl	800a200 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000e22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e26:	f008 f961 	bl	80090ec <HAL_Delay>

            break;
 8000e2a:	e14b      	b.n	80010c4 <takeWifiSSID+0x35c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4868      	ldr	r0, [pc, #416]	; (8000fd0 <takeWifiSSID+0x268>)
 8000e30:	f008 ff2c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d166      	bne.n	8000f08 <takeWifiSSID+0x1a0>
        	realCharPos++;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b50      	cmp	r3, #80	; 0x50
 8000e44:	dd01      	ble.n	8000e4a <takeWifiSSID+0xe2>
        		realCharPos = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <takeWifiSSID+0x260>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b10      	cmp	r3, #16
 8000e50:	d152      	bne.n	8000ef8 <takeWifiSSID+0x190>
            	if(page == 1) {
 8000e52:	4b5e      	ldr	r3, [pc, #376]	; (8000fcc <takeWifiSSID+0x264>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d10c      	bne.n	8000e74 <takeWifiSSID+0x10c>
            		cursorPosition = 1;
 8000e5a:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <takeWifiSSID+0x260>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
            		page++;
 8000e60:	4b5a      	ldr	r3, [pc, #360]	; (8000fcc <takeWifiSSID+0x264>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a59      	ldr	r2, [pc, #356]	; (8000fcc <takeWifiSSID+0x264>)
 8000e68:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff fc9f 	bl	80007b0 <printTemplate>
 8000e72:	e046      	b.n	8000f02 <takeWifiSSID+0x19a>
            	} else if(page == 2) {
 8000e74:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <takeWifiSSID+0x264>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d10c      	bne.n	8000e96 <takeWifiSSID+0x12e>
            		cursorPosition = 1;
 8000e7c:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <takeWifiSSID+0x260>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
            		page++;
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <takeWifiSSID+0x264>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a50      	ldr	r2, [pc, #320]	; (8000fcc <takeWifiSSID+0x264>)
 8000e8a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000e8c:	2103      	movs	r1, #3
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f7ff fc8e 	bl	80007b0 <printTemplate>
 8000e94:	e035      	b.n	8000f02 <takeWifiSSID+0x19a>
            	} else if(page == 3) {
 8000e96:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <takeWifiSSID+0x264>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d10c      	bne.n	8000eb8 <takeWifiSSID+0x150>
            		cursorPosition = 1;
 8000e9e:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <takeWifiSSID+0x260>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
            		page++;
 8000ea4:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <takeWifiSSID+0x264>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a48      	ldr	r2, [pc, #288]	; (8000fcc <takeWifiSSID+0x264>)
 8000eac:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000eae:	2104      	movs	r1, #4
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fc7d 	bl	80007b0 <printTemplate>
 8000eb6:	e024      	b.n	8000f02 <takeWifiSSID+0x19a>
            	} else if(page == 4) {
 8000eb8:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <takeWifiSSID+0x264>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d10c      	bne.n	8000eda <takeWifiSSID+0x172>
            		cursorPosition = 1;
 8000ec0:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <takeWifiSSID+0x260>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
            		page++;
 8000ec6:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <takeWifiSSID+0x264>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a3f      	ldr	r2, [pc, #252]	; (8000fcc <takeWifiSSID+0x264>)
 8000ece:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f7ff fc6c 	bl	80007b0 <printTemplate>
 8000ed8:	e013      	b.n	8000f02 <takeWifiSSID+0x19a>
            	} else if(page == 5) {
 8000eda:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <takeWifiSSID+0x264>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b05      	cmp	r3, #5
 8000ee0:	d10f      	bne.n	8000f02 <takeWifiSSID+0x19a>
            		cursorPosition = 1;
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <takeWifiSSID+0x260>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <takeWifiSSID+0x264>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000eee:	2101      	movs	r1, #1
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f7ff fc5d 	bl	80007b0 <printTemplate>
 8000ef6:	e004      	b.n	8000f02 <takeWifiSSID+0x19a>
            	}
            } else {
            	cursorPosition++;
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <takeWifiSSID+0x260>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <takeWifiSSID+0x260>)
 8000f00:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f02:	20fa      	movs	r0, #250	; 0xfa
 8000f04:	f008 f8f2 	bl	80090ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4837      	ldr	r0, [pc, #220]	; (8000fe8 <takeWifiSSID+0x280>)
 8000f0c:	f008 febe 	bl	8009c8c <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d172      	bne.n	8000ffc <takeWifiSSID+0x294>
        	realCharPos--;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	dc01      	bgt.n	8000f26 <takeWifiSSID+0x1be>
        		realCharPos = 80;
 8000f22:	2350      	movs	r3, #80	; 0x50
 8000f24:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <takeWifiSSID+0x260>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d15e      	bne.n	8000fec <takeWifiSSID+0x284>
            	if(page == 1) {
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <takeWifiSSID+0x264>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d10a      	bne.n	8000f4c <takeWifiSSID+0x1e4>
            		cursorPosition = 16;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <takeWifiSSID+0x260>)
 8000f38:	2210      	movs	r2, #16
 8000f3a:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <takeWifiSSID+0x264>)
 8000f3e:	2205      	movs	r2, #5
 8000f40:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000f42:	2105      	movs	r1, #5
 8000f44:	2002      	movs	r0, #2
 8000f46:	f7ff fc33 	bl	80007b0 <printTemplate>
 8000f4a:	e054      	b.n	8000ff6 <takeWifiSSID+0x28e>
            	} else if(page == 2) {
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <takeWifiSSID+0x264>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d10a      	bne.n	8000f6a <takeWifiSSID+0x202>
            		cursorPosition = 16;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <takeWifiSSID+0x260>)
 8000f56:	2210      	movs	r2, #16
 8000f58:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <takeWifiSSID+0x264>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f60:	2101      	movs	r1, #1
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff fc24 	bl	80007b0 <printTemplate>
 8000f68:	e045      	b.n	8000ff6 <takeWifiSSID+0x28e>
            	} else if(page == 3) {
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <takeWifiSSID+0x264>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d10a      	bne.n	8000f88 <takeWifiSSID+0x220>
            		cursorPosition = 16;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <takeWifiSSID+0x260>)
 8000f74:	2210      	movs	r2, #16
 8000f76:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <takeWifiSSID+0x264>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000f7e:	2102      	movs	r1, #2
 8000f80:	2002      	movs	r0, #2
 8000f82:	f7ff fc15 	bl	80007b0 <printTemplate>
 8000f86:	e036      	b.n	8000ff6 <takeWifiSSID+0x28e>
            	} else if(page == 4) {
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <takeWifiSSID+0x264>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d10a      	bne.n	8000fa6 <takeWifiSSID+0x23e>
            		cursorPosition = 16;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <takeWifiSSID+0x260>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <takeWifiSSID+0x264>)
 8000f98:	2203      	movs	r2, #3
 8000f9a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f7ff fc06 	bl	80007b0 <printTemplate>
 8000fa4:	e027      	b.n	8000ff6 <takeWifiSSID+0x28e>
            	} else if(page == 5) {
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <takeWifiSSID+0x264>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d123      	bne.n	8000ff6 <takeWifiSSID+0x28e>
            		cursorPosition = 16;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <takeWifiSSID+0x260>)
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <takeWifiSSID+0x264>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000fba:	2104      	movs	r1, #4
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f7ff fbf7 	bl	80007b0 <printTemplate>
 8000fc2:	e018      	b.n	8000ff6 <takeWifiSSID+0x28e>
 8000fc4:	20000ce0 	.word	0x20000ce0
 8000fc8:	20000944 	.word	0x20000944
 8000fcc:	20000948 	.word	0x20000948
 8000fd0:	40010800 	.word	0x40010800
 8000fd4:	0800d96c 	.word	0x0800d96c
 8000fd8:	0800d958 	.word	0x0800d958
 8000fdc:	200009b2 	.word	0x200009b2
 8000fe0:	20000c38 	.word	0x20000c38
 8000fe4:	20000b54 	.word	0x20000b54
 8000fe8:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000fec:	4b37      	ldr	r3, [pc, #220]	; (80010cc <takeWifiSSID+0x364>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	4a36      	ldr	r2, [pc, #216]	; (80010cc <takeWifiSSID+0x364>)
 8000ff4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000ff6:	20fa      	movs	r0, #250	; 0xfa
 8000ff8:	f008 f878 	bl	80090ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4834      	ldr	r0, [pc, #208]	; (80010d0 <takeWifiSSID+0x368>)
 8001000:	f008 fe44 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d11e      	bne.n	8001048 <takeWifiSSID+0x2e0>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3b01      	subs	r3, #1
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fd44 	bl	8000a9c <getCharFromCursorPosition>
 8001014:	4603      	mov	r3, r0
 8001016:	4619      	mov	r1, r3
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <takeWifiSSID+0x36c>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4413      	add	r3, r2
 800101e:	460a      	mov	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	b2d9      	uxtb	r1, r3
 8001026:	4a2b      	ldr	r2, [pc, #172]	; (80010d4 <takeWifiSSID+0x36c>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fb2e 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001042:	20fa      	movs	r0, #250	; 0xfa
 8001044:	f008 f852 	bl	80090ec <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001048:	2104      	movs	r1, #4
 800104a:	4821      	ldr	r0, [pc, #132]	; (80010d0 <takeWifiSSID+0x368>)
 800104c:	f008 fe1e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d12e      	bne.n	80010b4 <takeWifiSSID+0x34c>
        	if(strlen(wifiSSID) >= 1) {
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <takeWifiSSID+0x36c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d027      	beq.n	80010ae <takeWifiSSID+0x346>
        		wifiSSID[wifiNameLoc] = '\0';
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <takeWifiSSID+0x36c>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4413      	add	r3, r2
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3306      	adds	r3, #6
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4619      	mov	r1, r3
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff fb2e 	bl	80006d4 <lcd_delete_char>
        		HAL_Delay(50);
 8001078:	2032      	movs	r0, #50	; 0x32
 800107a:	f008 f837 	bl	80090ec <HAL_Delay>
        		if(writeLoc > 7) {
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b07      	cmp	r3, #7
 8001082:	dd03      	ble.n	800108c <takeWifiSSID+0x324>
        			writeLoc--;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3b01      	subs	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e004      	b.n	8001096 <takeWifiSSID+0x32e>
        		} else if(writeLoc < 7) {
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b06      	cmp	r3, #6
 8001090:	dc01      	bgt.n	8001096 <takeWifiSSID+0x32e>
        			writeLoc = 7;
 8001092:	2307      	movs	r3, #7
 8001094:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd03      	ble.n	80010a4 <takeWifiSSID+0x33c>
        			wifiNameLoc--;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	3b01      	subs	r3, #1
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	e004      	b.n	80010ae <takeWifiSSID+0x346>
        		} else if(wifiNameLoc < 0) {
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da01      	bge.n	80010ae <takeWifiSSID+0x346>
        			wifiNameLoc = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80010ae:	20fa      	movs	r0, #250	; 0xfa
 80010b0:	f008 f81c 	bl	80090ec <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <takeWifiSSID+0x364>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff fab4 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010c2:	e670      	b.n	8000da6 <takeWifiSSID+0x3e>
    }
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000944 	.word	0x20000944
 80010d0:	40010800 	.word	0x40010800
 80010d4:	20000ce0 	.word	0x20000ce0

080010d8 <takeWifiPass>:

void takeWifiPass(int state) {
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af04      	add	r7, sp, #16
 80010de:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff fb1f 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 80010ec:	2214      	movs	r2, #20
 80010ee:	2100      	movs	r1, #0
 80010f0:	4890      	ldr	r0, [pc, #576]	; (8001334 <takeWifiPass+0x25c>)
 80010f2:	f00b ff0f 	bl	800cf14 <memset>
    }

    int realCharPos = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 80010fa:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <takeWifiPass+0x260>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
    page = 1;
 8001100:	4b8e      	ldr	r3, [pc, #568]	; (800133c <takeWifiPass+0x264>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 800110a:	2307      	movs	r3, #7
 800110c:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 800110e:	2101      	movs	r1, #1
 8001110:	2003      	movs	r0, #3
 8001112:	f7ff fb4d 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001116:	2108      	movs	r1, #8
 8001118:	4889      	ldr	r0, [pc, #548]	; (8001340 <takeWifiPass+0x268>)
 800111a:	f008 fdb7 	bl	8009c8c <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d13b      	bne.n	800119c <takeWifiPass+0xc4>
            lcd_cursor(0);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff fafd 	bl	8000724 <lcd_cursor>

            if(wifiPass[19] == '\0') {
 800112a:	4b82      	ldr	r3, [pc, #520]	; (8001334 <takeWifiPass+0x25c>)
 800112c:	7cdb      	ldrb	r3, [r3, #19]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d110      	bne.n	8001154 <takeWifiPass+0x7c>
                lcd_clear();
 8001132:	f7ff fac5 	bl	80006c0 <lcd_clear>
                lcd_print(1, 1, "PASS 12 KARAKTER");
 8001136:	4a83      	ldr	r2, [pc, #524]	; (8001344 <takeWifiPass+0x26c>)
 8001138:	2101      	movs	r1, #1
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff fa94 	bl	8000668 <lcd_print>
                lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8001140:	4a81      	ldr	r2, [pc, #516]	; (8001348 <takeWifiPass+0x270>)
 8001142:	2101      	movs	r1, #1
 8001144:	2002      	movs	r0, #2
 8001146:	f7ff fa8f 	bl	8000668 <lcd_print>
                HAL_Delay(1200);
 800114a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800114e:	f007 ffcd 	bl	80090ec <HAL_Delay>
                goto mainPASSSection;
 8001152:	e7c5      	b.n	80010e0 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, 20);
 8001154:	4b7d      	ldr	r3, [pc, #500]	; (800134c <takeWifiPass+0x274>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b7d      	ldr	r3, [pc, #500]	; (8001350 <takeWifiPass+0x278>)
 800115c:	4413      	add	r3, r2
 800115e:	4a75      	ldr	r2, [pc, #468]	; (8001334 <takeWifiPass+0x25c>)
 8001160:	461d      	mov	r5, r3
 8001162:	4614      	mov	r4, r2
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	6028      	str	r0, [r5, #0]
 8001168:	6069      	str	r1, [r5, #4]
 800116a:	60aa      	str	r2, [r5, #8]
 800116c:	60eb      	str	r3, [r5, #12]
 800116e:	6820      	ldr	r0, [r4, #0]
 8001170:	6128      	str	r0, [r5, #16]
            HAL_Delay(200);
 8001172:	20c8      	movs	r0, #200	; 0xc8
 8001174:	f007 ffba 	bl	80090ec <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 113, eepromData, 113, 3000);
 8001178:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	2371      	movs	r3, #113	; 0x71
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	4b73      	ldr	r3, [pc, #460]	; (8001350 <takeWifiPass+0x278>)
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2371      	movs	r3, #113	; 0x71
 8001188:	2200      	movs	r2, #0
 800118a:	21a0      	movs	r1, #160	; 0xa0
 800118c:	4871      	ldr	r0, [pc, #452]	; (8001354 <takeWifiPass+0x27c>)
 800118e:	f009 f837 	bl	800a200 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8001192:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001196:	f007 ffa9 	bl	80090ec <HAL_Delay>

            break;
 800119a:	e14b      	b.n	8001434 <takeWifiPass+0x35c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800119c:	2101      	movs	r1, #1
 800119e:	4868      	ldr	r0, [pc, #416]	; (8001340 <takeWifiPass+0x268>)
 80011a0:	f008 fd74 	bl	8009c8c <HAL_GPIO_ReadPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d166      	bne.n	8001278 <takeWifiPass+0x1a0>
        	realCharPos++;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2b50      	cmp	r3, #80	; 0x50
 80011b4:	dd01      	ble.n	80011ba <takeWifiPass+0xe2>
        	    realCharPos = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80011ba:	4b5f      	ldr	r3, [pc, #380]	; (8001338 <takeWifiPass+0x260>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b10      	cmp	r3, #16
 80011c0:	d152      	bne.n	8001268 <takeWifiPass+0x190>
            	if(page == 1) {
 80011c2:	4b5e      	ldr	r3, [pc, #376]	; (800133c <takeWifiPass+0x264>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d10c      	bne.n	80011e4 <takeWifiPass+0x10c>
            		cursorPosition = 1;
 80011ca:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <takeWifiPass+0x260>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
            		page++;
 80011d0:	4b5a      	ldr	r3, [pc, #360]	; (800133c <takeWifiPass+0x264>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a59      	ldr	r2, [pc, #356]	; (800133c <takeWifiPass+0x264>)
 80011d8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80011da:	2102      	movs	r1, #2
 80011dc:	2003      	movs	r0, #3
 80011de:	f7ff fae7 	bl	80007b0 <printTemplate>
 80011e2:	e046      	b.n	8001272 <takeWifiPass+0x19a>
            	} else if(page == 2) {
 80011e4:	4b55      	ldr	r3, [pc, #340]	; (800133c <takeWifiPass+0x264>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d10c      	bne.n	8001206 <takeWifiPass+0x12e>
            		cursorPosition = 1;
 80011ec:	4b52      	ldr	r3, [pc, #328]	; (8001338 <takeWifiPass+0x260>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
            		page++;
 80011f2:	4b52      	ldr	r3, [pc, #328]	; (800133c <takeWifiPass+0x264>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <takeWifiPass+0x264>)
 80011fa:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80011fc:	2103      	movs	r1, #3
 80011fe:	2003      	movs	r0, #3
 8001200:	f7ff fad6 	bl	80007b0 <printTemplate>
 8001204:	e035      	b.n	8001272 <takeWifiPass+0x19a>
            	} else if(page == 3) {
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <takeWifiPass+0x264>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d10c      	bne.n	8001228 <takeWifiPass+0x150>
            		cursorPosition = 1;
 800120e:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <takeWifiPass+0x260>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
            		page++;
 8001214:	4b49      	ldr	r3, [pc, #292]	; (800133c <takeWifiPass+0x264>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a48      	ldr	r2, [pc, #288]	; (800133c <takeWifiPass+0x264>)
 800121c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 800121e:	2104      	movs	r1, #4
 8001220:	2003      	movs	r0, #3
 8001222:	f7ff fac5 	bl	80007b0 <printTemplate>
 8001226:	e024      	b.n	8001272 <takeWifiPass+0x19a>
            	} else if(page == 4) {
 8001228:	4b44      	ldr	r3, [pc, #272]	; (800133c <takeWifiPass+0x264>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b04      	cmp	r3, #4
 800122e:	d10c      	bne.n	800124a <takeWifiPass+0x172>
            		cursorPosition = 1;
 8001230:	4b41      	ldr	r3, [pc, #260]	; (8001338 <takeWifiPass+0x260>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
            		page++;
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <takeWifiPass+0x264>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a3f      	ldr	r2, [pc, #252]	; (800133c <takeWifiPass+0x264>)
 800123e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001240:	2105      	movs	r1, #5
 8001242:	2003      	movs	r0, #3
 8001244:	f7ff fab4 	bl	80007b0 <printTemplate>
 8001248:	e013      	b.n	8001272 <takeWifiPass+0x19a>
            	} else if(page == 5) {
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <takeWifiPass+0x264>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d10f      	bne.n	8001272 <takeWifiPass+0x19a>
            		cursorPosition = 1;
 8001252:	4b39      	ldr	r3, [pc, #228]	; (8001338 <takeWifiPass+0x260>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <takeWifiPass+0x264>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800125e:	2101      	movs	r1, #1
 8001260:	2003      	movs	r0, #3
 8001262:	f7ff faa5 	bl	80007b0 <printTemplate>
 8001266:	e004      	b.n	8001272 <takeWifiPass+0x19a>
            	}
            } else {
            	cursorPosition++;
 8001268:	4b33      	ldr	r3, [pc, #204]	; (8001338 <takeWifiPass+0x260>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <takeWifiPass+0x260>)
 8001270:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001272:	20fa      	movs	r0, #250	; 0xfa
 8001274:	f007 ff3a 	bl	80090ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001278:	2108      	movs	r1, #8
 800127a:	4837      	ldr	r0, [pc, #220]	; (8001358 <takeWifiPass+0x280>)
 800127c:	f008 fd06 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d172      	bne.n	800136c <takeWifiPass+0x294>
        	realCharPos--;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3b01      	subs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	dc01      	bgt.n	8001296 <takeWifiPass+0x1be>
        	    realCharPos = 80;
 8001292:	2350      	movs	r3, #80	; 0x50
 8001294:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <takeWifiPass+0x260>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d15e      	bne.n	800135c <takeWifiPass+0x284>
            	if(page == 1) {
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <takeWifiPass+0x264>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d10a      	bne.n	80012bc <takeWifiPass+0x1e4>
            		cursorPosition = 16;
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <takeWifiPass+0x260>)
 80012a8:	2210      	movs	r2, #16
 80012aa:	601a      	str	r2, [r3, #0]
            		page = 5;
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <takeWifiPass+0x264>)
 80012ae:	2205      	movs	r2, #5
 80012b0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80012b2:	2105      	movs	r1, #5
 80012b4:	2003      	movs	r0, #3
 80012b6:	f7ff fa7b 	bl	80007b0 <printTemplate>
 80012ba:	e054      	b.n	8001366 <takeWifiPass+0x28e>
            	} else if(page == 2) {
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <takeWifiPass+0x264>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d10a      	bne.n	80012da <takeWifiPass+0x202>
            		cursorPosition = 16;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <takeWifiPass+0x260>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	601a      	str	r2, [r3, #0]
            		page = 1;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <takeWifiPass+0x264>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80012d0:	2101      	movs	r1, #1
 80012d2:	2003      	movs	r0, #3
 80012d4:	f7ff fa6c 	bl	80007b0 <printTemplate>
 80012d8:	e045      	b.n	8001366 <takeWifiPass+0x28e>
            	} else if(page == 3) {
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <takeWifiPass+0x264>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d10a      	bne.n	80012f8 <takeWifiPass+0x220>
            		cursorPosition = 16;
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <takeWifiPass+0x260>)
 80012e4:	2210      	movs	r2, #16
 80012e6:	601a      	str	r2, [r3, #0]
            		page = 2;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <takeWifiPass+0x264>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80012ee:	2102      	movs	r1, #2
 80012f0:	2003      	movs	r0, #3
 80012f2:	f7ff fa5d 	bl	80007b0 <printTemplate>
 80012f6:	e036      	b.n	8001366 <takeWifiPass+0x28e>
            	} else if(page == 4) {
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <takeWifiPass+0x264>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d10a      	bne.n	8001316 <takeWifiPass+0x23e>
            		cursorPosition = 16;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <takeWifiPass+0x260>)
 8001302:	2210      	movs	r2, #16
 8001304:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <takeWifiPass+0x264>)
 8001308:	2203      	movs	r2, #3
 800130a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800130c:	2103      	movs	r1, #3
 800130e:	2003      	movs	r0, #3
 8001310:	f7ff fa4e 	bl	80007b0 <printTemplate>
 8001314:	e027      	b.n	8001366 <takeWifiPass+0x28e>
            	} else if(page == 5) {
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <takeWifiPass+0x264>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d123      	bne.n	8001366 <takeWifiPass+0x28e>
            		cursorPosition = 16;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <takeWifiPass+0x260>)
 8001320:	2210      	movs	r2, #16
 8001322:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <takeWifiPass+0x264>)
 8001326:	2204      	movs	r2, #4
 8001328:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800132a:	2104      	movs	r1, #4
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fa3f 	bl	80007b0 <printTemplate>
 8001332:	e018      	b.n	8001366 <takeWifiPass+0x28e>
 8001334:	20000cf4 	.word	0x20000cf4
 8001338:	20000944 	.word	0x20000944
 800133c:	20000948 	.word	0x20000948
 8001340:	40010800 	.word	0x40010800
 8001344:	0800d980 	.word	0x0800d980
 8001348:	0800d958 	.word	0x0800d958
 800134c:	200009b3 	.word	0x200009b3
 8001350:	20000c38 	.word	0x20000c38
 8001354:	20000b54 	.word	0x20000b54
 8001358:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800135c:	4b37      	ldr	r3, [pc, #220]	; (800143c <takeWifiPass+0x364>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	4a36      	ldr	r2, [pc, #216]	; (800143c <takeWifiPass+0x364>)
 8001364:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001366:	20fa      	movs	r0, #250	; 0xfa
 8001368:	f007 fec0 	bl	80090ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800136c:	2102      	movs	r1, #2
 800136e:	4834      	ldr	r0, [pc, #208]	; (8001440 <takeWifiPass+0x368>)
 8001370:	f008 fc8c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	d11e      	bne.n	80013b8 <takeWifiPass+0x2e0>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3b01      	subs	r3, #1
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fb8c 	bl	8000a9c <getCharFromCursorPosition>
 8001384:	4603      	mov	r3, r0
 8001386:	4619      	mov	r1, r3
 8001388:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <takeWifiPass+0x36c>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4413      	add	r3, r2
 800138e:	460a      	mov	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	b2d9      	uxtb	r1, r3
 8001396:	4a2b      	ldr	r2, [pc, #172]	; (8001444 <takeWifiPass+0x36c>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff f976 	bl	8000692 <lcd_print_char>

            writeLoc++;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	3301      	adds	r3, #1
 80013b0:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 80013b2:	20fa      	movs	r0, #250	; 0xfa
 80013b4:	f007 fe9a 	bl	80090ec <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80013b8:	2104      	movs	r1, #4
 80013ba:	4821      	ldr	r0, [pc, #132]	; (8001440 <takeWifiPass+0x368>)
 80013bc:	f008 fc66 	bl	8009c8c <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d12e      	bne.n	8001424 <takeWifiPass+0x34c>
            if(strlen(wifiPass) >= 1) {
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <takeWifiPass+0x36c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d027      	beq.n	800141e <takeWifiPass+0x346>
            	wifiPass[wifiPassLoc] = '\0';
 80013ce:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <takeWifiPass+0x36c>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	3306      	adds	r3, #6
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4619      	mov	r1, r3
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff f976 	bl	80006d4 <lcd_delete_char>
            	HAL_Delay(50);
 80013e8:	2032      	movs	r0, #50	; 0x32
 80013ea:	f007 fe7f 	bl	80090ec <HAL_Delay>

            	if(writeLoc > 7) {
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	dd03      	ble.n	80013fc <takeWifiPass+0x324>
            		writeLoc--;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e004      	b.n	8001406 <takeWifiPass+0x32e>
            	} else if(writeLoc < 7) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b06      	cmp	r3, #6
 8001400:	dc01      	bgt.n	8001406 <takeWifiPass+0x32e>
            		writeLoc = 7;
 8001402:	2307      	movs	r3, #7
 8001404:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	2b00      	cmp	r3, #0
 800140a:	dd03      	ble.n	8001414 <takeWifiPass+0x33c>
            		wifiPassLoc--;
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	3b01      	subs	r3, #1
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	e004      	b.n	800141e <takeWifiPass+0x346>
            	} else if(wifiPassLoc < 0) {
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	da01      	bge.n	800141e <takeWifiPass+0x346>
            		wifiPassLoc = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 800141e:	20fa      	movs	r0, #250	; 0xfa
 8001420:	f007 fe64 	bl	80090ec <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <takeWifiPass+0x364>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	2002      	movs	r0, #2
 800142e:	f7ff f8fc 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001432:	e670      	b.n	8001116 <takeWifiPass+0x3e>
    }
}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	20000944 	.word	0x20000944
 8001440:	40010800 	.word	0x40010800
 8001444:	20000cf4 	.word	0x20000cf4

08001448 <checkSlideVal>:

int checkSlideVal(int state) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d111      	bne.n	800147a <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001456:	2101      	movs	r1, #1
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <checkSlideVal+0x60>)
 800145a:	f008 fc17 	bl	8009c8c <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <checkSlideVal+0x20>
			return 34;
 8001464:	2322      	movs	r3, #34	; 0x22
 8001466:	e01b      	b.n	80014a0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001468:	2108      	movs	r1, #8
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <checkSlideVal+0x64>)
 800146c:	f008 fc0e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d113      	bne.n	800149e <checkSlideVal+0x56>
			return 32;
 8001476:	2320      	movs	r3, #32
 8001478:	e012      	b.n	80014a0 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800147a:	2101      	movs	r1, #1
 800147c:	480a      	ldr	r0, [pc, #40]	; (80014a8 <checkSlideVal+0x60>)
 800147e:	f008 fc05 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <checkSlideVal+0x44>
			return 35;
 8001488:	2323      	movs	r3, #35	; 0x23
 800148a:	e009      	b.n	80014a0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800148c:	2108      	movs	r1, #8
 800148e:	4807      	ldr	r0, [pc, #28]	; (80014ac <checkSlideVal+0x64>)
 8001490:	f008 fbfc 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <checkSlideVal+0x56>
			return 33;
 800149a:	2321      	movs	r3, #33	; 0x21
 800149c:	e000      	b.n	80014a0 <checkSlideVal+0x58>
		}
	}
	return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40011000 	.word	0x40011000

080014b0 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7fe feb0 	bl	8000224 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80014cc:	e08a      	b.n	80015e4 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80014ce:	6838      	ldr	r0, [r7, #0]
 80014d0:	f7ff ffba 	bl	8001448 <checkSlideVal>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dd07      	ble.n	80014ea <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80014da:	6838      	ldr	r0, [r7, #0]
 80014dc:	f7ff ffb4 	bl	8001448 <checkSlideVal>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <slideText+0x148>)
 80014e6:	701a      	strb	r2, [r3, #0]
			break;
 80014e8:	e081      	b.n	80015ee <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	e075      	b.n	80015dc <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80014f0:	6838      	ldr	r0, [r7, #0]
 80014f2:	f7ff ffa9 	bl	8001448 <checkSlideVal>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dd09      	ble.n	8001510 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f7ff ffa3 	bl	8001448 <checkSlideVal>
 8001502:	4603      	mov	r3, r0
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <slideText+0x148>)
 8001508:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800150e:	e069      	b.n	80015e4 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	4413      	add	r3, r2
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	e029      	b.n	800156e <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f7ff ff94 	bl	8001448 <checkSlideVal>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	dd0b      	ble.n	800153e <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f7ff ff8e 	bl	8001448 <checkSlideVal>
 800152c:	4603      	mov	r3, r0
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <slideText+0x148>)
 8001532:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800153c:	e01d      	b.n	800157a <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b2d9      	uxtb	r1, r3
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f7ff f898 	bl	8000692 <lcd_print_char>
				HAL_Delay(30);
 8001562:	201e      	movs	r0, #30
 8001564:	f007 fdc2 	bl	80090ec <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	3301      	adds	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	7dfa      	ldrb	r2, [r7, #23]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4413      	add	r3, r2
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	429a      	cmp	r2, r3
 8001578:	dbcf      	blt.n	800151a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	3b01      	subs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	e023      	b.n	80015ca <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f7ff ff60 	bl	8001448 <checkSlideVal>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd0b      	ble.n	80015a6 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f7ff ff5a 	bl	8001448 <checkSlideVal>
 8001594:	4603      	mov	r3, r0
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <slideText+0x148>)
 800159a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015a4:	e017      	b.n	80015d6 <slideText+0x126>
				}
			     if(j >= startPos) {
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	db0a      	blt.n	80015c4 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	b2d1      	uxtb	r1, r2
 80015b6:	2220      	movs	r2, #32
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f86a 	bl	8000692 <lcd_print_char>
			    	 HAL_Delay(30);
 80015be:	201e      	movs	r0, #30
 80015c0:	f007 fd94 	bl	80090ec <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	7dfa      	ldrb	r2, [r7, #23]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dad5      	bge.n	8001582 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	3301      	adds	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	6a3a      	ldr	r2, [r7, #32]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	db85      	blt.n	80014f0 <slideText+0x40>
	while(mainLoopVal == 1) {
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	f43f af71 	beq.w	80014ce <slideText+0x1e>
			     }
			}
		}
	}
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000d0c 	.word	0x20000d0c

080015fc <menu>:

void menu() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001600:	2101      	movs	r1, #1
 8001602:	488f      	ldr	r0, [pc, #572]	; (8001840 <menu+0x244>)
 8001604:	f008 fb42 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	f040 808e 	bne.w	800172c <menu+0x130>
 8001610:	4b8c      	ldr	r3, [pc, #560]	; (8001844 <menu+0x248>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8086 	beq.w	800172c <menu+0x130>
		menuSayac = menuSayac+1;
 8001620:	4b89      	ldr	r3, [pc, #548]	; (8001848 <menu+0x24c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b87      	ldr	r3, [pc, #540]	; (8001848 <menu+0x24c>)
 800162a:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800162c:	4b86      	ldr	r3, [pc, #536]	; (8001848 <menu+0x24c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b24      	cmp	r3, #36	; 0x24
 8001632:	d102      	bne.n	800163a <menu+0x3e>
			menuSayac = 1;
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <menu+0x24c>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800163a:	4b83      	ldr	r3, [pc, #524]	; (8001848 <menu+0x24c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b12      	cmp	r3, #18
 8001640:	d106      	bne.n	8001650 <menu+0x54>
 8001642:	4b82      	ldr	r3, [pc, #520]	; (800184c <menu+0x250>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <menu+0x54>
			menuSayac = 21;
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <menu+0x24c>)
 800164c:	2215      	movs	r2, #21
 800164e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001650:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <menu+0x24c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d106      	bne.n	8001666 <menu+0x6a>
 8001658:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <menu+0x254>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <menu+0x6a>
			menuSayac = 16;
 8001660:	4b79      	ldr	r3, [pc, #484]	; (8001848 <menu+0x24c>)
 8001662:	2210      	movs	r2, #16
 8001664:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001666:	4b78      	ldr	r3, [pc, #480]	; (8001848 <menu+0x24c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b0d      	cmp	r3, #13
 800166c:	d106      	bne.n	800167c <menu+0x80>
 800166e:	4b78      	ldr	r3, [pc, #480]	; (8001850 <menu+0x254>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d102      	bne.n	800167c <menu+0x80>
			menuSayac = 16;
 8001676:	4b74      	ldr	r3, [pc, #464]	; (8001848 <menu+0x24c>)
 8001678:	2210      	movs	r2, #16
 800167a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800167c:	4b72      	ldr	r3, [pc, #456]	; (8001848 <menu+0x24c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b09      	cmp	r3, #9
 8001682:	d106      	bne.n	8001692 <menu+0x96>
 8001684:	4b72      	ldr	r3, [pc, #456]	; (8001850 <menu+0x254>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d102      	bne.n	8001692 <menu+0x96>
			menuSayac = 13;
 800168c:	4b6e      	ldr	r3, [pc, #440]	; (8001848 <menu+0x24c>)
 800168e:	220d      	movs	r2, #13
 8001690:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001692:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <menu+0x24c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d10a      	bne.n	80016b0 <menu+0xb4>
 800169a:	4b6e      	ldr	r3, [pc, #440]	; (8001854 <menu+0x258>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d003      	beq.n	80016aa <menu+0xae>
 80016a2:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <menu+0x258>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d102      	bne.n	80016b0 <menu+0xb4>
			menuSayac = 11;
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <menu+0x24c>)
 80016ac:	220b      	movs	r2, #11
 80016ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80016b0:	4b65      	ldr	r3, [pc, #404]	; (8001848 <menu+0x24c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	d10e      	bne.n	80016d6 <menu+0xda>
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <menu+0x25c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d003      	beq.n	80016c8 <menu+0xcc>
 80016c0:	4b65      	ldr	r3, [pc, #404]	; (8001858 <menu+0x25c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d106      	bne.n	80016d6 <menu+0xda>
 80016c8:	4b61      	ldr	r3, [pc, #388]	; (8001850 <menu+0x254>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d102      	bne.n	80016d6 <menu+0xda>
			menuSayac = 16;
 80016d0:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <menu+0x24c>)
 80016d2:	2210      	movs	r2, #16
 80016d4:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80016d6:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <menu+0x24c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d10e      	bne.n	80016fc <menu+0x100>
 80016de:	4b5e      	ldr	r3, [pc, #376]	; (8001858 <menu+0x25c>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d003      	beq.n	80016ee <menu+0xf2>
 80016e6:	4b5c      	ldr	r3, [pc, #368]	; (8001858 <menu+0x25c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d106      	bne.n	80016fc <menu+0x100>
 80016ee:	4b58      	ldr	r3, [pc, #352]	; (8001850 <menu+0x254>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d102      	bne.n	80016fc <menu+0x100>
			menuSayac = 13;
 80016f6:	4b54      	ldr	r3, [pc, #336]	; (8001848 <menu+0x24c>)
 80016f8:	220d      	movs	r2, #13
 80016fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016fc:	4b52      	ldr	r3, [pc, #328]	; (8001848 <menu+0x24c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d106      	bne.n	8001712 <menu+0x116>
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <menu+0x260>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d102      	bne.n	8001712 <menu+0x116>
			menuSayac = 16;
 800170c:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <menu+0x24c>)
 800170e:	2210      	movs	r2, #16
 8001710:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001712:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <menu+0x24c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b18      	cmp	r3, #24
 8001718:	d106      	bne.n	8001728 <menu+0x12c>
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <menu+0x250>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <menu+0x12c>
			menuSayac = 26;
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <menu+0x24c>)
 8001724:	221a      	movs	r2, #26
 8001726:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001728:	f004 fd0e 	bl	8006148 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800172c:	2108      	movs	r1, #8
 800172e:	484c      	ldr	r0, [pc, #304]	; (8001860 <menu+0x264>)
 8001730:	f008 faac 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	2b01      	cmp	r3, #1
 8001738:	d175      	bne.n	8001826 <menu+0x22a>
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <menu+0x248>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d06e      	beq.n	8001826 <menu+0x22a>
		if (menuSayac <= 1) {
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <menu+0x24c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d802      	bhi.n	8001756 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <menu+0x24c>)
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <menu+0x24c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3b01      	subs	r3, #1
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <menu+0x24c>)
 8001760:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <menu+0x24c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b14      	cmp	r3, #20
 8001768:	d106      	bne.n	8001778 <menu+0x17c>
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <menu+0x250>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <menu+0x17c>
			menuSayac = 17;
 8001772:	4b35      	ldr	r3, [pc, #212]	; (8001848 <menu+0x24c>)
 8001774:	2211      	movs	r2, #17
 8001776:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <menu+0x24c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d106      	bne.n	800178e <menu+0x192>
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <menu+0x254>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <menu+0x192>
			menuSayac = 7;
 8001788:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <menu+0x24c>)
 800178a:	2207      	movs	r2, #7
 800178c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <menu+0x24c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0f      	cmp	r3, #15
 8001794:	d106      	bne.n	80017a4 <menu+0x1a8>
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <menu+0x254>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <menu+0x1a8>
			menuSayac = 12;
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <menu+0x24c>)
 80017a0:	220c      	movs	r2, #12
 80017a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <menu+0x24c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	d106      	bne.n	80017ba <menu+0x1be>
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <menu+0x254>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d102      	bne.n	80017ba <menu+0x1be>
			menuSayac = 8;
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <menu+0x24c>)
 80017b6:	2208      	movs	r2, #8
 80017b8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <menu+0x24c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b0a      	cmp	r3, #10
 80017c0:	d10a      	bne.n	80017d8 <menu+0x1dc>
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <menu+0x258>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d003      	beq.n	80017d2 <menu+0x1d6>
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <menu+0x258>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d102      	bne.n	80017d8 <menu+0x1dc>
			menuSayac = 9;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <menu+0x24c>)
 80017d4:	2209      	movs	r2, #9
 80017d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <menu+0x24c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	d10a      	bne.n	80017f6 <menu+0x1fa>
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <menu+0x25c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d003      	beq.n	80017f0 <menu+0x1f4>
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <menu+0x25c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d102      	bne.n	80017f6 <menu+0x1fa>
			menuSayac = 11;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <menu+0x24c>)
 80017f2:	220b      	movs	r2, #11
 80017f4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <menu+0x24c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d106      	bne.n	800180c <menu+0x210>
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <menu+0x260>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d102      	bne.n	800180c <menu+0x210>
			menuSayac = 14;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <menu+0x24c>)
 8001808:	220e      	movs	r2, #14
 800180a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <menu+0x24c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b19      	cmp	r3, #25
 8001812:	d106      	bne.n	8001822 <menu+0x226>
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <menu+0x250>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <menu+0x226>
			menuSayac = 23;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <menu+0x24c>)
 800181e:	2217      	movs	r2, #23
 8001820:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001822:	f004 fc91 	bl	8006148 <bekle>
	}

	if (menuSayac == 0) {
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <menu+0x24c>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d134      	bne.n	8001898 <menu+0x29c>
		if(dilSecim == 0) {
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <menu+0x268>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d122      	bne.n	800187c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001836:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <menu+0x26c>)
 8001838:	2101      	movs	r1, #1
 800183a:	2001      	movs	r0, #1
 800183c:	e016      	b.n	800186c <menu+0x270>
 800183e:	bf00      	nop
 8001840:	40010800 	.word	0x40010800
 8001844:	20000d3b 	.word	0x20000d3b
 8001848:	20000d0c 	.word	0x20000d0c
 800184c:	20000d1b 	.word	0x20000d1b
 8001850:	20000d14 	.word	0x20000d14
 8001854:	20000d15 	.word	0x20000d15
 8001858:	20000d16 	.word	0x20000d16
 800185c:	20000d17 	.word	0x20000d17
 8001860:	40011000 	.word	0x40011000
 8001864:	20000d2d 	.word	0x20000d2d
 8001868:	0800d994 	.word	0x0800d994
 800186c:	f7fe fefc 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001870:	4a94      	ldr	r2, [pc, #592]	; (8001ac4 <menu+0x4c8>)
 8001872:	2101      	movs	r1, #1
 8001874:	2002      	movs	r0, #2
 8001876:	f7fe fef7 	bl	8000668 <lcd_print>
 800187a:	e00d      	b.n	8001898 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800187c:	4b92      	ldr	r3, [pc, #584]	; (8001ac8 <menu+0x4cc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d109      	bne.n	8001898 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001884:	4a91      	ldr	r2, [pc, #580]	; (8001acc <menu+0x4d0>)
 8001886:	2101      	movs	r1, #1
 8001888:	2001      	movs	r0, #1
 800188a:	f7fe feed 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800188e:	4a90      	ldr	r2, [pc, #576]	; (8001ad0 <menu+0x4d4>)
 8001890:	2101      	movs	r1, #1
 8001892:	2002      	movs	r0, #2
 8001894:	f7fe fee8 	bl	8000668 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001898:	4b8e      	ldr	r3, [pc, #568]	; (8001ad4 <menu+0x4d8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 82b5 	bne.w	8001e0c <menu+0x810>
		if(dilSecim == 0) {
 80018a2:	4b89      	ldr	r3, [pc, #548]	; (8001ac8 <menu+0x4cc>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80018aa:	4a8b      	ldr	r2, [pc, #556]	; (8001ad8 <menu+0x4dc>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7fe feda 	bl	8000668 <lcd_print>
 80018b4:	e008      	b.n	80018c8 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80018b6:	4b84      	ldr	r3, [pc, #528]	; (8001ac8 <menu+0x4cc>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d104      	bne.n	80018c8 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80018be:	4a87      	ldr	r2, [pc, #540]	; (8001adc <menu+0x4e0>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7fe fed0 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80018c8:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <menu+0x4e4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d123      	bne.n	8001918 <menu+0x31c>
			if(dilSecim == 0) {
 80018d0:	4b7d      	ldr	r3, [pc, #500]	; (8001ac8 <menu+0x4cc>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80018d8:	4a82      	ldr	r2, [pc, #520]	; (8001ae4 <menu+0x4e8>)
 80018da:	2101      	movs	r1, #1
 80018dc:	2002      	movs	r0, #2
 80018de:	f7fe fec3 	bl	8000668 <lcd_print>
 80018e2:	e008      	b.n	80018f6 <menu+0x2fa>

			} else if(dilSecim == 1) {
 80018e4:	4b78      	ldr	r3, [pc, #480]	; (8001ac8 <menu+0x4cc>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d104      	bne.n	80018f6 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80018ec:	4a7e      	ldr	r2, [pc, #504]	; (8001ae8 <menu+0x4ec>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	2002      	movs	r0, #2
 80018f2:	f7fe feb9 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80018f6:	4a7d      	ldr	r2, [pc, #500]	; (8001aec <menu+0x4f0>)
 80018f8:	210f      	movs	r1, #15
 80018fa:	2002      	movs	r0, #2
 80018fc:	f7fe feb4 	bl	8000668 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001900:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <menu+0x4f4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	220a      	movs	r2, #10
 8001906:	497b      	ldr	r1, [pc, #492]	; (8001af4 <menu+0x4f8>)
 8001908:	4618      	mov	r0, r3
 800190a:	f00b f9eb 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 800190e:	4a79      	ldr	r2, [pc, #484]	; (8001af4 <menu+0x4f8>)
 8001910:	210e      	movs	r1, #14
 8001912:	2002      	movs	r0, #2
 8001914:	f7fe fea8 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001918:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <menu+0x4e4>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d123      	bne.n	8001968 <menu+0x36c>
			if(dilSecim == 0) {
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <menu+0x4cc>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001928:	4a73      	ldr	r2, [pc, #460]	; (8001af8 <menu+0x4fc>)
 800192a:	2101      	movs	r1, #1
 800192c:	2002      	movs	r0, #2
 800192e:	f7fe fe9b 	bl	8000668 <lcd_print>
 8001932:	e008      	b.n	8001946 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001934:	4b64      	ldr	r3, [pc, #400]	; (8001ac8 <menu+0x4cc>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d104      	bne.n	8001946 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 800193c:	4a6f      	ldr	r2, [pc, #444]	; (8001afc <menu+0x500>)
 800193e:	2101      	movs	r1, #1
 8001940:	2002      	movs	r0, #2
 8001942:	f7fe fe91 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001946:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <menu+0x504>)
 8001948:	210f      	movs	r1, #15
 800194a:	2002      	movs	r0, #2
 800194c:	f7fe fe8c 	bl	8000668 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001950:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <menu+0x508>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	220a      	movs	r2, #10
 8001956:	4967      	ldr	r1, [pc, #412]	; (8001af4 <menu+0x4f8>)
 8001958:	4618      	mov	r0, r3
 800195a:	f00b f9c3 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 800195e:	4a65      	ldr	r2, [pc, #404]	; (8001af4 <menu+0x4f8>)
 8001960:	210e      	movs	r1, #14
 8001962:	2002      	movs	r0, #2
 8001964:	f7fe fe80 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <menu+0x4e4>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <menu+0x3bc>
			if(dilSecim == 0) {
 8001970:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <menu+0x4cc>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001978:	4a63      	ldr	r2, [pc, #396]	; (8001b08 <menu+0x50c>)
 800197a:	2101      	movs	r1, #1
 800197c:	2002      	movs	r0, #2
 800197e:	f7fe fe73 	bl	8000668 <lcd_print>
 8001982:	e008      	b.n	8001996 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <menu+0x4cc>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d104      	bne.n	8001996 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 800198c:	4a5f      	ldr	r2, [pc, #380]	; (8001b0c <menu+0x510>)
 800198e:	2101      	movs	r1, #1
 8001990:	2002      	movs	r0, #2
 8001992:	f7fe fe69 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001996:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <menu+0x504>)
 8001998:	210f      	movs	r1, #15
 800199a:	2002      	movs	r0, #2
 800199c:	f7fe fe64 	bl	8000668 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80019a0:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <menu+0x514>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	220a      	movs	r2, #10
 80019a6:	4953      	ldr	r1, [pc, #332]	; (8001af4 <menu+0x4f8>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00b f99b 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 80019ae:	4a51      	ldr	r2, [pc, #324]	; (8001af4 <menu+0x4f8>)
 80019b0:	210e      	movs	r1, #14
 80019b2:	2002      	movs	r0, #2
 80019b4:	f7fe fe58 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80019b8:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <menu+0x4e4>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d123      	bne.n	8001a08 <menu+0x40c>
			if(dilSecim == 0) {
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <menu+0x4cc>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <menu+0x518>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	2002      	movs	r0, #2
 80019ce:	f7fe fe4b 	bl	8000668 <lcd_print>
 80019d2:	e008      	b.n	80019e6 <menu+0x3ea>
			} else if(dilSecim == 1) {
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <menu+0x4cc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d104      	bne.n	80019e6 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80019dc:	4a4e      	ldr	r2, [pc, #312]	; (8001b18 <menu+0x51c>)
 80019de:	2101      	movs	r1, #1
 80019e0:	2002      	movs	r0, #2
 80019e2:	f7fe fe41 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019e6:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <menu+0x504>)
 80019e8:	210f      	movs	r1, #15
 80019ea:	2002      	movs	r0, #2
 80019ec:	f7fe fe3c 	bl	8000668 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80019f0:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <menu+0x520>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	220a      	movs	r2, #10
 80019f6:	493f      	ldr	r1, [pc, #252]	; (8001af4 <menu+0x4f8>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00b f973 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 80019fe:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <menu+0x4f8>)
 8001a00:	210e      	movs	r1, #14
 8001a02:	2002      	movs	r0, #2
 8001a04:	f7fe fe30 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001a08:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <menu+0x4e4>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d123      	bne.n	8001a58 <menu+0x45c>
			if(dilSecim == 0) {
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <menu+0x4cc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001a18:	4a41      	ldr	r2, [pc, #260]	; (8001b20 <menu+0x524>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7fe fe23 	bl	8000668 <lcd_print>
 8001a22:	e008      	b.n	8001a36 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <menu+0x4cc>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d104      	bne.n	8001a36 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001a2c:	4a3d      	ldr	r2, [pc, #244]	; (8001b24 <menu+0x528>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	2002      	movs	r0, #2
 8001a32:	f7fe fe19 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a36:	4a32      	ldr	r2, [pc, #200]	; (8001b00 <menu+0x504>)
 8001a38:	210f      	movs	r1, #15
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f7fe fe14 	bl	8000668 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <menu+0x52c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	220a      	movs	r2, #10
 8001a46:	492b      	ldr	r1, [pc, #172]	; (8001af4 <menu+0x4f8>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f00b f94b 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 8001a4e:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <menu+0x4f8>)
 8001a50:	210e      	movs	r1, #14
 8001a52:	2002      	movs	r0, #2
 8001a54:	f7fe fe08 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <menu+0x4e4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d123      	bne.n	8001aa8 <menu+0x4ac>
			if(dilSecim == 0) {
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <menu+0x4cc>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001a68:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <menu+0x530>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7fe fdfb 	bl	8000668 <lcd_print>
 8001a72:	e008      	b.n	8001a86 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <menu+0x4cc>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d104      	bne.n	8001a86 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001a7c:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <menu+0x534>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7fe fdf1 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <menu+0x504>)
 8001a88:	210f      	movs	r1, #15
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f7fe fdec 	bl	8000668 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <menu+0x538>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	220a      	movs	r2, #10
 8001a96:	4917      	ldr	r1, [pc, #92]	; (8001af4 <menu+0x4f8>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00b f923 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <menu+0x4f8>)
 8001aa0:	210e      	movs	r1, #14
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7fe fde0 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <menu+0x4e4>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d15f      	bne.n	8001b70 <menu+0x574>
			if(dilSecim == 0) {
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <menu+0x4cc>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d141      	bne.n	8001b3c <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001ab8:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <menu+0x53c>)
 8001aba:	2101      	movs	r1, #1
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7fe fdd3 	bl	8000668 <lcd_print>
 8001ac2:	e044      	b.n	8001b4e <menu+0x552>
 8001ac4:	0800d9a8 	.word	0x0800d9a8
 8001ac8:	20000d2d 	.word	0x20000d2d
 8001acc:	0800d9bc 	.word	0x0800d9bc
 8001ad0:	0800d9d0 	.word	0x0800d9d0
 8001ad4:	20000d0c 	.word	0x20000d0c
 8001ad8:	0800d9e4 	.word	0x0800d9e4
 8001adc:	0800d9f8 	.word	0x0800d9f8
 8001ae0:	20000d0e 	.word	0x20000d0e
 8001ae4:	0800da0c 	.word	0x0800da0c
 8001ae8:	0800da1c 	.word	0x0800da1c
 8001aec:	0800da2c 	.word	0x0800da2c
 8001af0:	20000d2e 	.word	0x20000d2e
 8001af4:	20000cac 	.word	0x20000cac
 8001af8:	0800da30 	.word	0x0800da30
 8001afc:	0800da40 	.word	0x0800da40
 8001b00:	0800da50 	.word	0x0800da50
 8001b04:	20000d2f 	.word	0x20000d2f
 8001b08:	0800da54 	.word	0x0800da54
 8001b0c:	0800da64 	.word	0x0800da64
 8001b10:	20000d30 	.word	0x20000d30
 8001b14:	0800da74 	.word	0x0800da74
 8001b18:	0800da84 	.word	0x0800da84
 8001b1c:	20000d31 	.word	0x20000d31
 8001b20:	0800da94 	.word	0x0800da94
 8001b24:	0800daa4 	.word	0x0800daa4
 8001b28:	20000d32 	.word	0x20000d32
 8001b2c:	0800dab4 	.word	0x0800dab4
 8001b30:	0800dac4 	.word	0x0800dac4
 8001b34:	20000d33 	.word	0x20000d33
 8001b38:	0800dad4 	.word	0x0800dad4
			} else if(dilSecim == 1) {
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <menu+0x680>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d104      	bne.n	8001b4e <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001b44:	4a4e      	ldr	r2, [pc, #312]	; (8001c80 <menu+0x684>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f7fe fd8d 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b4e:	4a4d      	ldr	r2, [pc, #308]	; (8001c84 <menu+0x688>)
 8001b50:	210f      	movs	r1, #15
 8001b52:	2002      	movs	r0, #2
 8001b54:	f7fe fd88 	bl	8000668 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001b58:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <menu+0x68c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	220a      	movs	r2, #10
 8001b5e:	494b      	ldr	r1, [pc, #300]	; (8001c8c <menu+0x690>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00b f8bf 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 8001b66:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <menu+0x690>)
 8001b68:	210e      	movs	r1, #14
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f7fe fd7c 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001b70:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <menu+0x694>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b07      	cmp	r3, #7
 8001b76:	d123      	bne.n	8001bc0 <menu+0x5c4>
			if(dilSecim == 0) {
 8001b78:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <menu+0x680>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001b80:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <menu+0x698>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	2002      	movs	r0, #2
 8001b86:	f7fe fd6f 	bl	8000668 <lcd_print>
 8001b8a:	e008      	b.n	8001b9e <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <menu+0x680>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d104      	bne.n	8001b9e <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001b94:	4a40      	ldr	r2, [pc, #256]	; (8001c98 <menu+0x69c>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7fe fd65 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b9e:	4a39      	ldr	r2, [pc, #228]	; (8001c84 <menu+0x688>)
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f7fe fd60 	bl	8000668 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001ba8:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <menu+0x6a0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	220a      	movs	r2, #10
 8001bae:	4937      	ldr	r1, [pc, #220]	; (8001c8c <menu+0x690>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00b f897 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 8001bb6:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <menu+0x690>)
 8001bb8:	210e      	movs	r1, #14
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f7fe fd54 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <menu+0x694>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d123      	bne.n	8001c10 <menu+0x614>
			if(dilSecim == 0) {
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <menu+0x680>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001bd0:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <menu+0x6a4>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f7fe fd47 	bl	8000668 <lcd_print>
 8001bda:	e008      	b.n	8001bee <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <menu+0x680>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d104      	bne.n	8001bee <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001be4:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <menu+0x6a8>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2002      	movs	r0, #2
 8001bea:	f7fe fd3d 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <menu+0x688>)
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f7fe fd38 	bl	8000668 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <menu+0x6ac>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	4923      	ldr	r1, [pc, #140]	; (8001c8c <menu+0x690>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00b f86f 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <menu+0x690>)
 8001c08:	210e      	movs	r1, #14
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f7fe fd2c 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <menu+0x694>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	d123      	bne.n	8001c60 <menu+0x664>
			if(dilSecim == 0) {
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <menu+0x680>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001c20:	4a22      	ldr	r2, [pc, #136]	; (8001cac <menu+0x6b0>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	2002      	movs	r0, #2
 8001c26:	f7fe fd1f 	bl	8000668 <lcd_print>
 8001c2a:	e008      	b.n	8001c3e <menu+0x642>
			} else if(dilSecim == 1) {
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <menu+0x680>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d104      	bne.n	8001c3e <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001c34:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <menu+0x6b4>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f7fe fd15 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <menu+0x6b8>)
 8001c40:	2110      	movs	r1, #16
 8001c42:	2002      	movs	r0, #2
 8001c44:	f7fe fd10 	bl	8000668 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <menu+0x6bc>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	220a      	movs	r2, #10
 8001c4e:	490f      	ldr	r1, [pc, #60]	; (8001c8c <menu+0x690>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00b f847 	bl	800cce4 <itoa>
			lcd_print(2, 15, snum);
 8001c56:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <menu+0x690>)
 8001c58:	210f      	movs	r1, #15
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f7fe fd04 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <menu+0x694>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b0a      	cmp	r3, #10
 8001c66:	d134      	bne.n	8001cd2 <menu+0x6d6>
			if(dilSecim == 0) {
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <menu+0x680>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d127      	bne.n	8001cc0 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c70:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <menu+0x6c0>)
 8001c72:	2101      	movs	r1, #1
 8001c74:	2002      	movs	r0, #2
 8001c76:	f7fe fcf7 	bl	8000668 <lcd_print>
 8001c7a:	e02a      	b.n	8001cd2 <menu+0x6d6>
 8001c7c:	20000d2d 	.word	0x20000d2d
 8001c80:	0800dae4 	.word	0x0800dae4
 8001c84:	0800da50 	.word	0x0800da50
 8001c88:	20000d34 	.word	0x20000d34
 8001c8c:	20000cac 	.word	0x20000cac
 8001c90:	20000d0e 	.word	0x20000d0e
 8001c94:	0800daf4 	.word	0x0800daf4
 8001c98:	0800db04 	.word	0x0800db04
 8001c9c:	20000d35 	.word	0x20000d35
 8001ca0:	0800db14 	.word	0x0800db14
 8001ca4:	0800db24 	.word	0x0800db24
 8001ca8:	20000d36 	.word	0x20000d36
 8001cac:	0800db34 	.word	0x0800db34
 8001cb0:	0800db44 	.word	0x0800db44
 8001cb4:	0800db54 	.word	0x0800db54
 8001cb8:	20000d37 	.word	0x20000d37
 8001cbc:	0800db58 	.word	0x0800db58
			} else if(dilSecim == 1) {
 8001cc0:	4b82      	ldr	r3, [pc, #520]	; (8001ecc <menu+0x8d0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d104      	bne.n	8001cd2 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001cc8:	4a81      	ldr	r2, [pc, #516]	; (8001ed0 <menu+0x8d4>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7fe fccb 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	487f      	ldr	r0, [pc, #508]	; (8001ed4 <menu+0x8d8>)
 8001cd6:	f007 ffd9 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d119      	bne.n	8001d14 <menu+0x718>
 8001ce0:	4b7d      	ldr	r3, [pc, #500]	; (8001ed8 <menu+0x8dc>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f083 0301 	eor.w	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <menu+0x718>
 8001cee:	4b7b      	ldr	r3, [pc, #492]	; (8001edc <menu+0x8e0>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10e      	bne.n	8001d14 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001cf6:	4b7a      	ldr	r3, [pc, #488]	; (8001ee0 <menu+0x8e4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <menu+0x8e4>)
 8001d00:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001d02:	4b77      	ldr	r3, [pc, #476]	; (8001ee0 <menu+0x8e4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b0a      	cmp	r3, #10
 8001d08:	d902      	bls.n	8001d10 <menu+0x714>
				hataGostermeSirasi = 0;
 8001d0a:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <menu+0x8e4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d10:	f004 fa1a 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d14:	2104      	movs	r1, #4
 8001d16:	486f      	ldr	r0, [pc, #444]	; (8001ed4 <menu+0x8d8>)
 8001d18:	f007 ffb8 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d119      	bne.n	8001d56 <menu+0x75a>
 8001d22:	4b6d      	ldr	r3, [pc, #436]	; (8001ed8 <menu+0x8dc>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	f083 0301 	eor.w	r3, r3, #1
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d012      	beq.n	8001d56 <menu+0x75a>
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <menu+0x8e0>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10e      	bne.n	8001d56 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001d38:	4b69      	ldr	r3, [pc, #420]	; (8001ee0 <menu+0x8e4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <menu+0x8e4>)
 8001d42:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001d44:	4b66      	ldr	r3, [pc, #408]	; (8001ee0 <menu+0x8e4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b0b      	cmp	r3, #11
 8001d4a:	d902      	bls.n	8001d52 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001d4c:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <menu+0x8e4>)
 8001d4e:	220a      	movs	r2, #10
 8001d50:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d52:	f004 f9f9 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001d56:	2108      	movs	r1, #8
 8001d58:	485e      	ldr	r0, [pc, #376]	; (8001ed4 <menu+0x8d8>)
 8001d5a:	f007 ff97 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d153      	bne.n	8001e0c <menu+0x810>
 8001d64:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <menu+0x8dc>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f083 0301 	eor.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d04c      	beq.n	8001e0c <menu+0x810>
 8001d72:	4b5b      	ldr	r3, [pc, #364]	; (8001ee0 <menu+0x8e4>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b0a      	cmp	r3, #10
 8001d78:	d148      	bne.n	8001e0c <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001d7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <menu+0x8e8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <menu+0x8ec>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001d88:	4b58      	ldr	r3, [pc, #352]	; (8001eec <menu+0x8f0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <menu+0x8ec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001d96:	4b56      	ldr	r3, [pc, #344]	; (8001ef0 <menu+0x8f4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <menu+0x8ec>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <menu+0x8f8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	4b4f      	ldr	r3, [pc, #316]	; (8001ee8 <menu+0x8ec>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001db2:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <menu+0x8fc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <menu+0x8ec>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001dc0:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <menu+0x900>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <menu+0x8ec>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001dce:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <menu+0x904>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <menu+0x8ec>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001ddc:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <menu+0x908>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <menu+0x8ec>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <menu+0x90c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <menu+0x8ec>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001df8:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <menu+0x910>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <menu+0x8ec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001e06:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <menu+0x914>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001e0c:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <menu+0x918>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	f040 80fc 	bne.w	800200e <menu+0xa12>
		if(dilSecim == 0) {
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <menu+0x8d0>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	; (8001f18 <menu+0x91c>)
 8001e20:	2101      	movs	r1, #1
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7fe fc20 	bl	8000668 <lcd_print>
 8001e28:	e008      	b.n	8001e3c <menu+0x840>
		} else if(dilSecim == 1) {
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <menu+0x8d0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d104      	bne.n	8001e3c <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001e32:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <menu+0x920>)
 8001e34:	2101      	movs	r1, #1
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7fe fc16 	bl	8000668 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <menu+0x8e0>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d003      	beq.n	8001e4c <menu+0x850>
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <menu+0x8e0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d112      	bne.n	8001e72 <menu+0x876>
			if(dilSecim == 0) {
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <menu+0x8d0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001e54:	4a32      	ldr	r2, [pc, #200]	; (8001f20 <menu+0x924>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7fe fc05 	bl	8000668 <lcd_print>
 8001e5e:	e008      	b.n	8001e72 <menu+0x876>
			} else if(dilSecim == 1) {
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <menu+0x8d0>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d104      	bne.n	8001e72 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e68:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <menu+0x928>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f7fe fbfb 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <menu+0x92c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <menu+0x8ac>
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <menu+0x8e0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d112      	bne.n	8001ea8 <menu+0x8ac>
			if(dilSecim == 0) {
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <menu+0x8d0>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e8a:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <menu+0x930>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f7fe fbea 	bl	8000668 <lcd_print>
 8001e94:	e008      	b.n	8001ea8 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <menu+0x8d0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d104      	bne.n	8001ea8 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001e9e:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <menu+0x934>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f7fe fbe0 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <menu+0x92c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d14c      	bne.n	8001f4a <menu+0x94e>
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <menu+0x8e0>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d148      	bne.n	8001f4a <menu+0x94e>
			if(dilSecim == 0) {
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <menu+0x8d0>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d13b      	bne.n	8001f38 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <menu+0x938>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7fe fbcf 	bl	8000668 <lcd_print>
 8001eca:	e03e      	b.n	8001f4a <menu+0x94e>
 8001ecc:	20000d2d 	.word	0x20000d2d
 8001ed0:	0800db6c 	.word	0x0800db6c
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	20000d3b 	.word	0x20000d3b
 8001edc:	20000d1b 	.word	0x20000d1b
 8001ee0:	20000d0e 	.word	0x20000d0e
 8001ee4:	20000d2e 	.word	0x20000d2e
 8001ee8:	20000c38 	.word	0x20000c38
 8001eec:	20000d2f 	.word	0x20000d2f
 8001ef0:	20000d30 	.word	0x20000d30
 8001ef4:	20000d31 	.word	0x20000d31
 8001ef8:	20000d32 	.word	0x20000d32
 8001efc:	20000d33 	.word	0x20000d33
 8001f00:	20000d34 	.word	0x20000d34
 8001f04:	20000d35 	.word	0x20000d35
 8001f08:	20000d36 	.word	0x20000d36
 8001f0c:	20000d37 	.word	0x20000d37
 8001f10:	20000d38 	.word	0x20000d38
 8001f14:	20000d0c 	.word	0x20000d0c
 8001f18:	0800db80 	.word	0x0800db80
 8001f1c:	0800db94 	.word	0x0800db94
 8001f20:	0800dba8 	.word	0x0800dba8
 8001f24:	0800dbbc 	.word	0x0800dbbc
 8001f28:	20000d0d 	.word	0x20000d0d
 8001f2c:	0800dbd0 	.word	0x0800dbd0
 8001f30:	0800dbe0 	.word	0x0800dbe0
 8001f34:	0800dbf0 	.word	0x0800dbf0
			} else if(dilSecim == 1) {
 8001f38:	4b98      	ldr	r3, [pc, #608]	; (800219c <menu+0xba0>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d104      	bne.n	8001f4a <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001f40:	4a97      	ldr	r2, [pc, #604]	; (80021a0 <menu+0xba4>)
 8001f42:	2101      	movs	r1, #1
 8001f44:	2002      	movs	r0, #2
 8001f46:	f7fe fb8f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4895      	ldr	r0, [pc, #596]	; (80021a4 <menu+0xba8>)
 8001f4e:	f007 fe9d 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d119      	bne.n	8001f8c <menu+0x990>
 8001f58:	4b93      	ldr	r3, [pc, #588]	; (80021a8 <menu+0xbac>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f083 0301 	eor.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <menu+0x990>
 8001f66:	4b91      	ldr	r3, [pc, #580]	; (80021ac <menu+0xbb0>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10e      	bne.n	8001f8c <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001f6e:	4b90      	ldr	r3, [pc, #576]	; (80021b0 <menu+0xbb4>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b8e      	ldr	r3, [pc, #568]	; (80021b0 <menu+0xbb4>)
 8001f78:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f7a:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <menu+0xbb4>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d902      	bls.n	8001f88 <menu+0x98c>
				calismaSekli = 0;
 8001f82:	4b8b      	ldr	r3, [pc, #556]	; (80021b0 <menu+0xbb4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f88:	f004 f8de 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4885      	ldr	r0, [pc, #532]	; (80021a4 <menu+0xba8>)
 8001f90:	f007 fe7c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d119      	bne.n	8001fce <menu+0x9d2>
 8001f9a:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <menu+0xbac>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f083 0301 	eor.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d012      	beq.n	8001fce <menu+0x9d2>
 8001fa8:	4b80      	ldr	r3, [pc, #512]	; (80021ac <menu+0xbb0>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10e      	bne.n	8001fce <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001fb0:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <menu+0xbb4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b7d      	ldr	r3, [pc, #500]	; (80021b0 <menu+0xbb4>)
 8001fba:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001fbc:	4b7c      	ldr	r3, [pc, #496]	; (80021b0 <menu+0xbb4>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <menu+0x9ce>
	    		calismaSekli = 1;
 8001fc4:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <menu+0xbb4>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001fca:	f004 f8bd 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fce:	2108      	movs	r1, #8
 8001fd0:	4874      	ldr	r0, [pc, #464]	; (80021a4 <menu+0xba8>)
 8001fd2:	f007 fe5b 	bl	8009c8c <HAL_GPIO_ReadPin>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d118      	bne.n	800200e <menu+0xa12>
 8001fdc:	4b72      	ldr	r3, [pc, #456]	; (80021a8 <menu+0xbac>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f083 0301 	eor.w	r3, r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d011      	beq.n	800200e <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001fea:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <menu+0xbb4>)
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <menu+0xbb8>)
 8001ff0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ff2:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <menu+0xbb4>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d106      	bne.n	8002008 <menu+0xa0c>
				altLimit = 1;
 8001ffa:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <menu+0xbbc>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002000:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <menu+0xbbc>)
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <menu+0xbb8>)
 8002006:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002008:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <menu+0xbc0>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800200e:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <menu+0xbc4>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b03      	cmp	r3, #3
 8002014:	f040 8083 	bne.w	800211e <menu+0xb22>
		if(dilSecim == 0) {
 8002018:	4b60      	ldr	r3, [pc, #384]	; (800219c <menu+0xba0>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8002020:	4a68      	ldr	r2, [pc, #416]	; (80021c4 <menu+0xbc8>)
 8002022:	2101      	movs	r1, #1
 8002024:	2001      	movs	r0, #1
 8002026:	f7fe fb1f 	bl	8000668 <lcd_print>
 800202a:	e008      	b.n	800203e <menu+0xa42>
		} else if(dilSecim == 1) {
 800202c:	4b5b      	ldr	r3, [pc, #364]	; (800219c <menu+0xba0>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d104      	bne.n	800203e <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8002034:	4a64      	ldr	r2, [pc, #400]	; (80021c8 <menu+0xbcc>)
 8002036:	2101      	movs	r1, #1
 8002038:	2001      	movs	r0, #1
 800203a:	f7fe fb15 	bl	8000668 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <menu+0xbd0>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d113      	bne.n	800206e <menu+0xa72>
			if(dilSecim == 0) {
 8002046:	4b55      	ldr	r3, [pc, #340]	; (800219c <menu+0xba0>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 800204e:	4a60      	ldr	r2, [pc, #384]	; (80021d0 <menu+0xbd4>)
 8002050:	2101      	movs	r1, #1
 8002052:	2002      	movs	r0, #2
 8002054:	f7fe fb08 	bl	8000668 <lcd_print>
 8002058:	e012      	b.n	8002080 <menu+0xa84>
			} else if(dilSecim == 1) {
 800205a:	4b50      	ldr	r3, [pc, #320]	; (800219c <menu+0xba0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10e      	bne.n	8002080 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8002062:	4a5c      	ldr	r2, [pc, #368]	; (80021d4 <menu+0xbd8>)
 8002064:	2101      	movs	r1, #1
 8002066:	2002      	movs	r0, #2
 8002068:	f7fe fafe 	bl	8000668 <lcd_print>
 800206c:	e008      	b.n	8002080 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 800206e:	4b57      	ldr	r3, [pc, #348]	; (80021cc <menu+0xbd0>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d104      	bne.n	8002080 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8002076:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <menu+0xbdc>)
 8002078:	2101      	movs	r1, #1
 800207a:	2002      	movs	r0, #2
 800207c:	f7fe faf4 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002080:	2102      	movs	r1, #2
 8002082:	4848      	ldr	r0, [pc, #288]	; (80021a4 <menu+0xba8>)
 8002084:	f007 fe02 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002088:	4603      	mov	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d115      	bne.n	80020ba <menu+0xabe>
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <menu+0xbac>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f083 0301 	eor.w	r3, r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00e      	beq.n	80020ba <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 800209c:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <menu+0xbd0>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b49      	ldr	r3, [pc, #292]	; (80021cc <menu+0xbd0>)
 80020a6:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80020a8:	4b48      	ldr	r3, [pc, #288]	; (80021cc <menu+0xbd0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d902      	bls.n	80020b6 <menu+0xaba>
				emniyetCercevesi = 0;
 80020b0:	4b46      	ldr	r3, [pc, #280]	; (80021cc <menu+0xbd0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020b6:	f004 f847 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ba:	2104      	movs	r1, #4
 80020bc:	4839      	ldr	r0, [pc, #228]	; (80021a4 <menu+0xba8>)
 80020be:	f007 fde5 	bl	8009c8c <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d115      	bne.n	80020f4 <menu+0xaf8>
 80020c8:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <menu+0xbac>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f083 0301 	eor.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00e      	beq.n	80020f4 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <menu+0xbd0>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3b01      	subs	r3, #1
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <menu+0xbd0>)
 80020e0:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80020e2:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <menu+0xbd0>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <menu+0xbd0>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020f0:	f004 f82a 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80020f4:	2108      	movs	r1, #8
 80020f6:	482b      	ldr	r0, [pc, #172]	; (80021a4 <menu+0xba8>)
 80020f8:	f007 fdc8 	bl	8009c8c <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10d      	bne.n	800211e <menu+0xb22>
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <menu+0xbac>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8002110:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <menu+0xbd0>)
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <menu+0xbb8>)
 8002116:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <menu+0xbc0>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <menu+0xbc4>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b04      	cmp	r3, #4
 8002124:	f040 80ba 	bne.w	800229c <menu+0xca0>
		if(dilSecim == 0) {
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <menu+0xba0>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8002130:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <menu+0xbe0>)
 8002132:	2101      	movs	r1, #1
 8002134:	2001      	movs	r0, #1
 8002136:	f7fe fa97 	bl	8000668 <lcd_print>
 800213a:	e008      	b.n	800214e <menu+0xb52>
		} else if(dilSecim == 1) {
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <menu+0xba0>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d104      	bne.n	800214e <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002144:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <menu+0xbe4>)
 8002146:	2101      	movs	r1, #1
 8002148:	2001      	movs	r0, #1
 800214a:	f7fe fa8d 	bl	8000668 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <menu+0xbe8>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d113      	bne.n	800217e <menu+0xb82>
			if(dilSecim == 0) {
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <menu+0xba0>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <menu+0xbd4>)
 8002160:	2101      	movs	r1, #1
 8002162:	2002      	movs	r0, #2
 8002164:	f7fe fa80 	bl	8000668 <lcd_print>
 8002168:	e049      	b.n	80021fe <menu+0xc02>
			} else if(dilSecim == 1) {
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <menu+0xba0>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d145      	bne.n	80021fe <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8002172:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <menu+0xbd8>)
 8002174:	2101      	movs	r1, #1
 8002176:	2002      	movs	r0, #2
 8002178:	f7fe fa76 	bl	8000668 <lcd_print>
 800217c:	e03f      	b.n	80021fe <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <menu+0xbe8>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d13b      	bne.n	80021fe <menu+0xc02>
			if(dilSecim == 0) {
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <menu+0xba0>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d12e      	bne.n	80021ec <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 800218e:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <menu+0xbec>)
 8002190:	2101      	movs	r1, #1
 8002192:	2002      	movs	r0, #2
 8002194:	f7fe fa68 	bl	8000668 <lcd_print>
 8002198:	e031      	b.n	80021fe <menu+0xc02>
 800219a:	bf00      	nop
 800219c:	20000d2d 	.word	0x20000d2d
 80021a0:	0800dc00 	.word	0x0800dc00
 80021a4:	40010800 	.word	0x40010800
 80021a8:	20000d3b 	.word	0x20000d3b
 80021ac:	20000d1b 	.word	0x20000d1b
 80021b0:	20000d0d 	.word	0x20000d0d
 80021b4:	20000c38 	.word	0x20000c38
 80021b8:	20000d12 	.word	0x20000d12
 80021bc:	20000d38 	.word	0x20000d38
 80021c0:	20000d0c 	.word	0x20000d0c
 80021c4:	0800dc10 	.word	0x0800dc10
 80021c8:	0800dc24 	.word	0x0800dc24
 80021cc:	20000d10 	.word	0x20000d10
 80021d0:	0800dc38 	.word	0x0800dc38
 80021d4:	0800dc4c 	.word	0x0800dc4c
 80021d8:	0800dc60 	.word	0x0800dc60
 80021dc:	0800dc70 	.word	0x0800dc70
 80021e0:	0800dc84 	.word	0x0800dc84
 80021e4:	20000d11 	.word	0x20000d11
 80021e8:	0800dc98 	.word	0x0800dc98
			} else if(dilSecim == 1) {
 80021ec:	4b92      	ldr	r3, [pc, #584]	; (8002438 <menu+0xe3c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d104      	bne.n	80021fe <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80021f4:	4a91      	ldr	r2, [pc, #580]	; (800243c <menu+0xe40>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	2002      	movs	r0, #2
 80021fa:	f7fe fa35 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021fe:	2102      	movs	r1, #2
 8002200:	488f      	ldr	r0, [pc, #572]	; (8002440 <menu+0xe44>)
 8002202:	f007 fd43 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002206:	4603      	mov	r3, r0
 8002208:	2b01      	cmp	r3, #1
 800220a:	d115      	bne.n	8002238 <menu+0xc3c>
 800220c:	4b8d      	ldr	r3, [pc, #564]	; (8002444 <menu+0xe48>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f083 0301 	eor.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00e      	beq.n	8002238 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 800221a:	4b8b      	ldr	r3, [pc, #556]	; (8002448 <menu+0xe4c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b89      	ldr	r3, [pc, #548]	; (8002448 <menu+0xe4c>)
 8002224:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002226:	4b88      	ldr	r3, [pc, #544]	; (8002448 <menu+0xe4c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d902      	bls.n	8002234 <menu+0xc38>
				yavaslamaLimit = 0;
 800222e:	4b86      	ldr	r3, [pc, #536]	; (8002448 <menu+0xe4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002234:	f003 ff88 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002238:	2104      	movs	r1, #4
 800223a:	4881      	ldr	r0, [pc, #516]	; (8002440 <menu+0xe44>)
 800223c:	f007 fd26 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002240:	4603      	mov	r3, r0
 8002242:	2b01      	cmp	r3, #1
 8002244:	d115      	bne.n	8002272 <menu+0xc76>
 8002246:	4b7f      	ldr	r3, [pc, #508]	; (8002444 <menu+0xe48>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	f083 0301 	eor.w	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002254:	4b7c      	ldr	r3, [pc, #496]	; (8002448 <menu+0xe4c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3b01      	subs	r3, #1
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b7a      	ldr	r3, [pc, #488]	; (8002448 <menu+0xe4c>)
 800225e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002260:	4b79      	ldr	r3, [pc, #484]	; (8002448 <menu+0xe4c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002268:	4b77      	ldr	r3, [pc, #476]	; (8002448 <menu+0xe4c>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800226e:	f003 ff6b 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002272:	2108      	movs	r1, #8
 8002274:	4872      	ldr	r0, [pc, #456]	; (8002440 <menu+0xe44>)
 8002276:	f007 fd09 	bl	8009c8c <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10d      	bne.n	800229c <menu+0xca0>
 8002280:	4b70      	ldr	r3, [pc, #448]	; (8002444 <menu+0xe48>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	f083 0301 	eor.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800228e:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <menu+0xe4c>)
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b6e      	ldr	r3, [pc, #440]	; (800244c <menu+0xe50>)
 8002294:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002296:	4b6e      	ldr	r3, [pc, #440]	; (8002450 <menu+0xe54>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 800229c:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <menu+0xe58>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	f040 80b9 	bne.w	8002418 <menu+0xe1c>
		if(dilSecim == 0) {
 80022a6:	4b64      	ldr	r3, [pc, #400]	; (8002438 <menu+0xe3c>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80022ae:	4a6a      	ldr	r2, [pc, #424]	; (8002458 <menu+0xe5c>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7fe f9d8 	bl	8000668 <lcd_print>
 80022b8:	e008      	b.n	80022cc <menu+0xcd0>
		} else if(dilSecim == 1) {
 80022ba:	4b5f      	ldr	r3, [pc, #380]	; (8002438 <menu+0xe3c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d104      	bne.n	80022cc <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80022c2:	4a66      	ldr	r2, [pc, #408]	; (800245c <menu+0xe60>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7fe f9ce 	bl	8000668 <lcd_print>
		}

		if(altLimit == 0) {
 80022cc:	4b64      	ldr	r3, [pc, #400]	; (8002460 <menu+0xe64>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d113      	bne.n	80022fc <menu+0xd00>
			if(dilSecim == 0) {
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <menu+0xe3c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80022dc:	4a61      	ldr	r2, [pc, #388]	; (8002464 <menu+0xe68>)
 80022de:	2101      	movs	r1, #1
 80022e0:	2002      	movs	r0, #2
 80022e2:	f7fe f9c1 	bl	8000668 <lcd_print>
 80022e6:	e020      	b.n	800232a <menu+0xd2e>
			} else if(dilSecim == 1) {
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <menu+0xe3c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d11c      	bne.n	800232a <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80022f0:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <menu+0xe6c>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	2002      	movs	r0, #2
 80022f6:	f7fe f9b7 	bl	8000668 <lcd_print>
 80022fa:	e016      	b.n	800232a <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80022fc:	4b58      	ldr	r3, [pc, #352]	; (8002460 <menu+0xe64>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d112      	bne.n	800232a <menu+0xd2e>
			if(dilSecim == 0){
 8002304:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <menu+0xe3c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 800230c:	4a57      	ldr	r2, [pc, #348]	; (800246c <menu+0xe70>)
 800230e:	2101      	movs	r1, #1
 8002310:	2002      	movs	r0, #2
 8002312:	f7fe f9a9 	bl	8000668 <lcd_print>
 8002316:	e008      	b.n	800232a <menu+0xd2e>
			} else if(dilSecim == 1){
 8002318:	4b47      	ldr	r3, [pc, #284]	; (8002438 <menu+0xe3c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d104      	bne.n	800232a <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002320:	4a46      	ldr	r2, [pc, #280]	; (800243c <menu+0xe40>)
 8002322:	2101      	movs	r1, #1
 8002324:	2002      	movs	r0, #2
 8002326:	f7fe f99f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800232a:	2102      	movs	r1, #2
 800232c:	4844      	ldr	r0, [pc, #272]	; (8002440 <menu+0xe44>)
 800232e:	f007 fcad 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002332:	4603      	mov	r3, r0
 8002334:	2b01      	cmp	r3, #1
 8002336:	d119      	bne.n	800236c <menu+0xd70>
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <menu+0xe48>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <menu+0xd70>
 8002346:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <menu+0xe74>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10e      	bne.n	800236c <menu+0xd70>
			altLimit = altLimit + 1;
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <menu+0xe64>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <menu+0xe64>)
 8002358:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <menu+0xe64>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d902      	bls.n	8002368 <menu+0xd6c>
				altLimit = 0;
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <menu+0xe64>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002368:	f003 feee 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800236c:	2104      	movs	r1, #4
 800236e:	4834      	ldr	r0, [pc, #208]	; (8002440 <menu+0xe44>)
 8002370:	f007 fc8c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	d119      	bne.n	80023ae <menu+0xdb2>
 800237a:	4b32      	ldr	r3, [pc, #200]	; (8002444 <menu+0xe48>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <menu+0xdb2>
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <menu+0xe74>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10e      	bne.n	80023ae <menu+0xdb2>
			altLimit = altLimit - 1;
 8002390:	4b33      	ldr	r3, [pc, #204]	; (8002460 <menu+0xe64>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	3b01      	subs	r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b31      	ldr	r3, [pc, #196]	; (8002460 <menu+0xe64>)
 800239a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <menu+0xe64>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <menu+0xdae>
		   		altLimit = 1;
 80023a4:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <menu+0xe64>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023aa:	f003 fecd 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ae:	2108      	movs	r1, #8
 80023b0:	4823      	ldr	r0, [pc, #140]	; (8002440 <menu+0xe44>)
 80023b2:	f007 fc6b 	bl	8009c8c <HAL_GPIO_ReadPin>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d12d      	bne.n	8002418 <menu+0xe1c>
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <menu+0xe48>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f083 0301 	eor.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d026      	beq.n	8002418 <menu+0xe1c>
			eepromData[5] = altLimit;
 80023ca:	4b25      	ldr	r3, [pc, #148]	; (8002460 <menu+0xe64>)
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <menu+0xe50>)
 80023d0:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <menu+0xe64>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d110      	bne.n	80023fc <menu+0xe00>
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <menu+0xe78>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <menu+0xdee>
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <menu+0xe78>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d108      	bne.n	80023fc <menu+0xe00>
				kapiTablaAcKonum = 3;
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <menu+0xe78>)
 80023ec:	2203      	movs	r2, #3
 80023ee:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <menu+0xe78>)
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <menu+0xe50>)
 80023f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80023fa:	e00a      	b.n	8002412 <menu+0xe16>
			} else if(altLimit == 0) {
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <menu+0xe64>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <menu+0xe16>
				platformSilindirTipi = 0;
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <menu+0xe7c>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <menu+0xe7c>)
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <menu+0xe50>)
 8002410:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <menu+0xe54>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <menu+0xe58>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b06      	cmp	r3, #6
 800241e:	f040 80b6 	bne.w	800258e <menu+0xf92>
		if(dilSecim == 0) {
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <menu+0xe3c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d12a      	bne.n	8002480 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800242a:	4a14      	ldr	r2, [pc, #80]	; (800247c <menu+0xe80>)
 800242c:	2101      	movs	r1, #1
 800242e:	2001      	movs	r0, #1
 8002430:	f7fe f91a 	bl	8000668 <lcd_print>
 8002434:	e02d      	b.n	8002492 <menu+0xe96>
 8002436:	bf00      	nop
 8002438:	20000d2d 	.word	0x20000d2d
 800243c:	0800dcac 	.word	0x0800dcac
 8002440:	40010800 	.word	0x40010800
 8002444:	20000d3b 	.word	0x20000d3b
 8002448:	20000d11 	.word	0x20000d11
 800244c:	20000c38 	.word	0x20000c38
 8002450:	20000d38 	.word	0x20000d38
 8002454:	20000d0c 	.word	0x20000d0c
 8002458:	0800dcc0 	.word	0x0800dcc0
 800245c:	0800dcd4 	.word	0x0800dcd4
 8002460:	20000d12 	.word	0x20000d12
 8002464:	0800dc38 	.word	0x0800dc38
 8002468:	0800dc4c 	.word	0x0800dc4c
 800246c:	0800dc98 	.word	0x0800dc98
 8002470:	20000d0d 	.word	0x20000d0d
 8002474:	20000d19 	.word	0x20000d19
 8002478:	20000d1f 	.word	0x20000d1f
 800247c:	0800dce8 	.word	0x0800dce8
		} else if(dilSecim == 1){
 8002480:	4b7a      	ldr	r3, [pc, #488]	; (800266c <menu+0x1070>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d104      	bne.n	8002492 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002488:	4a79      	ldr	r2, [pc, #484]	; (8002670 <menu+0x1074>)
 800248a:	2101      	movs	r1, #1
 800248c:	2001      	movs	r0, #1
 800248e:	f7fe f8eb 	bl	8000668 <lcd_print>
		}
		if(basincSalteri == 0){
 8002492:	4b78      	ldr	r3, [pc, #480]	; (8002674 <menu+0x1078>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d113      	bne.n	80024c2 <menu+0xec6>
			if(dilSecim == 0) {
 800249a:	4b74      	ldr	r3, [pc, #464]	; (800266c <menu+0x1070>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80024a2:	4a75      	ldr	r2, [pc, #468]	; (8002678 <menu+0x107c>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2002      	movs	r0, #2
 80024a8:	f7fe f8de 	bl	8000668 <lcd_print>
 80024ac:	e020      	b.n	80024f0 <menu+0xef4>
			} else if(dilSecim == 1){
 80024ae:	4b6f      	ldr	r3, [pc, #444]	; (800266c <menu+0x1070>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d11c      	bne.n	80024f0 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80024b6:	4a71      	ldr	r2, [pc, #452]	; (800267c <menu+0x1080>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	2002      	movs	r0, #2
 80024bc:	f7fe f8d4 	bl	8000668 <lcd_print>
 80024c0:	e016      	b.n	80024f0 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80024c2:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <menu+0x1078>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d112      	bne.n	80024f0 <menu+0xef4>
			if(dilSecim == 0) {
 80024ca:	4b68      	ldr	r3, [pc, #416]	; (800266c <menu+0x1070>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d105      	bne.n	80024de <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80024d2:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <menu+0x1084>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7fe f8c6 	bl	8000668 <lcd_print>
 80024dc:	e008      	b.n	80024f0 <menu+0xef4>
			} else if(dilSecim == 1) {
 80024de:	4b63      	ldr	r3, [pc, #396]	; (800266c <menu+0x1070>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d104      	bne.n	80024f0 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80024e6:	4a67      	ldr	r2, [pc, #412]	; (8002684 <menu+0x1088>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	2002      	movs	r0, #2
 80024ec:	f7fe f8bc 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f0:	2102      	movs	r1, #2
 80024f2:	4865      	ldr	r0, [pc, #404]	; (8002688 <menu+0x108c>)
 80024f4:	f007 fbca 	bl	8009c8c <HAL_GPIO_ReadPin>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d115      	bne.n	800252a <menu+0xf2e>
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <menu+0x1090>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00e      	beq.n	800252a <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <menu+0x1078>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b57      	ldr	r3, [pc, #348]	; (8002674 <menu+0x1078>)
 8002516:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002518:	4b56      	ldr	r3, [pc, #344]	; (8002674 <menu+0x1078>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d902      	bls.n	8002526 <menu+0xf2a>
				basincSalteri = 0;
 8002520:	4b54      	ldr	r3, [pc, #336]	; (8002674 <menu+0x1078>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002526:	f003 fe0f 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800252a:	2104      	movs	r1, #4
 800252c:	4856      	ldr	r0, [pc, #344]	; (8002688 <menu+0x108c>)
 800252e:	f007 fbad 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d115      	bne.n	8002564 <menu+0xf68>
 8002538:	4b54      	ldr	r3, [pc, #336]	; (800268c <menu+0x1090>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002546:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <menu+0x1078>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b49      	ldr	r3, [pc, #292]	; (8002674 <menu+0x1078>)
 8002550:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002552:	4b48      	ldr	r3, [pc, #288]	; (8002674 <menu+0x1078>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <menu+0xf64>
		   		basincSalteri = 1;
 800255a:	4b46      	ldr	r3, [pc, #280]	; (8002674 <menu+0x1078>)
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002560:	f003 fdf2 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002564:	2108      	movs	r1, #8
 8002566:	4848      	ldr	r0, [pc, #288]	; (8002688 <menu+0x108c>)
 8002568:	f007 fb90 	bl	8009c8c <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10d      	bne.n	800258e <menu+0xf92>
 8002572:	4b46      	ldr	r3, [pc, #280]	; (800268c <menu+0x1090>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002580:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <menu+0x1078>)
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <menu+0x1094>)
 8002586:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002588:	4b42      	ldr	r3, [pc, #264]	; (8002694 <menu+0x1098>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800258e:	4b42      	ldr	r3, [pc, #264]	; (8002698 <menu+0x109c>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b07      	cmp	r3, #7
 8002594:	f040 80f5 	bne.w	8002782 <menu+0x1186>
		if(dilSecim == 0) {
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <menu+0x1070>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80025a0:	4a3e      	ldr	r2, [pc, #248]	; (800269c <menu+0x10a0>)
 80025a2:	2101      	movs	r1, #1
 80025a4:	2001      	movs	r0, #1
 80025a6:	f7fe f85f 	bl	8000668 <lcd_print>
 80025aa:	e008      	b.n	80025be <menu+0xfc2>
		} else if(dilSecim == 1){
 80025ac:	4b2f      	ldr	r3, [pc, #188]	; (800266c <menu+0x1070>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d104      	bne.n	80025be <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80025b4:	4a3a      	ldr	r2, [pc, #232]	; (80026a0 <menu+0x10a4>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7fe f855 	bl	8000668 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <menu+0x10a8>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d113      	bne.n	80025ee <menu+0xff2>
			if(dilSecim == 0) {
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <menu+0x1070>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80025ce:	4a2a      	ldr	r2, [pc, #168]	; (8002678 <menu+0x107c>)
 80025d0:	2101      	movs	r1, #1
 80025d2:	2002      	movs	r0, #2
 80025d4:	f7fe f848 	bl	8000668 <lcd_print>
 80025d8:	e079      	b.n	80026ce <menu+0x10d2>
			} else if(dilSecim == 1){
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <menu+0x1070>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d175      	bne.n	80026ce <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80025e2:	4a26      	ldr	r2, [pc, #152]	; (800267c <menu+0x1080>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	2002      	movs	r0, #2
 80025e8:	f7fe f83e 	bl	8000668 <lcd_print>
 80025ec:	e06f      	b.n	80026ce <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <menu+0x10a8>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d113      	bne.n	800261e <menu+0x1022>
			if(dilSecim == 0) {
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <menu+0x1070>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80025fe:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <menu+0x10ac>)
 8002600:	2101      	movs	r1, #1
 8002602:	2002      	movs	r0, #2
 8002604:	f7fe f830 	bl	8000668 <lcd_print>
 8002608:	e061      	b.n	80026ce <menu+0x10d2>
			} else if(dilSecim == 1) {
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <menu+0x1070>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d15d      	bne.n	80026ce <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002612:	4a26      	ldr	r2, [pc, #152]	; (80026ac <menu+0x10b0>)
 8002614:	2101      	movs	r1, #1
 8002616:	2002      	movs	r0, #2
 8002618:	f7fe f826 	bl	8000668 <lcd_print>
 800261c:	e057      	b.n	80026ce <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800261e:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <menu+0x10a8>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d113      	bne.n	800264e <menu+0x1052>
			if(dilSecim == 0) {
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <menu+0x1070>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800262e:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <menu+0x10b4>)
 8002630:	2101      	movs	r1, #1
 8002632:	2002      	movs	r0, #2
 8002634:	f7fe f818 	bl	8000668 <lcd_print>
 8002638:	e049      	b.n	80026ce <menu+0x10d2>
			} else if(dilSecim == 1) {
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <menu+0x1070>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d145      	bne.n	80026ce <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002642:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <menu+0x10b8>)
 8002644:	2101      	movs	r1, #1
 8002646:	2002      	movs	r0, #2
 8002648:	f7fe f80e 	bl	8000668 <lcd_print>
 800264c:	e03f      	b.n	80026ce <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <menu+0x10a8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d13b      	bne.n	80026ce <menu+0x10d2>
			if(dilSecim == 0) {
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <menu+0x1070>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d12e      	bne.n	80026bc <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <menu+0x10bc>)
 8002660:	2101      	movs	r1, #1
 8002662:	2002      	movs	r0, #2
 8002664:	f7fe f800 	bl	8000668 <lcd_print>
 8002668:	e031      	b.n	80026ce <menu+0x10d2>
 800266a:	bf00      	nop
 800266c:	20000d2d 	.word	0x20000d2d
 8002670:	0800dcf8 	.word	0x0800dcf8
 8002674:	20000d13 	.word	0x20000d13
 8002678:	0800dc38 	.word	0x0800dc38
 800267c:	0800dc4c 	.word	0x0800dc4c
 8002680:	0800dc98 	.word	0x0800dc98
 8002684:	0800dcac 	.word	0x0800dcac
 8002688:	40010800 	.word	0x40010800
 800268c:	20000d3b 	.word	0x20000d3b
 8002690:	20000c38 	.word	0x20000c38
 8002694:	20000d38 	.word	0x20000d38
 8002698:	20000d0c 	.word	0x20000d0c
 800269c:	0800dd08 	.word	0x0800dd08
 80026a0:	0800dd1c 	.word	0x0800dd1c
 80026a4:	20000d14 	.word	0x20000d14
 80026a8:	0800dd30 	.word	0x0800dd30
 80026ac:	0800dd44 	.word	0x0800dd44
 80026b0:	0800dd58 	.word	0x0800dd58
 80026b4:	0800dd6c 	.word	0x0800dd6c
 80026b8:	0800dd80 	.word	0x0800dd80
			} else if(dilSecim == 1){
 80026bc:	4b99      	ldr	r3, [pc, #612]	; (8002924 <menu+0x1328>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d104      	bne.n	80026ce <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80026c4:	4a98      	ldr	r2, [pc, #608]	; (8002928 <menu+0x132c>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	2002      	movs	r0, #2
 80026ca:	f7fd ffcd 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ce:	2102      	movs	r1, #2
 80026d0:	4896      	ldr	r0, [pc, #600]	; (800292c <menu+0x1330>)
 80026d2:	f007 fadb 	bl	8009c8c <HAL_GPIO_ReadPin>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d115      	bne.n	8002708 <menu+0x110c>
 80026dc:	4b94      	ldr	r3, [pc, #592]	; (8002930 <menu+0x1334>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f083 0301 	eor.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00e      	beq.n	8002708 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80026ea:	4b92      	ldr	r3, [pc, #584]	; (8002934 <menu+0x1338>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b90      	ldr	r3, [pc, #576]	; (8002934 <menu+0x1338>)
 80026f4:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80026f6:	4b8f      	ldr	r3, [pc, #572]	; (8002934 <menu+0x1338>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d902      	bls.n	8002704 <menu+0x1108>
				kapiSecimleri = 0;
 80026fe:	4b8d      	ldr	r3, [pc, #564]	; (8002934 <menu+0x1338>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002704:	f003 fd20 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002708:	2104      	movs	r1, #4
 800270a:	4888      	ldr	r0, [pc, #544]	; (800292c <menu+0x1330>)
 800270c:	f007 fabe 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002710:	4603      	mov	r3, r0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d115      	bne.n	8002742 <menu+0x1146>
 8002716:	4b86      	ldr	r3, [pc, #536]	; (8002930 <menu+0x1334>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	f083 0301 	eor.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002724:	4b83      	ldr	r3, [pc, #524]	; (8002934 <menu+0x1338>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	3b01      	subs	r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b81      	ldr	r3, [pc, #516]	; (8002934 <menu+0x1338>)
 800272e:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002730:	4b80      	ldr	r3, [pc, #512]	; (8002934 <menu+0x1338>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d902      	bls.n	800273e <menu+0x1142>
		   		kapiSecimleri = 3;
 8002738:	4b7e      	ldr	r3, [pc, #504]	; (8002934 <menu+0x1338>)
 800273a:	2203      	movs	r2, #3
 800273c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800273e:	f003 fd03 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002742:	2108      	movs	r1, #8
 8002744:	4879      	ldr	r0, [pc, #484]	; (800292c <menu+0x1330>)
 8002746:	f007 faa1 	bl	8009c8c <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d118      	bne.n	8002782 <menu+0x1186>
 8002750:	4b77      	ldr	r3, [pc, #476]	; (8002930 <menu+0x1334>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f083 0301 	eor.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d011      	beq.n	8002782 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800275e:	4b75      	ldr	r3, [pc, #468]	; (8002934 <menu+0x1338>)
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	4b75      	ldr	r3, [pc, #468]	; (8002938 <menu+0x133c>)
 8002764:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002766:	4b73      	ldr	r3, [pc, #460]	; (8002934 <menu+0x1338>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <menu+0x1180>
				altLimit = 1;
 800276e:	4b73      	ldr	r3, [pc, #460]	; (800293c <menu+0x1340>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002774:	4b71      	ldr	r3, [pc, #452]	; (800293c <menu+0x1340>)
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <menu+0x133c>)
 800277a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800277c:	4b70      	ldr	r3, [pc, #448]	; (8002940 <menu+0x1344>)
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002782:	4b70      	ldr	r3, [pc, #448]	; (8002944 <menu+0x1348>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b08      	cmp	r3, #8
 8002788:	f040 8092 	bne.w	80028b0 <menu+0x12b4>
		if(dilSecim == 0) {
 800278c:	4b65      	ldr	r3, [pc, #404]	; (8002924 <menu+0x1328>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002794:	4a6c      	ldr	r2, [pc, #432]	; (8002948 <menu+0x134c>)
 8002796:	2101      	movs	r1, #1
 8002798:	2001      	movs	r0, #1
 800279a:	f7fd ff65 	bl	8000668 <lcd_print>
 800279e:	e008      	b.n	80027b2 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80027a0:	4b60      	ldr	r3, [pc, #384]	; (8002924 <menu+0x1328>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d104      	bne.n	80027b2 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80027a8:	4a68      	ldr	r2, [pc, #416]	; (800294c <menu+0x1350>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7fd ff5b 	bl	8000668 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <menu+0x1354>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d113      	bne.n	80027e2 <menu+0x11e6>
			if(dilSecim == 0) {
 80027ba:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <menu+0x1328>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80027c2:	4a64      	ldr	r2, [pc, #400]	; (8002954 <menu+0x1358>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	2002      	movs	r0, #2
 80027c8:	f7fd ff4e 	bl	8000668 <lcd_print>
 80027cc:	e020      	b.n	8002810 <menu+0x1214>
			} else if(dilSecim == 1) {
 80027ce:	4b55      	ldr	r3, [pc, #340]	; (8002924 <menu+0x1328>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d11c      	bne.n	8002810 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80027d6:	4a60      	ldr	r2, [pc, #384]	; (8002958 <menu+0x135c>)
 80027d8:	2101      	movs	r1, #1
 80027da:	2002      	movs	r0, #2
 80027dc:	f7fd ff44 	bl	8000668 <lcd_print>
 80027e0:	e016      	b.n	8002810 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80027e2:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <menu+0x1354>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d112      	bne.n	8002810 <menu+0x1214>
			if(dilSecim == 0){
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <menu+0x1328>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80027f2:	4a5a      	ldr	r2, [pc, #360]	; (800295c <menu+0x1360>)
 80027f4:	2101      	movs	r1, #1
 80027f6:	2002      	movs	r0, #2
 80027f8:	f7fd ff36 	bl	8000668 <lcd_print>
 80027fc:	e008      	b.n	8002810 <menu+0x1214>
			} else if(dilSecim == 1){
 80027fe:	4b49      	ldr	r3, [pc, #292]	; (8002924 <menu+0x1328>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d104      	bne.n	8002810 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002806:	4a56      	ldr	r2, [pc, #344]	; (8002960 <menu+0x1364>)
 8002808:	2101      	movs	r1, #1
 800280a:	2002      	movs	r0, #2
 800280c:	f7fd ff2c 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002810:	2102      	movs	r1, #2
 8002812:	4846      	ldr	r0, [pc, #280]	; (800292c <menu+0x1330>)
 8002814:	f007 fa3a 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d115      	bne.n	800284a <menu+0x124e>
 800281e:	4b44      	ldr	r3, [pc, #272]	; (8002930 <menu+0x1334>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00e      	beq.n	800284a <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 800282c:	4b48      	ldr	r3, [pc, #288]	; (8002950 <menu+0x1354>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b46      	ldr	r3, [pc, #280]	; (8002950 <menu+0x1354>)
 8002836:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002838:	4b45      	ldr	r3, [pc, #276]	; (8002950 <menu+0x1354>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d902      	bls.n	8002846 <menu+0x124a>
				kapiAcTipi = 0;
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <menu+0x1354>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002846:	f003 fc7f 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800284a:	2104      	movs	r1, #4
 800284c:	4837      	ldr	r0, [pc, #220]	; (800292c <menu+0x1330>)
 800284e:	f007 fa1d 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d115      	bne.n	8002884 <menu+0x1288>
 8002858:	4b35      	ldr	r3, [pc, #212]	; (8002930 <menu+0x1334>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	f083 0301 	eor.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00e      	beq.n	8002884 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002866:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <menu+0x1354>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	3b01      	subs	r3, #1
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <menu+0x1354>)
 8002870:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <menu+0x1354>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <menu+0x1284>
		   		kapiAcTipi = 1;
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <menu+0x1354>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002880:	f003 fc62 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002884:	2108      	movs	r1, #8
 8002886:	4829      	ldr	r0, [pc, #164]	; (800292c <menu+0x1330>)
 8002888:	f007 fa00 	bl	8009c8c <HAL_GPIO_ReadPin>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10e      	bne.n	80028b0 <menu+0x12b4>
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <menu+0x1334>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	f083 0301 	eor.w	r3, r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <menu+0x1354>)
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <menu+0x133c>)
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80028aa:	4b25      	ldr	r3, [pc, #148]	; (8002940 <menu+0x1344>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <menu+0x1348>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	f040 80b9 	bne.w	8002a2c <menu+0x1430>
		if(dilSecim == 0){
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <menu+0x1328>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80028c2:	4a28      	ldr	r2, [pc, #160]	; (8002964 <menu+0x1368>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7fd fece 	bl	8000668 <lcd_print>
 80028cc:	e008      	b.n	80028e0 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <menu+0x1328>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d104      	bne.n	80028e0 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80028d6:	4a24      	ldr	r2, [pc, #144]	; (8002968 <menu+0x136c>)
 80028d8:	2101      	movs	r1, #1
 80028da:	2001      	movs	r0, #1
 80028dc:	f7fd fec4 	bl	8000668 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <menu+0x1370>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80028e8:	4a21      	ldr	r2, [pc, #132]	; (8002970 <menu+0x1374>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	2002      	movs	r0, #2
 80028ee:	f7fd febb 	bl	8000668 <lcd_print>
 80028f2:	e04c      	b.n	800298e <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <menu+0x1370>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d13f      	bne.n	800297c <menu+0x1380>
			if(dilSecim == 0){
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <menu+0x1328>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <menu+0x1378>)
 8002906:	2101      	movs	r1, #1
 8002908:	2002      	movs	r0, #2
 800290a:	f7fd fead 	bl	8000668 <lcd_print>
 800290e:	e03e      	b.n	800298e <menu+0x1392>
			} else if(dilSecim == 1) {
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <menu+0x1328>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d13a      	bne.n	800298e <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002918:	4a17      	ldr	r2, [pc, #92]	; (8002978 <menu+0x137c>)
 800291a:	2101      	movs	r1, #1
 800291c:	2002      	movs	r0, #2
 800291e:	f7fd fea3 	bl	8000668 <lcd_print>
 8002922:	e034      	b.n	800298e <menu+0x1392>
 8002924:	20000d2d 	.word	0x20000d2d
 8002928:	0800dd94 	.word	0x0800dd94
 800292c:	40010800 	.word	0x40010800
 8002930:	20000d3b 	.word	0x20000d3b
 8002934:	20000d14 	.word	0x20000d14
 8002938:	20000c38 	.word	0x20000c38
 800293c:	20000d12 	.word	0x20000d12
 8002940:	20000d38 	.word	0x20000d38
 8002944:	20000d0c 	.word	0x20000d0c
 8002948:	0800dda8 	.word	0x0800dda8
 800294c:	0800ddbc 	.word	0x0800ddbc
 8002950:	20000d18 	.word	0x20000d18
 8002954:	0800ddd0 	.word	0x0800ddd0
 8002958:	0800dde0 	.word	0x0800dde0
 800295c:	0800ddf0 	.word	0x0800ddf0
 8002960:	0800de04 	.word	0x0800de04
 8002964:	0800de18 	.word	0x0800de18
 8002968:	0800de2c 	.word	0x0800de2c
 800296c:	20000d15 	.word	0x20000d15
 8002970:	0800de40 	.word	0x0800de40
 8002974:	0800de54 	.word	0x0800de54
 8002978:	0800de64 	.word	0x0800de64
			}
		} else if(kapi1Tip == 2) {
 800297c:	4b8a      	ldr	r3, [pc, #552]	; (8002ba8 <menu+0x15ac>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d104      	bne.n	800298e <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002984:	4a89      	ldr	r2, [pc, #548]	; (8002bac <menu+0x15b0>)
 8002986:	2101      	movs	r1, #1
 8002988:	2002      	movs	r0, #2
 800298a:	f7fd fe6d 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800298e:	2102      	movs	r1, #2
 8002990:	4887      	ldr	r0, [pc, #540]	; (8002bb0 <menu+0x15b4>)
 8002992:	f007 f97b 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d115      	bne.n	80029c8 <menu+0x13cc>
 800299c:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <menu+0x15b8>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00e      	beq.n	80029c8 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <menu+0x15ac>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b7d      	ldr	r3, [pc, #500]	; (8002ba8 <menu+0x15ac>)
 80029b4:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80029b6:	4b7c      	ldr	r3, [pc, #496]	; (8002ba8 <menu+0x15ac>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <menu+0x13c8>
				kapi1Tip = 0;
 80029be:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <menu+0x15ac>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029c4:	f003 fbc0 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c8:	2104      	movs	r1, #4
 80029ca:	4879      	ldr	r0, [pc, #484]	; (8002bb0 <menu+0x15b4>)
 80029cc:	f007 f95e 	bl	8009c8c <HAL_GPIO_ReadPin>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d115      	bne.n	8002a02 <menu+0x1406>
 80029d6:	4b77      	ldr	r3, [pc, #476]	; (8002bb4 <menu+0x15b8>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	f083 0301 	eor.w	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80029e4:	4b70      	ldr	r3, [pc, #448]	; (8002ba8 <menu+0x15ac>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <menu+0x15ac>)
 80029ee:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80029f0:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <menu+0x15ac>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d902      	bls.n	80029fe <menu+0x1402>
		   		kapi1Tip = 2;
 80029f8:	4b6b      	ldr	r3, [pc, #428]	; (8002ba8 <menu+0x15ac>)
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029fe:	f003 fba3 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a02:	2108      	movs	r1, #8
 8002a04:	486a      	ldr	r0, [pc, #424]	; (8002bb0 <menu+0x15b4>)
 8002a06:	f007 f941 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d10d      	bne.n	8002a2c <menu+0x1430>
 8002a10:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <menu+0x15b8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002a1e:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <menu+0x15ac>)
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <menu+0x15bc>)
 8002a24:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <menu+0x15c0>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002a2c:	4b64      	ldr	r3, [pc, #400]	; (8002bc0 <menu+0x15c4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b0a      	cmp	r3, #10
 8002a32:	d17f      	bne.n	8002b34 <menu+0x1538>
		if(dilSecim == 0) {
 8002a34:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <menu+0x15c8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002a3c:	4a62      	ldr	r2, [pc, #392]	; (8002bc8 <menu+0x15cc>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7fd fe11 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a46:	4a61      	ldr	r2, [pc, #388]	; (8002bcc <menu+0x15d0>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f7fd fe0c 	bl	8000668 <lcd_print>
 8002a50:	e00d      	b.n	8002a6e <menu+0x1472>
		} else if(dilSecim == 1) {
 8002a52:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <menu+0x15c8>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d109      	bne.n	8002a6e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002a5a:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <menu+0x15d4>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f7fd fe02 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a64:	4a5b      	ldr	r2, [pc, #364]	; (8002bd4 <menu+0x15d8>)
 8002a66:	2101      	movs	r1, #1
 8002a68:	2002      	movs	r0, #2
 8002a6a:	f7fd fdfd 	bl	8000668 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002a6e:	4b5a      	ldr	r3, [pc, #360]	; (8002bd8 <menu+0x15dc>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	220a      	movs	r2, #10
 8002a74:	4959      	ldr	r1, [pc, #356]	; (8002bdc <menu+0x15e0>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00a f934 	bl	800cce4 <itoa>
		lcd_print(2,16,snum);
 8002a7c:	4a57      	ldr	r2, [pc, #348]	; (8002bdc <menu+0x15e0>)
 8002a7e:	2110      	movs	r1, #16
 8002a80:	2002      	movs	r0, #2
 8002a82:	f7fd fdf1 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a86:	2102      	movs	r1, #2
 8002a88:	4849      	ldr	r0, [pc, #292]	; (8002bb0 <menu+0x15b4>)
 8002a8a:	f007 f8ff 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d119      	bne.n	8002ac8 <menu+0x14cc>
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <menu+0x15b8>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	f083 0301 	eor.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <menu+0x14cc>
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <menu+0x15ac>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10e      	bne.n	8002ac8 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002aaa:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <menu+0x15dc>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <menu+0x15dc>)
 8002ab4:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002ab6:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <menu+0x15dc>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d902      	bls.n	8002ac4 <menu+0x14c8>
				kapi1AcSure = 0;
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <menu+0x15dc>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ac4:	f003 fb40 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002ac8:	2104      	movs	r1, #4
 8002aca:	4839      	ldr	r0, [pc, #228]	; (8002bb0 <menu+0x15b4>)
 8002acc:	f007 f8de 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d119      	bne.n	8002b0a <menu+0x150e>
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <menu+0x15b8>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	f083 0301 	eor.w	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <menu+0x150e>
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <menu+0x15ac>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10e      	bne.n	8002b0a <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002aec:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <menu+0x15dc>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <menu+0x15dc>)
 8002af6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002af8:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <menu+0x15dc>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d902      	bls.n	8002b06 <menu+0x150a>
		   		kapi1AcSure = 5;
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <menu+0x15dc>)
 8002b02:	2205      	movs	r2, #5
 8002b04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b06:	f003 fb1f 	bl	8006148 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0a:	2108      	movs	r1, #8
 8002b0c:	4828      	ldr	r0, [pc, #160]	; (8002bb0 <menu+0x15b4>)
 8002b0e:	f007 f8bd 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10d      	bne.n	8002b34 <menu+0x1538>
 8002b18:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <menu+0x15b8>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <menu+0x15dc>)
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <menu+0x15bc>)
 8002b2c:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <menu+0x15c0>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002b34:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <menu+0x15c4>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b0b      	cmp	r3, #11
 8002b3a:	f040 80b5 	bne.w	8002ca8 <menu+0x16ac>
		if(dilSecim == 0) {
 8002b3e:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <menu+0x15c8>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002b46:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <menu+0x15e4>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7fd fd8c 	bl	8000668 <lcd_print>
 8002b50:	e008      	b.n	8002b64 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <menu+0x15c8>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d104      	bne.n	8002b64 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002b5a:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <menu+0x15e8>)
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f7fd fd82 	bl	8000668 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <menu+0x15ec>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <menu+0x15f0>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	2002      	movs	r0, #2
 8002b72:	f7fd fd79 	bl	8000668 <lcd_print>
 8002b76:	e048      	b.n	8002c0a <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <menu+0x15ec>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d13b      	bne.n	8002bf8 <menu+0x15fc>
			if(dilSecim == 0) {
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <menu+0x15c8>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <menu+0x15f4>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f7fd fd6b 	bl	8000668 <lcd_print>
 8002b92:	e03a      	b.n	8002c0a <menu+0x160e>
			} else if(dilSecim == 1) {
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <menu+0x15c8>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d136      	bne.n	8002c0a <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <menu+0x15f8>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7fd fd61 	bl	8000668 <lcd_print>
 8002ba6:	e030      	b.n	8002c0a <menu+0x160e>
 8002ba8:	20000d15 	.word	0x20000d15
 8002bac:	0800de78 	.word	0x0800de78
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	20000d3b 	.word	0x20000d3b
 8002bb8:	20000c38 	.word	0x20000c38
 8002bbc:	20000d38 	.word	0x20000d38
 8002bc0:	20000d0c 	.word	0x20000d0c
 8002bc4:	20000d2d 	.word	0x20000d2d
 8002bc8:	0800de88 	.word	0x0800de88
 8002bcc:	0800de9c 	.word	0x0800de9c
 8002bd0:	0800deac 	.word	0x0800deac
 8002bd4:	0800dec0 	.word	0x0800dec0
 8002bd8:	20000d25 	.word	0x20000d25
 8002bdc:	20000cac 	.word	0x20000cac
 8002be0:	0800ded0 	.word	0x0800ded0
 8002be4:	0800dee4 	.word	0x0800dee4
 8002be8:	20000d16 	.word	0x20000d16
 8002bec:	0800de40 	.word	0x0800de40
 8002bf0:	0800de54 	.word	0x0800de54
 8002bf4:	0800de64 	.word	0x0800de64
			}
		} else if(kapi2Tip == 2) {
 8002bf8:	4b8a      	ldr	r3, [pc, #552]	; (8002e24 <menu+0x1828>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d104      	bne.n	8002c0a <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002c00:	4a89      	ldr	r2, [pc, #548]	; (8002e28 <menu+0x182c>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	2002      	movs	r0, #2
 8002c06:	f7fd fd2f 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4887      	ldr	r0, [pc, #540]	; (8002e2c <menu+0x1830>)
 8002c0e:	f007 f83d 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d115      	bne.n	8002c44 <menu+0x1648>
 8002c18:	4b85      	ldr	r3, [pc, #532]	; (8002e30 <menu+0x1834>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f083 0301 	eor.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <menu+0x1828>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4b7d      	ldr	r3, [pc, #500]	; (8002e24 <menu+0x1828>)
 8002c30:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002c32:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <menu+0x1828>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d902      	bls.n	8002c40 <menu+0x1644>
				kapi2Tip = 0;
 8002c3a:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <menu+0x1828>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c40:	f003 fa82 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c44:	2104      	movs	r1, #4
 8002c46:	4879      	ldr	r0, [pc, #484]	; (8002e2c <menu+0x1830>)
 8002c48:	f007 f820 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d115      	bne.n	8002c7e <menu+0x1682>
 8002c52:	4b77      	ldr	r3, [pc, #476]	; (8002e30 <menu+0x1834>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	f083 0301 	eor.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002c60:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <menu+0x1828>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <menu+0x1828>)
 8002c6a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002c6c:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <menu+0x1828>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d902      	bls.n	8002c7a <menu+0x167e>
		   		kapi2Tip = 2;
 8002c74:	4b6b      	ldr	r3, [pc, #428]	; (8002e24 <menu+0x1828>)
 8002c76:	2202      	movs	r2, #2
 8002c78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c7a:	f003 fa65 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c7e:	2108      	movs	r1, #8
 8002c80:	486a      	ldr	r0, [pc, #424]	; (8002e2c <menu+0x1830>)
 8002c82:	f007 f803 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10d      	bne.n	8002ca8 <menu+0x16ac>
 8002c8c:	4b68      	ldr	r3, [pc, #416]	; (8002e30 <menu+0x1834>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	f083 0301 	eor.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002c9a:	4b62      	ldr	r3, [pc, #392]	; (8002e24 <menu+0x1828>)
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <menu+0x1838>)
 8002ca0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002ca2:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <menu+0x183c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002ca8:	4b64      	ldr	r3, [pc, #400]	; (8002e3c <menu+0x1840>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d17f      	bne.n	8002db0 <menu+0x17b4>
		if(dilSecim == 0) {
 8002cb0:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <menu+0x1844>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002cb8:	4a62      	ldr	r2, [pc, #392]	; (8002e44 <menu+0x1848>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7fd fcd3 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002cc2:	4a61      	ldr	r2, [pc, #388]	; (8002e48 <menu+0x184c>)
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f7fd fcce 	bl	8000668 <lcd_print>
 8002ccc:	e00d      	b.n	8002cea <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002cce:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <menu+0x1844>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d109      	bne.n	8002cea <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002cd6:	4a5d      	ldr	r2, [pc, #372]	; (8002e4c <menu+0x1850>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f7fd fcc4 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ce0:	4a5b      	ldr	r2, [pc, #364]	; (8002e50 <menu+0x1854>)
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f7fd fcbf 	bl	8000668 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <menu+0x1858>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	220a      	movs	r2, #10
 8002cf0:	4959      	ldr	r1, [pc, #356]	; (8002e58 <menu+0x185c>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f009 fff6 	bl	800cce4 <itoa>
		lcd_print(2,16,snum);
 8002cf8:	4a57      	ldr	r2, [pc, #348]	; (8002e58 <menu+0x185c>)
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	f7fd fcb3 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002d02:	2102      	movs	r1, #2
 8002d04:	4849      	ldr	r0, [pc, #292]	; (8002e2c <menu+0x1830>)
 8002d06:	f006 ffc1 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d119      	bne.n	8002d44 <menu+0x1748>
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <menu+0x1834>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d012      	beq.n	8002d44 <menu+0x1748>
 8002d1e:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <menu+0x1828>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10e      	bne.n	8002d44 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002d26:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <menu+0x1858>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <menu+0x1858>)
 8002d30:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <menu+0x1858>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d902      	bls.n	8002d40 <menu+0x1744>
				kapi2AcSure = 0;
 8002d3a:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <menu+0x1858>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d40:	f003 fa02 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002d44:	2104      	movs	r1, #4
 8002d46:	4839      	ldr	r0, [pc, #228]	; (8002e2c <menu+0x1830>)
 8002d48:	f006 ffa0 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d119      	bne.n	8002d86 <menu+0x178a>
 8002d52:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <menu+0x1834>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	f083 0301 	eor.w	r3, r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <menu+0x178a>
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <menu+0x1828>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10e      	bne.n	8002d86 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002d68:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <menu+0x1858>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <menu+0x1858>)
 8002d72:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002d74:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <menu+0x1858>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d902      	bls.n	8002d82 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002d7c:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <menu+0x1858>)
 8002d7e:	2205      	movs	r2, #5
 8002d80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d82:	f003 f9e1 	bl	8006148 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d86:	2108      	movs	r1, #8
 8002d88:	4828      	ldr	r0, [pc, #160]	; (8002e2c <menu+0x1830>)
 8002d8a:	f006 ff7f 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10d      	bne.n	8002db0 <menu+0x17b4>
 8002d94:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <menu+0x1834>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <menu+0x1858>)
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <menu+0x1838>)
 8002da8:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002daa:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <menu+0x183c>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <menu+0x1840>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b0d      	cmp	r3, #13
 8002db6:	f040 80b5 	bne.w	8002f24 <menu+0x1928>
		if(dilSecim == 0) {
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <menu+0x1844>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <menu+0x1860>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f7fd fc4e 	bl	8000668 <lcd_print>
 8002dcc:	e008      	b.n	8002de0 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <menu+0x1844>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d104      	bne.n	8002de0 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002dd6:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <menu+0x1864>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f7fd fc44 	bl	8000668 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <menu+0x1868>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d105      	bne.n	8002df4 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002de8:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <menu+0x186c>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	2002      	movs	r0, #2
 8002dee:	f7fd fc3b 	bl	8000668 <lcd_print>
 8002df2:	e048      	b.n	8002e86 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <menu+0x1868>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d13b      	bne.n	8002e74 <menu+0x1878>
			if(dilSecim == 0) {
 8002dfc:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <menu+0x1844>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <menu+0x1870>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	2002      	movs	r0, #2
 8002e0a:	f7fd fc2d 	bl	8000668 <lcd_print>
 8002e0e:	e03a      	b.n	8002e86 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <menu+0x1844>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d136      	bne.n	8002e86 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <menu+0x1874>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f7fd fc23 	bl	8000668 <lcd_print>
 8002e22:	e030      	b.n	8002e86 <menu+0x188a>
 8002e24:	20000d16 	.word	0x20000d16
 8002e28:	0800de78 	.word	0x0800de78
 8002e2c:	40010800 	.word	0x40010800
 8002e30:	20000d3b 	.word	0x20000d3b
 8002e34:	20000c38 	.word	0x20000c38
 8002e38:	20000d38 	.word	0x20000d38
 8002e3c:	20000d0c 	.word	0x20000d0c
 8002e40:	20000d2d 	.word	0x20000d2d
 8002e44:	0800def8 	.word	0x0800def8
 8002e48:	0800de9c 	.word	0x0800de9c
 8002e4c:	0800df0c 	.word	0x0800df0c
 8002e50:	0800dec0 	.word	0x0800dec0
 8002e54:	20000d26 	.word	0x20000d26
 8002e58:	20000cac 	.word	0x20000cac
 8002e5c:	0800df20 	.word	0x0800df20
 8002e60:	0800df34 	.word	0x0800df34
 8002e64:	20000d17 	.word	0x20000d17
 8002e68:	0800de40 	.word	0x0800de40
 8002e6c:	0800de54 	.word	0x0800de54
 8002e70:	0800de64 	.word	0x0800de64
			}
		} else if(kapitablaTip == 2) {
 8002e74:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <menu+0x19e8>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d104      	bne.n	8002e86 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002e7c:	4a5a      	ldr	r2, [pc, #360]	; (8002fe8 <menu+0x19ec>)
 8002e7e:	2101      	movs	r1, #1
 8002e80:	2002      	movs	r0, #2
 8002e82:	f7fd fbf1 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e86:	2102      	movs	r1, #2
 8002e88:	4858      	ldr	r0, [pc, #352]	; (8002fec <menu+0x19f0>)
 8002e8a:	f006 feff 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d115      	bne.n	8002ec0 <menu+0x18c4>
 8002e94:	4b56      	ldr	r3, [pc, #344]	; (8002ff0 <menu+0x19f4>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f083 0301 	eor.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00e      	beq.n	8002ec0 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002ea2:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <menu+0x19e8>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <menu+0x19e8>)
 8002eac:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002eae:	4b4d      	ldr	r3, [pc, #308]	; (8002fe4 <menu+0x19e8>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d902      	bls.n	8002ebc <menu+0x18c0>
				kapitablaTip = 0;
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <menu+0x19e8>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ebc:	f003 f944 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ec0:	2104      	movs	r1, #4
 8002ec2:	484a      	ldr	r0, [pc, #296]	; (8002fec <menu+0x19f0>)
 8002ec4:	f006 fee2 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d115      	bne.n	8002efa <menu+0x18fe>
 8002ece:	4b48      	ldr	r3, [pc, #288]	; (8002ff0 <menu+0x19f4>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f083 0301 	eor.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00e      	beq.n	8002efa <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <menu+0x19e8>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <menu+0x19e8>)
 8002ee6:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002ee8:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <menu+0x19e8>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d902      	bls.n	8002ef6 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ef0:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <menu+0x19e8>)
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ef6:	f003 f927 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002efa:	2108      	movs	r1, #8
 8002efc:	483b      	ldr	r0, [pc, #236]	; (8002fec <menu+0x19f0>)
 8002efe:	f006 fec5 	bl	8009c8c <HAL_GPIO_ReadPin>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10d      	bne.n	8002f24 <menu+0x1928>
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <menu+0x19f4>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	f083 0301 	eor.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002f16:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <menu+0x19e8>)
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <menu+0x19f8>)
 8002f1c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002f1e:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <menu+0x19fc>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <menu+0x1a00>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b0e      	cmp	r3, #14
 8002f2a:	f040 80f2 	bne.w	8003112 <menu+0x1b16>
		if(dilSecim == 0) {
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <menu+0x1a04>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d105      	bne.n	8002f42 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002f36:	4a33      	ldr	r2, [pc, #204]	; (8003004 <menu+0x1a08>)
 8002f38:	2101      	movs	r1, #1
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f7fd fb94 	bl	8000668 <lcd_print>
 8002f40:	e008      	b.n	8002f54 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <menu+0x1a04>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d104      	bne.n	8002f54 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <menu+0x1a0c>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fd fb8a 	bl	8000668 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <menu+0x1a10>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d113      	bne.n	8002f84 <menu+0x1988>
			if(dilSecim == 0){
 8002f5c:	4b28      	ldr	r3, [pc, #160]	; (8003000 <menu+0x1a04>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002f64:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <menu+0x1a14>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f7fd fb7d 	bl	8000668 <lcd_print>
 8002f6e:	e071      	b.n	8003054 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f70:	4b23      	ldr	r3, [pc, #140]	; (8003000 <menu+0x1a04>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d16d      	bne.n	8003054 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <menu+0x1a18>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	f7fd fb73 	bl	8000668 <lcd_print>
 8002f82:	e067      	b.n	8003054 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <menu+0x1a10>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d112      	bne.n	8002fb2 <menu+0x19b6>
			if(dilSecim == 0){
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <menu+0x1a04>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d104      	bne.n	8002f9e <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <menu+0x1a1c>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f7fd fb65 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <menu+0x1a04>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d156      	bne.n	8003054 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002fa6:	4a1d      	ldr	r2, [pc, #116]	; (800301c <menu+0x1a20>)
 8002fa8:	2101      	movs	r1, #1
 8002faa:	2002      	movs	r0, #2
 8002fac:	f7fd fb5c 	bl	8000668 <lcd_print>
 8002fb0:	e050      	b.n	8003054 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <menu+0x1a10>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d136      	bne.n	8003028 <menu+0x1a2c>
			if(dilSecim == 0){
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <menu+0x1a04>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002fc2:	4a17      	ldr	r2, [pc, #92]	; (8003020 <menu+0x1a24>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7fd fb4e 	bl	8000668 <lcd_print>
 8002fcc:	e042      	b.n	8003054 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <menu+0x1a04>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d13e      	bne.n	8003054 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002fd6:	4a13      	ldr	r2, [pc, #76]	; (8003024 <menu+0x1a28>)
 8002fd8:	2101      	movs	r1, #1
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f7fd fb44 	bl	8000668 <lcd_print>
 8002fe0:	e038      	b.n	8003054 <menu+0x1a58>
 8002fe2:	bf00      	nop
 8002fe4:	20000d17 	.word	0x20000d17
 8002fe8:	0800de78 	.word	0x0800de78
 8002fec:	40010800 	.word	0x40010800
 8002ff0:	20000d3b 	.word	0x20000d3b
 8002ff4:	20000c38 	.word	0x20000c38
 8002ff8:	20000d38 	.word	0x20000d38
 8002ffc:	20000d0c 	.word	0x20000d0c
 8003000:	20000d2d 	.word	0x20000d2d
 8003004:	0800df48 	.word	0x0800df48
 8003008:	0800df5c 	.word	0x0800df5c
 800300c:	20000d19 	.word	0x20000d19
 8003010:	0800df70 	.word	0x0800df70
 8003014:	0800df80 	.word	0x0800df80
 8003018:	0800df90 	.word	0x0800df90
 800301c:	0800dfa0 	.word	0x0800dfa0
 8003020:	0800dfb0 	.word	0x0800dfb0
 8003024:	0800dfc4 	.word	0x0800dfc4
			}
		} else if(kapiTablaAcKonum == 3) {
 8003028:	4b9b      	ldr	r3, [pc, #620]	; (8003298 <menu+0x1c9c>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d111      	bne.n	8003054 <menu+0x1a58>
			if(dilSecim == 0) {
 8003030:	4b9a      	ldr	r3, [pc, #616]	; (800329c <menu+0x1ca0>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8003038:	4a99      	ldr	r2, [pc, #612]	; (80032a0 <menu+0x1ca4>)
 800303a:	2101      	movs	r1, #1
 800303c:	2002      	movs	r0, #2
 800303e:	f7fd fb13 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003042:	4b96      	ldr	r3, [pc, #600]	; (800329c <menu+0x1ca0>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d104      	bne.n	8003054 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 800304a:	4a96      	ldr	r2, [pc, #600]	; (80032a4 <menu+0x1ca8>)
 800304c:	2101      	movs	r1, #1
 800304e:	2002      	movs	r0, #2
 8003050:	f7fd fb0a 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003054:	2102      	movs	r1, #2
 8003056:	4894      	ldr	r0, [pc, #592]	; (80032a8 <menu+0x1cac>)
 8003058:	f006 fe18 	bl	8009c8c <HAL_GPIO_ReadPin>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d115      	bne.n	800308e <menu+0x1a92>
 8003062:	4b92      	ldr	r3, [pc, #584]	; (80032ac <menu+0x1cb0>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	f083 0301 	eor.w	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8003070:	4b89      	ldr	r3, [pc, #548]	; (8003298 <menu+0x1c9c>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b87      	ldr	r3, [pc, #540]	; (8003298 <menu+0x1c9c>)
 800307a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 800307c:	4b86      	ldr	r3, [pc, #536]	; (8003298 <menu+0x1c9c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d902      	bls.n	800308a <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8003084:	4b84      	ldr	r3, [pc, #528]	; (8003298 <menu+0x1c9c>)
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800308a:	f003 f85d 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800308e:	2104      	movs	r1, #4
 8003090:	4885      	ldr	r0, [pc, #532]	; (80032a8 <menu+0x1cac>)
 8003092:	f006 fdfb 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003096:	4603      	mov	r3, r0
 8003098:	2b01      	cmp	r3, #1
 800309a:	d115      	bne.n	80030c8 <menu+0x1acc>
 800309c:	4b83      	ldr	r3, [pc, #524]	; (80032ac <menu+0x1cb0>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	f083 0301 	eor.w	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00e      	beq.n	80030c8 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80030aa:	4b7b      	ldr	r3, [pc, #492]	; (8003298 <menu+0x1c9c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4b79      	ldr	r3, [pc, #484]	; (8003298 <menu+0x1c9c>)
 80030b4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80030b6:	4b78      	ldr	r3, [pc, #480]	; (8003298 <menu+0x1c9c>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d902      	bls.n	80030c4 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 80030be:	4b76      	ldr	r3, [pc, #472]	; (8003298 <menu+0x1c9c>)
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030c4:	f003 f840 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030c8:	2108      	movs	r1, #8
 80030ca:	4877      	ldr	r0, [pc, #476]	; (80032a8 <menu+0x1cac>)
 80030cc:	f006 fdde 	bl	8009c8c <HAL_GPIO_ReadPin>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d11d      	bne.n	8003112 <menu+0x1b16>
 80030d6:	4b75      	ldr	r3, [pc, #468]	; (80032ac <menu+0x1cb0>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	f083 0301 	eor.w	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d016      	beq.n	8003112 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80030e4:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <menu+0x1c9c>)
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	4b71      	ldr	r3, [pc, #452]	; (80032b0 <menu+0x1cb4>)
 80030ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <menu+0x1c9c>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <menu+0x1b02>
 80030f6:	4b68      	ldr	r3, [pc, #416]	; (8003298 <menu+0x1c9c>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d106      	bne.n	800310c <menu+0x1b10>
				altLimit = 1;
 80030fe:	4b6d      	ldr	r3, [pc, #436]	; (80032b4 <menu+0x1cb8>)
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003104:	4b6b      	ldr	r3, [pc, #428]	; (80032b4 <menu+0x1cb8>)
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	4b69      	ldr	r3, [pc, #420]	; (80032b0 <menu+0x1cb4>)
 800310a:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800310c:	4b6a      	ldr	r3, [pc, #424]	; (80032b8 <menu+0x1cbc>)
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8003112:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <menu+0x1cc0>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	d17f      	bne.n	800321a <menu+0x1c1e>
		if(dilSecim == 0) {
 800311a:	4b60      	ldr	r3, [pc, #384]	; (800329c <menu+0x1ca0>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8003122:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <menu+0x1cc4>)
 8003124:	2101      	movs	r1, #1
 8003126:	2001      	movs	r0, #1
 8003128:	f7fd fa9e 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800312c:	4a65      	ldr	r2, [pc, #404]	; (80032c4 <menu+0x1cc8>)
 800312e:	2101      	movs	r1, #1
 8003130:	2002      	movs	r0, #2
 8003132:	f7fd fa99 	bl	8000668 <lcd_print>
 8003136:	e00d      	b.n	8003154 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8003138:	4b58      	ldr	r3, [pc, #352]	; (800329c <menu+0x1ca0>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d109      	bne.n	8003154 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003140:	4a61      	ldr	r2, [pc, #388]	; (80032c8 <menu+0x1ccc>)
 8003142:	2101      	movs	r1, #1
 8003144:	2001      	movs	r0, #1
 8003146:	f7fd fa8f 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800314a:	4a60      	ldr	r2, [pc, #384]	; (80032cc <menu+0x1cd0>)
 800314c:	2101      	movs	r1, #1
 800314e:	2002      	movs	r0, #2
 8003150:	f7fd fa8a 	bl	8000668 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003154:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <menu+0x1cd4>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	220a      	movs	r2, #10
 800315a:	495e      	ldr	r1, [pc, #376]	; (80032d4 <menu+0x1cd8>)
 800315c:	4618      	mov	r0, r3
 800315e:	f009 fdc1 	bl	800cce4 <itoa>
		lcd_print(2,16,snum);
 8003162:	4a5c      	ldr	r2, [pc, #368]	; (80032d4 <menu+0x1cd8>)
 8003164:	2110      	movs	r1, #16
 8003166:	2002      	movs	r0, #2
 8003168:	f7fd fa7e 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800316c:	2102      	movs	r1, #2
 800316e:	484e      	ldr	r0, [pc, #312]	; (80032a8 <menu+0x1cac>)
 8003170:	f006 fd8c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d119      	bne.n	80031ae <menu+0x1bb2>
 800317a:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <menu+0x1cb0>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	f083 0301 	eor.w	r3, r3, #1
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <menu+0x1bb2>
 8003188:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <menu+0x1cdc>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10e      	bne.n	80031ae <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003190:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <menu+0x1cd4>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	b2da      	uxtb	r2, r3
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <menu+0x1cd4>)
 800319a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <menu+0x1cd4>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d902      	bls.n	80031aa <menu+0x1bae>
				kapiTablaAcSure = 0;
 80031a4:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <menu+0x1cd4>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031aa:	f002 ffcd 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80031ae:	2104      	movs	r1, #4
 80031b0:	483d      	ldr	r0, [pc, #244]	; (80032a8 <menu+0x1cac>)
 80031b2:	f006 fd6b 	bl	8009c8c <HAL_GPIO_ReadPin>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d119      	bne.n	80031f0 <menu+0x1bf4>
 80031bc:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <menu+0x1cb0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	f083 0301 	eor.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d012      	beq.n	80031f0 <menu+0x1bf4>
 80031ca:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <menu+0x1cdc>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10e      	bne.n	80031f0 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <menu+0x1cd4>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <menu+0x1cd4>)
 80031dc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80031de:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <menu+0x1cd4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d902      	bls.n	80031ec <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <menu+0x1cd4>)
 80031e8:	2205      	movs	r2, #5
 80031ea:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80031ec:	f002 ffac 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f0:	2108      	movs	r1, #8
 80031f2:	482d      	ldr	r0, [pc, #180]	; (80032a8 <menu+0x1cac>)
 80031f4:	f006 fd4a 	bl	8009c8c <HAL_GPIO_ReadPin>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d10d      	bne.n	800321a <menu+0x1c1e>
 80031fe:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <menu+0x1cb0>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	f083 0301 	eor.w	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 800320c:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <menu+0x1cd4>)
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <menu+0x1cb4>)
 8003212:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <menu+0x1cbc>)
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800321a:	4b28      	ldr	r3, [pc, #160]	; (80032bc <menu+0x1cc0>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b10      	cmp	r3, #16
 8003220:	f040 80bc 	bne.w	800339c <menu+0x1da0>
		if(dilSecim == 0) {
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <menu+0x1ca0>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <menu+0x1ce0>)
 800322e:	2101      	movs	r1, #1
 8003230:	2001      	movs	r0, #1
 8003232:	f7fd fa19 	bl	8000668 <lcd_print>
 8003236:	e008      	b.n	800324a <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003238:	4b18      	ldr	r3, [pc, #96]	; (800329c <menu+0x1ca0>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d104      	bne.n	800324a <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <menu+0x1ce4>)
 8003242:	2101      	movs	r1, #1
 8003244:	2001      	movs	r0, #1
 8003246:	f7fd fa0f 	bl	8000668 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <menu+0x1ce8>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d113      	bne.n	800327a <menu+0x1c7e>
			if(dilSecim == 0) {
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <menu+0x1ca0>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <menu+0x1ca4>)
 800325c:	2101      	movs	r1, #1
 800325e:	2002      	movs	r0, #2
 8003260:	f7fd fa02 	bl	8000668 <lcd_print>
 8003264:	e04b      	b.n	80032fe <menu+0x1d02>
			} else if(dilSecim == 1) {
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <menu+0x1ca0>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d147      	bne.n	80032fe <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800326e:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <menu+0x1ca8>)
 8003270:	2101      	movs	r1, #1
 8003272:	2002      	movs	r0, #2
 8003274:	f7fd f9f8 	bl	8000668 <lcd_print>
 8003278:	e041      	b.n	80032fe <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <menu+0x1ce8>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d13d      	bne.n	80032fe <menu+0x1d02>
			if(dilSecim == 0) {
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <menu+0x1ca0>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d130      	bne.n	80032ec <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <menu+0x1cec>)
 800328c:	2101      	movs	r1, #1
 800328e:	2002      	movs	r0, #2
 8003290:	f7fd f9ea 	bl	8000668 <lcd_print>
 8003294:	e033      	b.n	80032fe <menu+0x1d02>
 8003296:	bf00      	nop
 8003298:	20000d19 	.word	0x20000d19
 800329c:	20000d2d 	.word	0x20000d2d
 80032a0:	0800dc38 	.word	0x0800dc38
 80032a4:	0800dc4c 	.word	0x0800dc4c
 80032a8:	40010800 	.word	0x40010800
 80032ac:	20000d3b 	.word	0x20000d3b
 80032b0:	20000c38 	.word	0x20000c38
 80032b4:	20000d12 	.word	0x20000d12
 80032b8:	20000d38 	.word	0x20000d38
 80032bc:	20000d0c 	.word	0x20000d0c
 80032c0:	0800dfd8 	.word	0x0800dfd8
 80032c4:	0800de9c 	.word	0x0800de9c
 80032c8:	0800dfec 	.word	0x0800dfec
 80032cc:	0800dec0 	.word	0x0800dec0
 80032d0:	20000d27 	.word	0x20000d27
 80032d4:	20000cac 	.word	0x20000cac
 80032d8:	20000d17 	.word	0x20000d17
 80032dc:	0800e000 	.word	0x0800e000
 80032e0:	0800e014 	.word	0x0800e014
 80032e4:	20000d1a 	.word	0x20000d1a
 80032e8:	0800dc98 	.word	0x0800dc98
			} else if(dilSecim == 1) {
 80032ec:	4b99      	ldr	r3, [pc, #612]	; (8003554 <menu+0x1f58>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d104      	bne.n	80032fe <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80032f4:	4a98      	ldr	r2, [pc, #608]	; (8003558 <menu+0x1f5c>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	2002      	movs	r0, #2
 80032fa:	f7fd f9b5 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fe:	2102      	movs	r1, #2
 8003300:	4896      	ldr	r0, [pc, #600]	; (800355c <menu+0x1f60>)
 8003302:	f006 fcc3 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	d115      	bne.n	8003338 <menu+0x1d3c>
 800330c:	4b94      	ldr	r3, [pc, #592]	; (8003560 <menu+0x1f64>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00e      	beq.n	8003338 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800331a:	4b92      	ldr	r3, [pc, #584]	; (8003564 <menu+0x1f68>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4b90      	ldr	r3, [pc, #576]	; (8003564 <menu+0x1f68>)
 8003324:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003326:	4b8f      	ldr	r3, [pc, #572]	; (8003564 <menu+0x1f68>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d902      	bls.n	8003334 <menu+0x1d38>
				yukariYavasLimit = 0;
 800332e:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <menu+0x1f68>)
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003334:	f002 ff08 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003338:	2104      	movs	r1, #4
 800333a:	4888      	ldr	r0, [pc, #544]	; (800355c <menu+0x1f60>)
 800333c:	f006 fca6 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003340:	4603      	mov	r3, r0
 8003342:	2b01      	cmp	r3, #1
 8003344:	d115      	bne.n	8003372 <menu+0x1d76>
 8003346:	4b86      	ldr	r3, [pc, #536]	; (8003560 <menu+0x1f64>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003354:	4b83      	ldr	r3, [pc, #524]	; (8003564 <menu+0x1f68>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	3b01      	subs	r3, #1
 800335a:	b2da      	uxtb	r2, r3
 800335c:	4b81      	ldr	r3, [pc, #516]	; (8003564 <menu+0x1f68>)
 800335e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003360:	4b80      	ldr	r3, [pc, #512]	; (8003564 <menu+0x1f68>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003368:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <menu+0x1f68>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800336e:	f002 feeb 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003372:	2108      	movs	r1, #8
 8003374:	4879      	ldr	r0, [pc, #484]	; (800355c <menu+0x1f60>)
 8003376:	f006 fc89 	bl	8009c8c <HAL_GPIO_ReadPin>
 800337a:	4603      	mov	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10d      	bne.n	800339c <menu+0x1da0>
 8003380:	4b77      	ldr	r3, [pc, #476]	; (8003560 <menu+0x1f64>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	f083 0301 	eor.w	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800338e:	4b75      	ldr	r3, [pc, #468]	; (8003564 <menu+0x1f68>)
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	4b75      	ldr	r3, [pc, #468]	; (8003568 <menu+0x1f6c>)
 8003394:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003396:	4b75      	ldr	r3, [pc, #468]	; (800356c <menu+0x1f70>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800339c:	4b74      	ldr	r3, [pc, #464]	; (8003570 <menu+0x1f74>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b11      	cmp	r3, #17
 80033a2:	f040 80c3 	bne.w	800352c <menu+0x1f30>
		if(dilSecim == 0) {
 80033a6:	4b6b      	ldr	r3, [pc, #428]	; (8003554 <menu+0x1f58>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80033ae:	4a71      	ldr	r2, [pc, #452]	; (8003574 <menu+0x1f78>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7fd f958 	bl	8000668 <lcd_print>
 80033b8:	e008      	b.n	80033cc <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80033ba:	4b66      	ldr	r3, [pc, #408]	; (8003554 <menu+0x1f58>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d104      	bne.n	80033cc <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80033c2:	4a6d      	ldr	r2, [pc, #436]	; (8003578 <menu+0x1f7c>)
 80033c4:	2101      	movs	r1, #1
 80033c6:	2001      	movs	r0, #1
 80033c8:	f7fd f94e 	bl	8000668 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80033cc:	4b6b      	ldr	r3, [pc, #428]	; (800357c <menu+0x1f80>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d113      	bne.n	80033fc <menu+0x1e00>
			if(dilSecim == 0){
 80033d4:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <menu+0x1f58>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <menu+0x1f84>)
 80033de:	2101      	movs	r1, #1
 80033e0:	2002      	movs	r0, #2
 80033e2:	f7fd f941 	bl	8000668 <lcd_print>
 80033e6:	e038      	b.n	800345a <menu+0x1e5e>
			} else if(dilSecim == 1){
 80033e8:	4b5a      	ldr	r3, [pc, #360]	; (8003554 <menu+0x1f58>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d134      	bne.n	800345a <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80033f0:	4a64      	ldr	r2, [pc, #400]	; (8003584 <menu+0x1f88>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	2002      	movs	r0, #2
 80033f6:	f7fd f937 	bl	8000668 <lcd_print>
 80033fa:	e02e      	b.n	800345a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033fc:	4b5f      	ldr	r3, [pc, #380]	; (800357c <menu+0x1f80>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d113      	bne.n	800342c <menu+0x1e30>
			if(dilSecim == 0){
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <menu+0x1f58>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d105      	bne.n	8003418 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 800340c:	4a5e      	ldr	r2, [pc, #376]	; (8003588 <menu+0x1f8c>)
 800340e:	2101      	movs	r1, #1
 8003410:	2002      	movs	r0, #2
 8003412:	f7fd f929 	bl	8000668 <lcd_print>
 8003416:	e020      	b.n	800345a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003418:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <menu+0x1f58>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d11c      	bne.n	800345a <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003420:	4a5a      	ldr	r2, [pc, #360]	; (800358c <menu+0x1f90>)
 8003422:	2101      	movs	r1, #1
 8003424:	2002      	movs	r0, #2
 8003426:	f7fd f91f 	bl	8000668 <lcd_print>
 800342a:	e016      	b.n	800345a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <menu+0x1f80>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d112      	bne.n	800345a <menu+0x1e5e>
			if(dilSecim == 0) {
 8003434:	4b47      	ldr	r3, [pc, #284]	; (8003554 <menu+0x1f58>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 800343c:	4a54      	ldr	r2, [pc, #336]	; (8003590 <menu+0x1f94>)
 800343e:	2101      	movs	r1, #1
 8003440:	2002      	movs	r0, #2
 8003442:	f7fd f911 	bl	8000668 <lcd_print>
 8003446:	e008      	b.n	800345a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003448:	4b42      	ldr	r3, [pc, #264]	; (8003554 <menu+0x1f58>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d104      	bne.n	800345a <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003450:	4a50      	ldr	r2, [pc, #320]	; (8003594 <menu+0x1f98>)
 8003452:	2101      	movs	r1, #1
 8003454:	2002      	movs	r0, #2
 8003456:	f7fd f907 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800345a:	2102      	movs	r1, #2
 800345c:	483f      	ldr	r0, [pc, #252]	; (800355c <menu+0x1f60>)
 800345e:	f006 fc15 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d115      	bne.n	8003494 <menu+0x1e98>
 8003468:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <menu+0x1f64>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <menu+0x1f80>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <menu+0x1f80>)
 8003480:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003482:	4b3e      	ldr	r3, [pc, #248]	; (800357c <menu+0x1f80>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d902      	bls.n	8003490 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800348a:	4b3c      	ldr	r3, [pc, #240]	; (800357c <menu+0x1f80>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003490:	f002 fe5a 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003494:	2104      	movs	r1, #4
 8003496:	4831      	ldr	r0, [pc, #196]	; (800355c <menu+0x1f60>)
 8003498:	f006 fbf8 	bl	8009c8c <HAL_GPIO_ReadPin>
 800349c:	4603      	mov	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d115      	bne.n	80034ce <menu+0x1ed2>
 80034a2:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <menu+0x1f64>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	f083 0301 	eor.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80034b0:	4b32      	ldr	r3, [pc, #200]	; (800357c <menu+0x1f80>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b30      	ldr	r3, [pc, #192]	; (800357c <menu+0x1f80>)
 80034ba:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80034bc:	4b2f      	ldr	r3, [pc, #188]	; (800357c <menu+0x1f80>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d902      	bls.n	80034ca <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80034c4:	4b2d      	ldr	r3, [pc, #180]	; (800357c <menu+0x1f80>)
 80034c6:	2202      	movs	r2, #2
 80034c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034ca:	f002 fe3d 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ce:	2108      	movs	r1, #8
 80034d0:	4822      	ldr	r0, [pc, #136]	; (800355c <menu+0x1f60>)
 80034d2:	f006 fbdb 	bl	8009c8c <HAL_GPIO_ReadPin>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d127      	bne.n	800352c <menu+0x1f30>
 80034dc:	4b20      	ldr	r3, [pc, #128]	; (8003560 <menu+0x1f64>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f083 0301 	eor.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <menu+0x1f80>)
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <menu+0x1f6c>)
 80034f0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <menu+0x1f80>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d003      	beq.n	8003502 <menu+0x1f06>
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <menu+0x1f80>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d106      	bne.n	8003510 <menu+0x1f14>
				calismaSekli = 0;
 8003502:	4b25      	ldr	r3, [pc, #148]	; (8003598 <menu+0x1f9c>)
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <menu+0x1f9c>)
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <menu+0x1f6c>)
 800350e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <menu+0x1f80>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d106      	bne.n	8003526 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003518:	4b20      	ldr	r3, [pc, #128]	; (800359c <menu+0x1fa0>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800351e:	4b1f      	ldr	r3, [pc, #124]	; (800359c <menu+0x1fa0>)
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <menu+0x1f6c>)
 8003524:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <menu+0x1f70>)
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <menu+0x1f74>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b12      	cmp	r3, #18
 8003532:	f040 80d5 	bne.w	80036e0 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <menu+0x1f80>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d13c      	bne.n	80035b8 <menu+0x1fbc>
			if(dilSecim == 0) {
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <menu+0x1f58>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d12e      	bne.n	80035a4 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <menu+0x1fa4>)
 8003548:	2101      	movs	r1, #1
 800354a:	2001      	movs	r0, #1
 800354c:	f7fd f88c 	bl	8000668 <lcd_print>
 8003550:	e048      	b.n	80035e4 <menu+0x1fe8>
 8003552:	bf00      	nop
 8003554:	20000d2d 	.word	0x20000d2d
 8003558:	0800dcac 	.word	0x0800dcac
 800355c:	40010800 	.word	0x40010800
 8003560:	20000d3b 	.word	0x20000d3b
 8003564:	20000d1a 	.word	0x20000d1a
 8003568:	20000c38 	.word	0x20000c38
 800356c:	20000d38 	.word	0x20000d38
 8003570:	20000d0c 	.word	0x20000d0c
 8003574:	0800e028 	.word	0x0800e028
 8003578:	0800e03c 	.word	0x0800e03c
 800357c:	20000d1b 	.word	0x20000d1b
 8003580:	0800e050 	.word	0x0800e050
 8003584:	0800e060 	.word	0x0800e060
 8003588:	0800e070 	.word	0x0800e070
 800358c:	0800e080 	.word	0x0800e080
 8003590:	0800dc38 	.word	0x0800dc38
 8003594:	0800dc4c 	.word	0x0800dc4c
 8003598:	20000d0d 	.word	0x20000d0d
 800359c:	20000d1e 	.word	0x20000d1e
 80035a0:	0800e090 	.word	0x0800e090
			} else if(dilSecim == 1) {
 80035a4:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <menu+0x2198>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d11b      	bne.n	80035e4 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80035ac:	4a7a      	ldr	r2, [pc, #488]	; (8003798 <menu+0x219c>)
 80035ae:	2101      	movs	r1, #1
 80035b0:	2001      	movs	r0, #1
 80035b2:	f7fd f859 	bl	8000668 <lcd_print>
 80035b6:	e015      	b.n	80035e4 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80035b8:	4b78      	ldr	r3, [pc, #480]	; (800379c <menu+0x21a0>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d111      	bne.n	80035e4 <menu+0x1fe8>
			if(dilSecim == 0){
 80035c0:	4b74      	ldr	r3, [pc, #464]	; (8003794 <menu+0x2198>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80035c8:	4a75      	ldr	r2, [pc, #468]	; (80037a0 <menu+0x21a4>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7fd f84b 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 80035d2:	4b70      	ldr	r3, [pc, #448]	; (8003794 <menu+0x2198>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d104      	bne.n	80035e4 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80035da:	4a72      	ldr	r2, [pc, #456]	; (80037a4 <menu+0x21a8>)
 80035dc:	2101      	movs	r1, #1
 80035de:	2001      	movs	r0, #1
 80035e0:	f7fd f842 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80035e4:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <menu+0x21ac>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d113      	bne.n	8003614 <menu+0x2018>
			if(dilSecim == 0) {
 80035ec:	4b69      	ldr	r3, [pc, #420]	; (8003794 <menu+0x2198>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80035f4:	4a6d      	ldr	r2, [pc, #436]	; (80037ac <menu+0x21b0>)
 80035f6:	2101      	movs	r1, #1
 80035f8:	2002      	movs	r0, #2
 80035fa:	f7fd f835 	bl	8000668 <lcd_print>
 80035fe:	e020      	b.n	8003642 <menu+0x2046>
			} else if(dilSecim == 1){
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <menu+0x2198>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d11c      	bne.n	8003642 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003608:	4a69      	ldr	r2, [pc, #420]	; (80037b0 <menu+0x21b4>)
 800360a:	2101      	movs	r1, #1
 800360c:	2002      	movs	r0, #2
 800360e:	f7fd f82b 	bl	8000668 <lcd_print>
 8003612:	e016      	b.n	8003642 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003614:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <menu+0x21ac>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d112      	bne.n	8003642 <menu+0x2046>
			if(dilSecim == 0){
 800361c:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <menu+0x2198>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003624:	4a63      	ldr	r2, [pc, #396]	; (80037b4 <menu+0x21b8>)
 8003626:	2101      	movs	r1, #1
 8003628:	2002      	movs	r0, #2
 800362a:	f7fd f81d 	bl	8000668 <lcd_print>
 800362e:	e008      	b.n	8003642 <menu+0x2046>
			} else if(dilSecim == 1){
 8003630:	4b58      	ldr	r3, [pc, #352]	; (8003794 <menu+0x2198>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d104      	bne.n	8003642 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003638:	4a5f      	ldr	r2, [pc, #380]	; (80037b8 <menu+0x21bc>)
 800363a:	2101      	movs	r1, #1
 800363c:	2002      	movs	r0, #2
 800363e:	f7fd f813 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003642:	2102      	movs	r1, #2
 8003644:	485d      	ldr	r0, [pc, #372]	; (80037bc <menu+0x21c0>)
 8003646:	f006 fb21 	bl	8009c8c <HAL_GPIO_ReadPin>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d115      	bne.n	800367c <menu+0x2080>
 8003650:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <menu+0x21c4>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800365e:	4b52      	ldr	r3, [pc, #328]	; (80037a8 <menu+0x21ac>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <menu+0x21ac>)
 8003668:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <menu+0x21ac>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d902      	bls.n	8003678 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <menu+0x21ac>)
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003678:	f002 fd66 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800367c:	2104      	movs	r1, #4
 800367e:	484f      	ldr	r0, [pc, #316]	; (80037bc <menu+0x21c0>)
 8003680:	f006 fb04 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003684:	4603      	mov	r3, r0
 8003686:	2b01      	cmp	r3, #1
 8003688:	d115      	bne.n	80036b6 <menu+0x20ba>
 800368a:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <menu+0x21c4>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <menu+0x21ac>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	3b01      	subs	r3, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <menu+0x21ac>)
 80036a2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <menu+0x21ac>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80036ac:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <menu+0x21ac>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036b2:	f002 fd49 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b6:	2108      	movs	r1, #8
 80036b8:	4840      	ldr	r0, [pc, #256]	; (80037bc <menu+0x21c0>)
 80036ba:	f006 fae7 	bl	8009c8c <HAL_GPIO_ReadPin>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10d      	bne.n	80036e0 <menu+0x20e4>
 80036c4:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <menu+0x21c4>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f083 0301 	eor.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80036d2:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <menu+0x21ac>)
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <menu+0x21c8>)
 80036d8:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <menu+0x21cc>)
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80036e0:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <menu+0x21d0>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b13      	cmp	r3, #19
 80036e6:	f040 80d5 	bne.w	8003894 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80036ea:	4b2c      	ldr	r3, [pc, #176]	; (800379c <menu+0x21a0>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d113      	bne.n	800371a <menu+0x211e>
			if(dilSecim == 0) {
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <menu+0x2198>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80036fa:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <menu+0x21d4>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	2001      	movs	r0, #1
 8003700:	f7fc ffb2 	bl	8000668 <lcd_print>
 8003704:	e01f      	b.n	8003746 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <menu+0x2198>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d11b      	bne.n	8003746 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800370e:	4a31      	ldr	r2, [pc, #196]	; (80037d4 <menu+0x21d8>)
 8003710:	2101      	movs	r1, #1
 8003712:	2001      	movs	r0, #1
 8003714:	f7fc ffa8 	bl	8000668 <lcd_print>
 8003718:	e015      	b.n	8003746 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <menu+0x21a0>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d111      	bne.n	8003746 <menu+0x214a>
			if(dilSecim == 0) {
 8003722:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <menu+0x2198>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800372a:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <menu+0x21dc>)
 800372c:	2101      	movs	r1, #1
 800372e:	2001      	movs	r0, #1
 8003730:	f7fc ff9a 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <menu+0x2198>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d104      	bne.n	8003746 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <menu+0x21e0>)
 800373e:	2101      	movs	r1, #1
 8003740:	2001      	movs	r0, #1
 8003742:	f7fc ff91 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <menu+0x21e4>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d113      	bne.n	8003776 <menu+0x217a>
			if(dilSecim == 0) {
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <menu+0x2198>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003756:	4a15      	ldr	r2, [pc, #84]	; (80037ac <menu+0x21b0>)
 8003758:	2101      	movs	r1, #1
 800375a:	2002      	movs	r0, #2
 800375c:	f7fc ff84 	bl	8000668 <lcd_print>
 8003760:	e049      	b.n	80037f6 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <menu+0x2198>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d145      	bne.n	80037f6 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800376a:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <menu+0x21b4>)
 800376c:	2101      	movs	r1, #1
 800376e:	2002      	movs	r0, #2
 8003770:	f7fc ff7a 	bl	8000668 <lcd_print>
 8003774:	e03f      	b.n	80037f6 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003776:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <menu+0x21e4>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d13b      	bne.n	80037f6 <menu+0x21fa>
			if(dilSecim == 0) {
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <menu+0x2198>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d12e      	bne.n	80037e4 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003786:	4a0b      	ldr	r2, [pc, #44]	; (80037b4 <menu+0x21b8>)
 8003788:	2101      	movs	r1, #1
 800378a:	2002      	movs	r0, #2
 800378c:	f7fc ff6c 	bl	8000668 <lcd_print>
 8003790:	e031      	b.n	80037f6 <menu+0x21fa>
 8003792:	bf00      	nop
 8003794:	20000d2d 	.word	0x20000d2d
 8003798:	0800e0a4 	.word	0x0800e0a4
 800379c:	20000d1b 	.word	0x20000d1b
 80037a0:	0800e0b4 	.word	0x0800e0b4
 80037a4:	0800e0c8 	.word	0x0800e0c8
 80037a8:	20000d1c 	.word	0x20000d1c
 80037ac:	0800dc38 	.word	0x0800dc38
 80037b0:	0800dc4c 	.word	0x0800dc4c
 80037b4:	0800dc98 	.word	0x0800dc98
 80037b8:	0800dcac 	.word	0x0800dcac
 80037bc:	40010800 	.word	0x40010800
 80037c0:	20000d3b 	.word	0x20000d3b
 80037c4:	20000c38 	.word	0x20000c38
 80037c8:	20000d38 	.word	0x20000d38
 80037cc:	20000d0c 	.word	0x20000d0c
 80037d0:	0800e0dc 	.word	0x0800e0dc
 80037d4:	0800e0f0 	.word	0x0800e0f0
 80037d8:	0800e104 	.word	0x0800e104
 80037dc:	0800e118 	.word	0x0800e118
 80037e0:	20000d1d 	.word	0x20000d1d
			} else if(dilSecim == 1) {
 80037e4:	4b90      	ldr	r3, [pc, #576]	; (8003a28 <menu+0x242c>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d104      	bne.n	80037f6 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80037ec:	4a8f      	ldr	r2, [pc, #572]	; (8003a2c <menu+0x2430>)
 80037ee:	2101      	movs	r1, #1
 80037f0:	2002      	movs	r0, #2
 80037f2:	f7fc ff39 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f6:	2102      	movs	r1, #2
 80037f8:	488d      	ldr	r0, [pc, #564]	; (8003a30 <menu+0x2434>)
 80037fa:	f006 fa47 	bl	8009c8c <HAL_GPIO_ReadPin>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d115      	bne.n	8003830 <menu+0x2234>
 8003804:	4b8b      	ldr	r3, [pc, #556]	; (8003a34 <menu+0x2438>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f083 0301 	eor.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003812:	4b89      	ldr	r3, [pc, #548]	; (8003a38 <menu+0x243c>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b87      	ldr	r3, [pc, #540]	; (8003a38 <menu+0x243c>)
 800381c:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800381e:	4b86      	ldr	r3, [pc, #536]	; (8003a38 <menu+0x243c>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d902      	bls.n	800382c <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003826:	4b84      	ldr	r3, [pc, #528]	; (8003a38 <menu+0x243c>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800382c:	f002 fc8c 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003830:	2104      	movs	r1, #4
 8003832:	487f      	ldr	r0, [pc, #508]	; (8003a30 <menu+0x2434>)
 8003834:	f006 fa2a 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003838:	4603      	mov	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d115      	bne.n	800386a <menu+0x226e>
 800383e:	4b7d      	ldr	r3, [pc, #500]	; (8003a34 <menu+0x2438>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	f083 0301 	eor.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800384c:	4b7a      	ldr	r3, [pc, #488]	; (8003a38 <menu+0x243c>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3b01      	subs	r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b78      	ldr	r3, [pc, #480]	; (8003a38 <menu+0x243c>)
 8003856:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003858:	4b77      	ldr	r3, [pc, #476]	; (8003a38 <menu+0x243c>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003860:	4b75      	ldr	r3, [pc, #468]	; (8003a38 <menu+0x243c>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003866:	f002 fc6f 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800386a:	2108      	movs	r1, #8
 800386c:	4870      	ldr	r0, [pc, #448]	; (8003a30 <menu+0x2434>)
 800386e:	f006 fa0d 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003872:	4603      	mov	r3, r0
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10d      	bne.n	8003894 <menu+0x2298>
 8003878:	4b6e      	ldr	r3, [pc, #440]	; (8003a34 <menu+0x2438>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f083 0301 	eor.w	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003886:	4b6c      	ldr	r3, [pc, #432]	; (8003a38 <menu+0x243c>)
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	4b6c      	ldr	r3, [pc, #432]	; (8003a3c <menu+0x2440>)
 800388c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800388e:	4b6c      	ldr	r3, [pc, #432]	; (8003a40 <menu+0x2444>)
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003894:	4b6b      	ldr	r3, [pc, #428]	; (8003a44 <menu+0x2448>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b14      	cmp	r3, #20
 800389a:	f040 80b5 	bne.w	8003a08 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800389e:	4b6a      	ldr	r3, [pc, #424]	; (8003a48 <menu+0x244c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d113      	bne.n	80038ce <menu+0x22d2>
			if(dilSecim == 0) {
 80038a6:	4b60      	ldr	r3, [pc, #384]	; (8003a28 <menu+0x242c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80038ae:	4a67      	ldr	r2, [pc, #412]	; (8003a4c <menu+0x2450>)
 80038b0:	2101      	movs	r1, #1
 80038b2:	2001      	movs	r0, #1
 80038b4:	f7fc fed8 	bl	8000668 <lcd_print>
 80038b8:	e020      	b.n	80038fc <menu+0x2300>
			} else if(dilSecim == 1) {
 80038ba:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <menu+0x242c>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d11c      	bne.n	80038fc <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80038c2:	4a63      	ldr	r2, [pc, #396]	; (8003a50 <menu+0x2454>)
 80038c4:	2101      	movs	r1, #1
 80038c6:	2001      	movs	r0, #1
 80038c8:	f7fc fece 	bl	8000668 <lcd_print>
 80038cc:	e016      	b.n	80038fc <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80038ce:	4b5e      	ldr	r3, [pc, #376]	; (8003a48 <menu+0x244c>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d112      	bne.n	80038fc <menu+0x2300>
			if(dilSecim == 0) {
 80038d6:	4b54      	ldr	r3, [pc, #336]	; (8003a28 <menu+0x242c>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80038de:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <menu+0x2458>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	2001      	movs	r0, #1
 80038e4:	f7fc fec0 	bl	8000668 <lcd_print>
 80038e8:	e008      	b.n	80038fc <menu+0x2300>
			} else if(dilSecim == 1) {
 80038ea:	4b4f      	ldr	r3, [pc, #316]	; (8003a28 <menu+0x242c>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d104      	bne.n	80038fc <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80038f2:	4a59      	ldr	r2, [pc, #356]	; (8003a58 <menu+0x245c>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	2001      	movs	r0, #1
 80038f8:	f7fc feb6 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80038fc:	4b57      	ldr	r3, [pc, #348]	; (8003a5c <menu+0x2460>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d113      	bne.n	800392c <menu+0x2330>
			if(dilSecim == 0) {
 8003904:	4b48      	ldr	r3, [pc, #288]	; (8003a28 <menu+0x242c>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 800390c:	4a54      	ldr	r2, [pc, #336]	; (8003a60 <menu+0x2464>)
 800390e:	2101      	movs	r1, #1
 8003910:	2002      	movs	r0, #2
 8003912:	f7fc fea9 	bl	8000668 <lcd_print>
 8003916:	e020      	b.n	800395a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003918:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <menu+0x242c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d11c      	bne.n	800395a <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003920:	4a50      	ldr	r2, [pc, #320]	; (8003a64 <menu+0x2468>)
 8003922:	2101      	movs	r1, #1
 8003924:	2002      	movs	r0, #2
 8003926:	f7fc fe9f 	bl	8000668 <lcd_print>
 800392a:	e016      	b.n	800395a <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 800392c:	4b4b      	ldr	r3, [pc, #300]	; (8003a5c <menu+0x2460>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d112      	bne.n	800395a <menu+0x235e>
			if(dilSecim == 0) {
 8003934:	4b3c      	ldr	r3, [pc, #240]	; (8003a28 <menu+0x242c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 800393c:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <menu+0x246c>)
 800393e:	2101      	movs	r1, #1
 8003940:	2002      	movs	r0, #2
 8003942:	f7fc fe91 	bl	8000668 <lcd_print>
 8003946:	e008      	b.n	800395a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003948:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <menu+0x242c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d104      	bne.n	800395a <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003950:	4a46      	ldr	r2, [pc, #280]	; (8003a6c <menu+0x2470>)
 8003952:	2101      	movs	r1, #1
 8003954:	2002      	movs	r0, #2
 8003956:	f7fc fe87 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800395a:	2102      	movs	r1, #2
 800395c:	4834      	ldr	r0, [pc, #208]	; (8003a30 <menu+0x2434>)
 800395e:	f006 f995 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003962:	4603      	mov	r3, r0
 8003964:	2b01      	cmp	r3, #1
 8003966:	d119      	bne.n	800399c <menu+0x23a0>
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <menu+0x2438>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f083 0301 	eor.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d012      	beq.n	800399c <menu+0x23a0>
 8003976:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <menu+0x244c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d10e      	bne.n	800399c <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800397e:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <menu+0x2460>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b35      	ldr	r3, [pc, #212]	; (8003a5c <menu+0x2460>)
 8003988:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800398a:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <menu+0x2460>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d902      	bls.n	8003998 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003992:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <menu+0x2460>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003998:	f002 fbd6 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800399c:	2104      	movs	r1, #4
 800399e:	4824      	ldr	r0, [pc, #144]	; (8003a30 <menu+0x2434>)
 80039a0:	f006 f974 	bl	8009c8c <HAL_GPIO_ReadPin>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d119      	bne.n	80039de <menu+0x23e2>
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <menu+0x2438>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	f083 0301 	eor.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d012      	beq.n	80039de <menu+0x23e2>
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <menu+0x244c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d10e      	bne.n	80039de <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <menu+0x2460>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <menu+0x2460>)
 80039ca:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <menu+0x2460>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <menu+0x2460>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039da:	f002 fbb5 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039de:	2108      	movs	r1, #8
 80039e0:	4813      	ldr	r0, [pc, #76]	; (8003a30 <menu+0x2434>)
 80039e2:	f006 f953 	bl	8009c8c <HAL_GPIO_ReadPin>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10d      	bne.n	8003a08 <menu+0x240c>
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <menu+0x2438>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <menu+0x2460>)
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <menu+0x2440>)
 8003a00:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <menu+0x2444>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <menu+0x2448>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b15      	cmp	r3, #21
 8003a0e:	f040 80c2 	bne.w	8003b96 <menu+0x259a>
		if(dilSecim == 0) {
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <menu+0x242c>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d12c      	bne.n	8003a74 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003a1a:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <menu+0x2474>)
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f7fc fe22 	bl	8000668 <lcd_print>
 8003a24:	e02f      	b.n	8003a86 <menu+0x248a>
 8003a26:	bf00      	nop
 8003a28:	20000d2d 	.word	0x20000d2d
 8003a2c:	0800dcac 	.word	0x0800dcac
 8003a30:	40010800 	.word	0x40010800
 8003a34:	20000d3b 	.word	0x20000d3b
 8003a38:	20000d1d 	.word	0x20000d1d
 8003a3c:	20000c38 	.word	0x20000c38
 8003a40:	20000d38 	.word	0x20000d38
 8003a44:	20000d0c 	.word	0x20000d0c
 8003a48:	20000d1b 	.word	0x20000d1b
 8003a4c:	0800e12c 	.word	0x0800e12c
 8003a50:	0800e140 	.word	0x0800e140
 8003a54:	0800e154 	.word	0x0800e154
 8003a58:	0800e168 	.word	0x0800e168
 8003a5c:	20000d1e 	.word	0x20000d1e
 8003a60:	0800e17c 	.word	0x0800e17c
 8003a64:	0800e190 	.word	0x0800e190
 8003a68:	0800e1a0 	.word	0x0800e1a0
 8003a6c:	0800e1b4 	.word	0x0800e1b4
 8003a70:	0800e1c4 	.word	0x0800e1c4
		} else if(dilSecim == 1) {
 8003a74:	4b9c      	ldr	r3, [pc, #624]	; (8003ce8 <menu+0x26ec>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d104      	bne.n	8003a86 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003a7c:	4a9b      	ldr	r2, [pc, #620]	; (8003cec <menu+0x26f0>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2001      	movs	r0, #1
 8003a82:	f7fc fdf1 	bl	8000668 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003a86:	4b9a      	ldr	r3, [pc, #616]	; (8003cf0 <menu+0x26f4>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d112      	bne.n	8003ab4 <menu+0x24b8>
			if(dilSecim == 0) {
 8003a8e:	4b96      	ldr	r3, [pc, #600]	; (8003ce8 <menu+0x26ec>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003a96:	4a97      	ldr	r2, [pc, #604]	; (8003cf4 <menu+0x26f8>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	2002      	movs	r0, #2
 8003a9c:	f7fc fde4 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003aa0:	4b91      	ldr	r3, [pc, #580]	; (8003ce8 <menu+0x26ec>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d11c      	bne.n	8003ae2 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003aa8:	4a93      	ldr	r2, [pc, #588]	; (8003cf8 <menu+0x26fc>)
 8003aaa:	2101      	movs	r1, #1
 8003aac:	2002      	movs	r0, #2
 8003aae:	f7fc fddb 	bl	8000668 <lcd_print>
 8003ab2:	e016      	b.n	8003ae2 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003ab4:	4b8e      	ldr	r3, [pc, #568]	; (8003cf0 <menu+0x26f4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d112      	bne.n	8003ae2 <menu+0x24e6>
			if(dilSecim == 0) {
 8003abc:	4b8a      	ldr	r3, [pc, #552]	; (8003ce8 <menu+0x26ec>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003ac4:	4a8d      	ldr	r2, [pc, #564]	; (8003cfc <menu+0x2700>)
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	2002      	movs	r0, #2
 8003aca:	f7fc fdcd 	bl	8000668 <lcd_print>
 8003ace:	e008      	b.n	8003ae2 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003ad0:	4b85      	ldr	r3, [pc, #532]	; (8003ce8 <menu+0x26ec>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d104      	bne.n	8003ae2 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003ad8:	4a89      	ldr	r2, [pc, #548]	; (8003d00 <menu+0x2704>)
 8003ada:	2101      	movs	r1, #1
 8003adc:	2002      	movs	r0, #2
 8003ade:	f7fc fdc3 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4887      	ldr	r0, [pc, #540]	; (8003d04 <menu+0x2708>)
 8003ae6:	f006 f8d1 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d115      	bne.n	8003b1c <menu+0x2520>
 8003af0:	4b85      	ldr	r3, [pc, #532]	; (8003d08 <menu+0x270c>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	f083 0301 	eor.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003afe:	4b7c      	ldr	r3, [pc, #496]	; (8003cf0 <menu+0x26f4>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b7a      	ldr	r3, [pc, #488]	; (8003cf0 <menu+0x26f4>)
 8003b08:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003b0a:	4b79      	ldr	r3, [pc, #484]	; (8003cf0 <menu+0x26f4>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d902      	bls.n	8003b18 <menu+0x251c>
				platformSilindirTipi = 0;
 8003b12:	4b77      	ldr	r3, [pc, #476]	; (8003cf0 <menu+0x26f4>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b18:	f002 fb16 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1c:	2104      	movs	r1, #4
 8003b1e:	4879      	ldr	r0, [pc, #484]	; (8003d04 <menu+0x2708>)
 8003b20:	f006 f8b4 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d115      	bne.n	8003b56 <menu+0x255a>
 8003b2a:	4b77      	ldr	r3, [pc, #476]	; (8003d08 <menu+0x270c>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	f083 0301 	eor.w	r3, r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003b38:	4b6d      	ldr	r3, [pc, #436]	; (8003cf0 <menu+0x26f4>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	4b6b      	ldr	r3, [pc, #428]	; (8003cf0 <menu+0x26f4>)
 8003b42:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003b44:	4b6a      	ldr	r3, [pc, #424]	; (8003cf0 <menu+0x26f4>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003b4c:	4b68      	ldr	r3, [pc, #416]	; (8003cf0 <menu+0x26f4>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b52:	f002 faf9 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b56:	2108      	movs	r1, #8
 8003b58:	486a      	ldr	r0, [pc, #424]	; (8003d04 <menu+0x2708>)
 8003b5a:	f006 f897 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d118      	bne.n	8003b96 <menu+0x259a>
 8003b64:	4b68      	ldr	r3, [pc, #416]	; (8003d08 <menu+0x270c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	f083 0301 	eor.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d011      	beq.n	8003b96 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003b72:	4b5f      	ldr	r3, [pc, #380]	; (8003cf0 <menu+0x26f4>)
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	4b65      	ldr	r3, [pc, #404]	; (8003d0c <menu+0x2710>)
 8003b78:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <menu+0x26f4>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d106      	bne.n	8003b90 <menu+0x2594>
				altLimit = 1;
 8003b82:	4b63      	ldr	r3, [pc, #396]	; (8003d10 <menu+0x2714>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003b88:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <menu+0x2714>)
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	4b5f      	ldr	r3, [pc, #380]	; (8003d0c <menu+0x2710>)
 8003b8e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003b90:	4b60      	ldr	r3, [pc, #384]	; (8003d14 <menu+0x2718>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003b96:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <menu+0x271c>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b16      	cmp	r3, #22
 8003b9c:	f040 8081 	bne.w	8003ca2 <menu+0x26a6>
		if(dilSecim == 0) {
 8003ba0:	4b51      	ldr	r3, [pc, #324]	; (8003ce8 <menu+0x26ec>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003ba8:	4a5c      	ldr	r2, [pc, #368]	; (8003d1c <menu+0x2720>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2001      	movs	r0, #1
 8003bae:	f7fc fd5b 	bl	8000668 <lcd_print>
 8003bb2:	e008      	b.n	8003bc6 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003bb4:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <menu+0x26ec>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d104      	bne.n	8003bc6 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003bbc:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <menu+0x2724>)
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7fc fd51 	bl	8000668 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003bc6:	4b48      	ldr	r3, [pc, #288]	; (8003ce8 <menu+0x26ec>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bce:	4a55      	ldr	r2, [pc, #340]	; (8003d24 <menu+0x2728>)
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f7fc fd48 	bl	8000668 <lcd_print>
 8003bd8:	e008      	b.n	8003bec <menu+0x25f0>
			} else if(dilSecim == 1){
 8003bda:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <menu+0x26ec>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d104      	bne.n	8003bec <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003be2:	4a51      	ldr	r2, [pc, #324]	; (8003d28 <menu+0x272c>)
 8003be4:	2101      	movs	r1, #1
 8003be6:	2002      	movs	r0, #2
 8003be8:	f7fc fd3e 	bl	8000668 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003bec:	4b4f      	ldr	r3, [pc, #316]	; (8003d2c <menu+0x2730>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	220a      	movs	r2, #10
 8003bf2:	494f      	ldr	r1, [pc, #316]	; (8003d30 <menu+0x2734>)
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f009 f875 	bl	800cce4 <itoa>
		lcd_print(2,16,snum);
 8003bfa:	4a4d      	ldr	r2, [pc, #308]	; (8003d30 <menu+0x2734>)
 8003bfc:	2110      	movs	r1, #16
 8003bfe:	2002      	movs	r0, #2
 8003c00:	f7fc fd32 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c04:	2102      	movs	r1, #2
 8003c06:	483f      	ldr	r0, [pc, #252]	; (8003d04 <menu+0x2708>)
 8003c08:	f006 f840 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d115      	bne.n	8003c3e <menu+0x2642>
 8003c12:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <menu+0x270c>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f083 0301 	eor.w	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003c20:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <menu+0x2730>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <menu+0x2730>)
 8003c2a:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <menu+0x2730>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d902      	bls.n	8003c3a <menu+0x263e>
				yukariValfTmr = 0;
 8003c34:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <menu+0x2730>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c3a:	f002 fa85 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c3e:	2104      	movs	r1, #4
 8003c40:	4830      	ldr	r0, [pc, #192]	; (8003d04 <menu+0x2708>)
 8003c42:	f006 f823 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d115      	bne.n	8003c78 <menu+0x267c>
 8003c4c:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <menu+0x270c>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f083 0301 	eor.w	r3, r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00e      	beq.n	8003c78 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <menu+0x2730>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <menu+0x2730>)
 8003c64:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <menu+0x2730>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003c6e:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <menu+0x2730>)
 8003c70:	2205      	movs	r2, #5
 8003c72:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c74:	f002 fa68 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c78:	2108      	movs	r1, #8
 8003c7a:	4822      	ldr	r0, [pc, #136]	; (8003d04 <menu+0x2708>)
 8003c7c:	f006 f806 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10d      	bne.n	8003ca2 <menu+0x26a6>
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <menu+0x270c>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	f083 0301 	eor.w	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d006      	beq.n	8003ca2 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <menu+0x2730>)
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <menu+0x2710>)
 8003c9a:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <menu+0x2718>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <menu+0x271c>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b17      	cmp	r3, #23
 8003ca8:	f040 80ac 	bne.w	8003e04 <menu+0x2808>
		if(dilSecim == 0) {
 8003cac:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <menu+0x26ec>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <menu+0x2738>)
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f7fc fcd5 	bl	8000668 <lcd_print>
 8003cbe:	e008      	b.n	8003cd2 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <menu+0x26ec>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d104      	bne.n	8003cd2 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <menu+0x273c>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f7fc fccb 	bl	8000668 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <menu+0x26ec>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d130      	bne.n	8003d3c <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cda:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <menu+0x2728>)
 8003cdc:	2101      	movs	r1, #1
 8003cde:	2002      	movs	r0, #2
 8003ce0:	f7fc fcc2 	bl	8000668 <lcd_print>
 8003ce4:	e033      	b.n	8003d4e <menu+0x2752>
 8003ce6:	bf00      	nop
 8003ce8:	20000d2d 	.word	0x20000d2d
 8003cec:	0800e1d8 	.word	0x0800e1d8
 8003cf0:	20000d1f 	.word	0x20000d1f
 8003cf4:	0800e17c 	.word	0x0800e17c
 8003cf8:	0800e190 	.word	0x0800e190
 8003cfc:	0800e1a0 	.word	0x0800e1a0
 8003d00:	0800e1b4 	.word	0x0800e1b4
 8003d04:	40010800 	.word	0x40010800
 8003d08:	20000d3b 	.word	0x20000d3b
 8003d0c:	20000c38 	.word	0x20000c38
 8003d10:	20000d12 	.word	0x20000d12
 8003d14:	20000d38 	.word	0x20000d38
 8003d18:	20000d0c 	.word	0x20000d0c
 8003d1c:	0800e1e8 	.word	0x0800e1e8
 8003d20:	0800e1fc 	.word	0x0800e1fc
 8003d24:	0800de9c 	.word	0x0800de9c
 8003d28:	0800e210 	.word	0x0800e210
 8003d2c:	20000d20 	.word	0x20000d20
 8003d30:	20000cac 	.word	0x20000cac
 8003d34:	0800e220 	.word	0x0800e220
 8003d38:	0800e234 	.word	0x0800e234
			} else if(dilSecim == 1) {
 8003d3c:	4b98      	ldr	r3, [pc, #608]	; (8003fa0 <menu+0x29a4>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d104      	bne.n	8003d4e <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003d44:	4a97      	ldr	r2, [pc, #604]	; (8003fa4 <menu+0x29a8>)
 8003d46:	2101      	movs	r1, #1
 8003d48:	2002      	movs	r0, #2
 8003d4a:	f7fc fc8d 	bl	8000668 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003d4e:	4b96      	ldr	r3, [pc, #600]	; (8003fa8 <menu+0x29ac>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	220a      	movs	r2, #10
 8003d54:	4995      	ldr	r1, [pc, #596]	; (8003fac <menu+0x29b0>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	f008 ffc4 	bl	800cce4 <itoa>
		lcd_print(2,16,snum);
 8003d5c:	4a93      	ldr	r2, [pc, #588]	; (8003fac <menu+0x29b0>)
 8003d5e:	2110      	movs	r1, #16
 8003d60:	2002      	movs	r0, #2
 8003d62:	f7fc fc81 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d66:	2102      	movs	r1, #2
 8003d68:	4891      	ldr	r0, [pc, #580]	; (8003fb0 <menu+0x29b4>)
 8003d6a:	f005 ff8f 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d115      	bne.n	8003da0 <menu+0x27a4>
 8003d74:	4b8f      	ldr	r3, [pc, #572]	; (8003fb4 <menu+0x29b8>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	f083 0301 	eor.w	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00e      	beq.n	8003da0 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003d82:	4b89      	ldr	r3, [pc, #548]	; (8003fa8 <menu+0x29ac>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4b87      	ldr	r3, [pc, #540]	; (8003fa8 <menu+0x29ac>)
 8003d8c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003d8e:	4b86      	ldr	r3, [pc, #536]	; (8003fa8 <menu+0x29ac>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d902      	bls.n	8003d9c <menu+0x27a0>
				asagiValfTmr = 0;
 8003d96:	4b84      	ldr	r3, [pc, #528]	; (8003fa8 <menu+0x29ac>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d9c:	f002 f9d4 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003da0:	2104      	movs	r1, #4
 8003da2:	4883      	ldr	r0, [pc, #524]	; (8003fb0 <menu+0x29b4>)
 8003da4:	f005 ff72 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d115      	bne.n	8003dda <menu+0x27de>
 8003dae:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <menu+0x29b8>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	f083 0301 	eor.w	r3, r3, #1
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003dbc:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <menu+0x29ac>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b78      	ldr	r3, [pc, #480]	; (8003fa8 <menu+0x29ac>)
 8003dc6:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003dc8:	4b77      	ldr	r3, [pc, #476]	; (8003fa8 <menu+0x29ac>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b06      	cmp	r3, #6
 8003dce:	d902      	bls.n	8003dd6 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003dd0:	4b75      	ldr	r3, [pc, #468]	; (8003fa8 <menu+0x29ac>)
 8003dd2:	2205      	movs	r2, #5
 8003dd4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dd6:	f002 f9b7 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dda:	2108      	movs	r1, #8
 8003ddc:	4874      	ldr	r0, [pc, #464]	; (8003fb0 <menu+0x29b4>)
 8003dde:	f005 ff55 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10d      	bne.n	8003e04 <menu+0x2808>
 8003de8:	4b72      	ldr	r3, [pc, #456]	; (8003fb4 <menu+0x29b8>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f083 0301 	eor.w	r3, r3, #1
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003df6:	4b6c      	ldr	r3, [pc, #432]	; (8003fa8 <menu+0x29ac>)
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <menu+0x29bc>)
 8003dfc:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003dfe:	4b6f      	ldr	r3, [pc, #444]	; (8003fbc <menu+0x29c0>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003e04:	4b6e      	ldr	r3, [pc, #440]	; (8003fc0 <menu+0x29c4>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b18      	cmp	r3, #24
 8003e0a:	f040 809d 	bne.w	8003f48 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003e0e:	4b6d      	ldr	r3, [pc, #436]	; (8003fc4 <menu+0x29c8>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d113      	bne.n	8003e3e <menu+0x2842>
			if(dilSecim == 0) {
 8003e16:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <menu+0x29a4>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d105      	bne.n	8003e2a <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003e1e:	4a6a      	ldr	r2, [pc, #424]	; (8003fc8 <menu+0x29cc>)
 8003e20:	2101      	movs	r1, #1
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7fc fc20 	bl	8000668 <lcd_print>
 8003e28:	e020      	b.n	8003e6c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003e2a:	4b5d      	ldr	r3, [pc, #372]	; (8003fa0 <menu+0x29a4>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d11c      	bne.n	8003e6c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003e32:	4a66      	ldr	r2, [pc, #408]	; (8003fcc <menu+0x29d0>)
 8003e34:	2101      	movs	r1, #1
 8003e36:	2001      	movs	r0, #1
 8003e38:	f7fc fc16 	bl	8000668 <lcd_print>
 8003e3c:	e016      	b.n	8003e6c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e3e:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <menu+0x29c8>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d112      	bne.n	8003e6c <menu+0x2870>
			if(dilSecim == 0) {
 8003e46:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <menu+0x29a4>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d105      	bne.n	8003e5a <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003e4e:	4a60      	ldr	r2, [pc, #384]	; (8003fd0 <menu+0x29d4>)
 8003e50:	2101      	movs	r1, #1
 8003e52:	2001      	movs	r0, #1
 8003e54:	f7fc fc08 	bl	8000668 <lcd_print>
 8003e58:	e008      	b.n	8003e6c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003e5a:	4b51      	ldr	r3, [pc, #324]	; (8003fa0 <menu+0x29a4>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d104      	bne.n	8003e6c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003e62:	4a5c      	ldr	r2, [pc, #368]	; (8003fd4 <menu+0x29d8>)
 8003e64:	2101      	movs	r1, #1
 8003e66:	2001      	movs	r0, #1
 8003e68:	f7fc fbfe 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003e6c:	4b4c      	ldr	r3, [pc, #304]	; (8003fa0 <menu+0x29a4>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e74:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <menu+0x29dc>)
 8003e76:	2101      	movs	r1, #1
 8003e78:	2002      	movs	r0, #2
 8003e7a:	f7fc fbf5 	bl	8000668 <lcd_print>
 8003e7e:	e008      	b.n	8003e92 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003e80:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <menu+0x29a4>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d104      	bne.n	8003e92 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003e88:	4a46      	ldr	r2, [pc, #280]	; (8003fa4 <menu+0x29a8>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	f7fc fbeb 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003e92:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <menu+0x29e0>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	220a      	movs	r2, #10
 8003e98:	4944      	ldr	r1, [pc, #272]	; (8003fac <menu+0x29b0>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f008 ff22 	bl	800cce4 <itoa>
		lcd_print(2, 16, snum);
 8003ea0:	4a42      	ldr	r2, [pc, #264]	; (8003fac <menu+0x29b0>)
 8003ea2:	2110      	movs	r1, #16
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	f7fc fbdf 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eaa:	2102      	movs	r1, #2
 8003eac:	4840      	ldr	r0, [pc, #256]	; (8003fb0 <menu+0x29b4>)
 8003eae:	f005 feed 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d115      	bne.n	8003ee4 <menu+0x28e8>
 8003eb8:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <menu+0x29b8>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f083 0301 	eor.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00e      	beq.n	8003ee4 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003ec6:	4b45      	ldr	r3, [pc, #276]	; (8003fdc <menu+0x29e0>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <menu+0x29e0>)
 8003ed0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003ed2:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <menu+0x29e0>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d902      	bls.n	8003ee0 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003eda:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <menu+0x29e0>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ee0:	f002 f932 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	4832      	ldr	r0, [pc, #200]	; (8003fb0 <menu+0x29b4>)
 8003ee8:	f005 fed0 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d115      	bne.n	8003f1e <menu+0x2922>
 8003ef2:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <menu+0x29b8>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <menu+0x29e0>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <menu+0x29e0>)
 8003f0a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003f0c:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <menu+0x29e0>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d902      	bls.n	8003f1a <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003f14:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <menu+0x29e0>)
 8003f16:	2205      	movs	r2, #5
 8003f18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f1a:	f002 f915 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f1e:	2108      	movs	r1, #8
 8003f20:	4823      	ldr	r0, [pc, #140]	; (8003fb0 <menu+0x29b4>)
 8003f22:	f005 feb3 	bl	8009c8c <HAL_GPIO_ReadPin>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d10d      	bne.n	8003f48 <menu+0x294c>
 8003f2c:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <menu+0x29b8>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f083 0301 	eor.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003f3a:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <menu+0x29e0>)
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <menu+0x29bc>)
 8003f40:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <menu+0x29c0>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <menu+0x29c4>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b19      	cmp	r3, #25
 8003f4e:	f040 80c4 	bne.w	80040da <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003f52:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <menu+0x29c8>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d113      	bne.n	8003f82 <menu+0x2986>
			if(dilSecim == 0) {
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <menu+0x29a4>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003f62:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <menu+0x29e4>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	2001      	movs	r0, #1
 8003f68:	f7fc fb7e 	bl	8000668 <lcd_print>
 8003f6c:	e047      	b.n	8003ffe <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <menu+0x29a4>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d143      	bne.n	8003ffe <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003f76:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <menu+0x29e8>)
 8003f78:	2101      	movs	r1, #1
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	f7fc fb74 	bl	8000668 <lcd_print>
 8003f80:	e03d      	b.n	8003ffe <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <menu+0x29c8>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d139      	bne.n	8003ffe <menu+0x2a02>
			if(dilSecim == 0) {
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <menu+0x29a4>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d12c      	bne.n	8003fec <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <menu+0x29ec>)
 8003f94:	2101      	movs	r1, #1
 8003f96:	2001      	movs	r0, #1
 8003f98:	f7fc fb66 	bl	8000668 <lcd_print>
 8003f9c:	e02f      	b.n	8003ffe <menu+0x2a02>
 8003f9e:	bf00      	nop
 8003fa0:	20000d2d 	.word	0x20000d2d
 8003fa4:	0800e210 	.word	0x0800e210
 8003fa8:	20000d21 	.word	0x20000d21
 8003fac:	20000cac 	.word	0x20000cac
 8003fb0:	40010800 	.word	0x40010800
 8003fb4:	20000d3b 	.word	0x20000d3b
 8003fb8:	20000c38 	.word	0x20000c38
 8003fbc:	20000d38 	.word	0x20000d38
 8003fc0:	20000d0c 	.word	0x20000d0c
 8003fc4:	20000d1b 	.word	0x20000d1b
 8003fc8:	0800e248 	.word	0x0800e248
 8003fcc:	0800e25c 	.word	0x0800e25c
 8003fd0:	0800e270 	.word	0x0800e270
 8003fd4:	0800e284 	.word	0x0800e284
 8003fd8:	0800de9c 	.word	0x0800de9c
 8003fdc:	20000d22 	.word	0x20000d22
 8003fe0:	0800e298 	.word	0x0800e298
 8003fe4:	0800e2ac 	.word	0x0800e2ac
 8003fe8:	0800e2c0 	.word	0x0800e2c0
			} else if(dilSecim == 1) {
 8003fec:	4b73      	ldr	r3, [pc, #460]	; (80041bc <menu+0x2bc0>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d104      	bne.n	8003ffe <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003ff4:	4a72      	ldr	r2, [pc, #456]	; (80041c0 <menu+0x2bc4>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7fc fb35 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003ffe:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <menu+0x2bc0>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8004006:	4a6f      	ldr	r2, [pc, #444]	; (80041c4 <menu+0x2bc8>)
 8004008:	2101      	movs	r1, #1
 800400a:	2002      	movs	r0, #2
 800400c:	f7fc fb2c 	bl	8000668 <lcd_print>
 8004010:	e008      	b.n	8004024 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8004012:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <menu+0x2bc0>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d104      	bne.n	8004024 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 800401a:	4a6b      	ldr	r2, [pc, #428]	; (80041c8 <menu+0x2bcc>)
 800401c:	2101      	movs	r1, #1
 800401e:	2002      	movs	r0, #2
 8004020:	f7fc fb22 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8004024:	4b69      	ldr	r3, [pc, #420]	; (80041cc <menu+0x2bd0>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	220a      	movs	r2, #10
 800402a:	4969      	ldr	r1, [pc, #420]	; (80041d0 <menu+0x2bd4>)
 800402c:	4618      	mov	r0, r3
 800402e:	f008 fe59 	bl	800cce4 <itoa>
		lcd_print(2,16,snum);
 8004032:	4a67      	ldr	r2, [pc, #412]	; (80041d0 <menu+0x2bd4>)
 8004034:	2110      	movs	r1, #16
 8004036:	2002      	movs	r0, #2
 8004038:	f7fc fb16 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800403c:	2102      	movs	r1, #2
 800403e:	4865      	ldr	r0, [pc, #404]	; (80041d4 <menu+0x2bd8>)
 8004040:	f005 fe24 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d115      	bne.n	8004076 <menu+0x2a7a>
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <menu+0x2bdc>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	f083 0301 	eor.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00e      	beq.n	8004076 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8004058:	4b5c      	ldr	r3, [pc, #368]	; (80041cc <menu+0x2bd0>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	4b5a      	ldr	r3, [pc, #360]	; (80041cc <menu+0x2bd0>)
 8004062:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <menu+0x2bd0>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d902      	bls.n	8004072 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 800406c:	4b57      	ldr	r3, [pc, #348]	; (80041cc <menu+0x2bd0>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004072:	f002 f869 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004076:	2104      	movs	r1, #4
 8004078:	4856      	ldr	r0, [pc, #344]	; (80041d4 <menu+0x2bd8>)
 800407a:	f005 fe07 	bl	8009c8c <HAL_GPIO_ReadPin>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d115      	bne.n	80040b0 <menu+0x2ab4>
 8004084:	4b54      	ldr	r3, [pc, #336]	; (80041d8 <menu+0x2bdc>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	f083 0301 	eor.w	r3, r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00e      	beq.n	80040b0 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8004092:	4b4e      	ldr	r3, [pc, #312]	; (80041cc <menu+0x2bd0>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	3b01      	subs	r3, #1
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4b4c      	ldr	r3, [pc, #304]	; (80041cc <menu+0x2bd0>)
 800409c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800409e:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <menu+0x2bd0>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d902      	bls.n	80040ac <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 80040a6:	4b49      	ldr	r3, [pc, #292]	; (80041cc <menu+0x2bd0>)
 80040a8:	2205      	movs	r2, #5
 80040aa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040ac:	f002 f84c 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040b0:	2108      	movs	r1, #8
 80040b2:	4848      	ldr	r0, [pc, #288]	; (80041d4 <menu+0x2bd8>)
 80040b4:	f005 fdea 	bl	8009c8c <HAL_GPIO_ReadPin>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10d      	bne.n	80040da <menu+0x2ade>
 80040be:	4b46      	ldr	r3, [pc, #280]	; (80041d8 <menu+0x2bdc>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	f083 0301 	eor.w	r3, r3, #1
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d006      	beq.n	80040da <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 80040cc:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <menu+0x2bd0>)
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	4b42      	ldr	r3, [pc, #264]	; (80041dc <menu+0x2be0>)
 80040d2:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <menu+0x2be4>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80040da:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <menu+0x2be8>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b1a      	cmp	r3, #26
 80040e0:	f040 80ec 	bne.w	80042bc <menu+0x2cc0>
		if(dilSecim == 0) {
 80040e4:	4b35      	ldr	r3, [pc, #212]	; (80041bc <menu+0x2bc0>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d105      	bne.n	80040f8 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80040ec:	4a3e      	ldr	r2, [pc, #248]	; (80041e8 <menu+0x2bec>)
 80040ee:	2101      	movs	r1, #1
 80040f0:	2001      	movs	r0, #1
 80040f2:	f7fc fab9 	bl	8000668 <lcd_print>
 80040f6:	e008      	b.n	800410a <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80040f8:	4b30      	ldr	r3, [pc, #192]	; (80041bc <menu+0x2bc0>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d104      	bne.n	800410a <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8004100:	4a3a      	ldr	r2, [pc, #232]	; (80041ec <menu+0x2bf0>)
 8004102:	2101      	movs	r1, #1
 8004104:	2001      	movs	r0, #1
 8004106:	f7fc faaf 	bl	8000668 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <menu+0x2bf4>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b63      	cmp	r3, #99	; 0x63
 8004110:	d91e      	bls.n	8004150 <menu+0x2b54>
			if(dilSecim == 0) {
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <menu+0x2bc0>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 800411a:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <menu+0x2bc8>)
 800411c:	2101      	movs	r1, #1
 800411e:	2002      	movs	r0, #2
 8004120:	f7fc faa2 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8004124:	4b25      	ldr	r3, [pc, #148]	; (80041bc <menu+0x2bc0>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d104      	bne.n	8004136 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <menu+0x2bcc>)
 800412e:	2101      	movs	r1, #1
 8004130:	2002      	movs	r0, #2
 8004132:	f7fc fa99 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004136:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <menu+0x2bf4>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	220a      	movs	r2, #10
 800413c:	4924      	ldr	r1, [pc, #144]	; (80041d0 <menu+0x2bd4>)
 800413e:	4618      	mov	r0, r3
 8004140:	f008 fdd0 	bl	800cce4 <itoa>
			lcd_print(2,14,snum);
 8004144:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <menu+0x2bd4>)
 8004146:	210e      	movs	r1, #14
 8004148:	2002      	movs	r0, #2
 800414a:	f7fc fa8d 	bl	8000668 <lcd_print>
 800414e:	e066      	b.n	800421e <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <menu+0x2bf4>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b09      	cmp	r3, #9
 8004156:	d923      	bls.n	80041a0 <menu+0x2ba4>
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <menu+0x2bf4>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b63      	cmp	r3, #99	; 0x63
 800415e:	d81f      	bhi.n	80041a0 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <menu+0x2bc0>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <menu+0x2bc8>)
 800416a:	2101      	movs	r1, #1
 800416c:	2002      	movs	r0, #2
 800416e:	f7fc fa7b 	bl	8000668 <lcd_print>
 8004172:	e008      	b.n	8004186 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <menu+0x2bc0>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d104      	bne.n	8004186 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 800417c:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <menu+0x2bcc>)
 800417e:	2101      	movs	r1, #1
 8004180:	2002      	movs	r0, #2
 8004182:	f7fc fa71 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <menu+0x2bf4>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	220a      	movs	r2, #10
 800418c:	4910      	ldr	r1, [pc, #64]	; (80041d0 <menu+0x2bd4>)
 800418e:	4618      	mov	r0, r3
 8004190:	f008 fda8 	bl	800cce4 <itoa>
			lcd_print(2, 15, snum);
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <menu+0x2bd4>)
 8004196:	210f      	movs	r1, #15
 8004198:	2002      	movs	r0, #2
 800419a:	f7fc fa65 	bl	8000668 <lcd_print>
 800419e:	e03e      	b.n	800421e <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80041a0:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <menu+0x2bf4>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b09      	cmp	r3, #9
 80041a6:	d83a      	bhi.n	800421e <menu+0x2c22>
			if(dilSecim == 0) {
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <menu+0x2bc0>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d121      	bne.n	80041f4 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <menu+0x2bc8>)
 80041b2:	2101      	movs	r1, #1
 80041b4:	2002      	movs	r0, #2
 80041b6:	f7fc fa57 	bl	8000668 <lcd_print>
 80041ba:	e024      	b.n	8004206 <menu+0x2c0a>
 80041bc:	20000d2d 	.word	0x20000d2d
 80041c0:	0800e2d4 	.word	0x0800e2d4
 80041c4:	0800de9c 	.word	0x0800de9c
 80041c8:	0800e210 	.word	0x0800e210
 80041cc:	20000d23 	.word	0x20000d23
 80041d0:	20000cac 	.word	0x20000cac
 80041d4:	40010800 	.word	0x40010800
 80041d8:	20000d3b 	.word	0x20000d3b
 80041dc:	20000c38 	.word	0x20000c38
 80041e0:	20000d38 	.word	0x20000d38
 80041e4:	20000d0c 	.word	0x20000d0c
 80041e8:	0800e2e8 	.word	0x0800e2e8
 80041ec:	0800e2fc 	.word	0x0800e2fc
 80041f0:	20000d24 	.word	0x20000d24
			} else if(dilSecim == 1) {
 80041f4:	4b8f      	ldr	r3, [pc, #572]	; (8004434 <menu+0x2e38>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d104      	bne.n	8004206 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80041fc:	4a8e      	ldr	r2, [pc, #568]	; (8004438 <menu+0x2e3c>)
 80041fe:	2101      	movs	r1, #1
 8004200:	2002      	movs	r0, #2
 8004202:	f7fc fa31 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004206:	4b8d      	ldr	r3, [pc, #564]	; (800443c <menu+0x2e40>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	220a      	movs	r2, #10
 800420c:	498c      	ldr	r1, [pc, #560]	; (8004440 <menu+0x2e44>)
 800420e:	4618      	mov	r0, r3
 8004210:	f008 fd68 	bl	800cce4 <itoa>
			lcd_print(2, 16, snum);
 8004214:	4a8a      	ldr	r2, [pc, #552]	; (8004440 <menu+0x2e44>)
 8004216:	2110      	movs	r1, #16
 8004218:	2002      	movs	r0, #2
 800421a:	f7fc fa25 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800421e:	2102      	movs	r1, #2
 8004220:	4888      	ldr	r0, [pc, #544]	; (8004444 <menu+0x2e48>)
 8004222:	f005 fd33 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004226:	4603      	mov	r3, r0
 8004228:	2b01      	cmp	r3, #1
 800422a:	d115      	bne.n	8004258 <menu+0x2c5c>
 800422c:	4b86      	ldr	r3, [pc, #536]	; (8004448 <menu+0x2e4c>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f083 0301 	eor.w	r3, r3, #1
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 800423a:	4b80      	ldr	r3, [pc, #512]	; (800443c <menu+0x2e40>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4b7e      	ldr	r3, [pc, #504]	; (800443c <menu+0x2e40>)
 8004244:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004246:	4b7d      	ldr	r3, [pc, #500]	; (800443c <menu+0x2e40>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2bb4      	cmp	r3, #180	; 0xb4
 800424c:	d902      	bls.n	8004254 <menu+0x2c58>
				makineCalismaTmr = 0;
 800424e:	4b7b      	ldr	r3, [pc, #492]	; (800443c <menu+0x2e40>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004254:	f001 ff78 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004258:	2104      	movs	r1, #4
 800425a:	487a      	ldr	r0, [pc, #488]	; (8004444 <menu+0x2e48>)
 800425c:	f005 fd16 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d115      	bne.n	8004292 <menu+0x2c96>
 8004266:	4b78      	ldr	r3, [pc, #480]	; (8004448 <menu+0x2e4c>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	f083 0301 	eor.w	r3, r3, #1
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004274:	4b71      	ldr	r3, [pc, #452]	; (800443c <menu+0x2e40>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	3b01      	subs	r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	4b6f      	ldr	r3, [pc, #444]	; (800443c <menu+0x2e40>)
 800427e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004280:	4b6e      	ldr	r3, [pc, #440]	; (800443c <menu+0x2e40>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2bb5      	cmp	r3, #181	; 0xb5
 8004286:	d902      	bls.n	800428e <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004288:	4b6c      	ldr	r3, [pc, #432]	; (800443c <menu+0x2e40>)
 800428a:	22b4      	movs	r2, #180	; 0xb4
 800428c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800428e:	f001 ff5b 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004292:	2108      	movs	r1, #8
 8004294:	486b      	ldr	r0, [pc, #428]	; (8004444 <menu+0x2e48>)
 8004296:	f005 fcf9 	bl	8009c8c <HAL_GPIO_ReadPin>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10d      	bne.n	80042bc <menu+0x2cc0>
 80042a0:	4b69      	ldr	r3, [pc, #420]	; (8004448 <menu+0x2e4c>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <menu+0x2e40>)
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	4b66      	ldr	r3, [pc, #408]	; (800444c <menu+0x2e50>)
 80042b4:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80042b6:	4b66      	ldr	r3, [pc, #408]	; (8004450 <menu+0x2e54>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80042bc:	4b65      	ldr	r3, [pc, #404]	; (8004454 <menu+0x2e58>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b1b      	cmp	r3, #27
 80042c2:	f040 8083 	bne.w	80043cc <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 80042c6:	4a64      	ldr	r2, [pc, #400]	; (8004458 <menu+0x2e5c>)
 80042c8:	2101      	movs	r1, #1
 80042ca:	2001      	movs	r0, #1
 80042cc:	f7fc f9cc 	bl	8000668 <lcd_print>

		if(buzzer == 0) {
 80042d0:	4b62      	ldr	r3, [pc, #392]	; (800445c <menu+0x2e60>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d113      	bne.n	8004300 <menu+0x2d04>
			if(dilSecim == 0) {
 80042d8:	4b56      	ldr	r3, [pc, #344]	; (8004434 <menu+0x2e38>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80042e0:	4a5f      	ldr	r2, [pc, #380]	; (8004460 <menu+0x2e64>)
 80042e2:	2101      	movs	r1, #1
 80042e4:	2002      	movs	r0, #2
 80042e6:	f7fc f9bf 	bl	8000668 <lcd_print>
 80042ea:	e020      	b.n	800432e <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042ec:	4b51      	ldr	r3, [pc, #324]	; (8004434 <menu+0x2e38>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d11c      	bne.n	800432e <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80042f4:	4a5b      	ldr	r2, [pc, #364]	; (8004464 <menu+0x2e68>)
 80042f6:	2101      	movs	r1, #1
 80042f8:	2002      	movs	r0, #2
 80042fa:	f7fc f9b5 	bl	8000668 <lcd_print>
 80042fe:	e016      	b.n	800432e <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004300:	4b56      	ldr	r3, [pc, #344]	; (800445c <menu+0x2e60>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d112      	bne.n	800432e <menu+0x2d32>
			if(dilSecim == 0) {
 8004308:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <menu+0x2e38>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004310:	4a55      	ldr	r2, [pc, #340]	; (8004468 <menu+0x2e6c>)
 8004312:	2101      	movs	r1, #1
 8004314:	2002      	movs	r0, #2
 8004316:	f7fc f9a7 	bl	8000668 <lcd_print>
 800431a:	e008      	b.n	800432e <menu+0x2d32>
			} else if(dilSecim == 1) {
 800431c:	4b45      	ldr	r3, [pc, #276]	; (8004434 <menu+0x2e38>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d104      	bne.n	800432e <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004324:	4a51      	ldr	r2, [pc, #324]	; (800446c <menu+0x2e70>)
 8004326:	2101      	movs	r1, #1
 8004328:	2002      	movs	r0, #2
 800432a:	f7fc f99d 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800432e:	2102      	movs	r1, #2
 8004330:	4844      	ldr	r0, [pc, #272]	; (8004444 <menu+0x2e48>)
 8004332:	f005 fcab 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004336:	4603      	mov	r3, r0
 8004338:	2b01      	cmp	r3, #1
 800433a:	d115      	bne.n	8004368 <menu+0x2d6c>
 800433c:	4b42      	ldr	r3, [pc, #264]	; (8004448 <menu+0x2e4c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f083 0301 	eor.w	r3, r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00e      	beq.n	8004368 <menu+0x2d6c>
			buzzer = buzzer + 1;
 800434a:	4b44      	ldr	r3, [pc, #272]	; (800445c <menu+0x2e60>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	3301      	adds	r3, #1
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b42      	ldr	r3, [pc, #264]	; (800445c <menu+0x2e60>)
 8004354:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004356:	4b41      	ldr	r3, [pc, #260]	; (800445c <menu+0x2e60>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d902      	bls.n	8004364 <menu+0x2d68>
				buzzer = 0;
 800435e:	4b3f      	ldr	r3, [pc, #252]	; (800445c <menu+0x2e60>)
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004364:	f001 fef0 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004368:	2104      	movs	r1, #4
 800436a:	4836      	ldr	r0, [pc, #216]	; (8004444 <menu+0x2e48>)
 800436c:	f005 fc8e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004370:	4603      	mov	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d115      	bne.n	80043a2 <menu+0x2da6>
 8004376:	4b34      	ldr	r3, [pc, #208]	; (8004448 <menu+0x2e4c>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f083 0301 	eor.w	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004384:	4b35      	ldr	r3, [pc, #212]	; (800445c <menu+0x2e60>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	3b01      	subs	r3, #1
 800438a:	b2da      	uxtb	r2, r3
 800438c:	4b33      	ldr	r3, [pc, #204]	; (800445c <menu+0x2e60>)
 800438e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004390:	4b32      	ldr	r3, [pc, #200]	; (800445c <menu+0x2e60>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <menu+0x2da2>
		   		buzzer = 1;
 8004398:	4b30      	ldr	r3, [pc, #192]	; (800445c <menu+0x2e60>)
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800439e:	f001 fed3 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043a2:	2108      	movs	r1, #8
 80043a4:	4827      	ldr	r0, [pc, #156]	; (8004444 <menu+0x2e48>)
 80043a6:	f005 fc71 	bl	8009c8c <HAL_GPIO_ReadPin>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10d      	bne.n	80043cc <menu+0x2dd0>
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <menu+0x2e4c>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f083 0301 	eor.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d006      	beq.n	80043cc <menu+0x2dd0>
			eepromData[25] = buzzer;
 80043be:	4b27      	ldr	r3, [pc, #156]	; (800445c <menu+0x2e60>)
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	4b22      	ldr	r3, [pc, #136]	; (800444c <menu+0x2e50>)
 80043c4:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <menu+0x2e54>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80043cc:	4b21      	ldr	r3, [pc, #132]	; (8004454 <menu+0x2e58>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b1c      	cmp	r3, #28
 80043d2:	f040 80ab 	bne.w	800452c <menu+0x2f30>
		calismaSayModu = 0;
 80043d6:	4b26      	ldr	r3, [pc, #152]	; (8004470 <menu+0x2e74>)
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80043dc:	4a25      	ldr	r2, [pc, #148]	; (8004474 <menu+0x2e78>)
 80043de:	2101      	movs	r1, #1
 80043e0:	2001      	movs	r0, #1
 80043e2:	f7fc f941 	bl	8000668 <lcd_print>

		if(demoMode == 0) {
 80043e6:	4b24      	ldr	r3, [pc, #144]	; (8004478 <menu+0x2e7c>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d113      	bne.n	8004416 <menu+0x2e1a>
			if(dilSecim == 0) {
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <menu+0x2e38>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <menu+0x2e64>)
 80043f8:	2101      	movs	r1, #1
 80043fa:	2002      	movs	r0, #2
 80043fc:	f7fc f934 	bl	8000668 <lcd_print>
 8004400:	e045      	b.n	800448e <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <menu+0x2e38>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d141      	bne.n	800448e <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800440a:	4a16      	ldr	r2, [pc, #88]	; (8004464 <menu+0x2e68>)
 800440c:	2101      	movs	r1, #1
 800440e:	2002      	movs	r0, #2
 8004410:	f7fc f92a 	bl	8000668 <lcd_print>
 8004414:	e03b      	b.n	800448e <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8004416:	4b18      	ldr	r3, [pc, #96]	; (8004478 <menu+0x2e7c>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d137      	bne.n	800448e <menu+0x2e92>
			if(dilSecim == 0){
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <menu+0x2e38>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d12a      	bne.n	800447c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <menu+0x2e6c>)
 8004428:	2101      	movs	r1, #1
 800442a:	2002      	movs	r0, #2
 800442c:	f7fc f91c 	bl	8000668 <lcd_print>
 8004430:	e02d      	b.n	800448e <menu+0x2e92>
 8004432:	bf00      	nop
 8004434:	20000d2d 	.word	0x20000d2d
 8004438:	0800e210 	.word	0x0800e210
 800443c:	20000d24 	.word	0x20000d24
 8004440:	20000cac 	.word	0x20000cac
 8004444:	40010800 	.word	0x40010800
 8004448:	20000d3b 	.word	0x20000d3b
 800444c:	20000c38 	.word	0x20000c38
 8004450:	20000d38 	.word	0x20000d38
 8004454:	20000d0c 	.word	0x20000d0c
 8004458:	0800e310 	.word	0x0800e310
 800445c:	20000d28 	.word	0x20000d28
 8004460:	0800dc38 	.word	0x0800dc38
 8004464:	0800dc4c 	.word	0x0800dc4c
 8004468:	0800dc98 	.word	0x0800dc98
 800446c:	0800dcac 	.word	0x0800dcac
 8004470:	20000d2c 	.word	0x20000d2c
 8004474:	0800e324 	.word	0x0800e324
 8004478:	20000d2a 	.word	0x20000d2a
			} else if(dilSecim == 1) {
 800447c:	4b71      	ldr	r3, [pc, #452]	; (8004644 <menu+0x3048>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d104      	bne.n	800448e <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004484:	4a70      	ldr	r2, [pc, #448]	; (8004648 <menu+0x304c>)
 8004486:	2101      	movs	r1, #1
 8004488:	2002      	movs	r0, #2
 800448a:	f7fc f8ed 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800448e:	2102      	movs	r1, #2
 8004490:	486e      	ldr	r0, [pc, #440]	; (800464c <menu+0x3050>)
 8004492:	f005 fbfb 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d115      	bne.n	80044c8 <menu+0x2ecc>
 800449c:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <menu+0x3054>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f083 0301 	eor.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00e      	beq.n	80044c8 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80044aa:	4b6a      	ldr	r3, [pc, #424]	; (8004654 <menu+0x3058>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b68      	ldr	r3, [pc, #416]	; (8004654 <menu+0x3058>)
 80044b4:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80044b6:	4b67      	ldr	r3, [pc, #412]	; (8004654 <menu+0x3058>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d902      	bls.n	80044c4 <menu+0x2ec8>
				demoMode = 0;
 80044be:	4b65      	ldr	r3, [pc, #404]	; (8004654 <menu+0x3058>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044c4:	f001 fe40 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044c8:	2104      	movs	r1, #4
 80044ca:	4860      	ldr	r0, [pc, #384]	; (800464c <menu+0x3050>)
 80044cc:	f005 fbde 	bl	8009c8c <HAL_GPIO_ReadPin>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d115      	bne.n	8004502 <menu+0x2f06>
 80044d6:	4b5e      	ldr	r3, [pc, #376]	; (8004650 <menu+0x3054>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	f083 0301 	eor.w	r3, r3, #1
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00e      	beq.n	8004502 <menu+0x2f06>
			demoMode = demoMode - 1;
 80044e4:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <menu+0x3058>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	4b59      	ldr	r3, [pc, #356]	; (8004654 <menu+0x3058>)
 80044ee:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80044f0:	4b58      	ldr	r3, [pc, #352]	; (8004654 <menu+0x3058>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <menu+0x2f02>
		   		demoMode = 1;
 80044f8:	4b56      	ldr	r3, [pc, #344]	; (8004654 <menu+0x3058>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044fe:	f001 fe23 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004502:	2108      	movs	r1, #8
 8004504:	4851      	ldr	r0, [pc, #324]	; (800464c <menu+0x3050>)
 8004506:	f005 fbc1 	bl	8009c8c <HAL_GPIO_ReadPin>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10d      	bne.n	800452c <menu+0x2f30>
 8004510:	4b4f      	ldr	r3, [pc, #316]	; (8004650 <menu+0x3054>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f083 0301 	eor.w	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <menu+0x2f30>
			eepromData[26] = demoMode;
 800451e:	4b4d      	ldr	r3, [pc, #308]	; (8004654 <menu+0x3058>)
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	4b4d      	ldr	r3, [pc, #308]	; (8004658 <menu+0x305c>)
 8004524:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004526:	4b4d      	ldr	r3, [pc, #308]	; (800465c <menu+0x3060>)
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800452c:	4b4c      	ldr	r3, [pc, #304]	; (8004660 <menu+0x3064>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b1d      	cmp	r3, #29
 8004532:	f040 8132 	bne.w	800479a <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004536:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <menu+0x3068>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d113      	bne.n	8004566 <menu+0x2f6a>
 800453e:	4b4a      	ldr	r3, [pc, #296]	; (8004668 <menu+0x306c>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10f      	bne.n	8004566 <menu+0x2f6a>
 8004546:	4b49      	ldr	r3, [pc, #292]	; (800466c <menu+0x3070>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <menu+0x2f6a>
 800454e:	4b48      	ldr	r3, [pc, #288]	; (8004670 <menu+0x3074>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d107      	bne.n	8004566 <menu+0x2f6a>
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <menu+0x3078>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800455e:	4b46      	ldr	r3, [pc, #280]	; (8004678 <menu+0x307c>)
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e002      	b.n	800456c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004566:	4b44      	ldr	r3, [pc, #272]	; (8004678 <menu+0x307c>)
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800456c:	4b43      	ldr	r3, [pc, #268]	; (800467c <menu+0x3080>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d154      	bne.n	800461e <menu+0x3022>
			if(dilSecim == 0) {
 8004574:	4b33      	ldr	r3, [pc, #204]	; (8004644 <menu+0x3048>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800457c:	4a40      	ldr	r2, [pc, #256]	; (8004680 <menu+0x3084>)
 800457e:	2101      	movs	r1, #1
 8004580:	2001      	movs	r0, #1
 8004582:	f7fc f871 	bl	8000668 <lcd_print>
 8004586:	e008      	b.n	800459a <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004588:	4b2e      	ldr	r3, [pc, #184]	; (8004644 <menu+0x3048>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d104      	bne.n	800459a <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004590:	4a3c      	ldr	r2, [pc, #240]	; (8004684 <menu+0x3088>)
 8004592:	2101      	movs	r1, #1
 8004594:	2001      	movs	r0, #1
 8004596:	f7fc f867 	bl	8000668 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800459a:	4b36      	ldr	r3, [pc, #216]	; (8004674 <menu+0x3078>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	220a      	movs	r2, #10
 80045a0:	4939      	ldr	r1, [pc, #228]	; (8004688 <menu+0x308c>)
 80045a2:	4618      	mov	r0, r3
 80045a4:	f008 fb9e 	bl	800cce4 <itoa>
			lcd_print(2, 12, snum);
 80045a8:	4a37      	ldr	r2, [pc, #220]	; (8004688 <menu+0x308c>)
 80045aa:	210c      	movs	r1, #12
 80045ac:	2002      	movs	r0, #2
 80045ae:	f7fc f85b 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80045b2:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <menu+0x3074>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	220a      	movs	r2, #10
 80045b8:	4933      	ldr	r1, [pc, #204]	; (8004688 <menu+0x308c>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f008 fb92 	bl	800cce4 <itoa>
			lcd_print(2, 13, snum);
 80045c0:	4a31      	ldr	r2, [pc, #196]	; (8004688 <menu+0x308c>)
 80045c2:	210d      	movs	r1, #13
 80045c4:	2002      	movs	r0, #2
 80045c6:	f7fc f84f 	bl	8000668 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80045ca:	4b28      	ldr	r3, [pc, #160]	; (800466c <menu+0x3070>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	220a      	movs	r2, #10
 80045d0:	492d      	ldr	r1, [pc, #180]	; (8004688 <menu+0x308c>)
 80045d2:	4618      	mov	r0, r3
 80045d4:	f008 fb86 	bl	800cce4 <itoa>
			lcd_print(2, 14, snum);
 80045d8:	4a2b      	ldr	r2, [pc, #172]	; (8004688 <menu+0x308c>)
 80045da:	210e      	movs	r1, #14
 80045dc:	2002      	movs	r0, #2
 80045de:	f7fc f843 	bl	8000668 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80045e2:	4b21      	ldr	r3, [pc, #132]	; (8004668 <menu+0x306c>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	220a      	movs	r2, #10
 80045e8:	4927      	ldr	r1, [pc, #156]	; (8004688 <menu+0x308c>)
 80045ea:	4618      	mov	r0, r3
 80045ec:	f008 fb7a 	bl	800cce4 <itoa>
			lcd_print(2, 15, snum);
 80045f0:	4a25      	ldr	r2, [pc, #148]	; (8004688 <menu+0x308c>)
 80045f2:	210f      	movs	r1, #15
 80045f4:	2002      	movs	r0, #2
 80045f6:	f7fc f837 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <menu+0x3068>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	220a      	movs	r2, #10
 8004600:	4921      	ldr	r1, [pc, #132]	; (8004688 <menu+0x308c>)
 8004602:	4618      	mov	r0, r3
 8004604:	f008 fb6e 	bl	800cce4 <itoa>
			lcd_print(2, 16, snum);
 8004608:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <menu+0x308c>)
 800460a:	2110      	movs	r1, #16
 800460c:	2002      	movs	r0, #2
 800460e:	f7fc f82b 	bl	8000668 <lcd_print>

			lcd_print(2, 1, "           ");
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <menu+0x3090>)
 8004614:	2101      	movs	r1, #1
 8004616:	2002      	movs	r0, #2
 8004618:	f7fc f826 	bl	8000668 <lcd_print>
 800461c:	e048      	b.n	80046b0 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <menu+0x3080>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d144      	bne.n	80046b0 <menu+0x30b4>
			if(dilSecim == 0) {
 8004626:	4b07      	ldr	r3, [pc, #28]	; (8004644 <menu+0x3048>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d132      	bne.n	8004694 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800462e:	4a14      	ldr	r2, [pc, #80]	; (8004680 <menu+0x3084>)
 8004630:	2101      	movs	r1, #1
 8004632:	2001      	movs	r0, #1
 8004634:	f7fc f818 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004638:	4a15      	ldr	r2, [pc, #84]	; (8004690 <menu+0x3094>)
 800463a:	2101      	movs	r1, #1
 800463c:	2002      	movs	r0, #2
 800463e:	f7fc f813 	bl	8000668 <lcd_print>
 8004642:	e035      	b.n	80046b0 <menu+0x30b4>
 8004644:	20000d2d 	.word	0x20000d2d
 8004648:	0800dcac 	.word	0x0800dcac
 800464c:	40010800 	.word	0x40010800
 8004650:	20000d3b 	.word	0x20000d3b
 8004654:	20000d2a 	.word	0x20000d2a
 8004658:	20000c38 	.word	0x20000c38
 800465c:	20000d38 	.word	0x20000d38
 8004660:	20000d0c 	.word	0x20000d0c
 8004664:	20000d09 	.word	0x20000d09
 8004668:	20000d0a 	.word	0x20000d0a
 800466c:	200009b4 	.word	0x200009b4
 8004670:	200009b5 	.word	0x200009b5
 8004674:	20000d0b 	.word	0x20000d0b
 8004678:	20000d4d 	.word	0x20000d4d
 800467c:	20000d2c 	.word	0x20000d2c
 8004680:	0800e334 	.word	0x0800e334
 8004684:	0800e348 	.word	0x0800e348
 8004688:	20000cac 	.word	0x20000cac
 800468c:	0800e35c 	.word	0x0800e35c
 8004690:	0800e368 	.word	0x0800e368
			} else if(dilSecim == 1) {
 8004694:	4b94      	ldr	r3, [pc, #592]	; (80048e8 <menu+0x32ec>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d109      	bne.n	80046b0 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 800469c:	4a93      	ldr	r2, [pc, #588]	; (80048ec <menu+0x32f0>)
 800469e:	2101      	movs	r1, #1
 80046a0:	2001      	movs	r0, #1
 80046a2:	f7fb ffe1 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80046a6:	4a92      	ldr	r2, [pc, #584]	; (80048f0 <menu+0x32f4>)
 80046a8:	2101      	movs	r1, #1
 80046aa:	2002      	movs	r0, #2
 80046ac:	f7fb ffdc 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80046b0:	2102      	movs	r1, #2
 80046b2:	4890      	ldr	r0, [pc, #576]	; (80048f4 <menu+0x32f8>)
 80046b4:	f005 faea 	bl	8009c8c <HAL_GPIO_ReadPin>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d119      	bne.n	80046f2 <menu+0x30f6>
 80046be:	4b8e      	ldr	r3, [pc, #568]	; (80048f8 <menu+0x32fc>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	f083 0301 	eor.w	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d012      	beq.n	80046f2 <menu+0x30f6>
 80046cc:	4b8b      	ldr	r3, [pc, #556]	; (80048fc <menu+0x3300>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80046d4:	4b8a      	ldr	r3, [pc, #552]	; (8004900 <menu+0x3304>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	4b88      	ldr	r3, [pc, #544]	; (8004900 <menu+0x3304>)
 80046de:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80046e0:	4b87      	ldr	r3, [pc, #540]	; (8004900 <menu+0x3304>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d902      	bls.n	80046ee <menu+0x30f2>
				calismaSayModu = 0;
 80046e8:	4b85      	ldr	r3, [pc, #532]	; (8004900 <menu+0x3304>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046ee:	f001 fd2b 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80046f2:	2104      	movs	r1, #4
 80046f4:	487f      	ldr	r0, [pc, #508]	; (80048f4 <menu+0x32f8>)
 80046f6:	f005 fac9 	bl	8009c8c <HAL_GPIO_ReadPin>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d119      	bne.n	8004734 <menu+0x3138>
 8004700:	4b7d      	ldr	r3, [pc, #500]	; (80048f8 <menu+0x32fc>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f083 0301 	eor.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d012      	beq.n	8004734 <menu+0x3138>
 800470e:	4b7b      	ldr	r3, [pc, #492]	; (80048fc <menu+0x3300>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00e      	beq.n	8004734 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004716:	4b7a      	ldr	r3, [pc, #488]	; (8004900 <menu+0x3304>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b78      	ldr	r3, [pc, #480]	; (8004900 <menu+0x3304>)
 8004720:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004722:	4b77      	ldr	r3, [pc, #476]	; (8004900 <menu+0x3304>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <menu+0x3134>
		   		calismaSayModu = 1;
 800472a:	4b75      	ldr	r3, [pc, #468]	; (8004900 <menu+0x3304>)
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004730:	f001 fd0a 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004734:	2108      	movs	r1, #8
 8004736:	486f      	ldr	r0, [pc, #444]	; (80048f4 <menu+0x32f8>)
 8004738:	f005 faa8 	bl	8009c8c <HAL_GPIO_ReadPin>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d12b      	bne.n	800479a <menu+0x319e>
 8004742:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <menu+0x32fc>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f083 0301 	eor.w	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d024      	beq.n	800479a <menu+0x319e>
			eepromData[32] = 0;
 8004750:	4b6c      	ldr	r3, [pc, #432]	; (8004904 <menu+0x3308>)
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004758:	4b6a      	ldr	r3, [pc, #424]	; (8004904 <menu+0x3308>)
 800475a:	2200      	movs	r2, #0
 800475c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800475e:	4b69      	ldr	r3, [pc, #420]	; (8004904 <menu+0x3308>)
 8004760:	2200      	movs	r2, #0
 8004762:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004764:	4b67      	ldr	r3, [pc, #412]	; (8004904 <menu+0x3308>)
 8004766:	2200      	movs	r2, #0
 8004768:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800476a:	4b66      	ldr	r3, [pc, #408]	; (8004904 <menu+0x3308>)
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004770:	4b65      	ldr	r3, [pc, #404]	; (8004908 <menu+0x330c>)
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004776:	4b65      	ldr	r3, [pc, #404]	; (800490c <menu+0x3310>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800477c:	4b64      	ldr	r3, [pc, #400]	; (8004910 <menu+0x3314>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004782:	4b64      	ldr	r3, [pc, #400]	; (8004914 <menu+0x3318>)
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004788:	4b63      	ldr	r3, [pc, #396]	; (8004918 <menu+0x331c>)
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800478e:	4b5c      	ldr	r3, [pc, #368]	; (8004900 <menu+0x3304>)
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004794:	4b61      	ldr	r3, [pc, #388]	; (800491c <menu+0x3320>)
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800479a:	4b61      	ldr	r3, [pc, #388]	; (8004920 <menu+0x3324>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b1e      	cmp	r3, #30
 80047a0:	d16f      	bne.n	8004882 <menu+0x3286>
		calismaSayModu = 0;
 80047a2:	4b57      	ldr	r3, [pc, #348]	; (8004900 <menu+0x3304>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80047a8:	4b4f      	ldr	r3, [pc, #316]	; (80048e8 <menu+0x32ec>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80047b0:	4a5c      	ldr	r2, [pc, #368]	; (8004924 <menu+0x3328>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fb ff57 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80047ba:	4a5b      	ldr	r2, [pc, #364]	; (8004928 <menu+0x332c>)
 80047bc:	2101      	movs	r1, #1
 80047be:	2002      	movs	r0, #2
 80047c0:	f7fb ff52 	bl	8000668 <lcd_print>
 80047c4:	e00d      	b.n	80047e2 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80047c6:	4b48      	ldr	r3, [pc, #288]	; (80048e8 <menu+0x32ec>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d109      	bne.n	80047e2 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80047ce:	4a57      	ldr	r2, [pc, #348]	; (800492c <menu+0x3330>)
 80047d0:	2101      	movs	r1, #1
 80047d2:	2001      	movs	r0, #1
 80047d4:	f7fb ff48 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80047d8:	4a55      	ldr	r2, [pc, #340]	; (8004930 <menu+0x3334>)
 80047da:	2101      	movs	r1, #1
 80047dc:	2002      	movs	r0, #2
 80047de:	f7fb ff43 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047e2:	2102      	movs	r1, #2
 80047e4:	4843      	ldr	r0, [pc, #268]	; (80048f4 <menu+0x32f8>)
 80047e6:	f005 fa51 	bl	8009c8c <HAL_GPIO_ReadPin>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d115      	bne.n	800481c <menu+0x3220>
 80047f0:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <menu+0x32fc>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	f083 0301 	eor.w	r3, r3, #1
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <menu+0x3220>
			dilSecim = dilSecim + 1;
 80047fe:	4b3a      	ldr	r3, [pc, #232]	; (80048e8 <menu+0x32ec>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	b2da      	uxtb	r2, r3
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <menu+0x32ec>)
 8004808:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800480a:	4b37      	ldr	r3, [pc, #220]	; (80048e8 <menu+0x32ec>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d902      	bls.n	8004818 <menu+0x321c>
				dilSecim = 0;
 8004812:	4b35      	ldr	r3, [pc, #212]	; (80048e8 <menu+0x32ec>)
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004818:	f001 fc96 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800481c:	2104      	movs	r1, #4
 800481e:	4835      	ldr	r0, [pc, #212]	; (80048f4 <menu+0x32f8>)
 8004820:	f005 fa34 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004824:	4603      	mov	r3, r0
 8004826:	2b01      	cmp	r3, #1
 8004828:	d115      	bne.n	8004856 <menu+0x325a>
 800482a:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <menu+0x32fc>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	f083 0301 	eor.w	r3, r3, #1
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00e      	beq.n	8004856 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004838:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <menu+0x32ec>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	3b01      	subs	r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <menu+0x32ec>)
 8004842:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004844:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <menu+0x32ec>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <menu+0x3256>
		   		dilSecim = 1;
 800484c:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <menu+0x32ec>)
 800484e:	2201      	movs	r2, #1
 8004850:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004852:	f001 fc79 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004856:	2108      	movs	r1, #8
 8004858:	4826      	ldr	r0, [pc, #152]	; (80048f4 <menu+0x32f8>)
 800485a:	f005 fa17 	bl	8009c8c <HAL_GPIO_ReadPin>
 800485e:	4603      	mov	r3, r0
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10e      	bne.n	8004882 <menu+0x3286>
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <menu+0x32fc>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f083 0301 	eor.w	r3, r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004872:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <menu+0x32ec>)
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	4b23      	ldr	r3, [pc, #140]	; (8004904 <menu+0x3308>)
 8004878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <menu+0x3320>)
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <menu+0x3324>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b1f      	cmp	r3, #31
 8004888:	f040 80b7 	bne.w	80049fa <menu+0x33fe>
		calismaSayModu = 0;
 800488c:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <menu+0x3304>)
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004892:	4a28      	ldr	r2, [pc, #160]	; (8004934 <menu+0x3338>)
 8004894:	2101      	movs	r1, #1
 8004896:	2001      	movs	r0, #1
 8004898:	f7fb fee6 	bl	8000668 <lcd_print>

		if(iotMode == 0) {
 800489c:	4b26      	ldr	r3, [pc, #152]	; (8004938 <menu+0x333c>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d113      	bne.n	80048cc <menu+0x32d0>
			if(dilSecim == 0) {
 80048a4:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <menu+0x32ec>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d105      	bne.n	80048b8 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80048ac:	4a23      	ldr	r2, [pc, #140]	; (800493c <menu+0x3340>)
 80048ae:	2101      	movs	r1, #1
 80048b0:	2002      	movs	r0, #2
 80048b2:	f7fb fed9 	bl	8000668 <lcd_print>
 80048b6:	e050      	b.n	800495a <menu+0x335e>
			} else if(dilSecim == 1) {
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <menu+0x32ec>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d14c      	bne.n	800495a <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80048c0:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <menu+0x3344>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	2002      	movs	r0, #2
 80048c6:	f7fb fecf 	bl	8000668 <lcd_print>
 80048ca:	e046      	b.n	800495a <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80048cc:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <menu+0x333c>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d142      	bne.n	800495a <menu+0x335e>
			if(dilSecim == 0){
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <menu+0x32ec>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d135      	bne.n	8004948 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <menu+0x3348>)
 80048de:	2101      	movs	r1, #1
 80048e0:	2002      	movs	r0, #2
 80048e2:	f7fb fec1 	bl	8000668 <lcd_print>
 80048e6:	e038      	b.n	800495a <menu+0x335e>
 80048e8:	20000d2d 	.word	0x20000d2d
 80048ec:	0800e348 	.word	0x0800e348
 80048f0:	0800e37c 	.word	0x0800e37c
 80048f4:	40010800 	.word	0x40010800
 80048f8:	20000d3b 	.word	0x20000d3b
 80048fc:	20000d4d 	.word	0x20000d4d
 8004900:	20000d2c 	.word	0x20000d2c
 8004904:	20000c38 	.word	0x20000c38
 8004908:	20000d0b 	.word	0x20000d0b
 800490c:	200009b5 	.word	0x200009b5
 8004910:	200009b4 	.word	0x200009b4
 8004914:	20000d0a 	.word	0x20000d0a
 8004918:	20000d09 	.word	0x20000d09
 800491c:	20000d38 	.word	0x20000d38
 8004920:	20000d0c 	.word	0x20000d0c
 8004924:	0800e390 	.word	0x0800e390
 8004928:	0800e3a4 	.word	0x0800e3a4
 800492c:	0800e3b8 	.word	0x0800e3b8
 8004930:	0800e3cc 	.word	0x0800e3cc
 8004934:	0800e3e0 	.word	0x0800e3e0
 8004938:	20000d2b 	.word	0x20000d2b
 800493c:	0800dc38 	.word	0x0800dc38
 8004940:	0800dc4c 	.word	0x0800dc4c
 8004944:	0800dc98 	.word	0x0800dc98
			} else if(dilSecim == 1) {
 8004948:	4bac      	ldr	r3, [pc, #688]	; (8004bfc <menu+0x3600>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d104      	bne.n	800495a <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004950:	4aab      	ldr	r2, [pc, #684]	; (8004c00 <menu+0x3604>)
 8004952:	2101      	movs	r1, #1
 8004954:	2002      	movs	r0, #2
 8004956:	f7fb fe87 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800495a:	2102      	movs	r1, #2
 800495c:	48a9      	ldr	r0, [pc, #676]	; (8004c04 <menu+0x3608>)
 800495e:	f005 f995 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004962:	4603      	mov	r3, r0
 8004964:	2b01      	cmp	r3, #1
 8004966:	d115      	bne.n	8004994 <menu+0x3398>
 8004968:	4ba7      	ldr	r3, [pc, #668]	; (8004c08 <menu+0x360c>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f083 0301 	eor.w	r3, r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00e      	beq.n	8004994 <menu+0x3398>
			iotMode = iotMode + 1;
 8004976:	4ba5      	ldr	r3, [pc, #660]	; (8004c0c <menu+0x3610>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	3301      	adds	r3, #1
 800497c:	b2da      	uxtb	r2, r3
 800497e:	4ba3      	ldr	r3, [pc, #652]	; (8004c0c <menu+0x3610>)
 8004980:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004982:	4ba2      	ldr	r3, [pc, #648]	; (8004c0c <menu+0x3610>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d902      	bls.n	8004990 <menu+0x3394>
				iotMode = 0;
 800498a:	4ba0      	ldr	r3, [pc, #640]	; (8004c0c <menu+0x3610>)
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004990:	f001 fbda 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004994:	2104      	movs	r1, #4
 8004996:	489b      	ldr	r0, [pc, #620]	; (8004c04 <menu+0x3608>)
 8004998:	f005 f978 	bl	8009c8c <HAL_GPIO_ReadPin>
 800499c:	4603      	mov	r3, r0
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d115      	bne.n	80049ce <menu+0x33d2>
 80049a2:	4b99      	ldr	r3, [pc, #612]	; (8004c08 <menu+0x360c>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	f083 0301 	eor.w	r3, r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <menu+0x33d2>
			iotMode = iotMode - 1;
 80049b0:	4b96      	ldr	r3, [pc, #600]	; (8004c0c <menu+0x3610>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	4b94      	ldr	r3, [pc, #592]	; (8004c0c <menu+0x3610>)
 80049ba:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80049bc:	4b93      	ldr	r3, [pc, #588]	; (8004c0c <menu+0x3610>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <menu+0x33ce>
		   		iotMode = 1;
 80049c4:	4b91      	ldr	r3, [pc, #580]	; (8004c0c <menu+0x3610>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80049ca:	f001 fbbd 	bl	8006148 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80049ce:	2108      	movs	r1, #8
 80049d0:	488c      	ldr	r0, [pc, #560]	; (8004c04 <menu+0x3608>)
 80049d2:	f005 f95b 	bl	8009c8c <HAL_GPIO_ReadPin>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d10e      	bne.n	80049fa <menu+0x33fe>
 80049dc:	4b8a      	ldr	r3, [pc, #552]	; (8004c08 <menu+0x360c>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f083 0301 	eor.w	r3, r3, #1
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <menu+0x33fe>
			eepromData[48] = iotMode;
 80049ea:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <menu+0x3610>)
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <menu+0x3614>)
 80049f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80049f4:	4b87      	ldr	r3, [pc, #540]	; (8004c14 <menu+0x3618>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80049fa:	4b87      	ldr	r3, [pc, #540]	; (8004c18 <menu+0x361c>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d138      	bne.n	8004a74 <menu+0x3478>
		calismaSayModu = 0;
 8004a02:	4b86      	ldr	r3, [pc, #536]	; (8004c1c <menu+0x3620>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004a08:	4a85      	ldr	r2, [pc, #532]	; (8004c20 <menu+0x3624>)
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	f7fb fe2b 	bl	8000668 <lcd_print>

		lcd_print(2, 1, machineID);
 8004a12:	4a84      	ldr	r2, [pc, #528]	; (8004c24 <menu+0x3628>)
 8004a14:	2101      	movs	r1, #1
 8004a16:	2002      	movs	r0, #2
 8004a18:	f7fb fe26 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "    ");
 8004a1c:	4a82      	ldr	r2, [pc, #520]	; (8004c28 <menu+0x362c>)
 8004a1e:	210d      	movs	r1, #13
 8004a20:	2002      	movs	r0, #2
 8004a22:	f7fb fe21 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a26:	2102      	movs	r1, #2
 8004a28:	4876      	ldr	r0, [pc, #472]	; (8004c04 <menu+0x3608>)
 8004a2a:	f005 f92f 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d11f      	bne.n	8004a74 <menu+0x3478>
 8004a34:	2104      	movs	r1, #4
 8004a36:	4873      	ldr	r0, [pc, #460]	; (8004c04 <menu+0x3608>)
 8004a38:	f005 f928 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d118      	bne.n	8004a74 <menu+0x3478>
 8004a42:	4b71      	ldr	r3, [pc, #452]	; (8004c08 <menu+0x360c>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	f083 0301 	eor.w	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d011      	beq.n	8004a74 <menu+0x3478>
			takeMachineID(0);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7fc f833 	bl	8000abc <takeMachineID>

			HAL_Delay(50);
 8004a56:	2032      	movs	r0, #50	; 0x32
 8004a58:	f004 fb48 	bl	80090ec <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004a5c:	4a71      	ldr	r2, [pc, #452]	; (8004c24 <menu+0x3628>)
 8004a5e:	2101      	movs	r1, #1
 8004a60:	2002      	movs	r0, #2
 8004a62:	f7fb fe01 	bl	8000668 <lcd_print>
			lcd_print(2, 13, "    ");
 8004a66:	4a70      	ldr	r2, [pc, #448]	; (8004c28 <menu+0x362c>)
 8004a68:	210d      	movs	r1, #13
 8004a6a:	2002      	movs	r0, #2
 8004a6c:	f7fb fdfc 	bl	8000668 <lcd_print>

			bekle();
 8004a70:	f001 fb6a 	bl	8006148 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004a74:	4b68      	ldr	r3, [pc, #416]	; (8004c18 <menu+0x361c>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b21      	cmp	r3, #33	; 0x21
 8004a7a:	d153      	bne.n	8004b24 <menu+0x3528>
		calismaSayModu = 0;
 8004a7c:	4b67      	ldr	r3, [pc, #412]	; (8004c1c <menu+0x3620>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004a82:	4a6a      	ldr	r2, [pc, #424]	; (8004c2c <menu+0x3630>)
 8004a84:	2101      	movs	r1, #1
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fb fdee 	bl	8000668 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004a8c:	4868      	ldr	r0, [pc, #416]	; (8004c30 <menu+0x3634>)
 8004a8e:	f7fb fbc9 	bl	8000224 <strlen>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d811      	bhi.n	8004abc <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004a98:	4a65      	ldr	r2, [pc, #404]	; (8004c30 <menu+0x3634>)
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	f7fb fde3 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004aa2:	4863      	ldr	r0, [pc, #396]	; (8004c30 <menu+0x3634>)
 8004aa4:	f7fb fbbe 	bl	8000224 <strlen>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	4a60      	ldr	r2, [pc, #384]	; (8004c34 <menu+0x3638>)
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	2002      	movs	r0, #2
 8004ab6:	f7fb fdd7 	bl	8000668 <lcd_print>
 8004aba:	e005      	b.n	8004ac8 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004abc:	2300      	movs	r3, #0
 8004abe:	2202      	movs	r2, #2
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	485b      	ldr	r0, [pc, #364]	; (8004c30 <menu+0x3634>)
 8004ac4:	f7fc fcf4 	bl	80014b0 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ac8:	2102      	movs	r1, #2
 8004aca:	484e      	ldr	r0, [pc, #312]	; (8004c04 <menu+0x3608>)
 8004acc:	f005 f8de 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d126      	bne.n	8004b24 <menu+0x3528>
 8004ad6:	2104      	movs	r1, #4
 8004ad8:	484a      	ldr	r0, [pc, #296]	; (8004c04 <menu+0x3608>)
 8004ada:	f005 f8d7 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d11f      	bne.n	8004b24 <menu+0x3528>
 8004ae4:	4b48      	ldr	r3, [pc, #288]	; (8004c08 <menu+0x360c>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	f083 0301 	eor.w	r3, r3, #1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d018      	beq.n	8004b24 <menu+0x3528>
			takeWifiSSID(0);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f7fc f938 	bl	8000d68 <takeWifiSSID>

			HAL_Delay(50);
 8004af8:	2032      	movs	r0, #50	; 0x32
 8004afa:	f004 faf7 	bl	80090ec <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004afe:	4a4c      	ldr	r2, [pc, #304]	; (8004c30 <menu+0x3634>)
 8004b00:	2101      	movs	r1, #1
 8004b02:	2002      	movs	r0, #2
 8004b04:	f7fb fdb0 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004b08:	4849      	ldr	r0, [pc, #292]	; (8004c30 <menu+0x3634>)
 8004b0a:	f7fb fb8b 	bl	8000224 <strlen>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	4a47      	ldr	r2, [pc, #284]	; (8004c34 <menu+0x3638>)
 8004b18:	4619      	mov	r1, r3
 8004b1a:	2002      	movs	r0, #2
 8004b1c:	f7fb fda4 	bl	8000668 <lcd_print>

			bekle();
 8004b20:	f001 fb12 	bl	8006148 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004b24:	4b3c      	ldr	r3, [pc, #240]	; (8004c18 <menu+0x361c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b22      	cmp	r3, #34	; 0x22
 8004b2a:	d153      	bne.n	8004bd4 <menu+0x35d8>
		calismaSayModu = 0;
 8004b2c:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <menu+0x3620>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004b32:	4a41      	ldr	r2, [pc, #260]	; (8004c38 <menu+0x363c>)
 8004b34:	2101      	movs	r1, #1
 8004b36:	2001      	movs	r0, #1
 8004b38:	f7fb fd96 	bl	8000668 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004b3c:	483f      	ldr	r0, [pc, #252]	; (8004c3c <menu+0x3640>)
 8004b3e:	f7fb fb71 	bl	8000224 <strlen>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d811      	bhi.n	8004b6c <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004b48:	4a3c      	ldr	r2, [pc, #240]	; (8004c3c <menu+0x3640>)
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	2002      	movs	r0, #2
 8004b4e:	f7fb fd8b 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004b52:	483a      	ldr	r0, [pc, #232]	; (8004c3c <menu+0x3640>)
 8004b54:	f7fb fb66 	bl	8000224 <strlen>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4a34      	ldr	r2, [pc, #208]	; (8004c34 <menu+0x3638>)
 8004b62:	4619      	mov	r1, r3
 8004b64:	2002      	movs	r0, #2
 8004b66:	f7fb fd7f 	bl	8000668 <lcd_print>
 8004b6a:	e005      	b.n	8004b78 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	2202      	movs	r2, #2
 8004b70:	2101      	movs	r1, #1
 8004b72:	4832      	ldr	r0, [pc, #200]	; (8004c3c <menu+0x3640>)
 8004b74:	f7fc fc9c 	bl	80014b0 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4822      	ldr	r0, [pc, #136]	; (8004c04 <menu+0x3608>)
 8004b7c:	f005 f886 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d126      	bne.n	8004bd4 <menu+0x35d8>
 8004b86:	2104      	movs	r1, #4
 8004b88:	481e      	ldr	r0, [pc, #120]	; (8004c04 <menu+0x3608>)
 8004b8a:	f005 f87f 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d11f      	bne.n	8004bd4 <menu+0x35d8>
 8004b94:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <menu+0x360c>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	f083 0301 	eor.w	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <menu+0x35d8>
			takeWifiPass(0);
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f7fc fa98 	bl	80010d8 <takeWifiPass>

			HAL_Delay(50);
 8004ba8:	2032      	movs	r0, #50	; 0x32
 8004baa:	f004 fa9f 	bl	80090ec <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004bae:	4a23      	ldr	r2, [pc, #140]	; (8004c3c <menu+0x3640>)
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	2002      	movs	r0, #2
 8004bb4:	f7fb fd58 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004bb8:	4820      	ldr	r0, [pc, #128]	; (8004c3c <menu+0x3640>)
 8004bba:	f7fb fb33 	bl	8000224 <strlen>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	4a1b      	ldr	r2, [pc, #108]	; (8004c34 <menu+0x3638>)
 8004bc8:	4619      	mov	r1, r3
 8004bca:	2002      	movs	r0, #2
 8004bcc:	f7fb fd4c 	bl	8000668 <lcd_print>

			bekle();
 8004bd0:	f001 faba 	bl	8006148 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004bd4:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <menu+0x361c>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b23      	cmp	r3, #35	; 0x23
 8004bda:	d155      	bne.n	8004c88 <menu+0x368c>
		if(dilSecim == 0) {
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <menu+0x3600>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d131      	bne.n	8004c48 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004be4:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <menu+0x3644>)
 8004be6:	2101      	movs	r1, #1
 8004be8:	2001      	movs	r0, #1
 8004bea:	f7fb fd3d 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <menu+0x3648>)
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	2002      	movs	r0, #2
 8004bf4:	f7fb fd38 	bl	8000668 <lcd_print>
 8004bf8:	e034      	b.n	8004c64 <menu+0x3668>
 8004bfa:	bf00      	nop
 8004bfc:	20000d2d 	.word	0x20000d2d
 8004c00:	0800dcac 	.word	0x0800dcac
 8004c04:	40010800 	.word	0x40010800
 8004c08:	20000d3b 	.word	0x20000d3b
 8004c0c:	20000d2b 	.word	0x20000d2b
 8004c10:	20000c38 	.word	0x20000c38
 8004c14:	20000d38 	.word	0x20000d38
 8004c18:	20000d0c 	.word	0x20000d0c
 8004c1c:	20000d2c 	.word	0x20000d2c
 8004c20:	0800e3f4 	.word	0x0800e3f4
 8004c24:	20000cd4 	.word	0x20000cd4
 8004c28:	0800e408 	.word	0x0800e408
 8004c2c:	0800e410 	.word	0x0800e410
 8004c30:	20000ce0 	.word	0x20000ce0
 8004c34:	2000094c 	.word	0x2000094c
 8004c38:	0800e424 	.word	0x0800e424
 8004c3c:	20000cf4 	.word	0x20000cf4
 8004c40:	0800e438 	.word	0x0800e438
 8004c44:	0800e44c 	.word	0x0800e44c
		} else if(dilSecim == 1) {
 8004c48:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <menu+0x3690>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d109      	bne.n	8004c64 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004c50:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <menu+0x3694>)
 8004c52:	2101      	movs	r1, #1
 8004c54:	2001      	movs	r0, #1
 8004c56:	f7fb fd07 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004c5a:	4a0e      	ldr	r2, [pc, #56]	; (8004c94 <menu+0x3698>)
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	2002      	movs	r0, #2
 8004c60:	f7fb fd02 	bl	8000668 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004c64:	2108      	movs	r1, #8
 8004c66:	480c      	ldr	r0, [pc, #48]	; (8004c98 <menu+0x369c>)
 8004c68:	f005 f810 	bl	8009c8c <HAL_GPIO_ReadPin>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d10a      	bne.n	8004c88 <menu+0x368c>
			menuGiris = 0;
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <menu+0x36a0>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004c78:	f7fb fd22 	bl	80006c0 <lcd_clear>
			HAL_Delay(500);
 8004c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c80:	f004 fa34 	bl	80090ec <HAL_Delay>
			NVIC_SystemReset();
 8004c84:	f7fb fd64 	bl	8000750 <__NVIC_SystemReset>
		}
	}
}
 8004c88:	bf00      	nop
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000d2d 	.word	0x20000d2d
 8004c90:	0800e460 	.word	0x0800e460
 8004c94:	0800e474 	.word	0x0800e474
 8004c98:	40010800 	.word	0x40010800
 8004c9c:	20000d29 	.word	0x20000d29

08004ca0 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004caa:	48a9      	ldr	r0, [pc, #676]	; (8004f50 <loadMenuTexts+0x2b0>)
 8004cac:	f7fb fd66 	bl	800077c <copyText>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4aa8      	ldr	r2, [pc, #672]	; (8004f54 <loadMenuTexts+0x2b4>)
 8004cb4:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004cb6:	48a8      	ldr	r0, [pc, #672]	; (8004f58 <loadMenuTexts+0x2b8>)
 8004cb8:	f7fb fd60 	bl	800077c <copyText>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4aa7      	ldr	r2, [pc, #668]	; (8004f5c <loadMenuTexts+0x2bc>)
 8004cc0:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004cc2:	48a7      	ldr	r0, [pc, #668]	; (8004f60 <loadMenuTexts+0x2c0>)
 8004cc4:	f7fb fd5a 	bl	800077c <copyText>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4aa6      	ldr	r2, [pc, #664]	; (8004f64 <loadMenuTexts+0x2c4>)
 8004ccc:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004cce:	48a6      	ldr	r0, [pc, #664]	; (8004f68 <loadMenuTexts+0x2c8>)
 8004cd0:	f7fb fd54 	bl	800077c <copyText>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4aa5      	ldr	r2, [pc, #660]	; (8004f6c <loadMenuTexts+0x2cc>)
 8004cd8:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004cda:	48a5      	ldr	r0, [pc, #660]	; (8004f70 <loadMenuTexts+0x2d0>)
 8004cdc:	f7fb fd4e 	bl	800077c <copyText>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4aa4      	ldr	r2, [pc, #656]	; (8004f74 <loadMenuTexts+0x2d4>)
 8004ce4:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004ce6:	48a4      	ldr	r0, [pc, #656]	; (8004f78 <loadMenuTexts+0x2d8>)
 8004ce8:	f7fb fd48 	bl	800077c <copyText>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4aa3      	ldr	r2, [pc, #652]	; (8004f7c <loadMenuTexts+0x2dc>)
 8004cf0:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004cf2:	48a3      	ldr	r0, [pc, #652]	; (8004f80 <loadMenuTexts+0x2e0>)
 8004cf4:	f7fb fd42 	bl	800077c <copyText>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4aa2      	ldr	r2, [pc, #648]	; (8004f84 <loadMenuTexts+0x2e4>)
 8004cfc:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 82d1 	bne.w	80052a8 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004d06:	48a0      	ldr	r0, [pc, #640]	; (8004f88 <loadMenuTexts+0x2e8>)
 8004d08:	f7fb fd38 	bl	800077c <copyText>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4a9f      	ldr	r2, [pc, #636]	; (8004f8c <loadMenuTexts+0x2ec>)
 8004d10:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004d12:	489f      	ldr	r0, [pc, #636]	; (8004f90 <loadMenuTexts+0x2f0>)
 8004d14:	f7fb fd32 	bl	800077c <copyText>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a9e      	ldr	r2, [pc, #632]	; (8004f94 <loadMenuTexts+0x2f4>)
 8004d1c:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004d1e:	489e      	ldr	r0, [pc, #632]	; (8004f98 <loadMenuTexts+0x2f8>)
 8004d20:	f7fb fd2c 	bl	800077c <copyText>
 8004d24:	4603      	mov	r3, r0
 8004d26:	4a9d      	ldr	r2, [pc, #628]	; (8004f9c <loadMenuTexts+0x2fc>)
 8004d28:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004d2a:	489d      	ldr	r0, [pc, #628]	; (8004fa0 <loadMenuTexts+0x300>)
 8004d2c:	f7fb fd26 	bl	800077c <copyText>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a9c      	ldr	r2, [pc, #624]	; (8004fa4 <loadMenuTexts+0x304>)
 8004d34:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004d36:	489c      	ldr	r0, [pc, #624]	; (8004fa8 <loadMenuTexts+0x308>)
 8004d38:	f7fb fd20 	bl	800077c <copyText>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4a9b      	ldr	r2, [pc, #620]	; (8004fac <loadMenuTexts+0x30c>)
 8004d40:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004d42:	489b      	ldr	r0, [pc, #620]	; (8004fb0 <loadMenuTexts+0x310>)
 8004d44:	f7fb fd1a 	bl	800077c <copyText>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4a9a      	ldr	r2, [pc, #616]	; (8004fb4 <loadMenuTexts+0x314>)
 8004d4c:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004d4e:	489a      	ldr	r0, [pc, #616]	; (8004fb8 <loadMenuTexts+0x318>)
 8004d50:	f7fb fd14 	bl	800077c <copyText>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4a99      	ldr	r2, [pc, #612]	; (8004fbc <loadMenuTexts+0x31c>)
 8004d58:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004d5a:	4899      	ldr	r0, [pc, #612]	; (8004fc0 <loadMenuTexts+0x320>)
 8004d5c:	f7fb fd0e 	bl	800077c <copyText>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4a98      	ldr	r2, [pc, #608]	; (8004fc4 <loadMenuTexts+0x324>)
 8004d64:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004d66:	4898      	ldr	r0, [pc, #608]	; (8004fc8 <loadMenuTexts+0x328>)
 8004d68:	f7fb fd08 	bl	800077c <copyText>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4a97      	ldr	r2, [pc, #604]	; (8004fcc <loadMenuTexts+0x32c>)
 8004d70:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004d72:	4897      	ldr	r0, [pc, #604]	; (8004fd0 <loadMenuTexts+0x330>)
 8004d74:	f7fb fd02 	bl	800077c <copyText>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4a96      	ldr	r2, [pc, #600]	; (8004fd4 <loadMenuTexts+0x334>)
 8004d7c:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004d7e:	4896      	ldr	r0, [pc, #600]	; (8004fd8 <loadMenuTexts+0x338>)
 8004d80:	f7fb fcfc 	bl	800077c <copyText>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4a95      	ldr	r2, [pc, #596]	; (8004fdc <loadMenuTexts+0x33c>)
 8004d88:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004d8a:	4895      	ldr	r0, [pc, #596]	; (8004fe0 <loadMenuTexts+0x340>)
 8004d8c:	f7fb fcf6 	bl	800077c <copyText>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4a94      	ldr	r2, [pc, #592]	; (8004fe4 <loadMenuTexts+0x344>)
 8004d94:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004d96:	4894      	ldr	r0, [pc, #592]	; (8004fe8 <loadMenuTexts+0x348>)
 8004d98:	f7fb fcf0 	bl	800077c <copyText>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4a93      	ldr	r2, [pc, #588]	; (8004fec <loadMenuTexts+0x34c>)
 8004da0:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004da2:	4893      	ldr	r0, [pc, #588]	; (8004ff0 <loadMenuTexts+0x350>)
 8004da4:	f7fb fcea 	bl	800077c <copyText>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a92      	ldr	r2, [pc, #584]	; (8004ff4 <loadMenuTexts+0x354>)
 8004dac:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004dae:	4892      	ldr	r0, [pc, #584]	; (8004ff8 <loadMenuTexts+0x358>)
 8004db0:	f7fb fce4 	bl	800077c <copyText>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a91      	ldr	r2, [pc, #580]	; (8004ffc <loadMenuTexts+0x35c>)
 8004db8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004dba:	4891      	ldr	r0, [pc, #580]	; (8005000 <loadMenuTexts+0x360>)
 8004dbc:	f7fb fcde 	bl	800077c <copyText>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a90      	ldr	r2, [pc, #576]	; (8005004 <loadMenuTexts+0x364>)
 8004dc4:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004dc6:	4890      	ldr	r0, [pc, #576]	; (8005008 <loadMenuTexts+0x368>)
 8004dc8:	f7fb fcd8 	bl	800077c <copyText>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a8f      	ldr	r2, [pc, #572]	; (800500c <loadMenuTexts+0x36c>)
 8004dd0:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004dd2:	488f      	ldr	r0, [pc, #572]	; (8005010 <loadMenuTexts+0x370>)
 8004dd4:	f7fb fcd2 	bl	800077c <copyText>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4a8e      	ldr	r2, [pc, #568]	; (8005014 <loadMenuTexts+0x374>)
 8004ddc:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004dde:	488e      	ldr	r0, [pc, #568]	; (8005018 <loadMenuTexts+0x378>)
 8004de0:	f7fb fccc 	bl	800077c <copyText>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a8d      	ldr	r2, [pc, #564]	; (800501c <loadMenuTexts+0x37c>)
 8004de8:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004dea:	488d      	ldr	r0, [pc, #564]	; (8005020 <loadMenuTexts+0x380>)
 8004dec:	f7fb fcc6 	bl	800077c <copyText>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4a8c      	ldr	r2, [pc, #560]	; (8005024 <loadMenuTexts+0x384>)
 8004df4:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004df6:	488c      	ldr	r0, [pc, #560]	; (8005028 <loadMenuTexts+0x388>)
 8004df8:	f7fb fcc0 	bl	800077c <copyText>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4a8b      	ldr	r2, [pc, #556]	; (800502c <loadMenuTexts+0x38c>)
 8004e00:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004e02:	488b      	ldr	r0, [pc, #556]	; (8005030 <loadMenuTexts+0x390>)
 8004e04:	f7fb fcba 	bl	800077c <copyText>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4a8a      	ldr	r2, [pc, #552]	; (8005034 <loadMenuTexts+0x394>)
 8004e0c:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004e0e:	488a      	ldr	r0, [pc, #552]	; (8005038 <loadMenuTexts+0x398>)
 8004e10:	f7fb fcb4 	bl	800077c <copyText>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4a89      	ldr	r2, [pc, #548]	; (800503c <loadMenuTexts+0x39c>)
 8004e18:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004e1a:	4889      	ldr	r0, [pc, #548]	; (8005040 <loadMenuTexts+0x3a0>)
 8004e1c:	f7fb fcae 	bl	800077c <copyText>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a88      	ldr	r2, [pc, #544]	; (8005044 <loadMenuTexts+0x3a4>)
 8004e24:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004e26:	4888      	ldr	r0, [pc, #544]	; (8005048 <loadMenuTexts+0x3a8>)
 8004e28:	f7fb fca8 	bl	800077c <copyText>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4a87      	ldr	r2, [pc, #540]	; (800504c <loadMenuTexts+0x3ac>)
 8004e30:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004e32:	4887      	ldr	r0, [pc, #540]	; (8005050 <loadMenuTexts+0x3b0>)
 8004e34:	f7fb fca2 	bl	800077c <copyText>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a86      	ldr	r2, [pc, #536]	; (8005054 <loadMenuTexts+0x3b4>)
 8004e3c:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004e3e:	4886      	ldr	r0, [pc, #536]	; (8005058 <loadMenuTexts+0x3b8>)
 8004e40:	f7fb fc9c 	bl	800077c <copyText>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a85      	ldr	r2, [pc, #532]	; (800505c <loadMenuTexts+0x3bc>)
 8004e48:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004e4a:	4885      	ldr	r0, [pc, #532]	; (8005060 <loadMenuTexts+0x3c0>)
 8004e4c:	f7fb fc96 	bl	800077c <copyText>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a84      	ldr	r2, [pc, #528]	; (8005064 <loadMenuTexts+0x3c4>)
 8004e54:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004e56:	4884      	ldr	r0, [pc, #528]	; (8005068 <loadMenuTexts+0x3c8>)
 8004e58:	f7fb fc90 	bl	800077c <copyText>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4a83      	ldr	r2, [pc, #524]	; (800506c <loadMenuTexts+0x3cc>)
 8004e60:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004e62:	4883      	ldr	r0, [pc, #524]	; (8005070 <loadMenuTexts+0x3d0>)
 8004e64:	f7fb fc8a 	bl	800077c <copyText>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4a82      	ldr	r2, [pc, #520]	; (8005074 <loadMenuTexts+0x3d4>)
 8004e6c:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004e6e:	4882      	ldr	r0, [pc, #520]	; (8005078 <loadMenuTexts+0x3d8>)
 8004e70:	f7fb fc84 	bl	800077c <copyText>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4a81      	ldr	r2, [pc, #516]	; (800507c <loadMenuTexts+0x3dc>)
 8004e78:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004e7a:	4881      	ldr	r0, [pc, #516]	; (8005080 <loadMenuTexts+0x3e0>)
 8004e7c:	f7fb fc7e 	bl	800077c <copyText>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4a80      	ldr	r2, [pc, #512]	; (8005084 <loadMenuTexts+0x3e4>)
 8004e84:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004e86:	4880      	ldr	r0, [pc, #512]	; (8005088 <loadMenuTexts+0x3e8>)
 8004e88:	f7fb fc78 	bl	800077c <copyText>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4a7f      	ldr	r2, [pc, #508]	; (800508c <loadMenuTexts+0x3ec>)
 8004e90:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004e92:	487f      	ldr	r0, [pc, #508]	; (8005090 <loadMenuTexts+0x3f0>)
 8004e94:	f7fb fc72 	bl	800077c <copyText>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4a7e      	ldr	r2, [pc, #504]	; (8005094 <loadMenuTexts+0x3f4>)
 8004e9c:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004e9e:	487e      	ldr	r0, [pc, #504]	; (8005098 <loadMenuTexts+0x3f8>)
 8004ea0:	f7fb fc6c 	bl	800077c <copyText>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4a7d      	ldr	r2, [pc, #500]	; (800509c <loadMenuTexts+0x3fc>)
 8004ea8:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004eaa:	487d      	ldr	r0, [pc, #500]	; (80050a0 <loadMenuTexts+0x400>)
 8004eac:	f7fb fc66 	bl	800077c <copyText>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a7c      	ldr	r2, [pc, #496]	; (80050a4 <loadMenuTexts+0x404>)
 8004eb4:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004eb6:	487c      	ldr	r0, [pc, #496]	; (80050a8 <loadMenuTexts+0x408>)
 8004eb8:	f7fb fc60 	bl	800077c <copyText>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4a7b      	ldr	r2, [pc, #492]	; (80050ac <loadMenuTexts+0x40c>)
 8004ec0:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004ec2:	487b      	ldr	r0, [pc, #492]	; (80050b0 <loadMenuTexts+0x410>)
 8004ec4:	f7fb fc5a 	bl	800077c <copyText>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4a7a      	ldr	r2, [pc, #488]	; (80050b4 <loadMenuTexts+0x414>)
 8004ecc:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004ece:	487a      	ldr	r0, [pc, #488]	; (80050b8 <loadMenuTexts+0x418>)
 8004ed0:	f7fb fc54 	bl	800077c <copyText>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4a79      	ldr	r2, [pc, #484]	; (80050bc <loadMenuTexts+0x41c>)
 8004ed8:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004eda:	4879      	ldr	r0, [pc, #484]	; (80050c0 <loadMenuTexts+0x420>)
 8004edc:	f7fb fc4e 	bl	800077c <copyText>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4a78      	ldr	r2, [pc, #480]	; (80050c4 <loadMenuTexts+0x424>)
 8004ee4:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004ee6:	4878      	ldr	r0, [pc, #480]	; (80050c8 <loadMenuTexts+0x428>)
 8004ee8:	f7fb fc48 	bl	800077c <copyText>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a77      	ldr	r2, [pc, #476]	; (80050cc <loadMenuTexts+0x42c>)
 8004ef0:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004ef2:	4877      	ldr	r0, [pc, #476]	; (80050d0 <loadMenuTexts+0x430>)
 8004ef4:	f7fb fc42 	bl	800077c <copyText>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4a76      	ldr	r2, [pc, #472]	; (80050d4 <loadMenuTexts+0x434>)
 8004efc:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004efe:	4876      	ldr	r0, [pc, #472]	; (80050d8 <loadMenuTexts+0x438>)
 8004f00:	f7fb fc3c 	bl	800077c <copyText>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4a75      	ldr	r2, [pc, #468]	; (80050dc <loadMenuTexts+0x43c>)
 8004f08:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004f0a:	4875      	ldr	r0, [pc, #468]	; (80050e0 <loadMenuTexts+0x440>)
 8004f0c:	f7fb fc36 	bl	800077c <copyText>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4a74      	ldr	r2, [pc, #464]	; (80050e4 <loadMenuTexts+0x444>)
 8004f14:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004f16:	4874      	ldr	r0, [pc, #464]	; (80050e8 <loadMenuTexts+0x448>)
 8004f18:	f7fb fc30 	bl	800077c <copyText>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4a73      	ldr	r2, [pc, #460]	; (80050ec <loadMenuTexts+0x44c>)
 8004f20:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004f22:	4873      	ldr	r0, [pc, #460]	; (80050f0 <loadMenuTexts+0x450>)
 8004f24:	f7fb fc2a 	bl	800077c <copyText>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4a72      	ldr	r2, [pc, #456]	; (80050f4 <loadMenuTexts+0x454>)
 8004f2c:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004f2e:	4872      	ldr	r0, [pc, #456]	; (80050f8 <loadMenuTexts+0x458>)
 8004f30:	f7fb fc24 	bl	800077c <copyText>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4a71      	ldr	r2, [pc, #452]	; (80050fc <loadMenuTexts+0x45c>)
 8004f38:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004f3a:	4871      	ldr	r0, [pc, #452]	; (8005100 <loadMenuTexts+0x460>)
 8004f3c:	f7fb fc1e 	bl	800077c <copyText>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4a70      	ldr	r2, [pc, #448]	; (8005104 <loadMenuTexts+0x464>)
 8004f44:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004f46:	4870      	ldr	r0, [pc, #448]	; (8005108 <loadMenuTexts+0x468>)
 8004f48:	f7fb fc18 	bl	800077c <copyText>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	e0dd      	b.n	800510c <loadMenuTexts+0x46c>
 8004f50:	20000000 	.word	0x20000000
 8004f54:	20000d70 	.word	0x20000d70
 8004f58:	20000010 	.word	0x20000010
 8004f5c:	20000d74 	.word	0x20000d74
 8004f60:	20000020 	.word	0x20000020
 8004f64:	20000dcc 	.word	0x20000dcc
 8004f68:	20000030 	.word	0x20000030
 8004f6c:	20000dfc 	.word	0x20000dfc
 8004f70:	20000040 	.word	0x20000040
 8004f74:	20000e04 	.word	0x20000e04
 8004f78:	20000050 	.word	0x20000050
 8004f7c:	20000e7c 	.word	0x20000e7c
 8004f80:	20000060 	.word	0x20000060
 8004f84:	20000e80 	.word	0x20000e80
 8004f88:	20000070 	.word	0x20000070
 8004f8c:	20000d78 	.word	0x20000d78
 8004f90:	20000080 	.word	0x20000080
 8004f94:	20000d7c 	.word	0x20000d7c
 8004f98:	20000090 	.word	0x20000090
 8004f9c:	20000d80 	.word	0x20000d80
 8004fa0:	200000a0 	.word	0x200000a0
 8004fa4:	20000d84 	.word	0x20000d84
 8004fa8:	200000b0 	.word	0x200000b0
 8004fac:	20000d88 	.word	0x20000d88
 8004fb0:	200000c0 	.word	0x200000c0
 8004fb4:	20000d8c 	.word	0x20000d8c
 8004fb8:	200000d0 	.word	0x200000d0
 8004fbc:	20000d90 	.word	0x20000d90
 8004fc0:	200000e0 	.word	0x200000e0
 8004fc4:	20000d94 	.word	0x20000d94
 8004fc8:	200000f0 	.word	0x200000f0
 8004fcc:	20000d98 	.word	0x20000d98
 8004fd0:	20000100 	.word	0x20000100
 8004fd4:	20000d9c 	.word	0x20000d9c
 8004fd8:	20000110 	.word	0x20000110
 8004fdc:	20000da0 	.word	0x20000da0
 8004fe0:	20000120 	.word	0x20000120
 8004fe4:	20000da4 	.word	0x20000da4
 8004fe8:	20000130 	.word	0x20000130
 8004fec:	20000da8 	.word	0x20000da8
 8004ff0:	20000140 	.word	0x20000140
 8004ff4:	20000dac 	.word	0x20000dac
 8004ff8:	20000150 	.word	0x20000150
 8004ffc:	20000db0 	.word	0x20000db0
 8005000:	20000160 	.word	0x20000160
 8005004:	20000db4 	.word	0x20000db4
 8005008:	20000170 	.word	0x20000170
 800500c:	20000db8 	.word	0x20000db8
 8005010:	20000180 	.word	0x20000180
 8005014:	20000dbc 	.word	0x20000dbc
 8005018:	20000190 	.word	0x20000190
 800501c:	20000dc0 	.word	0x20000dc0
 8005020:	200001a0 	.word	0x200001a0
 8005024:	20000dc4 	.word	0x20000dc4
 8005028:	200001b0 	.word	0x200001b0
 800502c:	20000dc8 	.word	0x20000dc8
 8005030:	200001c0 	.word	0x200001c0
 8005034:	20000dd0 	.word	0x20000dd0
 8005038:	200001d0 	.word	0x200001d0
 800503c:	20000dd4 	.word	0x20000dd4
 8005040:	200001e0 	.word	0x200001e0
 8005044:	20000dd8 	.word	0x20000dd8
 8005048:	200001f0 	.word	0x200001f0
 800504c:	20000ddc 	.word	0x20000ddc
 8005050:	20000200 	.word	0x20000200
 8005054:	20000de0 	.word	0x20000de0
 8005058:	20000210 	.word	0x20000210
 800505c:	20000de4 	.word	0x20000de4
 8005060:	20000220 	.word	0x20000220
 8005064:	20000de8 	.word	0x20000de8
 8005068:	20000230 	.word	0x20000230
 800506c:	20000dec 	.word	0x20000dec
 8005070:	20000240 	.word	0x20000240
 8005074:	20000df0 	.word	0x20000df0
 8005078:	20000250 	.word	0x20000250
 800507c:	20000df4 	.word	0x20000df4
 8005080:	20000260 	.word	0x20000260
 8005084:	20000df8 	.word	0x20000df8
 8005088:	20000270 	.word	0x20000270
 800508c:	20000e00 	.word	0x20000e00
 8005090:	20000280 	.word	0x20000280
 8005094:	20000e08 	.word	0x20000e08
 8005098:	20000290 	.word	0x20000290
 800509c:	20000e0c 	.word	0x20000e0c
 80050a0:	200002a0 	.word	0x200002a0
 80050a4:	20000e10 	.word	0x20000e10
 80050a8:	200002b0 	.word	0x200002b0
 80050ac:	20000e14 	.word	0x20000e14
 80050b0:	200002c0 	.word	0x200002c0
 80050b4:	20000e18 	.word	0x20000e18
 80050b8:	200002d0 	.word	0x200002d0
 80050bc:	20000e1c 	.word	0x20000e1c
 80050c0:	200002e0 	.word	0x200002e0
 80050c4:	20000e20 	.word	0x20000e20
 80050c8:	200002f0 	.word	0x200002f0
 80050cc:	20000e24 	.word	0x20000e24
 80050d0:	20000300 	.word	0x20000300
 80050d4:	20000e28 	.word	0x20000e28
 80050d8:	20000310 	.word	0x20000310
 80050dc:	20000e2c 	.word	0x20000e2c
 80050e0:	20000320 	.word	0x20000320
 80050e4:	20000e30 	.word	0x20000e30
 80050e8:	20000330 	.word	0x20000330
 80050ec:	20000e34 	.word	0x20000e34
 80050f0:	20000340 	.word	0x20000340
 80050f4:	20000e38 	.word	0x20000e38
 80050f8:	20000350 	.word	0x20000350
 80050fc:	20000e3c 	.word	0x20000e3c
 8005100:	20000360 	.word	0x20000360
 8005104:	20000e40 	.word	0x20000e40
 8005108:	20000370 	.word	0x20000370
 800510c:	4a3d      	ldr	r2, [pc, #244]	; (8005204 <loadMenuTexts+0x564>)
 800510e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005110:	483d      	ldr	r0, [pc, #244]	; (8005208 <loadMenuTexts+0x568>)
 8005112:	f7fb fb33 	bl	800077c <copyText>
 8005116:	4603      	mov	r3, r0
 8005118:	4a3c      	ldr	r2, [pc, #240]	; (800520c <loadMenuTexts+0x56c>)
 800511a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 800511c:	483c      	ldr	r0, [pc, #240]	; (8005210 <loadMenuTexts+0x570>)
 800511e:	f7fb fb2d 	bl	800077c <copyText>
 8005122:	4603      	mov	r3, r0
 8005124:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <loadMenuTexts+0x574>)
 8005126:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8005128:	483b      	ldr	r0, [pc, #236]	; (8005218 <loadMenuTexts+0x578>)
 800512a:	f7fb fb27 	bl	800077c <copyText>
 800512e:	4603      	mov	r3, r0
 8005130:	4a3a      	ldr	r2, [pc, #232]	; (800521c <loadMenuTexts+0x57c>)
 8005132:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8005134:	483a      	ldr	r0, [pc, #232]	; (8005220 <loadMenuTexts+0x580>)
 8005136:	f7fb fb21 	bl	800077c <copyText>
 800513a:	4603      	mov	r3, r0
 800513c:	4a39      	ldr	r2, [pc, #228]	; (8005224 <loadMenuTexts+0x584>)
 800513e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005140:	4839      	ldr	r0, [pc, #228]	; (8005228 <loadMenuTexts+0x588>)
 8005142:	f7fb fb1b 	bl	800077c <copyText>
 8005146:	4603      	mov	r3, r0
 8005148:	4a38      	ldr	r2, [pc, #224]	; (800522c <loadMenuTexts+0x58c>)
 800514a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 800514c:	4838      	ldr	r0, [pc, #224]	; (8005230 <loadMenuTexts+0x590>)
 800514e:	f7fb fb15 	bl	800077c <copyText>
 8005152:	4603      	mov	r3, r0
 8005154:	4a37      	ldr	r2, [pc, #220]	; (8005234 <loadMenuTexts+0x594>)
 8005156:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005158:	4837      	ldr	r0, [pc, #220]	; (8005238 <loadMenuTexts+0x598>)
 800515a:	f7fb fb0f 	bl	800077c <copyText>
 800515e:	4603      	mov	r3, r0
 8005160:	4a36      	ldr	r2, [pc, #216]	; (800523c <loadMenuTexts+0x59c>)
 8005162:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005164:	4836      	ldr	r0, [pc, #216]	; (8005240 <loadMenuTexts+0x5a0>)
 8005166:	f7fb fb09 	bl	800077c <copyText>
 800516a:	4603      	mov	r3, r0
 800516c:	4a35      	ldr	r2, [pc, #212]	; (8005244 <loadMenuTexts+0x5a4>)
 800516e:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005170:	4835      	ldr	r0, [pc, #212]	; (8005248 <loadMenuTexts+0x5a8>)
 8005172:	f7fb fb03 	bl	800077c <copyText>
 8005176:	4603      	mov	r3, r0
 8005178:	4a34      	ldr	r2, [pc, #208]	; (800524c <loadMenuTexts+0x5ac>)
 800517a:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 800517c:	4834      	ldr	r0, [pc, #208]	; (8005250 <loadMenuTexts+0x5b0>)
 800517e:	f7fb fafd 	bl	800077c <copyText>
 8005182:	4603      	mov	r3, r0
 8005184:	4a33      	ldr	r2, [pc, #204]	; (8005254 <loadMenuTexts+0x5b4>)
 8005186:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005188:	4833      	ldr	r0, [pc, #204]	; (8005258 <loadMenuTexts+0x5b8>)
 800518a:	f7fb faf7 	bl	800077c <copyText>
 800518e:	4603      	mov	r3, r0
 8005190:	4a32      	ldr	r2, [pc, #200]	; (800525c <loadMenuTexts+0x5bc>)
 8005192:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005194:	4832      	ldr	r0, [pc, #200]	; (8005260 <loadMenuTexts+0x5c0>)
 8005196:	f7fb faf1 	bl	800077c <copyText>
 800519a:	4603      	mov	r3, r0
 800519c:	4a31      	ldr	r2, [pc, #196]	; (8005264 <loadMenuTexts+0x5c4>)
 800519e:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 80051a0:	4831      	ldr	r0, [pc, #196]	; (8005268 <loadMenuTexts+0x5c8>)
 80051a2:	f7fb faeb 	bl	800077c <copyText>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4a30      	ldr	r2, [pc, #192]	; (800526c <loadMenuTexts+0x5cc>)
 80051aa:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80051ac:	4830      	ldr	r0, [pc, #192]	; (8005270 <loadMenuTexts+0x5d0>)
 80051ae:	f7fb fae5 	bl	800077c <copyText>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a2f      	ldr	r2, [pc, #188]	; (8005274 <loadMenuTexts+0x5d4>)
 80051b6:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80051b8:	482f      	ldr	r0, [pc, #188]	; (8005278 <loadMenuTexts+0x5d8>)
 80051ba:	f7fb fadf 	bl	800077c <copyText>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a2e      	ldr	r2, [pc, #184]	; (800527c <loadMenuTexts+0x5dc>)
 80051c2:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 80051c4:	482e      	ldr	r0, [pc, #184]	; (8005280 <loadMenuTexts+0x5e0>)
 80051c6:	f7fb fad9 	bl	800077c <copyText>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <loadMenuTexts+0x5e4>)
 80051ce:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 80051d0:	482d      	ldr	r0, [pc, #180]	; (8005288 <loadMenuTexts+0x5e8>)
 80051d2:	f7fb fad3 	bl	800077c <copyText>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a2c      	ldr	r2, [pc, #176]	; (800528c <loadMenuTexts+0x5ec>)
 80051da:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80051dc:	482c      	ldr	r0, [pc, #176]	; (8005290 <loadMenuTexts+0x5f0>)
 80051de:	f7fb facd 	bl	800077c <copyText>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a2b      	ldr	r2, [pc, #172]	; (8005294 <loadMenuTexts+0x5f4>)
 80051e6:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80051e8:	482b      	ldr	r0, [pc, #172]	; (8005298 <loadMenuTexts+0x5f8>)
 80051ea:	f7fb fac7 	bl	800077c <copyText>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4a2a      	ldr	r2, [pc, #168]	; (800529c <loadMenuTexts+0x5fc>)
 80051f2:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80051f4:	482a      	ldr	r0, [pc, #168]	; (80052a0 <loadMenuTexts+0x600>)
 80051f6:	f7fb fac1 	bl	800077c <copyText>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <loadMenuTexts+0x604>)
 80051fe:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8005200:	e2d3      	b.n	80057aa <loadMenuTexts+0xb0a>
 8005202:	bf00      	nop
 8005204:	20000e44 	.word	0x20000e44
 8005208:	20000380 	.word	0x20000380
 800520c:	20000e48 	.word	0x20000e48
 8005210:	20000390 	.word	0x20000390
 8005214:	20000e4c 	.word	0x20000e4c
 8005218:	200003a0 	.word	0x200003a0
 800521c:	20000e50 	.word	0x20000e50
 8005220:	200003b0 	.word	0x200003b0
 8005224:	20000e54 	.word	0x20000e54
 8005228:	200003c0 	.word	0x200003c0
 800522c:	20000e58 	.word	0x20000e58
 8005230:	200003d0 	.word	0x200003d0
 8005234:	20000e5c 	.word	0x20000e5c
 8005238:	200003e0 	.word	0x200003e0
 800523c:	20000e60 	.word	0x20000e60
 8005240:	200003f0 	.word	0x200003f0
 8005244:	20000e64 	.word	0x20000e64
 8005248:	20000400 	.word	0x20000400
 800524c:	20000e68 	.word	0x20000e68
 8005250:	20000410 	.word	0x20000410
 8005254:	20000e6c 	.word	0x20000e6c
 8005258:	20000420 	.word	0x20000420
 800525c:	20000e70 	.word	0x20000e70
 8005260:	20000430 	.word	0x20000430
 8005264:	20000e74 	.word	0x20000e74
 8005268:	20000440 	.word	0x20000440
 800526c:	20000e78 	.word	0x20000e78
 8005270:	20000450 	.word	0x20000450
 8005274:	20000e84 	.word	0x20000e84
 8005278:	20000460 	.word	0x20000460
 800527c:	20000e88 	.word	0x20000e88
 8005280:	20000470 	.word	0x20000470
 8005284:	20000e8c 	.word	0x20000e8c
 8005288:	20000480 	.word	0x20000480
 800528c:	20000e90 	.word	0x20000e90
 8005290:	20000490 	.word	0x20000490
 8005294:	20000e94 	.word	0x20000e94
 8005298:	200004a0 	.word	0x200004a0
 800529c:	20000e98 	.word	0x20000e98
 80052a0:	200004b0 	.word	0x200004b0
 80052a4:	20000e9c 	.word	0x20000e9c
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80052a8:	48a9      	ldr	r0, [pc, #676]	; (8005550 <loadMenuTexts+0x8b0>)
 80052aa:	f7fb fa67 	bl	800077c <copyText>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4aa8      	ldr	r2, [pc, #672]	; (8005554 <loadMenuTexts+0x8b4>)
 80052b2:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80052b4:	48a8      	ldr	r0, [pc, #672]	; (8005558 <loadMenuTexts+0x8b8>)
 80052b6:	f7fb fa61 	bl	800077c <copyText>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4aa7      	ldr	r2, [pc, #668]	; (800555c <loadMenuTexts+0x8bc>)
 80052be:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80052c0:	48a7      	ldr	r0, [pc, #668]	; (8005560 <loadMenuTexts+0x8c0>)
 80052c2:	f7fb fa5b 	bl	800077c <copyText>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4aa6      	ldr	r2, [pc, #664]	; (8005564 <loadMenuTexts+0x8c4>)
 80052ca:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80052cc:	48a6      	ldr	r0, [pc, #664]	; (8005568 <loadMenuTexts+0x8c8>)
 80052ce:	f7fb fa55 	bl	800077c <copyText>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4aa5      	ldr	r2, [pc, #660]	; (800556c <loadMenuTexts+0x8cc>)
 80052d6:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80052d8:	48a5      	ldr	r0, [pc, #660]	; (8005570 <loadMenuTexts+0x8d0>)
 80052da:	f7fb fa4f 	bl	800077c <copyText>
 80052de:	4603      	mov	r3, r0
 80052e0:	4aa4      	ldr	r2, [pc, #656]	; (8005574 <loadMenuTexts+0x8d4>)
 80052e2:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80052e4:	48a4      	ldr	r0, [pc, #656]	; (8005578 <loadMenuTexts+0x8d8>)
 80052e6:	f7fb fa49 	bl	800077c <copyText>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4aa3      	ldr	r2, [pc, #652]	; (800557c <loadMenuTexts+0x8dc>)
 80052ee:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80052f0:	48a3      	ldr	r0, [pc, #652]	; (8005580 <loadMenuTexts+0x8e0>)
 80052f2:	f7fb fa43 	bl	800077c <copyText>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4aa2      	ldr	r2, [pc, #648]	; (8005584 <loadMenuTexts+0x8e4>)
 80052fa:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80052fc:	48a2      	ldr	r0, [pc, #648]	; (8005588 <loadMenuTexts+0x8e8>)
 80052fe:	f7fb fa3d 	bl	800077c <copyText>
 8005302:	4603      	mov	r3, r0
 8005304:	4aa1      	ldr	r2, [pc, #644]	; (800558c <loadMenuTexts+0x8ec>)
 8005306:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8005308:	48a1      	ldr	r0, [pc, #644]	; (8005590 <loadMenuTexts+0x8f0>)
 800530a:	f7fb fa37 	bl	800077c <copyText>
 800530e:	4603      	mov	r3, r0
 8005310:	4aa0      	ldr	r2, [pc, #640]	; (8005594 <loadMenuTexts+0x8f4>)
 8005312:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8005314:	48a0      	ldr	r0, [pc, #640]	; (8005598 <loadMenuTexts+0x8f8>)
 8005316:	f7fb fa31 	bl	800077c <copyText>
 800531a:	4603      	mov	r3, r0
 800531c:	4a9f      	ldr	r2, [pc, #636]	; (800559c <loadMenuTexts+0x8fc>)
 800531e:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005320:	489f      	ldr	r0, [pc, #636]	; (80055a0 <loadMenuTexts+0x900>)
 8005322:	f7fb fa2b 	bl	800077c <copyText>
 8005326:	4603      	mov	r3, r0
 8005328:	4a9e      	ldr	r2, [pc, #632]	; (80055a4 <loadMenuTexts+0x904>)
 800532a:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 800532c:	489e      	ldr	r0, [pc, #632]	; (80055a8 <loadMenuTexts+0x908>)
 800532e:	f7fb fa25 	bl	800077c <copyText>
 8005332:	4603      	mov	r3, r0
 8005334:	4a9d      	ldr	r2, [pc, #628]	; (80055ac <loadMenuTexts+0x90c>)
 8005336:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005338:	489d      	ldr	r0, [pc, #628]	; (80055b0 <loadMenuTexts+0x910>)
 800533a:	f7fb fa1f 	bl	800077c <copyText>
 800533e:	4603      	mov	r3, r0
 8005340:	4a9c      	ldr	r2, [pc, #624]	; (80055b4 <loadMenuTexts+0x914>)
 8005342:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005344:	489c      	ldr	r0, [pc, #624]	; (80055b8 <loadMenuTexts+0x918>)
 8005346:	f7fb fa19 	bl	800077c <copyText>
 800534a:	4603      	mov	r3, r0
 800534c:	4a9b      	ldr	r2, [pc, #620]	; (80055bc <loadMenuTexts+0x91c>)
 800534e:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005350:	489b      	ldr	r0, [pc, #620]	; (80055c0 <loadMenuTexts+0x920>)
 8005352:	f7fb fa13 	bl	800077c <copyText>
 8005356:	4603      	mov	r3, r0
 8005358:	4a9a      	ldr	r2, [pc, #616]	; (80055c4 <loadMenuTexts+0x924>)
 800535a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 800535c:	489a      	ldr	r0, [pc, #616]	; (80055c8 <loadMenuTexts+0x928>)
 800535e:	f7fb fa0d 	bl	800077c <copyText>
 8005362:	4603      	mov	r3, r0
 8005364:	4a99      	ldr	r2, [pc, #612]	; (80055cc <loadMenuTexts+0x92c>)
 8005366:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005368:	4899      	ldr	r0, [pc, #612]	; (80055d0 <loadMenuTexts+0x930>)
 800536a:	f7fb fa07 	bl	800077c <copyText>
 800536e:	4603      	mov	r3, r0
 8005370:	4a98      	ldr	r2, [pc, #608]	; (80055d4 <loadMenuTexts+0x934>)
 8005372:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005374:	4898      	ldr	r0, [pc, #608]	; (80055d8 <loadMenuTexts+0x938>)
 8005376:	f7fb fa01 	bl	800077c <copyText>
 800537a:	4603      	mov	r3, r0
 800537c:	4a97      	ldr	r2, [pc, #604]	; (80055dc <loadMenuTexts+0x93c>)
 800537e:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005380:	4897      	ldr	r0, [pc, #604]	; (80055e0 <loadMenuTexts+0x940>)
 8005382:	f7fb f9fb 	bl	800077c <copyText>
 8005386:	4603      	mov	r3, r0
 8005388:	4a96      	ldr	r2, [pc, #600]	; (80055e4 <loadMenuTexts+0x944>)
 800538a:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 800538c:	4896      	ldr	r0, [pc, #600]	; (80055e8 <loadMenuTexts+0x948>)
 800538e:	f7fb f9f5 	bl	800077c <copyText>
 8005392:	4603      	mov	r3, r0
 8005394:	4a95      	ldr	r2, [pc, #596]	; (80055ec <loadMenuTexts+0x94c>)
 8005396:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8005398:	4895      	ldr	r0, [pc, #596]	; (80055f0 <loadMenuTexts+0x950>)
 800539a:	f7fb f9ef 	bl	800077c <copyText>
 800539e:	4603      	mov	r3, r0
 80053a0:	4a94      	ldr	r2, [pc, #592]	; (80055f4 <loadMenuTexts+0x954>)
 80053a2:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80053a4:	4894      	ldr	r0, [pc, #592]	; (80055f8 <loadMenuTexts+0x958>)
 80053a6:	f7fb f9e9 	bl	800077c <copyText>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a93      	ldr	r2, [pc, #588]	; (80055fc <loadMenuTexts+0x95c>)
 80053ae:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80053b0:	4893      	ldr	r0, [pc, #588]	; (8005600 <loadMenuTexts+0x960>)
 80053b2:	f7fb f9e3 	bl	800077c <copyText>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a92      	ldr	r2, [pc, #584]	; (8005604 <loadMenuTexts+0x964>)
 80053ba:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80053bc:	4892      	ldr	r0, [pc, #584]	; (8005608 <loadMenuTexts+0x968>)
 80053be:	f7fb f9dd 	bl	800077c <copyText>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4a91      	ldr	r2, [pc, #580]	; (800560c <loadMenuTexts+0x96c>)
 80053c6:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80053c8:	4891      	ldr	r0, [pc, #580]	; (8005610 <loadMenuTexts+0x970>)
 80053ca:	f7fb f9d7 	bl	800077c <copyText>
 80053ce:	4603      	mov	r3, r0
 80053d0:	4a90      	ldr	r2, [pc, #576]	; (8005614 <loadMenuTexts+0x974>)
 80053d2:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80053d4:	4890      	ldr	r0, [pc, #576]	; (8005618 <loadMenuTexts+0x978>)
 80053d6:	f7fb f9d1 	bl	800077c <copyText>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a8f      	ldr	r2, [pc, #572]	; (800561c <loadMenuTexts+0x97c>)
 80053de:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80053e0:	488f      	ldr	r0, [pc, #572]	; (8005620 <loadMenuTexts+0x980>)
 80053e2:	f7fb f9cb 	bl	800077c <copyText>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a8e      	ldr	r2, [pc, #568]	; (8005624 <loadMenuTexts+0x984>)
 80053ea:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80053ec:	488e      	ldr	r0, [pc, #568]	; (8005628 <loadMenuTexts+0x988>)
 80053ee:	f7fb f9c5 	bl	800077c <copyText>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4a8d      	ldr	r2, [pc, #564]	; (800562c <loadMenuTexts+0x98c>)
 80053f6:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80053f8:	488d      	ldr	r0, [pc, #564]	; (8005630 <loadMenuTexts+0x990>)
 80053fa:	f7fb f9bf 	bl	800077c <copyText>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a8c      	ldr	r2, [pc, #560]	; (8005634 <loadMenuTexts+0x994>)
 8005402:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8005404:	488c      	ldr	r0, [pc, #560]	; (8005638 <loadMenuTexts+0x998>)
 8005406:	f7fb f9b9 	bl	800077c <copyText>
 800540a:	4603      	mov	r3, r0
 800540c:	4a8b      	ldr	r2, [pc, #556]	; (800563c <loadMenuTexts+0x99c>)
 800540e:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005410:	488b      	ldr	r0, [pc, #556]	; (8005640 <loadMenuTexts+0x9a0>)
 8005412:	f7fb f9b3 	bl	800077c <copyText>
 8005416:	4603      	mov	r3, r0
 8005418:	4a8a      	ldr	r2, [pc, #552]	; (8005644 <loadMenuTexts+0x9a4>)
 800541a:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 800541c:	488a      	ldr	r0, [pc, #552]	; (8005648 <loadMenuTexts+0x9a8>)
 800541e:	f7fb f9ad 	bl	800077c <copyText>
 8005422:	4603      	mov	r3, r0
 8005424:	4a89      	ldr	r2, [pc, #548]	; (800564c <loadMenuTexts+0x9ac>)
 8005426:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005428:	4889      	ldr	r0, [pc, #548]	; (8005650 <loadMenuTexts+0x9b0>)
 800542a:	f7fb f9a7 	bl	800077c <copyText>
 800542e:	4603      	mov	r3, r0
 8005430:	4a88      	ldr	r2, [pc, #544]	; (8005654 <loadMenuTexts+0x9b4>)
 8005432:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005434:	4888      	ldr	r0, [pc, #544]	; (8005658 <loadMenuTexts+0x9b8>)
 8005436:	f7fb f9a1 	bl	800077c <copyText>
 800543a:	4603      	mov	r3, r0
 800543c:	4a87      	ldr	r2, [pc, #540]	; (800565c <loadMenuTexts+0x9bc>)
 800543e:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005440:	4887      	ldr	r0, [pc, #540]	; (8005660 <loadMenuTexts+0x9c0>)
 8005442:	f7fb f99b 	bl	800077c <copyText>
 8005446:	4603      	mov	r3, r0
 8005448:	4a86      	ldr	r2, [pc, #536]	; (8005664 <loadMenuTexts+0x9c4>)
 800544a:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 800544c:	4886      	ldr	r0, [pc, #536]	; (8005668 <loadMenuTexts+0x9c8>)
 800544e:	f7fb f995 	bl	800077c <copyText>
 8005452:	4603      	mov	r3, r0
 8005454:	4a85      	ldr	r2, [pc, #532]	; (800566c <loadMenuTexts+0x9cc>)
 8005456:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005458:	4885      	ldr	r0, [pc, #532]	; (8005670 <loadMenuTexts+0x9d0>)
 800545a:	f7fb f98f 	bl	800077c <copyText>
 800545e:	4603      	mov	r3, r0
 8005460:	4a84      	ldr	r2, [pc, #528]	; (8005674 <loadMenuTexts+0x9d4>)
 8005462:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005464:	4884      	ldr	r0, [pc, #528]	; (8005678 <loadMenuTexts+0x9d8>)
 8005466:	f7fb f989 	bl	800077c <copyText>
 800546a:	4603      	mov	r3, r0
 800546c:	4a83      	ldr	r2, [pc, #524]	; (800567c <loadMenuTexts+0x9dc>)
 800546e:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005470:	4883      	ldr	r0, [pc, #524]	; (8005680 <loadMenuTexts+0x9e0>)
 8005472:	f7fb f983 	bl	800077c <copyText>
 8005476:	4603      	mov	r3, r0
 8005478:	4a82      	ldr	r2, [pc, #520]	; (8005684 <loadMenuTexts+0x9e4>)
 800547a:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 800547c:	4882      	ldr	r0, [pc, #520]	; (8005688 <loadMenuTexts+0x9e8>)
 800547e:	f7fb f97d 	bl	800077c <copyText>
 8005482:	4603      	mov	r3, r0
 8005484:	4a81      	ldr	r2, [pc, #516]	; (800568c <loadMenuTexts+0x9ec>)
 8005486:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005488:	4881      	ldr	r0, [pc, #516]	; (8005690 <loadMenuTexts+0x9f0>)
 800548a:	f7fb f977 	bl	800077c <copyText>
 800548e:	4603      	mov	r3, r0
 8005490:	4a80      	ldr	r2, [pc, #512]	; (8005694 <loadMenuTexts+0x9f4>)
 8005492:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005494:	4880      	ldr	r0, [pc, #512]	; (8005698 <loadMenuTexts+0x9f8>)
 8005496:	f7fb f971 	bl	800077c <copyText>
 800549a:	4603      	mov	r3, r0
 800549c:	4a7f      	ldr	r2, [pc, #508]	; (800569c <loadMenuTexts+0x9fc>)
 800549e:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80054a0:	487f      	ldr	r0, [pc, #508]	; (80056a0 <loadMenuTexts+0xa00>)
 80054a2:	f7fb f96b 	bl	800077c <copyText>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a7e      	ldr	r2, [pc, #504]	; (80056a4 <loadMenuTexts+0xa04>)
 80054aa:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80054ac:	487e      	ldr	r0, [pc, #504]	; (80056a8 <loadMenuTexts+0xa08>)
 80054ae:	f7fb f965 	bl	800077c <copyText>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4a7d      	ldr	r2, [pc, #500]	; (80056ac <loadMenuTexts+0xa0c>)
 80054b6:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80054b8:	487d      	ldr	r0, [pc, #500]	; (80056b0 <loadMenuTexts+0xa10>)
 80054ba:	f7fb f95f 	bl	800077c <copyText>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a7c      	ldr	r2, [pc, #496]	; (80056b4 <loadMenuTexts+0xa14>)
 80054c2:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80054c4:	487c      	ldr	r0, [pc, #496]	; (80056b8 <loadMenuTexts+0xa18>)
 80054c6:	f7fb f959 	bl	800077c <copyText>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a7b      	ldr	r2, [pc, #492]	; (80056bc <loadMenuTexts+0xa1c>)
 80054ce:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80054d0:	487b      	ldr	r0, [pc, #492]	; (80056c0 <loadMenuTexts+0xa20>)
 80054d2:	f7fb f953 	bl	800077c <copyText>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4a7a      	ldr	r2, [pc, #488]	; (80056c4 <loadMenuTexts+0xa24>)
 80054da:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80054dc:	487a      	ldr	r0, [pc, #488]	; (80056c8 <loadMenuTexts+0xa28>)
 80054de:	f7fb f94d 	bl	800077c <copyText>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4a79      	ldr	r2, [pc, #484]	; (80056cc <loadMenuTexts+0xa2c>)
 80054e6:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80054e8:	4879      	ldr	r0, [pc, #484]	; (80056d0 <loadMenuTexts+0xa30>)
 80054ea:	f7fb f947 	bl	800077c <copyText>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4a78      	ldr	r2, [pc, #480]	; (80056d4 <loadMenuTexts+0xa34>)
 80054f2:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80054f4:	4878      	ldr	r0, [pc, #480]	; (80056d8 <loadMenuTexts+0xa38>)
 80054f6:	f7fb f941 	bl	800077c <copyText>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4a77      	ldr	r2, [pc, #476]	; (80056dc <loadMenuTexts+0xa3c>)
 80054fe:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8005500:	4877      	ldr	r0, [pc, #476]	; (80056e0 <loadMenuTexts+0xa40>)
 8005502:	f7fb f93b 	bl	800077c <copyText>
 8005506:	4603      	mov	r3, r0
 8005508:	4a76      	ldr	r2, [pc, #472]	; (80056e4 <loadMenuTexts+0xa44>)
 800550a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 800550c:	4876      	ldr	r0, [pc, #472]	; (80056e8 <loadMenuTexts+0xa48>)
 800550e:	f7fb f935 	bl	800077c <copyText>
 8005512:	4603      	mov	r3, r0
 8005514:	4a75      	ldr	r2, [pc, #468]	; (80056ec <loadMenuTexts+0xa4c>)
 8005516:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005518:	4875      	ldr	r0, [pc, #468]	; (80056f0 <loadMenuTexts+0xa50>)
 800551a:	f7fb f92f 	bl	800077c <copyText>
 800551e:	4603      	mov	r3, r0
 8005520:	4a74      	ldr	r2, [pc, #464]	; (80056f4 <loadMenuTexts+0xa54>)
 8005522:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005524:	4874      	ldr	r0, [pc, #464]	; (80056f8 <loadMenuTexts+0xa58>)
 8005526:	f7fb f929 	bl	800077c <copyText>
 800552a:	4603      	mov	r3, r0
 800552c:	4a73      	ldr	r2, [pc, #460]	; (80056fc <loadMenuTexts+0xa5c>)
 800552e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005530:	4873      	ldr	r0, [pc, #460]	; (8005700 <loadMenuTexts+0xa60>)
 8005532:	f7fb f923 	bl	800077c <copyText>
 8005536:	4603      	mov	r3, r0
 8005538:	4a72      	ldr	r2, [pc, #456]	; (8005704 <loadMenuTexts+0xa64>)
 800553a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 800553c:	4872      	ldr	r0, [pc, #456]	; (8005708 <loadMenuTexts+0xa68>)
 800553e:	f7fb f91d 	bl	800077c <copyText>
 8005542:	4603      	mov	r3, r0
 8005544:	4a71      	ldr	r2, [pc, #452]	; (800570c <loadMenuTexts+0xa6c>)
 8005546:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005548:	4871      	ldr	r0, [pc, #452]	; (8005710 <loadMenuTexts+0xa70>)
 800554a:	f7fb f917 	bl	800077c <copyText>
 800554e:	e0e1      	b.n	8005714 <loadMenuTexts+0xa74>
 8005550:	200004c0 	.word	0x200004c0
 8005554:	20000d78 	.word	0x20000d78
 8005558:	200004d0 	.word	0x200004d0
 800555c:	20000d7c 	.word	0x20000d7c
 8005560:	200004e0 	.word	0x200004e0
 8005564:	20000d80 	.word	0x20000d80
 8005568:	200004f0 	.word	0x200004f0
 800556c:	20000d84 	.word	0x20000d84
 8005570:	20000500 	.word	0x20000500
 8005574:	20000d88 	.word	0x20000d88
 8005578:	20000510 	.word	0x20000510
 800557c:	20000d8c 	.word	0x20000d8c
 8005580:	20000520 	.word	0x20000520
 8005584:	20000d90 	.word	0x20000d90
 8005588:	20000530 	.word	0x20000530
 800558c:	20000d94 	.word	0x20000d94
 8005590:	20000540 	.word	0x20000540
 8005594:	20000d98 	.word	0x20000d98
 8005598:	20000550 	.word	0x20000550
 800559c:	20000d9c 	.word	0x20000d9c
 80055a0:	20000560 	.word	0x20000560
 80055a4:	20000da0 	.word	0x20000da0
 80055a8:	20000570 	.word	0x20000570
 80055ac:	20000da4 	.word	0x20000da4
 80055b0:	20000580 	.word	0x20000580
 80055b4:	20000da8 	.word	0x20000da8
 80055b8:	20000590 	.word	0x20000590
 80055bc:	20000dac 	.word	0x20000dac
 80055c0:	200005a0 	.word	0x200005a0
 80055c4:	20000db0 	.word	0x20000db0
 80055c8:	200005b0 	.word	0x200005b0
 80055cc:	20000db4 	.word	0x20000db4
 80055d0:	200005c0 	.word	0x200005c0
 80055d4:	20000db8 	.word	0x20000db8
 80055d8:	200005d0 	.word	0x200005d0
 80055dc:	20000dbc 	.word	0x20000dbc
 80055e0:	200005e0 	.word	0x200005e0
 80055e4:	20000dc0 	.word	0x20000dc0
 80055e8:	200005f0 	.word	0x200005f0
 80055ec:	20000dc4 	.word	0x20000dc4
 80055f0:	20000600 	.word	0x20000600
 80055f4:	20000dc8 	.word	0x20000dc8
 80055f8:	20000610 	.word	0x20000610
 80055fc:	20000dd0 	.word	0x20000dd0
 8005600:	20000620 	.word	0x20000620
 8005604:	20000dd4 	.word	0x20000dd4
 8005608:	20000630 	.word	0x20000630
 800560c:	20000dd8 	.word	0x20000dd8
 8005610:	20000640 	.word	0x20000640
 8005614:	20000ddc 	.word	0x20000ddc
 8005618:	20000650 	.word	0x20000650
 800561c:	20000de0 	.word	0x20000de0
 8005620:	20000660 	.word	0x20000660
 8005624:	20000de4 	.word	0x20000de4
 8005628:	20000670 	.word	0x20000670
 800562c:	20000de8 	.word	0x20000de8
 8005630:	20000680 	.word	0x20000680
 8005634:	20000dec 	.word	0x20000dec
 8005638:	20000690 	.word	0x20000690
 800563c:	20000df0 	.word	0x20000df0
 8005640:	200006a0 	.word	0x200006a0
 8005644:	20000df4 	.word	0x20000df4
 8005648:	200006b0 	.word	0x200006b0
 800564c:	20000df8 	.word	0x20000df8
 8005650:	200006c0 	.word	0x200006c0
 8005654:	20000e00 	.word	0x20000e00
 8005658:	200006d0 	.word	0x200006d0
 800565c:	20000e08 	.word	0x20000e08
 8005660:	200006e0 	.word	0x200006e0
 8005664:	20000e0c 	.word	0x20000e0c
 8005668:	200006f0 	.word	0x200006f0
 800566c:	20000e10 	.word	0x20000e10
 8005670:	20000700 	.word	0x20000700
 8005674:	20000e14 	.word	0x20000e14
 8005678:	20000710 	.word	0x20000710
 800567c:	20000e18 	.word	0x20000e18
 8005680:	20000720 	.word	0x20000720
 8005684:	20000e1c 	.word	0x20000e1c
 8005688:	20000730 	.word	0x20000730
 800568c:	20000e20 	.word	0x20000e20
 8005690:	20000740 	.word	0x20000740
 8005694:	20000e24 	.word	0x20000e24
 8005698:	20000750 	.word	0x20000750
 800569c:	20000e28 	.word	0x20000e28
 80056a0:	20000760 	.word	0x20000760
 80056a4:	20000e2c 	.word	0x20000e2c
 80056a8:	20000770 	.word	0x20000770
 80056ac:	20000e30 	.word	0x20000e30
 80056b0:	20000780 	.word	0x20000780
 80056b4:	20000e34 	.word	0x20000e34
 80056b8:	20000790 	.word	0x20000790
 80056bc:	20000e38 	.word	0x20000e38
 80056c0:	200007a0 	.word	0x200007a0
 80056c4:	20000e3c 	.word	0x20000e3c
 80056c8:	200007b0 	.word	0x200007b0
 80056cc:	20000e40 	.word	0x20000e40
 80056d0:	200007c0 	.word	0x200007c0
 80056d4:	20000e44 	.word	0x20000e44
 80056d8:	200007d0 	.word	0x200007d0
 80056dc:	20000e48 	.word	0x20000e48
 80056e0:	200007e0 	.word	0x200007e0
 80056e4:	20000e4c 	.word	0x20000e4c
 80056e8:	200007f0 	.word	0x200007f0
 80056ec:	20000e50 	.word	0x20000e50
 80056f0:	20000800 	.word	0x20000800
 80056f4:	20000e54 	.word	0x20000e54
 80056f8:	20000810 	.word	0x20000810
 80056fc:	20000e58 	.word	0x20000e58
 8005700:	20000820 	.word	0x20000820
 8005704:	20000e5c 	.word	0x20000e5c
 8005708:	20000830 	.word	0x20000830
 800570c:	20000e60 	.word	0x20000e60
 8005710:	20000840 	.word	0x20000840
 8005714:	4603      	mov	r3, r0
 8005716:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <loadMenuTexts+0xb14>)
 8005718:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800571a:	4827      	ldr	r0, [pc, #156]	; (80057b8 <loadMenuTexts+0xb18>)
 800571c:	f7fb f82e 	bl	800077c <copyText>
 8005720:	4603      	mov	r3, r0
 8005722:	4a26      	ldr	r2, [pc, #152]	; (80057bc <loadMenuTexts+0xb1c>)
 8005724:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8005726:	4826      	ldr	r0, [pc, #152]	; (80057c0 <loadMenuTexts+0xb20>)
 8005728:	f7fb f828 	bl	800077c <copyText>
 800572c:	4603      	mov	r3, r0
 800572e:	4a25      	ldr	r2, [pc, #148]	; (80057c4 <loadMenuTexts+0xb24>)
 8005730:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8005732:	4825      	ldr	r0, [pc, #148]	; (80057c8 <loadMenuTexts+0xb28>)
 8005734:	f7fb f822 	bl	800077c <copyText>
 8005738:	4603      	mov	r3, r0
 800573a:	4a24      	ldr	r2, [pc, #144]	; (80057cc <loadMenuTexts+0xb2c>)
 800573c:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800573e:	4824      	ldr	r0, [pc, #144]	; (80057d0 <loadMenuTexts+0xb30>)
 8005740:	f7fb f81c 	bl	800077c <copyText>
 8005744:	4603      	mov	r3, r0
 8005746:	4a23      	ldr	r2, [pc, #140]	; (80057d4 <loadMenuTexts+0xb34>)
 8005748:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800574a:	4823      	ldr	r0, [pc, #140]	; (80057d8 <loadMenuTexts+0xb38>)
 800574c:	f7fb f816 	bl	800077c <copyText>
 8005750:	4603      	mov	r3, r0
 8005752:	4a22      	ldr	r2, [pc, #136]	; (80057dc <loadMenuTexts+0xb3c>)
 8005754:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005756:	4822      	ldr	r0, [pc, #136]	; (80057e0 <loadMenuTexts+0xb40>)
 8005758:	f7fb f810 	bl	800077c <copyText>
 800575c:	4603      	mov	r3, r0
 800575e:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <loadMenuTexts+0xb44>)
 8005760:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005762:	4821      	ldr	r0, [pc, #132]	; (80057e8 <loadMenuTexts+0xb48>)
 8005764:	f7fb f80a 	bl	800077c <copyText>
 8005768:	4603      	mov	r3, r0
 800576a:	4a20      	ldr	r2, [pc, #128]	; (80057ec <loadMenuTexts+0xb4c>)
 800576c:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800576e:	4820      	ldr	r0, [pc, #128]	; (80057f0 <loadMenuTexts+0xb50>)
 8005770:	f7fb f804 	bl	800077c <copyText>
 8005774:	4603      	mov	r3, r0
 8005776:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <loadMenuTexts+0xb54>)
 8005778:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 800577a:	481f      	ldr	r0, [pc, #124]	; (80057f8 <loadMenuTexts+0xb58>)
 800577c:	f7fa fffe 	bl	800077c <copyText>
 8005780:	4603      	mov	r3, r0
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <loadMenuTexts+0xb5c>)
 8005784:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005786:	481e      	ldr	r0, [pc, #120]	; (8005800 <loadMenuTexts+0xb60>)
 8005788:	f7fa fff8 	bl	800077c <copyText>
 800578c:	4603      	mov	r3, r0
 800578e:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <loadMenuTexts+0xb64>)
 8005790:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005792:	481d      	ldr	r0, [pc, #116]	; (8005808 <loadMenuTexts+0xb68>)
 8005794:	f7fa fff2 	bl	800077c <copyText>
 8005798:	4603      	mov	r3, r0
 800579a:	4a1c      	ldr	r2, [pc, #112]	; (800580c <loadMenuTexts+0xb6c>)
 800579c:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 800579e:	481c      	ldr	r0, [pc, #112]	; (8005810 <loadMenuTexts+0xb70>)
 80057a0:	f7fa ffec 	bl	800077c <copyText>
 80057a4:	4603      	mov	r3, r0
 80057a6:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <loadMenuTexts+0xb74>)
 80057a8:	6013      	str	r3, [r2, #0]
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000e64 	.word	0x20000e64
 80057b8:	20000850 	.word	0x20000850
 80057bc:	20000e68 	.word	0x20000e68
 80057c0:	20000860 	.word	0x20000860
 80057c4:	20000e6c 	.word	0x20000e6c
 80057c8:	20000870 	.word	0x20000870
 80057cc:	20000e70 	.word	0x20000e70
 80057d0:	20000880 	.word	0x20000880
 80057d4:	20000e74 	.word	0x20000e74
 80057d8:	20000890 	.word	0x20000890
 80057dc:	20000e78 	.word	0x20000e78
 80057e0:	200008a0 	.word	0x200008a0
 80057e4:	20000e84 	.word	0x20000e84
 80057e8:	200008b0 	.word	0x200008b0
 80057ec:	20000e88 	.word	0x20000e88
 80057f0:	200008c0 	.word	0x200008c0
 80057f4:	20000e8c 	.word	0x20000e8c
 80057f8:	200008d0 	.word	0x200008d0
 80057fc:	20000e90 	.word	0x20000e90
 8005800:	200008e0 	.word	0x200008e0
 8005804:	20000e94 	.word	0x20000e94
 8005808:	200008f0 	.word	0x200008f0
 800580c:	20000e98 	.word	0x20000e98
 8005810:	20000900 	.word	0x20000900
 8005814:	20000e9c 	.word	0x20000e9c

08005818 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d105      	bne.n	8005834 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005828:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <lcdUpdate+0x9c>)
 800582a:	2101      	movs	r1, #1
 800582c:	2002      	movs	r0, #2
 800582e:	f7fa ff1b 	bl	8000668 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005832:	e03b      	b.n	80058ac <lcdUpdate+0x94>
	} else if(y==2) {
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d105      	bne.n	8005846 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800583a:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <lcdUpdate+0x9c>)
 800583c:	2102      	movs	r1, #2
 800583e:	2002      	movs	r0, #2
 8005840:	f7fa ff12 	bl	8000668 <lcd_print>
}
 8005844:	e032      	b.n	80058ac <lcdUpdate+0x94>
	} else if(y==3) {
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d105      	bne.n	8005858 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 800584c:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <lcdUpdate+0x9c>)
 800584e:	2103      	movs	r1, #3
 8005850:	2002      	movs	r0, #2
 8005852:	f7fa ff09 	bl	8000668 <lcd_print>
}
 8005856:	e029      	b.n	80058ac <lcdUpdate+0x94>
	} else if(y==4) {
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	2b04      	cmp	r3, #4
 800585c:	d105      	bne.n	800586a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <lcdUpdate+0x9c>)
 8005860:	2104      	movs	r1, #4
 8005862:	2002      	movs	r0, #2
 8005864:	f7fa ff00 	bl	8000668 <lcd_print>
}
 8005868:	e020      	b.n	80058ac <lcdUpdate+0x94>
	} else if(y==5) {
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	2b05      	cmp	r3, #5
 800586e:	d105      	bne.n	800587c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005870:	4a10      	ldr	r2, [pc, #64]	; (80058b4 <lcdUpdate+0x9c>)
 8005872:	2105      	movs	r1, #5
 8005874:	2002      	movs	r0, #2
 8005876:	f7fa fef7 	bl	8000668 <lcd_print>
}
 800587a:	e017      	b.n	80058ac <lcdUpdate+0x94>
	} else if(y==6) {
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	2b06      	cmp	r3, #6
 8005880:	d105      	bne.n	800588e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005882:	4a0c      	ldr	r2, [pc, #48]	; (80058b4 <lcdUpdate+0x9c>)
 8005884:	2106      	movs	r1, #6
 8005886:	2002      	movs	r0, #2
 8005888:	f7fa feee 	bl	8000668 <lcd_print>
}
 800588c:	e00e      	b.n	80058ac <lcdUpdate+0x94>
	} else if (y==7) {
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b07      	cmp	r3, #7
 8005892:	d10b      	bne.n	80058ac <lcdUpdate+0x94>
		lcd_clear();
 8005894:	f7fa ff14 	bl	80006c0 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005898:	4a07      	ldr	r2, [pc, #28]	; (80058b8 <lcdUpdate+0xa0>)
 800589a:	2101      	movs	r1, #1
 800589c:	2001      	movs	r0, #1
 800589e:	f7fa fee3 	bl	8000668 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80058a2:	4a06      	ldr	r2, [pc, #24]	; (80058bc <lcdUpdate+0xa4>)
 80058a4:	2101      	movs	r1, #1
 80058a6:	2002      	movs	r0, #2
 80058a8:	f7fa fede 	bl	8000668 <lcd_print>
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	0800db54 	.word	0x0800db54
 80058b8:	0800e488 	.word	0x0800e488
 80058bc:	0800e49c 	.word	0x0800e49c

080058c0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d11d      	bne.n	800590c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80058d0:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80058d8:	4a61      	ldr	r2, [pc, #388]	; (8005a60 <hataKoduLcdGoster+0x1a0>)
 80058da:	2101      	movs	r1, #1
 80058dc:	2001      	movs	r0, #1
 80058de:	f7fa fec3 	bl	8000668 <lcd_print>
 80058e2:	e008      	b.n	80058f6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80058e4:	4b5d      	ldr	r3, [pc, #372]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d104      	bne.n	80058f6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058ec:	4a5d      	ldr	r2, [pc, #372]	; (8005a64 <hataKoduLcdGoster+0x1a4>)
 80058ee:	2101      	movs	r1, #1
 80058f0:	2001      	movs	r0, #1
 80058f2:	f7fa feb9 	bl	8000668 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80058f6:	4a5c      	ldr	r2, [pc, #368]	; (8005a68 <hataKoduLcdGoster+0x1a8>)
 80058f8:	2101      	movs	r1, #1
 80058fa:	2002      	movs	r0, #2
 80058fc:	f7fa feb4 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005900:	4a5a      	ldr	r2, [pc, #360]	; (8005a6c <hataKoduLcdGoster+0x1ac>)
 8005902:	2107      	movs	r1, #7
 8005904:	2002      	movs	r0, #2
 8005906:	f7fa feaf 	bl	8000668 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 800590a:	e0a3      	b.n	8005a54 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d11d      	bne.n	800594e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005912:	4b52      	ldr	r3, [pc, #328]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d105      	bne.n	8005926 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 800591a:	4a51      	ldr	r2, [pc, #324]	; (8005a60 <hataKoduLcdGoster+0x1a0>)
 800591c:	2101      	movs	r1, #1
 800591e:	2001      	movs	r0, #1
 8005920:	f7fa fea2 	bl	8000668 <lcd_print>
 8005924:	e008      	b.n	8005938 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005926:	4b4d      	ldr	r3, [pc, #308]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d104      	bne.n	8005938 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 800592e:	4a4d      	ldr	r2, [pc, #308]	; (8005a64 <hataKoduLcdGoster+0x1a4>)
 8005930:	2101      	movs	r1, #1
 8005932:	2001      	movs	r0, #1
 8005934:	f7fa fe98 	bl	8000668 <lcd_print>
		lcd_print(2, 2, "2");
 8005938:	4a4d      	ldr	r2, [pc, #308]	; (8005a70 <hataKoduLcdGoster+0x1b0>)
 800593a:	2102      	movs	r1, #2
 800593c:	2002      	movs	r0, #2
 800593e:	f7fa fe93 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005942:	4a4a      	ldr	r2, [pc, #296]	; (8005a6c <hataKoduLcdGoster+0x1ac>)
 8005944:	2107      	movs	r1, #7
 8005946:	2002      	movs	r0, #2
 8005948:	f7fa fe8e 	bl	8000668 <lcd_print>
}
 800594c:	e082      	b.n	8005a54 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d11d      	bne.n	8005990 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005954:	4b41      	ldr	r3, [pc, #260]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d105      	bne.n	8005968 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 800595c:	4a40      	ldr	r2, [pc, #256]	; (8005a60 <hataKoduLcdGoster+0x1a0>)
 800595e:	2101      	movs	r1, #1
 8005960:	2001      	movs	r0, #1
 8005962:	f7fa fe81 	bl	8000668 <lcd_print>
 8005966:	e008      	b.n	800597a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005968:	4b3c      	ldr	r3, [pc, #240]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d104      	bne.n	800597a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005970:	4a3c      	ldr	r2, [pc, #240]	; (8005a64 <hataKoduLcdGoster+0x1a4>)
 8005972:	2101      	movs	r1, #1
 8005974:	2001      	movs	r0, #1
 8005976:	f7fa fe77 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "3");
 800597a:	4a3e      	ldr	r2, [pc, #248]	; (8005a74 <hataKoduLcdGoster+0x1b4>)
 800597c:	2103      	movs	r1, #3
 800597e:	2002      	movs	r0, #2
 8005980:	f7fa fe72 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005984:	4a39      	ldr	r2, [pc, #228]	; (8005a6c <hataKoduLcdGoster+0x1ac>)
 8005986:	2107      	movs	r1, #7
 8005988:	2002      	movs	r0, #2
 800598a:	f7fa fe6d 	bl	8000668 <lcd_print>
}
 800598e:	e061      	b.n	8005a54 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d11d      	bne.n	80059d2 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005996:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 800599e:	4a30      	ldr	r2, [pc, #192]	; (8005a60 <hataKoduLcdGoster+0x1a0>)
 80059a0:	2101      	movs	r1, #1
 80059a2:	2001      	movs	r0, #1
 80059a4:	f7fa fe60 	bl	8000668 <lcd_print>
 80059a8:	e008      	b.n	80059bc <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 80059aa:	4b2c      	ldr	r3, [pc, #176]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d104      	bne.n	80059bc <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059b2:	4a2c      	ldr	r2, [pc, #176]	; (8005a64 <hataKoduLcdGoster+0x1a4>)
 80059b4:	2101      	movs	r1, #1
 80059b6:	2001      	movs	r0, #1
 80059b8:	f7fa fe56 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "4");
 80059bc:	4a2e      	ldr	r2, [pc, #184]	; (8005a78 <hataKoduLcdGoster+0x1b8>)
 80059be:	2104      	movs	r1, #4
 80059c0:	2002      	movs	r0, #2
 80059c2:	f7fa fe51 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80059c6:	4a29      	ldr	r2, [pc, #164]	; (8005a6c <hataKoduLcdGoster+0x1ac>)
 80059c8:	2107      	movs	r1, #7
 80059ca:	2002      	movs	r0, #2
 80059cc:	f7fa fe4c 	bl	8000668 <lcd_print>
}
 80059d0:	e040      	b.n	8005a54 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	2b05      	cmp	r3, #5
 80059d6:	d11d      	bne.n	8005a14 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80059d8:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80059e0:	4a1f      	ldr	r2, [pc, #124]	; (8005a60 <hataKoduLcdGoster+0x1a0>)
 80059e2:	2101      	movs	r1, #1
 80059e4:	2001      	movs	r0, #1
 80059e6:	f7fa fe3f 	bl	8000668 <lcd_print>
 80059ea:	e008      	b.n	80059fe <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d104      	bne.n	80059fe <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <hataKoduLcdGoster+0x1a4>)
 80059f6:	2101      	movs	r1, #1
 80059f8:	2001      	movs	r0, #1
 80059fa:	f7fa fe35 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "5");
 80059fe:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <hataKoduLcdGoster+0x1bc>)
 8005a00:	2105      	movs	r1, #5
 8005a02:	2002      	movs	r0, #2
 8005a04:	f7fa fe30 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a08:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <hataKoduLcdGoster+0x1ac>)
 8005a0a:	2107      	movs	r1, #7
 8005a0c:	2002      	movs	r0, #2
 8005a0e:	f7fa fe2b 	bl	8000668 <lcd_print>
}
 8005a12:	e01f      	b.n	8005a54 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b06      	cmp	r3, #6
 8005a18:	d11c      	bne.n	8005a54 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d105      	bne.n	8005a2e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a22:	4a0f      	ldr	r2, [pc, #60]	; (8005a60 <hataKoduLcdGoster+0x1a0>)
 8005a24:	2101      	movs	r1, #1
 8005a26:	2001      	movs	r0, #1
 8005a28:	f7fa fe1e 	bl	8000668 <lcd_print>
 8005a2c:	e008      	b.n	8005a40 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <hataKoduLcdGoster+0x19c>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d104      	bne.n	8005a40 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a36:	4a0b      	ldr	r2, [pc, #44]	; (8005a64 <hataKoduLcdGoster+0x1a4>)
 8005a38:	2101      	movs	r1, #1
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f7fa fe14 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "6");
 8005a40:	4a0f      	ldr	r2, [pc, #60]	; (8005a80 <hataKoduLcdGoster+0x1c0>)
 8005a42:	2106      	movs	r1, #6
 8005a44:	2002      	movs	r0, #2
 8005a46:	f7fa fe0f 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a4a:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <hataKoduLcdGoster+0x1ac>)
 8005a4c:	2107      	movs	r1, #7
 8005a4e:	2002      	movs	r0, #2
 8005a50:	f7fa fe0a 	bl	8000668 <lcd_print>
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000d2d 	.word	0x20000d2d
 8005a60:	0800e4b0 	.word	0x0800e4b0
 8005a64:	0800e4c4 	.word	0x0800e4c4
 8005a68:	0800d8ac 	.word	0x0800d8ac
 8005a6c:	0800e4d8 	.word	0x0800e4d8
 8005a70:	0800d8b0 	.word	0x0800d8b0
 8005a74:	0800d8b4 	.word	0x0800d8b4
 8005a78:	0800d8b8 	.word	0x0800d8b8
 8005a7c:	0800d8bc 	.word	0x0800d8bc
 8005a80:	0800d8c0 	.word	0x0800d8c0

08005a84 <convertAndSendData>:

void convertAndSendData() {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005a8a:	4a14      	ldr	r2, [pc, #80]	; (8005adc <convertAndSendData+0x58>)
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	2001      	movs	r0, #1
 8005a90:	f7fa fdea 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005a94:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <convertAndSendData+0x5c>)
 8005a96:	2101      	movs	r1, #1
 8005a98:	2002      	movs	r0, #2
 8005a9a:	f7fa fde5 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
 8005aa2:	e00a      	b.n	8005aba <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005aa4:	f002 fb70 	bl	8008188 <mergeData>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	490d      	ldr	r1, [pc, #52]	; (8005ae4 <convertAndSendData+0x60>)
 8005aae:	480e      	ldr	r0, [pc, #56]	; (8005ae8 <convertAndSendData+0x64>)
 8005ab0:	f7fa fbc0 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	607b      	str	r3, [r7, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	ddf1      	ble.n	8005aa4 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ac4:	f003 fb12 	bl	80090ec <HAL_Delay>
	lcd_clear();
 8005ac8:	f7fa fdfa 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 8005acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ad0:	f003 fb0c 	bl	80090ec <HAL_Delay>
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	0800e4e4 	.word	0x0800e4e4
 8005ae0:	0800e4f0 	.word	0x0800e4f0
 8005ae4:	20000cd4 	.word	0x20000cd4
 8005ae8:	20000bf0 	.word	0x20000bf0

08005aec <eepromKontrol>:

void eepromKontrol(int type) {
 8005aec:	b5b0      	push	{r4, r5, r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af04      	add	r7, sp, #16
 8005af2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 113, eepromData, 113, 3000);
 8005af4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005af8:	9302      	str	r3, [sp, #8]
 8005afa:	2371      	movs	r3, #113	; 0x71
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	4b9c      	ldr	r3, [pc, #624]	; (8005d70 <eepromKontrol+0x284>)
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2371      	movs	r3, #113	; 0x71
 8005b04:	2200      	movs	r2, #0
 8005b06:	21a0      	movs	r1, #160	; 0xa0
 8005b08:	489a      	ldr	r0, [pc, #616]	; (8005d74 <eepromKontrol+0x288>)
 8005b0a:	f004 fc73 	bl	800a3f4 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8005b0e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005b12:	f003 faeb 	bl	80090ec <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005b16:	4b96      	ldr	r3, [pc, #600]	; (8005d70 <eepromKontrol+0x284>)
 8005b18:	78da      	ldrb	r2, [r3, #3]
 8005b1a:	4b97      	ldr	r3, [pc, #604]	; (8005d78 <eepromKontrol+0x28c>)
 8005b1c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005b1e:	4b94      	ldr	r3, [pc, #592]	; (8005d70 <eepromKontrol+0x284>)
 8005b20:	785a      	ldrb	r2, [r3, #1]
 8005b22:	4b96      	ldr	r3, [pc, #600]	; (8005d7c <eepromKontrol+0x290>)
 8005b24:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005b26:	4b92      	ldr	r3, [pc, #584]	; (8005d70 <eepromKontrol+0x284>)
 8005b28:	789a      	ldrb	r2, [r3, #2]
 8005b2a:	4b95      	ldr	r3, [pc, #596]	; (8005d80 <eepromKontrol+0x294>)
 8005b2c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005b2e:	4b90      	ldr	r3, [pc, #576]	; (8005d70 <eepromKontrol+0x284>)
 8005b30:	791a      	ldrb	r2, [r3, #4]
 8005b32:	4b94      	ldr	r3, [pc, #592]	; (8005d84 <eepromKontrol+0x298>)
 8005b34:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005b36:	4b8e      	ldr	r3, [pc, #568]	; (8005d70 <eepromKontrol+0x284>)
 8005b38:	795a      	ldrb	r2, [r3, #5]
 8005b3a:	4b93      	ldr	r3, [pc, #588]	; (8005d88 <eepromKontrol+0x29c>)
 8005b3c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005b3e:	4b8c      	ldr	r3, [pc, #560]	; (8005d70 <eepromKontrol+0x284>)
 8005b40:	799a      	ldrb	r2, [r3, #6]
 8005b42:	4b92      	ldr	r3, [pc, #584]	; (8005d8c <eepromKontrol+0x2a0>)
 8005b44:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005b46:	4b8a      	ldr	r3, [pc, #552]	; (8005d70 <eepromKontrol+0x284>)
 8005b48:	79da      	ldrb	r2, [r3, #7]
 8005b4a:	4b91      	ldr	r3, [pc, #580]	; (8005d90 <eepromKontrol+0x2a4>)
 8005b4c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005b4e:	4b88      	ldr	r3, [pc, #544]	; (8005d70 <eepromKontrol+0x284>)
 8005b50:	7a1a      	ldrb	r2, [r3, #8]
 8005b52:	4b90      	ldr	r3, [pc, #576]	; (8005d94 <eepromKontrol+0x2a8>)
 8005b54:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005b56:	4b86      	ldr	r3, [pc, #536]	; (8005d70 <eepromKontrol+0x284>)
 8005b58:	7a5a      	ldrb	r2, [r3, #9]
 8005b5a:	4b8f      	ldr	r3, [pc, #572]	; (8005d98 <eepromKontrol+0x2ac>)
 8005b5c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005b5e:	4b84      	ldr	r3, [pc, #528]	; (8005d70 <eepromKontrol+0x284>)
 8005b60:	7a9a      	ldrb	r2, [r3, #10]
 8005b62:	4b8e      	ldr	r3, [pc, #568]	; (8005d9c <eepromKontrol+0x2b0>)
 8005b64:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005b66:	4b82      	ldr	r3, [pc, #520]	; (8005d70 <eepromKontrol+0x284>)
 8005b68:	7ada      	ldrb	r2, [r3, #11]
 8005b6a:	4b8d      	ldr	r3, [pc, #564]	; (8005da0 <eepromKontrol+0x2b4>)
 8005b6c:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005b6e:	4b80      	ldr	r3, [pc, #512]	; (8005d70 <eepromKontrol+0x284>)
 8005b70:	7b1a      	ldrb	r2, [r3, #12]
 8005b72:	4b8c      	ldr	r3, [pc, #560]	; (8005da4 <eepromKontrol+0x2b8>)
 8005b74:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005b76:	4b7e      	ldr	r3, [pc, #504]	; (8005d70 <eepromKontrol+0x284>)
 8005b78:	7b5a      	ldrb	r2, [r3, #13]
 8005b7a:	4b8b      	ldr	r3, [pc, #556]	; (8005da8 <eepromKontrol+0x2bc>)
 8005b7c:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005b7e:	4b7c      	ldr	r3, [pc, #496]	; (8005d70 <eepromKontrol+0x284>)
 8005b80:	7b9a      	ldrb	r2, [r3, #14]
 8005b82:	4b8a      	ldr	r3, [pc, #552]	; (8005dac <eepromKontrol+0x2c0>)
 8005b84:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005b86:	4b7a      	ldr	r3, [pc, #488]	; (8005d70 <eepromKontrol+0x284>)
 8005b88:	7bda      	ldrb	r2, [r3, #15]
 8005b8a:	4b89      	ldr	r3, [pc, #548]	; (8005db0 <eepromKontrol+0x2c4>)
 8005b8c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005b8e:	4b78      	ldr	r3, [pc, #480]	; (8005d70 <eepromKontrol+0x284>)
 8005b90:	7c1a      	ldrb	r2, [r3, #16]
 8005b92:	4b88      	ldr	r3, [pc, #544]	; (8005db4 <eepromKontrol+0x2c8>)
 8005b94:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005b96:	4b76      	ldr	r3, [pc, #472]	; (8005d70 <eepromKontrol+0x284>)
 8005b98:	7c5a      	ldrb	r2, [r3, #17]
 8005b9a:	4b87      	ldr	r3, [pc, #540]	; (8005db8 <eepromKontrol+0x2cc>)
 8005b9c:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005b9e:	4b74      	ldr	r3, [pc, #464]	; (8005d70 <eepromKontrol+0x284>)
 8005ba0:	7c9a      	ldrb	r2, [r3, #18]
 8005ba2:	4b86      	ldr	r3, [pc, #536]	; (8005dbc <eepromKontrol+0x2d0>)
 8005ba4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005ba6:	4b72      	ldr	r3, [pc, #456]	; (8005d70 <eepromKontrol+0x284>)
 8005ba8:	7cda      	ldrb	r2, [r3, #19]
 8005baa:	4b85      	ldr	r3, [pc, #532]	; (8005dc0 <eepromKontrol+0x2d4>)
 8005bac:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005bae:	4b70      	ldr	r3, [pc, #448]	; (8005d70 <eepromKontrol+0x284>)
 8005bb0:	7d1a      	ldrb	r2, [r3, #20]
 8005bb2:	4b84      	ldr	r3, [pc, #528]	; (8005dc4 <eepromKontrol+0x2d8>)
 8005bb4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005bb6:	4b6e      	ldr	r3, [pc, #440]	; (8005d70 <eepromKontrol+0x284>)
 8005bb8:	7d5a      	ldrb	r2, [r3, #21]
 8005bba:	4b83      	ldr	r3, [pc, #524]	; (8005dc8 <eepromKontrol+0x2dc>)
 8005bbc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005bbe:	4b6c      	ldr	r3, [pc, #432]	; (8005d70 <eepromKontrol+0x284>)
 8005bc0:	7d9a      	ldrb	r2, [r3, #22]
 8005bc2:	4b82      	ldr	r3, [pc, #520]	; (8005dcc <eepromKontrol+0x2e0>)
 8005bc4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005bc6:	4b6a      	ldr	r3, [pc, #424]	; (8005d70 <eepromKontrol+0x284>)
 8005bc8:	7dda      	ldrb	r2, [r3, #23]
 8005bca:	4b81      	ldr	r3, [pc, #516]	; (8005dd0 <eepromKontrol+0x2e4>)
 8005bcc:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005bce:	4b68      	ldr	r3, [pc, #416]	; (8005d70 <eepromKontrol+0x284>)
 8005bd0:	7e1a      	ldrb	r2, [r3, #24]
 8005bd2:	4b80      	ldr	r3, [pc, #512]	; (8005dd4 <eepromKontrol+0x2e8>)
 8005bd4:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005bd6:	4b66      	ldr	r3, [pc, #408]	; (8005d70 <eepromKontrol+0x284>)
 8005bd8:	7e5a      	ldrb	r2, [r3, #25]
 8005bda:	4b7f      	ldr	r3, [pc, #508]	; (8005dd8 <eepromKontrol+0x2ec>)
 8005bdc:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005bde:	4b64      	ldr	r3, [pc, #400]	; (8005d70 <eepromKontrol+0x284>)
 8005be0:	7e9a      	ldrb	r2, [r3, #26]
 8005be2:	4b7e      	ldr	r3, [pc, #504]	; (8005ddc <eepromKontrol+0x2f0>)
 8005be4:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005be6:	4b62      	ldr	r3, [pc, #392]	; (8005d70 <eepromKontrol+0x284>)
 8005be8:	7eda      	ldrb	r2, [r3, #27]
 8005bea:	4b7d      	ldr	r3, [pc, #500]	; (8005de0 <eepromKontrol+0x2f4>)
 8005bec:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005bee:	4b60      	ldr	r3, [pc, #384]	; (8005d70 <eepromKontrol+0x284>)
 8005bf0:	7f1a      	ldrb	r2, [r3, #28]
 8005bf2:	4b7c      	ldr	r3, [pc, #496]	; (8005de4 <eepromKontrol+0x2f8>)
 8005bf4:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005bf6:	4b5e      	ldr	r3, [pc, #376]	; (8005d70 <eepromKontrol+0x284>)
 8005bf8:	7f5a      	ldrb	r2, [r3, #29]
 8005bfa:	4b7b      	ldr	r3, [pc, #492]	; (8005de8 <eepromKontrol+0x2fc>)
 8005bfc:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005bfe:	4b5c      	ldr	r3, [pc, #368]	; (8005d70 <eepromKontrol+0x284>)
 8005c00:	7f9a      	ldrb	r2, [r3, #30]
 8005c02:	4b7a      	ldr	r3, [pc, #488]	; (8005dec <eepromKontrol+0x300>)
 8005c04:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005c06:	4b5a      	ldr	r3, [pc, #360]	; (8005d70 <eepromKontrol+0x284>)
 8005c08:	7fda      	ldrb	r2, [r3, #31]
 8005c0a:	4b79      	ldr	r3, [pc, #484]	; (8005df0 <eepromKontrol+0x304>)
 8005c0c:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005c0e:	4b58      	ldr	r3, [pc, #352]	; (8005d70 <eepromKontrol+0x284>)
 8005c10:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005c14:	4b77      	ldr	r3, [pc, #476]	; (8005df4 <eepromKontrol+0x308>)
 8005c16:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005c18:	4b55      	ldr	r3, [pc, #340]	; (8005d70 <eepromKontrol+0x284>)
 8005c1a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005c1e:	4b76      	ldr	r3, [pc, #472]	; (8005df8 <eepromKontrol+0x30c>)
 8005c20:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005c22:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <eepromKontrol+0x284>)
 8005c24:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005c28:	4b74      	ldr	r3, [pc, #464]	; (8005dfc <eepromKontrol+0x310>)
 8005c2a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005c2c:	4b50      	ldr	r3, [pc, #320]	; (8005d70 <eepromKontrol+0x284>)
 8005c2e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005c32:	4b73      	ldr	r3, [pc, #460]	; (8005e00 <eepromKontrol+0x314>)
 8005c34:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005c36:	4b4e      	ldr	r3, [pc, #312]	; (8005d70 <eepromKontrol+0x284>)
 8005c38:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005c3c:	4b71      	ldr	r3, [pc, #452]	; (8005e04 <eepromKontrol+0x318>)
 8005c3e:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005c40:	4b4b      	ldr	r3, [pc, #300]	; (8005d70 <eepromKontrol+0x284>)
 8005c42:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005c46:	4b70      	ldr	r3, [pc, #448]	; (8005e08 <eepromKontrol+0x31c>)
 8005c48:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005c4a:	4b49      	ldr	r3, [pc, #292]	; (8005d70 <eepromKontrol+0x284>)
 8005c4c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005c50:	4b6e      	ldr	r3, [pc, #440]	; (8005e0c <eepromKontrol+0x320>)
 8005c52:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005c54:	4b46      	ldr	r3, [pc, #280]	; (8005d70 <eepromKontrol+0x284>)
 8005c56:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005c5a:	4b6d      	ldr	r3, [pc, #436]	; (8005e10 <eepromKontrol+0x324>)
 8005c5c:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005c5e:	4b44      	ldr	r3, [pc, #272]	; (8005d70 <eepromKontrol+0x284>)
 8005c60:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005c64:	4b6b      	ldr	r3, [pc, #428]	; (8005e14 <eepromKontrol+0x328>)
 8005c66:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005c68:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <eepromKontrol+0x284>)
 8005c6a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005c6e:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <eepromKontrol+0x32c>)
 8005c70:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005c72:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <eepromKontrol+0x284>)
 8005c74:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005c78:	4b68      	ldr	r3, [pc, #416]	; (8005e1c <eepromKontrol+0x330>)
 8005c7a:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005c7c:	4b3c      	ldr	r3, [pc, #240]	; (8005d70 <eepromKontrol+0x284>)
 8005c7e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005c82:	4b67      	ldr	r3, [pc, #412]	; (8005e20 <eepromKontrol+0x334>)
 8005c84:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005c86:	4b3a      	ldr	r3, [pc, #232]	; (8005d70 <eepromKontrol+0x284>)
 8005c88:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c8c:	4b65      	ldr	r3, [pc, #404]	; (8005e24 <eepromKontrol+0x338>)
 8005c8e:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005c90:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <eepromKontrol+0x284>)
 8005c92:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005c96:	4b64      	ldr	r3, [pc, #400]	; (8005e28 <eepromKontrol+0x33c>)
 8005c98:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005c9a:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <eepromKontrol+0x284>)
 8005c9c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005ca0:	4b62      	ldr	r3, [pc, #392]	; (8005e2c <eepromKontrol+0x340>)
 8005ca2:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005ca4:	4b32      	ldr	r3, [pc, #200]	; (8005d70 <eepromKontrol+0x284>)
 8005ca6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005caa:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <eepromKontrol+0x344>)
 8005cac:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005cae:	4b52      	ldr	r3, [pc, #328]	; (8005df8 <eepromKontrol+0x30c>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fff4 	bl	8004ca0 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005cb8:	4b4e      	ldr	r3, [pc, #312]	; (8005df4 <eepromKontrol+0x308>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	d902      	bls.n	8005cc6 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005cc0:	4b4c      	ldr	r3, [pc, #304]	; (8005df4 <eepromKontrol+0x308>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005cc6:	4b4a      	ldr	r3, [pc, #296]	; (8005df0 <eepromKontrol+0x304>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b09      	cmp	r3, #9
 8005ccc:	d902      	bls.n	8005cd4 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005cce:	4b48      	ldr	r3, [pc, #288]	; (8005df0 <eepromKontrol+0x304>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005cd4:	4b45      	ldr	r3, [pc, #276]	; (8005dec <eepromKontrol+0x300>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b09      	cmp	r3, #9
 8005cda:	d902      	bls.n	8005ce2 <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005cdc:	4b43      	ldr	r3, [pc, #268]	; (8005dec <eepromKontrol+0x300>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005ce2:	4b41      	ldr	r3, [pc, #260]	; (8005de8 <eepromKontrol+0x2fc>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b09      	cmp	r3, #9
 8005ce8:	d902      	bls.n	8005cf0 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005cea:	4b3f      	ldr	r3, [pc, #252]	; (8005de8 <eepromKontrol+0x2fc>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005cf0:	4b3c      	ldr	r3, [pc, #240]	; (8005de4 <eepromKontrol+0x2f8>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b09      	cmp	r3, #9
 8005cf6:	d902      	bls.n	8005cfe <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005cf8:	4b3a      	ldr	r3, [pc, #232]	; (8005de4 <eepromKontrol+0x2f8>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <eepromKontrol+0x290>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d902      	bls.n	8005d0c <eepromKontrol+0x220>
	    calismaSekli=0;
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <eepromKontrol+0x290>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005d0c:	4b1c      	ldr	r3, [pc, #112]	; (8005d80 <eepromKontrol+0x294>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d902      	bls.n	8005d1a <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005d14:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <eepromKontrol+0x294>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <eepromKontrol+0x298>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d902      	bls.n	8005d28 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005d22:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <eepromKontrol+0x298>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005d28:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <eepromKontrol+0x29c>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d902      	bls.n	8005d36 <eepromKontrol+0x24a>
	    altLimit=1;
 8005d30:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <eepromKontrol+0x29c>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005d36:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <eepromKontrol+0x2a0>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d902      	bls.n	8005d44 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <eepromKontrol+0x2a0>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005d44:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <eepromKontrol+0x2a4>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d902      	bls.n	8005d52 <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005d4c:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <eepromKontrol+0x2a4>)
 8005d4e:	2203      	movs	r2, #3
 8005d50:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005d52:	4b2d      	ldr	r3, [pc, #180]	; (8005e08 <eepromKontrol+0x31c>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d902      	bls.n	8005d60 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005d5a:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <eepromKontrol+0x31c>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <eepromKontrol+0x2a8>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d965      	bls.n	8005e34 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <eepromKontrol+0x2a8>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e061      	b.n	8005e34 <eepromKontrol+0x348>
 8005d70:	20000c38 	.word	0x20000c38
 8005d74:	20000b54 	.word	0x20000b54
 8005d78:	20000ca9 	.word	0x20000ca9
 8005d7c:	20000d0d 	.word	0x20000d0d
 8005d80:	20000d10 	.word	0x20000d10
 8005d84:	20000d11 	.word	0x20000d11
 8005d88:	20000d12 	.word	0x20000d12
 8005d8c:	20000d13 	.word	0x20000d13
 8005d90:	20000d14 	.word	0x20000d14
 8005d94:	20000d15 	.word	0x20000d15
 8005d98:	20000d25 	.word	0x20000d25
 8005d9c:	20000d16 	.word	0x20000d16
 8005da0:	20000d26 	.word	0x20000d26
 8005da4:	20000d17 	.word	0x20000d17
 8005da8:	20000d27 	.word	0x20000d27
 8005dac:	20000d1a 	.word	0x20000d1a
 8005db0:	20000d1b 	.word	0x20000d1b
 8005db4:	20000d1c 	.word	0x20000d1c
 8005db8:	20000d1d 	.word	0x20000d1d
 8005dbc:	20000d1e 	.word	0x20000d1e
 8005dc0:	20000d1f 	.word	0x20000d1f
 8005dc4:	20000d20 	.word	0x20000d20
 8005dc8:	20000d21 	.word	0x20000d21
 8005dcc:	20000d22 	.word	0x20000d22
 8005dd0:	20000d23 	.word	0x20000d23
 8005dd4:	20000d24 	.word	0x20000d24
 8005dd8:	20000d28 	.word	0x20000d28
 8005ddc:	20000d2a 	.word	0x20000d2a
 8005de0:	20000d08 	.word	0x20000d08
 8005de4:	20000d09 	.word	0x20000d09
 8005de8:	20000d0a 	.word	0x20000d0a
 8005dec:	200009b4 	.word	0x200009b4
 8005df0:	200009b5 	.word	0x200009b5
 8005df4:	20000d0b 	.word	0x20000d0b
 8005df8:	20000d2d 	.word	0x20000d2d
 8005dfc:	20000d2b 	.word	0x20000d2b
 8005e00:	20000d19 	.word	0x20000d19
 8005e04:	20000d2c 	.word	0x20000d2c
 8005e08:	20000d18 	.word	0x20000d18
 8005e0c:	20000d2e 	.word	0x20000d2e
 8005e10:	20000d2f 	.word	0x20000d2f
 8005e14:	20000d30 	.word	0x20000d30
 8005e18:	20000d31 	.word	0x20000d31
 8005e1c:	20000d32 	.word	0x20000d32
 8005e20:	20000d33 	.word	0x20000d33
 8005e24:	20000d34 	.word	0x20000d34
 8005e28:	20000d35 	.word	0x20000d35
 8005e2c:	20000d36 	.word	0x20000d36
 8005e30:	20000d37 	.word	0x20000d37
	}

	if(kapi1AcSure>5) {
 8005e34:	4b69      	ldr	r3, [pc, #420]	; (8005fdc <eepromKontrol+0x4f0>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d902      	bls.n	8005e42 <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005e3c:	4b67      	ldr	r3, [pc, #412]	; (8005fdc <eepromKontrol+0x4f0>)
 8005e3e:	2205      	movs	r2, #5
 8005e40:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005e42:	4b67      	ldr	r3, [pc, #412]	; (8005fe0 <eepromKontrol+0x4f4>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d902      	bls.n	8005e50 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005e4a:	4b65      	ldr	r3, [pc, #404]	; (8005fe0 <eepromKontrol+0x4f4>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005e50:	4b64      	ldr	r3, [pc, #400]	; (8005fe4 <eepromKontrol+0x4f8>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b05      	cmp	r3, #5
 8005e56:	d902      	bls.n	8005e5e <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005e58:	4b62      	ldr	r3, [pc, #392]	; (8005fe4 <eepromKontrol+0x4f8>)
 8005e5a:	2205      	movs	r2, #5
 8005e5c:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005e5e:	4b62      	ldr	r3, [pc, #392]	; (8005fe8 <eepromKontrol+0x4fc>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d902      	bls.n	8005e6c <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005e66:	4b60      	ldr	r3, [pc, #384]	; (8005fe8 <eepromKontrol+0x4fc>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005e6c:	4b5f      	ldr	r3, [pc, #380]	; (8005fec <eepromKontrol+0x500>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d902      	bls.n	8005e7a <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005e74:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <eepromKontrol+0x500>)
 8005e76:	2202      	movs	r2, #2
 8005e78:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005e7a:	4b5d      	ldr	r3, [pc, #372]	; (8005ff0 <eepromKontrol+0x504>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d902      	bls.n	8005e88 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005e82:	4b5b      	ldr	r3, [pc, #364]	; (8005ff0 <eepromKontrol+0x504>)
 8005e84:	2205      	movs	r2, #5
 8005e86:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005e88:	4b5a      	ldr	r3, [pc, #360]	; (8005ff4 <eepromKontrol+0x508>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d902      	bls.n	8005e96 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005e90:	4b58      	ldr	r3, [pc, #352]	; (8005ff4 <eepromKontrol+0x508>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005e96:	4b58      	ldr	r3, [pc, #352]	; (8005ff8 <eepromKontrol+0x50c>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d902      	bls.n	8005ea4 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005e9e:	4b56      	ldr	r3, [pc, #344]	; (8005ff8 <eepromKontrol+0x50c>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005ea4:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <eepromKontrol+0x510>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d902      	bls.n	8005eb2 <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005eac:	4b53      	ldr	r3, [pc, #332]	; (8005ffc <eepromKontrol+0x510>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005eb2:	4b53      	ldr	r3, [pc, #332]	; (8006000 <eepromKontrol+0x514>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d902      	bls.n	8005ec0 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005eba:	4b51      	ldr	r3, [pc, #324]	; (8006000 <eepromKontrol+0x514>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005ec0:	4b50      	ldr	r3, [pc, #320]	; (8006004 <eepromKontrol+0x518>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d902      	bls.n	8005ece <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005ec8:	4b4e      	ldr	r3, [pc, #312]	; (8006004 <eepromKontrol+0x518>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005ece:	4b4e      	ldr	r3, [pc, #312]	; (8006008 <eepromKontrol+0x51c>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d902      	bls.n	8005edc <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005ed6:	4b4c      	ldr	r3, [pc, #304]	; (8006008 <eepromKontrol+0x51c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005edc:	4b4b      	ldr	r3, [pc, #300]	; (800600c <eepromKontrol+0x520>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	d902      	bls.n	8005eea <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005ee4:	4b49      	ldr	r3, [pc, #292]	; (800600c <eepromKontrol+0x520>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005eea:	4b49      	ldr	r3, [pc, #292]	; (8006010 <eepromKontrol+0x524>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b05      	cmp	r3, #5
 8005ef0:	d902      	bls.n	8005ef8 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <eepromKontrol+0x524>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005ef8:	4b46      	ldr	r3, [pc, #280]	; (8006014 <eepromKontrol+0x528>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d902      	bls.n	8005f06 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005f00:	4b44      	ldr	r3, [pc, #272]	; (8006014 <eepromKontrol+0x528>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005f06:	4b44      	ldr	r3, [pc, #272]	; (8006018 <eepromKontrol+0x52c>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d902      	bls.n	8005f14 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005f0e:	4b42      	ldr	r3, [pc, #264]	; (8006018 <eepromKontrol+0x52c>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005f14:	4b41      	ldr	r3, [pc, #260]	; (800601c <eepromKontrol+0x530>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2bb4      	cmp	r3, #180	; 0xb4
 8005f1a:	d902      	bls.n	8005f22 <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005f1c:	4b3f      	ldr	r3, [pc, #252]	; (800601c <eepromKontrol+0x530>)
 8005f1e:	223c      	movs	r2, #60	; 0x3c
 8005f20:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005f22:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <eepromKontrol+0x534>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d902      	bls.n	8005f30 <eepromKontrol+0x444>
	    buzzer=0;
 8005f2a:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <eepromKontrol+0x534>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005f30:	4b3c      	ldr	r3, [pc, #240]	; (8006024 <eepromKontrol+0x538>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d902      	bls.n	8005f3e <eepromKontrol+0x452>
	    demoMode=0;
 8005f38:	4b3a      	ldr	r3, [pc, #232]	; (8006024 <eepromKontrol+0x538>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005f3e:	4b3a      	ldr	r3, [pc, #232]	; (8006028 <eepromKontrol+0x53c>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d902      	bls.n	8005f4c <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005f46:	4b38      	ldr	r3, [pc, #224]	; (8006028 <eepromKontrol+0x53c>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005f4c:	4b37      	ldr	r3, [pc, #220]	; (800602c <eepromKontrol+0x540>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d902      	bls.n	8005f5a <eepromKontrol+0x46e>
	    dilSecim=0;
 8005f54:	4b35      	ldr	r3, [pc, #212]	; (800602c <eepromKontrol+0x540>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005f5a:	4b35      	ldr	r3, [pc, #212]	; (8006030 <eepromKontrol+0x544>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d902      	bls.n	8005f68 <eepromKontrol+0x47c>
		iotMode=0;
 8005f62:	4b33      	ldr	r3, [pc, #204]	; (8006030 <eepromKontrol+0x544>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005f68:	4b32      	ldr	r3, [pc, #200]	; (8006034 <eepromKontrol+0x548>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b32      	ldr	r3, [pc, #200]	; (8006038 <eepromKontrol+0x54c>)
 8005f70:	441a      	add	r2, r3
 8005f72:	4b32      	ldr	r3, [pc, #200]	; (800603c <eepromKontrol+0x550>)
 8005f74:	6810      	ldr	r0, [r2, #0]
 8005f76:	6851      	ldr	r1, [r2, #4]
 8005f78:	6892      	ldr	r2, [r2, #8]
 8005f7a:	c307      	stmia	r3!, {r0, r1, r2}
	memcpy(wifiSSID, (char *)&eepromData[ssidStartPos], 20);
 8005f7c:	4b30      	ldr	r3, [pc, #192]	; (8006040 <eepromKontrol+0x554>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	4b2d      	ldr	r3, [pc, #180]	; (8006038 <eepromKontrol+0x54c>)
 8005f84:	4413      	add	r3, r2
 8005f86:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <eepromKontrol+0x558>)
 8005f88:	4614      	mov	r4, r2
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	6828      	ldr	r0, [r5, #0]
 8005f8e:	6869      	ldr	r1, [r5, #4]
 8005f90:	68aa      	ldr	r2, [r5, #8]
 8005f92:	68eb      	ldr	r3, [r5, #12]
 8005f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f96:	6928      	ldr	r0, [r5, #16]
 8005f98:	6020      	str	r0, [r4, #0]
	memcpy(wifiPass, (char *)&eepromData[passStartPos], 20);
 8005f9a:	4b2b      	ldr	r3, [pc, #172]	; (8006048 <eepromKontrol+0x55c>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4b25      	ldr	r3, [pc, #148]	; (8006038 <eepromKontrol+0x54c>)
 8005fa2:	4413      	add	r3, r2
 8005fa4:	4a29      	ldr	r2, [pc, #164]	; (800604c <eepromKontrol+0x560>)
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	461d      	mov	r5, r3
 8005faa:	6828      	ldr	r0, [r5, #0]
 8005fac:	6869      	ldr	r1, [r5, #4]
 8005fae:	68aa      	ldr	r2, [r5, #8]
 8005fb0:	68eb      	ldr	r3, [r5, #12]
 8005fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb4:	6928      	ldr	r0, [r5, #16]
 8005fb6:	6020      	str	r0, [r4, #0]
	HAL_Delay(1000);
 8005fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fbc:	f003 f896 	bl	80090ec <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <eepromKontrol+0x544>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d104      	bne.n	8005fd2 <eepromKontrol+0x4e6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <eepromKontrol+0x4e6>
		convertAndSendData();
 8005fce:	f7ff fd59 	bl	8005a84 <convertAndSendData>
	}
}
 8005fd2:	bf00      	nop
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000d25 	.word	0x20000d25
 8005fe0:	20000d16 	.word	0x20000d16
 8005fe4:	20000d26 	.word	0x20000d26
 8005fe8:	20000d17 	.word	0x20000d17
 8005fec:	20000d19 	.word	0x20000d19
 8005ff0:	20000d27 	.word	0x20000d27
 8005ff4:	20000d1a 	.word	0x20000d1a
 8005ff8:	20000d1b 	.word	0x20000d1b
 8005ffc:	20000d1c 	.word	0x20000d1c
 8006000:	20000d1d 	.word	0x20000d1d
 8006004:	20000d1e 	.word	0x20000d1e
 8006008:	20000d1f 	.word	0x20000d1f
 800600c:	20000d20 	.word	0x20000d20
 8006010:	20000d21 	.word	0x20000d21
 8006014:	20000d22 	.word	0x20000d22
 8006018:	20000d23 	.word	0x20000d23
 800601c:	20000d24 	.word	0x20000d24
 8006020:	20000d28 	.word	0x20000d28
 8006024:	20000d2a 	.word	0x20000d2a
 8006028:	20000d2c 	.word	0x20000d2c
 800602c:	20000d2d 	.word	0x20000d2d
 8006030:	20000d2b 	.word	0x20000d2b
 8006034:	200009b1 	.word	0x200009b1
 8006038:	20000c38 	.word	0x20000c38
 800603c:	20000cd4 	.word	0x20000cd4
 8006040:	200009b2 	.word	0x200009b2
 8006044:	20000ce0 	.word	0x20000ce0
 8006048:	200009b3 	.word	0x200009b3
 800604c:	20000cf4 	.word	0x20000cf4

08006050 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af04      	add	r7, sp, #16
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800605a:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <hata2EEPROM+0xa4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	1e5a      	subs	r2, r3, #1
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <hata2EEPROM+0xa8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4413      	add	r3, r2
 8006066:	4a25      	ldr	r2, [pc, #148]	; (80060fc <hata2EEPROM+0xac>)
 8006068:	5cd3      	ldrb	r3, [r2, r3]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800606e:	f000 f849 	bl	8006104 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8006072:	e000      	b.n	8006076 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8006074:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e012      	b.n	80060a2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 800607c:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <hata2EEPROM+0xa8>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	4a1d      	ldr	r2, [pc, #116]	; (80060fc <hata2EEPROM+0xac>)
 8006086:	5cd3      	ldrb	r3, [r2, r3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d107      	bne.n	800609c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 800608c:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <hata2EEPROM+0xa8>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	4919      	ldr	r1, [pc, #100]	; (80060fc <hata2EEPROM+0xac>)
 8006096:	79fa      	ldrb	r2, [r7, #7]
 8006098:	54ca      	strb	r2, [r1, r3]
					break;
 800609a:	e007      	b.n	80060ac <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <hata2EEPROM+0xa4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	dbe7      	blt.n	800607c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80060ac:	4b12      	ldr	r3, [pc, #72]	; (80060f8 <hata2EEPROM+0xa8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	b299      	uxth	r1, r3
 80060b2:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <hata2EEPROM+0xa4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	b298      	uxth	r0, r3
 80060b8:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <hata2EEPROM+0xa8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a0f      	ldr	r2, [pc, #60]	; (80060fc <hata2EEPROM+0xac>)
 80060be:	4413      	add	r3, r2
 80060c0:	4a0c      	ldr	r2, [pc, #48]	; (80060f4 <hata2EEPROM+0xa4>)
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	b292      	uxth	r2, r2
 80060c6:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80060ca:	9402      	str	r4, [sp, #8]
 80060cc:	9201      	str	r2, [sp, #4]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	4603      	mov	r3, r0
 80060d2:	460a      	mov	r2, r1
 80060d4:	21a0      	movs	r1, #160	; 0xa0
 80060d6:	480a      	ldr	r0, [pc, #40]	; (8006100 <hata2EEPROM+0xb0>)
 80060d8:	f004 f892 	bl	800a200 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80060dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060e0:	f003 f804 	bl	80090ec <HAL_Delay>
	eepromKontrol(1);
 80060e4:	2001      	movs	r0, #1
 80060e6:	f7ff fd01 	bl	8005aec <eepromKontrol>
}
 80060ea:	bf00      	nop
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd90      	pop	{r4, r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000938 	.word	0x20000938
 80060f8:	2000093c 	.word	0x2000093c
 80060fc:	20000c38 	.word	0x20000c38
 8006100:	20000b54 	.word	0x20000b54

08006104 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]
 800610e:	e009      	b.n	8006124 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006110:	4a0a      	ldr	r2, [pc, #40]	; (800613c <eepromDataFillWithEmpty+0x38>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <eepromDataFillWithEmpty+0x3c>)
 800611a:	2100      	movs	r1, #0
 800611c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3301      	adds	r3, #1
 8006122:	607b      	str	r3, [r7, #4]
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <eepromDataFillWithEmpty+0x40>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	dbf0      	blt.n	8006110 <eepromDataFillWithEmpty+0xc>
	}
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000910 	.word	0x20000910
 8006140:	20000c38 	.word	0x20000c38
 8006144:	20000938 	.word	0x20000938

08006148 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
	timer1=millis;
 800614c:	4b47      	ldr	r3, [pc, #284]	; (800626c <bekle+0x124>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a47      	ldr	r2, [pc, #284]	; (8006270 <bekle+0x128>)
 8006152:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006154:	e002      	b.n	800615c <bekle+0x14>
    	butonKontrol = 1;
 8006156:	4b47      	ldr	r3, [pc, #284]	; (8006274 <bekle+0x12c>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800615c:	2101      	movs	r1, #1
 800615e:	4846      	ldr	r0, [pc, #280]	; (8006278 <bekle+0x130>)
 8006160:	f003 fd94 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006164:	4603      	mov	r3, r0
 8006166:	2b01      	cmp	r3, #1
 8006168:	d109      	bne.n	800617e <bekle+0x36>
 800616a:	4b40      	ldr	r3, [pc, #256]	; (800626c <bekle+0x124>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b40      	ldr	r3, [pc, #256]	; (8006270 <bekle+0x128>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d0ef      	beq.n	8006156 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006176:	e002      	b.n	800617e <bekle+0x36>
    	butonKontrol = 1;
 8006178:	4b3e      	ldr	r3, [pc, #248]	; (8006274 <bekle+0x12c>)
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800617e:	2108      	movs	r1, #8
 8006180:	483e      	ldr	r0, [pc, #248]	; (800627c <bekle+0x134>)
 8006182:	f003 fd83 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006186:	4603      	mov	r3, r0
 8006188:	2b01      	cmp	r3, #1
 800618a:	d109      	bne.n	80061a0 <bekle+0x58>
 800618c:	4b37      	ldr	r3, [pc, #220]	; (800626c <bekle+0x124>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b37      	ldr	r3, [pc, #220]	; (8006270 <bekle+0x128>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d0ef      	beq.n	8006178 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006198:	e002      	b.n	80061a0 <bekle+0x58>
    	butonKontrol = 1;
 800619a:	4b36      	ldr	r3, [pc, #216]	; (8006274 <bekle+0x12c>)
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061a0:	2102      	movs	r1, #2
 80061a2:	4835      	ldr	r0, [pc, #212]	; (8006278 <bekle+0x130>)
 80061a4:	f003 fd72 	bl	8009c8c <HAL_GPIO_ReadPin>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d109      	bne.n	80061c2 <bekle+0x7a>
 80061ae:	4b2f      	ldr	r3, [pc, #188]	; (800626c <bekle+0x124>)
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b2f      	ldr	r3, [pc, #188]	; (8006270 <bekle+0x128>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d0ef      	beq.n	800619a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061ba:	e002      	b.n	80061c2 <bekle+0x7a>
    	butonKontrol = 1;
 80061bc:	4b2d      	ldr	r3, [pc, #180]	; (8006274 <bekle+0x12c>)
 80061be:	2201      	movs	r2, #1
 80061c0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061c2:	2104      	movs	r1, #4
 80061c4:	482c      	ldr	r0, [pc, #176]	; (8006278 <bekle+0x130>)
 80061c6:	f003 fd61 	bl	8009c8c <HAL_GPIO_ReadPin>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d109      	bne.n	80061e4 <bekle+0x9c>
 80061d0:	4b26      	ldr	r3, [pc, #152]	; (800626c <bekle+0x124>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b26      	ldr	r3, [pc, #152]	; (8006270 <bekle+0x128>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d0ef      	beq.n	80061bc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061dc:	e002      	b.n	80061e4 <bekle+0x9c>
    	butonKontrol = 1;
 80061de:	4b25      	ldr	r3, [pc, #148]	; (8006274 <bekle+0x12c>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061e4:	2108      	movs	r1, #8
 80061e6:	4824      	ldr	r0, [pc, #144]	; (8006278 <bekle+0x130>)
 80061e8:	f003 fd50 	bl	8009c8c <HAL_GPIO_ReadPin>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d109      	bne.n	8006206 <bekle+0xbe>
 80061f2:	4b1e      	ldr	r3, [pc, #120]	; (800626c <bekle+0x124>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <bekle+0x128>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d0ef      	beq.n	80061de <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061fe:	e002      	b.n	8006206 <bekle+0xbe>
    	butonKontrol = 1;
 8006200:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <bekle+0x12c>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006206:	2180      	movs	r1, #128	; 0x80
 8006208:	481c      	ldr	r0, [pc, #112]	; (800627c <bekle+0x134>)
 800620a:	f003 fd3f 	bl	8009c8c <HAL_GPIO_ReadPin>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d109      	bne.n	8006228 <bekle+0xe0>
 8006214:	4b15      	ldr	r3, [pc, #84]	; (800626c <bekle+0x124>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b15      	ldr	r3, [pc, #84]	; (8006270 <bekle+0x128>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d0ef      	beq.n	8006200 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006220:	e002      	b.n	8006228 <bekle+0xe0>
    	butonKontrol = 1;
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <bekle+0x12c>)
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800622c:	4813      	ldr	r0, [pc, #76]	; (800627c <bekle+0x134>)
 800622e:	f003 fd2d 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d109      	bne.n	800624c <bekle+0x104>
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <bekle+0x124>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <bekle+0x128>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d0ee      	beq.n	8006222 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006244:	e002      	b.n	800624c <bekle+0x104>
    	butonKontrol = 1;
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <bekle+0x12c>)
 8006248:	2201      	movs	r2, #1
 800624a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800624c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006250:	480a      	ldr	r0, [pc, #40]	; (800627c <bekle+0x134>)
 8006252:	f003 fd1b 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <bekle+0x120>
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <bekle+0x124>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b03      	ldr	r3, [pc, #12]	; (8006270 <bekle+0x128>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d0ee      	beq.n	8006246 <bekle+0xfe>
    }

}
 8006268:	bf00      	nop
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20000cb4 	.word	0x20000cb4
 8006270:	20000cbc 	.word	0x20000cbc
 8006274:	20000d3b 	.word	0x20000d3b
 8006278:	40010800 	.word	0x40010800
 800627c:	40011000 	.word	0x40011000

08006280 <i2cTest>:

void i2cTest() {
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8006286:	463b      	mov	r3, r7
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	609a      	str	r2, [r3, #8]
 8006290:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8006292:	4b50      	ldr	r3, [pc, #320]	; (80063d4 <i2cTest+0x154>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b4e      	ldr	r3, [pc, #312]	; (80063d4 <i2cTest+0x154>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80062a2:	484c      	ldr	r0, [pc, #304]	; (80063d4 <i2cTest+0x154>)
 80062a4:	f003 fe7e 	bl	8009fa4 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062a8:	23c0      	movs	r3, #192	; 0xc0
 80062aa:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80062ac:	2311      	movs	r3, #17
 80062ae:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80062b0:	2301      	movs	r3, #1
 80062b2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80062b4:	2303      	movs	r3, #3
 80062b6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80062b8:	463b      	mov	r3, r7
 80062ba:	4619      	mov	r1, r3
 80062bc:	4846      	ldr	r0, [pc, #280]	; (80063d8 <i2cTest+0x158>)
 80062be:	f003 fa85 	bl	80097cc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80062c2:	2201      	movs	r2, #1
 80062c4:	2140      	movs	r1, #64	; 0x40
 80062c6:	4844      	ldr	r0, [pc, #272]	; (80063d8 <i2cTest+0x158>)
 80062c8:	f003 fcf7 	bl	8009cba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80062cc:	2201      	movs	r2, #1
 80062ce:	2180      	movs	r1, #128	; 0x80
 80062d0:	4841      	ldr	r0, [pc, #260]	; (80063d8 <i2cTest+0x158>)
 80062d2:	f003 fcf2 	bl	8009cba <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80062d6:	200a      	movs	r0, #10
 80062d8:	f002 ff08 	bl	80090ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80062dc:	bf00      	nop
 80062de:	2140      	movs	r1, #64	; 0x40
 80062e0:	483d      	ldr	r0, [pc, #244]	; (80063d8 <i2cTest+0x158>)
 80062e2:	f003 fcd3 	bl	8009c8c <HAL_GPIO_ReadPin>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d006      	beq.n	80062fa <i2cTest+0x7a>
 80062ec:	2180      	movs	r1, #128	; 0x80
 80062ee:	483a      	ldr	r0, [pc, #232]	; (80063d8 <i2cTest+0x158>)
 80062f0:	f003 fccc 	bl	8009c8c <HAL_GPIO_ReadPin>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d1f1      	bne.n	80062de <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80062fa:	2200      	movs	r2, #0
 80062fc:	2180      	movs	r1, #128	; 0x80
 80062fe:	4836      	ldr	r0, [pc, #216]	; (80063d8 <i2cTest+0x158>)
 8006300:	f003 fcdb 	bl	8009cba <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006304:	200a      	movs	r0, #10
 8006306:	f002 fef1 	bl	80090ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800630a:	bf00      	nop
 800630c:	2180      	movs	r1, #128	; 0x80
 800630e:	4832      	ldr	r0, [pc, #200]	; (80063d8 <i2cTest+0x158>)
 8006310:	f003 fcbc 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006314:	4603      	mov	r3, r0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d0f8      	beq.n	800630c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800631a:	2200      	movs	r2, #0
 800631c:	2140      	movs	r1, #64	; 0x40
 800631e:	482e      	ldr	r0, [pc, #184]	; (80063d8 <i2cTest+0x158>)
 8006320:	f003 fccb 	bl	8009cba <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006324:	200a      	movs	r0, #10
 8006326:	f002 fee1 	bl	80090ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800632a:	bf00      	nop
 800632c:	2140      	movs	r1, #64	; 0x40
 800632e:	482a      	ldr	r0, [pc, #168]	; (80063d8 <i2cTest+0x158>)
 8006330:	f003 fcac 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006334:	4603      	mov	r3, r0
 8006336:	2b01      	cmp	r3, #1
 8006338:	d0f8      	beq.n	800632c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800633a:	2201      	movs	r2, #1
 800633c:	2140      	movs	r1, #64	; 0x40
 800633e:	4826      	ldr	r0, [pc, #152]	; (80063d8 <i2cTest+0x158>)
 8006340:	f003 fcbb 	bl	8009cba <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006344:	200a      	movs	r0, #10
 8006346:	f002 fed1 	bl	80090ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800634a:	bf00      	nop
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	4822      	ldr	r0, [pc, #136]	; (80063d8 <i2cTest+0x158>)
 8006350:	f003 fc9c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006354:	4603      	mov	r3, r0
 8006356:	2b01      	cmp	r3, #1
 8006358:	d1f8      	bne.n	800634c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800635a:	2201      	movs	r2, #1
 800635c:	2180      	movs	r1, #128	; 0x80
 800635e:	481e      	ldr	r0, [pc, #120]	; (80063d8 <i2cTest+0x158>)
 8006360:	f003 fcab 	bl	8009cba <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006364:	200a      	movs	r0, #10
 8006366:	f002 fec1 	bl	80090ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800636a:	bf00      	nop
 800636c:	2180      	movs	r1, #128	; 0x80
 800636e:	481a      	ldr	r0, [pc, #104]	; (80063d8 <i2cTest+0x158>)
 8006370:	f003 fc8c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006374:	4603      	mov	r3, r0
 8006376:	2b01      	cmp	r3, #1
 8006378:	d1f8      	bne.n	800636c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800637a:	23c0      	movs	r3, #192	; 0xc0
 800637c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800637e:	2312      	movs	r3, #18
 8006380:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006382:	2301      	movs	r3, #1
 8006384:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006386:	2303      	movs	r3, #3
 8006388:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800638a:	463b      	mov	r3, r7
 800638c:	4619      	mov	r1, r3
 800638e:	4812      	ldr	r0, [pc, #72]	; (80063d8 <i2cTest+0x158>)
 8006390:	f003 fa1c 	bl	80097cc <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006394:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <i2cTest+0x154>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <i2cTest+0x154>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <i2cTest+0x154>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <i2cTest+0x154>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <i2cTest+0x154>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <i2cTest+0x154>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80063c4:	4803      	ldr	r0, [pc, #12]	; (80063d4 <i2cTest+0x154>)
 80063c6:	f003 fca9 	bl	8009d1c <HAL_I2C_Init>
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000b54 	.word	0x20000b54
 80063d8:	40010c00 	.word	0x40010c00

080063dc <checkLCDBacklight>:

void checkLCDBacklight() {
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <checkLCDBacklight+0x34>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <checkLCDBacklight+0x38>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <checkLCDBacklight+0x3c>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	460b      	mov	r3, r1
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d303      	bcc.n	8006404 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7fa f97f 	bl	8000700 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006402:	e002      	b.n	800640a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006404:	2001      	movs	r0, #1
 8006406:	f7fa f97b 	bl	8000700 <lcd_backlight>
}
 800640a:	bf00      	nop
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000cb4 	.word	0x20000cb4
 8006414:	20000cd0 	.word	0x20000cd0
 8006418:	20000940 	.word	0x20000940

0800641c <checkBasincSalteri>:

void checkBasincSalteri() {
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <checkBasincSalteri+0x54>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <checkBasincSalteri+0x12>
		basincVar=1;
 8006428:	4b12      	ldr	r3, [pc, #72]	; (8006474 <checkBasincSalteri+0x58>)
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800642e:	4b10      	ldr	r3, [pc, #64]	; (8006470 <checkBasincSalteri+0x54>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d119      	bne.n	800646a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8006436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800643a:	480f      	ldr	r0, [pc, #60]	; (8006478 <checkBasincSalteri+0x5c>)
 800643c:	f003 fc26 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006446:	4b0d      	ldr	r3, [pc, #52]	; (800647c <checkBasincSalteri+0x60>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <checkBasincSalteri+0x64>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d90a      	bls.n	800646a <checkBasincSalteri+0x4e>
				basincVar=1;
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <checkBasincSalteri+0x58>)
 8006456:	2201      	movs	r2, #1
 8006458:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800645a:	e006      	b.n	800646a <checkBasincSalteri+0x4e>
			timer5=millis;
 800645c:	4b07      	ldr	r3, [pc, #28]	; (800647c <checkBasincSalteri+0x60>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a07      	ldr	r2, [pc, #28]	; (8006480 <checkBasincSalteri+0x64>)
 8006462:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006464:	4b03      	ldr	r3, [pc, #12]	; (8006474 <checkBasincSalteri+0x58>)
 8006466:	2200      	movs	r2, #0
 8006468:	701a      	strb	r2, [r3, #0]
}
 800646a:	bf00      	nop
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000d13 	.word	0x20000d13
 8006474:	20000d0f 	.word	0x20000d0f
 8006478:	40011000 	.word	0x40011000
 800647c:	20000cb4 	.word	0x20000cb4
 8006480:	20000ccc 	.word	0x20000ccc

08006484 <checkBasGonder>:

void checkBasGonder() {
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006488:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <checkBasGonder+0x74>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10b      	bne.n	80064a8 <checkBasGonder+0x24>
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <checkBasGonder+0x78>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <checkBasGonder+0x24>
 8006498:	4b19      	ldr	r3, [pc, #100]	; (8006500 <checkBasGonder+0x7c>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d103      	bne.n	80064a8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80064a0:	4b18      	ldr	r3, [pc, #96]	; (8006504 <checkBasGonder+0x80>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	e009      	b.n	80064bc <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80064a8:	4b14      	ldr	r3, [pc, #80]	; (80064fc <checkBasGonder+0x78>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f083 0301 	eor.w	r3, r3, #1
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <checkBasGonder+0x80>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <checkBasGonder+0x74>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d10b      	bne.n	80064dc <checkBasGonder+0x58>
 80064c4:	4b10      	ldr	r3, [pc, #64]	; (8006508 <checkBasGonder+0x84>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <checkBasGonder+0x58>
 80064cc:	4b0c      	ldr	r3, [pc, #48]	; (8006500 <checkBasGonder+0x7c>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80064d4:	4b0d      	ldr	r3, [pc, #52]	; (800650c <checkBasGonder+0x88>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80064da:	e009      	b.n	80064f0 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <checkBasGonder+0x84>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f083 0301 	eor.w	r3, r3, #1
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <checkBasGonder+0x88>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
}
 80064f0:	bf00      	nop
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr
 80064f8:	20000d0d 	.word	0x20000d0d
 80064fc:	20000d41 	.word	0x20000d41
 8006500:	20000d1b 	.word	0x20000d1b
 8006504:	20000d48 	.word	0x20000d48
 8006508:	20000d44 	.word	0x20000d44
 800650c:	20000d49 	.word	0x20000d49

08006510 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006514:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <checkKapiSecimleri+0x98>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800651c:	4b23      	ldr	r3, [pc, #140]	; (80065ac <checkKapiSecimleri+0x9c>)
 800651e:	2201      	movs	r2, #1
 8006520:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8006522:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <checkKapiSecimleri+0x98>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d10e      	bne.n	8006548 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800652a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800652e:	4820      	ldr	r0, [pc, #128]	; (80065b0 <checkKapiSecimleri+0xa0>)
 8006530:	f003 fbac 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800653a:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <checkKapiSecimleri+0x9c>)
 800653c:	2201      	movs	r2, #1
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	e002      	b.n	8006548 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8006542:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <checkKapiSecimleri+0x9c>)
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006548:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <checkKapiSecimleri+0x98>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d10e      	bne.n	800656e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006554:	4816      	ldr	r0, [pc, #88]	; (80065b0 <checkKapiSecimleri+0xa0>)
 8006556:	f003 fb99 	bl	8009c8c <HAL_GPIO_ReadPin>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006560:	4b12      	ldr	r3, [pc, #72]	; (80065ac <checkKapiSecimleri+0x9c>)
 8006562:	2201      	movs	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e002      	b.n	800656e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006568:	4b10      	ldr	r3, [pc, #64]	; (80065ac <checkKapiSecimleri+0x9c>)
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800656e:	4b0e      	ldr	r3, [pc, #56]	; (80065a8 <checkKapiSecimleri+0x98>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b03      	cmp	r3, #3
 8006574:	d116      	bne.n	80065a4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8006576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800657a:	480d      	ldr	r0, [pc, #52]	; (80065b0 <checkKapiSecimleri+0xa0>)
 800657c:	f003 fb86 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <checkKapiSecimleri+0x8e>
 8006586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800658a:	4809      	ldr	r0, [pc, #36]	; (80065b0 <checkKapiSecimleri+0xa0>)
 800658c:	f003 fb7e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <checkKapiSecimleri+0x9c>)
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800659c:	e002      	b.n	80065a4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800659e:	4b03      	ldr	r3, [pc, #12]	; (80065ac <checkKapiSecimleri+0x9c>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
}
 80065a4:	bf00      	nop
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20000d14 	.word	0x20000d14
 80065ac:	20000d5f 	.word	0x20000d5f
 80065b0:	40010800 	.word	0x40010800

080065b4 <checkAktifCalisma>:

void checkAktifCalisma() {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80065b8:	4b62      	ldr	r3, [pc, #392]	; (8006744 <checkAktifCalisma+0x190>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f041 8332 	bne.w	8007c26 <checkAktifCalisma+0x1672>
 80065c2:	4b61      	ldr	r3, [pc, #388]	; (8006748 <checkAktifCalisma+0x194>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f041 832d 	bne.w	8007c26 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80065cc:	4b5f      	ldr	r3, [pc, #380]	; (800674c <checkAktifCalisma+0x198>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11a      	bne.n	800660a <checkAktifCalisma+0x56>
 80065d4:	4b5e      	ldr	r3, [pc, #376]	; (8006750 <checkAktifCalisma+0x19c>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d116      	bne.n	800660a <checkAktifCalisma+0x56>
 80065dc:	4b5d      	ldr	r3, [pc, #372]	; (8006754 <checkAktifCalisma+0x1a0>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <checkAktifCalisma+0x46>
 80065e4:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <checkAktifCalisma+0x1a4>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f083 0301 	eor.w	r3, r3, #1
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <checkAktifCalisma+0x46>
 80065f2:	4b5a      	ldr	r3, [pc, #360]	; (800675c <checkAktifCalisma+0x1a8>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d007      	beq.n	800660a <checkAktifCalisma+0x56>
 80065fa:	4b59      	ldr	r3, [pc, #356]	; (8006760 <checkAktifCalisma+0x1ac>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d018      	beq.n	8006634 <checkAktifCalisma+0x80>
 8006602:	4b58      	ldr	r3, [pc, #352]	; (8006764 <checkAktifCalisma+0x1b0>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d114      	bne.n	8006634 <checkAktifCalisma+0x80>
 800660a:	4b57      	ldr	r3, [pc, #348]	; (8006768 <checkAktifCalisma+0x1b4>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d010      	beq.n	8006634 <checkAktifCalisma+0x80>
 8006612:	4b56      	ldr	r3, [pc, #344]	; (800676c <checkAktifCalisma+0x1b8>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00c      	beq.n	8006634 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800661a:	2201      	movs	r2, #1
 800661c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006620:	4853      	ldr	r0, [pc, #332]	; (8006770 <checkAktifCalisma+0x1bc>)
 8006622:	f003 fb4a 	bl	8009cba <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8006626:	4b53      	ldr	r3, [pc, #332]	; (8006774 <checkAktifCalisma+0x1c0>)
 8006628:	2201      	movs	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 800662c:	4b52      	ldr	r3, [pc, #328]	; (8006778 <checkAktifCalisma+0x1c4>)
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e008      	b.n	8006646 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006634:	2200      	movs	r2, #0
 8006636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800663a:	484d      	ldr	r0, [pc, #308]	; (8006770 <checkAktifCalisma+0x1bc>)
 800663c:	f003 fb3d 	bl	8009cba <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006640:	4b4c      	ldr	r3, [pc, #304]	; (8006774 <checkAktifCalisma+0x1c0>)
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006646:	4b40      	ldr	r3, [pc, #256]	; (8006748 <checkAktifCalisma+0x194>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d160      	bne.n	8006710 <checkAktifCalisma+0x15c>
 800664e:	4b46      	ldr	r3, [pc, #280]	; (8006768 <checkAktifCalisma+0x1b4>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d05c      	beq.n	8006710 <checkAktifCalisma+0x15c>
 8006656:	4b45      	ldr	r3, [pc, #276]	; (800676c <checkAktifCalisma+0x1b8>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d058      	beq.n	8006710 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800665e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006662:	4843      	ldr	r0, [pc, #268]	; (8006770 <checkAktifCalisma+0x1bc>)
 8006664:	f003 fb12 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <checkAktifCalisma+0xc2>
 800666e:	4b43      	ldr	r3, [pc, #268]	; (800677c <checkAktifCalisma+0x1c8>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04c      	beq.n	8006710 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006676:	2102      	movs	r1, #2
 8006678:	4841      	ldr	r0, [pc, #260]	; (8006780 <checkAktifCalisma+0x1cc>)
 800667a:	f003 fb07 	bl	8009c8c <HAL_GPIO_ReadPin>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d145      	bne.n	8006710 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006684:	4b3f      	ldr	r3, [pc, #252]	; (8006784 <checkAktifCalisma+0x1d0>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d041      	beq.n	8006710 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800668c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006690:	4837      	ldr	r0, [pc, #220]	; (8006770 <checkAktifCalisma+0x1bc>)
 8006692:	f003 fafb 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006696:	4603      	mov	r3, r0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d10e      	bne.n	80066ba <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800669c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066a0:	4833      	ldr	r0, [pc, #204]	; (8006770 <checkAktifCalisma+0x1bc>)
 80066a2:	f003 faf3 	bl	8009c8c <HAL_GPIO_ReadPin>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d106      	bne.n	80066ba <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80066ac:	2140      	movs	r1, #64	; 0x40
 80066ae:	4834      	ldr	r0, [pc, #208]	; (8006780 <checkAktifCalisma+0x1cc>)
 80066b0:	f003 faec 	bl	8009c8c <HAL_GPIO_ReadPin>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d003      	beq.n	80066c2 <checkAktifCalisma+0x10e>
 80066ba:	4b24      	ldr	r3, [pc, #144]	; (800674c <checkAktifCalisma+0x198>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d026      	beq.n	8006710 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80066c2:	4b24      	ldr	r3, [pc, #144]	; (8006754 <checkAktifCalisma+0x1a0>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f083 0301 	eor.w	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01f      	beq.n	8006710 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80066d0:	4b1f      	ldr	r3, [pc, #124]	; (8006750 <checkAktifCalisma+0x19c>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f083 0301 	eor.w	r3, r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d018      	beq.n	8006710 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80066de:	4b20      	ldr	r3, [pc, #128]	; (8006760 <checkAktifCalisma+0x1ac>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f083 0301 	eor.w	r3, r3, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d011      	beq.n	8006710 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80066ec:	4b26      	ldr	r3, [pc, #152]	; (8006788 <checkAktifCalisma+0x1d4>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f083 0301 	eor.w	r3, r3, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <checkAktifCalisma+0x1d8>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f083 0301 	eor.w	r3, r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006708:	4b10      	ldr	r3, [pc, #64]	; (800674c <checkAktifCalisma+0x198>)
 800670a:	2201      	movs	r2, #1
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	e002      	b.n	8006716 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006710:	4b0e      	ldr	r3, [pc, #56]	; (800674c <checkAktifCalisma+0x198>)
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006716:	4b0d      	ldr	r3, [pc, #52]	; (800674c <checkAktifCalisma+0x198>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d03a      	beq.n	8006794 <checkAktifCalisma+0x1e0>
 800671e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006722:	4817      	ldr	r0, [pc, #92]	; (8006780 <checkAktifCalisma+0x1cc>)
 8006724:	f003 fab2 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006728:	4603      	mov	r3, r0
 800672a:	2b01      	cmp	r3, #1
 800672c:	d132      	bne.n	8006794 <checkAktifCalisma+0x1e0>
 800672e:	4b18      	ldr	r3, [pc, #96]	; (8006790 <checkAktifCalisma+0x1dc>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d02e      	beq.n	8006794 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006736:	2201      	movs	r2, #1
 8006738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800673c:	480c      	ldr	r0, [pc, #48]	; (8006770 <checkAktifCalisma+0x1bc>)
 800673e:	f003 fabc 	bl	8009cba <HAL_GPIO_WritePin>
 8006742:	e02d      	b.n	80067a0 <checkAktifCalisma+0x1ec>
 8006744:	20000d2a 	.word	0x20000d2a
 8006748:	20000d29 	.word	0x20000d29
 800674c:	20000d41 	.word	0x20000d41
 8006750:	20000d42 	.word	0x20000d42
 8006754:	20000d44 	.word	0x20000d44
 8006758:	20000d3c 	.word	0x20000d3c
 800675c:	20000d1f 	.word	0x20000d1f
 8006760:	20000d43 	.word	0x20000d43
 8006764:	20000d1e 	.word	0x20000d1e
 8006768:	20000d5e 	.word	0x20000d5e
 800676c:	20000d5f 	.word	0x20000d5f
 8006770:	40010c00 	.word	0x40010c00
 8006774:	20000d60 	.word	0x20000d60
 8006778:	20000d4b 	.word	0x20000d4b
 800677c:	20000d48 	.word	0x20000d48
 8006780:	40011000 	.word	0x40011000
 8006784:	20000d0f 	.word	0x20000d0f
 8006788:	20000d46 	.word	0x20000d46
 800678c:	20000d47 	.word	0x20000d47
 8006790:	20000d1a 	.word	0x20000d1a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006794:	2200      	movs	r2, #0
 8006796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800679a:	4860      	ldr	r0, [pc, #384]	; (800691c <checkAktifCalisma+0x368>)
 800679c:	f003 fa8d 	bl	8009cba <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80067a0:	4b5f      	ldr	r3, [pc, #380]	; (8006920 <checkAktifCalisma+0x36c>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d013      	beq.n	80067d0 <checkAktifCalisma+0x21c>
 80067a8:	4b5e      	ldr	r3, [pc, #376]	; (8006924 <checkAktifCalisma+0x370>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d007      	beq.n	80067c0 <checkAktifCalisma+0x20c>
 80067b0:	4b5c      	ldr	r3, [pc, #368]	; (8006924 <checkAktifCalisma+0x370>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d003      	beq.n	80067c0 <checkAktifCalisma+0x20c>
 80067b8:	4b5b      	ldr	r3, [pc, #364]	; (8006928 <checkAktifCalisma+0x374>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80067c0:	2201      	movs	r2, #1
 80067c2:	2104      	movs	r1, #4
 80067c4:	4855      	ldr	r0, [pc, #340]	; (800691c <checkAktifCalisma+0x368>)
 80067c6:	f003 fa78 	bl	8009cba <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80067ca:	4b58      	ldr	r3, [pc, #352]	; (800692c <checkAktifCalisma+0x378>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80067d0:	4b56      	ldr	r3, [pc, #344]	; (800692c <checkAktifCalisma+0x378>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02f      	beq.n	8006838 <checkAktifCalisma+0x284>
 80067d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067dc:	484f      	ldr	r0, [pc, #316]	; (800691c <checkAktifCalisma+0x368>)
 80067de:	f003 fa55 	bl	8009c8c <HAL_GPIO_ReadPin>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d106      	bne.n	80067f6 <checkAktifCalisma+0x242>
 80067e8:	4b51      	ldr	r3, [pc, #324]	; (8006930 <checkAktifCalisma+0x37c>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f083 0301 	eor.w	r3, r3, #1
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <checkAktifCalisma+0x250>
 80067f6:	2102      	movs	r1, #2
 80067f8:	484e      	ldr	r0, [pc, #312]	; (8006934 <checkAktifCalisma+0x380>)
 80067fa:	f003 fa47 	bl	8009c8c <HAL_GPIO_ReadPin>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d119      	bne.n	8006838 <checkAktifCalisma+0x284>
 8006804:	4b4c      	ldr	r3, [pc, #304]	; (8006938 <checkAktifCalisma+0x384>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d015      	beq.n	8006838 <checkAktifCalisma+0x284>
 800680c:	4b4b      	ldr	r3, [pc, #300]	; (800693c <checkAktifCalisma+0x388>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d011      	beq.n	8006838 <checkAktifCalisma+0x284>
 8006814:	4b4a      	ldr	r3, [pc, #296]	; (8006940 <checkAktifCalisma+0x38c>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00d      	beq.n	8006838 <checkAktifCalisma+0x284>
 800681c:	4b49      	ldr	r3, [pc, #292]	; (8006944 <checkAktifCalisma+0x390>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f083 0301 	eor.w	r3, r3, #1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <checkAktifCalisma+0x284>
			timer2=millis;
 800682a:	4b47      	ldr	r3, [pc, #284]	; (8006948 <checkAktifCalisma+0x394>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a47      	ldr	r2, [pc, #284]	; (800694c <checkAktifCalisma+0x398>)
 8006830:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006832:	4b44      	ldr	r3, [pc, #272]	; (8006944 <checkAktifCalisma+0x390>)
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006838:	4b43      	ldr	r3, [pc, #268]	; (8006948 <checkAktifCalisma+0x394>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b43      	ldr	r3, [pc, #268]	; (800694c <checkAktifCalisma+0x398>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	4a43      	ldr	r2, [pc, #268]	; (8006950 <checkAktifCalisma+0x39c>)
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	4293      	cmp	r3, r2
 8006848:	d303      	bcc.n	8006852 <checkAktifCalisma+0x29e>
 800684a:	4b3e      	ldr	r3, [pc, #248]	; (8006944 <checkAktifCalisma+0x390>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d111      	bne.n	8006876 <checkAktifCalisma+0x2c2>
 8006852:	4b39      	ldr	r3, [pc, #228]	; (8006938 <checkAktifCalisma+0x384>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	f083 0301 	eor.w	r3, r3, #1
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <checkAktifCalisma+0x2c2>
 8006860:	4b36      	ldr	r3, [pc, #216]	; (800693c <checkAktifCalisma+0x388>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f083 0301 	eor.w	r3, r3, #1
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <checkAktifCalisma+0x2c2>
 800686e:	4b34      	ldr	r3, [pc, #208]	; (8006940 <checkAktifCalisma+0x38c>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006876:	2200      	movs	r2, #0
 8006878:	2104      	movs	r1, #4
 800687a:	4828      	ldr	r0, [pc, #160]	; (800691c <checkAktifCalisma+0x368>)
 800687c:	f003 fa1d 	bl	8009cba <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006880:	4b2a      	ldr	r3, [pc, #168]	; (800692c <checkAktifCalisma+0x378>)
 8006882:	2200      	movs	r2, #0
 8006884:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006886:	4b2f      	ldr	r3, [pc, #188]	; (8006944 <checkAktifCalisma+0x390>)
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800688c:	4b31      	ldr	r3, [pc, #196]	; (8006954 <checkAktifCalisma+0x3a0>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006894:	4b30      	ldr	r3, [pc, #192]	; (8006958 <checkAktifCalisma+0x3a4>)
 8006896:	2201      	movs	r2, #1
 8006898:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800689a:	4b2e      	ldr	r3, [pc, #184]	; (8006954 <checkAktifCalisma+0x3a0>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d116      	bne.n	80068d0 <checkAktifCalisma+0x31c>
 80068a2:	4b2e      	ldr	r3, [pc, #184]	; (800695c <checkAktifCalisma+0x3a8>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d112      	bne.n	80068d0 <checkAktifCalisma+0x31c>
 80068aa:	2101      	movs	r1, #1
 80068ac:	4821      	ldr	r0, [pc, #132]	; (8006934 <checkAktifCalisma+0x380>)
 80068ae:	f003 f9ed 	bl	8009c8c <HAL_GPIO_ReadPin>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <checkAktifCalisma+0x31c>
 80068b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068bc:	4817      	ldr	r0, [pc, #92]	; (800691c <checkAktifCalisma+0x368>)
 80068be:	f003 f9e5 	bl	8009c8c <HAL_GPIO_ReadPin>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d103      	bne.n	80068d0 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80068c8:	4b23      	ldr	r3, [pc, #140]	; (8006958 <checkAktifCalisma+0x3a4>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e011      	b.n	80068f4 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80068d0:	4b20      	ldr	r3, [pc, #128]	; (8006954 <checkAktifCalisma+0x3a0>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d10d      	bne.n	80068f4 <checkAktifCalisma+0x340>
 80068d8:	2101      	movs	r1, #1
 80068da:	4816      	ldr	r0, [pc, #88]	; (8006934 <checkAktifCalisma+0x380>)
 80068dc:	f003 f9d6 	bl	8009c8c <HAL_GPIO_ReadPin>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d106      	bne.n	80068f4 <checkAktifCalisma+0x340>
 80068e6:	4b1d      	ldr	r3, [pc, #116]	; (800695c <checkAktifCalisma+0x3a8>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d102      	bne.n	80068f4 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80068ee:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <checkAktifCalisma+0x3a4>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80068f4:	4b17      	ldr	r3, [pc, #92]	; (8006954 <checkAktifCalisma+0x3a0>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d134      	bne.n	8006966 <checkAktifCalisma+0x3b2>
 80068fc:	4b17      	ldr	r3, [pc, #92]	; (800695c <checkAktifCalisma+0x3a8>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d130      	bne.n	8006966 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006904:	2101      	movs	r1, #1
 8006906:	480b      	ldr	r0, [pc, #44]	; (8006934 <checkAktifCalisma+0x380>)
 8006908:	f003 f9c0 	bl	8009c8c <HAL_GPIO_ReadPin>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d126      	bne.n	8006960 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006912:	4b11      	ldr	r3, [pc, #68]	; (8006958 <checkAktifCalisma+0x3a4>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	e025      	b.n	8006966 <checkAktifCalisma+0x3b2>
 800691a:	bf00      	nop
 800691c:	40010c00 	.word	0x40010c00
 8006920:	20000d41 	.word	0x20000d41
 8006924:	20000d1b 	.word	0x20000d1b
 8006928:	20000d1f 	.word	0x20000d1f
 800692c:	20000d45 	.word	0x20000d45
 8006930:	20000d48 	.word	0x20000d48
 8006934:	40011000 	.word	0x40011000
 8006938:	20000d5e 	.word	0x20000d5e
 800693c:	20000d5f 	.word	0x20000d5f
 8006940:	20000d0f 	.word	0x20000d0f
 8006944:	20000d3d 	.word	0x20000d3d
 8006948:	20000cb4 	.word	0x20000cb4
 800694c:	20000cc0 	.word	0x20000cc0
 8006950:	20000d20 	.word	0x20000d20
 8006954:	20000d10 	.word	0x20000d10
 8006958:	20000d63 	.word	0x20000d63
 800695c:	20000d0d 	.word	0x20000d0d
			} else {
				cerceveVar=0;
 8006960:	4b7f      	ldr	r3, [pc, #508]	; (8006b60 <checkAktifCalisma+0x5ac>)
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006966:	4b7f      	ldr	r3, [pc, #508]	; (8006b64 <checkAktifCalisma+0x5b0>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d17c      	bne.n	8006a68 <checkAktifCalisma+0x4b4>
 800696e:	4b7e      	ldr	r3, [pc, #504]	; (8006b68 <checkAktifCalisma+0x5b4>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d078      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
 8006976:	4b7d      	ldr	r3, [pc, #500]	; (8006b6c <checkAktifCalisma+0x5b8>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d074      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800697e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006982:	487b      	ldr	r0, [pc, #492]	; (8006b70 <checkAktifCalisma+0x5bc>)
 8006984:	f003 f982 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <checkAktifCalisma+0x3e2>
 800698e:	4b79      	ldr	r3, [pc, #484]	; (8006b74 <checkAktifCalisma+0x5c0>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d068      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006996:	4b72      	ldr	r3, [pc, #456]	; (8006b60 <checkAktifCalisma+0x5ac>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d064      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
 800699e:	4b76      	ldr	r3, [pc, #472]	; (8006b78 <checkAktifCalisma+0x5c4>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f083 0301 	eor.w	r3, r3, #1
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d05d      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80069ac:	2104      	movs	r1, #4
 80069ae:	4873      	ldr	r0, [pc, #460]	; (8006b7c <checkAktifCalisma+0x5c8>)
 80069b0:	f003 f96c 	bl	8009c8c <HAL_GPIO_ReadPin>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <checkAktifCalisma+0x40e>
 80069ba:	4b71      	ldr	r3, [pc, #452]	; (8006b80 <checkAktifCalisma+0x5cc>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d152      	bne.n	8006a68 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80069c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069c6:	486a      	ldr	r0, [pc, #424]	; (8006b70 <checkAktifCalisma+0x5bc>)
 80069c8:	f003 f960 	bl	8009c8c <HAL_GPIO_ReadPin>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d10e      	bne.n	80069f0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80069d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069d6:	4866      	ldr	r0, [pc, #408]	; (8006b70 <checkAktifCalisma+0x5bc>)
 80069d8:	f003 f958 	bl	8009c8c <HAL_GPIO_ReadPin>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d106      	bne.n	80069f0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80069e2:	2140      	movs	r1, #64	; 0x40
 80069e4:	4865      	ldr	r0, [pc, #404]	; (8006b7c <checkAktifCalisma+0x5c8>)
 80069e6:	f003 f951 	bl	8009c8c <HAL_GPIO_ReadPin>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d003      	beq.n	80069f8 <checkAktifCalisma+0x444>
 80069f0:	4b64      	ldr	r3, [pc, #400]	; (8006b84 <checkAktifCalisma+0x5d0>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d037      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80069f8:	4b63      	ldr	r3, [pc, #396]	; (8006b88 <checkAktifCalisma+0x5d4>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f083 0301 	eor.w	r3, r3, #1
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d030      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006a06:	4b61      	ldr	r3, [pc, #388]	; (8006b8c <checkAktifCalisma+0x5d8>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	f083 0301 	eor.w	r3, r3, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d029      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006a14:	4b5e      	ldr	r3, [pc, #376]	; (8006b90 <checkAktifCalisma+0x5dc>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f083 0301 	eor.w	r3, r3, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d022      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006a22:	4b5c      	ldr	r3, [pc, #368]	; (8006b94 <checkAktifCalisma+0x5e0>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f083 0301 	eor.w	r3, r3, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006a30:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <checkAktifCalisma+0x5e4>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f083 0301 	eor.w	r3, r3, #1
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d014      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006a3e:	4b57      	ldr	r3, [pc, #348]	; (8006b9c <checkAktifCalisma+0x5e8>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f083 0301 	eor.w	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00d      	beq.n	8006a68 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	2102      	movs	r1, #2
 8006a50:	4847      	ldr	r0, [pc, #284]	; (8006b70 <checkAktifCalisma+0x5bc>)
 8006a52:	f003 f932 	bl	8009cba <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006a56:	4b4b      	ldr	r3, [pc, #300]	; (8006b84 <checkAktifCalisma+0x5d0>)
 8006a58:	2201      	movs	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006a5c:	4b50      	ldr	r3, [pc, #320]	; (8006ba0 <checkAktifCalisma+0x5ec>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006a62:	4b50      	ldr	r3, [pc, #320]	; (8006ba4 <checkAktifCalisma+0x5f0>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006a68:	4b46      	ldr	r3, [pc, #280]	; (8006b84 <checkAktifCalisma+0x5d0>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d033      	beq.n	8006ad8 <checkAktifCalisma+0x524>
 8006a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a74:	483e      	ldr	r0, [pc, #248]	; (8006b70 <checkAktifCalisma+0x5bc>)
 8006a76:	f003 f909 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d106      	bne.n	8006a8e <checkAktifCalisma+0x4da>
 8006a80:	4b3c      	ldr	r3, [pc, #240]	; (8006b74 <checkAktifCalisma+0x5c0>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f083 0301 	eor.w	r3, r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <checkAktifCalisma+0x4f0>
 8006a8e:	2104      	movs	r1, #4
 8006a90:	483a      	ldr	r0, [pc, #232]	; (8006b7c <checkAktifCalisma+0x5c8>)
 8006a92:	f003 f8fb 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d11d      	bne.n	8006ad8 <checkAktifCalisma+0x524>
 8006a9c:	4b38      	ldr	r3, [pc, #224]	; (8006b80 <checkAktifCalisma+0x5cc>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d019      	beq.n	8006ad8 <checkAktifCalisma+0x524>
 8006aa4:	4b30      	ldr	r3, [pc, #192]	; (8006b68 <checkAktifCalisma+0x5b4>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d015      	beq.n	8006ad8 <checkAktifCalisma+0x524>
 8006aac:	4b2f      	ldr	r3, [pc, #188]	; (8006b6c <checkAktifCalisma+0x5b8>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d011      	beq.n	8006ad8 <checkAktifCalisma+0x524>
 8006ab4:	4b2a      	ldr	r3, [pc, #168]	; (8006b60 <checkAktifCalisma+0x5ac>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00d      	beq.n	8006ad8 <checkAktifCalisma+0x524>
 8006abc:	4b3a      	ldr	r3, [pc, #232]	; (8006ba8 <checkAktifCalisma+0x5f4>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f083 0301 	eor.w	r3, r3, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d006      	beq.n	8006ad8 <checkAktifCalisma+0x524>
			timer2=millis;
 8006aca:	4b38      	ldr	r3, [pc, #224]	; (8006bac <checkAktifCalisma+0x5f8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a38      	ldr	r2, [pc, #224]	; (8006bb0 <checkAktifCalisma+0x5fc>)
 8006ad0:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006ad2:	4b35      	ldr	r3, [pc, #212]	; (8006ba8 <checkAktifCalisma+0x5f4>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006ad8:	4b34      	ldr	r3, [pc, #208]	; (8006bac <checkAktifCalisma+0x5f8>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b34      	ldr	r3, [pc, #208]	; (8006bb0 <checkAktifCalisma+0x5fc>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	4a34      	ldr	r2, [pc, #208]	; (8006bb4 <checkAktifCalisma+0x600>)
 8006ae4:	7812      	ldrb	r2, [r2, #0]
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d303      	bcc.n	8006af2 <checkAktifCalisma+0x53e>
 8006aea:	4b2f      	ldr	r3, [pc, #188]	; (8006ba8 <checkAktifCalisma+0x5f4>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d114      	bne.n	8006b1c <checkAktifCalisma+0x568>
 8006af2:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <checkAktifCalisma+0x5b4>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f083 0301 	eor.w	r3, r3, #1
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10d      	bne.n	8006b1c <checkAktifCalisma+0x568>
 8006b00:	4b1a      	ldr	r3, [pc, #104]	; (8006b6c <checkAktifCalisma+0x5b8>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f083 0301 	eor.w	r3, r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <checkAktifCalisma+0x568>
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <checkAktifCalisma+0x5ac>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f083 0301 	eor.w	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00a      	beq.n	8006b32 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2102      	movs	r1, #2
 8006b20:	4813      	ldr	r0, [pc, #76]	; (8006b70 <checkAktifCalisma+0x5bc>)
 8006b22:	f003 f8ca 	bl	8009cba <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006b26:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <checkAktifCalisma+0x5d0>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <checkAktifCalisma+0x5f4>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006b32:	4b14      	ldr	r3, [pc, #80]	; (8006b84 <checkAktifCalisma+0x5d0>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d040      	beq.n	8006bbc <checkAktifCalisma+0x608>
 8006b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b3e:	480f      	ldr	r0, [pc, #60]	; (8006b7c <checkAktifCalisma+0x5c8>)
 8006b40:	f003 f8a4 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d138      	bne.n	8006bbc <checkAktifCalisma+0x608>
 8006b4a:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <checkAktifCalisma+0x604>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d034      	beq.n	8006bbc <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006b52:	2201      	movs	r2, #1
 8006b54:	2101      	movs	r1, #1
 8006b56:	4806      	ldr	r0, [pc, #24]	; (8006b70 <checkAktifCalisma+0x5bc>)
 8006b58:	f003 f8af 	bl	8009cba <HAL_GPIO_WritePin>
 8006b5c:	e033      	b.n	8006bc6 <checkAktifCalisma+0x612>
 8006b5e:	bf00      	nop
 8006b60:	20000d63 	.word	0x20000d63
 8006b64:	20000d29 	.word	0x20000d29
 8006b68:	20000d5e 	.word	0x20000d5e
 8006b6c:	20000d5f 	.word	0x20000d5f
 8006b70:	40010c00 	.word	0x40010c00
 8006b74:	20000d49 	.word	0x20000d49
 8006b78:	20000d5d 	.word	0x20000d5d
 8006b7c:	40011000 	.word	0x40011000
 8006b80:	20000d12 	.word	0x20000d12
 8006b84:	20000d44 	.word	0x20000d44
 8006b88:	20000d41 	.word	0x20000d41
 8006b8c:	20000d45 	.word	0x20000d45
 8006b90:	20000d42 	.word	0x20000d42
 8006b94:	20000d43 	.word	0x20000d43
 8006b98:	20000d46 	.word	0x20000d46
 8006b9c:	20000d47 	.word	0x20000d47
 8006ba0:	20000d4c 	.word	0x20000d4c
 8006ba4:	20000d6d 	.word	0x20000d6d
 8006ba8:	20000d3c 	.word	0x20000d3c
 8006bac:	20000cb4 	.word	0x20000cb4
 8006bb0:	20000cc0 	.word	0x20000cc0
 8006bb4:	20000d21 	.word	0x20000d21
 8006bb8:	20000d11 	.word	0x20000d11
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	4836      	ldr	r0, [pc, #216]	; (8006c9c <checkAktifCalisma+0x6e8>)
 8006bc2:	f003 f87a 	bl	8009cba <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006bc6:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <checkAktifCalisma+0x6ec>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 8080 	bne.w	8006cd0 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006bd0:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <checkAktifCalisma+0x6f0>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d003      	beq.n	8006be0 <checkAktifCalisma+0x62c>
 8006bd8:	4b32      	ldr	r3, [pc, #200]	; (8006ca4 <checkAktifCalisma+0x6f0>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d177      	bne.n	8006cd0 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006be0:	4b31      	ldr	r3, [pc, #196]	; (8006ca8 <checkAktifCalisma+0x6f4>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d073      	beq.n	8006cd0 <checkAktifCalisma+0x71c>
 8006be8:	4b30      	ldr	r3, [pc, #192]	; (8006cac <checkAktifCalisma+0x6f8>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06f      	beq.n	8006cd0 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bf4:	4829      	ldr	r0, [pc, #164]	; (8006c9c <checkAktifCalisma+0x6e8>)
 8006bf6:	f003 f849 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d167      	bne.n	8006cd0 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c04:	482a      	ldr	r0, [pc, #168]	; (8006cb0 <checkAktifCalisma+0x6fc>)
 8006c06:	f003 f841 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <checkAktifCalisma+0x664>
 8006c10:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <checkAktifCalisma+0x700>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d15b      	bne.n	8006cd0 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006c18:	2140      	movs	r1, #64	; 0x40
 8006c1a:	4825      	ldr	r0, [pc, #148]	; (8006cb0 <checkAktifCalisma+0x6fc>)
 8006c1c:	f003 f836 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10f      	bne.n	8006c46 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c2a:	481c      	ldr	r0, [pc, #112]	; (8006c9c <checkAktifCalisma+0x6e8>)
 8006c2c:	f003 f82e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d107      	bne.n	8006c46 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c3a:	4818      	ldr	r0, [pc, #96]	; (8006c9c <checkAktifCalisma+0x6e8>)
 8006c3c:	f003 f826 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d003      	beq.n	8006c4e <checkAktifCalisma+0x69a>
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <checkAktifCalisma+0x704>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d040      	beq.n	8006cd0 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <checkAktifCalisma+0x708>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f083 0301 	eor.w	r3, r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d039      	beq.n	8006cd0 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006c5c:	4b18      	ldr	r3, [pc, #96]	; (8006cc0 <checkAktifCalisma+0x70c>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f083 0301 	eor.w	r3, r3, #1
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d032      	beq.n	8006cd0 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006c6a:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <checkAktifCalisma+0x710>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f083 0301 	eor.w	r3, r3, #1
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02b      	beq.n	8006cd0 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006c78:	4b13      	ldr	r3, [pc, #76]	; (8006cc8 <checkAktifCalisma+0x714>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f083 0301 	eor.w	r3, r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d024      	beq.n	8006cd0 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <checkAktifCalisma+0x718>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f083 0301 	eor.w	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01d      	beq.n	8006cd0 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006c94:	4b08      	ldr	r3, [pc, #32]	; (8006cb8 <checkAktifCalisma+0x704>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e01c      	b.n	8006cd6 <checkAktifCalisma+0x722>
 8006c9c:	40010c00 	.word	0x40010c00
 8006ca0:	20000d29 	.word	0x20000d29
 8006ca4:	20000d1b 	.word	0x20000d1b
 8006ca8:	20000d5e 	.word	0x20000d5e
 8006cac:	20000d5f 	.word	0x20000d5f
 8006cb0:	40011000 	.word	0x40011000
 8006cb4:	20000d1c 	.word	0x20000d1c
 8006cb8:	20000d42 	.word	0x20000d42
 8006cbc:	20000d41 	.word	0x20000d41
 8006cc0:	20000d45 	.word	0x20000d45
 8006cc4:	20000d44 	.word	0x20000d44
 8006cc8:	20000d43 	.word	0x20000d43
 8006ccc:	20000d47 	.word	0x20000d47
		} else {
			devmotoryukaricalisiyor=0;
 8006cd0:	4b64      	ldr	r3, [pc, #400]	; (8006e64 <checkAktifCalisma+0x8b0>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006cd6:	4b63      	ldr	r3, [pc, #396]	; (8006e64 <checkAktifCalisma+0x8b0>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2120      	movs	r1, #32
 8006ce2:	4861      	ldr	r0, [pc, #388]	; (8006e68 <checkAktifCalisma+0x8b4>)
 8006ce4:	f002 ffe9 	bl	8009cba <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006ce8:	4b60      	ldr	r3, [pc, #384]	; (8006e6c <checkAktifCalisma+0x8b8>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006cee:	4b5f      	ldr	r3, [pc, #380]	; (8006e6c <checkAktifCalisma+0x8b8>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d025      	beq.n	8006d42 <checkAktifCalisma+0x78e>
 8006cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cfa:	485d      	ldr	r0, [pc, #372]	; (8006e70 <checkAktifCalisma+0x8bc>)
 8006cfc:	f002 ffc6 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d007      	beq.n	8006d16 <checkAktifCalisma+0x762>
 8006d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d0a:	4857      	ldr	r0, [pc, #348]	; (8006e68 <checkAktifCalisma+0x8b4>)
 8006d0c:	f002 ffbe 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d115      	bne.n	8006d42 <checkAktifCalisma+0x78e>
 8006d16:	4b57      	ldr	r3, [pc, #348]	; (8006e74 <checkAktifCalisma+0x8c0>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d011      	beq.n	8006d42 <checkAktifCalisma+0x78e>
 8006d1e:	4b56      	ldr	r3, [pc, #344]	; (8006e78 <checkAktifCalisma+0x8c4>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00d      	beq.n	8006d42 <checkAktifCalisma+0x78e>
 8006d26:	4b55      	ldr	r3, [pc, #340]	; (8006e7c <checkAktifCalisma+0x8c8>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f083 0301 	eor.w	r3, r3, #1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d006      	beq.n	8006d42 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006d34:	4b52      	ldr	r3, [pc, #328]	; (8006e80 <checkAktifCalisma+0x8cc>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a52      	ldr	r2, [pc, #328]	; (8006e84 <checkAktifCalisma+0x8d0>)
 8006d3a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006d3c:	4b4f      	ldr	r3, [pc, #316]	; (8006e7c <checkAktifCalisma+0x8c8>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006d42:	4b4f      	ldr	r3, [pc, #316]	; (8006e80 <checkAktifCalisma+0x8cc>)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b4f      	ldr	r3, [pc, #316]	; (8006e84 <checkAktifCalisma+0x8d0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	4a4e      	ldr	r2, [pc, #312]	; (8006e88 <checkAktifCalisma+0x8d4>)
 8006d4e:	7812      	ldrb	r2, [r2, #0]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d303      	bcc.n	8006d5c <checkAktifCalisma+0x7a8>
 8006d54:	4b49      	ldr	r3, [pc, #292]	; (8006e7c <checkAktifCalisma+0x8c8>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <checkAktifCalisma+0x7c4>
 8006d5c:	4b45      	ldr	r3, [pc, #276]	; (8006e74 <checkAktifCalisma+0x8c0>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f083 0301 	eor.w	r3, r3, #1
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <checkAktifCalisma+0x7c4>
 8006d6a:	4b43      	ldr	r3, [pc, #268]	; (8006e78 <checkAktifCalisma+0x8c4>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f083 0301 	eor.w	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2120      	movs	r1, #32
 8006d7c:	483a      	ldr	r0, [pc, #232]	; (8006e68 <checkAktifCalisma+0x8b4>)
 8006d7e:	f002 ff9c 	bl	8009cba <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006d82:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <checkAktifCalisma+0x8b8>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006d88:	4b3c      	ldr	r3, [pc, #240]	; (8006e7c <checkAktifCalisma+0x8c8>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006d8e:	4b3f      	ldr	r3, [pc, #252]	; (8006e8c <checkAktifCalisma+0x8d8>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f040 8088 	bne.w	8006ea8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006d98:	4b3d      	ldr	r3, [pc, #244]	; (8006e90 <checkAktifCalisma+0x8dc>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d003      	beq.n	8006da8 <checkAktifCalisma+0x7f4>
 8006da0:	4b3b      	ldr	r3, [pc, #236]	; (8006e90 <checkAktifCalisma+0x8dc>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d17f      	bne.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <checkAktifCalisma+0x8c0>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d07b      	beq.n	8006ea8 <checkAktifCalisma+0x8f4>
 8006db0:	4b31      	ldr	r3, [pc, #196]	; (8006e78 <checkAktifCalisma+0x8c4>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d077      	beq.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006db8:	2140      	movs	r1, #64	; 0x40
 8006dba:	482b      	ldr	r0, [pc, #172]	; (8006e68 <checkAktifCalisma+0x8b4>)
 8006dbc:	f002 ff66 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d170      	bne.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006dc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dca:	4827      	ldr	r0, [pc, #156]	; (8006e68 <checkAktifCalisma+0x8b4>)
 8006dcc:	f002 ff5e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <checkAktifCalisma+0x82a>
 8006dd6:	4b2f      	ldr	r3, [pc, #188]	; (8006e94 <checkAktifCalisma+0x8e0>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d164      	bne.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006de2:	4823      	ldr	r0, [pc, #140]	; (8006e70 <checkAktifCalisma+0x8bc>)
 8006de4:	f002 ff52 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d10f      	bne.n	8006e0e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006df2:	481f      	ldr	r0, [pc, #124]	; (8006e70 <checkAktifCalisma+0x8bc>)
 8006df4:	f002 ff4a 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d107      	bne.n	8006e0e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e02:	481b      	ldr	r0, [pc, #108]	; (8006e70 <checkAktifCalisma+0x8bc>)
 8006e04:	f002 ff42 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d003      	beq.n	8006e16 <checkAktifCalisma+0x862>
 8006e0e:	4b22      	ldr	r3, [pc, #136]	; (8006e98 <checkAktifCalisma+0x8e4>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d048      	beq.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006e16:	4b21      	ldr	r3, [pc, #132]	; (8006e9c <checkAktifCalisma+0x8e8>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f083 0301 	eor.w	r3, r3, #1
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d041      	beq.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006e24:	4b1e      	ldr	r3, [pc, #120]	; (8006ea0 <checkAktifCalisma+0x8ec>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f083 0301 	eor.w	r3, r3, #1
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d03a      	beq.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <checkAktifCalisma+0x8f0>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f083 0301 	eor.w	r3, r3, #1
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d033      	beq.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <checkAktifCalisma+0x8b8>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f083 0301 	eor.w	r3, r3, #1
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d02c      	beq.n	8006ea8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <checkAktifCalisma+0x8b0>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f083 0301 	eor.w	r3, r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d025      	beq.n	8006ea8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006e5c:	4b0e      	ldr	r3, [pc, #56]	; (8006e98 <checkAktifCalisma+0x8e4>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	e024      	b.n	8006eae <checkAktifCalisma+0x8fa>
 8006e64:	20000d42 	.word	0x20000d42
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	20000d46 	.word	0x20000d46
 8006e70:	40010c00 	.word	0x40010c00
 8006e74:	20000d5e 	.word	0x20000d5e
 8006e78:	20000d5f 	.word	0x20000d5f
 8006e7c:	20000d3e 	.word	0x20000d3e
 8006e80:	20000cb4 	.word	0x20000cb4
 8006e84:	20000cc0 	.word	0x20000cc0
 8006e88:	20000d22 	.word	0x20000d22
 8006e8c:	20000d29 	.word	0x20000d29
 8006e90:	20000d1b 	.word	0x20000d1b
 8006e94:	20000d1d 	.word	0x20000d1d
 8006e98:	20000d43 	.word	0x20000d43
 8006e9c:	20000d41 	.word	0x20000d41
 8006ea0:	20000d45 	.word	0x20000d45
 8006ea4:	20000d44 	.word	0x20000d44
		} else {
			devmotorasagicalisiyor=0;
 8006ea8:	4b96      	ldr	r3, [pc, #600]	; (8007104 <checkAktifCalisma+0xb50>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006eae:	4b95      	ldr	r3, [pc, #596]	; (8007104 <checkAktifCalisma+0xb50>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d007      	beq.n	8006ec6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	2110      	movs	r1, #16
 8006eba:	4893      	ldr	r0, [pc, #588]	; (8007108 <checkAktifCalisma+0xb54>)
 8006ebc:	f002 fefd 	bl	8009cba <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006ec0:	4b92      	ldr	r3, [pc, #584]	; (800710c <checkAktifCalisma+0xb58>)
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006ec6:	4b91      	ldr	r3, [pc, #580]	; (800710c <checkAktifCalisma+0xb58>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d024      	beq.n	8006f18 <checkAktifCalisma+0x964>
 8006ece:	2140      	movs	r1, #64	; 0x40
 8006ed0:	488d      	ldr	r0, [pc, #564]	; (8007108 <checkAktifCalisma+0xb54>)
 8006ed2:	f002 fedb 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d007      	beq.n	8006eec <checkAktifCalisma+0x938>
 8006edc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ee0:	4889      	ldr	r0, [pc, #548]	; (8007108 <checkAktifCalisma+0xb54>)
 8006ee2:	f002 fed3 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d115      	bne.n	8006f18 <checkAktifCalisma+0x964>
 8006eec:	4b88      	ldr	r3, [pc, #544]	; (8007110 <checkAktifCalisma+0xb5c>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d011      	beq.n	8006f18 <checkAktifCalisma+0x964>
 8006ef4:	4b87      	ldr	r3, [pc, #540]	; (8007114 <checkAktifCalisma+0xb60>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00d      	beq.n	8006f18 <checkAktifCalisma+0x964>
 8006efc:	4b86      	ldr	r3, [pc, #536]	; (8007118 <checkAktifCalisma+0xb64>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f083 0301 	eor.w	r3, r3, #1
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d006      	beq.n	8006f18 <checkAktifCalisma+0x964>
			timer2=millis;
 8006f0a:	4b84      	ldr	r3, [pc, #528]	; (800711c <checkAktifCalisma+0xb68>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a84      	ldr	r2, [pc, #528]	; (8007120 <checkAktifCalisma+0xb6c>)
 8006f10:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006f12:	4b81      	ldr	r3, [pc, #516]	; (8007118 <checkAktifCalisma+0xb64>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006f18:	4b80      	ldr	r3, [pc, #512]	; (800711c <checkAktifCalisma+0xb68>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	4b80      	ldr	r3, [pc, #512]	; (8007120 <checkAktifCalisma+0xb6c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	4a80      	ldr	r2, [pc, #512]	; (8007124 <checkAktifCalisma+0xb70>)
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d303      	bcc.n	8006f32 <checkAktifCalisma+0x97e>
 8006f2a:	4b7b      	ldr	r3, [pc, #492]	; (8007118 <checkAktifCalisma+0xb64>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10d      	bne.n	8006f4e <checkAktifCalisma+0x99a>
 8006f32:	4b77      	ldr	r3, [pc, #476]	; (8007110 <checkAktifCalisma+0xb5c>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f083 0301 	eor.w	r3, r3, #1
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <checkAktifCalisma+0x99a>
 8006f40:	4b74      	ldr	r3, [pc, #464]	; (8007114 <checkAktifCalisma+0xb60>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	f083 0301 	eor.w	r3, r3, #1
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2110      	movs	r1, #16
 8006f52:	486d      	ldr	r0, [pc, #436]	; (8007108 <checkAktifCalisma+0xb54>)
 8006f54:	f002 feb1 	bl	8009cba <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006f58:	4b6c      	ldr	r3, [pc, #432]	; (800710c <checkAktifCalisma+0xb58>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006f5e:	4b6e      	ldr	r3, [pc, #440]	; (8007118 <checkAktifCalisma+0xb64>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f68:	486f      	ldr	r0, [pc, #444]	; (8007128 <checkAktifCalisma+0xb74>)
 8006f6a:	f002 fe8f 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d120      	bne.n	8006fb6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f78:	486b      	ldr	r0, [pc, #428]	; (8007128 <checkAktifCalisma+0xb74>)
 8006f7a:	f002 fe87 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d118      	bne.n	8006fb6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006f84:	2104      	movs	r1, #4
 8006f86:	4868      	ldr	r0, [pc, #416]	; (8007128 <checkAktifCalisma+0xb74>)
 8006f88:	f002 fe80 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d111      	bne.n	8006fb6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006f92:	2102      	movs	r1, #2
 8006f94:	4864      	ldr	r0, [pc, #400]	; (8007128 <checkAktifCalisma+0xb74>)
 8006f96:	f002 fe79 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	4861      	ldr	r0, [pc, #388]	; (8007128 <checkAktifCalisma+0xb74>)
 8006fa4:	f002 fe72 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006fae:	4b5f      	ldr	r3, [pc, #380]	; (800712c <checkAktifCalisma+0xb78>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e002      	b.n	8006fbc <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006fb6:	4b5d      	ldr	r3, [pc, #372]	; (800712c <checkAktifCalisma+0xb78>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fbc:	4b5c      	ldr	r3, [pc, #368]	; (8007130 <checkAktifCalisma+0xb7c>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d144      	bne.n	800704e <checkAktifCalisma+0xa9a>
 8006fc4:	4b5b      	ldr	r3, [pc, #364]	; (8007134 <checkAktifCalisma+0xb80>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <checkAktifCalisma+0xa20>
 8006fcc:	4b59      	ldr	r3, [pc, #356]	; (8007134 <checkAktifCalisma+0xb80>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d13c      	bne.n	800704e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006fd4:	2180      	movs	r1, #128	; 0x80
 8006fd6:	484c      	ldr	r0, [pc, #304]	; (8007108 <checkAktifCalisma+0xb54>)
 8006fd8:	f002 fe58 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <checkAktifCalisma+0xa36>
 8006fe2:	4b55      	ldr	r3, [pc, #340]	; (8007138 <checkAktifCalisma+0xb84>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <checkAktifCalisma+0xa4e>
 8006fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fee:	484e      	ldr	r0, [pc, #312]	; (8007128 <checkAktifCalisma+0xb74>)
 8006ff0:	f002 fe4c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d129      	bne.n	800704e <checkAktifCalisma+0xa9a>
 8006ffa:	4b4f      	ldr	r3, [pc, #316]	; (8007138 <checkAktifCalisma+0xb84>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d125      	bne.n	800704e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007002:	2104      	movs	r1, #4
 8007004:	4840      	ldr	r0, [pc, #256]	; (8007108 <checkAktifCalisma+0xb54>)
 8007006:	f002 fe41 	bl	8009c8c <HAL_GPIO_ReadPin>
 800700a:	4603      	mov	r3, r0
 800700c:	2b01      	cmp	r3, #1
 800700e:	d003      	beq.n	8007018 <checkAktifCalisma+0xa64>
 8007010:	4b4a      	ldr	r3, [pc, #296]	; (800713c <checkAktifCalisma+0xb88>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d11a      	bne.n	800704e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007018:	2102      	movs	r1, #2
 800701a:	483b      	ldr	r0, [pc, #236]	; (8007108 <checkAktifCalisma+0xb54>)
 800701c:	f002 fe36 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d113      	bne.n	800704e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8007026:	4b46      	ldr	r3, [pc, #280]	; (8007140 <checkAktifCalisma+0xb8c>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	f083 0301 	eor.w	r3, r3, #1
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8007034:	4b3d      	ldr	r3, [pc, #244]	; (800712c <checkAktifCalisma+0xb78>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800703c:	4b41      	ldr	r3, [pc, #260]	; (8007144 <checkAktifCalisma+0xb90>)
 800703e:	2201      	movs	r2, #1
 8007040:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007042:	4b36      	ldr	r3, [pc, #216]	; (800711c <checkAktifCalisma+0xb68>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a40      	ldr	r2, [pc, #256]	; (8007148 <checkAktifCalisma+0xb94>)
 8007048:	6013      	str	r3, [r2, #0]
			bekle();
 800704a:	f7ff f87d 	bl	8006148 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800704e:	4b33      	ldr	r3, [pc, #204]	; (800711c <checkAktifCalisma+0xb68>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b3d      	ldr	r3, [pc, #244]	; (8007148 <checkAktifCalisma+0xb94>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	4a3c      	ldr	r2, [pc, #240]	; (800714c <checkAktifCalisma+0xb98>)
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	4293      	cmp	r3, r2
 800705e:	d211      	bcs.n	8007084 <checkAktifCalisma+0xad0>
 8007060:	2104      	movs	r1, #4
 8007062:	4829      	ldr	r0, [pc, #164]	; (8007108 <checkAktifCalisma+0xb54>)
 8007064:	f002 fe12 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <checkAktifCalisma+0xad0>
 800706e:	4b33      	ldr	r3, [pc, #204]	; (800713c <checkAktifCalisma+0xb88>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <checkAktifCalisma+0xad0>
 8007076:	4b2d      	ldr	r3, [pc, #180]	; (800712c <checkAktifCalisma+0xb78>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f083 0301 	eor.w	r3, r3, #1
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8007084:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <checkAktifCalisma+0xb90>)
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800708a:	4b29      	ldr	r3, [pc, #164]	; (8007130 <checkAktifCalisma+0xb7c>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d160      	bne.n	8007154 <checkAktifCalisma+0xba0>
 8007092:	4b28      	ldr	r3, [pc, #160]	; (8007134 <checkAktifCalisma+0xb80>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d003      	beq.n	80070a2 <checkAktifCalisma+0xaee>
 800709a:	4b26      	ldr	r3, [pc, #152]	; (8007134 <checkAktifCalisma+0xb80>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d158      	bne.n	8007154 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80070a2:	2104      	movs	r1, #4
 80070a4:	4818      	ldr	r0, [pc, #96]	; (8007108 <checkAktifCalisma+0xb54>)
 80070a6:	f002 fdf1 	bl	8009c8c <HAL_GPIO_ReadPin>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d003      	beq.n	80070b8 <checkAktifCalisma+0xb04>
 80070b0:	4b22      	ldr	r3, [pc, #136]	; (800713c <checkAktifCalisma+0xb88>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d14d      	bne.n	8007154 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80070b8:	2102      	movs	r1, #2
 80070ba:	4813      	ldr	r0, [pc, #76]	; (8007108 <checkAktifCalisma+0xb54>)
 80070bc:	f002 fde6 	bl	8009c8c <HAL_GPIO_ReadPin>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d146      	bne.n	8007154 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80070c6:	2180      	movs	r1, #128	; 0x80
 80070c8:	480f      	ldr	r0, [pc, #60]	; (8007108 <checkAktifCalisma+0xb54>)
 80070ca:	f002 fddf 	bl	8009c8c <HAL_GPIO_ReadPin>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <checkAktifCalisma+0xb28>
 80070d4:	4b18      	ldr	r3, [pc, #96]	; (8007138 <checkAktifCalisma+0xb84>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <checkAktifCalisma+0xb40>
 80070dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80070e0:	4811      	ldr	r0, [pc, #68]	; (8007128 <checkAktifCalisma+0xb74>)
 80070e2:	f002 fdd3 	bl	8009c8c <HAL_GPIO_ReadPin>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d133      	bne.n	8007154 <checkAktifCalisma+0xba0>
 80070ec:	4b12      	ldr	r3, [pc, #72]	; (8007138 <checkAktifCalisma+0xb84>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d12f      	bne.n	8007154 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <checkAktifCalisma+0xb78>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d02b      	beq.n	8007154 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80070fc:	4b14      	ldr	r3, [pc, #80]	; (8007150 <checkAktifCalisma+0xb9c>)
 80070fe:	2201      	movs	r2, #1
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	e02a      	b.n	800715a <checkAktifCalisma+0xba6>
 8007104:	20000d43 	.word	0x20000d43
 8007108:	40011000 	.word	0x40011000
 800710c:	20000d47 	.word	0x20000d47
 8007110:	20000d5e 	.word	0x20000d5e
 8007114:	20000d5f 	.word	0x20000d5f
 8007118:	20000d3f 	.word	0x20000d3f
 800711c:	20000cb4 	.word	0x20000cb4
 8007120:	20000cc0 	.word	0x20000cc0
 8007124:	20000d22 	.word	0x20000d22
 8007128:	40010c00 	.word	0x40010c00
 800712c:	20000d4e 	.word	0x20000d4e
 8007130:	20000d15 	.word	0x20000d15
 8007134:	20000d14 	.word	0x20000d14
 8007138:	20000d18 	.word	0x20000d18
 800713c:	20000d12 	.word	0x20000d12
 8007140:	20000d3b 	.word	0x20000d3b
 8007144:	20000d4f 	.word	0x20000d4f
 8007148:	20000cb8 	.word	0x20000cb8
 800714c:	20000d25 	.word	0x20000d25
 8007150:	20000d50 	.word	0x20000d50
		} else {
			kapi1butonkontrol=0;
 8007154:	4b8b      	ldr	r3, [pc, #556]	; (8007384 <checkAktifCalisma+0xdd0>)
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800715a:	4b8b      	ldr	r3, [pc, #556]	; (8007388 <checkAktifCalisma+0xdd4>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b02      	cmp	r3, #2
 8007160:	d121      	bne.n	80071a6 <checkAktifCalisma+0xbf2>
 8007162:	4b8a      	ldr	r3, [pc, #552]	; (800738c <checkAktifCalisma+0xdd8>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d003      	beq.n	8007172 <checkAktifCalisma+0xbbe>
 800716a:	4b88      	ldr	r3, [pc, #544]	; (800738c <checkAktifCalisma+0xdd8>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d119      	bne.n	80071a6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007172:	2104      	movs	r1, #4
 8007174:	4886      	ldr	r0, [pc, #536]	; (8007390 <checkAktifCalisma+0xddc>)
 8007176:	f002 fd89 	bl	8009c8c <HAL_GPIO_ReadPin>
 800717a:	4603      	mov	r3, r0
 800717c:	2b01      	cmp	r3, #1
 800717e:	d003      	beq.n	8007188 <checkAktifCalisma+0xbd4>
 8007180:	4b84      	ldr	r3, [pc, #528]	; (8007394 <checkAktifCalisma+0xde0>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10e      	bne.n	80071a6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007188:	2102      	movs	r1, #2
 800718a:	4881      	ldr	r0, [pc, #516]	; (8007390 <checkAktifCalisma+0xddc>)
 800718c:	f002 fd7e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d107      	bne.n	80071a6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8007196:	4b80      	ldr	r3, [pc, #512]	; (8007398 <checkAktifCalisma+0xde4>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800719e:	4b7f      	ldr	r3, [pc, #508]	; (800739c <checkAktifCalisma+0xde8>)
 80071a0:	2201      	movs	r2, #1
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	e002      	b.n	80071ac <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80071a6:	4b7d      	ldr	r3, [pc, #500]	; (800739c <checkAktifCalisma+0xde8>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80071ac:	4b75      	ldr	r3, [pc, #468]	; (8007384 <checkAktifCalisma+0xdd0>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d107      	bne.n	80071c4 <checkAktifCalisma+0xc10>
 80071b4:	4b79      	ldr	r3, [pc, #484]	; (800739c <checkAktifCalisma+0xde8>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <checkAktifCalisma+0xc10>
 80071bc:	4b78      	ldr	r3, [pc, #480]	; (80073a0 <checkAktifCalisma+0xdec>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80071c4:	2201      	movs	r2, #1
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	4876      	ldr	r0, [pc, #472]	; (80073a4 <checkAktifCalisma+0xdf0>)
 80071ca:	f002 fd76 	bl	8009cba <HAL_GPIO_WritePin>
 80071ce:	e004      	b.n	80071da <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80071d0:	2200      	movs	r2, #0
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	4873      	ldr	r0, [pc, #460]	; (80073a4 <checkAktifCalisma+0xdf0>)
 80071d6:	f002 fd70 	bl	8009cba <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80071da:	4b73      	ldr	r3, [pc, #460]	; (80073a8 <checkAktifCalisma+0xdf4>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d141      	bne.n	8007266 <checkAktifCalisma+0xcb2>
 80071e2:	4b6a      	ldr	r3, [pc, #424]	; (800738c <checkAktifCalisma+0xdd8>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d003      	beq.n	80071f2 <checkAktifCalisma+0xc3e>
 80071ea:	4b68      	ldr	r3, [pc, #416]	; (800738c <checkAktifCalisma+0xdd8>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d139      	bne.n	8007266 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80071f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071f6:	4866      	ldr	r0, [pc, #408]	; (8007390 <checkAktifCalisma+0xddc>)
 80071f8:	f002 fd48 	bl	8009c8c <HAL_GPIO_ReadPin>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <checkAktifCalisma+0xc56>
 8007202:	4b6a      	ldr	r3, [pc, #424]	; (80073ac <checkAktifCalisma+0xdf8>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <checkAktifCalisma+0xc6e>
 800720a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800720e:	4868      	ldr	r0, [pc, #416]	; (80073b0 <checkAktifCalisma+0xdfc>)
 8007210:	f002 fd3c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d125      	bne.n	8007266 <checkAktifCalisma+0xcb2>
 800721a:	4b64      	ldr	r3, [pc, #400]	; (80073ac <checkAktifCalisma+0xdf8>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d121      	bne.n	8007266 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007222:	2102      	movs	r1, #2
 8007224:	485a      	ldr	r0, [pc, #360]	; (8007390 <checkAktifCalisma+0xddc>)
 8007226:	f002 fd31 	bl	8009c8c <HAL_GPIO_ReadPin>
 800722a:	4603      	mov	r3, r0
 800722c:	2b01      	cmp	r3, #1
 800722e:	d11a      	bne.n	8007266 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007230:	2104      	movs	r1, #4
 8007232:	4857      	ldr	r0, [pc, #348]	; (8007390 <checkAktifCalisma+0xddc>)
 8007234:	f002 fd2a 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d113      	bne.n	8007266 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800723e:	4b56      	ldr	r3, [pc, #344]	; (8007398 <checkAktifCalisma+0xde4>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8007246:	4b5b      	ldr	r3, [pc, #364]	; (80073b4 <checkAktifCalisma+0xe00>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	f083 0301 	eor.w	r3, r3, #1
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8007254:	4b58      	ldr	r3, [pc, #352]	; (80073b8 <checkAktifCalisma+0xe04>)
 8007256:	2201      	movs	r2, #1
 8007258:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800725a:	4b58      	ldr	r3, [pc, #352]	; (80073bc <checkAktifCalisma+0xe08>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a58      	ldr	r2, [pc, #352]	; (80073c0 <checkAktifCalisma+0xe0c>)
 8007260:	6013      	str	r3, [r2, #0]
			bekle();
 8007262:	f7fe ff71 	bl	8006148 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8007266:	4b55      	ldr	r3, [pc, #340]	; (80073bc <checkAktifCalisma+0xe08>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b55      	ldr	r3, [pc, #340]	; (80073c0 <checkAktifCalisma+0xe0c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	4a54      	ldr	r2, [pc, #336]	; (80073c4 <checkAktifCalisma+0xe10>)
 8007272:	7812      	ldrb	r2, [r2, #0]
 8007274:	4293      	cmp	r3, r2
 8007276:	d20d      	bcs.n	8007294 <checkAktifCalisma+0xce0>
 8007278:	2102      	movs	r1, #2
 800727a:	4845      	ldr	r0, [pc, #276]	; (8007390 <checkAktifCalisma+0xddc>)
 800727c:	f002 fd06 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <checkAktifCalisma+0xce0>
 8007286:	4b44      	ldr	r3, [pc, #272]	; (8007398 <checkAktifCalisma+0xde4>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	f083 0301 	eor.w	r3, r3, #1
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007294:	4b48      	ldr	r3, [pc, #288]	; (80073b8 <checkAktifCalisma+0xe04>)
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800729a:	4b43      	ldr	r3, [pc, #268]	; (80073a8 <checkAktifCalisma+0xdf4>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d135      	bne.n	800730e <checkAktifCalisma+0xd5a>
 80072a2:	4b3a      	ldr	r3, [pc, #232]	; (800738c <checkAktifCalisma+0xdd8>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d003      	beq.n	80072b2 <checkAktifCalisma+0xcfe>
 80072aa:	4b38      	ldr	r3, [pc, #224]	; (800738c <checkAktifCalisma+0xdd8>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d12d      	bne.n	800730e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80072b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072b6:	4836      	ldr	r0, [pc, #216]	; (8007390 <checkAktifCalisma+0xddc>)
 80072b8:	f002 fce8 	bl	8009c8c <HAL_GPIO_ReadPin>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <checkAktifCalisma+0xd16>
 80072c2:	4b3a      	ldr	r3, [pc, #232]	; (80073ac <checkAktifCalisma+0xdf8>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00b      	beq.n	80072e2 <checkAktifCalisma+0xd2e>
 80072ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072ce:	4838      	ldr	r0, [pc, #224]	; (80073b0 <checkAktifCalisma+0xdfc>)
 80072d0:	f002 fcdc 	bl	8009c8c <HAL_GPIO_ReadPin>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d119      	bne.n	800730e <checkAktifCalisma+0xd5a>
 80072da:	4b34      	ldr	r3, [pc, #208]	; (80073ac <checkAktifCalisma+0xdf8>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d115      	bne.n	800730e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80072e2:	2102      	movs	r1, #2
 80072e4:	482a      	ldr	r0, [pc, #168]	; (8007390 <checkAktifCalisma+0xddc>)
 80072e6:	f002 fcd1 	bl	8009c8c <HAL_GPIO_ReadPin>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d10e      	bne.n	800730e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80072f0:	2104      	movs	r1, #4
 80072f2:	4827      	ldr	r0, [pc, #156]	; (8007390 <checkAktifCalisma+0xddc>)
 80072f4:	f002 fcca 	bl	8009c8c <HAL_GPIO_ReadPin>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d107      	bne.n	800730e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80072fe:	4b26      	ldr	r3, [pc, #152]	; (8007398 <checkAktifCalisma+0xde4>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8007306:	4b30      	ldr	r3, [pc, #192]	; (80073c8 <checkAktifCalisma+0xe14>)
 8007308:	2201      	movs	r2, #1
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	e002      	b.n	8007314 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800730e:	4b2e      	ldr	r3, [pc, #184]	; (80073c8 <checkAktifCalisma+0xe14>)
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007314:	4b24      	ldr	r3, [pc, #144]	; (80073a8 <checkAktifCalisma+0xdf4>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d11d      	bne.n	8007358 <checkAktifCalisma+0xda4>
 800731c:	4b1b      	ldr	r3, [pc, #108]	; (800738c <checkAktifCalisma+0xdd8>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d003      	beq.n	800732c <checkAktifCalisma+0xd78>
 8007324:	4b19      	ldr	r3, [pc, #100]	; (800738c <checkAktifCalisma+0xdd8>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b03      	cmp	r3, #3
 800732a:	d115      	bne.n	8007358 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800732c:	2102      	movs	r1, #2
 800732e:	4818      	ldr	r0, [pc, #96]	; (8007390 <checkAktifCalisma+0xddc>)
 8007330:	f002 fcac 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007334:	4603      	mov	r3, r0
 8007336:	2b01      	cmp	r3, #1
 8007338:	d10e      	bne.n	8007358 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800733a:	2104      	movs	r1, #4
 800733c:	4814      	ldr	r0, [pc, #80]	; (8007390 <checkAktifCalisma+0xddc>)
 800733e:	f002 fca5 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007348:	4b13      	ldr	r3, [pc, #76]	; (8007398 <checkAktifCalisma+0xde4>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8007350:	4b1e      	ldr	r3, [pc, #120]	; (80073cc <checkAktifCalisma+0xe18>)
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e002      	b.n	800735e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007358:	4b1c      	ldr	r3, [pc, #112]	; (80073cc <checkAktifCalisma+0xe18>)
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800735e:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <checkAktifCalisma+0xe14>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <checkAktifCalisma+0xdc2>
 8007366:	4b19      	ldr	r3, [pc, #100]	; (80073cc <checkAktifCalisma+0xe18>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d103      	bne.n	8007376 <checkAktifCalisma+0xdc2>
 800736e:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <checkAktifCalisma+0xe04>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d02c      	beq.n	80073d0 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007376:	2201      	movs	r2, #1
 8007378:	2140      	movs	r1, #64	; 0x40
 800737a:	480a      	ldr	r0, [pc, #40]	; (80073a4 <checkAktifCalisma+0xdf0>)
 800737c:	f002 fc9d 	bl	8009cba <HAL_GPIO_WritePin>
 8007380:	e02b      	b.n	80073da <checkAktifCalisma+0xe26>
 8007382:	bf00      	nop
 8007384:	20000d50 	.word	0x20000d50
 8007388:	20000d15 	.word	0x20000d15
 800738c:	20000d14 	.word	0x20000d14
 8007390:	40011000 	.word	0x40011000
 8007394:	20000d12 	.word	0x20000d12
 8007398:	20000d4e 	.word	0x20000d4e
 800739c:	20000d51 	.word	0x20000d51
 80073a0:	20000d4f 	.word	0x20000d4f
 80073a4:	40010800 	.word	0x40010800
 80073a8:	20000d16 	.word	0x20000d16
 80073ac:	20000d18 	.word	0x20000d18
 80073b0:	40010c00 	.word	0x40010c00
 80073b4:	20000d3b 	.word	0x20000d3b
 80073b8:	20000d52 	.word	0x20000d52
 80073bc:	20000cb4 	.word	0x20000cb4
 80073c0:	20000cb8 	.word	0x20000cb8
 80073c4:	20000d26 	.word	0x20000d26
 80073c8:	20000d53 	.word	0x20000d53
 80073cc:	20000d54 	.word	0x20000d54
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80073d0:	2200      	movs	r2, #0
 80073d2:	2140      	movs	r1, #64	; 0x40
 80073d4:	488d      	ldr	r0, [pc, #564]	; (800760c <checkAktifCalisma+0x1058>)
 80073d6:	f002 fc70 	bl	8009cba <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80073da:	4b8d      	ldr	r3, [pc, #564]	; (8007610 <checkAktifCalisma+0x105c>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <checkAktifCalisma+0xe36>
 80073e2:	4b8b      	ldr	r3, [pc, #556]	; (8007610 <checkAktifCalisma+0x105c>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d115      	bne.n	8007416 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80073ea:	2104      	movs	r1, #4
 80073ec:	4889      	ldr	r0, [pc, #548]	; (8007614 <checkAktifCalisma+0x1060>)
 80073ee:	f002 fc4d 	bl	8009c8c <HAL_GPIO_ReadPin>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d003      	beq.n	8007400 <checkAktifCalisma+0xe4c>
 80073f8:	4b87      	ldr	r3, [pc, #540]	; (8007618 <checkAktifCalisma+0x1064>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007400:	2102      	movs	r1, #2
 8007402:	4884      	ldr	r0, [pc, #528]	; (8007614 <checkAktifCalisma+0x1060>)
 8007404:	f002 fc42 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800740e:	4b83      	ldr	r3, [pc, #524]	; (800761c <checkAktifCalisma+0x1068>)
 8007410:	2201      	movs	r2, #1
 8007412:	701a      	strb	r2, [r3, #0]
 8007414:	e002      	b.n	800741c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007416:	4b81      	ldr	r3, [pc, #516]	; (800761c <checkAktifCalisma+0x1068>)
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800741c:	4b7c      	ldr	r3, [pc, #496]	; (8007610 <checkAktifCalisma+0x105c>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d003      	beq.n	800742c <checkAktifCalisma+0xe78>
 8007424:	4b7a      	ldr	r3, [pc, #488]	; (8007610 <checkAktifCalisma+0x105c>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d111      	bne.n	8007450 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800742c:	2102      	movs	r1, #2
 800742e:	4879      	ldr	r0, [pc, #484]	; (8007614 <checkAktifCalisma+0x1060>)
 8007430:	f002 fc2c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007434:	4603      	mov	r3, r0
 8007436:	2b01      	cmp	r3, #1
 8007438:	d10a      	bne.n	8007450 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800743a:	2104      	movs	r1, #4
 800743c:	4875      	ldr	r0, [pc, #468]	; (8007614 <checkAktifCalisma+0x1060>)
 800743e:	f002 fc25 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d103      	bne.n	8007450 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007448:	4b75      	ldr	r3, [pc, #468]	; (8007620 <checkAktifCalisma+0x106c>)
 800744a:	2201      	movs	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	e002      	b.n	8007456 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007450:	4b73      	ldr	r3, [pc, #460]	; (8007620 <checkAktifCalisma+0x106c>)
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007456:	4b71      	ldr	r3, [pc, #452]	; (800761c <checkAktifCalisma+0x1068>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00f      	beq.n	800747e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800745e:	4b71      	ldr	r3, [pc, #452]	; (8007624 <checkAktifCalisma+0x1070>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d10b      	bne.n	800747e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800746a:	486f      	ldr	r0, [pc, #444]	; (8007628 <checkAktifCalisma+0x1074>)
 800746c:	f002 fc0e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d103      	bne.n	800747e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8007476:	4b6d      	ldr	r3, [pc, #436]	; (800762c <checkAktifCalisma+0x1078>)
 8007478:	2201      	movs	r2, #1
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e002      	b.n	8007484 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800747e:	4b6b      	ldr	r3, [pc, #428]	; (800762c <checkAktifCalisma+0x1078>)
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007484:	4b66      	ldr	r3, [pc, #408]	; (8007620 <checkAktifCalisma+0x106c>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00f      	beq.n	80074ac <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 800748c:	4b65      	ldr	r3, [pc, #404]	; (8007624 <checkAktifCalisma+0x1070>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d10b      	bne.n	80074ac <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007498:	4863      	ldr	r0, [pc, #396]	; (8007628 <checkAktifCalisma+0x1074>)
 800749a:	f002 fbf7 	bl	8009c8c <HAL_GPIO_ReadPin>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80074a4:	4b62      	ldr	r3, [pc, #392]	; (8007630 <checkAktifCalisma+0x107c>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e002      	b.n	80074b2 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 80074ac:	4b60      	ldr	r3, [pc, #384]	; (8007630 <checkAktifCalisma+0x107c>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80074b2:	4b60      	ldr	r3, [pc, #384]	; (8007634 <checkAktifCalisma+0x1080>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d137      	bne.n	800752a <checkAktifCalisma+0xf76>
 80074ba:	4b5f      	ldr	r3, [pc, #380]	; (8007638 <checkAktifCalisma+0x1084>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d003      	beq.n	80074ca <checkAktifCalisma+0xf16>
 80074c2:	4b5d      	ldr	r3, [pc, #372]	; (8007638 <checkAktifCalisma+0x1084>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d12f      	bne.n	800752a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80074ca:	4b54      	ldr	r3, [pc, #336]	; (800761c <checkAktifCalisma+0x1068>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d103      	bne.n	80074da <checkAktifCalisma+0xf26>
 80074d2:	4b53      	ldr	r3, [pc, #332]	; (8007620 <checkAktifCalisma+0x106c>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d027      	beq.n	800752a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80074da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074de:	484d      	ldr	r0, [pc, #308]	; (8007614 <checkAktifCalisma+0x1060>)
 80074e0:	f002 fbd4 	bl	8009c8c <HAL_GPIO_ReadPin>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <checkAktifCalisma+0xf3e>
 80074ea:	4b4e      	ldr	r3, [pc, #312]	; (8007624 <checkAktifCalisma+0x1070>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80074f2:	4b4e      	ldr	r3, [pc, #312]	; (800762c <checkAktifCalisma+0x1078>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d103      	bne.n	8007502 <checkAktifCalisma+0xf4e>
 80074fa:	4b4d      	ldr	r3, [pc, #308]	; (8007630 <checkAktifCalisma+0x107c>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d013      	beq.n	800752a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007502:	4b4e      	ldr	r3, [pc, #312]	; (800763c <checkAktifCalisma+0x1088>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00f      	beq.n	800752a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800750a:	4b4d      	ldr	r3, [pc, #308]	; (8007640 <checkAktifCalisma+0x108c>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f083 0301 	eor.w	r3, r3, #1
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007518:	4b4a      	ldr	r3, [pc, #296]	; (8007644 <checkAktifCalisma+0x1090>)
 800751a:	2201      	movs	r2, #1
 800751c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800751e:	4b4a      	ldr	r3, [pc, #296]	; (8007648 <checkAktifCalisma+0x1094>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a4a      	ldr	r2, [pc, #296]	; (800764c <checkAktifCalisma+0x1098>)
 8007524:	6013      	str	r3, [r2, #0]
			bekle();
 8007526:	f7fe fe0f 	bl	8006148 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800752a:	4b47      	ldr	r3, [pc, #284]	; (8007648 <checkAktifCalisma+0x1094>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b47      	ldr	r3, [pc, #284]	; (800764c <checkAktifCalisma+0x1098>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	4a46      	ldr	r2, [pc, #280]	; (8007650 <checkAktifCalisma+0x109c>)
 8007536:	7812      	ldrb	r2, [r2, #0]
 8007538:	4293      	cmp	r3, r2
 800753a:	d214      	bcs.n	8007566 <checkAktifCalisma+0xfb2>
 800753c:	4b37      	ldr	r3, [pc, #220]	; (800761c <checkAktifCalisma+0x1068>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f083 0301 	eor.w	r3, r3, #1
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d006      	beq.n	8007558 <checkAktifCalisma+0xfa4>
 800754a:	4b35      	ldr	r3, [pc, #212]	; (8007620 <checkAktifCalisma+0x106c>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	f083 0301 	eor.w	r3, r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <checkAktifCalisma+0xfb2>
 8007558:	4b38      	ldr	r3, [pc, #224]	; (800763c <checkAktifCalisma+0x1088>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	f083 0301 	eor.w	r3, r3, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007566:	4b37      	ldr	r3, [pc, #220]	; (8007644 <checkAktifCalisma+0x1090>)
 8007568:	2200      	movs	r2, #0
 800756a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800756c:	4b31      	ldr	r3, [pc, #196]	; (8007634 <checkAktifCalisma+0x1080>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d12b      	bne.n	80075cc <checkAktifCalisma+0x1018>
 8007574:	4b30      	ldr	r3, [pc, #192]	; (8007638 <checkAktifCalisma+0x1084>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d003      	beq.n	8007584 <checkAktifCalisma+0xfd0>
 800757c:	4b2e      	ldr	r3, [pc, #184]	; (8007638 <checkAktifCalisma+0x1084>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d123      	bne.n	80075cc <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007584:	4b25      	ldr	r3, [pc, #148]	; (800761c <checkAktifCalisma+0x1068>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <checkAktifCalisma+0xfe0>
 800758c:	4b24      	ldr	r3, [pc, #144]	; (8007620 <checkAktifCalisma+0x106c>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007598:	481e      	ldr	r0, [pc, #120]	; (8007614 <checkAktifCalisma+0x1060>)
 800759a:	f002 fb77 	bl	8009c8c <HAL_GPIO_ReadPin>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d103      	bne.n	80075ac <checkAktifCalisma+0xff8>
 80075a4:	4b1f      	ldr	r3, [pc, #124]	; (8007624 <checkAktifCalisma+0x1070>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80075ac:	4b1f      	ldr	r3, [pc, #124]	; (800762c <checkAktifCalisma+0x1078>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d103      	bne.n	80075bc <checkAktifCalisma+0x1008>
 80075b4:	4b1e      	ldr	r3, [pc, #120]	; (8007630 <checkAktifCalisma+0x107c>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80075bc:	4b1f      	ldr	r3, [pc, #124]	; (800763c <checkAktifCalisma+0x1088>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80075c4:	4b23      	ldr	r3, [pc, #140]	; (8007654 <checkAktifCalisma+0x10a0>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	e002      	b.n	80075d2 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80075cc:	4b21      	ldr	r3, [pc, #132]	; (8007654 <checkAktifCalisma+0x10a0>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80075d2:	4b18      	ldr	r3, [pc, #96]	; (8007634 <checkAktifCalisma+0x1080>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d140      	bne.n	800765c <checkAktifCalisma+0x10a8>
 80075da:	4b17      	ldr	r3, [pc, #92]	; (8007638 <checkAktifCalisma+0x1084>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d003      	beq.n	80075ea <checkAktifCalisma+0x1036>
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <checkAktifCalisma+0x1084>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d138      	bne.n	800765c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80075ea:	4b0c      	ldr	r3, [pc, #48]	; (800761c <checkAktifCalisma+0x1068>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <checkAktifCalisma+0x1046>
 80075f2:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <checkAktifCalisma+0x106c>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d030      	beq.n	800765c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80075fa:	4b10      	ldr	r3, [pc, #64]	; (800763c <checkAktifCalisma+0x1088>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d02c      	beq.n	800765c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <checkAktifCalisma+0x10a4>)
 8007604:	2201      	movs	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	e02b      	b.n	8007662 <checkAktifCalisma+0x10ae>
 800760a:	bf00      	nop
 800760c:	40010800 	.word	0x40010800
 8007610:	20000d19 	.word	0x20000d19
 8007614:	40011000 	.word	0x40011000
 8007618:	20000d12 	.word	0x20000d12
 800761c:	20000d58 	.word	0x20000d58
 8007620:	20000d59 	.word	0x20000d59
 8007624:	20000d18 	.word	0x20000d18
 8007628:	40010c00 	.word	0x40010c00
 800762c:	20000d68 	.word	0x20000d68
 8007630:	20000d69 	.word	0x20000d69
 8007634:	20000d17 	.word	0x20000d17
 8007638:	20000d14 	.word	0x20000d14
 800763c:	20000d4e 	.word	0x20000d4e
 8007640:	20000d3b 	.word	0x20000d3b
 8007644:	20000d55 	.word	0x20000d55
 8007648:	20000cb4 	.word	0x20000cb4
 800764c:	20000cb8 	.word	0x20000cb8
 8007650:	20000d27 	.word	0x20000d27
 8007654:	20000d56 	.word	0x20000d56
 8007658:	20000d57 	.word	0x20000d57
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 800765c:	4b89      	ldr	r3, [pc, #548]	; (8007884 <checkAktifCalisma+0x12d0>)
 800765e:	2200      	movs	r2, #0
 8007660:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8007662:	4b89      	ldr	r3, [pc, #548]	; (8007888 <checkAktifCalisma+0x12d4>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d107      	bne.n	800767a <checkAktifCalisma+0x10c6>
 800766a:	4b88      	ldr	r3, [pc, #544]	; (800788c <checkAktifCalisma+0x12d8>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <checkAktifCalisma+0x10c6>
 8007672:	4b84      	ldr	r3, [pc, #528]	; (8007884 <checkAktifCalisma+0x12d0>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800767a:	2201      	movs	r2, #1
 800767c:	2120      	movs	r1, #32
 800767e:	4884      	ldr	r0, [pc, #528]	; (8007890 <checkAktifCalisma+0x12dc>)
 8007680:	f002 fb1b 	bl	8009cba <HAL_GPIO_WritePin>
 8007684:	e004      	b.n	8007690 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007686:	2200      	movs	r2, #0
 8007688:	2120      	movs	r1, #32
 800768a:	4881      	ldr	r0, [pc, #516]	; (8007890 <checkAktifCalisma+0x12dc>)
 800768c:	f002 fb15 	bl	8009cba <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007690:	4b80      	ldr	r3, [pc, #512]	; (8007894 <checkAktifCalisma+0x12e0>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <checkAktifCalisma+0x1102>
 8007698:	2102      	movs	r1, #2
 800769a:	487f      	ldr	r0, [pc, #508]	; (8007898 <checkAktifCalisma+0x12e4>)
 800769c:	f002 faf6 	bl	8009c8c <HAL_GPIO_ReadPin>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d107      	bne.n	80076b6 <checkAktifCalisma+0x1102>
 80076a6:	4b7d      	ldr	r3, [pc, #500]	; (800789c <checkAktifCalisma+0x12e8>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <checkAktifCalisma+0x1102>
 80076ae:	4b7c      	ldr	r3, [pc, #496]	; (80078a0 <checkAktifCalisma+0x12ec>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d112      	bne.n	80076dc <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80076b6:	4b7b      	ldr	r3, [pc, #492]	; (80078a4 <checkAktifCalisma+0x12f0>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d066      	beq.n	800778c <checkAktifCalisma+0x11d8>
 80076be:	2104      	movs	r1, #4
 80076c0:	4875      	ldr	r0, [pc, #468]	; (8007898 <checkAktifCalisma+0x12e4>)
 80076c2:	f002 fae3 	bl	8009c8c <HAL_GPIO_ReadPin>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d15f      	bne.n	800778c <checkAktifCalisma+0x11d8>
 80076cc:	4b73      	ldr	r3, [pc, #460]	; (800789c <checkAktifCalisma+0x12e8>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d05b      	beq.n	800778c <checkAktifCalisma+0x11d8>
 80076d4:	4b72      	ldr	r3, [pc, #456]	; (80078a0 <checkAktifCalisma+0x12ec>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d057      	beq.n	800778c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80076dc:	4b72      	ldr	r3, [pc, #456]	; (80078a8 <checkAktifCalisma+0x12f4>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	4b70      	ldr	r3, [pc, #448]	; (80078a8 <checkAktifCalisma+0x12f4>)
 80076e6:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80076e8:	4b6f      	ldr	r3, [pc, #444]	; (80078a8 <checkAktifCalisma+0x12f4>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b09      	cmp	r3, #9
 80076ee:	d908      	bls.n	8007702 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80076f0:	4b6d      	ldr	r3, [pc, #436]	; (80078a8 <checkAktifCalisma+0x12f4>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80076f6:	4b6d      	ldr	r3, [pc, #436]	; (80078ac <checkAktifCalisma+0x12f8>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	3301      	adds	r3, #1
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	4b6b      	ldr	r3, [pc, #428]	; (80078ac <checkAktifCalisma+0x12f8>)
 8007700:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007702:	4b6a      	ldr	r3, [pc, #424]	; (80078ac <checkAktifCalisma+0x12f8>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b09      	cmp	r3, #9
 8007708:	d908      	bls.n	800771c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800770a:	4b68      	ldr	r3, [pc, #416]	; (80078ac <checkAktifCalisma+0x12f8>)
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007710:	4b67      	ldr	r3, [pc, #412]	; (80078b0 <checkAktifCalisma+0x12fc>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	3301      	adds	r3, #1
 8007716:	b2da      	uxtb	r2, r3
 8007718:	4b65      	ldr	r3, [pc, #404]	; (80078b0 <checkAktifCalisma+0x12fc>)
 800771a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 800771c:	4b64      	ldr	r3, [pc, #400]	; (80078b0 <checkAktifCalisma+0x12fc>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b09      	cmp	r3, #9
 8007722:	d908      	bls.n	8007736 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007724:	4b62      	ldr	r3, [pc, #392]	; (80078b0 <checkAktifCalisma+0x12fc>)
 8007726:	2200      	movs	r2, #0
 8007728:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800772a:	4b62      	ldr	r3, [pc, #392]	; (80078b4 <checkAktifCalisma+0x1300>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	b2da      	uxtb	r2, r3
 8007732:	4b60      	ldr	r3, [pc, #384]	; (80078b4 <checkAktifCalisma+0x1300>)
 8007734:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007736:	4b5f      	ldr	r3, [pc, #380]	; (80078b4 <checkAktifCalisma+0x1300>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b09      	cmp	r3, #9
 800773c:	d908      	bls.n	8007750 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800773e:	4b5d      	ldr	r3, [pc, #372]	; (80078b4 <checkAktifCalisma+0x1300>)
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007744:	4b5c      	ldr	r3, [pc, #368]	; (80078b8 <checkAktifCalisma+0x1304>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	3301      	adds	r3, #1
 800774a:	b2da      	uxtb	r2, r3
 800774c:	4b5a      	ldr	r3, [pc, #360]	; (80078b8 <checkAktifCalisma+0x1304>)
 800774e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007750:	4b59      	ldr	r3, [pc, #356]	; (80078b8 <checkAktifCalisma+0x1304>)
 8007752:	781a      	ldrb	r2, [r3, #0]
 8007754:	4b59      	ldr	r3, [pc, #356]	; (80078bc <checkAktifCalisma+0x1308>)
 8007756:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800775a:	4b56      	ldr	r3, [pc, #344]	; (80078b4 <checkAktifCalisma+0x1300>)
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	4b57      	ldr	r3, [pc, #348]	; (80078bc <checkAktifCalisma+0x1308>)
 8007760:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007762:	4b53      	ldr	r3, [pc, #332]	; (80078b0 <checkAktifCalisma+0x12fc>)
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	4b55      	ldr	r3, [pc, #340]	; (80078bc <checkAktifCalisma+0x1308>)
 8007768:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800776a:	4b50      	ldr	r3, [pc, #320]	; (80078ac <checkAktifCalisma+0x12f8>)
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	4b53      	ldr	r3, [pc, #332]	; (80078bc <checkAktifCalisma+0x1308>)
 8007770:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007772:	4b4d      	ldr	r3, [pc, #308]	; (80078a8 <checkAktifCalisma+0x12f4>)
 8007774:	781a      	ldrb	r2, [r3, #0]
 8007776:	4b51      	ldr	r3, [pc, #324]	; (80078bc <checkAktifCalisma+0x1308>)
 8007778:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800777a:	4b51      	ldr	r3, [pc, #324]	; (80078c0 <checkAktifCalisma+0x130c>)
 800777c:	2201      	movs	r2, #1
 800777e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007780:	4b44      	ldr	r3, [pc, #272]	; (8007894 <checkAktifCalisma+0x12e0>)
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007786:	4b47      	ldr	r3, [pc, #284]	; (80078a4 <checkAktifCalisma+0x12f0>)
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800778c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007790:	484c      	ldr	r0, [pc, #304]	; (80078c4 <checkAktifCalisma+0x1310>)
 8007792:	f002 fa7b 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d016      	beq.n	80077ca <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800779c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80077a0:	4848      	ldr	r0, [pc, #288]	; (80078c4 <checkAktifCalisma+0x1310>)
 80077a2:	f002 fa73 	bl	8009c8c <HAL_GPIO_ReadPin>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00e      	beq.n	80077ca <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80077ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077b0:	4844      	ldr	r0, [pc, #272]	; (80078c4 <checkAktifCalisma+0x1310>)
 80077b2:	f002 fa6b 	bl	8009c8c <HAL_GPIO_ReadPin>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d006      	beq.n	80077ca <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80077bc:	2140      	movs	r1, #64	; 0x40
 80077be:	4836      	ldr	r0, [pc, #216]	; (8007898 <checkAktifCalisma+0x12e4>)
 80077c0:	f002 fa64 	bl	8009c8c <HAL_GPIO_ReadPin>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <checkAktifCalisma+0x121e>
			startBasili=1;
 80077ca:	4b3f      	ldr	r3, [pc, #252]	; (80078c8 <checkAktifCalisma+0x1314>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	e002      	b.n	80077d8 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80077d2:	4b3d      	ldr	r3, [pc, #244]	; (80078c8 <checkAktifCalisma+0x1314>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80077d8:	4b3b      	ldr	r3, [pc, #236]	; (80078c8 <checkAktifCalisma+0x1314>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d014      	beq.n	800780a <checkAktifCalisma+0x1256>
 80077e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077e4:	4837      	ldr	r0, [pc, #220]	; (80078c4 <checkAktifCalisma+0x1310>)
 80077e6:	f002 fa51 	bl	8009c8c <HAL_GPIO_ReadPin>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d10c      	bne.n	800780a <checkAktifCalisma+0x1256>
			hataVar=1;
 80077f0:	4b36      	ldr	r3, [pc, #216]	; (80078cc <checkAktifCalisma+0x1318>)
 80077f2:	2201      	movs	r2, #1
 80077f4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80077f6:	2001      	movs	r0, #1
 80077f8:	f7fe f862 	bl	80058c0 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80077fc:	2001      	movs	r0, #1
 80077fe:	f7fe fc27 	bl	8006050 <hata2EEPROM>
			acilstophatasi=1;
 8007802:	4b33      	ldr	r3, [pc, #204]	; (80078d0 <checkAktifCalisma+0x131c>)
 8007804:	2201      	movs	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	e018      	b.n	800783c <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800780a:	4b31      	ldr	r3, [pc, #196]	; (80078d0 <checkAktifCalisma+0x131c>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d014      	beq.n	800783c <checkAktifCalisma+0x1288>
 8007812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007816:	482b      	ldr	r0, [pc, #172]	; (80078c4 <checkAktifCalisma+0x1310>)
 8007818:	f002 fa38 	bl	8009c8c <HAL_GPIO_ReadPin>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10c      	bne.n	800783c <checkAktifCalisma+0x1288>
 8007822:	4b29      	ldr	r3, [pc, #164]	; (80078c8 <checkAktifCalisma+0x1314>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f083 0301 	eor.w	r3, r3, #1
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007830:	4b27      	ldr	r3, [pc, #156]	; (80078d0 <checkAktifCalisma+0x131c>)
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007836:	2001      	movs	r0, #1
 8007838:	f7fd ffee 	bl	8005818 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800783c:	4b25      	ldr	r3, [pc, #148]	; (80078d4 <checkAktifCalisma+0x1320>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f083 0301 	eor.w	r3, r3, #1
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d04c      	beq.n	80078e4 <checkAktifCalisma+0x1330>
 800784a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800784e:	481d      	ldr	r0, [pc, #116]	; (80078c4 <checkAktifCalisma+0x1310>)
 8007850:	f002 fa1c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <checkAktifCalisma+0x12ae>
 800785a:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <checkAktifCalisma+0x1324>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d040      	beq.n	80078e4 <checkAktifCalisma+0x1330>
 8007862:	4b1e      	ldr	r3, [pc, #120]	; (80078dc <checkAktifCalisma+0x1328>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d13c      	bne.n	80078e4 <checkAktifCalisma+0x1330>
			hataVar=1;
 800786a:	4b18      	ldr	r3, [pc, #96]	; (80078cc <checkAktifCalisma+0x1318>)
 800786c:	2201      	movs	r2, #1
 800786e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007870:	2002      	movs	r0, #2
 8007872:	f7fe f825 	bl	80058c0 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007876:	2002      	movs	r0, #2
 8007878:	f7fe fbea 	bl	8006050 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 800787c:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <checkAktifCalisma+0x132c>)
 800787e:	2201      	movs	r2, #1
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e047      	b.n	8007914 <checkAktifCalisma+0x1360>
 8007884:	20000d57 	.word	0x20000d57
 8007888:	20000d56 	.word	0x20000d56
 800788c:	20000d55 	.word	0x20000d55
 8007890:	40010800 	.word	0x40010800
 8007894:	20000d4b 	.word	0x20000d4b
 8007898:	40011000 	.word	0x40011000
 800789c:	20000d12 	.word	0x20000d12
 80078a0:	20000d4e 	.word	0x20000d4e
 80078a4:	20000d4c 	.word	0x20000d4c
 80078a8:	20000d09 	.word	0x20000d09
 80078ac:	20000d0a 	.word	0x20000d0a
 80078b0:	200009b4 	.word	0x200009b4
 80078b4:	200009b5 	.word	0x200009b5
 80078b8:	20000d0b 	.word	0x20000d0b
 80078bc:	20000c38 	.word	0x20000c38
 80078c0:	20000d38 	.word	0x20000d38
 80078c4:	40010c00 	.word	0x40010c00
 80078c8:	20000d5a 	.word	0x20000d5a
 80078cc:	20000d61 	.word	0x20000d61
 80078d0:	20000d5c 	.word	0x20000d5c
 80078d4:	20000d63 	.word	0x20000d63
 80078d8:	20000d6d 	.word	0x20000d6d
 80078dc:	20000d10 	.word	0x20000d10
 80078e0:	20000d5d 	.word	0x20000d5d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80078e4:	4b97      	ldr	r3, [pc, #604]	; (8007b44 <checkAktifCalisma+0x1590>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d013      	beq.n	8007914 <checkAktifCalisma+0x1360>
 80078ec:	4b96      	ldr	r3, [pc, #600]	; (8007b48 <checkAktifCalisma+0x1594>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00f      	beq.n	8007914 <checkAktifCalisma+0x1360>
 80078f4:	4b95      	ldr	r3, [pc, #596]	; (8007b4c <checkAktifCalisma+0x1598>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	f083 0301 	eor.w	r3, r3, #1
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007902:	4b90      	ldr	r3, [pc, #576]	; (8007b44 <checkAktifCalisma+0x1590>)
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007908:	4b91      	ldr	r3, [pc, #580]	; (8007b50 <checkAktifCalisma+0x159c>)
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800790e:	2002      	movs	r0, #2
 8007910:	f7fd ff82 	bl	8005818 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007914:	4b8f      	ldr	r3, [pc, #572]	; (8007b54 <checkAktifCalisma+0x15a0>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d11c      	bne.n	8007956 <checkAktifCalisma+0x13a2>
 800791c:	4b8e      	ldr	r3, [pc, #568]	; (8007b58 <checkAktifCalisma+0x15a4>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d118      	bne.n	8007956 <checkAktifCalisma+0x13a2>
 8007924:	4b8d      	ldr	r3, [pc, #564]	; (8007b5c <checkAktifCalisma+0x15a8>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d014      	beq.n	8007956 <checkAktifCalisma+0x13a2>
 800792c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007930:	488b      	ldr	r0, [pc, #556]	; (8007b60 <checkAktifCalisma+0x15ac>)
 8007932:	f002 f9ab 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007936:	4603      	mov	r3, r0
 8007938:	2b01      	cmp	r3, #1
 800793a:	d10c      	bne.n	8007956 <checkAktifCalisma+0x13a2>
			hataVar=1;
 800793c:	4b89      	ldr	r3, [pc, #548]	; (8007b64 <checkAktifCalisma+0x15b0>)
 800793e:	2201      	movs	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007942:	2003      	movs	r0, #3
 8007944:	f7fd ffbc 	bl	80058c0 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007948:	2003      	movs	r0, #3
 800794a:	f7fe fb81 	bl	8006050 <hata2EEPROM>
			basinchatasi=1;
 800794e:	4b86      	ldr	r3, [pc, #536]	; (8007b68 <checkAktifCalisma+0x15b4>)
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	e015      	b.n	8007982 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007956:	4b84      	ldr	r3, [pc, #528]	; (8007b68 <checkAktifCalisma+0x15b4>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d011      	beq.n	8007982 <checkAktifCalisma+0x13ce>
 800795e:	4b7d      	ldr	r3, [pc, #500]	; (8007b54 <checkAktifCalisma+0x15a0>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d10d      	bne.n	8007982 <checkAktifCalisma+0x13ce>
 8007966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800796a:	4880      	ldr	r0, [pc, #512]	; (8007b6c <checkAktifCalisma+0x15b8>)
 800796c:	f002 f98e 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007970:	4603      	mov	r3, r0
 8007972:	2b01      	cmp	r3, #1
 8007974:	d105      	bne.n	8007982 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007976:	4b7c      	ldr	r3, [pc, #496]	; (8007b68 <checkAktifCalisma+0x15b4>)
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800797c:	2003      	movs	r0, #3
 800797e:	f7fd ff4b 	bl	8005818 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007982:	4b7b      	ldr	r3, [pc, #492]	; (8007b70 <checkAktifCalisma+0x15bc>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <checkAktifCalisma+0x13de>
 800798a:	4b7a      	ldr	r3, [pc, #488]	; (8007b74 <checkAktifCalisma+0x15c0>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01c      	beq.n	80079cc <checkAktifCalisma+0x1418>
 8007992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007996:	4878      	ldr	r0, [pc, #480]	; (8007b78 <checkAktifCalisma+0x15c4>)
 8007998:	f002 f978 	bl	8009c8c <HAL_GPIO_ReadPin>
 800799c:	4603      	mov	r3, r0
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d114      	bne.n	80079cc <checkAktifCalisma+0x1418>
 80079a2:	4b76      	ldr	r3, [pc, #472]	; (8007b7c <checkAktifCalisma+0x15c8>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d003      	beq.n	80079b2 <checkAktifCalisma+0x13fe>
 80079aa:	4b74      	ldr	r3, [pc, #464]	; (8007b7c <checkAktifCalisma+0x15c8>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d10c      	bne.n	80079cc <checkAktifCalisma+0x1418>
			hataVar=1;
 80079b2:	4b6c      	ldr	r3, [pc, #432]	; (8007b64 <checkAktifCalisma+0x15b0>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80079b8:	2004      	movs	r0, #4
 80079ba:	f7fd ff81 	bl	80058c0 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80079be:	2004      	movs	r0, #4
 80079c0:	f7fe fb46 	bl	8006050 <hata2EEPROM>
			katkapisivicihatasi=1;
 80079c4:	4b6e      	ldr	r3, [pc, #440]	; (8007b80 <checkAktifCalisma+0x15cc>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	e01f      	b.n	8007a0c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80079cc:	4b6c      	ldr	r3, [pc, #432]	; (8007b80 <checkAktifCalisma+0x15cc>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01b      	beq.n	8007a0c <checkAktifCalisma+0x1458>
 80079d4:	4b6b      	ldr	r3, [pc, #428]	; (8007b84 <checkAktifCalisma+0x15d0>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d017      	beq.n	8007a0c <checkAktifCalisma+0x1458>
 80079dc:	4b64      	ldr	r3, [pc, #400]	; (8007b70 <checkAktifCalisma+0x15bc>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f083 0301 	eor.w	r3, r3, #1
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d010      	beq.n	8007a0c <checkAktifCalisma+0x1458>
 80079ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079ee:	4862      	ldr	r0, [pc, #392]	; (8007b78 <checkAktifCalisma+0x15c4>)
 80079f0:	f002 f94c 	bl	8009c8c <HAL_GPIO_ReadPin>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d108      	bne.n	8007a0c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 80079fa:	4b61      	ldr	r3, [pc, #388]	; (8007b80 <checkAktifCalisma+0x15cc>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007a00:	4b5c      	ldr	r3, [pc, #368]	; (8007b74 <checkAktifCalisma+0x15c0>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007a06:	2004      	movs	r0, #4
 8007a08:	f7fd ff06 	bl	8005818 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007a0c:	4b58      	ldr	r3, [pc, #352]	; (8007b70 <checkAktifCalisma+0x15bc>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <checkAktifCalisma+0x1468>
 8007a14:	4b5c      	ldr	r3, [pc, #368]	; (8007b88 <checkAktifCalisma+0x15d4>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01c      	beq.n	8007a56 <checkAktifCalisma+0x14a2>
 8007a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a20:	4855      	ldr	r0, [pc, #340]	; (8007b78 <checkAktifCalisma+0x15c4>)
 8007a22:	f002 f933 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d114      	bne.n	8007a56 <checkAktifCalisma+0x14a2>
 8007a2c:	4b53      	ldr	r3, [pc, #332]	; (8007b7c <checkAktifCalisma+0x15c8>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d003      	beq.n	8007a3c <checkAktifCalisma+0x1488>
 8007a34:	4b51      	ldr	r3, [pc, #324]	; (8007b7c <checkAktifCalisma+0x15c8>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d10c      	bne.n	8007a56 <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007a3c:	4b49      	ldr	r3, [pc, #292]	; (8007b64 <checkAktifCalisma+0x15b0>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007a42:	2005      	movs	r0, #5
 8007a44:	f7fd ff3c 	bl	80058c0 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007a48:	2005      	movs	r0, #5
 8007a4a:	f7fe fb01 	bl	8006050 <hata2EEPROM>
			tablakapisivicihatasi=1;
 8007a4e:	4b4f      	ldr	r3, [pc, #316]	; (8007b8c <checkAktifCalisma+0x15d8>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	701a      	strb	r2, [r3, #0]
 8007a54:	e023      	b.n	8007a9e <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007a56:	4b4d      	ldr	r3, [pc, #308]	; (8007b8c <checkAktifCalisma+0x15d8>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01f      	beq.n	8007a9e <checkAktifCalisma+0x14ea>
 8007a5e:	4b49      	ldr	r3, [pc, #292]	; (8007b84 <checkAktifCalisma+0x15d0>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01b      	beq.n	8007a9e <checkAktifCalisma+0x14ea>
 8007a66:	4b42      	ldr	r3, [pc, #264]	; (8007b70 <checkAktifCalisma+0x15bc>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f083 0301 	eor.w	r3, r3, #1
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d014      	beq.n	8007a9e <checkAktifCalisma+0x14ea>
 8007a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a78:	483f      	ldr	r0, [pc, #252]	; (8007b78 <checkAktifCalisma+0x15c4>)
 8007a7a:	f002 f907 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10c      	bne.n	8007a9e <checkAktifCalisma+0x14ea>
 8007a84:	4b3f      	ldr	r3, [pc, #252]	; (8007b84 <checkAktifCalisma+0x15d0>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007a8c:	4b3f      	ldr	r3, [pc, #252]	; (8007b8c <checkAktifCalisma+0x15d8>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007a92:	4b3d      	ldr	r3, [pc, #244]	; (8007b88 <checkAktifCalisma+0x15d4>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007a98:	2005      	movs	r0, #5
 8007a9a:	f7fd febd 	bl	8005818 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007a9e:	4b2f      	ldr	r3, [pc, #188]	; (8007b5c <checkAktifCalisma+0x15a8>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d107      	bne.n	8007ab6 <checkAktifCalisma+0x1502>
 8007aa6:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <checkAktifCalisma+0x1598>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <checkAktifCalisma+0x1502>
 8007aae:	4b38      	ldr	r3, [pc, #224]	; (8007b90 <checkAktifCalisma+0x15dc>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d014      	beq.n	8007ae0 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007ab6:	4b37      	ldr	r3, [pc, #220]	; (8007b94 <checkAktifCalisma+0x15e0>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4b37      	ldr	r3, [pc, #220]	; (8007b98 <checkAktifCalisma+0x15e4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	4a36      	ldr	r2, [pc, #216]	; (8007b9c <checkAktifCalisma+0x15e8>)
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d30b      	bcc.n	8007ae0 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007ac8:	4b26      	ldr	r3, [pc, #152]	; (8007b64 <checkAktifCalisma+0x15b0>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007ace:	2006      	movs	r0, #6
 8007ad0:	f7fd fef6 	bl	80058c0 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007ad4:	2006      	movs	r0, #6
 8007ad6:	f7fe fabb 	bl	8006050 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007ada:	4b31      	ldr	r3, [pc, #196]	; (8007ba0 <checkAktifCalisma+0x15ec>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007ae0:	4b2f      	ldr	r3, [pc, #188]	; (8007ba0 <checkAktifCalisma+0x15ec>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d013      	beq.n	8007b10 <checkAktifCalisma+0x155c>
 8007ae8:	2108      	movs	r1, #8
 8007aea:	4823      	ldr	r0, [pc, #140]	; (8007b78 <checkAktifCalisma+0x15c4>)
 8007aec:	f002 f8ce 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <checkAktifCalisma+0x155c>
 8007af6:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <checkAktifCalisma+0x15bc>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f083 0301 	eor.w	r3, r3, #1
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007b04:	4b26      	ldr	r3, [pc, #152]	; (8007ba0 <checkAktifCalisma+0x15ec>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007b0a:	2006      	movs	r0, #6
 8007b0c:	f7fd fe84 	bl	8005818 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007b10:	4b24      	ldr	r3, [pc, #144]	; (8007ba4 <checkAktifCalisma+0x15f0>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10b      	bne.n	8007b30 <checkAktifCalisma+0x157c>
 8007b18:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <checkAktifCalisma+0x1598>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d107      	bne.n	8007b30 <checkAktifCalisma+0x157c>
 8007b20:	4b21      	ldr	r3, [pc, #132]	; (8007ba8 <checkAktifCalisma+0x15f4>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <checkAktifCalisma+0x157c>
 8007b28:	4b19      	ldr	r3, [pc, #100]	; (8007b90 <checkAktifCalisma+0x15dc>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d03f      	beq.n	8007bb0 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007b30:	4b1e      	ldr	r3, [pc, #120]	; (8007bac <checkAktifCalisma+0x15f8>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <checkAktifCalisma+0x15c0>)
 8007b38:	2201      	movs	r2, #1
 8007b3a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007b3c:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <checkAktifCalisma+0x15d4>)
 8007b3e:	2201      	movs	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e03c      	b.n	8007bbe <checkAktifCalisma+0x160a>
 8007b44:	20000d5d 	.word	0x20000d5d
 8007b48:	20000d63 	.word	0x20000d63
 8007b4c:	20000d44 	.word	0x20000d44
 8007b50:	20000d6d 	.word	0x20000d6d
 8007b54:	20000d0f 	.word	0x20000d0f
 8007b58:	20000d13 	.word	0x20000d13
 8007b5c:	20000d60 	.word	0x20000d60
 8007b60:	40011000 	.word	0x40011000
 8007b64:	20000d61 	.word	0x20000d61
 8007b68:	20000d6a 	.word	0x20000d6a
 8007b6c:	40010c00 	.word	0x40010c00
 8007b70:	20000d5a 	.word	0x20000d5a
 8007b74:	20000d6e 	.word	0x20000d6e
 8007b78:	40010800 	.word	0x40010800
 8007b7c:	20000d14 	.word	0x20000d14
 8007b80:	20000d6b 	.word	0x20000d6b
 8007b84:	20000d4e 	.word	0x20000d4e
 8007b88:	20000d6f 	.word	0x20000d6f
 8007b8c:	20000d6c 	.word	0x20000d6c
 8007b90:	20000d43 	.word	0x20000d43
 8007b94:	20000cb4 	.word	0x20000cb4
 8007b98:	20000cc8 	.word	0x20000cc8
 8007b9c:	20000d24 	.word	0x20000d24
 8007ba0:	20000d5b 	.word	0x20000d5b
 8007ba4:	20000d41 	.word	0x20000d41
 8007ba8:	20000d42 	.word	0x20000d42
 8007bac:	20000d62 	.word	0x20000d62
		} else {
			makineCalisiyor=1;
 8007bb0:	4b1e      	ldr	r3, [pc, #120]	; (8007c2c <checkAktifCalisma+0x1678>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007bb6:	4b1e      	ldr	r3, [pc, #120]	; (8007c30 <checkAktifCalisma+0x167c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1e      	ldr	r2, [pc, #120]	; (8007c34 <checkAktifCalisma+0x1680>)
 8007bbc:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007bbe:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <checkAktifCalisma+0x1684>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d02f      	beq.n	8007c26 <checkAktifCalisma+0x1672>
 8007bc6:	4b1d      	ldr	r3, [pc, #116]	; (8007c3c <checkAktifCalisma+0x1688>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f083 0301 	eor.w	r3, r3, #1
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d028      	beq.n	8007c26 <checkAktifCalisma+0x1672>
 8007bd4:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <checkAktifCalisma+0x168c>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f083 0301 	eor.w	r3, r3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d021      	beq.n	8007c26 <checkAktifCalisma+0x1672>
 8007be2:	4b18      	ldr	r3, [pc, #96]	; (8007c44 <checkAktifCalisma+0x1690>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f083 0301 	eor.w	r3, r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01a      	beq.n	8007c26 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007bf0:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <checkAktifCalisma+0x1694>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f083 0301 	eor.w	r3, r3, #1
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d013      	beq.n	8007c26 <checkAktifCalisma+0x1672>
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <checkAktifCalisma+0x1698>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f083 0301 	eor.w	r3, r3, #1
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00c      	beq.n	8007c26 <checkAktifCalisma+0x1672>
 8007c0c:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <checkAktifCalisma+0x169c>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f083 0301 	eor.w	r3, r3, #1
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <checkAktifCalisma+0x1684>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007c20:	2007      	movs	r0, #7
 8007c22:	f7fd fdf9 	bl	8005818 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007c26:	bf00      	nop
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000d62 	.word	0x20000d62
 8007c30:	20000cb4 	.word	0x20000cb4
 8007c34:	20000cc8 	.word	0x20000cc8
 8007c38:	20000d61 	.word	0x20000d61
 8007c3c:	20000d5c 	.word	0x20000d5c
 8007c40:	20000d5d 	.word	0x20000d5d
 8007c44:	20000d6a 	.word	0x20000d6a
 8007c48:	20000d6b 	.word	0x20000d6b
 8007c4c:	20000d6c 	.word	0x20000d6c
 8007c50:	20000d5b 	.word	0x20000d5b

08007c54 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007c58:	4b8b      	ldr	r3, [pc, #556]	; (8007e88 <checkDemoModCalisma+0x234>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	f040 8229 	bne.w	80080b4 <checkDemoModCalisma+0x460>
 8007c62:	4b8a      	ldr	r3, [pc, #552]	; (8007e8c <checkDemoModCalisma+0x238>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 8224 	beq.w	80080b4 <checkDemoModCalisma+0x460>
 8007c6c:	4b88      	ldr	r3, [pc, #544]	; (8007e90 <checkDemoModCalisma+0x23c>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f040 821f 	bne.w	80080b4 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007c76:	2102      	movs	r1, #2
 8007c78:	4886      	ldr	r0, [pc, #536]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007c7a:	f002 f807 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d11d      	bne.n	8007cc0 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007c84:	4b84      	ldr	r3, [pc, #528]	; (8007e98 <checkDemoModCalisma+0x244>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f083 0301 	eor.w	r3, r3, #1
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d016      	beq.n	8007cc0 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007c92:	4b82      	ldr	r3, [pc, #520]	; (8007e9c <checkDemoModCalisma+0x248>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	f083 0301 	eor.w	r3, r3, #1
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00f      	beq.n	8007cc0 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007ca0:	4b7f      	ldr	r3, [pc, #508]	; (8007ea0 <checkDemoModCalisma+0x24c>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	f083 0301 	eor.w	r3, r3, #1
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007cae:	2201      	movs	r2, #1
 8007cb0:	2104      	movs	r1, #4
 8007cb2:	487c      	ldr	r0, [pc, #496]	; (8007ea4 <checkDemoModCalisma+0x250>)
 8007cb4:	f002 f801 	bl	8009cba <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007cb8:	4b7b      	ldr	r3, [pc, #492]	; (8007ea8 <checkDemoModCalisma+0x254>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e00e      	b.n	8007cde <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	4874      	ldr	r0, [pc, #464]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007cc4:	f001 ffe2 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d107      	bne.n	8007cde <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2104      	movs	r1, #4
 8007cd2:	4874      	ldr	r0, [pc, #464]	; (8007ea4 <checkDemoModCalisma+0x250>)
 8007cd4:	f001 fff1 	bl	8009cba <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007cd8:	4b73      	ldr	r3, [pc, #460]	; (8007ea8 <checkDemoModCalisma+0x254>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007cde:	4b72      	ldr	r3, [pc, #456]	; (8007ea8 <checkDemoModCalisma+0x254>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <checkDemoModCalisma+0xaa>
 8007ce6:	4b6d      	ldr	r3, [pc, #436]	; (8007e9c <checkDemoModCalisma+0x248>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d107      	bne.n	8007cfe <checkDemoModCalisma+0xaa>
 8007cee:	4b6c      	ldr	r3, [pc, #432]	; (8007ea0 <checkDemoModCalisma+0x24c>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d103      	bne.n	8007cfe <checkDemoModCalisma+0xaa>
 8007cf6:	4b68      	ldr	r3, [pc, #416]	; (8007e98 <checkDemoModCalisma+0x244>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00c      	beq.n	8007d18 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d04:	4867      	ldr	r0, [pc, #412]	; (8007ea4 <checkDemoModCalisma+0x250>)
 8007d06:	f001 ffd8 	bl	8009cba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d10:	4864      	ldr	r0, [pc, #400]	; (8007ea4 <checkDemoModCalisma+0x250>)
 8007d12:	f001 ffd2 	bl	8009cba <HAL_GPIO_WritePin>
 8007d16:	e00b      	b.n	8007d30 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d1e:	4861      	ldr	r0, [pc, #388]	; (8007ea4 <checkDemoModCalisma+0x250>)
 8007d20:	f001 ffcb 	bl	8009cba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007d24:	2200      	movs	r2, #0
 8007d26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d2a:	485e      	ldr	r0, [pc, #376]	; (8007ea4 <checkDemoModCalisma+0x250>)
 8007d2c:	f001 ffc5 	bl	8009cba <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007d30:	2102      	movs	r1, #2
 8007d32:	4858      	ldr	r0, [pc, #352]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007d34:	f001 ffaa 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d10d      	bne.n	8007d5a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d42:	4854      	ldr	r0, [pc, #336]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007d44:	f001 ffa2 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007d4e:	4b56      	ldr	r3, [pc, #344]	; (8007ea8 <checkDemoModCalisma+0x254>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f083 0301 	eor.w	r3, r3, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007d5a:	2102      	movs	r1, #2
 8007d5c:	484d      	ldr	r0, [pc, #308]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007d5e:	f001 ff95 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d125      	bne.n	8007db4 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d6c:	4849      	ldr	r0, [pc, #292]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007d6e:	f001 ff8d 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11d      	bne.n	8007db4 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007d78:	4b4b      	ldr	r3, [pc, #300]	; (8007ea8 <checkDemoModCalisma+0x254>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f083 0301 	eor.w	r3, r3, #1
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d016      	beq.n	8007db4 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007d86:	4b44      	ldr	r3, [pc, #272]	; (8007e98 <checkDemoModCalisma+0x244>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f083 0301 	eor.w	r3, r3, #1
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00f      	beq.n	8007db4 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007d94:	4b42      	ldr	r3, [pc, #264]	; (8007ea0 <checkDemoModCalisma+0x24c>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f083 0301 	eor.w	r3, r3, #1
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d008      	beq.n	8007db4 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007da2:	2201      	movs	r2, #1
 8007da4:	2120      	movs	r1, #32
 8007da6:	483b      	ldr	r0, [pc, #236]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007da8:	f001 ff87 	bl	8009cba <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007dac:	4b3b      	ldr	r3, [pc, #236]	; (8007e9c <checkDemoModCalisma+0x248>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	e007      	b.n	8007dc4 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007db4:	2200      	movs	r2, #0
 8007db6:	2120      	movs	r1, #32
 8007db8:	4836      	ldr	r0, [pc, #216]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007dba:	f001 ff7e 	bl	8009cba <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007dbe:	4b37      	ldr	r3, [pc, #220]	; (8007e9c <checkDemoModCalisma+0x248>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007dc4:	2102      	movs	r1, #2
 8007dc6:	4833      	ldr	r0, [pc, #204]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007dc8:	f001 ff60 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d125      	bne.n	8007e1e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007dd6:	482f      	ldr	r0, [pc, #188]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007dd8:	f001 ff58 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d11d      	bne.n	8007e1e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007de2:	4b31      	ldr	r3, [pc, #196]	; (8007ea8 <checkDemoModCalisma+0x254>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f083 0301 	eor.w	r3, r3, #1
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d016      	beq.n	8007e1e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007df0:	4b2a      	ldr	r3, [pc, #168]	; (8007e9c <checkDemoModCalisma+0x248>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f083 0301 	eor.w	r3, r3, #1
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00f      	beq.n	8007e1e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007dfe:	4b26      	ldr	r3, [pc, #152]	; (8007e98 <checkDemoModCalisma+0x244>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f083 0301 	eor.w	r3, r3, #1
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	2110      	movs	r1, #16
 8007e10:	4820      	ldr	r0, [pc, #128]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007e12:	f001 ff52 	bl	8009cba <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <checkDemoModCalisma+0x24c>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	701a      	strb	r2, [r3, #0]
 8007e1c:	e007      	b.n	8007e2e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2110      	movs	r1, #16
 8007e22:	481c      	ldr	r0, [pc, #112]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007e24:	f001 ff49 	bl	8009cba <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007e28:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <checkDemoModCalisma+0x24c>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007e2e:	2104      	movs	r1, #4
 8007e30:	4818      	ldr	r0, [pc, #96]	; (8007e94 <checkDemoModCalisma+0x240>)
 8007e32:	f001 ff2b 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d139      	bne.n	8007eb0 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007e3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ea8 <checkDemoModCalisma+0x254>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f083 0301 	eor.w	r3, r3, #1
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d032      	beq.n	8007eb0 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007e4a:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <checkDemoModCalisma+0x24c>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	f083 0301 	eor.w	r3, r3, #1
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d02b      	beq.n	8007eb0 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007e58:	4b10      	ldr	r3, [pc, #64]	; (8007e9c <checkDemoModCalisma+0x248>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f083 0301 	eor.w	r3, r3, #1
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d024      	beq.n	8007eb0 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007e66:	2201      	movs	r2, #1
 8007e68:	2102      	movs	r1, #2
 8007e6a:	480e      	ldr	r0, [pc, #56]	; (8007ea4 <checkDemoModCalisma+0x250>)
 8007e6c:	f001 ff25 	bl	8009cba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007e70:	2201      	movs	r2, #1
 8007e72:	2101      	movs	r1, #1
 8007e74:	480b      	ldr	r0, [pc, #44]	; (8007ea4 <checkDemoModCalisma+0x250>)
 8007e76:	f001 ff20 	bl	8009cba <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007e7a:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <checkDemoModCalisma+0x244>)
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007e80:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <checkDemoModCalisma+0x258>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	e027      	b.n	8007ed8 <checkDemoModCalisma+0x284>
 8007e88:	20000d2a 	.word	0x20000d2a
 8007e8c:	20000d5e 	.word	0x20000d5e
 8007e90:	20000d29 	.word	0x20000d29
 8007e94:	40011000 	.word	0x40011000
 8007e98:	20000d65 	.word	0x20000d65
 8007e9c:	20000d66 	.word	0x20000d66
 8007ea0:	20000d67 	.word	0x20000d67
 8007ea4:	40010c00 	.word	0x40010c00
 8007ea8:	20000d64 	.word	0x20000d64
 8007eac:	20000d4a 	.word	0x20000d4a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007eb0:	2104      	movs	r1, #4
 8007eb2:	48a0      	ldr	r0, [pc, #640]	; (8008134 <checkDemoModCalisma+0x4e0>)
 8007eb4:	f001 feea 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d10c      	bne.n	8007ed8 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	489d      	ldr	r0, [pc, #628]	; (8008138 <checkDemoModCalisma+0x4e4>)
 8007ec4:	f001 fef9 	bl	8009cba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2101      	movs	r1, #1
 8007ecc:	489a      	ldr	r0, [pc, #616]	; (8008138 <checkDemoModCalisma+0x4e4>)
 8007ece:	f001 fef4 	bl	8009cba <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007ed2:	4b9a      	ldr	r3, [pc, #616]	; (800813c <checkDemoModCalisma+0x4e8>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007ed8:	2104      	movs	r1, #4
 8007eda:	4896      	ldr	r0, [pc, #600]	; (8008134 <checkDemoModCalisma+0x4e0>)
 8007edc:	f001 fed6 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d10d      	bne.n	8007f02 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	2180      	movs	r1, #128	; 0x80
 8007eea:	4895      	ldr	r0, [pc, #596]	; (8008140 <checkDemoModCalisma+0x4ec>)
 8007eec:	f001 fee5 	bl	8009cba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	2120      	movs	r1, #32
 8007ef4:	4892      	ldr	r0, [pc, #584]	; (8008140 <checkDemoModCalisma+0x4ec>)
 8007ef6:	f001 fee0 	bl	8009cba <HAL_GPIO_WritePin>
			timer3 = millis;
 8007efa:	4b92      	ldr	r3, [pc, #584]	; (8008144 <checkDemoModCalisma+0x4f0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a92      	ldr	r2, [pc, #584]	; (8008148 <checkDemoModCalisma+0x4f4>)
 8007f00:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007f02:	4b90      	ldr	r3, [pc, #576]	; (8008144 <checkDemoModCalisma+0x4f0>)
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4b90      	ldr	r3, [pc, #576]	; (8008148 <checkDemoModCalisma+0x4f4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d909      	bls.n	8007f24 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f10:	2200      	movs	r2, #0
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	488a      	ldr	r0, [pc, #552]	; (8008140 <checkDemoModCalisma+0x4ec>)
 8007f16:	f001 fed0 	bl	8009cba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2120      	movs	r1, #32
 8007f1e:	4888      	ldr	r0, [pc, #544]	; (8008140 <checkDemoModCalisma+0x4ec>)
 8007f20:	f001 fecb 	bl	8009cba <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007f24:	2102      	movs	r1, #2
 8007f26:	4883      	ldr	r0, [pc, #524]	; (8008134 <checkDemoModCalisma+0x4e0>)
 8007f28:	f001 feb0 	bl	8009c8c <HAL_GPIO_ReadPin>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d108      	bne.n	8007f44 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007f32:	2201      	movs	r2, #1
 8007f34:	2140      	movs	r1, #64	; 0x40
 8007f36:	4882      	ldr	r0, [pc, #520]	; (8008140 <checkDemoModCalisma+0x4ec>)
 8007f38:	f001 febf 	bl	8009cba <HAL_GPIO_WritePin>
			timer3 = millis;
 8007f3c:	4b81      	ldr	r3, [pc, #516]	; (8008144 <checkDemoModCalisma+0x4f0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a81      	ldr	r2, [pc, #516]	; (8008148 <checkDemoModCalisma+0x4f4>)
 8007f42:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007f44:	4b7f      	ldr	r3, [pc, #508]	; (8008144 <checkDemoModCalisma+0x4f0>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	4b7f      	ldr	r3, [pc, #508]	; (8008148 <checkDemoModCalisma+0x4f4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d904      	bls.n	8007f5c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f52:	2200      	movs	r2, #0
 8007f54:	2140      	movs	r1, #64	; 0x40
 8007f56:	487a      	ldr	r0, [pc, #488]	; (8008140 <checkDemoModCalisma+0x4ec>)
 8007f58:	f001 feaf 	bl	8009cba <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007f5c:	4b7b      	ldr	r3, [pc, #492]	; (800814c <checkDemoModCalisma+0x4f8>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d058      	beq.n	8008016 <checkDemoModCalisma+0x3c2>
 8007f64:	4b7a      	ldr	r3, [pc, #488]	; (8008150 <checkDemoModCalisma+0x4fc>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d054      	beq.n	8008016 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007f6c:	4b79      	ldr	r3, [pc, #484]	; (8008154 <checkDemoModCalisma+0x500>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	4b77      	ldr	r3, [pc, #476]	; (8008154 <checkDemoModCalisma+0x500>)
 8007f76:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007f78:	4b76      	ldr	r3, [pc, #472]	; (8008154 <checkDemoModCalisma+0x500>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b09      	cmp	r3, #9
 8007f7e:	d908      	bls.n	8007f92 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007f80:	4b74      	ldr	r3, [pc, #464]	; (8008154 <checkDemoModCalisma+0x500>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007f86:	4b74      	ldr	r3, [pc, #464]	; (8008158 <checkDemoModCalisma+0x504>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	4b72      	ldr	r3, [pc, #456]	; (8008158 <checkDemoModCalisma+0x504>)
 8007f90:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007f92:	4b71      	ldr	r3, [pc, #452]	; (8008158 <checkDemoModCalisma+0x504>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b09      	cmp	r3, #9
 8007f98:	d908      	bls.n	8007fac <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007f9a:	4b6f      	ldr	r3, [pc, #444]	; (8008158 <checkDemoModCalisma+0x504>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007fa0:	4b6e      	ldr	r3, [pc, #440]	; (800815c <checkDemoModCalisma+0x508>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	4b6c      	ldr	r3, [pc, #432]	; (800815c <checkDemoModCalisma+0x508>)
 8007faa:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007fac:	4b6b      	ldr	r3, [pc, #428]	; (800815c <checkDemoModCalisma+0x508>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b09      	cmp	r3, #9
 8007fb2:	d908      	bls.n	8007fc6 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007fb4:	4b69      	ldr	r3, [pc, #420]	; (800815c <checkDemoModCalisma+0x508>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007fba:	4b69      	ldr	r3, [pc, #420]	; (8008160 <checkDemoModCalisma+0x50c>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	4b67      	ldr	r3, [pc, #412]	; (8008160 <checkDemoModCalisma+0x50c>)
 8007fc4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007fc6:	4b66      	ldr	r3, [pc, #408]	; (8008160 <checkDemoModCalisma+0x50c>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d908      	bls.n	8007fe0 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007fce:	4b64      	ldr	r3, [pc, #400]	; (8008160 <checkDemoModCalisma+0x50c>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007fd4:	4b63      	ldr	r3, [pc, #396]	; (8008164 <checkDemoModCalisma+0x510>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	4b61      	ldr	r3, [pc, #388]	; (8008164 <checkDemoModCalisma+0x510>)
 8007fde:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007fe0:	4b60      	ldr	r3, [pc, #384]	; (8008164 <checkDemoModCalisma+0x510>)
 8007fe2:	781a      	ldrb	r2, [r3, #0]
 8007fe4:	4b60      	ldr	r3, [pc, #384]	; (8008168 <checkDemoModCalisma+0x514>)
 8007fe6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007fea:	4b5d      	ldr	r3, [pc, #372]	; (8008160 <checkDemoModCalisma+0x50c>)
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	4b5e      	ldr	r3, [pc, #376]	; (8008168 <checkDemoModCalisma+0x514>)
 8007ff0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007ff2:	4b5a      	ldr	r3, [pc, #360]	; (800815c <checkDemoModCalisma+0x508>)
 8007ff4:	781a      	ldrb	r2, [r3, #0]
 8007ff6:	4b5c      	ldr	r3, [pc, #368]	; (8008168 <checkDemoModCalisma+0x514>)
 8007ff8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007ffa:	4b57      	ldr	r3, [pc, #348]	; (8008158 <checkDemoModCalisma+0x504>)
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	4b5a      	ldr	r3, [pc, #360]	; (8008168 <checkDemoModCalisma+0x514>)
 8008000:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8008002:	4b54      	ldr	r3, [pc, #336]	; (8008154 <checkDemoModCalisma+0x500>)
 8008004:	781a      	ldrb	r2, [r3, #0]
 8008006:	4b58      	ldr	r3, [pc, #352]	; (8008168 <checkDemoModCalisma+0x514>)
 8008008:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800800a:	4b58      	ldr	r3, [pc, #352]	; (800816c <checkDemoModCalisma+0x518>)
 800800c:	2201      	movs	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8008010:	4b4f      	ldr	r3, [pc, #316]	; (8008150 <checkDemoModCalisma+0x4fc>)
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8008016:	4b56      	ldr	r3, [pc, #344]	; (8008170 <checkDemoModCalisma+0x51c>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f040 8087 	bne.w	800812e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8008020:	4a54      	ldr	r2, [pc, #336]	; (8008174 <checkDemoModCalisma+0x520>)
 8008022:	2101      	movs	r1, #1
 8008024:	2002      	movs	r0, #2
 8008026:	f7f8 fb1f 	bl	8000668 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800802a:	4a53      	ldr	r2, [pc, #332]	; (8008178 <checkDemoModCalisma+0x524>)
 800802c:	2101      	movs	r1, #1
 800802e:	2001      	movs	r0, #1
 8008030:	f7f8 fb1a 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8008034:	4b4b      	ldr	r3, [pc, #300]	; (8008164 <checkDemoModCalisma+0x510>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	220a      	movs	r2, #10
 800803a:	4950      	ldr	r1, [pc, #320]	; (800817c <checkDemoModCalisma+0x528>)
 800803c:	4618      	mov	r0, r3
 800803e:	f004 fe51 	bl	800cce4 <itoa>
			lcd_print(2,12,snum);
 8008042:	4a4e      	ldr	r2, [pc, #312]	; (800817c <checkDemoModCalisma+0x528>)
 8008044:	210c      	movs	r1, #12
 8008046:	2002      	movs	r0, #2
 8008048:	f7f8 fb0e 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 800804c:	4b44      	ldr	r3, [pc, #272]	; (8008160 <checkDemoModCalisma+0x50c>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	220a      	movs	r2, #10
 8008052:	494a      	ldr	r1, [pc, #296]	; (800817c <checkDemoModCalisma+0x528>)
 8008054:	4618      	mov	r0, r3
 8008056:	f004 fe45 	bl	800cce4 <itoa>
			lcd_print(2,13,snum);
 800805a:	4a48      	ldr	r2, [pc, #288]	; (800817c <checkDemoModCalisma+0x528>)
 800805c:	210d      	movs	r1, #13
 800805e:	2002      	movs	r0, #2
 8008060:	f7f8 fb02 	bl	8000668 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8008064:	4b3d      	ldr	r3, [pc, #244]	; (800815c <checkDemoModCalisma+0x508>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	220a      	movs	r2, #10
 800806a:	4944      	ldr	r1, [pc, #272]	; (800817c <checkDemoModCalisma+0x528>)
 800806c:	4618      	mov	r0, r3
 800806e:	f004 fe39 	bl	800cce4 <itoa>
			lcd_print(2,14,snum);
 8008072:	4a42      	ldr	r2, [pc, #264]	; (800817c <checkDemoModCalisma+0x528>)
 8008074:	210e      	movs	r1, #14
 8008076:	2002      	movs	r0, #2
 8008078:	f7f8 faf6 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800807c:	4b36      	ldr	r3, [pc, #216]	; (8008158 <checkDemoModCalisma+0x504>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	220a      	movs	r2, #10
 8008082:	493e      	ldr	r1, [pc, #248]	; (800817c <checkDemoModCalisma+0x528>)
 8008084:	4618      	mov	r0, r3
 8008086:	f004 fe2d 	bl	800cce4 <itoa>
			lcd_print(2,15,snum);
 800808a:	4a3c      	ldr	r2, [pc, #240]	; (800817c <checkDemoModCalisma+0x528>)
 800808c:	210f      	movs	r1, #15
 800808e:	2002      	movs	r0, #2
 8008090:	f7f8 faea 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8008094:	4b2f      	ldr	r3, [pc, #188]	; (8008154 <checkDemoModCalisma+0x500>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	220a      	movs	r2, #10
 800809a:	4938      	ldr	r1, [pc, #224]	; (800817c <checkDemoModCalisma+0x528>)
 800809c:	4618      	mov	r0, r3
 800809e:	f004 fe21 	bl	800cce4 <itoa>
			lcd_print(2,16,snum);
 80080a2:	4a36      	ldr	r2, [pc, #216]	; (800817c <checkDemoModCalisma+0x528>)
 80080a4:	2110      	movs	r1, #16
 80080a6:	2002      	movs	r0, #2
 80080a8:	f7f8 fade 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 80080ac:	4b34      	ldr	r3, [pc, #208]	; (8008180 <checkDemoModCalisma+0x52c>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80080b2:	e03c      	b.n	800812e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80080b4:	4b33      	ldr	r3, [pc, #204]	; (8008184 <checkDemoModCalisma+0x530>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d003      	beq.n	80080c4 <checkDemoModCalisma+0x470>
 80080bc:	4b2c      	ldr	r3, [pc, #176]	; (8008170 <checkDemoModCalisma+0x51c>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d134      	bne.n	800812e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80080c4:	2200      	movs	r2, #0
 80080c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080ca:	481b      	ldr	r0, [pc, #108]	; (8008138 <checkDemoModCalisma+0x4e4>)
 80080cc:	f001 fdf5 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80080d0:	2200      	movs	r2, #0
 80080d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080d6:	4818      	ldr	r0, [pc, #96]	; (8008138 <checkDemoModCalisma+0x4e4>)
 80080d8:	f001 fdef 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80080dc:	2200      	movs	r2, #0
 80080de:	2104      	movs	r1, #4
 80080e0:	4815      	ldr	r0, [pc, #84]	; (8008138 <checkDemoModCalisma+0x4e4>)
 80080e2:	f001 fdea 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80080e6:	2200      	movs	r2, #0
 80080e8:	2102      	movs	r1, #2
 80080ea:	4813      	ldr	r0, [pc, #76]	; (8008138 <checkDemoModCalisma+0x4e4>)
 80080ec:	f001 fde5 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80080f0:	2200      	movs	r2, #0
 80080f2:	2101      	movs	r1, #1
 80080f4:	4810      	ldr	r0, [pc, #64]	; (8008138 <checkDemoModCalisma+0x4e4>)
 80080f6:	f001 fde0 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80080fa:	2200      	movs	r2, #0
 80080fc:	2120      	movs	r1, #32
 80080fe:	480d      	ldr	r0, [pc, #52]	; (8008134 <checkDemoModCalisma+0x4e0>)
 8008100:	f001 fddb 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008104:	2200      	movs	r2, #0
 8008106:	2110      	movs	r1, #16
 8008108:	480a      	ldr	r0, [pc, #40]	; (8008134 <checkDemoModCalisma+0x4e0>)
 800810a:	f001 fdd6 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800810e:	2200      	movs	r2, #0
 8008110:	2180      	movs	r1, #128	; 0x80
 8008112:	480b      	ldr	r0, [pc, #44]	; (8008140 <checkDemoModCalisma+0x4ec>)
 8008114:	f001 fdd1 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008118:	2200      	movs	r2, #0
 800811a:	2140      	movs	r1, #64	; 0x40
 800811c:	4808      	ldr	r0, [pc, #32]	; (8008140 <checkDemoModCalisma+0x4ec>)
 800811e:	f001 fdcc 	bl	8009cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008122:	2200      	movs	r2, #0
 8008124:	2120      	movs	r1, #32
 8008126:	4806      	ldr	r0, [pc, #24]	; (8008140 <checkDemoModCalisma+0x4ec>)
 8008128:	f001 fdc7 	bl	8009cba <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800812c:	e7ff      	b.n	800812e <checkDemoModCalisma+0x4da>
 800812e:	bf00      	nop
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	40011000 	.word	0x40011000
 8008138:	40010c00 	.word	0x40010c00
 800813c:	20000d65 	.word	0x20000d65
 8008140:	40010800 	.word	0x40010800
 8008144:	20000cb4 	.word	0x20000cb4
 8008148:	20000cc4 	.word	0x20000cc4
 800814c:	20000d64 	.word	0x20000d64
 8008150:	20000d4a 	.word	0x20000d4a
 8008154:	20000d09 	.word	0x20000d09
 8008158:	20000d0a 	.word	0x20000d0a
 800815c:	200009b4 	.word	0x200009b4
 8008160:	200009b5 	.word	0x200009b5
 8008164:	20000d0b 	.word	0x20000d0b
 8008168:	20000c38 	.word	0x20000c38
 800816c:	20000d38 	.word	0x20000d38
 8008170:	20000d29 	.word	0x20000d29
 8008174:	0800e500 	.word	0x0800e500
 8008178:	0800e50c 	.word	0x0800e50c
 800817c:	20000cac 	.word	0x20000cac
 8008180:	20000d40 	.word	0x20000d40
 8008184:	20000d2a 	.word	0x20000d2a

08008188 <mergeData>:

char* mergeData() {
 8008188:	b580      	push	{r7, lr}
 800818a:	b09e      	sub	sp, #120	; 0x78
 800818c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800818e:	2300      	movs	r3, #0
 8008190:	643b      	str	r3, [r7, #64]	; 0x40
 8008192:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008196:	2229      	movs	r2, #41	; 0x29
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f004 feba 	bl	800cf14 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80081a0:	4b6a      	ldr	r3, [pc, #424]	; (800834c <mergeData+0x1c4>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	713b      	strb	r3, [r7, #4]
 80081a6:	4b6a      	ldr	r3, [pc, #424]	; (8008350 <mergeData+0x1c8>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	717b      	strb	r3, [r7, #5]
 80081ac:	4b69      	ldr	r3, [pc, #420]	; (8008354 <mergeData+0x1cc>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	71bb      	strb	r3, [r7, #6]
 80081b2:	4b69      	ldr	r3, [pc, #420]	; (8008358 <mergeData+0x1d0>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	71fb      	strb	r3, [r7, #7]
 80081b8:	4b68      	ldr	r3, [pc, #416]	; (800835c <mergeData+0x1d4>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	723b      	strb	r3, [r7, #8]
 80081be:	4b68      	ldr	r3, [pc, #416]	; (8008360 <mergeData+0x1d8>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	727b      	strb	r3, [r7, #9]
 80081c4:	4b67      	ldr	r3, [pc, #412]	; (8008364 <mergeData+0x1dc>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	72bb      	strb	r3, [r7, #10]
 80081ca:	4b67      	ldr	r3, [pc, #412]	; (8008368 <mergeData+0x1e0>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	72fb      	strb	r3, [r7, #11]
 80081d0:	4b66      	ldr	r3, [pc, #408]	; (800836c <mergeData+0x1e4>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	733b      	strb	r3, [r7, #12]
 80081d6:	4b66      	ldr	r3, [pc, #408]	; (8008370 <mergeData+0x1e8>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	737b      	strb	r3, [r7, #13]
 80081dc:	4b65      	ldr	r3, [pc, #404]	; (8008374 <mergeData+0x1ec>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	73bb      	strb	r3, [r7, #14]
 80081e2:	4b65      	ldr	r3, [pc, #404]	; (8008378 <mergeData+0x1f0>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	73fb      	strb	r3, [r7, #15]
 80081e8:	4b64      	ldr	r3, [pc, #400]	; (800837c <mergeData+0x1f4>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	743b      	strb	r3, [r7, #16]
 80081ee:	4b64      	ldr	r3, [pc, #400]	; (8008380 <mergeData+0x1f8>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	747b      	strb	r3, [r7, #17]
 80081f4:	4b63      	ldr	r3, [pc, #396]	; (8008384 <mergeData+0x1fc>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	74bb      	strb	r3, [r7, #18]
 80081fa:	4b63      	ldr	r3, [pc, #396]	; (8008388 <mergeData+0x200>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	74fb      	strb	r3, [r7, #19]
 8008200:	4b62      	ldr	r3, [pc, #392]	; (800838c <mergeData+0x204>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	753b      	strb	r3, [r7, #20]
 8008206:	4b62      	ldr	r3, [pc, #392]	; (8008390 <mergeData+0x208>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	757b      	strb	r3, [r7, #21]
 800820c:	4b61      	ldr	r3, [pc, #388]	; (8008394 <mergeData+0x20c>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	75bb      	strb	r3, [r7, #22]
 8008212:	4b61      	ldr	r3, [pc, #388]	; (8008398 <mergeData+0x210>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	75fb      	strb	r3, [r7, #23]
 8008218:	4b60      	ldr	r3, [pc, #384]	; (800839c <mergeData+0x214>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	763b      	strb	r3, [r7, #24]
 800821e:	4b60      	ldr	r3, [pc, #384]	; (80083a0 <mergeData+0x218>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	767b      	strb	r3, [r7, #25]
 8008224:	4b5f      	ldr	r3, [pc, #380]	; (80083a4 <mergeData+0x21c>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	76bb      	strb	r3, [r7, #26]
 800822a:	4b5f      	ldr	r3, [pc, #380]	; (80083a8 <mergeData+0x220>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	76fb      	strb	r3, [r7, #27]
 8008230:	4b5e      	ldr	r3, [pc, #376]	; (80083ac <mergeData+0x224>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	773b      	strb	r3, [r7, #28]
 8008236:	4b5e      	ldr	r3, [pc, #376]	; (80083b0 <mergeData+0x228>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	777b      	strb	r3, [r7, #29]
 800823c:	4b5d      	ldr	r3, [pc, #372]	; (80083b4 <mergeData+0x22c>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	77bb      	strb	r3, [r7, #30]
 8008242:	4b5d      	ldr	r3, [pc, #372]	; (80083b8 <mergeData+0x230>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	77fb      	strb	r3, [r7, #31]
 8008248:	4b5c      	ldr	r3, [pc, #368]	; (80083bc <mergeData+0x234>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f887 3020 	strb.w	r3, [r7, #32]
 8008250:	4b5b      	ldr	r3, [pc, #364]	; (80083c0 <mergeData+0x238>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008258:	4b5a      	ldr	r3, [pc, #360]	; (80083c4 <mergeData+0x23c>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008260:	4b59      	ldr	r3, [pc, #356]	; (80083c8 <mergeData+0x240>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008268:	4b58      	ldr	r3, [pc, #352]	; (80083cc <mergeData+0x244>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8008270:	4b57      	ldr	r3, [pc, #348]	; (80083d0 <mergeData+0x248>)
 8008272:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8008276:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800827a:	4b55      	ldr	r3, [pc, #340]	; (80083d0 <mergeData+0x248>)
 800827c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008280:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8008284:	4b52      	ldr	r3, [pc, #328]	; (80083d0 <mergeData+0x248>)
 8008286:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800828a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800828e:	4b50      	ldr	r3, [pc, #320]	; (80083d0 <mergeData+0x248>)
 8008290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8008294:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8008298:	4b4d      	ldr	r3, [pc, #308]	; (80083d0 <mergeData+0x248>)
 800829a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800829e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80082a2:	4b4b      	ldr	r3, [pc, #300]	; (80083d0 <mergeData+0x248>)
 80082a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80082a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80082ac:	4b48      	ldr	r3, [pc, #288]	; (80083d0 <mergeData+0x248>)
 80082ae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80082b6:	4b46      	ldr	r3, [pc, #280]	; (80083d0 <mergeData+0x248>)
 80082b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80082bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80082c0:	4b43      	ldr	r3, [pc, #268]	; (80083d0 <mergeData+0x248>)
 80082c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80082c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80082ca:	4b41      	ldr	r3, [pc, #260]	; (80083d0 <mergeData+0x248>)
 80082cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80082d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 80082d4:	4b3e      	ldr	r3, [pc, #248]	; (80083d0 <mergeData+0x248>)
 80082d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80082da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80082de:	4b3d      	ldr	r3, [pc, #244]	; (80083d4 <mergeData+0x24c>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80082e6:	2300      	movs	r3, #0
 80082e8:	677b      	str	r3, [r7, #116]	; 0x74
 80082ea:	e015      	b.n	8008318 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 80082ec:	1d3a      	adds	r2, r7, #4
 80082ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f0:	4413      	add	r3, r2
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80082fa:	4937      	ldr	r1, [pc, #220]	; (80083d8 <mergeData+0x250>)
 80082fc:	4618      	mov	r0, r3
 80082fe:	f004 fde9 	bl	800ced4 <siprintf>
	    strcat(combinedString, temp);
 8008302:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008306:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800830a:	4611      	mov	r1, r2
 800830c:	4618      	mov	r0, r3
 800830e:	f004 fe09 	bl	800cf24 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008314:	3301      	adds	r3, #1
 8008316:	677b      	str	r3, [r7, #116]	; 0x74
 8008318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800831a:	2b2c      	cmp	r3, #44	; 0x2c
 800831c:	d9e6      	bls.n	80082ec <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800831e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008322:	4618      	mov	r0, r3
 8008324:	f7f7 ff7e 	bl	8000224 <strlen>
 8008328:	4603      	mov	r3, r0
 800832a:	3301      	adds	r3, #1
 800832c:	4618      	mov	r0, r3
 800832e:	f004 fcdb 	bl	800cce8 <malloc>
 8008332:	4603      	mov	r3, r0
 8008334:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8008336:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800833a:	4619      	mov	r1, r3
 800833c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800833e:	f004 fe3d 	bl	800cfbc <strcpy>
	return result;
 8008342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008344:	4618      	mov	r0, r3
 8008346:	3778      	adds	r7, #120	; 0x78
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20000d1b 	.word	0x20000d1b
 8008350:	20000d0d 	.word	0x20000d0d
 8008354:	20000d10 	.word	0x20000d10
 8008358:	20000d11 	.word	0x20000d11
 800835c:	20000d12 	.word	0x20000d12
 8008360:	20000d19 	.word	0x20000d19
 8008364:	20000d13 	.word	0x20000d13
 8008368:	20000d14 	.word	0x20000d14
 800836c:	20000d18 	.word	0x20000d18
 8008370:	20000d15 	.word	0x20000d15
 8008374:	20000d25 	.word	0x20000d25
 8008378:	20000d16 	.word	0x20000d16
 800837c:	20000d26 	.word	0x20000d26
 8008380:	20000d17 	.word	0x20000d17
 8008384:	20000d27 	.word	0x20000d27
 8008388:	20000d1a 	.word	0x20000d1a
 800838c:	20000d1c 	.word	0x20000d1c
 8008390:	20000d1d 	.word	0x20000d1d
 8008394:	20000d1e 	.word	0x20000d1e
 8008398:	20000d1f 	.word	0x20000d1f
 800839c:	20000d20 	.word	0x20000d20
 80083a0:	20000d21 	.word	0x20000d21
 80083a4:	20000d22 	.word	0x20000d22
 80083a8:	20000d23 	.word	0x20000d23
 80083ac:	20000d24 	.word	0x20000d24
 80083b0:	20000d28 	.word	0x20000d28
 80083b4:	20000d2a 	.word	0x20000d2a
 80083b8:	20000d09 	.word	0x20000d09
 80083bc:	20000d0a 	.word	0x20000d0a
 80083c0:	200009b4 	.word	0x200009b4
 80083c4:	200009b5 	.word	0x200009b5
 80083c8:	20000d0b 	.word	0x20000d0b
 80083cc:	20000d2d 	.word	0x20000d2d
 80083d0:	20000c38 	.word	0x20000c38
 80083d4:	20000940 	.word	0x20000940
 80083d8:	0800e520 	.word	0x0800e520

080083dc <mainLoop>:

void mainLoop() {
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80083e2:	f7fd fffb 	bl	80063dc <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80083e6:	2101      	movs	r1, #1
 80083e8:	48ad      	ldr	r0, [pc, #692]	; (80086a0 <mainLoop+0x2c4>)
 80083ea:	f001 fc4f 	bl	8009c8c <HAL_GPIO_ReadPin>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d136      	bne.n	8008462 <mainLoop+0x86>
 80083f4:	2108      	movs	r1, #8
 80083f6:	48ab      	ldr	r0, [pc, #684]	; (80086a4 <mainLoop+0x2c8>)
 80083f8:	f001 fc48 	bl	8009c8c <HAL_GPIO_ReadPin>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d12f      	bne.n	8008462 <mainLoop+0x86>
 8008402:	2102      	movs	r1, #2
 8008404:	48a6      	ldr	r0, [pc, #664]	; (80086a0 <mainLoop+0x2c4>)
 8008406:	f001 fc41 	bl	8009c8c <HAL_GPIO_ReadPin>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d128      	bne.n	8008462 <mainLoop+0x86>
 8008410:	2104      	movs	r1, #4
 8008412:	48a3      	ldr	r0, [pc, #652]	; (80086a0 <mainLoop+0x2c4>)
 8008414:	f001 fc3a 	bl	8009c8c <HAL_GPIO_ReadPin>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d121      	bne.n	8008462 <mainLoop+0x86>
 800841e:	2108      	movs	r1, #8
 8008420:	489f      	ldr	r0, [pc, #636]	; (80086a0 <mainLoop+0x2c4>)
 8008422:	f001 fc33 	bl	8009c8c <HAL_GPIO_ReadPin>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d11a      	bne.n	8008462 <mainLoop+0x86>
 800842c:	2180      	movs	r1, #128	; 0x80
 800842e:	489d      	ldr	r0, [pc, #628]	; (80086a4 <mainLoop+0x2c8>)
 8008430:	f001 fc2c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8008434:	4603      	mov	r3, r0
 8008436:	2b01      	cmp	r3, #1
 8008438:	d113      	bne.n	8008462 <mainLoop+0x86>
 800843a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800843e:	4899      	ldr	r0, [pc, #612]	; (80086a4 <mainLoop+0x2c8>)
 8008440:	f001 fc24 	bl	8009c8c <HAL_GPIO_ReadPin>
 8008444:	4603      	mov	r3, r0
 8008446:	2b01      	cmp	r3, #1
 8008448:	d10b      	bne.n	8008462 <mainLoop+0x86>
 800844a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800844e:	4895      	ldr	r0, [pc, #596]	; (80086a4 <mainLoop+0x2c8>)
 8008450:	f001 fc1c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8008454:	4603      	mov	r3, r0
 8008456:	2b01      	cmp	r3, #1
 8008458:	d103      	bne.n	8008462 <mainLoop+0x86>
			butonKontrol=0;
 800845a:	4b93      	ldr	r3, [pc, #588]	; (80086a8 <mainLoop+0x2cc>)
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	e003      	b.n	800846a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8008462:	4b92      	ldr	r3, [pc, #584]	; (80086ac <mainLoop+0x2d0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a92      	ldr	r2, [pc, #584]	; (80086b0 <mainLoop+0x2d4>)
 8008468:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800846a:	4b92      	ldr	r3, [pc, #584]	; (80086b4 <mainLoop+0x2d8>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d03a      	beq.n	80084e8 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008472:	bf00      	nop
 8008474:	4890      	ldr	r0, [pc, #576]	; (80086b8 <mainLoop+0x2dc>)
 8008476:	f002 fa32 	bl	800a8de <HAL_I2C_GetError>
 800847a:	4603      	mov	r3, r0
 800847c:	2b04      	cmp	r3, #4
 800847e:	d0f9      	beq.n	8008474 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008480:	bf00      	nop
 8008482:	488d      	ldr	r0, [pc, #564]	; (80086b8 <mainLoop+0x2dc>)
 8008484:	f002 fa1e 	bl	800a8c4 <HAL_I2C_GetState>
 8008488:	4603      	mov	r3, r0
 800848a:	2b20      	cmp	r3, #32
 800848c:	d1f9      	bne.n	8008482 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 113, eepromData, 113, 3000);
 800848e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008492:	9302      	str	r3, [sp, #8]
 8008494:	2371      	movs	r3, #113	; 0x71
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	4b88      	ldr	r3, [pc, #544]	; (80086bc <mainLoop+0x2e0>)
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2371      	movs	r3, #113	; 0x71
 800849e:	2200      	movs	r2, #0
 80084a0:	21a0      	movs	r1, #160	; 0xa0
 80084a2:	4885      	ldr	r0, [pc, #532]	; (80086b8 <mainLoop+0x2dc>)
 80084a4:	f001 feac 	bl	800a200 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80084a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80084ac:	f000 fe1e 	bl	80090ec <HAL_Delay>

		  hafizaYaz=0;
 80084b0:	4b80      	ldr	r3, [pc, #512]	; (80086b4 <mainLoop+0x2d8>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80084b6:	4b82      	ldr	r3, [pc, #520]	; (80086c0 <mainLoop+0x2e4>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d105      	bne.n	80084ca <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80084be:	4a81      	ldr	r2, [pc, #516]	; (80086c4 <mainLoop+0x2e8>)
 80084c0:	2101      	movs	r1, #1
 80084c2:	2002      	movs	r0, #2
 80084c4:	f7f8 f8d0 	bl	8000668 <lcd_print>
 80084c8:	e008      	b.n	80084dc <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80084ca:	4b7d      	ldr	r3, [pc, #500]	; (80086c0 <mainLoop+0x2e4>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d104      	bne.n	80084dc <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80084d2:	4a7d      	ldr	r2, [pc, #500]	; (80086c8 <mainLoop+0x2ec>)
 80084d4:	2101      	movs	r1, #1
 80084d6:	2002      	movs	r0, #2
 80084d8:	f7f8 f8c6 	bl	8000668 <lcd_print>
		  }

		  HAL_Delay(1000);
 80084dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084e0:	f000 fe04 	bl	80090ec <HAL_Delay>
		  lcd_clear();
 80084e4:	f7f8 f8ec 	bl	80006c0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80084e8:	4b78      	ldr	r3, [pc, #480]	; (80086cc <mainLoop+0x2f0>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	f083 0301 	eor.w	r3, r3, #1
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d06e      	beq.n	80085d4 <mainLoop+0x1f8>
 80084f6:	4870      	ldr	r0, [pc, #448]	; (80086b8 <mainLoop+0x2dc>)
 80084f8:	f002 f9e4 	bl	800a8c4 <HAL_I2C_GetState>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b20      	cmp	r3, #32
 8008500:	d168      	bne.n	80085d4 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8008502:	4b73      	ldr	r3, [pc, #460]	; (80086d0 <mainLoop+0x2f4>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f083 0301 	eor.w	r3, r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d044      	beq.n	800859a <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008510:	4a70      	ldr	r2, [pc, #448]	; (80086d4 <mainLoop+0x2f8>)
 8008512:	2101      	movs	r1, #1
 8008514:	2001      	movs	r0, #1
 8008516:	f7f8 f8a7 	bl	8000668 <lcd_print>
			  if(dilSecim==0) {
 800851a:	4b69      	ldr	r3, [pc, #420]	; (80086c0 <mainLoop+0x2e4>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d105      	bne.n	800852e <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8008522:	4a6d      	ldr	r2, [pc, #436]	; (80086d8 <mainLoop+0x2fc>)
 8008524:	2101      	movs	r1, #1
 8008526:	2002      	movs	r0, #2
 8008528:	f7f8 f89e 	bl	8000668 <lcd_print>
 800852c:	e008      	b.n	8008540 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800852e:	4b64      	ldr	r3, [pc, #400]	; (80086c0 <mainLoop+0x2e4>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d104      	bne.n	8008540 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8008536:	4a69      	ldr	r2, [pc, #420]	; (80086dc <mainLoop+0x300>)
 8008538:	2101      	movs	r1, #1
 800853a:	2002      	movs	r0, #2
 800853c:	f7f8 f894 	bl	8000668 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008544:	f000 fdd2 	bl	80090ec <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008548:	bf00      	nop
 800854a:	485b      	ldr	r0, [pc, #364]	; (80086b8 <mainLoop+0x2dc>)
 800854c:	f002 f9c7 	bl	800a8de <HAL_I2C_GetError>
 8008550:	4603      	mov	r3, r0
 8008552:	2b04      	cmp	r3, #4
 8008554:	d0f9      	beq.n	800854a <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008556:	e003      	b.n	8008560 <mainLoop+0x184>
				  HAL_Delay(1000);
 8008558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800855c:	f000 fdc6 	bl	80090ec <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008560:	4855      	ldr	r0, [pc, #340]	; (80086b8 <mainLoop+0x2dc>)
 8008562:	f002 f9af 	bl	800a8c4 <HAL_I2C_GetState>
 8008566:	4603      	mov	r3, r0
 8008568:	2b20      	cmp	r3, #32
 800856a:	d1f5      	bne.n	8008558 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 800856c:	4b54      	ldr	r3, [pc, #336]	; (80086c0 <mainLoop+0x2e4>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8008574:	4a5a      	ldr	r2, [pc, #360]	; (80086e0 <mainLoop+0x304>)
 8008576:	2101      	movs	r1, #1
 8008578:	2002      	movs	r0, #2
 800857a:	f7f8 f875 	bl	8000668 <lcd_print>
 800857e:	e008      	b.n	8008592 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8008580:	4b4f      	ldr	r3, [pc, #316]	; (80086c0 <mainLoop+0x2e4>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d104      	bne.n	8008592 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8008588:	4a56      	ldr	r2, [pc, #344]	; (80086e4 <mainLoop+0x308>)
 800858a:	2101      	movs	r1, #1
 800858c:	2002      	movs	r0, #2
 800858e:	f7f8 f86b 	bl	8000668 <lcd_print>
			  }

			  ilkOkuma=1;
 8008592:	4b4f      	ldr	r3, [pc, #316]	; (80086d0 <mainLoop+0x2f4>)
 8008594:	2201      	movs	r2, #1
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	e014      	b.n	80085c4 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 800859a:	4b49      	ldr	r3, [pc, #292]	; (80086c0 <mainLoop+0x2e4>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80085a2:	4a51      	ldr	r2, [pc, #324]	; (80086e8 <mainLoop+0x30c>)
 80085a4:	2101      	movs	r1, #1
 80085a6:	2002      	movs	r0, #2
 80085a8:	f7f8 f85e 	bl	8000668 <lcd_print>
 80085ac:	e008      	b.n	80085c0 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80085ae:	4b44      	ldr	r3, [pc, #272]	; (80086c0 <mainLoop+0x2e4>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d104      	bne.n	80085c0 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80085b6:	4a4d      	ldr	r2, [pc, #308]	; (80086ec <mainLoop+0x310>)
 80085b8:	2101      	movs	r1, #1
 80085ba:	2002      	movs	r0, #2
 80085bc:	f7f8 f854 	bl	8000668 <lcd_print>
			  }
			  lcd_clear();
 80085c0:	f7f8 f87e 	bl	80006c0 <lcd_clear>
		  }

		  lcd_clear();
 80085c4:	f7f8 f87c 	bl	80006c0 <lcd_clear>

		  eepromKontrol(1);
 80085c8:	2001      	movs	r0, #1
 80085ca:	f7fd fa8f 	bl	8005aec <eepromKontrol>
		  hafizaOku=1;
 80085ce:	4b3f      	ldr	r3, [pc, #252]	; (80086cc <mainLoop+0x2f0>)
 80085d0:	2201      	movs	r2, #1
 80085d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80085d4:	4b46      	ldr	r3, [pc, #280]	; (80086f0 <mainLoop+0x314>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d11c      	bne.n	8008616 <mainLoop+0x23a>
 80085dc:	4b45      	ldr	r3, [pc, #276]	; (80086f4 <mainLoop+0x318>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f083 0301 	eor.w	r3, r3, #1
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d015      	beq.n	8008616 <mainLoop+0x23a>
 80085ea:	4b43      	ldr	r3, [pc, #268]	; (80086f8 <mainLoop+0x31c>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d111      	bne.n	8008616 <mainLoop+0x23a>
			lcd_clear();
 80085f2:	f7f8 f865 	bl	80006c0 <lcd_clear>
			HAL_Delay(10);
 80085f6:	200a      	movs	r0, #10
 80085f8:	f000 fd78 	bl	80090ec <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80085fc:	4a3f      	ldr	r2, [pc, #252]	; (80086fc <mainLoop+0x320>)
 80085fe:	2101      	movs	r1, #1
 8008600:	2001      	movs	r0, #1
 8008602:	f7f8 f831 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008606:	4a3e      	ldr	r2, [pc, #248]	; (8008700 <mainLoop+0x324>)
 8008608:	2101      	movs	r1, #1
 800860a:	2002      	movs	r0, #2
 800860c:	f7f8 f82c 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8008610:	4b38      	ldr	r3, [pc, #224]	; (80086f4 <mainLoop+0x318>)
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008616:	4b36      	ldr	r3, [pc, #216]	; (80086f0 <mainLoop+0x314>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d112      	bne.n	8008644 <mainLoop+0x268>
 800861e:	2102      	movs	r1, #2
 8008620:	481f      	ldr	r0, [pc, #124]	; (80086a0 <mainLoop+0x2c4>)
 8008622:	f001 fb33 	bl	8009c8c <HAL_GPIO_ReadPin>
 8008626:	4603      	mov	r3, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d10b      	bne.n	8008644 <mainLoop+0x268>
 800862c:	2104      	movs	r1, #4
 800862e:	481c      	ldr	r0, [pc, #112]	; (80086a0 <mainLoop+0x2c4>)
 8008630:	f001 fb2c 	bl	8009c8c <HAL_GPIO_ReadPin>
 8008634:	4603      	mov	r3, r0
 8008636:	2b01      	cmp	r3, #1
 8008638:	d104      	bne.n	8008644 <mainLoop+0x268>
			menuGiris=1;
 800863a:	4b2d      	ldr	r3, [pc, #180]	; (80086f0 <mainLoop+0x314>)
 800863c:	2201      	movs	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008640:	f7f8 f83e 	bl	80006c0 <lcd_clear>
		}

		if(menuGiris==1) {
 8008644:	4b2a      	ldr	r3, [pc, #168]	; (80086f0 <mainLoop+0x314>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d102      	bne.n	8008652 <mainLoop+0x276>
			menu(&hi2c1);
 800864c:	481a      	ldr	r0, [pc, #104]	; (80086b8 <mainLoop+0x2dc>)
 800864e:	f7f8 ffd5 	bl	80015fc <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8008652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008656:	4813      	ldr	r0, [pc, #76]	; (80086a4 <mainLoop+0x2c8>)
 8008658:	f001 fb47 	bl	8009cea <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800865c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008660:	4828      	ldr	r0, [pc, #160]	; (8008704 <mainLoop+0x328>)
 8008662:	f001 fb13 	bl	8009c8c <HAL_GPIO_ReadPin>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <mainLoop+0x2a6>
 800866c:	4b26      	ldr	r3, [pc, #152]	; (8008708 <mainLoop+0x32c>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f083 0301 	eor.w	r3, r3, #1
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <mainLoop+0x2a6>
			stopVar=1;
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <mainLoop+0x330>)
 800867c:	2201      	movs	r2, #1
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	e002      	b.n	8008688 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 8008682:	4b22      	ldr	r3, [pc, #136]	; (800870c <mainLoop+0x330>)
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008688:	f7fd fec8 	bl	800641c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800868c:	f7fd fefa 	bl	8006484 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008690:	f7fd ff3e 	bl	8006510 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8008694:	f7fd ff8e 	bl	80065b4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8008698:	f7ff fadc 	bl	8007c54 <checkDemoModCalisma>
		checkLCDBacklight();
 800869c:	e6a1      	b.n	80083e2 <mainLoop+0x6>
 800869e:	bf00      	nop
 80086a0:	40010800 	.word	0x40010800
 80086a4:	40011000 	.word	0x40011000
 80086a8:	20000d3b 	.word	0x20000d3b
 80086ac:	20000cb4 	.word	0x20000cb4
 80086b0:	20000cd0 	.word	0x20000cd0
 80086b4:	20000d38 	.word	0x20000d38
 80086b8:	20000b54 	.word	0x20000b54
 80086bc:	20000c38 	.word	0x20000c38
 80086c0:	20000d2d 	.word	0x20000d2d
 80086c4:	0800e524 	.word	0x0800e524
 80086c8:	0800e538 	.word	0x0800e538
 80086cc:	20000d39 	.word	0x20000d39
 80086d0:	20000d3a 	.word	0x20000d3a
 80086d4:	0800e54c 	.word	0x0800e54c
 80086d8:	0800e560 	.word	0x0800e560
 80086dc:	0800e574 	.word	0x0800e574
 80086e0:	0800e588 	.word	0x0800e588
 80086e4:	0800e59c 	.word	0x0800e59c
 80086e8:	0800e5b0 	.word	0x0800e5b0
 80086ec:	0800e5c4 	.word	0x0800e5c4
 80086f0:	20000d29 	.word	0x20000d29
 80086f4:	20000d40 	.word	0x20000d40
 80086f8:	20000d2a 	.word	0x20000d2a
 80086fc:	0800e488 	.word	0x0800e488
 8008700:	0800e49c 	.word	0x0800e49c
 8008704:	40010c00 	.word	0x40010c00
 8008708:	20000d61 	.word	0x20000d61
 800870c:	20000d5e 	.word	0x20000d5e

08008710 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008718:	4b04      	ldr	r3, [pc, #16]	; (800872c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	4a03      	ldr	r2, [pc, #12]	; (800872c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008720:	6013      	str	r3, [r2, #0]
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr
 800872c:	20000cb4 	.word	0x20000cb4

08008730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008734:	f000 fc78 	bl	8009028 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800873c:	f000 fcd6 	bl	80090ec <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008740:	f000 f8a8 	bl	8008894 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008744:	f000 f9ca 	bl	8008adc <MX_GPIO_Init>
  MX_CAN_Init();
 8008748:	f000 f8ea 	bl	8008920 <MX_CAN_Init>
  MX_I2C1_Init();
 800874c:	f000 f91c 	bl	8008988 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008750:	f000 f948 	bl	80089e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008754:	f000 f998 	bl	8008a88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008758:	2201      	movs	r2, #1
 800875a:	2140      	movs	r1, #64	; 0x40
 800875c:	4843      	ldr	r0, [pc, #268]	; (800886c <main+0x13c>)
 800875e:	f001 faac 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008762:	2201      	movs	r2, #1
 8008764:	2180      	movs	r1, #128	; 0x80
 8008766:	4841      	ldr	r0, [pc, #260]	; (800886c <main+0x13c>)
 8008768:	f001 faa7 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800876c:	200a      	movs	r0, #10
 800876e:	f000 fcbd 	bl	80090ec <HAL_Delay>
  lcd_init();
 8008772:	f7f7 ff47 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 8008776:	200a      	movs	r0, #10
 8008778:	f000 fcb8 	bl	80090ec <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800877c:	483c      	ldr	r0, [pc, #240]	; (8008870 <main+0x140>)
 800877e:	f003 f94f 	bl	800ba20 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008782:	bf00      	nop
 8008784:	483b      	ldr	r0, [pc, #236]	; (8008874 <main+0x144>)
 8008786:	f002 f8aa 	bl	800a8de <HAL_I2C_GetError>
 800878a:	4603      	mov	r3, r0
 800878c:	2b04      	cmp	r3, #4
 800878e:	d0f9      	beq.n	8008784 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008790:	bf00      	nop
 8008792:	4838      	ldr	r0, [pc, #224]	; (8008874 <main+0x144>)
 8008794:	f002 f896 	bl	800a8c4 <HAL_I2C_GetState>
 8008798:	4603      	mov	r3, r0
 800879a:	2b20      	cmp	r3, #32
 800879c:	d1f9      	bne.n	8008792 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800879e:	2200      	movs	r2, #0
 80087a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80087a4:	4831      	ldr	r0, [pc, #196]	; (800886c <main+0x13c>)
 80087a6:	f001 fa88 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80087aa:	2200      	movs	r2, #0
 80087ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087b0:	482e      	ldr	r0, [pc, #184]	; (800886c <main+0x13c>)
 80087b2:	f001 fa82 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80087b6:	2200      	movs	r2, #0
 80087b8:	2104      	movs	r1, #4
 80087ba:	482c      	ldr	r0, [pc, #176]	; (800886c <main+0x13c>)
 80087bc:	f001 fa7d 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80087c0:	2200      	movs	r2, #0
 80087c2:	2102      	movs	r1, #2
 80087c4:	4829      	ldr	r0, [pc, #164]	; (800886c <main+0x13c>)
 80087c6:	f001 fa78 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80087ca:	2200      	movs	r2, #0
 80087cc:	2101      	movs	r1, #1
 80087ce:	4827      	ldr	r0, [pc, #156]	; (800886c <main+0x13c>)
 80087d0:	f001 fa73 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80087d4:	2200      	movs	r2, #0
 80087d6:	2120      	movs	r1, #32
 80087d8:	4827      	ldr	r0, [pc, #156]	; (8008878 <main+0x148>)
 80087da:	f001 fa6e 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80087de:	2200      	movs	r2, #0
 80087e0:	2110      	movs	r1, #16
 80087e2:	4825      	ldr	r0, [pc, #148]	; (8008878 <main+0x148>)
 80087e4:	f001 fa69 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80087e8:	2200      	movs	r2, #0
 80087ea:	2180      	movs	r1, #128	; 0x80
 80087ec:	4823      	ldr	r0, [pc, #140]	; (800887c <main+0x14c>)
 80087ee:	f001 fa64 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80087f2:	2200      	movs	r2, #0
 80087f4:	2140      	movs	r1, #64	; 0x40
 80087f6:	4821      	ldr	r0, [pc, #132]	; (800887c <main+0x14c>)
 80087f8:	f001 fa5f 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80087fc:	2200      	movs	r2, #0
 80087fe:	2120      	movs	r1, #32
 8008800:	481e      	ldr	r0, [pc, #120]	; (800887c <main+0x14c>)
 8008802:	f001 fa5a 	bl	8009cba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008806:	2200      	movs	r2, #0
 8008808:	2110      	movs	r1, #16
 800880a:	481c      	ldr	r0, [pc, #112]	; (800887c <main+0x14c>)
 800880c:	f001 fa55 	bl	8009cba <HAL_GPIO_WritePin>

  i2cTest();
 8008810:	f7fd fd36 	bl	8006280 <i2cTest>
  HAL_Delay(100);
 8008814:	2064      	movs	r0, #100	; 0x64
 8008816:	f000 fc69 	bl	80090ec <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 800881a:	4a19      	ldr	r2, [pc, #100]	; (8008880 <main+0x150>)
 800881c:	2101      	movs	r1, #1
 800881e:	2001      	movs	r0, #1
 8008820:	f7f7 ff22 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008824:	4a17      	ldr	r2, [pc, #92]	; (8008884 <main+0x154>)
 8008826:	2101      	movs	r1, #1
 8008828:	2002      	movs	r0, #2
 800882a:	f7f7 ff1d 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 800882e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008832:	f000 fc5b 	bl	80090ec <HAL_Delay>
  lcd_clear();
 8008836:	f7f7 ff43 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 800883a:	2000      	movs	r0, #0
 800883c:	f7fd f956 	bl	8005aec <eepromKontrol>
  HAL_Delay(200);
 8008840:	20c8      	movs	r0, #200	; 0xc8
 8008842:	f000 fc53 	bl	80090ec <HAL_Delay>

  lcd_clear();
 8008846:	f7f7 ff3b 	bl	80006c0 <lcd_clear>
  HAL_Delay(200);
 800884a:	20c8      	movs	r0, #200	; 0xc8
 800884c:	f000 fc4e 	bl	80090ec <HAL_Delay>

  backLightTimer = millis;
 8008850:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <main+0x158>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a0d      	ldr	r2, [pc, #52]	; (800888c <main+0x15c>)
 8008856:	6013      	str	r3, [r2, #0]

  //ESP8266_Init(&huart1, "H.İ.D.", "asdasd0099123");

  if(machineID[11] == '\0') {
 8008858:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <main+0x160>)
 800885a:	7adb      	ldrb	r3, [r3, #11]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <main+0x136>
	  takeMachineID(0);
 8008860:	2000      	movs	r0, #0
 8008862:	f7f8 f92b 	bl	8000abc <takeMachineID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008866:	f7ff fdb9 	bl	80083dc <mainLoop>
 800886a:	e7fc      	b.n	8008866 <main+0x136>
 800886c:	40010c00 	.word	0x40010c00
 8008870:	20000ba8 	.word	0x20000ba8
 8008874:	20000b54 	.word	0x20000b54
 8008878:	40011000 	.word	0x40011000
 800887c:	40010800 	.word	0x40010800
 8008880:	0800e5d8 	.word	0x0800e5d8
 8008884:	0800e5ec 	.word	0x0800e5ec
 8008888:	20000cb4 	.word	0x20000cb4
 800888c:	20000cd0 	.word	0x20000cd0
 8008890:	20000cd4 	.word	0x20000cd4

08008894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b090      	sub	sp, #64	; 0x40
 8008898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800889a:	f107 0318 	add.w	r3, r7, #24
 800889e:	2228      	movs	r2, #40	; 0x28
 80088a0:	2100      	movs	r1, #0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f004 fb36 	bl	800cf14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80088a8:	1d3b      	adds	r3, r7, #4
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	605a      	str	r2, [r3, #4]
 80088b0:	609a      	str	r2, [r3, #8]
 80088b2:	60da      	str	r2, [r3, #12]
 80088b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80088b6:	2301      	movs	r3, #1
 80088b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80088ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80088c0:	2300      	movs	r3, #0
 80088c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80088c4:	2301      	movs	r3, #1
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088c8:	2302      	movs	r3, #2
 80088ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80088d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088d8:	f107 0318 	add.w	r3, r7, #24
 80088dc:	4618      	mov	r0, r3
 80088de:	f002 fc3f 	bl	800b160 <HAL_RCC_OscConfig>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80088e8:	f000 f9a2 	bl	8008c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088ec:	230f      	movs	r3, #15
 80088ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088f0:	2302      	movs	r3, #2
 80088f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80088f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80088fe:	2300      	movs	r3, #0
 8008900:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008902:	1d3b      	adds	r3, r7, #4
 8008904:	2102      	movs	r1, #2
 8008906:	4618      	mov	r0, r3
 8008908:	f002 feac 	bl	800b664 <HAL_RCC_ClockConfig>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008912:	f000 f98d 	bl	8008c30 <Error_Handler>
  }
}
 8008916:	bf00      	nop
 8008918:	3740      	adds	r7, #64	; 0x40
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008924:	4b16      	ldr	r3, [pc, #88]	; (8008980 <MX_CAN_Init+0x60>)
 8008926:	4a17      	ldr	r2, [pc, #92]	; (8008984 <MX_CAN_Init+0x64>)
 8008928:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800892a:	4b15      	ldr	r3, [pc, #84]	; (8008980 <MX_CAN_Init+0x60>)
 800892c:	2210      	movs	r2, #16
 800892e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008930:	4b13      	ldr	r3, [pc, #76]	; (8008980 <MX_CAN_Init+0x60>)
 8008932:	2200      	movs	r2, #0
 8008934:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008936:	4b12      	ldr	r3, [pc, #72]	; (8008980 <MX_CAN_Init+0x60>)
 8008938:	2200      	movs	r2, #0
 800893a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800893c:	4b10      	ldr	r3, [pc, #64]	; (8008980 <MX_CAN_Init+0x60>)
 800893e:	2200      	movs	r2, #0
 8008940:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008942:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <MX_CAN_Init+0x60>)
 8008944:	2200      	movs	r2, #0
 8008946:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008948:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <MX_CAN_Init+0x60>)
 800894a:	2200      	movs	r2, #0
 800894c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800894e:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <MX_CAN_Init+0x60>)
 8008950:	2200      	movs	r2, #0
 8008952:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008954:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <MX_CAN_Init+0x60>)
 8008956:	2200      	movs	r2, #0
 8008958:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800895a:	4b09      	ldr	r3, [pc, #36]	; (8008980 <MX_CAN_Init+0x60>)
 800895c:	2200      	movs	r2, #0
 800895e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <MX_CAN_Init+0x60>)
 8008962:	2200      	movs	r2, #0
 8008964:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <MX_CAN_Init+0x60>)
 8008968:	2200      	movs	r2, #0
 800896a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800896c:	4804      	ldr	r0, [pc, #16]	; (8008980 <MX_CAN_Init+0x60>)
 800896e:	f000 fbe1 	bl	8009134 <HAL_CAN_Init>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008978:	f000 f95a 	bl	8008c30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800897c:	bf00      	nop
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20000b2c 	.word	0x20000b2c
 8008984:	40006400 	.word	0x40006400

08008988 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800898c:	4b12      	ldr	r3, [pc, #72]	; (80089d8 <MX_I2C1_Init+0x50>)
 800898e:	4a13      	ldr	r2, [pc, #76]	; (80089dc <MX_I2C1_Init+0x54>)
 8008990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008992:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <MX_I2C1_Init+0x50>)
 8008994:	4a12      	ldr	r2, [pc, #72]	; (80089e0 <MX_I2C1_Init+0x58>)
 8008996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008998:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <MX_I2C1_Init+0x50>)
 800899a:	2200      	movs	r2, #0
 800899c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800899e:	4b0e      	ldr	r3, [pc, #56]	; (80089d8 <MX_I2C1_Init+0x50>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <MX_I2C1_Init+0x50>)
 80089a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80089aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <MX_I2C1_Init+0x50>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80089b2:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <MX_I2C1_Init+0x50>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80089b8:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <MX_I2C1_Init+0x50>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80089be:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <MX_I2C1_Init+0x50>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80089c4:	4804      	ldr	r0, [pc, #16]	; (80089d8 <MX_I2C1_Init+0x50>)
 80089c6:	f001 f9a9 	bl	8009d1c <HAL_I2C_Init>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80089d0:	f000 f92e 	bl	8008c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80089d4:	bf00      	nop
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000b54 	.word	0x20000b54
 80089dc:	40005400 	.word	0x40005400
 80089e0:	00061a80 	.word	0x00061a80

080089e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	605a      	str	r2, [r3, #4]
 80089f4:	609a      	str	r2, [r3, #8]
 80089f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089f8:	463b      	mov	r3, r7
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008a00:	4b1f      	ldr	r3, [pc, #124]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a02:	4a20      	ldr	r2, [pc, #128]	; (8008a84 <MX_TIM1_Init+0xa0>)
 8008a04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008a06:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a08:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008a0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a0e:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008a14:	4b1a      	ldr	r3, [pc, #104]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a16:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008a1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a1c:	4b18      	ldr	r3, [pc, #96]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008a22:	4b17      	ldr	r3, [pc, #92]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a28:	4b15      	ldr	r3, [pc, #84]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008a2e:	4814      	ldr	r0, [pc, #80]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a30:	f002 ffa6 	bl	800b980 <HAL_TIM_Base_Init>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008a3a:	f000 f8f9 	bl	8008c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008a44:	f107 0308 	add.w	r3, r7, #8
 8008a48:	4619      	mov	r1, r3
 8008a4a:	480d      	ldr	r0, [pc, #52]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a4c:	f003 f950 	bl	800bcf0 <HAL_TIM_ConfigClockSource>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008a56:	f000 f8eb 	bl	8008c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a62:	463b      	mov	r3, r7
 8008a64:	4619      	mov	r1, r3
 8008a66:	4806      	ldr	r0, [pc, #24]	; (8008a80 <MX_TIM1_Init+0x9c>)
 8008a68:	f003 fb3e 	bl	800c0e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a72:	f000 f8dd 	bl	8008c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008a76:	bf00      	nop
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000ba8 	.word	0x20000ba8
 8008a84:	40012c00 	.word	0x40012c00

08008a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a8c:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008a8e:	4a12      	ldr	r2, [pc, #72]	; (8008ad8 <MX_USART1_UART_Init+0x50>)
 8008a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008aae:	220c      	movs	r2, #12
 8008ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ab8:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008abe:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <MX_USART1_UART_Init+0x4c>)
 8008ac0:	f003 fb90 	bl	800c1e4 <HAL_UART_Init>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008aca:	f000 f8b1 	bl	8008c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008ace:	bf00      	nop
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20000bf0 	.word	0x20000bf0
 8008ad8:	40013800 	.word	0x40013800

08008adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ae2:	f107 0310 	add.w	r3, r7, #16
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	605a      	str	r2, [r3, #4]
 8008aec:	609a      	str	r2, [r3, #8]
 8008aee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008af0:	4b4b      	ldr	r3, [pc, #300]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	4a4a      	ldr	r2, [pc, #296]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008af6:	f043 0310 	orr.w	r3, r3, #16
 8008afa:	6193      	str	r3, [r2, #24]
 8008afc:	4b48      	ldr	r3, [pc, #288]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b08:	4b45      	ldr	r3, [pc, #276]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	4a44      	ldr	r2, [pc, #272]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b0e:	f043 0320 	orr.w	r3, r3, #32
 8008b12:	6193      	str	r3, [r2, #24]
 8008b14:	4b42      	ldr	r3, [pc, #264]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b20:	4b3f      	ldr	r3, [pc, #252]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	4a3e      	ldr	r2, [pc, #248]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b26:	f043 0304 	orr.w	r3, r3, #4
 8008b2a:	6193      	str	r3, [r2, #24]
 8008b2c:	4b3c      	ldr	r3, [pc, #240]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b38:	4b39      	ldr	r3, [pc, #228]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	4a38      	ldr	r2, [pc, #224]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b3e:	f043 0308 	orr.w	r3, r3, #8
 8008b42:	6193      	str	r3, [r2, #24]
 8008b44:	4b36      	ldr	r3, [pc, #216]	; (8008c20 <MX_GPIO_Init+0x144>)
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	f003 0308 	and.w	r3, r3, #8
 8008b4c:	603b      	str	r3, [r7, #0]
 8008b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008b50:	2200      	movs	r2, #0
 8008b52:	21f0      	movs	r1, #240	; 0xf0
 8008b54:	4833      	ldr	r0, [pc, #204]	; (8008c24 <MX_GPIO_Init+0x148>)
 8008b56:	f001 f8b0 	bl	8009cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f241 0130 	movw	r1, #4144	; 0x1030
 8008b60:	4831      	ldr	r0, [pc, #196]	; (8008c28 <MX_GPIO_Init+0x14c>)
 8008b62:	f001 f8aa 	bl	8009cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008b66:	2200      	movs	r2, #0
 8008b68:	f640 4107 	movw	r1, #3079	; 0xc07
 8008b6c:	482f      	ldr	r0, [pc, #188]	; (8008c2c <MX_GPIO_Init+0x150>)
 8008b6e:	f001 f8a4 	bl	8009cba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008b72:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008b76:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	4619      	mov	r1, r3
 8008b86:	4828      	ldr	r0, [pc, #160]	; (8008c28 <MX_GPIO_Init+0x14c>)
 8008b88:	f000 fe20 	bl	80097cc <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008b8c:	f248 130f 	movw	r3, #33039	; 0x810f
 8008b90:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b92:	2300      	movs	r3, #0
 8008b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b9a:	f107 0310 	add.w	r3, r7, #16
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4820      	ldr	r0, [pc, #128]	; (8008c24 <MX_GPIO_Init+0x148>)
 8008ba2:	f000 fe13 	bl	80097cc <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008ba6:	23f0      	movs	r3, #240	; 0xf0
 8008ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008baa:	2301      	movs	r3, #1
 8008bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb6:	f107 0310 	add.w	r3, r7, #16
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4819      	ldr	r0, [pc, #100]	; (8008c24 <MX_GPIO_Init+0x148>)
 8008bbe:	f000 fe05 	bl	80097cc <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008bc2:	f241 0330 	movw	r3, #4144	; 0x1030
 8008bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4813      	ldr	r0, [pc, #76]	; (8008c28 <MX_GPIO_Init+0x14c>)
 8008bdc:	f000 fdf6 	bl	80097cc <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008be0:	f640 4307 	movw	r3, #3079	; 0xc07
 8008be4:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008be6:	2301      	movs	r3, #1
 8008be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bf2:	f107 0310 	add.w	r3, r7, #16
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	480c      	ldr	r0, [pc, #48]	; (8008c2c <MX_GPIO_Init+0x150>)
 8008bfa:	f000 fde7 	bl	80097cc <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008bfe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c0c:	f107 0310 	add.w	r3, r7, #16
 8008c10:	4619      	mov	r1, r3
 8008c12:	4806      	ldr	r0, [pc, #24]	; (8008c2c <MX_GPIO_Init+0x150>)
 8008c14:	f000 fdda 	bl	80097cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008c18:	bf00      	nop
 8008c1a:	3720      	adds	r7, #32
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	40021000 	.word	0x40021000
 8008c24:	40010800 	.word	0x40010800
 8008c28:	40011000 	.word	0x40011000
 8008c2c:	40010c00 	.word	0x40010c00

08008c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008c34:	bf00      	nop
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr

08008c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c42:	4b15      	ldr	r3, [pc, #84]	; (8008c98 <HAL_MspInit+0x5c>)
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	4a14      	ldr	r2, [pc, #80]	; (8008c98 <HAL_MspInit+0x5c>)
 8008c48:	f043 0301 	orr.w	r3, r3, #1
 8008c4c:	6193      	str	r3, [r2, #24]
 8008c4e:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <HAL_MspInit+0x5c>)
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	60bb      	str	r3, [r7, #8]
 8008c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c5a:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <HAL_MspInit+0x5c>)
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	4a0e      	ldr	r2, [pc, #56]	; (8008c98 <HAL_MspInit+0x5c>)
 8008c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c64:	61d3      	str	r3, [r2, #28]
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <HAL_MspInit+0x5c>)
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6e:	607b      	str	r3, [r7, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c72:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <HAL_MspInit+0x60>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	4a04      	ldr	r2, [pc, #16]	; (8008c9c <HAL_MspInit+0x60>)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c8e:	bf00      	nop
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bc80      	pop	{r7}
 8008c96:	4770      	bx	lr
 8008c98:	40021000 	.word	0x40021000
 8008c9c:	40010000 	.word	0x40010000

08008ca0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ca8:	f107 0310 	add.w	r3, r7, #16
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	609a      	str	r2, [r3, #8]
 8008cb4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <HAL_CAN_MspInit+0x8c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d131      	bne.n	8008d24 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008cc0:	4b1b      	ldr	r3, [pc, #108]	; (8008d30 <HAL_CAN_MspInit+0x90>)
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	4a1a      	ldr	r2, [pc, #104]	; (8008d30 <HAL_CAN_MspInit+0x90>)
 8008cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008cca:	61d3      	str	r3, [r2, #28]
 8008ccc:	4b18      	ldr	r3, [pc, #96]	; (8008d30 <HAL_CAN_MspInit+0x90>)
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cd8:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <HAL_CAN_MspInit+0x90>)
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	4a14      	ldr	r2, [pc, #80]	; (8008d30 <HAL_CAN_MspInit+0x90>)
 8008cde:	f043 0304 	orr.w	r3, r3, #4
 8008ce2:	6193      	str	r3, [r2, #24]
 8008ce4:	4b12      	ldr	r3, [pc, #72]	; (8008d30 <HAL_CAN_MspInit+0x90>)
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	60bb      	str	r3, [r7, #8]
 8008cee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cfe:	f107 0310 	add.w	r3, r7, #16
 8008d02:	4619      	mov	r1, r3
 8008d04:	480b      	ldr	r0, [pc, #44]	; (8008d34 <HAL_CAN_MspInit+0x94>)
 8008d06:	f000 fd61 	bl	80097cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d10:	2302      	movs	r3, #2
 8008d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d14:	2303      	movs	r3, #3
 8008d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d18:	f107 0310 	add.w	r3, r7, #16
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4805      	ldr	r0, [pc, #20]	; (8008d34 <HAL_CAN_MspInit+0x94>)
 8008d20:	f000 fd54 	bl	80097cc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008d24:	bf00      	nop
 8008d26:	3720      	adds	r7, #32
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	40006400 	.word	0x40006400
 8008d30:	40021000 	.word	0x40021000
 8008d34:	40010800 	.word	0x40010800

08008d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d40:	f107 0310 	add.w	r3, r7, #16
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	605a      	str	r2, [r3, #4]
 8008d4a:	609a      	str	r2, [r3, #8]
 8008d4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <HAL_I2C_MspInit+0x70>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d123      	bne.n	8008da0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d58:	4b14      	ldr	r3, [pc, #80]	; (8008dac <HAL_I2C_MspInit+0x74>)
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	4a13      	ldr	r2, [pc, #76]	; (8008dac <HAL_I2C_MspInit+0x74>)
 8008d5e:	f043 0308 	orr.w	r3, r3, #8
 8008d62:	6193      	str	r3, [r2, #24]
 8008d64:	4b11      	ldr	r3, [pc, #68]	; (8008dac <HAL_I2C_MspInit+0x74>)
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	f003 0308 	and.w	r3, r3, #8
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d70:	23c0      	movs	r3, #192	; 0xc0
 8008d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d74:	2312      	movs	r3, #18
 8008d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d7c:	f107 0310 	add.w	r3, r7, #16
 8008d80:	4619      	mov	r1, r3
 8008d82:	480b      	ldr	r0, [pc, #44]	; (8008db0 <HAL_I2C_MspInit+0x78>)
 8008d84:	f000 fd22 	bl	80097cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d88:	4b08      	ldr	r3, [pc, #32]	; (8008dac <HAL_I2C_MspInit+0x74>)
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	4a07      	ldr	r2, [pc, #28]	; (8008dac <HAL_I2C_MspInit+0x74>)
 8008d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d92:	61d3      	str	r3, [r2, #28]
 8008d94:	4b05      	ldr	r3, [pc, #20]	; (8008dac <HAL_I2C_MspInit+0x74>)
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d9c:	60bb      	str	r3, [r7, #8]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008da0:	bf00      	nop
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	40005400 	.word	0x40005400
 8008dac:	40021000 	.word	0x40021000
 8008db0:	40010c00 	.word	0x40010c00

08008db4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <HAL_I2C_MspDeInit+0x38>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d10d      	bne.n	8008de2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <HAL_I2C_MspDeInit+0x3c>)
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	4a09      	ldr	r2, [pc, #36]	; (8008df0 <HAL_I2C_MspDeInit+0x3c>)
 8008dcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dd0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008dd2:	2140      	movs	r1, #64	; 0x40
 8008dd4:	4807      	ldr	r0, [pc, #28]	; (8008df4 <HAL_I2C_MspDeInit+0x40>)
 8008dd6:	f000 fe8d 	bl	8009af4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008dda:	2180      	movs	r1, #128	; 0x80
 8008ddc:	4805      	ldr	r0, [pc, #20]	; (8008df4 <HAL_I2C_MspDeInit+0x40>)
 8008dde:	f000 fe89 	bl	8009af4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	40005400 	.word	0x40005400
 8008df0:	40021000 	.word	0x40021000
 8008df4:	40010c00 	.word	0x40010c00

08008df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a0d      	ldr	r2, [pc, #52]	; (8008e3c <HAL_TIM_Base_MspInit+0x44>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d113      	bne.n	8008e32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <HAL_TIM_Base_MspInit+0x48>)
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	4a0c      	ldr	r2, [pc, #48]	; (8008e40 <HAL_TIM_Base_MspInit+0x48>)
 8008e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e14:	6193      	str	r3, [r2, #24]
 8008e16:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <HAL_TIM_Base_MspInit+0x48>)
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008e22:	2200      	movs	r2, #0
 8008e24:	2100      	movs	r1, #0
 8008e26:	2019      	movs	r0, #25
 8008e28:	f000 fb57 	bl	80094da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008e2c:	2019      	movs	r0, #25
 8008e2e:	f000 fb70 	bl	8009512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	40012c00 	.word	0x40012c00
 8008e40:	40021000 	.word	0x40021000

08008e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e4c:	f107 0310 	add.w	r3, r7, #16
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	609a      	str	r2, [r3, #8]
 8008e58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a20      	ldr	r2, [pc, #128]	; (8008ee0 <HAL_UART_MspInit+0x9c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d139      	bne.n	8008ed8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e64:	4b1f      	ldr	r3, [pc, #124]	; (8008ee4 <HAL_UART_MspInit+0xa0>)
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	4a1e      	ldr	r2, [pc, #120]	; (8008ee4 <HAL_UART_MspInit+0xa0>)
 8008e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e6e:	6193      	str	r3, [r2, #24]
 8008e70:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <HAL_UART_MspInit+0xa0>)
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e7c:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <HAL_UART_MspInit+0xa0>)
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	4a18      	ldr	r2, [pc, #96]	; (8008ee4 <HAL_UART_MspInit+0xa0>)
 8008e82:	f043 0304 	orr.w	r3, r3, #4
 8008e86:	6193      	str	r3, [r2, #24]
 8008e88:	4b16      	ldr	r3, [pc, #88]	; (8008ee4 <HAL_UART_MspInit+0xa0>)
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	60bb      	str	r3, [r7, #8]
 8008e92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea2:	f107 0310 	add.w	r3, r7, #16
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	480f      	ldr	r0, [pc, #60]	; (8008ee8 <HAL_UART_MspInit+0xa4>)
 8008eaa:	f000 fc8f 	bl	80097cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ebc:	f107 0310 	add.w	r3, r7, #16
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4809      	ldr	r0, [pc, #36]	; (8008ee8 <HAL_UART_MspInit+0xa4>)
 8008ec4:	f000 fc82 	bl	80097cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2100      	movs	r1, #0
 8008ecc:	2025      	movs	r0, #37	; 0x25
 8008ece:	f000 fb04 	bl	80094da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008ed2:	2025      	movs	r0, #37	; 0x25
 8008ed4:	f000 fb1d 	bl	8009512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008ed8:	bf00      	nop
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	40013800 	.word	0x40013800
 8008ee4:	40021000 	.word	0x40021000
 8008ee8:	40010800 	.word	0x40010800

08008eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008ef0:	e7fe      	b.n	8008ef0 <NMI_Handler+0x4>

08008ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ef6:	e7fe      	b.n	8008ef6 <HardFault_Handler+0x4>

08008ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008efc:	e7fe      	b.n	8008efc <MemManage_Handler+0x4>

08008efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008efe:	b480      	push	{r7}
 8008f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f02:	e7fe      	b.n	8008f02 <BusFault_Handler+0x4>

08008f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f08:	e7fe      	b.n	8008f08 <UsageFault_Handler+0x4>

08008f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f0e:	bf00      	nop
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc80      	pop	{r7}
 8008f14:	4770      	bx	lr

08008f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f16:	b480      	push	{r7}
 8008f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f1a:	bf00      	nop
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr

08008f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f22:	b480      	push	{r7}
 8008f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f26:	bf00      	nop
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr

08008f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f32:	f000 f8bf 	bl	80090b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f36:	bf00      	nop
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008f40:	4802      	ldr	r0, [pc, #8]	; (8008f4c <TIM1_UP_IRQHandler+0x10>)
 8008f42:	f002 fdcd 	bl	800bae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008f46:	bf00      	nop
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000ba8 	.word	0x20000ba8

08008f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008f54:	4802      	ldr	r0, [pc, #8]	; (8008f60 <USART1_IRQHandler+0x10>)
 8008f56:	f003 f9cb 	bl	800c2f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000bf0 	.word	0x20000bf0

08008f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f6c:	4a14      	ldr	r2, [pc, #80]	; (8008fc0 <_sbrk+0x5c>)
 8008f6e:	4b15      	ldr	r3, [pc, #84]	; (8008fc4 <_sbrk+0x60>)
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f78:	4b13      	ldr	r3, [pc, #76]	; (8008fc8 <_sbrk+0x64>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f80:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <_sbrk+0x64>)
 8008f82:	4a12      	ldr	r2, [pc, #72]	; (8008fcc <_sbrk+0x68>)
 8008f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <_sbrk+0x64>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d207      	bcs.n	8008fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f94:	f003 ffe6 	bl	800cf64 <__errno>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	220c      	movs	r2, #12
 8008f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa2:	e009      	b.n	8008fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008fa4:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <_sbrk+0x64>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008faa:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <_sbrk+0x64>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	4a05      	ldr	r2, [pc, #20]	; (8008fc8 <_sbrk+0x64>)
 8008fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	2000c000 	.word	0x2000c000
 8008fc4:	00000400 	.word	0x00000400
 8008fc8:	20000ea0 	.word	0x20000ea0
 8008fcc:	20000ff0 	.word	0x20000ff0

08008fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008fd4:	bf00      	nop
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bc80      	pop	{r7}
 8008fda:	4770      	bx	lr

08008fdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fdc:	480c      	ldr	r0, [pc, #48]	; (8009010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008fde:	490d      	ldr	r1, [pc, #52]	; (8009014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008fe0:	4a0d      	ldr	r2, [pc, #52]	; (8009018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fe4:	e002      	b.n	8008fec <LoopCopyDataInit>

08008fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fea:	3304      	adds	r3, #4

08008fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ff0:	d3f9      	bcc.n	8008fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ff2:	4a0a      	ldr	r2, [pc, #40]	; (800901c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008ff4:	4c0a      	ldr	r4, [pc, #40]	; (8009020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ff8:	e001      	b.n	8008ffe <LoopFillZerobss>

08008ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ffc:	3204      	adds	r2, #4

08008ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009000:	d3fb      	bcc.n	8008ffa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009002:	f7ff ffe5 	bl	8008fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009006:	f003 ffb3 	bl	800cf70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800900a:	f7ff fb91 	bl	8008730 <main>
  bx lr
 800900e:	4770      	bx	lr
  ldr r0, =_sdata
 8009010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009014:	20000a14 	.word	0x20000a14
  ldr r2, =_sidata
 8009018:	0800e68c 	.word	0x0800e68c
  ldr r2, =_sbss
 800901c:	20000a14 	.word	0x20000a14
  ldr r4, =_ebss
 8009020:	20000ff0 	.word	0x20000ff0

08009024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009024:	e7fe      	b.n	8009024 <ADC1_2_IRQHandler>
	...

08009028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800902c:	4b08      	ldr	r3, [pc, #32]	; (8009050 <HAL_Init+0x28>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a07      	ldr	r2, [pc, #28]	; (8009050 <HAL_Init+0x28>)
 8009032:	f043 0310 	orr.w	r3, r3, #16
 8009036:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009038:	2003      	movs	r0, #3
 800903a:	f000 fa43 	bl	80094c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800903e:	200f      	movs	r0, #15
 8009040:	f000 f808 	bl	8009054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009044:	f7ff fdfa 	bl	8008c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	40022000 	.word	0x40022000

08009054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800905c:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <HAL_InitTick+0x54>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <HAL_InitTick+0x58>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	4619      	mov	r1, r3
 8009066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800906a:	fbb3 f3f1 	udiv	r3, r3, r1
 800906e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fa5b 	bl	800952e <HAL_SYSTICK_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e00e      	b.n	80090a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b0f      	cmp	r3, #15
 8009086:	d80a      	bhi.n	800909e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009088:	2200      	movs	r2, #0
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	f000 fa23 	bl	80094da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009094:	4a06      	ldr	r2, [pc, #24]	; (80090b0 <HAL_InitTick+0x5c>)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	e000      	b.n	80090a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	200009b8 	.word	0x200009b8
 80090ac:	200009c0 	.word	0x200009c0
 80090b0:	200009bc 	.word	0x200009bc

080090b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80090b8:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <HAL_IncTick+0x1c>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	461a      	mov	r2, r3
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_IncTick+0x20>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4413      	add	r3, r2
 80090c4:	4a03      	ldr	r2, [pc, #12]	; (80090d4 <HAL_IncTick+0x20>)
 80090c6:	6013      	str	r3, [r2, #0]
}
 80090c8:	bf00      	nop
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr
 80090d0:	200009c0 	.word	0x200009c0
 80090d4:	20000ea4 	.word	0x20000ea4

080090d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
  return uwTick;
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <HAL_GetTick+0x10>)
 80090de:	681b      	ldr	r3, [r3, #0]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bc80      	pop	{r7}
 80090e6:	4770      	bx	lr
 80090e8:	20000ea4 	.word	0x20000ea4

080090ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090f4:	f7ff fff0 	bl	80090d8 <HAL_GetTick>
 80090f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009104:	d005      	beq.n	8009112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009106:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <HAL_Delay+0x44>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009112:	bf00      	nop
 8009114:	f7ff ffe0 	bl	80090d8 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	429a      	cmp	r2, r3
 8009122:	d8f7      	bhi.n	8009114 <HAL_Delay+0x28>
  {
  }
}
 8009124:	bf00      	nop
 8009126:	bf00      	nop
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	200009c0 	.word	0x200009c0

08009134 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e0ed      	b.n	8009322 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fda4 	bl	8008ca0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009168:	f7ff ffb6 	bl	80090d8 <HAL_GetTick>
 800916c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800916e:	e012      	b.n	8009196 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009170:	f7ff ffb2 	bl	80090d8 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b0a      	cmp	r3, #10
 800917c:	d90b      	bls.n	8009196 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2205      	movs	r2, #5
 800918e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e0c5      	b.n	8009322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0e5      	beq.n	8009170 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0202 	bic.w	r2, r2, #2
 80091b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091b4:	f7ff ff90 	bl	80090d8 <HAL_GetTick>
 80091b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091ba:	e012      	b.n	80091e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80091bc:	f7ff ff8c 	bl	80090d8 <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b0a      	cmp	r3, #10
 80091c8:	d90b      	bls.n	80091e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2205      	movs	r2, #5
 80091da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e09f      	b.n	8009322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e5      	bne.n	80091bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7e1b      	ldrb	r3, [r3, #24]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d108      	bne.n	800920a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	e007      	b.n	800921a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	7e5b      	ldrb	r3, [r3, #25]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d108      	bne.n	8009234 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e007      	b.n	8009244 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009242:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	7e9b      	ldrb	r3, [r3, #26]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d108      	bne.n	800925e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0220 	orr.w	r2, r2, #32
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	e007      	b.n	800926e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0220 	bic.w	r2, r2, #32
 800926c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	7edb      	ldrb	r3, [r3, #27]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d108      	bne.n	8009288 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0210 	bic.w	r2, r2, #16
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	e007      	b.n	8009298 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0210 	orr.w	r2, r2, #16
 8009296:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	7f1b      	ldrb	r3, [r3, #28]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d108      	bne.n	80092b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0208 	orr.w	r2, r2, #8
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	e007      	b.n	80092c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0208 	bic.w	r2, r2, #8
 80092c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	7f5b      	ldrb	r3, [r3, #29]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d108      	bne.n	80092dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f042 0204 	orr.w	r2, r2, #4
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	e007      	b.n	80092ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 0204 	bic.w	r2, r2, #4
 80092ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	431a      	orrs	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	431a      	orrs	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	ea42 0103 	orr.w	r1, r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	1e5a      	subs	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <__NVIC_SetPriorityGrouping>:
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800933c:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <__NVIC_SetPriorityGrouping+0x44>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009348:	4013      	ands	r3, r2
 800934a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800935c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800935e:	4a04      	ldr	r2, [pc, #16]	; (8009370 <__NVIC_SetPriorityGrouping+0x44>)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	60d3      	str	r3, [r2, #12]
}
 8009364:	bf00      	nop
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	bc80      	pop	{r7}
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	e000ed00 	.word	0xe000ed00

08009374 <__NVIC_GetPriorityGrouping>:
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <__NVIC_GetPriorityGrouping+0x18>)
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	0a1b      	lsrs	r3, r3, #8
 800937e:	f003 0307 	and.w	r3, r3, #7
}
 8009382:	4618      	mov	r0, r3
 8009384:	46bd      	mov	sp, r7
 8009386:	bc80      	pop	{r7}
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	e000ed00 	.word	0xe000ed00

08009390 <__NVIC_EnableIRQ>:
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800939a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	db0b      	blt.n	80093ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	f003 021f 	and.w	r2, r3, #31
 80093a8:	4906      	ldr	r1, [pc, #24]	; (80093c4 <__NVIC_EnableIRQ+0x34>)
 80093aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ae:	095b      	lsrs	r3, r3, #5
 80093b0:	2001      	movs	r0, #1
 80093b2:	fa00 f202 	lsl.w	r2, r0, r2
 80093b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	bc80      	pop	{r7}
 80093c2:	4770      	bx	lr
 80093c4:	e000e100 	.word	0xe000e100

080093c8 <__NVIC_SetPriority>:
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	6039      	str	r1, [r7, #0]
 80093d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	db0a      	blt.n	80093f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	490c      	ldr	r1, [pc, #48]	; (8009414 <__NVIC_SetPriority+0x4c>)
 80093e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093e6:	0112      	lsls	r2, r2, #4
 80093e8:	b2d2      	uxtb	r2, r2
 80093ea:	440b      	add	r3, r1
 80093ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80093f0:	e00a      	b.n	8009408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	4908      	ldr	r1, [pc, #32]	; (8009418 <__NVIC_SetPriority+0x50>)
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	f003 030f 	and.w	r3, r3, #15
 80093fe:	3b04      	subs	r3, #4
 8009400:	0112      	lsls	r2, r2, #4
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	440b      	add	r3, r1
 8009406:	761a      	strb	r2, [r3, #24]
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	e000e100 	.word	0xe000e100
 8009418:	e000ed00 	.word	0xe000ed00

0800941c <NVIC_EncodePriority>:
{
 800941c:	b480      	push	{r7}
 800941e:	b089      	sub	sp, #36	; 0x24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f003 0307 	and.w	r3, r3, #7
 800942e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	f1c3 0307 	rsb	r3, r3, #7
 8009436:	2b04      	cmp	r3, #4
 8009438:	bf28      	it	cs
 800943a:	2304      	movcs	r3, #4
 800943c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	3304      	adds	r3, #4
 8009442:	2b06      	cmp	r3, #6
 8009444:	d902      	bls.n	800944c <NVIC_EncodePriority+0x30>
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	3b03      	subs	r3, #3
 800944a:	e000      	b.n	800944e <NVIC_EncodePriority+0x32>
 800944c:	2300      	movs	r3, #0
 800944e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009450:	f04f 32ff 	mov.w	r2, #4294967295
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	fa02 f303 	lsl.w	r3, r2, r3
 800945a:	43da      	mvns	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	401a      	ands	r2, r3
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009464:	f04f 31ff 	mov.w	r1, #4294967295
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	fa01 f303 	lsl.w	r3, r1, r3
 800946e:	43d9      	mvns	r1, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009474:	4313      	orrs	r3, r2
}
 8009476:	4618      	mov	r0, r3
 8009478:	3724      	adds	r7, #36	; 0x24
 800947a:	46bd      	mov	sp, r7
 800947c:	bc80      	pop	{r7}
 800947e:	4770      	bx	lr

08009480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3b01      	subs	r3, #1
 800948c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009490:	d301      	bcc.n	8009496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009492:	2301      	movs	r3, #1
 8009494:	e00f      	b.n	80094b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009496:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <SysTick_Config+0x40>)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3b01      	subs	r3, #1
 800949c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800949e:	210f      	movs	r1, #15
 80094a0:	f04f 30ff 	mov.w	r0, #4294967295
 80094a4:	f7ff ff90 	bl	80093c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80094a8:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <SysTick_Config+0x40>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80094ae:	4b04      	ldr	r3, [pc, #16]	; (80094c0 <SysTick_Config+0x40>)
 80094b0:	2207      	movs	r2, #7
 80094b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	e000e010 	.word	0xe000e010

080094c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff ff2d 	bl	800932c <__NVIC_SetPriorityGrouping>
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
 80094e0:	4603      	mov	r3, r0
 80094e2:	60b9      	str	r1, [r7, #8]
 80094e4:	607a      	str	r2, [r7, #4]
 80094e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80094ec:	f7ff ff42 	bl	8009374 <__NVIC_GetPriorityGrouping>
 80094f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	68b9      	ldr	r1, [r7, #8]
 80094f6:	6978      	ldr	r0, [r7, #20]
 80094f8:	f7ff ff90 	bl	800941c <NVIC_EncodePriority>
 80094fc:	4602      	mov	r2, r0
 80094fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009502:	4611      	mov	r1, r2
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff ff5f 	bl	80093c8 <__NVIC_SetPriority>
}
 800950a:	bf00      	nop
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	4603      	mov	r3, r0
 800951a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800951c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff ff35 	bl	8009390 <__NVIC_EnableIRQ>
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff ffa2 	bl	8009480 <SysTick_Config>
 800953c:	4603      	mov	r3, r0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009546:	b480      	push	{r7}
 8009548:	b085      	sub	sp, #20
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d008      	beq.n	8009570 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2204      	movs	r2, #4
 8009562:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e020      	b.n	80095b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 020e 	bic.w	r2, r2, #14
 800957e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0201 	bic.w	r2, r2, #1
 800958e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009598:	2101      	movs	r1, #1
 800959a:	fa01 f202 	lsl.w	r2, r1, r2
 800959e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bc80      	pop	{r7}
 80095ba:	4770      	bx	lr

080095bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d005      	beq.n	80095e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2204      	movs	r2, #4
 80095d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	73fb      	strb	r3, [r7, #15]
 80095de:	e0d6      	b.n	800978e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 020e 	bic.w	r2, r2, #14
 80095ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0201 	bic.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	461a      	mov	r2, r3
 8009606:	4b64      	ldr	r3, [pc, #400]	; (8009798 <HAL_DMA_Abort_IT+0x1dc>)
 8009608:	429a      	cmp	r2, r3
 800960a:	d958      	bls.n	80096be <HAL_DMA_Abort_IT+0x102>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a62      	ldr	r2, [pc, #392]	; (800979c <HAL_DMA_Abort_IT+0x1e0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d04f      	beq.n	80096b6 <HAL_DMA_Abort_IT+0xfa>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a61      	ldr	r2, [pc, #388]	; (80097a0 <HAL_DMA_Abort_IT+0x1e4>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d048      	beq.n	80096b2 <HAL_DMA_Abort_IT+0xf6>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a5f      	ldr	r2, [pc, #380]	; (80097a4 <HAL_DMA_Abort_IT+0x1e8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d040      	beq.n	80096ac <HAL_DMA_Abort_IT+0xf0>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a5e      	ldr	r2, [pc, #376]	; (80097a8 <HAL_DMA_Abort_IT+0x1ec>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d038      	beq.n	80096a6 <HAL_DMA_Abort_IT+0xea>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a5c      	ldr	r2, [pc, #368]	; (80097ac <HAL_DMA_Abort_IT+0x1f0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d030      	beq.n	80096a0 <HAL_DMA_Abort_IT+0xe4>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a5b      	ldr	r2, [pc, #364]	; (80097b0 <HAL_DMA_Abort_IT+0x1f4>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d028      	beq.n	800969a <HAL_DMA_Abort_IT+0xde>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a52      	ldr	r2, [pc, #328]	; (8009798 <HAL_DMA_Abort_IT+0x1dc>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d020      	beq.n	8009694 <HAL_DMA_Abort_IT+0xd8>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a57      	ldr	r2, [pc, #348]	; (80097b4 <HAL_DMA_Abort_IT+0x1f8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d019      	beq.n	8009690 <HAL_DMA_Abort_IT+0xd4>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a55      	ldr	r2, [pc, #340]	; (80097b8 <HAL_DMA_Abort_IT+0x1fc>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d012      	beq.n	800968c <HAL_DMA_Abort_IT+0xd0>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a54      	ldr	r2, [pc, #336]	; (80097bc <HAL_DMA_Abort_IT+0x200>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d00a      	beq.n	8009686 <HAL_DMA_Abort_IT+0xca>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a52      	ldr	r2, [pc, #328]	; (80097c0 <HAL_DMA_Abort_IT+0x204>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d102      	bne.n	8009680 <HAL_DMA_Abort_IT+0xc4>
 800967a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800967e:	e01b      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 8009680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009684:	e018      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 8009686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800968a:	e015      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 800968c:	2310      	movs	r3, #16
 800968e:	e013      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 8009690:	2301      	movs	r3, #1
 8009692:	e011      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 8009694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009698:	e00e      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 800969a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800969e:	e00b      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 80096a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096a4:	e008      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 80096a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096aa:	e005      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 80096ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096b0:	e002      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 80096b2:	2310      	movs	r3, #16
 80096b4:	e000      	b.n	80096b8 <HAL_DMA_Abort_IT+0xfc>
 80096b6:	2301      	movs	r3, #1
 80096b8:	4a42      	ldr	r2, [pc, #264]	; (80097c4 <HAL_DMA_Abort_IT+0x208>)
 80096ba:	6053      	str	r3, [r2, #4]
 80096bc:	e057      	b.n	800976e <HAL_DMA_Abort_IT+0x1b2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a36      	ldr	r2, [pc, #216]	; (800979c <HAL_DMA_Abort_IT+0x1e0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d04f      	beq.n	8009768 <HAL_DMA_Abort_IT+0x1ac>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a34      	ldr	r2, [pc, #208]	; (80097a0 <HAL_DMA_Abort_IT+0x1e4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d048      	beq.n	8009764 <HAL_DMA_Abort_IT+0x1a8>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a33      	ldr	r2, [pc, #204]	; (80097a4 <HAL_DMA_Abort_IT+0x1e8>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d040      	beq.n	800975e <HAL_DMA_Abort_IT+0x1a2>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a31      	ldr	r2, [pc, #196]	; (80097a8 <HAL_DMA_Abort_IT+0x1ec>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d038      	beq.n	8009758 <HAL_DMA_Abort_IT+0x19c>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a30      	ldr	r2, [pc, #192]	; (80097ac <HAL_DMA_Abort_IT+0x1f0>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d030      	beq.n	8009752 <HAL_DMA_Abort_IT+0x196>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a2e      	ldr	r2, [pc, #184]	; (80097b0 <HAL_DMA_Abort_IT+0x1f4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d028      	beq.n	800974c <HAL_DMA_Abort_IT+0x190>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a26      	ldr	r2, [pc, #152]	; (8009798 <HAL_DMA_Abort_IT+0x1dc>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d020      	beq.n	8009746 <HAL_DMA_Abort_IT+0x18a>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a2a      	ldr	r2, [pc, #168]	; (80097b4 <HAL_DMA_Abort_IT+0x1f8>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d019      	beq.n	8009742 <HAL_DMA_Abort_IT+0x186>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a29      	ldr	r2, [pc, #164]	; (80097b8 <HAL_DMA_Abort_IT+0x1fc>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d012      	beq.n	800973e <HAL_DMA_Abort_IT+0x182>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a27      	ldr	r2, [pc, #156]	; (80097bc <HAL_DMA_Abort_IT+0x200>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d00a      	beq.n	8009738 <HAL_DMA_Abort_IT+0x17c>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a26      	ldr	r2, [pc, #152]	; (80097c0 <HAL_DMA_Abort_IT+0x204>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d102      	bne.n	8009732 <HAL_DMA_Abort_IT+0x176>
 800972c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009730:	e01b      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 8009732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009736:	e018      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 8009738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800973c:	e015      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 800973e:	2310      	movs	r3, #16
 8009740:	e013      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 8009742:	2301      	movs	r3, #1
 8009744:	e011      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 8009746:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800974a:	e00e      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 800974c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009750:	e00b      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 8009752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009756:	e008      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 8009758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800975c:	e005      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 800975e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009762:	e002      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 8009764:	2310      	movs	r3, #16
 8009766:	e000      	b.n	800976a <HAL_DMA_Abort_IT+0x1ae>
 8009768:	2301      	movs	r3, #1
 800976a:	4a17      	ldr	r2, [pc, #92]	; (80097c8 <HAL_DMA_Abort_IT+0x20c>)
 800976c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009782:	2b00      	cmp	r3, #0
 8009784:	d003      	beq.n	800978e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
    } 
  }
  return status;
 800978e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	40020080 	.word	0x40020080
 800979c:	40020008 	.word	0x40020008
 80097a0:	4002001c 	.word	0x4002001c
 80097a4:	40020030 	.word	0x40020030
 80097a8:	40020044 	.word	0x40020044
 80097ac:	40020058 	.word	0x40020058
 80097b0:	4002006c 	.word	0x4002006c
 80097b4:	40020408 	.word	0x40020408
 80097b8:	4002041c 	.word	0x4002041c
 80097bc:	40020430 	.word	0x40020430
 80097c0:	40020444 	.word	0x40020444
 80097c4:	40020400 	.word	0x40020400
 80097c8:	40020000 	.word	0x40020000

080097cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b08b      	sub	sp, #44	; 0x2c
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80097d6:	2300      	movs	r3, #0
 80097d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80097da:	2300      	movs	r3, #0
 80097dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097de:	e179      	b.n	8009ad4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80097e0:	2201      	movs	r2, #1
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	fa02 f303 	lsl.w	r3, r2, r3
 80097e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	4013      	ands	r3, r2
 80097f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80097f4:	69ba      	ldr	r2, [r7, #24]
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	f040 8168 	bne.w	8009ace <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	4a96      	ldr	r2, [pc, #600]	; (8009a5c <HAL_GPIO_Init+0x290>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d05e      	beq.n	80098c6 <HAL_GPIO_Init+0xfa>
 8009808:	4a94      	ldr	r2, [pc, #592]	; (8009a5c <HAL_GPIO_Init+0x290>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d875      	bhi.n	80098fa <HAL_GPIO_Init+0x12e>
 800980e:	4a94      	ldr	r2, [pc, #592]	; (8009a60 <HAL_GPIO_Init+0x294>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d058      	beq.n	80098c6 <HAL_GPIO_Init+0xfa>
 8009814:	4a92      	ldr	r2, [pc, #584]	; (8009a60 <HAL_GPIO_Init+0x294>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d86f      	bhi.n	80098fa <HAL_GPIO_Init+0x12e>
 800981a:	4a92      	ldr	r2, [pc, #584]	; (8009a64 <HAL_GPIO_Init+0x298>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d052      	beq.n	80098c6 <HAL_GPIO_Init+0xfa>
 8009820:	4a90      	ldr	r2, [pc, #576]	; (8009a64 <HAL_GPIO_Init+0x298>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d869      	bhi.n	80098fa <HAL_GPIO_Init+0x12e>
 8009826:	4a90      	ldr	r2, [pc, #576]	; (8009a68 <HAL_GPIO_Init+0x29c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d04c      	beq.n	80098c6 <HAL_GPIO_Init+0xfa>
 800982c:	4a8e      	ldr	r2, [pc, #568]	; (8009a68 <HAL_GPIO_Init+0x29c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d863      	bhi.n	80098fa <HAL_GPIO_Init+0x12e>
 8009832:	4a8e      	ldr	r2, [pc, #568]	; (8009a6c <HAL_GPIO_Init+0x2a0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d046      	beq.n	80098c6 <HAL_GPIO_Init+0xfa>
 8009838:	4a8c      	ldr	r2, [pc, #560]	; (8009a6c <HAL_GPIO_Init+0x2a0>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d85d      	bhi.n	80098fa <HAL_GPIO_Init+0x12e>
 800983e:	2b12      	cmp	r3, #18
 8009840:	d82a      	bhi.n	8009898 <HAL_GPIO_Init+0xcc>
 8009842:	2b12      	cmp	r3, #18
 8009844:	d859      	bhi.n	80098fa <HAL_GPIO_Init+0x12e>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <HAL_GPIO_Init+0x80>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	080098c7 	.word	0x080098c7
 8009850:	080098a1 	.word	0x080098a1
 8009854:	080098b3 	.word	0x080098b3
 8009858:	080098f5 	.word	0x080098f5
 800985c:	080098fb 	.word	0x080098fb
 8009860:	080098fb 	.word	0x080098fb
 8009864:	080098fb 	.word	0x080098fb
 8009868:	080098fb 	.word	0x080098fb
 800986c:	080098fb 	.word	0x080098fb
 8009870:	080098fb 	.word	0x080098fb
 8009874:	080098fb 	.word	0x080098fb
 8009878:	080098fb 	.word	0x080098fb
 800987c:	080098fb 	.word	0x080098fb
 8009880:	080098fb 	.word	0x080098fb
 8009884:	080098fb 	.word	0x080098fb
 8009888:	080098fb 	.word	0x080098fb
 800988c:	080098fb 	.word	0x080098fb
 8009890:	080098a9 	.word	0x080098a9
 8009894:	080098bd 	.word	0x080098bd
 8009898:	4a75      	ldr	r2, [pc, #468]	; (8009a70 <HAL_GPIO_Init+0x2a4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d013      	beq.n	80098c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800989e:	e02c      	b.n	80098fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	623b      	str	r3, [r7, #32]
          break;
 80098a6:	e029      	b.n	80098fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	3304      	adds	r3, #4
 80098ae:	623b      	str	r3, [r7, #32]
          break;
 80098b0:	e024      	b.n	80098fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	3308      	adds	r3, #8
 80098b8:	623b      	str	r3, [r7, #32]
          break;
 80098ba:	e01f      	b.n	80098fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	330c      	adds	r3, #12
 80098c2:	623b      	str	r3, [r7, #32]
          break;
 80098c4:	e01a      	b.n	80098fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80098ce:	2304      	movs	r3, #4
 80098d0:	623b      	str	r3, [r7, #32]
          break;
 80098d2:	e013      	b.n	80098fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d105      	bne.n	80098e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098dc:	2308      	movs	r3, #8
 80098de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	611a      	str	r2, [r3, #16]
          break;
 80098e6:	e009      	b.n	80098fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098e8:	2308      	movs	r3, #8
 80098ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	615a      	str	r2, [r3, #20]
          break;
 80098f2:	e003      	b.n	80098fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80098f4:	2300      	movs	r3, #0
 80098f6:	623b      	str	r3, [r7, #32]
          break;
 80098f8:	e000      	b.n	80098fc <HAL_GPIO_Init+0x130>
          break;
 80098fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	2bff      	cmp	r3, #255	; 0xff
 8009900:	d801      	bhi.n	8009906 <HAL_GPIO_Init+0x13a>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	e001      	b.n	800990a <HAL_GPIO_Init+0x13e>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3304      	adds	r3, #4
 800990a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2bff      	cmp	r3, #255	; 0xff
 8009910:	d802      	bhi.n	8009918 <HAL_GPIO_Init+0x14c>
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	e002      	b.n	800991e <HAL_GPIO_Init+0x152>
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	3b08      	subs	r3, #8
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	210f      	movs	r1, #15
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	fa01 f303 	lsl.w	r3, r1, r3
 800992c:	43db      	mvns	r3, r3
 800992e:	401a      	ands	r2, r3
 8009930:	6a39      	ldr	r1, [r7, #32]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	fa01 f303 	lsl.w	r3, r1, r3
 8009938:	431a      	orrs	r2, r3
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80c1 	beq.w	8009ace <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800994c:	4b49      	ldr	r3, [pc, #292]	; (8009a74 <HAL_GPIO_Init+0x2a8>)
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	4a48      	ldr	r2, [pc, #288]	; (8009a74 <HAL_GPIO_Init+0x2a8>)
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	6193      	str	r3, [r2, #24]
 8009958:	4b46      	ldr	r3, [pc, #280]	; (8009a74 <HAL_GPIO_Init+0x2a8>)
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	60bb      	str	r3, [r7, #8]
 8009962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009964:	4a44      	ldr	r2, [pc, #272]	; (8009a78 <HAL_GPIO_Init+0x2ac>)
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	089b      	lsrs	r3, r3, #2
 800996a:	3302      	adds	r3, #2
 800996c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	220f      	movs	r2, #15
 800997c:	fa02 f303 	lsl.w	r3, r2, r3
 8009980:	43db      	mvns	r3, r3
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4013      	ands	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a3c      	ldr	r2, [pc, #240]	; (8009a7c <HAL_GPIO_Init+0x2b0>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d01f      	beq.n	80099d0 <HAL_GPIO_Init+0x204>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a3b      	ldr	r2, [pc, #236]	; (8009a80 <HAL_GPIO_Init+0x2b4>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d019      	beq.n	80099cc <HAL_GPIO_Init+0x200>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a3a      	ldr	r2, [pc, #232]	; (8009a84 <HAL_GPIO_Init+0x2b8>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d013      	beq.n	80099c8 <HAL_GPIO_Init+0x1fc>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a39      	ldr	r2, [pc, #228]	; (8009a88 <HAL_GPIO_Init+0x2bc>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d00d      	beq.n	80099c4 <HAL_GPIO_Init+0x1f8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a38      	ldr	r2, [pc, #224]	; (8009a8c <HAL_GPIO_Init+0x2c0>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d007      	beq.n	80099c0 <HAL_GPIO_Init+0x1f4>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a37      	ldr	r2, [pc, #220]	; (8009a90 <HAL_GPIO_Init+0x2c4>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d101      	bne.n	80099bc <HAL_GPIO_Init+0x1f0>
 80099b8:	2305      	movs	r3, #5
 80099ba:	e00a      	b.n	80099d2 <HAL_GPIO_Init+0x206>
 80099bc:	2306      	movs	r3, #6
 80099be:	e008      	b.n	80099d2 <HAL_GPIO_Init+0x206>
 80099c0:	2304      	movs	r3, #4
 80099c2:	e006      	b.n	80099d2 <HAL_GPIO_Init+0x206>
 80099c4:	2303      	movs	r3, #3
 80099c6:	e004      	b.n	80099d2 <HAL_GPIO_Init+0x206>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e002      	b.n	80099d2 <HAL_GPIO_Init+0x206>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e000      	b.n	80099d2 <HAL_GPIO_Init+0x206>
 80099d0:	2300      	movs	r3, #0
 80099d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d4:	f002 0203 	and.w	r2, r2, #3
 80099d8:	0092      	lsls	r2, r2, #2
 80099da:	4093      	lsls	r3, r2
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80099e2:	4925      	ldr	r1, [pc, #148]	; (8009a78 <HAL_GPIO_Init+0x2ac>)
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	089b      	lsrs	r3, r3, #2
 80099e8:	3302      	adds	r3, #2
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d006      	beq.n	8009a0a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80099fc:	4b25      	ldr	r3, [pc, #148]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	4924      	ldr	r1, [pc, #144]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	608b      	str	r3, [r1, #8]
 8009a08:	e006      	b.n	8009a18 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009a0a:	4b22      	ldr	r3, [pc, #136]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	43db      	mvns	r3, r3
 8009a12:	4920      	ldr	r1, [pc, #128]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d006      	beq.n	8009a32 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009a24:	4b1b      	ldr	r3, [pc, #108]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	491a      	ldr	r1, [pc, #104]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60cb      	str	r3, [r1, #12]
 8009a30:	e006      	b.n	8009a40 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009a32:	4b18      	ldr	r3, [pc, #96]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	43db      	mvns	r3, r3
 8009a3a:	4916      	ldr	r1, [pc, #88]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d025      	beq.n	8009a98 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009a4c:	4b11      	ldr	r3, [pc, #68]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	4910      	ldr	r1, [pc, #64]	; (8009a94 <HAL_GPIO_Init+0x2c8>)
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	604b      	str	r3, [r1, #4]
 8009a58:	e025      	b.n	8009aa6 <HAL_GPIO_Init+0x2da>
 8009a5a:	bf00      	nop
 8009a5c:	10320000 	.word	0x10320000
 8009a60:	10310000 	.word	0x10310000
 8009a64:	10220000 	.word	0x10220000
 8009a68:	10210000 	.word	0x10210000
 8009a6c:	10120000 	.word	0x10120000
 8009a70:	10110000 	.word	0x10110000
 8009a74:	40021000 	.word	0x40021000
 8009a78:	40010000 	.word	0x40010000
 8009a7c:	40010800 	.word	0x40010800
 8009a80:	40010c00 	.word	0x40010c00
 8009a84:	40011000 	.word	0x40011000
 8009a88:	40011400 	.word	0x40011400
 8009a8c:	40011800 	.word	0x40011800
 8009a90:	40011c00 	.word	0x40011c00
 8009a94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <HAL_GPIO_Init+0x324>)
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	43db      	mvns	r3, r3
 8009aa0:	4913      	ldr	r1, [pc, #76]	; (8009af0 <HAL_GPIO_Init+0x324>)
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d006      	beq.n	8009ac0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <HAL_GPIO_Init+0x324>)
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	490e      	ldr	r1, [pc, #56]	; (8009af0 <HAL_GPIO_Init+0x324>)
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	600b      	str	r3, [r1, #0]
 8009abe:	e006      	b.n	8009ace <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <HAL_GPIO_Init+0x324>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	43db      	mvns	r3, r3
 8009ac8:	4909      	ldr	r1, [pc, #36]	; (8009af0 <HAL_GPIO_Init+0x324>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	fa22 f303 	lsr.w	r3, r2, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f47f ae7e 	bne.w	80097e0 <HAL_GPIO_Init+0x14>
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	372c      	adds	r7, #44	; 0x2c
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bc80      	pop	{r7}
 8009aee:	4770      	bx	lr
 8009af0:	40010400 	.word	0x40010400

08009af4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b089      	sub	sp, #36	; 0x24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009afe:	2300      	movs	r3, #0
 8009b00:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009b02:	e0a6      	b.n	8009c52 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009b04:	2201      	movs	r2, #1
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	4013      	ands	r3, r2
 8009b10:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 8099 	beq.w	8009c4c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009b1a:	4a54      	ldr	r2, [pc, #336]	; (8009c6c <HAL_GPIO_DeInit+0x178>)
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	089b      	lsrs	r3, r3, #2
 8009b20:	3302      	adds	r3, #2
 8009b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b26:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	220f      	movs	r2, #15
 8009b32:	fa02 f303 	lsl.w	r3, r2, r3
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4013      	ands	r3, r2
 8009b3a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a4c      	ldr	r2, [pc, #304]	; (8009c70 <HAL_GPIO_DeInit+0x17c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d01f      	beq.n	8009b84 <HAL_GPIO_DeInit+0x90>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a4b      	ldr	r2, [pc, #300]	; (8009c74 <HAL_GPIO_DeInit+0x180>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d019      	beq.n	8009b80 <HAL_GPIO_DeInit+0x8c>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a4a      	ldr	r2, [pc, #296]	; (8009c78 <HAL_GPIO_DeInit+0x184>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d013      	beq.n	8009b7c <HAL_GPIO_DeInit+0x88>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a49      	ldr	r2, [pc, #292]	; (8009c7c <HAL_GPIO_DeInit+0x188>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d00d      	beq.n	8009b78 <HAL_GPIO_DeInit+0x84>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a48      	ldr	r2, [pc, #288]	; (8009c80 <HAL_GPIO_DeInit+0x18c>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d007      	beq.n	8009b74 <HAL_GPIO_DeInit+0x80>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a47      	ldr	r2, [pc, #284]	; (8009c84 <HAL_GPIO_DeInit+0x190>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d101      	bne.n	8009b70 <HAL_GPIO_DeInit+0x7c>
 8009b6c:	2305      	movs	r3, #5
 8009b6e:	e00a      	b.n	8009b86 <HAL_GPIO_DeInit+0x92>
 8009b70:	2306      	movs	r3, #6
 8009b72:	e008      	b.n	8009b86 <HAL_GPIO_DeInit+0x92>
 8009b74:	2304      	movs	r3, #4
 8009b76:	e006      	b.n	8009b86 <HAL_GPIO_DeInit+0x92>
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e004      	b.n	8009b86 <HAL_GPIO_DeInit+0x92>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e002      	b.n	8009b86 <HAL_GPIO_DeInit+0x92>
 8009b80:	2301      	movs	r3, #1
 8009b82:	e000      	b.n	8009b86 <HAL_GPIO_DeInit+0x92>
 8009b84:	2300      	movs	r3, #0
 8009b86:	69fa      	ldr	r2, [r7, #28]
 8009b88:	f002 0203 	and.w	r2, r2, #3
 8009b8c:	0092      	lsls	r2, r2, #2
 8009b8e:	4093      	lsls	r3, r2
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d132      	bne.n	8009bfc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009b96:	4b3c      	ldr	r3, [pc, #240]	; (8009c88 <HAL_GPIO_DeInit+0x194>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	43db      	mvns	r3, r3
 8009b9e:	493a      	ldr	r1, [pc, #232]	; (8009c88 <HAL_GPIO_DeInit+0x194>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009ba4:	4b38      	ldr	r3, [pc, #224]	; (8009c88 <HAL_GPIO_DeInit+0x194>)
 8009ba6:	685a      	ldr	r2, [r3, #4]
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	43db      	mvns	r3, r3
 8009bac:	4936      	ldr	r1, [pc, #216]	; (8009c88 <HAL_GPIO_DeInit+0x194>)
 8009bae:	4013      	ands	r3, r2
 8009bb0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009bb2:	4b35      	ldr	r3, [pc, #212]	; (8009c88 <HAL_GPIO_DeInit+0x194>)
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	4933      	ldr	r1, [pc, #204]	; (8009c88 <HAL_GPIO_DeInit+0x194>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009bc0:	4b31      	ldr	r3, [pc, #196]	; (8009c88 <HAL_GPIO_DeInit+0x194>)
 8009bc2:	689a      	ldr	r2, [r3, #8]
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	43db      	mvns	r3, r3
 8009bc8:	492f      	ldr	r1, [pc, #188]	; (8009c88 <HAL_GPIO_DeInit+0x194>)
 8009bca:	4013      	ands	r3, r2
 8009bcc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	f003 0303 	and.w	r3, r3, #3
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	220f      	movs	r2, #15
 8009bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bdc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009bde:	4a23      	ldr	r2, [pc, #140]	; (8009c6c <HAL_GPIO_DeInit+0x178>)
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	089b      	lsrs	r3, r3, #2
 8009be4:	3302      	adds	r3, #2
 8009be6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	43da      	mvns	r2, r3
 8009bee:	481f      	ldr	r0, [pc, #124]	; (8009c6c <HAL_GPIO_DeInit+0x178>)
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	089b      	lsrs	r3, r3, #2
 8009bf4:	400a      	ands	r2, r1
 8009bf6:	3302      	adds	r3, #2
 8009bf8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	2bff      	cmp	r3, #255	; 0xff
 8009c00:	d801      	bhi.n	8009c06 <HAL_GPIO_DeInit+0x112>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	e001      	b.n	8009c0a <HAL_GPIO_DeInit+0x116>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	2bff      	cmp	r3, #255	; 0xff
 8009c10:	d802      	bhi.n	8009c18 <HAL_GPIO_DeInit+0x124>
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	e002      	b.n	8009c1e <HAL_GPIO_DeInit+0x12a>
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	3b08      	subs	r3, #8
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	210f      	movs	r1, #15
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	fa01 f303 	lsl.w	r3, r1, r3
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	401a      	ands	r2, r3
 8009c30:	2104      	movs	r1, #4
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	fa01 f303 	lsl.w	r3, r1, r3
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	43db      	mvns	r3, r3
 8009c46:	401a      	ands	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	fa22 f303 	lsr.w	r3, r2, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f47f af52 	bne.w	8009b04 <HAL_GPIO_DeInit+0x10>
  }
}
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	3724      	adds	r7, #36	; 0x24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr
 8009c6c:	40010000 	.word	0x40010000
 8009c70:	40010800 	.word	0x40010800
 8009c74:	40010c00 	.word	0x40010c00
 8009c78:	40011000 	.word	0x40011000
 8009c7c:	40011400 	.word	0x40011400
 8009c80:	40011800 	.word	0x40011800
 8009c84:	40011c00 	.word	0x40011c00
 8009c88:	40010400 	.word	0x40010400

08009c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689a      	ldr	r2, [r3, #8]
 8009c9c:	887b      	ldrh	r3, [r7, #2]
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	73fb      	strb	r3, [r7, #15]
 8009ca8:	e001      	b.n	8009cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bc80      	pop	{r7}
 8009cb8:	4770      	bx	lr

08009cba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	807b      	strh	r3, [r7, #2]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009cca:	787b      	ldrb	r3, [r7, #1]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d003      	beq.n	8009cd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cd0:	887a      	ldrh	r2, [r7, #2]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009cd6:	e003      	b.n	8009ce0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009cd8:	887b      	ldrh	r3, [r7, #2]
 8009cda:	041a      	lsls	r2, r3, #16
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	611a      	str	r2, [r3, #16]
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bc80      	pop	{r7}
 8009ce8:	4770      	bx	lr

08009cea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009cfc:	887a      	ldrh	r2, [r7, #2]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4013      	ands	r3, r2
 8009d02:	041a      	lsls	r2, r3, #16
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	43d9      	mvns	r1, r3
 8009d08:	887b      	ldrh	r3, [r7, #2]
 8009d0a:	400b      	ands	r3, r1
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	611a      	str	r2, [r3, #16]
}
 8009d12:	bf00      	nop
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bc80      	pop	{r7}
 8009d1a:	4770      	bx	lr

08009d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e12b      	b.n	8009f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d106      	bne.n	8009d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fe fff8 	bl	8008d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2224      	movs	r2, #36	; 0x24
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 0201 	bic.w	r2, r2, #1
 8009d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d80:	f001 fdb8 	bl	800b8f4 <HAL_RCC_GetPCLK1Freq>
 8009d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	4a81      	ldr	r2, [pc, #516]	; (8009f90 <HAL_I2C_Init+0x274>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d807      	bhi.n	8009da0 <HAL_I2C_Init+0x84>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4a80      	ldr	r2, [pc, #512]	; (8009f94 <HAL_I2C_Init+0x278>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	bf94      	ite	ls
 8009d98:	2301      	movls	r3, #1
 8009d9a:	2300      	movhi	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	e006      	b.n	8009dae <HAL_I2C_Init+0x92>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a7d      	ldr	r2, [pc, #500]	; (8009f98 <HAL_I2C_Init+0x27c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	bf94      	ite	ls
 8009da8:	2301      	movls	r3, #1
 8009daa:	2300      	movhi	r3, #0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e0e7      	b.n	8009f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	4a78      	ldr	r2, [pc, #480]	; (8009f9c <HAL_I2C_Init+0x280>)
 8009dba:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbe:	0c9b      	lsrs	r3, r3, #18
 8009dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	4a6a      	ldr	r2, [pc, #424]	; (8009f90 <HAL_I2C_Init+0x274>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d802      	bhi.n	8009df0 <HAL_I2C_Init+0xd4>
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	3301      	adds	r3, #1
 8009dee:	e009      	b.n	8009e04 <HAL_I2C_Init+0xe8>
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	4a69      	ldr	r2, [pc, #420]	; (8009fa0 <HAL_I2C_Init+0x284>)
 8009dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009e00:	099b      	lsrs	r3, r3, #6
 8009e02:	3301      	adds	r3, #1
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6812      	ldr	r2, [r2, #0]
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	495c      	ldr	r1, [pc, #368]	; (8009f90 <HAL_I2C_Init+0x274>)
 8009e20:	428b      	cmp	r3, r1
 8009e22:	d819      	bhi.n	8009e58 <HAL_I2C_Init+0x13c>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	1e59      	subs	r1, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e32:	1c59      	adds	r1, r3, #1
 8009e34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e38:	400b      	ands	r3, r1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00a      	beq.n	8009e54 <HAL_I2C_Init+0x138>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	1e59      	subs	r1, r3, #1
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e52:	e051      	b.n	8009ef8 <HAL_I2C_Init+0x1dc>
 8009e54:	2304      	movs	r3, #4
 8009e56:	e04f      	b.n	8009ef8 <HAL_I2C_Init+0x1dc>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d111      	bne.n	8009e84 <HAL_I2C_Init+0x168>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	1e58      	subs	r0, r3, #1
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6859      	ldr	r1, [r3, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	440b      	add	r3, r1
 8009e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e72:	3301      	adds	r3, #1
 8009e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bf0c      	ite	eq
 8009e7c:	2301      	moveq	r3, #1
 8009e7e:	2300      	movne	r3, #0
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	e012      	b.n	8009eaa <HAL_I2C_Init+0x18e>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	1e58      	subs	r0, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6859      	ldr	r1, [r3, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	440b      	add	r3, r1
 8009e92:	0099      	lsls	r1, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bf0c      	ite	eq
 8009ea4:	2301      	moveq	r3, #1
 8009ea6:	2300      	movne	r3, #0
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <HAL_I2C_Init+0x196>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e022      	b.n	8009ef8 <HAL_I2C_Init+0x1dc>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10e      	bne.n	8009ed8 <HAL_I2C_Init+0x1bc>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1e58      	subs	r0, r3, #1
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6859      	ldr	r1, [r3, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	440b      	add	r3, r1
 8009ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ed6:	e00f      	b.n	8009ef8 <HAL_I2C_Init+0x1dc>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	1e58      	subs	r0, r3, #1
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6859      	ldr	r1, [r3, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	0099      	lsls	r1, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	6809      	ldr	r1, [r1, #0]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	69da      	ldr	r2, [r3, #28]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	6911      	ldr	r1, [r2, #16]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	68d2      	ldr	r2, [r2, #12]
 8009f32:	4311      	orrs	r1, r2
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	6812      	ldr	r2, [r2, #0]
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	695a      	ldr	r2, [r3, #20]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 0201 	orr.w	r2, r2, #1
 8009f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2220      	movs	r2, #32
 8009f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	000186a0 	.word	0x000186a0
 8009f94:	001e847f 	.word	0x001e847f
 8009f98:	003d08ff 	.word	0x003d08ff
 8009f9c:	431bde83 	.word	0x431bde83
 8009fa0:	10624dd3 	.word	0x10624dd3

08009fa4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e021      	b.n	8009ffa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2224      	movs	r2, #36	; 0x24
 8009fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0201 	bic.w	r2, r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7fe fef0 	bl	8008db4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af02      	add	r7, sp, #8
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	461a      	mov	r2, r3
 800a010:	460b      	mov	r3, r1
 800a012:	817b      	strh	r3, [r7, #10]
 800a014:	4613      	mov	r3, r2
 800a016:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a018:	f7ff f85e 	bl	80090d8 <HAL_GetTick>
 800a01c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b20      	cmp	r3, #32
 800a028:	f040 80e0 	bne.w	800a1ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	2319      	movs	r3, #25
 800a032:	2201      	movs	r2, #1
 800a034:	4970      	ldr	r1, [pc, #448]	; (800a1f8 <HAL_I2C_Master_Transmit+0x1f4>)
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 fe5c 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a042:	2302      	movs	r3, #2
 800a044:	e0d3      	b.n	800a1ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_I2C_Master_Transmit+0x50>
 800a050:	2302      	movs	r3, #2
 800a052:	e0cc      	b.n	800a1ee <HAL_I2C_Master_Transmit+0x1ea>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b01      	cmp	r3, #1
 800a068:	d007      	beq.n	800a07a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f042 0201 	orr.w	r2, r2, #1
 800a078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a088:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2221      	movs	r2, #33	; 0x21
 800a08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2210      	movs	r2, #16
 800a096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	893a      	ldrh	r2, [r7, #8]
 800a0aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	4a50      	ldr	r2, [pc, #320]	; (800a1fc <HAL_I2C_Master_Transmit+0x1f8>)
 800a0ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a0bc:	8979      	ldrh	r1, [r7, #10]
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	6a3a      	ldr	r2, [r7, #32]
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 fc16 	bl	800a8f4 <I2C_MasterRequestWrite>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e08d      	b.n	800a1ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	613b      	str	r3, [r7, #16]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	613b      	str	r3, [r7, #16]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	613b      	str	r3, [r7, #16]
 800a0e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a0e8:	e066      	b.n	800a1b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	6a39      	ldr	r1, [r7, #32]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 ff1a 	bl	800af28 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00d      	beq.n	800a116 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d107      	bne.n	800a112 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e06b      	b.n	800a1ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11a:	781a      	ldrb	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a130:	b29b      	uxth	r3, r3
 800a132:	3b01      	subs	r3, #1
 800a134:	b29a      	uxth	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a13e:	3b01      	subs	r3, #1
 800a140:	b29a      	uxth	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	2b04      	cmp	r3, #4
 800a152:	d11b      	bne.n	800a18c <HAL_I2C_Master_Transmit+0x188>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d017      	beq.n	800a18c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	781a      	ldrb	r2, [r3, #0]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a176:	b29b      	uxth	r3, r3
 800a178:	3b01      	subs	r3, #1
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	6a39      	ldr	r1, [r7, #32]
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 ff11 	bl	800afb8 <I2C_WaitOnBTFFlagUntilTimeout>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00d      	beq.n	800a1b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a0:	2b04      	cmp	r3, #4
 800a1a2:	d107      	bne.n	800a1b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e01a      	b.n	800a1ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d194      	bne.n	800a0ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e000      	b.n	800a1ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a1ec:	2302      	movs	r3, #2
  }
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	00100002 	.word	0x00100002
 800a1fc:	ffff0000 	.word	0xffff0000

0800a200 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af02      	add	r7, sp, #8
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	4608      	mov	r0, r1
 800a20a:	4611      	mov	r1, r2
 800a20c:	461a      	mov	r2, r3
 800a20e:	4603      	mov	r3, r0
 800a210:	817b      	strh	r3, [r7, #10]
 800a212:	460b      	mov	r3, r1
 800a214:	813b      	strh	r3, [r7, #8]
 800a216:	4613      	mov	r3, r2
 800a218:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a21a:	f7fe ff5d 	bl	80090d8 <HAL_GetTick>
 800a21e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b20      	cmp	r3, #32
 800a22a:	f040 80d9 	bne.w	800a3e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	2319      	movs	r3, #25
 800a234:	2201      	movs	r2, #1
 800a236:	496d      	ldr	r1, [pc, #436]	; (800a3ec <HAL_I2C_Mem_Write+0x1ec>)
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 fd5b 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a244:	2302      	movs	r3, #2
 800a246:	e0cc      	b.n	800a3e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d101      	bne.n	800a256 <HAL_I2C_Mem_Write+0x56>
 800a252:	2302      	movs	r3, #2
 800a254:	e0c5      	b.n	800a3e2 <HAL_I2C_Mem_Write+0x1e2>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d007      	beq.n	800a27c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0201 	orr.w	r2, r2, #1
 800a27a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a28a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2221      	movs	r2, #33	; 0x21
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2240      	movs	r2, #64	; 0x40
 800a298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a3a      	ldr	r2, [r7, #32]
 800a2a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a2ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4a4d      	ldr	r2, [pc, #308]	; (800a3f0 <HAL_I2C_Mem_Write+0x1f0>)
 800a2bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a2be:	88f8      	ldrh	r0, [r7, #6]
 800a2c0:	893a      	ldrh	r2, [r7, #8]
 800a2c2:	8979      	ldrh	r1, [r7, #10]
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 fb92 	bl	800a9f8 <I2C_RequestMemoryWrite>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d052      	beq.n	800a380 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e081      	b.n	800a3e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fe20 	bl	800af28 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00d      	beq.n	800a30a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d107      	bne.n	800a306 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a304:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e06b      	b.n	800a3e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	781a      	ldrb	r2, [r3, #0]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a324:	3b01      	subs	r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a330:	b29b      	uxth	r3, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	b29a      	uxth	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b04      	cmp	r3, #4
 800a346:	d11b      	bne.n	800a380 <HAL_I2C_Mem_Write+0x180>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d017      	beq.n	800a380 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	781a      	ldrb	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a36a:	3b01      	subs	r3, #1
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a376:	b29b      	uxth	r3, r3
 800a378:	3b01      	subs	r3, #1
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1aa      	bne.n	800a2de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 fe13 	bl	800afb8 <I2C_WaitOnBTFFlagUntilTimeout>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00d      	beq.n	800a3b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d107      	bne.n	800a3b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e016      	b.n	800a3e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	e000      	b.n	800a3e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a3e0:	2302      	movs	r3, #2
  }
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	00100002 	.word	0x00100002
 800a3f0:	ffff0000 	.word	0xffff0000

0800a3f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08c      	sub	sp, #48	; 0x30
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	4611      	mov	r1, r2
 800a400:	461a      	mov	r2, r3
 800a402:	4603      	mov	r3, r0
 800a404:	817b      	strh	r3, [r7, #10]
 800a406:	460b      	mov	r3, r1
 800a408:	813b      	strh	r3, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a412:	f7fe fe61 	bl	80090d8 <HAL_GetTick>
 800a416:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b20      	cmp	r3, #32
 800a422:	f040 8244 	bne.w	800a8ae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	2319      	movs	r3, #25
 800a42c:	2201      	movs	r2, #1
 800a42e:	4982      	ldr	r1, [pc, #520]	; (800a638 <HAL_I2C_Mem_Read+0x244>)
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 fc5f 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a43c:	2302      	movs	r3, #2
 800a43e:	e237      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a446:	2b01      	cmp	r3, #1
 800a448:	d101      	bne.n	800a44e <HAL_I2C_Mem_Read+0x5a>
 800a44a:	2302      	movs	r3, #2
 800a44c:	e230      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b01      	cmp	r3, #1
 800a462:	d007      	beq.n	800a474 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0201 	orr.w	r2, r2, #1
 800a472:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a482:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2222      	movs	r2, #34	; 0x22
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2240      	movs	r2, #64	; 0x40
 800a490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a49e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a4a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4a62      	ldr	r2, [pc, #392]	; (800a63c <HAL_I2C_Mem_Read+0x248>)
 800a4b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4b6:	88f8      	ldrh	r0, [r7, #6]
 800a4b8:	893a      	ldrh	r2, [r7, #8]
 800a4ba:	8979      	ldrh	r1, [r7, #10]
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 fb2c 	bl	800ab24 <I2C_RequestMemoryRead>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e1ec      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d113      	bne.n	800a506 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4de:	2300      	movs	r3, #0
 800a4e0:	61fb      	str	r3, [r7, #28]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	695b      	ldr	r3, [r3, #20]
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	61fb      	str	r3, [r7, #28]
 800a4f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	e1c0      	b.n	800a888 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d11e      	bne.n	800a54c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a51c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a51e:	b672      	cpsid	i
}
 800a520:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a522:	2300      	movs	r3, #0
 800a524:	61bb      	str	r3, [r7, #24]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	61bb      	str	r3, [r7, #24]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a546:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a548:	b662      	cpsie	i
}
 800a54a:	e035      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a550:	2b02      	cmp	r3, #2
 800a552:	d11e      	bne.n	800a592 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a562:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a564:	b672      	cpsid	i
}
 800a566:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a568:	2300      	movs	r3, #0
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	617b      	str	r3, [r7, #20]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	617b      	str	r3, [r7, #20]
 800a57c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a58c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a58e:	b662      	cpsie	i
}
 800a590:	e012      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	613b      	str	r3, [r7, #16]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	613b      	str	r3, [r7, #16]
 800a5b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a5b8:	e166      	b.n	800a888 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	f200 811f 	bhi.w	800a802 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d123      	bne.n	800a614 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fd39 	bl	800b048 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e167      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	b2d2      	uxtb	r2, r2
 800a5ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a608:	b29b      	uxth	r3, r3
 800a60a:	3b01      	subs	r3, #1
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a612:	e139      	b.n	800a888 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d152      	bne.n	800a6c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	2200      	movs	r2, #0
 800a624:	4906      	ldr	r1, [pc, #24]	; (800a640 <HAL_I2C_Mem_Read+0x24c>)
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 fb64 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d008      	beq.n	800a644 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e13c      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
 800a636:	bf00      	nop
 800a638:	00100002 	.word	0x00100002
 800a63c:	ffff0000 	.word	0xffff0000
 800a640:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a644:	b672      	cpsid	i
}
 800a646:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	691a      	ldr	r2, [r3, #16]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a662:	b2d2      	uxtb	r2, r2
 800a664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a674:	3b01      	subs	r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a680:	b29b      	uxth	r3, r3
 800a682:	3b01      	subs	r3, #1
 800a684:	b29a      	uxth	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a68a:	b662      	cpsie	i
}
 800a68c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	691a      	ldr	r2, [r3, #16]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6c0:	e0e2      	b.n	800a888 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	497b      	ldr	r1, [pc, #492]	; (800a8b8 <HAL_I2C_Mem_Read+0x4c4>)
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 fb11 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e0e9      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6ec:	b672      	cpsid	i
}
 800a6ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	691a      	ldr	r2, [r3, #16]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fa:	b2d2      	uxtb	r2, r2
 800a6fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a70c:	3b01      	subs	r3, #1
 800a70e:	b29a      	uxth	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a718:	b29b      	uxth	r3, r3
 800a71a:	3b01      	subs	r3, #1
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a722:	4b66      	ldr	r3, [pc, #408]	; (800a8bc <HAL_I2C_Mem_Read+0x4c8>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	08db      	lsrs	r3, r3, #3
 800a728:	4a65      	ldr	r2, [pc, #404]	; (800a8c0 <HAL_I2C_Mem_Read+0x4cc>)
 800a72a:	fba2 2303 	umull	r2, r3, r2, r3
 800a72e:	0a1a      	lsrs	r2, r3, #8
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	00da      	lsls	r2, r3, #3
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	3b01      	subs	r3, #1
 800a740:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d118      	bne.n	800a77a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2220      	movs	r2, #32
 800a752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	f043 0220 	orr.w	r2, r3, #32
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a76a:	b662      	cpsie	i
}
 800a76c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e09a      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b04      	cmp	r3, #4
 800a786:	d1d9      	bne.n	800a73c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	691a      	ldr	r2, [r3, #16]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a2:	b2d2      	uxtb	r2, r2
 800a7a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a7ca:	b662      	cpsie	i
}
 800a7cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	b2d2      	uxtb	r2, r2
 800a7da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a800:	e042      	b.n	800a888 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 fc1e 	bl	800b048 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e04c      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	691a      	ldr	r2, [r3, #16]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	b2d2      	uxtb	r2, r2
 800a822:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a832:	3b01      	subs	r3, #1
 800a834:	b29a      	uxth	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a83e:	b29b      	uxth	r3, r3
 800a840:	3b01      	subs	r3, #1
 800a842:	b29a      	uxth	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	f003 0304 	and.w	r3, r3, #4
 800a852:	2b04      	cmp	r3, #4
 800a854:	d118      	bne.n	800a888 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	691a      	ldr	r2, [r3, #16]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	b2d2      	uxtb	r2, r2
 800a862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a872:	3b01      	subs	r3, #1
 800a874:	b29a      	uxth	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a87e:	b29b      	uxth	r3, r3
 800a880:	3b01      	subs	r3, #1
 800a882:	b29a      	uxth	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f47f ae94 	bne.w	800a5ba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2220      	movs	r2, #32
 800a896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e000      	b.n	800a8b0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a8ae:	2302      	movs	r3, #2
  }
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3728      	adds	r7, #40	; 0x28
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	00010004 	.word	0x00010004
 800a8bc:	200009b8 	.word	0x200009b8
 800a8c0:	14f8b589 	.word	0x14f8b589

0800a8c4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d2:	b2db      	uxtb	r3, r3
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr

0800a8de <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bc80      	pop	{r7}
 800a8f2:	4770      	bx	lr

0800a8f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	607a      	str	r2, [r7, #4]
 800a8fe:	603b      	str	r3, [r7, #0]
 800a900:	460b      	mov	r3, r1
 800a902:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2b08      	cmp	r3, #8
 800a90e:	d006      	beq.n	800a91e <I2C_MasterRequestWrite+0x2a>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d003      	beq.n	800a91e <I2C_MasterRequestWrite+0x2a>
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a91c:	d108      	bne.n	800a930 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	e00b      	b.n	800a948 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a934:	2b12      	cmp	r3, #18
 800a936:	d107      	bne.n	800a948 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a946:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 f9cd 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00d      	beq.n	800a97c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a96e:	d103      	bne.n	800a978 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a978:	2303      	movs	r3, #3
 800a97a:	e035      	b.n	800a9e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a984:	d108      	bne.n	800a998 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a986:	897b      	ldrh	r3, [r7, #10]
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	461a      	mov	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a994:	611a      	str	r2, [r3, #16]
 800a996:	e01b      	b.n	800a9d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a998:	897b      	ldrh	r3, [r7, #10]
 800a99a:	11db      	asrs	r3, r3, #7
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0306 	and.w	r3, r3, #6
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f063 030f 	orn	r3, r3, #15
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	490e      	ldr	r1, [pc, #56]	; (800a9f0 <I2C_MasterRequestWrite+0xfc>)
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 fa16 	bl	800ade8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e010      	b.n	800a9e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a9c6:	897b      	ldrh	r3, [r7, #10]
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	4907      	ldr	r1, [pc, #28]	; (800a9f4 <I2C_MasterRequestWrite+0x100>)
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 fa06 	bl	800ade8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e000      	b.n	800a9e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	00010008 	.word	0x00010008
 800a9f4:	00010002 	.word	0x00010002

0800a9f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af02      	add	r7, sp, #8
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	4608      	mov	r0, r1
 800aa02:	4611      	mov	r1, r2
 800aa04:	461a      	mov	r2, r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	817b      	strh	r3, [r7, #10]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	813b      	strh	r3, [r7, #8]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 f960 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00d      	beq.n	800aa56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa48:	d103      	bne.n	800aa52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e05f      	b.n	800ab16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa56:	897b      	ldrh	r3, [r7, #10]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	6a3a      	ldr	r2, [r7, #32]
 800aa6a:	492d      	ldr	r1, [pc, #180]	; (800ab20 <I2C_RequestMemoryWrite+0x128>)
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 f9bb 	bl	800ade8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e04c      	b.n	800ab16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	617b      	str	r3, [r7, #20]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa94:	6a39      	ldr	r1, [r7, #32]
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 fa46 	bl	800af28 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00d      	beq.n	800aabe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d107      	bne.n	800aaba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e02b      	b.n	800ab16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aabe:	88fb      	ldrh	r3, [r7, #6]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d105      	bne.n	800aad0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aac4:	893b      	ldrh	r3, [r7, #8]
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	611a      	str	r2, [r3, #16]
 800aace:	e021      	b.n	800ab14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aad0:	893b      	ldrh	r3, [r7, #8]
 800aad2:	0a1b      	lsrs	r3, r3, #8
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aae0:	6a39      	ldr	r1, [r7, #32]
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 fa20 	bl	800af28 <I2C_WaitOnTXEFlagUntilTimeout>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00d      	beq.n	800ab0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	d107      	bne.n	800ab06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e005      	b.n	800ab16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab0a:	893b      	ldrh	r3, [r7, #8]
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	00010002 	.word	0x00010002

0800ab24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af02      	add	r7, sp, #8
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	4611      	mov	r1, r2
 800ab30:	461a      	mov	r2, r3
 800ab32:	4603      	mov	r3, r0
 800ab34:	817b      	strh	r3, [r7, #10]
 800ab36:	460b      	mov	r3, r1
 800ab38:	813b      	strh	r3, [r7, #8]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 f8c2 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00d      	beq.n	800ab92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab84:	d103      	bne.n	800ab8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e0aa      	b.n	800ace8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab92:	897b      	ldrh	r3, [r7, #10]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	461a      	mov	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	6a3a      	ldr	r2, [r7, #32]
 800aba6:	4952      	ldr	r1, [pc, #328]	; (800acf0 <I2C_RequestMemoryRead+0x1cc>)
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 f91d 	bl	800ade8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e097      	b.n	800ace8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abb8:	2300      	movs	r3, #0
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd0:	6a39      	ldr	r1, [r7, #32]
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f9a8 	bl	800af28 <I2C_WaitOnTXEFlagUntilTimeout>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00d      	beq.n	800abfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	2b04      	cmp	r3, #4
 800abe4:	d107      	bne.n	800abf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e076      	b.n	800ace8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abfa:	88fb      	ldrh	r3, [r7, #6]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d105      	bne.n	800ac0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac00:	893b      	ldrh	r3, [r7, #8]
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	611a      	str	r2, [r3, #16]
 800ac0a:	e021      	b.n	800ac50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ac0c:	893b      	ldrh	r3, [r7, #8]
 800ac0e:	0a1b      	lsrs	r3, r3, #8
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	b2da      	uxtb	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac1c:	6a39      	ldr	r1, [r7, #32]
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 f982 	bl	800af28 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00d      	beq.n	800ac46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	d107      	bne.n	800ac42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e050      	b.n	800ace8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac46:	893b      	ldrh	r3, [r7, #8]
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac52:	6a39      	ldr	r1, [r7, #32]
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 f967 	bl	800af28 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00d      	beq.n	800ac7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d107      	bne.n	800ac78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e035      	b.n	800ace8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f000 f82b 	bl	800acf4 <I2C_WaitOnFlagUntilTimeout>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00d      	beq.n	800acc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acb2:	d103      	bne.n	800acbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800acbc:	2303      	movs	r3, #3
 800acbe:	e013      	b.n	800ace8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800acc0:	897b      	ldrh	r3, [r7, #10]
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f043 0301 	orr.w	r3, r3, #1
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	6a3a      	ldr	r2, [r7, #32]
 800acd4:	4906      	ldr	r1, [pc, #24]	; (800acf0 <I2C_RequestMemoryRead+0x1cc>)
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f886 	bl	800ade8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e000      	b.n	800ace8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3718      	adds	r7, #24
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	00010002 	.word	0x00010002

0800acf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	4613      	mov	r3, r2
 800ad02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad04:	e048      	b.n	800ad98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0c:	d044      	beq.n	800ad98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0e:	f7fe f9e3 	bl	80090d8 <HAL_GetTick>
 800ad12:	4602      	mov	r2, r0
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d302      	bcc.n	800ad24 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d139      	bne.n	800ad98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d10d      	bne.n	800ad4a <I2C_WaitOnFlagUntilTimeout+0x56>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	43da      	mvns	r2, r3
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	4013      	ands	r3, r2
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	bf0c      	ite	eq
 800ad40:	2301      	moveq	r3, #1
 800ad42:	2300      	movne	r3, #0
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	461a      	mov	r2, r3
 800ad48:	e00c      	b.n	800ad64 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	43da      	mvns	r2, r3
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	4013      	ands	r3, r2
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	bf0c      	ite	eq
 800ad5c:	2301      	moveq	r3, #1
 800ad5e:	2300      	movne	r3, #0
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	461a      	mov	r2, r3
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d116      	bne.n	800ad98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2220      	movs	r2, #32
 800ad74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad84:	f043 0220 	orr.w	r2, r3, #32
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e023      	b.n	800ade0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	0c1b      	lsrs	r3, r3, #16
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d10d      	bne.n	800adbe <I2C_WaitOnFlagUntilTimeout+0xca>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	43da      	mvns	r2, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	4013      	ands	r3, r2
 800adae:	b29b      	uxth	r3, r3
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	bf0c      	ite	eq
 800adb4:	2301      	moveq	r3, #1
 800adb6:	2300      	movne	r3, #0
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	461a      	mov	r2, r3
 800adbc:	e00c      	b.n	800add8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	43da      	mvns	r2, r3
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	4013      	ands	r3, r2
 800adca:	b29b      	uxth	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	bf0c      	ite	eq
 800add0:	2301      	moveq	r3, #1
 800add2:	2300      	movne	r3, #0
 800add4:	b2db      	uxtb	r3, r3
 800add6:	461a      	mov	r2, r3
 800add8:	79fb      	ldrb	r3, [r7, #7]
 800adda:	429a      	cmp	r2, r3
 800addc:	d093      	beq.n	800ad06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800adf6:	e071      	b.n	800aedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae06:	d123      	bne.n	800ae50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3c:	f043 0204 	orr.w	r2, r3, #4
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e067      	b.n	800af20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae56:	d041      	beq.n	800aedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae58:	f7fe f93e 	bl	80090d8 <HAL_GetTick>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d302      	bcc.n	800ae6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d136      	bne.n	800aedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	0c1b      	lsrs	r3, r3, #16
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d10c      	bne.n	800ae92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	43da      	mvns	r2, r3
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	4013      	ands	r3, r2
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bf14      	ite	ne
 800ae8a:	2301      	movne	r3, #1
 800ae8c:	2300      	moveq	r3, #0
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	e00b      	b.n	800aeaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	43da      	mvns	r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	bf14      	ite	ne
 800aea4:	2301      	movne	r3, #1
 800aea6:	2300      	moveq	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d016      	beq.n	800aedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2220      	movs	r2, #32
 800aeb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec8:	f043 0220 	orr.w	r2, r3, #32
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e021      	b.n	800af20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	0c1b      	lsrs	r3, r3, #16
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d10c      	bne.n	800af00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	43da      	mvns	r2, r3
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	4013      	ands	r3, r2
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bf14      	ite	ne
 800aef8:	2301      	movne	r3, #1
 800aefa:	2300      	moveq	r3, #0
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	e00b      	b.n	800af18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	43da      	mvns	r2, r3
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	4013      	ands	r3, r2
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bf14      	ite	ne
 800af12:	2301      	movne	r3, #1
 800af14:	2300      	moveq	r3, #0
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f47f af6d 	bne.w	800adf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af34:	e034      	b.n	800afa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 f8e3 	bl	800b102 <I2C_IsAcknowledgeFailed>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e034      	b.n	800afb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4c:	d028      	beq.n	800afa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af4e:	f7fe f8c3 	bl	80090d8 <HAL_GetTick>
 800af52:	4602      	mov	r2, r0
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d302      	bcc.n	800af64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d11d      	bne.n	800afa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6e:	2b80      	cmp	r3, #128	; 0x80
 800af70:	d016      	beq.n	800afa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2200      	movs	r2, #0
 800af76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2220      	movs	r2, #32
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8c:	f043 0220 	orr.w	r2, r3, #32
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e007      	b.n	800afb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	695b      	ldr	r3, [r3, #20]
 800afa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afaa:	2b80      	cmp	r3, #128	; 0x80
 800afac:	d1c3      	bne.n	800af36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800afc4:	e034      	b.n	800b030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 f89b 	bl	800b102 <I2C_IsAcknowledgeFailed>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e034      	b.n	800b040 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afdc:	d028      	beq.n	800b030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afde:	f7fe f87b 	bl	80090d8 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	429a      	cmp	r2, r3
 800afec:	d302      	bcc.n	800aff4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d11d      	bne.n	800b030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	f003 0304 	and.w	r3, r3, #4
 800affe:	2b04      	cmp	r3, #4
 800b000:	d016      	beq.n	800b030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2220      	movs	r2, #32
 800b00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01c:	f043 0220 	orr.w	r2, r3, #32
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	e007      	b.n	800b040 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d1c3      	bne.n	800afc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b054:	e049      	b.n	800b0ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2b10      	cmp	r3, #16
 800b062:	d119      	bne.n	800b098 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f06f 0210 	mvn.w	r2, #16
 800b06c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2220      	movs	r2, #32
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e030      	b.n	800b0fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b098:	f7fe f81e 	bl	80090d8 <HAL_GetTick>
 800b09c:	4602      	mov	r2, r0
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d302      	bcc.n	800b0ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d11d      	bne.n	800b0ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b8:	2b40      	cmp	r3, #64	; 0x40
 800b0ba:	d016      	beq.n	800b0ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2220      	movs	r2, #32
 800b0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d6:	f043 0220 	orr.w	r2, r3, #32
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e007      	b.n	800b0fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f4:	2b40      	cmp	r3, #64	; 0x40
 800b0f6:	d1ae      	bne.n	800b056 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b118:	d11b      	bne.n	800b152 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b122:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13e:	f043 0204 	orr.w	r2, r3, #4
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e000      	b.n	800b154 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr
	...

0800b160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e272      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 8087 	beq.w	800b28e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b180:	4b92      	ldr	r3, [pc, #584]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f003 030c 	and.w	r3, r3, #12
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d00c      	beq.n	800b1a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b18c:	4b8f      	ldr	r3, [pc, #572]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	f003 030c 	and.w	r3, r3, #12
 800b194:	2b08      	cmp	r3, #8
 800b196:	d112      	bne.n	800b1be <HAL_RCC_OscConfig+0x5e>
 800b198:	4b8c      	ldr	r3, [pc, #560]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a4:	d10b      	bne.n	800b1be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1a6:	4b89      	ldr	r3, [pc, #548]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d06c      	beq.n	800b28c <HAL_RCC_OscConfig+0x12c>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d168      	bne.n	800b28c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e24c      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1c6:	d106      	bne.n	800b1d6 <HAL_RCC_OscConfig+0x76>
 800b1c8:	4b80      	ldr	r3, [pc, #512]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a7f      	ldr	r2, [pc, #508]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b1ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	e02e      	b.n	800b234 <HAL_RCC_OscConfig+0xd4>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10c      	bne.n	800b1f8 <HAL_RCC_OscConfig+0x98>
 800b1de:	4b7b      	ldr	r3, [pc, #492]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a7a      	ldr	r2, [pc, #488]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b1e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	4b78      	ldr	r3, [pc, #480]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a77      	ldr	r2, [pc, #476]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b1f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	e01d      	b.n	800b234 <HAL_RCC_OscConfig+0xd4>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b200:	d10c      	bne.n	800b21c <HAL_RCC_OscConfig+0xbc>
 800b202:	4b72      	ldr	r3, [pc, #456]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a71      	ldr	r2, [pc, #452]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	4b6f      	ldr	r3, [pc, #444]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a6e      	ldr	r2, [pc, #440]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b218:	6013      	str	r3, [r2, #0]
 800b21a:	e00b      	b.n	800b234 <HAL_RCC_OscConfig+0xd4>
 800b21c:	4b6b      	ldr	r3, [pc, #428]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a6a      	ldr	r2, [pc, #424]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	4b68      	ldr	r3, [pc, #416]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a67      	ldr	r2, [pc, #412]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b22e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d013      	beq.n	800b264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b23c:	f7fd ff4c 	bl	80090d8 <HAL_GetTick>
 800b240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b242:	e008      	b.n	800b256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b244:	f7fd ff48 	bl	80090d8 <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	2b64      	cmp	r3, #100	; 0x64
 800b250:	d901      	bls.n	800b256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e200      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b256:	4b5d      	ldr	r3, [pc, #372]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d0f0      	beq.n	800b244 <HAL_RCC_OscConfig+0xe4>
 800b262:	e014      	b.n	800b28e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b264:	f7fd ff38 	bl	80090d8 <HAL_GetTick>
 800b268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b26a:	e008      	b.n	800b27e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b26c:	f7fd ff34 	bl	80090d8 <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	2b64      	cmp	r3, #100	; 0x64
 800b278:	d901      	bls.n	800b27e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b27a:	2303      	movs	r3, #3
 800b27c:	e1ec      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b27e:	4b53      	ldr	r3, [pc, #332]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f0      	bne.n	800b26c <HAL_RCC_OscConfig+0x10c>
 800b28a:	e000      	b.n	800b28e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b28c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b00      	cmp	r3, #0
 800b298:	d063      	beq.n	800b362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b29a:	4b4c      	ldr	r3, [pc, #304]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f003 030c 	and.w	r3, r3, #12
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00b      	beq.n	800b2be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b2a6:	4b49      	ldr	r3, [pc, #292]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f003 030c 	and.w	r3, r3, #12
 800b2ae:	2b08      	cmp	r3, #8
 800b2b0:	d11c      	bne.n	800b2ec <HAL_RCC_OscConfig+0x18c>
 800b2b2:	4b46      	ldr	r3, [pc, #280]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d116      	bne.n	800b2ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2be:	4b43      	ldr	r3, [pc, #268]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d005      	beq.n	800b2d6 <HAL_RCC_OscConfig+0x176>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d001      	beq.n	800b2d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e1c0      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2d6:	4b3d      	ldr	r3, [pc, #244]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	4939      	ldr	r1, [pc, #228]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2ea:	e03a      	b.n	800b362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d020      	beq.n	800b336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b2f4:	4b36      	ldr	r3, [pc, #216]	; (800b3d0 <HAL_RCC_OscConfig+0x270>)
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2fa:	f7fd feed 	bl	80090d8 <HAL_GetTick>
 800b2fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b300:	e008      	b.n	800b314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b302:	f7fd fee9 	bl	80090d8 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d901      	bls.n	800b314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e1a1      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b314:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0302 	and.w	r3, r3, #2
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0f0      	beq.n	800b302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b320:	4b2a      	ldr	r3, [pc, #168]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	00db      	lsls	r3, r3, #3
 800b32e:	4927      	ldr	r1, [pc, #156]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b330:	4313      	orrs	r3, r2
 800b332:	600b      	str	r3, [r1, #0]
 800b334:	e015      	b.n	800b362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b336:	4b26      	ldr	r3, [pc, #152]	; (800b3d0 <HAL_RCC_OscConfig+0x270>)
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b33c:	f7fd fecc 	bl	80090d8 <HAL_GetTick>
 800b340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b342:	e008      	b.n	800b356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b344:	f7fd fec8 	bl	80090d8 <HAL_GetTick>
 800b348:	4602      	mov	r2, r0
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d901      	bls.n	800b356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	e180      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b356:	4b1d      	ldr	r3, [pc, #116]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 0302 	and.w	r3, r3, #2
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1f0      	bne.n	800b344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0308 	and.w	r3, r3, #8
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d03a      	beq.n	800b3e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	699b      	ldr	r3, [r3, #24]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d019      	beq.n	800b3aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b376:	4b17      	ldr	r3, [pc, #92]	; (800b3d4 <HAL_RCC_OscConfig+0x274>)
 800b378:	2201      	movs	r2, #1
 800b37a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b37c:	f7fd feac 	bl	80090d8 <HAL_GetTick>
 800b380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b382:	e008      	b.n	800b396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b384:	f7fd fea8 	bl	80090d8 <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d901      	bls.n	800b396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e160      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b396:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <HAL_RCC_OscConfig+0x26c>)
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39a:	f003 0302 	and.w	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0f0      	beq.n	800b384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	f000 face 	bl	800b944 <RCC_Delay>
 800b3a8:	e01c      	b.n	800b3e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b3aa:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <HAL_RCC_OscConfig+0x274>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b3b0:	f7fd fe92 	bl	80090d8 <HAL_GetTick>
 800b3b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b3b6:	e00f      	b.n	800b3d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3b8:	f7fd fe8e 	bl	80090d8 <HAL_GetTick>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d908      	bls.n	800b3d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e146      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
 800b3ca:	bf00      	nop
 800b3cc:	40021000 	.word	0x40021000
 800b3d0:	42420000 	.word	0x42420000
 800b3d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b3d8:	4b92      	ldr	r3, [pc, #584]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1e9      	bne.n	800b3b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0304 	and.w	r3, r3, #4
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 80a6 	beq.w	800b53e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b3f6:	4b8b      	ldr	r3, [pc, #556]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b3f8:	69db      	ldr	r3, [r3, #28]
 800b3fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10d      	bne.n	800b41e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b402:	4b88      	ldr	r3, [pc, #544]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	4a87      	ldr	r2, [pc, #540]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b40c:	61d3      	str	r3, [r2, #28]
 800b40e:	4b85      	ldr	r3, [pc, #532]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b410:	69db      	ldr	r3, [r3, #28]
 800b412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b416:	60bb      	str	r3, [r7, #8]
 800b418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b41a:	2301      	movs	r3, #1
 800b41c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b41e:	4b82      	ldr	r3, [pc, #520]	; (800b628 <HAL_RCC_OscConfig+0x4c8>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b426:	2b00      	cmp	r3, #0
 800b428:	d118      	bne.n	800b45c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b42a:	4b7f      	ldr	r3, [pc, #508]	; (800b628 <HAL_RCC_OscConfig+0x4c8>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a7e      	ldr	r2, [pc, #504]	; (800b628 <HAL_RCC_OscConfig+0x4c8>)
 800b430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b436:	f7fd fe4f 	bl	80090d8 <HAL_GetTick>
 800b43a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b43c:	e008      	b.n	800b450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b43e:	f7fd fe4b 	bl	80090d8 <HAL_GetTick>
 800b442:	4602      	mov	r2, r0
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	2b64      	cmp	r3, #100	; 0x64
 800b44a:	d901      	bls.n	800b450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b44c:	2303      	movs	r3, #3
 800b44e:	e103      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b450:	4b75      	ldr	r3, [pc, #468]	; (800b628 <HAL_RCC_OscConfig+0x4c8>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d0f0      	beq.n	800b43e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d106      	bne.n	800b472 <HAL_RCC_OscConfig+0x312>
 800b464:	4b6f      	ldr	r3, [pc, #444]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	4a6e      	ldr	r2, [pc, #440]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b46a:	f043 0301 	orr.w	r3, r3, #1
 800b46e:	6213      	str	r3, [r2, #32]
 800b470:	e02d      	b.n	800b4ce <HAL_RCC_OscConfig+0x36e>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10c      	bne.n	800b494 <HAL_RCC_OscConfig+0x334>
 800b47a:	4b6a      	ldr	r3, [pc, #424]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	4a69      	ldr	r2, [pc, #420]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b480:	f023 0301 	bic.w	r3, r3, #1
 800b484:	6213      	str	r3, [r2, #32]
 800b486:	4b67      	ldr	r3, [pc, #412]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	4a66      	ldr	r2, [pc, #408]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b48c:	f023 0304 	bic.w	r3, r3, #4
 800b490:	6213      	str	r3, [r2, #32]
 800b492:	e01c      	b.n	800b4ce <HAL_RCC_OscConfig+0x36e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	2b05      	cmp	r3, #5
 800b49a:	d10c      	bne.n	800b4b6 <HAL_RCC_OscConfig+0x356>
 800b49c:	4b61      	ldr	r3, [pc, #388]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b49e:	6a1b      	ldr	r3, [r3, #32]
 800b4a0:	4a60      	ldr	r2, [pc, #384]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b4a2:	f043 0304 	orr.w	r3, r3, #4
 800b4a6:	6213      	str	r3, [r2, #32]
 800b4a8:	4b5e      	ldr	r3, [pc, #376]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
 800b4ac:	4a5d      	ldr	r2, [pc, #372]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b4ae:	f043 0301 	orr.w	r3, r3, #1
 800b4b2:	6213      	str	r3, [r2, #32]
 800b4b4:	e00b      	b.n	800b4ce <HAL_RCC_OscConfig+0x36e>
 800b4b6:	4b5b      	ldr	r3, [pc, #364]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	4a5a      	ldr	r2, [pc, #360]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b4bc:	f023 0301 	bic.w	r3, r3, #1
 800b4c0:	6213      	str	r3, [r2, #32]
 800b4c2:	4b58      	ldr	r3, [pc, #352]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	4a57      	ldr	r2, [pc, #348]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b4c8:	f023 0304 	bic.w	r3, r3, #4
 800b4cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d015      	beq.n	800b502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4d6:	f7fd fdff 	bl	80090d8 <HAL_GetTick>
 800b4da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4dc:	e00a      	b.n	800b4f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4de:	f7fd fdfb 	bl	80090d8 <HAL_GetTick>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d901      	bls.n	800b4f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e0b1      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4f4:	4b4b      	ldr	r3, [pc, #300]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b4f6:	6a1b      	ldr	r3, [r3, #32]
 800b4f8:	f003 0302 	and.w	r3, r3, #2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0ee      	beq.n	800b4de <HAL_RCC_OscConfig+0x37e>
 800b500:	e014      	b.n	800b52c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b502:	f7fd fde9 	bl	80090d8 <HAL_GetTick>
 800b506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b508:	e00a      	b.n	800b520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b50a:	f7fd fde5 	bl	80090d8 <HAL_GetTick>
 800b50e:	4602      	mov	r2, r0
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	1ad3      	subs	r3, r2, r3
 800b514:	f241 3288 	movw	r2, #5000	; 0x1388
 800b518:	4293      	cmp	r3, r2
 800b51a:	d901      	bls.n	800b520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e09b      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b520:	4b40      	ldr	r3, [pc, #256]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	f003 0302 	and.w	r3, r3, #2
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1ee      	bne.n	800b50a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b52c:	7dfb      	ldrb	r3, [r7, #23]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d105      	bne.n	800b53e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b532:	4b3c      	ldr	r3, [pc, #240]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	4a3b      	ldr	r2, [pc, #236]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b53c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 8087 	beq.w	800b656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b548:	4b36      	ldr	r3, [pc, #216]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	f003 030c 	and.w	r3, r3, #12
 800b550:	2b08      	cmp	r3, #8
 800b552:	d061      	beq.n	800b618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	69db      	ldr	r3, [r3, #28]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d146      	bne.n	800b5ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b55c:	4b33      	ldr	r3, [pc, #204]	; (800b62c <HAL_RCC_OscConfig+0x4cc>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b562:	f7fd fdb9 	bl	80090d8 <HAL_GetTick>
 800b566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b568:	e008      	b.n	800b57c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b56a:	f7fd fdb5 	bl	80090d8 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	2b02      	cmp	r3, #2
 800b576:	d901      	bls.n	800b57c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e06d      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b57c:	4b29      	ldr	r3, [pc, #164]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1f0      	bne.n	800b56a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b590:	d108      	bne.n	800b5a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	4921      	ldr	r1, [pc, #132]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b5a4:	4b1f      	ldr	r3, [pc, #124]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a19      	ldr	r1, [r3, #32]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	491b      	ldr	r1, [pc, #108]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5bc:	4b1b      	ldr	r3, [pc, #108]	; (800b62c <HAL_RCC_OscConfig+0x4cc>)
 800b5be:	2201      	movs	r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5c2:	f7fd fd89 	bl	80090d8 <HAL_GetTick>
 800b5c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5c8:	e008      	b.n	800b5dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5ca:	f7fd fd85 	bl	80090d8 <HAL_GetTick>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d901      	bls.n	800b5dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e03d      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5dc:	4b11      	ldr	r3, [pc, #68]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0f0      	beq.n	800b5ca <HAL_RCC_OscConfig+0x46a>
 800b5e8:	e035      	b.n	800b656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5ea:	4b10      	ldr	r3, [pc, #64]	; (800b62c <HAL_RCC_OscConfig+0x4cc>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5f0:	f7fd fd72 	bl	80090d8 <HAL_GetTick>
 800b5f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b5f6:	e008      	b.n	800b60a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5f8:	f7fd fd6e 	bl	80090d8 <HAL_GetTick>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	2b02      	cmp	r3, #2
 800b604:	d901      	bls.n	800b60a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b606:	2303      	movs	r3, #3
 800b608:	e026      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b60a:	4b06      	ldr	r3, [pc, #24]	; (800b624 <HAL_RCC_OscConfig+0x4c4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1f0      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x498>
 800b616:	e01e      	b.n	800b656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	69db      	ldr	r3, [r3, #28]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d107      	bne.n	800b630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e019      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
 800b624:	40021000 	.word	0x40021000
 800b628:	40007000 	.word	0x40007000
 800b62c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b630:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <HAL_RCC_OscConfig+0x500>)
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	429a      	cmp	r2, r3
 800b642:	d106      	bne.n	800b652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b64e:	429a      	cmp	r2, r3
 800b650:	d001      	beq.n	800b656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e000      	b.n	800b658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	40021000 	.word	0x40021000

0800b664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e0d0      	b.n	800b81a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b678:	4b6a      	ldr	r3, [pc, #424]	; (800b824 <HAL_RCC_ClockConfig+0x1c0>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0307 	and.w	r3, r3, #7
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d910      	bls.n	800b6a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b686:	4b67      	ldr	r3, [pc, #412]	; (800b824 <HAL_RCC_ClockConfig+0x1c0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f023 0207 	bic.w	r2, r3, #7
 800b68e:	4965      	ldr	r1, [pc, #404]	; (800b824 <HAL_RCC_ClockConfig+0x1c0>)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	4313      	orrs	r3, r2
 800b694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b696:	4b63      	ldr	r3, [pc, #396]	; (800b824 <HAL_RCC_ClockConfig+0x1c0>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0307 	and.w	r3, r3, #7
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d001      	beq.n	800b6a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e0b8      	b.n	800b81a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0302 	and.w	r3, r3, #2
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d020      	beq.n	800b6f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d005      	beq.n	800b6cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b6c0:	4b59      	ldr	r3, [pc, #356]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	4a58      	ldr	r2, [pc, #352]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b6c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b6ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0308 	and.w	r3, r3, #8
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d005      	beq.n	800b6e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6d8:	4b53      	ldr	r3, [pc, #332]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	4a52      	ldr	r2, [pc, #328]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b6de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b6e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6e4:	4b50      	ldr	r3, [pc, #320]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	494d      	ldr	r1, [pc, #308]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d040      	beq.n	800b784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d107      	bne.n	800b71a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b70a:	4b47      	ldr	r3, [pc, #284]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b712:	2b00      	cmp	r3, #0
 800b714:	d115      	bne.n	800b742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e07f      	b.n	800b81a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d107      	bne.n	800b732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b722:	4b41      	ldr	r3, [pc, #260]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d109      	bne.n	800b742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e073      	b.n	800b81a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b732:	4b3d      	ldr	r3, [pc, #244]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e06b      	b.n	800b81a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b742:	4b39      	ldr	r3, [pc, #228]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f023 0203 	bic.w	r2, r3, #3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	4936      	ldr	r1, [pc, #216]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b750:	4313      	orrs	r3, r2
 800b752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b754:	f7fd fcc0 	bl	80090d8 <HAL_GetTick>
 800b758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b75a:	e00a      	b.n	800b772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b75c:	f7fd fcbc 	bl	80090d8 <HAL_GetTick>
 800b760:	4602      	mov	r2, r0
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	f241 3288 	movw	r2, #5000	; 0x1388
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d901      	bls.n	800b772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b76e:	2303      	movs	r3, #3
 800b770:	e053      	b.n	800b81a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b772:	4b2d      	ldr	r3, [pc, #180]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	f003 020c 	and.w	r2, r3, #12
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	429a      	cmp	r2, r3
 800b782:	d1eb      	bne.n	800b75c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b784:	4b27      	ldr	r3, [pc, #156]	; (800b824 <HAL_RCC_ClockConfig+0x1c0>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 0307 	and.w	r3, r3, #7
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d210      	bcs.n	800b7b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b792:	4b24      	ldr	r3, [pc, #144]	; (800b824 <HAL_RCC_ClockConfig+0x1c0>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f023 0207 	bic.w	r2, r3, #7
 800b79a:	4922      	ldr	r1, [pc, #136]	; (800b824 <HAL_RCC_ClockConfig+0x1c0>)
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7a2:	4b20      	ldr	r3, [pc, #128]	; (800b824 <HAL_RCC_ClockConfig+0x1c0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0307 	and.w	r3, r3, #7
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d001      	beq.n	800b7b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e032      	b.n	800b81a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0304 	and.w	r3, r3, #4
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d008      	beq.n	800b7d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7c0:	4b19      	ldr	r3, [pc, #100]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	4916      	ldr	r1, [pc, #88]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f003 0308 	and.w	r3, r3, #8
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d009      	beq.n	800b7f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b7de:	4b12      	ldr	r3, [pc, #72]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	490e      	ldr	r1, [pc, #56]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7f2:	f000 f821 	bl	800b838 <HAL_RCC_GetSysClockFreq>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <HAL_RCC_ClockConfig+0x1c4>)
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	091b      	lsrs	r3, r3, #4
 800b7fe:	f003 030f 	and.w	r3, r3, #15
 800b802:	490a      	ldr	r1, [pc, #40]	; (800b82c <HAL_RCC_ClockConfig+0x1c8>)
 800b804:	5ccb      	ldrb	r3, [r1, r3]
 800b806:	fa22 f303 	lsr.w	r3, r2, r3
 800b80a:	4a09      	ldr	r2, [pc, #36]	; (800b830 <HAL_RCC_ClockConfig+0x1cc>)
 800b80c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b80e:	4b09      	ldr	r3, [pc, #36]	; (800b834 <HAL_RCC_ClockConfig+0x1d0>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4618      	mov	r0, r3
 800b814:	f7fd fc1e 	bl	8009054 <HAL_InitTick>

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	40022000 	.word	0x40022000
 800b828:	40021000 	.word	0x40021000
 800b82c:	0800e600 	.word	0x0800e600
 800b830:	200009b8 	.word	0x200009b8
 800b834:	200009bc 	.word	0x200009bc

0800b838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	2300      	movs	r3, #0
 800b844:	60bb      	str	r3, [r7, #8]
 800b846:	2300      	movs	r3, #0
 800b848:	617b      	str	r3, [r7, #20]
 800b84a:	2300      	movs	r3, #0
 800b84c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b852:	4b1e      	ldr	r3, [pc, #120]	; (800b8cc <HAL_RCC_GetSysClockFreq+0x94>)
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f003 030c 	and.w	r3, r3, #12
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d002      	beq.n	800b868 <HAL_RCC_GetSysClockFreq+0x30>
 800b862:	2b08      	cmp	r3, #8
 800b864:	d003      	beq.n	800b86e <HAL_RCC_GetSysClockFreq+0x36>
 800b866:	e027      	b.n	800b8b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b868:	4b19      	ldr	r3, [pc, #100]	; (800b8d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b86a:	613b      	str	r3, [r7, #16]
      break;
 800b86c:	e027      	b.n	800b8be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	0c9b      	lsrs	r3, r3, #18
 800b872:	f003 030f 	and.w	r3, r3, #15
 800b876:	4a17      	ldr	r2, [pc, #92]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b878:	5cd3      	ldrb	r3, [r2, r3]
 800b87a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d010      	beq.n	800b8a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b886:	4b11      	ldr	r3, [pc, #68]	; (800b8cc <HAL_RCC_GetSysClockFreq+0x94>)
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	0c5b      	lsrs	r3, r3, #17
 800b88c:	f003 0301 	and.w	r3, r3, #1
 800b890:	4a11      	ldr	r2, [pc, #68]	; (800b8d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b892:	5cd3      	ldrb	r3, [r2, r3]
 800b894:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a0d      	ldr	r2, [pc, #52]	; (800b8d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b89a:	fb03 f202 	mul.w	r2, r3, r2
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	e004      	b.n	800b8b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a0c      	ldr	r2, [pc, #48]	; (800b8dc <HAL_RCC_GetSysClockFreq+0xa4>)
 800b8ac:	fb02 f303 	mul.w	r3, r2, r3
 800b8b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	613b      	str	r3, [r7, #16]
      break;
 800b8b6:	e002      	b.n	800b8be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b8b8:	4b05      	ldr	r3, [pc, #20]	; (800b8d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b8ba:	613b      	str	r3, [r7, #16]
      break;
 800b8bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b8be:	693b      	ldr	r3, [r7, #16]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	371c      	adds	r7, #28
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bc80      	pop	{r7}
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	40021000 	.word	0x40021000
 800b8d0:	007a1200 	.word	0x007a1200
 800b8d4:	0800e618 	.word	0x0800e618
 800b8d8:	0800e628 	.word	0x0800e628
 800b8dc:	003d0900 	.word	0x003d0900

0800b8e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8e4:	4b02      	ldr	r3, [pc, #8]	; (800b8f0 <HAL_RCC_GetHCLKFreq+0x10>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bc80      	pop	{r7}
 800b8ee:	4770      	bx	lr
 800b8f0:	200009b8 	.word	0x200009b8

0800b8f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b8f8:	f7ff fff2 	bl	800b8e0 <HAL_RCC_GetHCLKFreq>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	4b05      	ldr	r3, [pc, #20]	; (800b914 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	0a1b      	lsrs	r3, r3, #8
 800b904:	f003 0307 	and.w	r3, r3, #7
 800b908:	4903      	ldr	r1, [pc, #12]	; (800b918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b90a:	5ccb      	ldrb	r3, [r1, r3]
 800b90c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b910:	4618      	mov	r0, r3
 800b912:	bd80      	pop	{r7, pc}
 800b914:	40021000 	.word	0x40021000
 800b918:	0800e610 	.word	0x0800e610

0800b91c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b920:	f7ff ffde 	bl	800b8e0 <HAL_RCC_GetHCLKFreq>
 800b924:	4602      	mov	r2, r0
 800b926:	4b05      	ldr	r3, [pc, #20]	; (800b93c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	0adb      	lsrs	r3, r3, #11
 800b92c:	f003 0307 	and.w	r3, r3, #7
 800b930:	4903      	ldr	r1, [pc, #12]	; (800b940 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b932:	5ccb      	ldrb	r3, [r1, r3]
 800b934:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b938:	4618      	mov	r0, r3
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	40021000 	.word	0x40021000
 800b940:	0800e610 	.word	0x0800e610

0800b944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b94c:	4b0a      	ldr	r3, [pc, #40]	; (800b978 <RCC_Delay+0x34>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a0a      	ldr	r2, [pc, #40]	; (800b97c <RCC_Delay+0x38>)
 800b952:	fba2 2303 	umull	r2, r3, r2, r3
 800b956:	0a5b      	lsrs	r3, r3, #9
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	fb02 f303 	mul.w	r3, r2, r3
 800b95e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b960:	bf00      	nop
  }
  while (Delay --);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	1e5a      	subs	r2, r3, #1
 800b966:	60fa      	str	r2, [r7, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1f9      	bne.n	800b960 <RCC_Delay+0x1c>
}
 800b96c:	bf00      	nop
 800b96e:	bf00      	nop
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	bc80      	pop	{r7}
 800b976:	4770      	bx	lr
 800b978:	200009b8 	.word	0x200009b8
 800b97c:	10624dd3 	.word	0x10624dd3

0800b980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e041      	b.n	800ba16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d106      	bne.n	800b9ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7fd fa26 	bl	8008df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4610      	mov	r0, r2
 800b9c0:	f000 fa82 	bl	800bec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d001      	beq.n	800ba38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e044      	b.n	800bac2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68da      	ldr	r2, [r3, #12]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f042 0201 	orr.w	r2, r2, #1
 800ba4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a1d      	ldr	r2, [pc, #116]	; (800bacc <HAL_TIM_Base_Start_IT+0xac>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d018      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x6c>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a1c      	ldr	r2, [pc, #112]	; (800bad0 <HAL_TIM_Base_Start_IT+0xb0>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d013      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x6c>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba6c:	d00e      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x6c>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a18      	ldr	r2, [pc, #96]	; (800bad4 <HAL_TIM_Base_Start_IT+0xb4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d009      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x6c>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a16      	ldr	r2, [pc, #88]	; (800bad8 <HAL_TIM_Base_Start_IT+0xb8>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d004      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x6c>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a15      	ldr	r2, [pc, #84]	; (800badc <HAL_TIM_Base_Start_IT+0xbc>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d111      	bne.n	800bab0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f003 0307 	and.w	r3, r3, #7
 800ba96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b06      	cmp	r3, #6
 800ba9c:	d010      	beq.n	800bac0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f042 0201 	orr.w	r2, r2, #1
 800baac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baae:	e007      	b.n	800bac0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f042 0201 	orr.w	r2, r2, #1
 800babe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3714      	adds	r7, #20
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bc80      	pop	{r7}
 800baca:	4770      	bx	lr
 800bacc:	40012c00 	.word	0x40012c00
 800bad0:	40013400 	.word	0x40013400
 800bad4:	40000400 	.word	0x40000400
 800bad8:	40000800 	.word	0x40000800
 800badc:	40000c00 	.word	0x40000c00

0800bae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	f003 0302 	and.w	r3, r3, #2
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d122      	bne.n	800bb3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	f003 0302 	and.w	r3, r3, #2
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d11b      	bne.n	800bb3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f06f 0202 	mvn.w	r2, #2
 800bb0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2201      	movs	r2, #1
 800bb12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	699b      	ldr	r3, [r3, #24]
 800bb1a:	f003 0303 	and.w	r3, r3, #3
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9b4 	bl	800be90 <HAL_TIM_IC_CaptureCallback>
 800bb28:	e005      	b.n	800bb36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f9a7 	bl	800be7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f9b6 	bl	800bea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	f003 0304 	and.w	r3, r3, #4
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	d122      	bne.n	800bb90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	f003 0304 	and.w	r3, r3, #4
 800bb54:	2b04      	cmp	r3, #4
 800bb56:	d11b      	bne.n	800bb90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f06f 0204 	mvn.w	r2, #4
 800bb60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2202      	movs	r2, #2
 800bb66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f98a 	bl	800be90 <HAL_TIM_IC_CaptureCallback>
 800bb7c:	e005      	b.n	800bb8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f97d 	bl	800be7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f98c 	bl	800bea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	f003 0308 	and.w	r3, r3, #8
 800bb9a:	2b08      	cmp	r3, #8
 800bb9c:	d122      	bne.n	800bbe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f003 0308 	and.w	r3, r3, #8
 800bba8:	2b08      	cmp	r3, #8
 800bbaa:	d11b      	bne.n	800bbe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f06f 0208 	mvn.w	r2, #8
 800bbb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2204      	movs	r2, #4
 800bbba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	f003 0303 	and.w	r3, r3, #3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f960 	bl	800be90 <HAL_TIM_IC_CaptureCallback>
 800bbd0:	e005      	b.n	800bbde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f953 	bl	800be7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f962 	bl	800bea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	f003 0310 	and.w	r3, r3, #16
 800bbee:	2b10      	cmp	r3, #16
 800bbf0:	d122      	bne.n	800bc38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	f003 0310 	and.w	r3, r3, #16
 800bbfc:	2b10      	cmp	r3, #16
 800bbfe:	d11b      	bne.n	800bc38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f06f 0210 	mvn.w	r2, #16
 800bc08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2208      	movs	r2, #8
 800bc0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	69db      	ldr	r3, [r3, #28]
 800bc16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f936 	bl	800be90 <HAL_TIM_IC_CaptureCallback>
 800bc24:	e005      	b.n	800bc32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f929 	bl	800be7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f938 	bl	800bea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d10e      	bne.n	800bc64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d107      	bne.n	800bc64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f06f 0201 	mvn.w	r2, #1
 800bc5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7fc fd56 	bl	8008710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc6e:	2b80      	cmp	r3, #128	; 0x80
 800bc70:	d10e      	bne.n	800bc90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc7c:	2b80      	cmp	r3, #128	; 0x80
 800bc7e:	d107      	bne.n	800bc90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 faa1 	bl	800c1d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc9a:	2b40      	cmp	r3, #64	; 0x40
 800bc9c:	d10e      	bne.n	800bcbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca8:	2b40      	cmp	r3, #64	; 0x40
 800bcaa:	d107      	bne.n	800bcbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f8fc 	bl	800beb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	f003 0320 	and.w	r3, r3, #32
 800bcc6:	2b20      	cmp	r3, #32
 800bcc8:	d10e      	bne.n	800bce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f003 0320 	and.w	r3, r3, #32
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	d107      	bne.n	800bce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f06f 0220 	mvn.w	r2, #32
 800bce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa6c 	bl	800c1c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d101      	bne.n	800bd0c <HAL_TIM_ConfigClockSource+0x1c>
 800bd08:	2302      	movs	r3, #2
 800bd0a:	e0b4      	b.n	800be76 <HAL_TIM_ConfigClockSource+0x186>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2202      	movs	r2, #2
 800bd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd44:	d03e      	beq.n	800bdc4 <HAL_TIM_ConfigClockSource+0xd4>
 800bd46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd4a:	f200 8087 	bhi.w	800be5c <HAL_TIM_ConfigClockSource+0x16c>
 800bd4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd52:	f000 8086 	beq.w	800be62 <HAL_TIM_ConfigClockSource+0x172>
 800bd56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd5a:	d87f      	bhi.n	800be5c <HAL_TIM_ConfigClockSource+0x16c>
 800bd5c:	2b70      	cmp	r3, #112	; 0x70
 800bd5e:	d01a      	beq.n	800bd96 <HAL_TIM_ConfigClockSource+0xa6>
 800bd60:	2b70      	cmp	r3, #112	; 0x70
 800bd62:	d87b      	bhi.n	800be5c <HAL_TIM_ConfigClockSource+0x16c>
 800bd64:	2b60      	cmp	r3, #96	; 0x60
 800bd66:	d050      	beq.n	800be0a <HAL_TIM_ConfigClockSource+0x11a>
 800bd68:	2b60      	cmp	r3, #96	; 0x60
 800bd6a:	d877      	bhi.n	800be5c <HAL_TIM_ConfigClockSource+0x16c>
 800bd6c:	2b50      	cmp	r3, #80	; 0x50
 800bd6e:	d03c      	beq.n	800bdea <HAL_TIM_ConfigClockSource+0xfa>
 800bd70:	2b50      	cmp	r3, #80	; 0x50
 800bd72:	d873      	bhi.n	800be5c <HAL_TIM_ConfigClockSource+0x16c>
 800bd74:	2b40      	cmp	r3, #64	; 0x40
 800bd76:	d058      	beq.n	800be2a <HAL_TIM_ConfigClockSource+0x13a>
 800bd78:	2b40      	cmp	r3, #64	; 0x40
 800bd7a:	d86f      	bhi.n	800be5c <HAL_TIM_ConfigClockSource+0x16c>
 800bd7c:	2b30      	cmp	r3, #48	; 0x30
 800bd7e:	d064      	beq.n	800be4a <HAL_TIM_ConfigClockSource+0x15a>
 800bd80:	2b30      	cmp	r3, #48	; 0x30
 800bd82:	d86b      	bhi.n	800be5c <HAL_TIM_ConfigClockSource+0x16c>
 800bd84:	2b20      	cmp	r3, #32
 800bd86:	d060      	beq.n	800be4a <HAL_TIM_ConfigClockSource+0x15a>
 800bd88:	2b20      	cmp	r3, #32
 800bd8a:	d867      	bhi.n	800be5c <HAL_TIM_ConfigClockSource+0x16c>
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d05c      	beq.n	800be4a <HAL_TIM_ConfigClockSource+0x15a>
 800bd90:	2b10      	cmp	r3, #16
 800bd92:	d05a      	beq.n	800be4a <HAL_TIM_ConfigClockSource+0x15a>
 800bd94:	e062      	b.n	800be5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bda6:	f000 f980 	bl	800c0aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bdb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	609a      	str	r2, [r3, #8]
      break;
 800bdc2:	e04f      	b.n	800be64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bdd4:	f000 f969 	bl	800c0aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689a      	ldr	r2, [r3, #8]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bde6:	609a      	str	r2, [r3, #8]
      break;
 800bde8:	e03c      	b.n	800be64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f000 f8e0 	bl	800bfbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2150      	movs	r1, #80	; 0x50
 800be02:	4618      	mov	r0, r3
 800be04:	f000 f937 	bl	800c076 <TIM_ITRx_SetConfig>
      break;
 800be08:	e02c      	b.n	800be64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be16:	461a      	mov	r2, r3
 800be18:	f000 f8fe 	bl	800c018 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2160      	movs	r1, #96	; 0x60
 800be22:	4618      	mov	r0, r3
 800be24:	f000 f927 	bl	800c076 <TIM_ITRx_SetConfig>
      break;
 800be28:	e01c      	b.n	800be64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be36:	461a      	mov	r2, r3
 800be38:	f000 f8c0 	bl	800bfbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2140      	movs	r1, #64	; 0x40
 800be42:	4618      	mov	r0, r3
 800be44:	f000 f917 	bl	800c076 <TIM_ITRx_SetConfig>
      break;
 800be48:	e00c      	b.n	800be64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4619      	mov	r1, r3
 800be54:	4610      	mov	r0, r2
 800be56:	f000 f90e 	bl	800c076 <TIM_ITRx_SetConfig>
      break;
 800be5a:	e003      	b.n	800be64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	73fb      	strb	r3, [r7, #15]
      break;
 800be60:	e000      	b.n	800be64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be74:	7bfb      	ldrb	r3, [r7, #15]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bc80      	pop	{r7}
 800be8e:	4770      	bx	lr

0800be90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bc80      	pop	{r7}
 800bea0:	4770      	bx	lr

0800bea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b083      	sub	sp, #12
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800beaa:	bf00      	nop
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	bc80      	pop	{r7}
 800beb2:	4770      	bx	lr

0800beb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bebc:	bf00      	nop
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bc80      	pop	{r7}
 800bec4:	4770      	bx	lr
	...

0800bec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a33      	ldr	r2, [pc, #204]	; (800bfa8 <TIM_Base_SetConfig+0xe0>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d013      	beq.n	800bf08 <TIM_Base_SetConfig+0x40>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a32      	ldr	r2, [pc, #200]	; (800bfac <TIM_Base_SetConfig+0xe4>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d00f      	beq.n	800bf08 <TIM_Base_SetConfig+0x40>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beee:	d00b      	beq.n	800bf08 <TIM_Base_SetConfig+0x40>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a2f      	ldr	r2, [pc, #188]	; (800bfb0 <TIM_Base_SetConfig+0xe8>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d007      	beq.n	800bf08 <TIM_Base_SetConfig+0x40>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a2e      	ldr	r2, [pc, #184]	; (800bfb4 <TIM_Base_SetConfig+0xec>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d003      	beq.n	800bf08 <TIM_Base_SetConfig+0x40>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a2d      	ldr	r2, [pc, #180]	; (800bfb8 <TIM_Base_SetConfig+0xf0>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d108      	bne.n	800bf1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a22      	ldr	r2, [pc, #136]	; (800bfa8 <TIM_Base_SetConfig+0xe0>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d013      	beq.n	800bf4a <TIM_Base_SetConfig+0x82>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a21      	ldr	r2, [pc, #132]	; (800bfac <TIM_Base_SetConfig+0xe4>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d00f      	beq.n	800bf4a <TIM_Base_SetConfig+0x82>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf30:	d00b      	beq.n	800bf4a <TIM_Base_SetConfig+0x82>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a1e      	ldr	r2, [pc, #120]	; (800bfb0 <TIM_Base_SetConfig+0xe8>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d007      	beq.n	800bf4a <TIM_Base_SetConfig+0x82>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a1d      	ldr	r2, [pc, #116]	; (800bfb4 <TIM_Base_SetConfig+0xec>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d003      	beq.n	800bf4a <TIM_Base_SetConfig+0x82>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a1c      	ldr	r2, [pc, #112]	; (800bfb8 <TIM_Base_SetConfig+0xf0>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d108      	bne.n	800bf5c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a09      	ldr	r2, [pc, #36]	; (800bfa8 <TIM_Base_SetConfig+0xe0>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d003      	beq.n	800bf90 <TIM_Base_SetConfig+0xc8>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a08      	ldr	r2, [pc, #32]	; (800bfac <TIM_Base_SetConfig+0xe4>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d103      	bne.n	800bf98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	691a      	ldr	r2, [r3, #16]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	615a      	str	r2, [r3, #20]
}
 800bf9e:	bf00      	nop
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bc80      	pop	{r7}
 800bfa6:	4770      	bx	lr
 800bfa8:	40012c00 	.word	0x40012c00
 800bfac:	40013400 	.word	0x40013400
 800bfb0:	40000400 	.word	0x40000400
 800bfb4:	40000800 	.word	0x40000800
 800bfb8:	40000c00 	.word	0x40000c00

0800bfbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b087      	sub	sp, #28
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	f023 0201 	bic.w	r2, r3, #1
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	011b      	lsls	r3, r3, #4
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	f023 030a 	bic.w	r3, r3, #10
 800bff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	4313      	orrs	r3, r2
 800c000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	621a      	str	r2, [r3, #32]
}
 800c00e:	bf00      	nop
 800c010:	371c      	adds	r7, #28
 800c012:	46bd      	mov	sp, r7
 800c014:	bc80      	pop	{r7}
 800c016:	4770      	bx	lr

0800c018 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c018:	b480      	push	{r7}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	f023 0210 	bic.w	r2, r3, #16
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	699b      	ldr	r3, [r3, #24]
 800c03a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	031b      	lsls	r3, r3, #12
 800c048:	693a      	ldr	r2, [r7, #16]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c054:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	011b      	lsls	r3, r3, #4
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	621a      	str	r2, [r3, #32]
}
 800c06c:	bf00      	nop
 800c06e:	371c      	adds	r7, #28
 800c070:	46bd      	mov	sp, r7
 800c072:	bc80      	pop	{r7}
 800c074:	4770      	bx	lr

0800c076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c076:	b480      	push	{r7}
 800c078:	b085      	sub	sp, #20
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c08c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4313      	orrs	r3, r2
 800c094:	f043 0307 	orr.w	r3, r3, #7
 800c098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	609a      	str	r2, [r3, #8]
}
 800c0a0:	bf00      	nop
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bc80      	pop	{r7}
 800c0a8:	4770      	bx	lr

0800c0aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b087      	sub	sp, #28
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	60f8      	str	r0, [r7, #12]
 800c0b2:	60b9      	str	r1, [r7, #8]
 800c0b4:	607a      	str	r2, [r7, #4]
 800c0b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	021a      	lsls	r2, r3, #8
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	431a      	orrs	r2, r3
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	609a      	str	r2, [r3, #8]
}
 800c0de:	bf00      	nop
 800c0e0:	371c      	adds	r7, #28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bc80      	pop	{r7}
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d101      	bne.n	800c100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0fc:	2302      	movs	r3, #2
 800c0fe:	e050      	b.n	800c1a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2202      	movs	r2, #2
 800c10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68fa      	ldr	r2, [r7, #12]
 800c12e:	4313      	orrs	r3, r2
 800c130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a1b      	ldr	r2, [pc, #108]	; (800c1ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d018      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a19      	ldr	r2, [pc, #100]	; (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d013      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c156:	d00e      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a15      	ldr	r2, [pc, #84]	; (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d009      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a14      	ldr	r2, [pc, #80]	; (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d004      	beq.n	800c176 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a12      	ldr	r2, [pc, #72]	; (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d10c      	bne.n	800c190 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c17c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	4313      	orrs	r3, r2
 800c186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bc80      	pop	{r7}
 800c1aa:	4770      	bx	lr
 800c1ac:	40012c00 	.word	0x40012c00
 800c1b0:	40013400 	.word	0x40013400
 800c1b4:	40000400 	.word	0x40000400
 800c1b8:	40000800 	.word	0x40000800
 800c1bc:	40000c00 	.word	0x40000c00

0800c1c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bc80      	pop	{r7}
 800c1d0:	4770      	bx	lr

0800c1d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1da:	bf00      	nop
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bc80      	pop	{r7}
 800c1e2:	4770      	bx	lr

0800c1e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e042      	b.n	800c27c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d106      	bne.n	800c210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7fc fe1a 	bl	8008e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2224      	movs	r2, #36	; 0x24
 800c214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68da      	ldr	r2, [r3, #12]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fcb5 	bl	800cb98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c23c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	695a      	ldr	r2, [r3, #20]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c24c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c25c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2220      	movs	r2, #32
 800c268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2220      	movs	r2, #32
 800c270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	4613      	mov	r3, r2
 800c290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b20      	cmp	r3, #32
 800c29c:	d121      	bne.n	800c2e2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d002      	beq.n	800c2aa <HAL_UART_Transmit_IT+0x26>
 800c2a4:	88fb      	ldrh	r3, [r7, #6]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e01a      	b.n	800c2e4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	88fa      	ldrh	r2, [r7, #6]
 800c2b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	88fa      	ldrh	r2, [r7, #6]
 800c2be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2221      	movs	r2, #33	; 0x21
 800c2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68da      	ldr	r2, [r3, #12]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c2dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e000      	b.n	800c2e4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c2e2:	2302      	movs	r3, #2
  }
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3714      	adds	r7, #20
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bc80      	pop	{r7}
 800c2ec:	4770      	bx	lr
	...

0800c2f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b0ba      	sub	sp, #232	; 0xe8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c316:	2300      	movs	r3, #0
 800c318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c31c:	2300      	movs	r3, #0
 800c31e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c326:	f003 030f 	and.w	r3, r3, #15
 800c32a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c32e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c332:	2b00      	cmp	r3, #0
 800c334:	d10f      	bne.n	800c356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c33a:	f003 0320 	and.w	r3, r3, #32
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d009      	beq.n	800c356 <HAL_UART_IRQHandler+0x66>
 800c342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c346:	f003 0320 	and.w	r3, r3, #32
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fb63 	bl	800ca1a <UART_Receive_IT>
      return;
 800c354:	e25b      	b.n	800c80e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 80de 	beq.w	800c51c <HAL_UART_IRQHandler+0x22c>
 800c360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c364:	f003 0301 	and.w	r3, r3, #1
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d106      	bne.n	800c37a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 80d1 	beq.w	800c51c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00b      	beq.n	800c39e <HAL_UART_IRQHandler+0xae>
 800c386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c38a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d005      	beq.n	800c39e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c396:	f043 0201 	orr.w	r2, r3, #1
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3a2:	f003 0304 	and.w	r3, r3, #4
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00b      	beq.n	800c3c2 <HAL_UART_IRQHandler+0xd2>
 800c3aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d005      	beq.n	800c3c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ba:	f043 0202 	orr.w	r2, r3, #2
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c6:	f003 0302 	and.w	r3, r3, #2
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00b      	beq.n	800c3e6 <HAL_UART_IRQHandler+0xf6>
 800c3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d005      	beq.n	800c3e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3de:	f043 0204 	orr.w	r2, r3, #4
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ea:	f003 0308 	and.w	r3, r3, #8
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d011      	beq.n	800c416 <HAL_UART_IRQHandler+0x126>
 800c3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3f6:	f003 0320 	and.w	r3, r3, #32
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d105      	bne.n	800c40a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c402:	f003 0301 	and.w	r3, r3, #1
 800c406:	2b00      	cmp	r3, #0
 800c408:	d005      	beq.n	800c416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c40e:	f043 0208 	orr.w	r2, r3, #8
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 81f2 	beq.w	800c804 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c424:	f003 0320 	and.w	r3, r3, #32
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d008      	beq.n	800c43e <HAL_UART_IRQHandler+0x14e>
 800c42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c430:	f003 0320 	and.w	r3, r3, #32
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 faee 	bl	800ca1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	695b      	ldr	r3, [r3, #20]
 800c444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c448:	2b00      	cmp	r3, #0
 800c44a:	bf14      	ite	ne
 800c44c:	2301      	movne	r3, #1
 800c44e:	2300      	moveq	r3, #0
 800c450:	b2db      	uxtb	r3, r3
 800c452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45a:	f003 0308 	and.w	r3, r3, #8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d103      	bne.n	800c46a <HAL_UART_IRQHandler+0x17a>
 800c462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c466:	2b00      	cmp	r3, #0
 800c468:	d04f      	beq.n	800c50a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f9f8 	bl	800c860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d041      	beq.n	800c502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	3314      	adds	r3, #20
 800c484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c48c:	e853 3f00 	ldrex	r3, [r3]
 800c490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c49c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3314      	adds	r3, #20
 800c4a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c4aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c4ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c4b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c4ba:	e841 2300 	strex	r3, r2, [r1]
 800c4be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c4c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1d9      	bne.n	800c47e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d013      	beq.n	800c4fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d6:	4a7e      	ldr	r2, [pc, #504]	; (800c6d0 <HAL_UART_IRQHandler+0x3e0>)
 800c4d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fd f86c 	bl	80095bc <HAL_DMA_Abort_IT>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d016      	beq.n	800c518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4f8:	e00e      	b.n	800c518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f99c 	bl	800c838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c500:	e00a      	b.n	800c518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f998 	bl	800c838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c508:	e006      	b.n	800c518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f994 	bl	800c838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c516:	e175      	b.n	800c804 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c518:	bf00      	nop
    return;
 800c51a:	e173      	b.n	800c804 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c520:	2b01      	cmp	r3, #1
 800c522:	f040 814f 	bne.w	800c7c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c52a:	f003 0310 	and.w	r3, r3, #16
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 8148 	beq.w	800c7c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c538:	f003 0310 	and.w	r3, r3, #16
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 8141 	beq.w	800c7c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c542:	2300      	movs	r3, #0
 800c544:	60bb      	str	r3, [r7, #8]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	60bb      	str	r3, [r7, #8]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	60bb      	str	r3, [r7, #8]
 800c556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	695b      	ldr	r3, [r3, #20]
 800c55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 80b6 	beq.w	800c6d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 8145 	beq.w	800c808 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c586:	429a      	cmp	r2, r3
 800c588:	f080 813e 	bcs.w	800c808 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c592:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	2b20      	cmp	r3, #32
 800c59c:	f000 8088 	beq.w	800c6b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	330c      	adds	r3, #12
 800c5a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c5ae:	e853 3f00 	ldrex	r3, [r3]
 800c5b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c5b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	330c      	adds	r3, #12
 800c5c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c5cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c5d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5dc:	e841 2300 	strex	r3, r2, [r1]
 800c5e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1d9      	bne.n	800c5a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3314      	adds	r3, #20
 800c5f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5f6:	e853 3f00 	ldrex	r3, [r3]
 800c5fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5fe:	f023 0301 	bic.w	r3, r3, #1
 800c602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3314      	adds	r3, #20
 800c60c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c610:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c614:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c616:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c618:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c61c:	e841 2300 	strex	r3, r2, [r1]
 800c620:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1e1      	bne.n	800c5ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3314      	adds	r3, #20
 800c62e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c632:	e853 3f00 	ldrex	r3, [r3]
 800c636:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c63a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c63e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3314      	adds	r3, #20
 800c648:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c64c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c64e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c650:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c652:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c654:	e841 2300 	strex	r3, r2, [r1]
 800c658:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c65a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1e3      	bne.n	800c628 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2220      	movs	r2, #32
 800c664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	330c      	adds	r3, #12
 800c674:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c678:	e853 3f00 	ldrex	r3, [r3]
 800c67c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c67e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c680:	f023 0310 	bic.w	r3, r3, #16
 800c684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	330c      	adds	r3, #12
 800c68e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c692:	65ba      	str	r2, [r7, #88]	; 0x58
 800c694:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c696:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c698:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c69a:	e841 2300 	strex	r3, r2, [r1]
 800c69e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c6a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1e3      	bne.n	800c66e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fc ff4b 	bl	8009546 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f8bf 	bl	800c84a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c6cc:	e09c      	b.n	800c808 <HAL_UART_IRQHandler+0x518>
 800c6ce:	bf00      	nop
 800c6d0:	0800c925 	.word	0x0800c925
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 808e 	beq.w	800c80c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c6f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 8089 	beq.w	800c80c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	330c      	adds	r3, #12
 800c700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	e853 3f00 	ldrex	r3, [r3]
 800c708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	330c      	adds	r3, #12
 800c71a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c71e:	647a      	str	r2, [r7, #68]	; 0x44
 800c720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e3      	bne.n	800c6fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3314      	adds	r3, #20
 800c738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	623b      	str	r3, [r7, #32]
   return(result);
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	f023 0301 	bic.w	r3, r3, #1
 800c748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3314      	adds	r3, #20
 800c752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c756:	633a      	str	r2, [r7, #48]	; 0x30
 800c758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75e:	e841 2300 	strex	r3, r2, [r1]
 800c762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1e3      	bne.n	800c732 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2220      	movs	r2, #32
 800c76e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	330c      	adds	r3, #12
 800c77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	e853 3f00 	ldrex	r3, [r3]
 800c786:	60fb      	str	r3, [r7, #12]
   return(result);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f023 0310 	bic.w	r3, r3, #16
 800c78e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	330c      	adds	r3, #12
 800c798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c79c:	61fa      	str	r2, [r7, #28]
 800c79e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a0:	69b9      	ldr	r1, [r7, #24]
 800c7a2:	69fa      	ldr	r2, [r7, #28]
 800c7a4:	e841 2300 	strex	r3, r2, [r1]
 800c7a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e3      	bne.n	800c778 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2202      	movs	r2, #2
 800c7b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f844 	bl	800c84a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7c2:	e023      	b.n	800c80c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d009      	beq.n	800c7e4 <HAL_UART_IRQHandler+0x4f4>
 800c7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d003      	beq.n	800c7e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f8b5 	bl	800c94c <UART_Transmit_IT>
    return;
 800c7e2:	e014      	b.n	800c80e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00e      	beq.n	800c80e <HAL_UART_IRQHandler+0x51e>
 800c7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d008      	beq.n	800c80e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f8f4 	bl	800c9ea <UART_EndTransmit_IT>
    return;
 800c802:	e004      	b.n	800c80e <HAL_UART_IRQHandler+0x51e>
    return;
 800c804:	bf00      	nop
 800c806:	e002      	b.n	800c80e <HAL_UART_IRQHandler+0x51e>
      return;
 800c808:	bf00      	nop
 800c80a:	e000      	b.n	800c80e <HAL_UART_IRQHandler+0x51e>
      return;
 800c80c:	bf00      	nop
  }
}
 800c80e:	37e8      	adds	r7, #232	; 0xe8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	bc80      	pop	{r7}
 800c824:	4770      	bx	lr

0800c826 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c82e:	bf00      	nop
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	bc80      	pop	{r7}
 800c836:	4770      	bx	lr

0800c838 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	bc80      	pop	{r7}
 800c848:	4770      	bx	lr

0800c84a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b083      	sub	sp, #12
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	460b      	mov	r3, r1
 800c854:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c856:	bf00      	nop
 800c858:	370c      	adds	r7, #12
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bc80      	pop	{r7}
 800c85e:	4770      	bx	lr

0800c860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c860:	b480      	push	{r7}
 800c862:	b095      	sub	sp, #84	; 0x54
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	330c      	adds	r3, #12
 800c86e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c872:	e853 3f00 	ldrex	r3, [r3]
 800c876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c87e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	330c      	adds	r3, #12
 800c886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c888:	643a      	str	r2, [r7, #64]	; 0x40
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c88e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c890:	e841 2300 	strex	r3, r2, [r1]
 800c894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e5      	bne.n	800c868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3314      	adds	r3, #20
 800c8a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	e853 3f00 	ldrex	r3, [r3]
 800c8aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	f023 0301 	bic.w	r3, r3, #1
 800c8b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3314      	adds	r3, #20
 800c8ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8c4:	e841 2300 	strex	r3, r2, [r1]
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e5      	bne.n	800c89c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d119      	bne.n	800c90c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	330c      	adds	r3, #12
 800c8de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	e853 3f00 	ldrex	r3, [r3]
 800c8e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	f023 0310 	bic.w	r3, r3, #16
 800c8ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	330c      	adds	r3, #12
 800c8f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8f8:	61ba      	str	r2, [r7, #24]
 800c8fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fc:	6979      	ldr	r1, [r7, #20]
 800c8fe:	69ba      	ldr	r2, [r7, #24]
 800c900:	e841 2300 	strex	r3, r2, [r1]
 800c904:	613b      	str	r3, [r7, #16]
   return(result);
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1e5      	bne.n	800c8d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2220      	movs	r2, #32
 800c910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c91a:	bf00      	nop
 800c91c:	3754      	adds	r7, #84	; 0x54
 800c91e:	46bd      	mov	sp, r7
 800c920:	bc80      	pop	{r7}
 800c922:	4770      	bx	lr

0800c924 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f7ff ff7a 	bl	800c838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c944:	bf00      	nop
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b21      	cmp	r3, #33	; 0x21
 800c95e:	d13e      	bne.n	800c9de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c968:	d114      	bne.n	800c994 <UART_Transmit_IT+0x48>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d110      	bne.n	800c994 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	461a      	mov	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c986:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	1c9a      	adds	r2, r3, #2
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	621a      	str	r2, [r3, #32]
 800c992:	e008      	b.n	800c9a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	1c59      	adds	r1, r3, #1
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	6211      	str	r1, [r2, #32]
 800c99e:	781a      	ldrb	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10f      	bne.n	800c9da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68da      	ldr	r2, [r3, #12]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68da      	ldr	r2, [r3, #12]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e000      	b.n	800c9e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9de:	2302      	movs	r3, #2
  }
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bc80      	pop	{r7}
 800c9e8:	4770      	bx	lr

0800c9ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68da      	ldr	r2, [r3, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2220      	movs	r2, #32
 800ca06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff ff02 	bl	800c814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b08c      	sub	sp, #48	; 0x30
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b22      	cmp	r3, #34	; 0x22
 800ca2c:	f040 80ae 	bne.w	800cb8c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca38:	d117      	bne.n	800ca6a <UART_Receive_IT+0x50>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d113      	bne.n	800ca6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca42:	2300      	movs	r3, #0
 800ca44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca62:	1c9a      	adds	r2, r3, #2
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	629a      	str	r2, [r3, #40]	; 0x28
 800ca68:	e026      	b.n	800cab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca7c:	d007      	beq.n	800ca8e <UART_Receive_IT+0x74>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10a      	bne.n	800ca9c <UART_Receive_IT+0x82>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d106      	bne.n	800ca9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	e008      	b.n	800caae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	3b01      	subs	r3, #1
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	4619      	mov	r1, r3
 800cac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d15d      	bne.n	800cb88 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68da      	ldr	r2, [r3, #12]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f022 0220 	bic.w	r2, r2, #32
 800cada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68da      	ldr	r2, [r3, #12]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800caea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	695a      	ldr	r2, [r3, #20]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f022 0201 	bic.w	r2, r2, #1
 800cafa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2220      	movs	r2, #32
 800cb00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d135      	bne.n	800cb7e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	330c      	adds	r3, #12
 800cb1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	e853 3f00 	ldrex	r3, [r3]
 800cb26:	613b      	str	r3, [r7, #16]
   return(result);
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	f023 0310 	bic.w	r3, r3, #16
 800cb2e:	627b      	str	r3, [r7, #36]	; 0x24
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	330c      	adds	r3, #12
 800cb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb38:	623a      	str	r2, [r7, #32]
 800cb3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3c:	69f9      	ldr	r1, [r7, #28]
 800cb3e:	6a3a      	ldr	r2, [r7, #32]
 800cb40:	e841 2300 	strex	r3, r2, [r1]
 800cb44:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e5      	bne.n	800cb18 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f003 0310 	and.w	r3, r3, #16
 800cb56:	2b10      	cmp	r3, #16
 800cb58:	d10a      	bne.n	800cb70 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	60fb      	str	r3, [r7, #12]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	60fb      	str	r3, [r7, #12]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff fe67 	bl	800c84a <HAL_UARTEx_RxEventCallback>
 800cb7c:	e002      	b.n	800cb84 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7ff fe51 	bl	800c826 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e002      	b.n	800cb8e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	e000      	b.n	800cb8e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb8c:	2302      	movs	r3, #2
  }
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3730      	adds	r7, #48	; 0x30
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
	...

0800cb98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	68da      	ldr	r2, [r3, #12]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cbd2:	f023 030c 	bic.w	r3, r3, #12
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	6812      	ldr	r2, [r2, #0]
 800cbda:	68b9      	ldr	r1, [r7, #8]
 800cbdc:	430b      	orrs	r3, r1
 800cbde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	699a      	ldr	r2, [r3, #24]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	430a      	orrs	r2, r1
 800cbf4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a2c      	ldr	r2, [pc, #176]	; (800ccac <UART_SetConfig+0x114>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d103      	bne.n	800cc08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cc00:	f7fe fe8c 	bl	800b91c <HAL_RCC_GetPCLK2Freq>
 800cc04:	60f8      	str	r0, [r7, #12]
 800cc06:	e002      	b.n	800cc0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cc08:	f7fe fe74 	bl	800b8f4 <HAL_RCC_GetPCLK1Freq>
 800cc0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	4613      	mov	r3, r2
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	4413      	add	r3, r2
 800cc16:	009a      	lsls	r2, r3, #2
 800cc18:	441a      	add	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc24:	4a22      	ldr	r2, [pc, #136]	; (800ccb0 <UART_SetConfig+0x118>)
 800cc26:	fba2 2303 	umull	r2, r3, r2, r3
 800cc2a:	095b      	lsrs	r3, r3, #5
 800cc2c:	0119      	lsls	r1, r3, #4
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	4613      	mov	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	009a      	lsls	r2, r3, #2
 800cc38:	441a      	add	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc44:	4b1a      	ldr	r3, [pc, #104]	; (800ccb0 <UART_SetConfig+0x118>)
 800cc46:	fba3 0302 	umull	r0, r3, r3, r2
 800cc4a:	095b      	lsrs	r3, r3, #5
 800cc4c:	2064      	movs	r0, #100	; 0x64
 800cc4e:	fb00 f303 	mul.w	r3, r0, r3
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	011b      	lsls	r3, r3, #4
 800cc56:	3332      	adds	r3, #50	; 0x32
 800cc58:	4a15      	ldr	r2, [pc, #84]	; (800ccb0 <UART_SetConfig+0x118>)
 800cc5a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc5e:	095b      	lsrs	r3, r3, #5
 800cc60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc64:	4419      	add	r1, r3
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	009a      	lsls	r2, r3, #2
 800cc70:	441a      	add	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <UART_SetConfig+0x118>)
 800cc7e:	fba3 0302 	umull	r0, r3, r3, r2
 800cc82:	095b      	lsrs	r3, r3, #5
 800cc84:	2064      	movs	r0, #100	; 0x64
 800cc86:	fb00 f303 	mul.w	r3, r0, r3
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	011b      	lsls	r3, r3, #4
 800cc8e:	3332      	adds	r3, #50	; 0x32
 800cc90:	4a07      	ldr	r2, [pc, #28]	; (800ccb0 <UART_SetConfig+0x118>)
 800cc92:	fba2 2303 	umull	r2, r3, r2, r3
 800cc96:	095b      	lsrs	r3, r3, #5
 800cc98:	f003 020f 	and.w	r2, r3, #15
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	440a      	add	r2, r1
 800cca2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cca4:	bf00      	nop
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	40013800 	.word	0x40013800
 800ccb0:	51eb851f 	.word	0x51eb851f

0800ccb4 <__itoa>:
 800ccb4:	1e93      	subs	r3, r2, #2
 800ccb6:	2b22      	cmp	r3, #34	; 0x22
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	460c      	mov	r4, r1
 800ccbc:	d904      	bls.n	800ccc8 <__itoa+0x14>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	461c      	mov	r4, r3
 800ccc2:	700b      	strb	r3, [r1, #0]
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	bd10      	pop	{r4, pc}
 800ccc8:	2a0a      	cmp	r2, #10
 800ccca:	d109      	bne.n	800cce0 <__itoa+0x2c>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	da07      	bge.n	800cce0 <__itoa+0x2c>
 800ccd0:	232d      	movs	r3, #45	; 0x2d
 800ccd2:	700b      	strb	r3, [r1, #0]
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	4240      	negs	r0, r0
 800ccd8:	4421      	add	r1, r4
 800ccda:	f000 f8b9 	bl	800ce50 <__utoa>
 800ccde:	e7f1      	b.n	800ccc4 <__itoa+0x10>
 800cce0:	2100      	movs	r1, #0
 800cce2:	e7f9      	b.n	800ccd8 <__itoa+0x24>

0800cce4 <itoa>:
 800cce4:	f7ff bfe6 	b.w	800ccb4 <__itoa>

0800cce8 <malloc>:
 800cce8:	4b02      	ldr	r3, [pc, #8]	; (800ccf4 <malloc+0xc>)
 800ccea:	4601      	mov	r1, r0
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	f000 b823 	b.w	800cd38 <_malloc_r>
 800ccf2:	bf00      	nop
 800ccf4:	20000a10 	.word	0x20000a10

0800ccf8 <sbrk_aligned>:
 800ccf8:	b570      	push	{r4, r5, r6, lr}
 800ccfa:	4e0e      	ldr	r6, [pc, #56]	; (800cd34 <sbrk_aligned+0x3c>)
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	6831      	ldr	r1, [r6, #0]
 800cd00:	4605      	mov	r5, r0
 800cd02:	b911      	cbnz	r1, 800cd0a <sbrk_aligned+0x12>
 800cd04:	f000 f91e 	bl	800cf44 <_sbrk_r>
 800cd08:	6030      	str	r0, [r6, #0]
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	f000 f919 	bl	800cf44 <_sbrk_r>
 800cd12:	1c43      	adds	r3, r0, #1
 800cd14:	d00a      	beq.n	800cd2c <sbrk_aligned+0x34>
 800cd16:	1cc4      	adds	r4, r0, #3
 800cd18:	f024 0403 	bic.w	r4, r4, #3
 800cd1c:	42a0      	cmp	r0, r4
 800cd1e:	d007      	beq.n	800cd30 <sbrk_aligned+0x38>
 800cd20:	1a21      	subs	r1, r4, r0
 800cd22:	4628      	mov	r0, r5
 800cd24:	f000 f90e 	bl	800cf44 <_sbrk_r>
 800cd28:	3001      	adds	r0, #1
 800cd2a:	d101      	bne.n	800cd30 <sbrk_aligned+0x38>
 800cd2c:	f04f 34ff 	mov.w	r4, #4294967295
 800cd30:	4620      	mov	r0, r4
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
 800cd34:	20000eac 	.word	0x20000eac

0800cd38 <_malloc_r>:
 800cd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd3c:	1ccd      	adds	r5, r1, #3
 800cd3e:	f025 0503 	bic.w	r5, r5, #3
 800cd42:	3508      	adds	r5, #8
 800cd44:	2d0c      	cmp	r5, #12
 800cd46:	bf38      	it	cc
 800cd48:	250c      	movcc	r5, #12
 800cd4a:	2d00      	cmp	r5, #0
 800cd4c:	4607      	mov	r7, r0
 800cd4e:	db01      	blt.n	800cd54 <_malloc_r+0x1c>
 800cd50:	42a9      	cmp	r1, r5
 800cd52:	d905      	bls.n	800cd60 <_malloc_r+0x28>
 800cd54:	230c      	movs	r3, #12
 800cd56:	2600      	movs	r6, #0
 800cd58:	603b      	str	r3, [r7, #0]
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce34 <_malloc_r+0xfc>
 800cd64:	f000 f868 	bl	800ce38 <__malloc_lock>
 800cd68:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6c:	461c      	mov	r4, r3
 800cd6e:	bb5c      	cbnz	r4, 800cdc8 <_malloc_r+0x90>
 800cd70:	4629      	mov	r1, r5
 800cd72:	4638      	mov	r0, r7
 800cd74:	f7ff ffc0 	bl	800ccf8 <sbrk_aligned>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	d155      	bne.n	800ce2a <_malloc_r+0xf2>
 800cd7e:	f8d8 4000 	ldr.w	r4, [r8]
 800cd82:	4626      	mov	r6, r4
 800cd84:	2e00      	cmp	r6, #0
 800cd86:	d145      	bne.n	800ce14 <_malloc_r+0xdc>
 800cd88:	2c00      	cmp	r4, #0
 800cd8a:	d048      	beq.n	800ce1e <_malloc_r+0xe6>
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	4631      	mov	r1, r6
 800cd90:	4638      	mov	r0, r7
 800cd92:	eb04 0903 	add.w	r9, r4, r3
 800cd96:	f000 f8d5 	bl	800cf44 <_sbrk_r>
 800cd9a:	4581      	cmp	r9, r0
 800cd9c:	d13f      	bne.n	800ce1e <_malloc_r+0xe6>
 800cd9e:	6821      	ldr	r1, [r4, #0]
 800cda0:	4638      	mov	r0, r7
 800cda2:	1a6d      	subs	r5, r5, r1
 800cda4:	4629      	mov	r1, r5
 800cda6:	f7ff ffa7 	bl	800ccf8 <sbrk_aligned>
 800cdaa:	3001      	adds	r0, #1
 800cdac:	d037      	beq.n	800ce1e <_malloc_r+0xe6>
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	442b      	add	r3, r5
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	f8d8 3000 	ldr.w	r3, [r8]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d038      	beq.n	800ce2e <_malloc_r+0xf6>
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	42a2      	cmp	r2, r4
 800cdc0:	d12b      	bne.n	800ce1a <_malloc_r+0xe2>
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	605a      	str	r2, [r3, #4]
 800cdc6:	e00f      	b.n	800cde8 <_malloc_r+0xb0>
 800cdc8:	6822      	ldr	r2, [r4, #0]
 800cdca:	1b52      	subs	r2, r2, r5
 800cdcc:	d41f      	bmi.n	800ce0e <_malloc_r+0xd6>
 800cdce:	2a0b      	cmp	r2, #11
 800cdd0:	d917      	bls.n	800ce02 <_malloc_r+0xca>
 800cdd2:	1961      	adds	r1, r4, r5
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	6025      	str	r5, [r4, #0]
 800cdd8:	bf18      	it	ne
 800cdda:	6059      	strne	r1, [r3, #4]
 800cddc:	6863      	ldr	r3, [r4, #4]
 800cdde:	bf08      	it	eq
 800cde0:	f8c8 1000 	streq.w	r1, [r8]
 800cde4:	5162      	str	r2, [r4, r5]
 800cde6:	604b      	str	r3, [r1, #4]
 800cde8:	4638      	mov	r0, r7
 800cdea:	f104 060b 	add.w	r6, r4, #11
 800cdee:	f000 f829 	bl	800ce44 <__malloc_unlock>
 800cdf2:	f026 0607 	bic.w	r6, r6, #7
 800cdf6:	1d23      	adds	r3, r4, #4
 800cdf8:	1af2      	subs	r2, r6, r3
 800cdfa:	d0ae      	beq.n	800cd5a <_malloc_r+0x22>
 800cdfc:	1b9b      	subs	r3, r3, r6
 800cdfe:	50a3      	str	r3, [r4, r2]
 800ce00:	e7ab      	b.n	800cd5a <_malloc_r+0x22>
 800ce02:	42a3      	cmp	r3, r4
 800ce04:	6862      	ldr	r2, [r4, #4]
 800ce06:	d1dd      	bne.n	800cdc4 <_malloc_r+0x8c>
 800ce08:	f8c8 2000 	str.w	r2, [r8]
 800ce0c:	e7ec      	b.n	800cde8 <_malloc_r+0xb0>
 800ce0e:	4623      	mov	r3, r4
 800ce10:	6864      	ldr	r4, [r4, #4]
 800ce12:	e7ac      	b.n	800cd6e <_malloc_r+0x36>
 800ce14:	4634      	mov	r4, r6
 800ce16:	6876      	ldr	r6, [r6, #4]
 800ce18:	e7b4      	b.n	800cd84 <_malloc_r+0x4c>
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	e7cc      	b.n	800cdb8 <_malloc_r+0x80>
 800ce1e:	230c      	movs	r3, #12
 800ce20:	4638      	mov	r0, r7
 800ce22:	603b      	str	r3, [r7, #0]
 800ce24:	f000 f80e 	bl	800ce44 <__malloc_unlock>
 800ce28:	e797      	b.n	800cd5a <_malloc_r+0x22>
 800ce2a:	6025      	str	r5, [r4, #0]
 800ce2c:	e7dc      	b.n	800cde8 <_malloc_r+0xb0>
 800ce2e:	605b      	str	r3, [r3, #4]
 800ce30:	deff      	udf	#255	; 0xff
 800ce32:	bf00      	nop
 800ce34:	20000ea8 	.word	0x20000ea8

0800ce38 <__malloc_lock>:
 800ce38:	4801      	ldr	r0, [pc, #4]	; (800ce40 <__malloc_lock+0x8>)
 800ce3a:	f000 b8bd 	b.w	800cfb8 <__retarget_lock_acquire_recursive>
 800ce3e:	bf00      	nop
 800ce40:	20000fec 	.word	0x20000fec

0800ce44 <__malloc_unlock>:
 800ce44:	4801      	ldr	r0, [pc, #4]	; (800ce4c <__malloc_unlock+0x8>)
 800ce46:	f000 b8b8 	b.w	800cfba <__retarget_lock_release_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	20000fec 	.word	0x20000fec

0800ce50 <__utoa>:
 800ce50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce52:	b08b      	sub	sp, #44	; 0x2c
 800ce54:	4605      	mov	r5, r0
 800ce56:	460b      	mov	r3, r1
 800ce58:	466e      	mov	r6, sp
 800ce5a:	4c1d      	ldr	r4, [pc, #116]	; (800ced0 <__utoa+0x80>)
 800ce5c:	f104 0c20 	add.w	ip, r4, #32
 800ce60:	4637      	mov	r7, r6
 800ce62:	6820      	ldr	r0, [r4, #0]
 800ce64:	6861      	ldr	r1, [r4, #4]
 800ce66:	3408      	adds	r4, #8
 800ce68:	c703      	stmia	r7!, {r0, r1}
 800ce6a:	4564      	cmp	r4, ip
 800ce6c:	463e      	mov	r6, r7
 800ce6e:	d1f7      	bne.n	800ce60 <__utoa+0x10>
 800ce70:	7921      	ldrb	r1, [r4, #4]
 800ce72:	6820      	ldr	r0, [r4, #0]
 800ce74:	7139      	strb	r1, [r7, #4]
 800ce76:	1e91      	subs	r1, r2, #2
 800ce78:	2922      	cmp	r1, #34	; 0x22
 800ce7a:	6038      	str	r0, [r7, #0]
 800ce7c:	f04f 0100 	mov.w	r1, #0
 800ce80:	d904      	bls.n	800ce8c <__utoa+0x3c>
 800ce82:	7019      	strb	r1, [r3, #0]
 800ce84:	460b      	mov	r3, r1
 800ce86:	4618      	mov	r0, r3
 800ce88:	b00b      	add	sp, #44	; 0x2c
 800ce8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce8c:	1e58      	subs	r0, r3, #1
 800ce8e:	4684      	mov	ip, r0
 800ce90:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce94:	fb02 5617 	mls	r6, r2, r7, r5
 800ce98:	3628      	adds	r6, #40	; 0x28
 800ce9a:	446e      	add	r6, sp
 800ce9c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cea0:	460c      	mov	r4, r1
 800cea2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cea6:	462e      	mov	r6, r5
 800cea8:	42b2      	cmp	r2, r6
 800ceaa:	463d      	mov	r5, r7
 800ceac:	f101 0101 	add.w	r1, r1, #1
 800ceb0:	d9ee      	bls.n	800ce90 <__utoa+0x40>
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	545a      	strb	r2, [r3, r1]
 800ceb6:	1919      	adds	r1, r3, r4
 800ceb8:	1aa5      	subs	r5, r4, r2
 800ceba:	42aa      	cmp	r2, r5
 800cebc:	dae3      	bge.n	800ce86 <__utoa+0x36>
 800cebe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cec2:	780e      	ldrb	r6, [r1, #0]
 800cec4:	3201      	adds	r2, #1
 800cec6:	7006      	strb	r6, [r0, #0]
 800cec8:	f801 5901 	strb.w	r5, [r1], #-1
 800cecc:	e7f4      	b.n	800ceb8 <__utoa+0x68>
 800cece:	bf00      	nop
 800ced0:	0800e62a 	.word	0x0800e62a

0800ced4 <siprintf>:
 800ced4:	b40e      	push	{r1, r2, r3}
 800ced6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ceda:	b500      	push	{lr}
 800cedc:	b09c      	sub	sp, #112	; 0x70
 800cede:	ab1d      	add	r3, sp, #116	; 0x74
 800cee0:	9002      	str	r0, [sp, #8]
 800cee2:	9006      	str	r0, [sp, #24]
 800cee4:	9107      	str	r1, [sp, #28]
 800cee6:	9104      	str	r1, [sp, #16]
 800cee8:	4808      	ldr	r0, [pc, #32]	; (800cf0c <siprintf+0x38>)
 800ceea:	4909      	ldr	r1, [pc, #36]	; (800cf10 <siprintf+0x3c>)
 800ceec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef0:	9105      	str	r1, [sp, #20]
 800cef2:	6800      	ldr	r0, [r0, #0]
 800cef4:	a902      	add	r1, sp, #8
 800cef6:	9301      	str	r3, [sp, #4]
 800cef8:	f000 f90a 	bl	800d110 <_svfiprintf_r>
 800cefc:	2200      	movs	r2, #0
 800cefe:	9b02      	ldr	r3, [sp, #8]
 800cf00:	701a      	strb	r2, [r3, #0]
 800cf02:	b01c      	add	sp, #112	; 0x70
 800cf04:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf08:	b003      	add	sp, #12
 800cf0a:	4770      	bx	lr
 800cf0c:	20000a10 	.word	0x20000a10
 800cf10:	ffff0208 	.word	0xffff0208

0800cf14 <memset>:
 800cf14:	4603      	mov	r3, r0
 800cf16:	4402      	add	r2, r0
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d100      	bne.n	800cf1e <memset+0xa>
 800cf1c:	4770      	bx	lr
 800cf1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf22:	e7f9      	b.n	800cf18 <memset+0x4>

0800cf24 <strcat>:
 800cf24:	4602      	mov	r2, r0
 800cf26:	b510      	push	{r4, lr}
 800cf28:	7814      	ldrb	r4, [r2, #0]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	3201      	adds	r2, #1
 800cf2e:	2c00      	cmp	r4, #0
 800cf30:	d1fa      	bne.n	800cf28 <strcat+0x4>
 800cf32:	3b01      	subs	r3, #1
 800cf34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf38:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	d1f9      	bne.n	800cf34 <strcat+0x10>
 800cf40:	bd10      	pop	{r4, pc}
	...

0800cf44 <_sbrk_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	2300      	movs	r3, #0
 800cf48:	4d05      	ldr	r5, [pc, #20]	; (800cf60 <_sbrk_r+0x1c>)
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	602b      	str	r3, [r5, #0]
 800cf50:	f7fc f808 	bl	8008f64 <_sbrk>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_sbrk_r+0x1a>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_sbrk_r+0x1a>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20000fe8 	.word	0x20000fe8

0800cf64 <__errno>:
 800cf64:	4b01      	ldr	r3, [pc, #4]	; (800cf6c <__errno+0x8>)
 800cf66:	6818      	ldr	r0, [r3, #0]
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	20000a10 	.word	0x20000a10

0800cf70 <__libc_init_array>:
 800cf70:	b570      	push	{r4, r5, r6, lr}
 800cf72:	2600      	movs	r6, #0
 800cf74:	4d0c      	ldr	r5, [pc, #48]	; (800cfa8 <__libc_init_array+0x38>)
 800cf76:	4c0d      	ldr	r4, [pc, #52]	; (800cfac <__libc_init_array+0x3c>)
 800cf78:	1b64      	subs	r4, r4, r5
 800cf7a:	10a4      	asrs	r4, r4, #2
 800cf7c:	42a6      	cmp	r6, r4
 800cf7e:	d109      	bne.n	800cf94 <__libc_init_array+0x24>
 800cf80:	f000 fbc6 	bl	800d710 <_init>
 800cf84:	2600      	movs	r6, #0
 800cf86:	4d0a      	ldr	r5, [pc, #40]	; (800cfb0 <__libc_init_array+0x40>)
 800cf88:	4c0a      	ldr	r4, [pc, #40]	; (800cfb4 <__libc_init_array+0x44>)
 800cf8a:	1b64      	subs	r4, r4, r5
 800cf8c:	10a4      	asrs	r4, r4, #2
 800cf8e:	42a6      	cmp	r6, r4
 800cf90:	d105      	bne.n	800cf9e <__libc_init_array+0x2e>
 800cf92:	bd70      	pop	{r4, r5, r6, pc}
 800cf94:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf98:	4798      	blx	r3
 800cf9a:	3601      	adds	r6, #1
 800cf9c:	e7ee      	b.n	800cf7c <__libc_init_array+0xc>
 800cf9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfa2:	4798      	blx	r3
 800cfa4:	3601      	adds	r6, #1
 800cfa6:	e7f2      	b.n	800cf8e <__libc_init_array+0x1e>
 800cfa8:	0800e684 	.word	0x0800e684
 800cfac:	0800e684 	.word	0x0800e684
 800cfb0:	0800e684 	.word	0x0800e684
 800cfb4:	0800e688 	.word	0x0800e688

0800cfb8 <__retarget_lock_acquire_recursive>:
 800cfb8:	4770      	bx	lr

0800cfba <__retarget_lock_release_recursive>:
 800cfba:	4770      	bx	lr

0800cfbc <strcpy>:
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc2:	f803 2b01 	strb.w	r2, [r3], #1
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	d1f9      	bne.n	800cfbe <strcpy+0x2>
 800cfca:	4770      	bx	lr

0800cfcc <_free_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4605      	mov	r5, r0
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	d040      	beq.n	800d056 <_free_r+0x8a>
 800cfd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd8:	1f0c      	subs	r4, r1, #4
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	bfb8      	it	lt
 800cfde:	18e4      	addlt	r4, r4, r3
 800cfe0:	f7ff ff2a 	bl	800ce38 <__malloc_lock>
 800cfe4:	4a1c      	ldr	r2, [pc, #112]	; (800d058 <_free_r+0x8c>)
 800cfe6:	6813      	ldr	r3, [r2, #0]
 800cfe8:	b933      	cbnz	r3, 800cff8 <_free_r+0x2c>
 800cfea:	6063      	str	r3, [r4, #4]
 800cfec:	6014      	str	r4, [r2, #0]
 800cfee:	4628      	mov	r0, r5
 800cff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cff4:	f7ff bf26 	b.w	800ce44 <__malloc_unlock>
 800cff8:	42a3      	cmp	r3, r4
 800cffa:	d908      	bls.n	800d00e <_free_r+0x42>
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	1821      	adds	r1, r4, r0
 800d000:	428b      	cmp	r3, r1
 800d002:	bf01      	itttt	eq
 800d004:	6819      	ldreq	r1, [r3, #0]
 800d006:	685b      	ldreq	r3, [r3, #4]
 800d008:	1809      	addeq	r1, r1, r0
 800d00a:	6021      	streq	r1, [r4, #0]
 800d00c:	e7ed      	b.n	800cfea <_free_r+0x1e>
 800d00e:	461a      	mov	r2, r3
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	b10b      	cbz	r3, 800d018 <_free_r+0x4c>
 800d014:	42a3      	cmp	r3, r4
 800d016:	d9fa      	bls.n	800d00e <_free_r+0x42>
 800d018:	6811      	ldr	r1, [r2, #0]
 800d01a:	1850      	adds	r0, r2, r1
 800d01c:	42a0      	cmp	r0, r4
 800d01e:	d10b      	bne.n	800d038 <_free_r+0x6c>
 800d020:	6820      	ldr	r0, [r4, #0]
 800d022:	4401      	add	r1, r0
 800d024:	1850      	adds	r0, r2, r1
 800d026:	4283      	cmp	r3, r0
 800d028:	6011      	str	r1, [r2, #0]
 800d02a:	d1e0      	bne.n	800cfee <_free_r+0x22>
 800d02c:	6818      	ldr	r0, [r3, #0]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	4408      	add	r0, r1
 800d032:	6010      	str	r0, [r2, #0]
 800d034:	6053      	str	r3, [r2, #4]
 800d036:	e7da      	b.n	800cfee <_free_r+0x22>
 800d038:	d902      	bls.n	800d040 <_free_r+0x74>
 800d03a:	230c      	movs	r3, #12
 800d03c:	602b      	str	r3, [r5, #0]
 800d03e:	e7d6      	b.n	800cfee <_free_r+0x22>
 800d040:	6820      	ldr	r0, [r4, #0]
 800d042:	1821      	adds	r1, r4, r0
 800d044:	428b      	cmp	r3, r1
 800d046:	bf01      	itttt	eq
 800d048:	6819      	ldreq	r1, [r3, #0]
 800d04a:	685b      	ldreq	r3, [r3, #4]
 800d04c:	1809      	addeq	r1, r1, r0
 800d04e:	6021      	streq	r1, [r4, #0]
 800d050:	6063      	str	r3, [r4, #4]
 800d052:	6054      	str	r4, [r2, #4]
 800d054:	e7cb      	b.n	800cfee <_free_r+0x22>
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	20000ea8 	.word	0x20000ea8

0800d05c <__ssputs_r>:
 800d05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d060:	461f      	mov	r7, r3
 800d062:	688e      	ldr	r6, [r1, #8]
 800d064:	4682      	mov	sl, r0
 800d066:	42be      	cmp	r6, r7
 800d068:	460c      	mov	r4, r1
 800d06a:	4690      	mov	r8, r2
 800d06c:	680b      	ldr	r3, [r1, #0]
 800d06e:	d82c      	bhi.n	800d0ca <__ssputs_r+0x6e>
 800d070:	898a      	ldrh	r2, [r1, #12]
 800d072:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d076:	d026      	beq.n	800d0c6 <__ssputs_r+0x6a>
 800d078:	6965      	ldr	r5, [r4, #20]
 800d07a:	6909      	ldr	r1, [r1, #16]
 800d07c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d080:	eba3 0901 	sub.w	r9, r3, r1
 800d084:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d088:	1c7b      	adds	r3, r7, #1
 800d08a:	444b      	add	r3, r9
 800d08c:	106d      	asrs	r5, r5, #1
 800d08e:	429d      	cmp	r5, r3
 800d090:	bf38      	it	cc
 800d092:	461d      	movcc	r5, r3
 800d094:	0553      	lsls	r3, r2, #21
 800d096:	d527      	bpl.n	800d0e8 <__ssputs_r+0x8c>
 800d098:	4629      	mov	r1, r5
 800d09a:	f7ff fe4d 	bl	800cd38 <_malloc_r>
 800d09e:	4606      	mov	r6, r0
 800d0a0:	b360      	cbz	r0, 800d0fc <__ssputs_r+0xa0>
 800d0a2:	464a      	mov	r2, r9
 800d0a4:	6921      	ldr	r1, [r4, #16]
 800d0a6:	f000 faed 	bl	800d684 <memcpy>
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b4:	81a3      	strh	r3, [r4, #12]
 800d0b6:	6126      	str	r6, [r4, #16]
 800d0b8:	444e      	add	r6, r9
 800d0ba:	6026      	str	r6, [r4, #0]
 800d0bc:	463e      	mov	r6, r7
 800d0be:	6165      	str	r5, [r4, #20]
 800d0c0:	eba5 0509 	sub.w	r5, r5, r9
 800d0c4:	60a5      	str	r5, [r4, #8]
 800d0c6:	42be      	cmp	r6, r7
 800d0c8:	d900      	bls.n	800d0cc <__ssputs_r+0x70>
 800d0ca:	463e      	mov	r6, r7
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	4641      	mov	r1, r8
 800d0d0:	6820      	ldr	r0, [r4, #0]
 800d0d2:	f000 faaf 	bl	800d634 <memmove>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	68a3      	ldr	r3, [r4, #8]
 800d0da:	1b9b      	subs	r3, r3, r6
 800d0dc:	60a3      	str	r3, [r4, #8]
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	4433      	add	r3, r6
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e8:	462a      	mov	r2, r5
 800d0ea:	f000 fad9 	bl	800d6a0 <_realloc_r>
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d1e0      	bne.n	800d0b6 <__ssputs_r+0x5a>
 800d0f4:	4650      	mov	r0, sl
 800d0f6:	6921      	ldr	r1, [r4, #16]
 800d0f8:	f7ff ff68 	bl	800cfcc <_free_r>
 800d0fc:	230c      	movs	r3, #12
 800d0fe:	f8ca 3000 	str.w	r3, [sl]
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	e7e9      	b.n	800d0e4 <__ssputs_r+0x88>

0800d110 <_svfiprintf_r>:
 800d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d114:	4698      	mov	r8, r3
 800d116:	898b      	ldrh	r3, [r1, #12]
 800d118:	4607      	mov	r7, r0
 800d11a:	061b      	lsls	r3, r3, #24
 800d11c:	460d      	mov	r5, r1
 800d11e:	4614      	mov	r4, r2
 800d120:	b09d      	sub	sp, #116	; 0x74
 800d122:	d50e      	bpl.n	800d142 <_svfiprintf_r+0x32>
 800d124:	690b      	ldr	r3, [r1, #16]
 800d126:	b963      	cbnz	r3, 800d142 <_svfiprintf_r+0x32>
 800d128:	2140      	movs	r1, #64	; 0x40
 800d12a:	f7ff fe05 	bl	800cd38 <_malloc_r>
 800d12e:	6028      	str	r0, [r5, #0]
 800d130:	6128      	str	r0, [r5, #16]
 800d132:	b920      	cbnz	r0, 800d13e <_svfiprintf_r+0x2e>
 800d134:	230c      	movs	r3, #12
 800d136:	603b      	str	r3, [r7, #0]
 800d138:	f04f 30ff 	mov.w	r0, #4294967295
 800d13c:	e0d0      	b.n	800d2e0 <_svfiprintf_r+0x1d0>
 800d13e:	2340      	movs	r3, #64	; 0x40
 800d140:	616b      	str	r3, [r5, #20]
 800d142:	2300      	movs	r3, #0
 800d144:	9309      	str	r3, [sp, #36]	; 0x24
 800d146:	2320      	movs	r3, #32
 800d148:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d14c:	2330      	movs	r3, #48	; 0x30
 800d14e:	f04f 0901 	mov.w	r9, #1
 800d152:	f8cd 800c 	str.w	r8, [sp, #12]
 800d156:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d2f8 <_svfiprintf_r+0x1e8>
 800d15a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d15e:	4623      	mov	r3, r4
 800d160:	469a      	mov	sl, r3
 800d162:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d166:	b10a      	cbz	r2, 800d16c <_svfiprintf_r+0x5c>
 800d168:	2a25      	cmp	r2, #37	; 0x25
 800d16a:	d1f9      	bne.n	800d160 <_svfiprintf_r+0x50>
 800d16c:	ebba 0b04 	subs.w	fp, sl, r4
 800d170:	d00b      	beq.n	800d18a <_svfiprintf_r+0x7a>
 800d172:	465b      	mov	r3, fp
 800d174:	4622      	mov	r2, r4
 800d176:	4629      	mov	r1, r5
 800d178:	4638      	mov	r0, r7
 800d17a:	f7ff ff6f 	bl	800d05c <__ssputs_r>
 800d17e:	3001      	adds	r0, #1
 800d180:	f000 80a9 	beq.w	800d2d6 <_svfiprintf_r+0x1c6>
 800d184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d186:	445a      	add	r2, fp
 800d188:	9209      	str	r2, [sp, #36]	; 0x24
 800d18a:	f89a 3000 	ldrb.w	r3, [sl]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 80a1 	beq.w	800d2d6 <_svfiprintf_r+0x1c6>
 800d194:	2300      	movs	r3, #0
 800d196:	f04f 32ff 	mov.w	r2, #4294967295
 800d19a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d19e:	f10a 0a01 	add.w	sl, sl, #1
 800d1a2:	9304      	str	r3, [sp, #16]
 800d1a4:	9307      	str	r3, [sp, #28]
 800d1a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1aa:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ac:	4654      	mov	r4, sl
 800d1ae:	2205      	movs	r2, #5
 800d1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b4:	4850      	ldr	r0, [pc, #320]	; (800d2f8 <_svfiprintf_r+0x1e8>)
 800d1b6:	f000 fa57 	bl	800d668 <memchr>
 800d1ba:	9a04      	ldr	r2, [sp, #16]
 800d1bc:	b9d8      	cbnz	r0, 800d1f6 <_svfiprintf_r+0xe6>
 800d1be:	06d0      	lsls	r0, r2, #27
 800d1c0:	bf44      	itt	mi
 800d1c2:	2320      	movmi	r3, #32
 800d1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1c8:	0711      	lsls	r1, r2, #28
 800d1ca:	bf44      	itt	mi
 800d1cc:	232b      	movmi	r3, #43	; 0x2b
 800d1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d1d8:	d015      	beq.n	800d206 <_svfiprintf_r+0xf6>
 800d1da:	4654      	mov	r4, sl
 800d1dc:	2000      	movs	r0, #0
 800d1de:	f04f 0c0a 	mov.w	ip, #10
 800d1e2:	9a07      	ldr	r2, [sp, #28]
 800d1e4:	4621      	mov	r1, r4
 800d1e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ea:	3b30      	subs	r3, #48	; 0x30
 800d1ec:	2b09      	cmp	r3, #9
 800d1ee:	d94d      	bls.n	800d28c <_svfiprintf_r+0x17c>
 800d1f0:	b1b0      	cbz	r0, 800d220 <_svfiprintf_r+0x110>
 800d1f2:	9207      	str	r2, [sp, #28]
 800d1f4:	e014      	b.n	800d220 <_svfiprintf_r+0x110>
 800d1f6:	eba0 0308 	sub.w	r3, r0, r8
 800d1fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d1fe:	4313      	orrs	r3, r2
 800d200:	46a2      	mov	sl, r4
 800d202:	9304      	str	r3, [sp, #16]
 800d204:	e7d2      	b.n	800d1ac <_svfiprintf_r+0x9c>
 800d206:	9b03      	ldr	r3, [sp, #12]
 800d208:	1d19      	adds	r1, r3, #4
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	9103      	str	r1, [sp, #12]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	bfbb      	ittet	lt
 800d212:	425b      	neglt	r3, r3
 800d214:	f042 0202 	orrlt.w	r2, r2, #2
 800d218:	9307      	strge	r3, [sp, #28]
 800d21a:	9307      	strlt	r3, [sp, #28]
 800d21c:	bfb8      	it	lt
 800d21e:	9204      	strlt	r2, [sp, #16]
 800d220:	7823      	ldrb	r3, [r4, #0]
 800d222:	2b2e      	cmp	r3, #46	; 0x2e
 800d224:	d10c      	bne.n	800d240 <_svfiprintf_r+0x130>
 800d226:	7863      	ldrb	r3, [r4, #1]
 800d228:	2b2a      	cmp	r3, #42	; 0x2a
 800d22a:	d134      	bne.n	800d296 <_svfiprintf_r+0x186>
 800d22c:	9b03      	ldr	r3, [sp, #12]
 800d22e:	3402      	adds	r4, #2
 800d230:	1d1a      	adds	r2, r3, #4
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	9203      	str	r2, [sp, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	bfb8      	it	lt
 800d23a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d23e:	9305      	str	r3, [sp, #20]
 800d240:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d2fc <_svfiprintf_r+0x1ec>
 800d244:	2203      	movs	r2, #3
 800d246:	4650      	mov	r0, sl
 800d248:	7821      	ldrb	r1, [r4, #0]
 800d24a:	f000 fa0d 	bl	800d668 <memchr>
 800d24e:	b138      	cbz	r0, 800d260 <_svfiprintf_r+0x150>
 800d250:	2240      	movs	r2, #64	; 0x40
 800d252:	9b04      	ldr	r3, [sp, #16]
 800d254:	eba0 000a 	sub.w	r0, r0, sl
 800d258:	4082      	lsls	r2, r0
 800d25a:	4313      	orrs	r3, r2
 800d25c:	3401      	adds	r4, #1
 800d25e:	9304      	str	r3, [sp, #16]
 800d260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d264:	2206      	movs	r2, #6
 800d266:	4826      	ldr	r0, [pc, #152]	; (800d300 <_svfiprintf_r+0x1f0>)
 800d268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d26c:	f000 f9fc 	bl	800d668 <memchr>
 800d270:	2800      	cmp	r0, #0
 800d272:	d038      	beq.n	800d2e6 <_svfiprintf_r+0x1d6>
 800d274:	4b23      	ldr	r3, [pc, #140]	; (800d304 <_svfiprintf_r+0x1f4>)
 800d276:	bb1b      	cbnz	r3, 800d2c0 <_svfiprintf_r+0x1b0>
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	3307      	adds	r3, #7
 800d27c:	f023 0307 	bic.w	r3, r3, #7
 800d280:	3308      	adds	r3, #8
 800d282:	9303      	str	r3, [sp, #12]
 800d284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d286:	4433      	add	r3, r6
 800d288:	9309      	str	r3, [sp, #36]	; 0x24
 800d28a:	e768      	b.n	800d15e <_svfiprintf_r+0x4e>
 800d28c:	460c      	mov	r4, r1
 800d28e:	2001      	movs	r0, #1
 800d290:	fb0c 3202 	mla	r2, ip, r2, r3
 800d294:	e7a6      	b.n	800d1e4 <_svfiprintf_r+0xd4>
 800d296:	2300      	movs	r3, #0
 800d298:	f04f 0c0a 	mov.w	ip, #10
 800d29c:	4619      	mov	r1, r3
 800d29e:	3401      	adds	r4, #1
 800d2a0:	9305      	str	r3, [sp, #20]
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a8:	3a30      	subs	r2, #48	; 0x30
 800d2aa:	2a09      	cmp	r2, #9
 800d2ac:	d903      	bls.n	800d2b6 <_svfiprintf_r+0x1a6>
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0c6      	beq.n	800d240 <_svfiprintf_r+0x130>
 800d2b2:	9105      	str	r1, [sp, #20]
 800d2b4:	e7c4      	b.n	800d240 <_svfiprintf_r+0x130>
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2be:	e7f0      	b.n	800d2a2 <_svfiprintf_r+0x192>
 800d2c0:	ab03      	add	r3, sp, #12
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	4638      	mov	r0, r7
 800d2c8:	4b0f      	ldr	r3, [pc, #60]	; (800d308 <_svfiprintf_r+0x1f8>)
 800d2ca:	a904      	add	r1, sp, #16
 800d2cc:	f3af 8000 	nop.w
 800d2d0:	1c42      	adds	r2, r0, #1
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	d1d6      	bne.n	800d284 <_svfiprintf_r+0x174>
 800d2d6:	89ab      	ldrh	r3, [r5, #12]
 800d2d8:	065b      	lsls	r3, r3, #25
 800d2da:	f53f af2d 	bmi.w	800d138 <_svfiprintf_r+0x28>
 800d2de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2e0:	b01d      	add	sp, #116	; 0x74
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	ab03      	add	r3, sp, #12
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	462a      	mov	r2, r5
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	4b06      	ldr	r3, [pc, #24]	; (800d308 <_svfiprintf_r+0x1f8>)
 800d2f0:	a904      	add	r1, sp, #16
 800d2f2:	f000 f87d 	bl	800d3f0 <_printf_i>
 800d2f6:	e7eb      	b.n	800d2d0 <_svfiprintf_r+0x1c0>
 800d2f8:	0800e64f 	.word	0x0800e64f
 800d2fc:	0800e655 	.word	0x0800e655
 800d300:	0800e659 	.word	0x0800e659
 800d304:	00000000 	.word	0x00000000
 800d308:	0800d05d 	.word	0x0800d05d

0800d30c <_printf_common>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	4616      	mov	r6, r2
 800d312:	4699      	mov	r9, r3
 800d314:	688a      	ldr	r2, [r1, #8]
 800d316:	690b      	ldr	r3, [r1, #16]
 800d318:	4607      	mov	r7, r0
 800d31a:	4293      	cmp	r3, r2
 800d31c:	bfb8      	it	lt
 800d31e:	4613      	movlt	r3, r2
 800d320:	6033      	str	r3, [r6, #0]
 800d322:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d326:	460c      	mov	r4, r1
 800d328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d32c:	b10a      	cbz	r2, 800d332 <_printf_common+0x26>
 800d32e:	3301      	adds	r3, #1
 800d330:	6033      	str	r3, [r6, #0]
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	0699      	lsls	r1, r3, #26
 800d336:	bf42      	ittt	mi
 800d338:	6833      	ldrmi	r3, [r6, #0]
 800d33a:	3302      	addmi	r3, #2
 800d33c:	6033      	strmi	r3, [r6, #0]
 800d33e:	6825      	ldr	r5, [r4, #0]
 800d340:	f015 0506 	ands.w	r5, r5, #6
 800d344:	d106      	bne.n	800d354 <_printf_common+0x48>
 800d346:	f104 0a19 	add.w	sl, r4, #25
 800d34a:	68e3      	ldr	r3, [r4, #12]
 800d34c:	6832      	ldr	r2, [r6, #0]
 800d34e:	1a9b      	subs	r3, r3, r2
 800d350:	42ab      	cmp	r3, r5
 800d352:	dc2b      	bgt.n	800d3ac <_printf_common+0xa0>
 800d354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d358:	1e13      	subs	r3, r2, #0
 800d35a:	6822      	ldr	r2, [r4, #0]
 800d35c:	bf18      	it	ne
 800d35e:	2301      	movne	r3, #1
 800d360:	0692      	lsls	r2, r2, #26
 800d362:	d430      	bmi.n	800d3c6 <_printf_common+0xba>
 800d364:	4649      	mov	r1, r9
 800d366:	4638      	mov	r0, r7
 800d368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d36c:	47c0      	blx	r8
 800d36e:	3001      	adds	r0, #1
 800d370:	d023      	beq.n	800d3ba <_printf_common+0xae>
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	6922      	ldr	r2, [r4, #16]
 800d376:	f003 0306 	and.w	r3, r3, #6
 800d37a:	2b04      	cmp	r3, #4
 800d37c:	bf14      	ite	ne
 800d37e:	2500      	movne	r5, #0
 800d380:	6833      	ldreq	r3, [r6, #0]
 800d382:	f04f 0600 	mov.w	r6, #0
 800d386:	bf08      	it	eq
 800d388:	68e5      	ldreq	r5, [r4, #12]
 800d38a:	f104 041a 	add.w	r4, r4, #26
 800d38e:	bf08      	it	eq
 800d390:	1aed      	subeq	r5, r5, r3
 800d392:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d396:	bf08      	it	eq
 800d398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d39c:	4293      	cmp	r3, r2
 800d39e:	bfc4      	itt	gt
 800d3a0:	1a9b      	subgt	r3, r3, r2
 800d3a2:	18ed      	addgt	r5, r5, r3
 800d3a4:	42b5      	cmp	r5, r6
 800d3a6:	d11a      	bne.n	800d3de <_printf_common+0xd2>
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	e008      	b.n	800d3be <_printf_common+0xb2>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	4652      	mov	r2, sl
 800d3b0:	4649      	mov	r1, r9
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	47c0      	blx	r8
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	d103      	bne.n	800d3c2 <_printf_common+0xb6>
 800d3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c2:	3501      	adds	r5, #1
 800d3c4:	e7c1      	b.n	800d34a <_printf_common+0x3e>
 800d3c6:	2030      	movs	r0, #48	; 0x30
 800d3c8:	18e1      	adds	r1, r4, r3
 800d3ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3d4:	4422      	add	r2, r4
 800d3d6:	3302      	adds	r3, #2
 800d3d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3dc:	e7c2      	b.n	800d364 <_printf_common+0x58>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	4622      	mov	r2, r4
 800d3e2:	4649      	mov	r1, r9
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	47c0      	blx	r8
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	d0e6      	beq.n	800d3ba <_printf_common+0xae>
 800d3ec:	3601      	adds	r6, #1
 800d3ee:	e7d9      	b.n	800d3a4 <_printf_common+0x98>

0800d3f0 <_printf_i>:
 800d3f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f4:	7e0f      	ldrb	r7, [r1, #24]
 800d3f6:	4691      	mov	r9, r2
 800d3f8:	2f78      	cmp	r7, #120	; 0x78
 800d3fa:	4680      	mov	r8, r0
 800d3fc:	460c      	mov	r4, r1
 800d3fe:	469a      	mov	sl, r3
 800d400:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d406:	d807      	bhi.n	800d418 <_printf_i+0x28>
 800d408:	2f62      	cmp	r7, #98	; 0x62
 800d40a:	d80a      	bhi.n	800d422 <_printf_i+0x32>
 800d40c:	2f00      	cmp	r7, #0
 800d40e:	f000 80d5 	beq.w	800d5bc <_printf_i+0x1cc>
 800d412:	2f58      	cmp	r7, #88	; 0x58
 800d414:	f000 80c1 	beq.w	800d59a <_printf_i+0x1aa>
 800d418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d41c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d420:	e03a      	b.n	800d498 <_printf_i+0xa8>
 800d422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d426:	2b15      	cmp	r3, #21
 800d428:	d8f6      	bhi.n	800d418 <_printf_i+0x28>
 800d42a:	a101      	add	r1, pc, #4	; (adr r1, 800d430 <_printf_i+0x40>)
 800d42c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d430:	0800d489 	.word	0x0800d489
 800d434:	0800d49d 	.word	0x0800d49d
 800d438:	0800d419 	.word	0x0800d419
 800d43c:	0800d419 	.word	0x0800d419
 800d440:	0800d419 	.word	0x0800d419
 800d444:	0800d419 	.word	0x0800d419
 800d448:	0800d49d 	.word	0x0800d49d
 800d44c:	0800d419 	.word	0x0800d419
 800d450:	0800d419 	.word	0x0800d419
 800d454:	0800d419 	.word	0x0800d419
 800d458:	0800d419 	.word	0x0800d419
 800d45c:	0800d5a3 	.word	0x0800d5a3
 800d460:	0800d4c9 	.word	0x0800d4c9
 800d464:	0800d55d 	.word	0x0800d55d
 800d468:	0800d419 	.word	0x0800d419
 800d46c:	0800d419 	.word	0x0800d419
 800d470:	0800d5c5 	.word	0x0800d5c5
 800d474:	0800d419 	.word	0x0800d419
 800d478:	0800d4c9 	.word	0x0800d4c9
 800d47c:	0800d419 	.word	0x0800d419
 800d480:	0800d419 	.word	0x0800d419
 800d484:	0800d565 	.word	0x0800d565
 800d488:	682b      	ldr	r3, [r5, #0]
 800d48a:	1d1a      	adds	r2, r3, #4
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	602a      	str	r2, [r5, #0]
 800d490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d498:	2301      	movs	r3, #1
 800d49a:	e0a0      	b.n	800d5de <_printf_i+0x1ee>
 800d49c:	6820      	ldr	r0, [r4, #0]
 800d49e:	682b      	ldr	r3, [r5, #0]
 800d4a0:	0607      	lsls	r7, r0, #24
 800d4a2:	f103 0104 	add.w	r1, r3, #4
 800d4a6:	6029      	str	r1, [r5, #0]
 800d4a8:	d501      	bpl.n	800d4ae <_printf_i+0xbe>
 800d4aa:	681e      	ldr	r6, [r3, #0]
 800d4ac:	e003      	b.n	800d4b6 <_printf_i+0xc6>
 800d4ae:	0646      	lsls	r6, r0, #25
 800d4b0:	d5fb      	bpl.n	800d4aa <_printf_i+0xba>
 800d4b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d4b6:	2e00      	cmp	r6, #0
 800d4b8:	da03      	bge.n	800d4c2 <_printf_i+0xd2>
 800d4ba:	232d      	movs	r3, #45	; 0x2d
 800d4bc:	4276      	negs	r6, r6
 800d4be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4c2:	230a      	movs	r3, #10
 800d4c4:	4859      	ldr	r0, [pc, #356]	; (800d62c <_printf_i+0x23c>)
 800d4c6:	e012      	b.n	800d4ee <_printf_i+0xfe>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	6820      	ldr	r0, [r4, #0]
 800d4cc:	1d19      	adds	r1, r3, #4
 800d4ce:	6029      	str	r1, [r5, #0]
 800d4d0:	0605      	lsls	r5, r0, #24
 800d4d2:	d501      	bpl.n	800d4d8 <_printf_i+0xe8>
 800d4d4:	681e      	ldr	r6, [r3, #0]
 800d4d6:	e002      	b.n	800d4de <_printf_i+0xee>
 800d4d8:	0641      	lsls	r1, r0, #25
 800d4da:	d5fb      	bpl.n	800d4d4 <_printf_i+0xe4>
 800d4dc:	881e      	ldrh	r6, [r3, #0]
 800d4de:	2f6f      	cmp	r7, #111	; 0x6f
 800d4e0:	bf0c      	ite	eq
 800d4e2:	2308      	moveq	r3, #8
 800d4e4:	230a      	movne	r3, #10
 800d4e6:	4851      	ldr	r0, [pc, #324]	; (800d62c <_printf_i+0x23c>)
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4ee:	6865      	ldr	r5, [r4, #4]
 800d4f0:	2d00      	cmp	r5, #0
 800d4f2:	bfa8      	it	ge
 800d4f4:	6821      	ldrge	r1, [r4, #0]
 800d4f6:	60a5      	str	r5, [r4, #8]
 800d4f8:	bfa4      	itt	ge
 800d4fa:	f021 0104 	bicge.w	r1, r1, #4
 800d4fe:	6021      	strge	r1, [r4, #0]
 800d500:	b90e      	cbnz	r6, 800d506 <_printf_i+0x116>
 800d502:	2d00      	cmp	r5, #0
 800d504:	d04b      	beq.n	800d59e <_printf_i+0x1ae>
 800d506:	4615      	mov	r5, r2
 800d508:	fbb6 f1f3 	udiv	r1, r6, r3
 800d50c:	fb03 6711 	mls	r7, r3, r1, r6
 800d510:	5dc7      	ldrb	r7, [r0, r7]
 800d512:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d516:	4637      	mov	r7, r6
 800d518:	42bb      	cmp	r3, r7
 800d51a:	460e      	mov	r6, r1
 800d51c:	d9f4      	bls.n	800d508 <_printf_i+0x118>
 800d51e:	2b08      	cmp	r3, #8
 800d520:	d10b      	bne.n	800d53a <_printf_i+0x14a>
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	07de      	lsls	r6, r3, #31
 800d526:	d508      	bpl.n	800d53a <_printf_i+0x14a>
 800d528:	6923      	ldr	r3, [r4, #16]
 800d52a:	6861      	ldr	r1, [r4, #4]
 800d52c:	4299      	cmp	r1, r3
 800d52e:	bfde      	ittt	le
 800d530:	2330      	movle	r3, #48	; 0x30
 800d532:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d536:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d53a:	1b52      	subs	r2, r2, r5
 800d53c:	6122      	str	r2, [r4, #16]
 800d53e:	464b      	mov	r3, r9
 800d540:	4621      	mov	r1, r4
 800d542:	4640      	mov	r0, r8
 800d544:	f8cd a000 	str.w	sl, [sp]
 800d548:	aa03      	add	r2, sp, #12
 800d54a:	f7ff fedf 	bl	800d30c <_printf_common>
 800d54e:	3001      	adds	r0, #1
 800d550:	d14a      	bne.n	800d5e8 <_printf_i+0x1f8>
 800d552:	f04f 30ff 	mov.w	r0, #4294967295
 800d556:	b004      	add	sp, #16
 800d558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d55c:	6823      	ldr	r3, [r4, #0]
 800d55e:	f043 0320 	orr.w	r3, r3, #32
 800d562:	6023      	str	r3, [r4, #0]
 800d564:	2778      	movs	r7, #120	; 0x78
 800d566:	4832      	ldr	r0, [pc, #200]	; (800d630 <_printf_i+0x240>)
 800d568:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	6829      	ldr	r1, [r5, #0]
 800d570:	061f      	lsls	r7, r3, #24
 800d572:	f851 6b04 	ldr.w	r6, [r1], #4
 800d576:	d402      	bmi.n	800d57e <_printf_i+0x18e>
 800d578:	065f      	lsls	r7, r3, #25
 800d57a:	bf48      	it	mi
 800d57c:	b2b6      	uxthmi	r6, r6
 800d57e:	07df      	lsls	r7, r3, #31
 800d580:	bf48      	it	mi
 800d582:	f043 0320 	orrmi.w	r3, r3, #32
 800d586:	6029      	str	r1, [r5, #0]
 800d588:	bf48      	it	mi
 800d58a:	6023      	strmi	r3, [r4, #0]
 800d58c:	b91e      	cbnz	r6, 800d596 <_printf_i+0x1a6>
 800d58e:	6823      	ldr	r3, [r4, #0]
 800d590:	f023 0320 	bic.w	r3, r3, #32
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	2310      	movs	r3, #16
 800d598:	e7a6      	b.n	800d4e8 <_printf_i+0xf8>
 800d59a:	4824      	ldr	r0, [pc, #144]	; (800d62c <_printf_i+0x23c>)
 800d59c:	e7e4      	b.n	800d568 <_printf_i+0x178>
 800d59e:	4615      	mov	r5, r2
 800d5a0:	e7bd      	b.n	800d51e <_printf_i+0x12e>
 800d5a2:	682b      	ldr	r3, [r5, #0]
 800d5a4:	6826      	ldr	r6, [r4, #0]
 800d5a6:	1d18      	adds	r0, r3, #4
 800d5a8:	6961      	ldr	r1, [r4, #20]
 800d5aa:	6028      	str	r0, [r5, #0]
 800d5ac:	0635      	lsls	r5, r6, #24
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	d501      	bpl.n	800d5b6 <_printf_i+0x1c6>
 800d5b2:	6019      	str	r1, [r3, #0]
 800d5b4:	e002      	b.n	800d5bc <_printf_i+0x1cc>
 800d5b6:	0670      	lsls	r0, r6, #25
 800d5b8:	d5fb      	bpl.n	800d5b2 <_printf_i+0x1c2>
 800d5ba:	8019      	strh	r1, [r3, #0]
 800d5bc:	2300      	movs	r3, #0
 800d5be:	4615      	mov	r5, r2
 800d5c0:	6123      	str	r3, [r4, #16]
 800d5c2:	e7bc      	b.n	800d53e <_printf_i+0x14e>
 800d5c4:	682b      	ldr	r3, [r5, #0]
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	1d1a      	adds	r2, r3, #4
 800d5ca:	602a      	str	r2, [r5, #0]
 800d5cc:	681d      	ldr	r5, [r3, #0]
 800d5ce:	6862      	ldr	r2, [r4, #4]
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	f000 f849 	bl	800d668 <memchr>
 800d5d6:	b108      	cbz	r0, 800d5dc <_printf_i+0x1ec>
 800d5d8:	1b40      	subs	r0, r0, r5
 800d5da:	6060      	str	r0, [r4, #4]
 800d5dc:	6863      	ldr	r3, [r4, #4]
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5e6:	e7aa      	b.n	800d53e <_printf_i+0x14e>
 800d5e8:	462a      	mov	r2, r5
 800d5ea:	4649      	mov	r1, r9
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	6923      	ldr	r3, [r4, #16]
 800d5f0:	47d0      	blx	sl
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d0ad      	beq.n	800d552 <_printf_i+0x162>
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	079b      	lsls	r3, r3, #30
 800d5fa:	d413      	bmi.n	800d624 <_printf_i+0x234>
 800d5fc:	68e0      	ldr	r0, [r4, #12]
 800d5fe:	9b03      	ldr	r3, [sp, #12]
 800d600:	4298      	cmp	r0, r3
 800d602:	bfb8      	it	lt
 800d604:	4618      	movlt	r0, r3
 800d606:	e7a6      	b.n	800d556 <_printf_i+0x166>
 800d608:	2301      	movs	r3, #1
 800d60a:	4632      	mov	r2, r6
 800d60c:	4649      	mov	r1, r9
 800d60e:	4640      	mov	r0, r8
 800d610:	47d0      	blx	sl
 800d612:	3001      	adds	r0, #1
 800d614:	d09d      	beq.n	800d552 <_printf_i+0x162>
 800d616:	3501      	adds	r5, #1
 800d618:	68e3      	ldr	r3, [r4, #12]
 800d61a:	9903      	ldr	r1, [sp, #12]
 800d61c:	1a5b      	subs	r3, r3, r1
 800d61e:	42ab      	cmp	r3, r5
 800d620:	dcf2      	bgt.n	800d608 <_printf_i+0x218>
 800d622:	e7eb      	b.n	800d5fc <_printf_i+0x20c>
 800d624:	2500      	movs	r5, #0
 800d626:	f104 0619 	add.w	r6, r4, #25
 800d62a:	e7f5      	b.n	800d618 <_printf_i+0x228>
 800d62c:	0800e660 	.word	0x0800e660
 800d630:	0800e671 	.word	0x0800e671

0800d634 <memmove>:
 800d634:	4288      	cmp	r0, r1
 800d636:	b510      	push	{r4, lr}
 800d638:	eb01 0402 	add.w	r4, r1, r2
 800d63c:	d902      	bls.n	800d644 <memmove+0x10>
 800d63e:	4284      	cmp	r4, r0
 800d640:	4623      	mov	r3, r4
 800d642:	d807      	bhi.n	800d654 <memmove+0x20>
 800d644:	1e43      	subs	r3, r0, #1
 800d646:	42a1      	cmp	r1, r4
 800d648:	d008      	beq.n	800d65c <memmove+0x28>
 800d64a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d64e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d652:	e7f8      	b.n	800d646 <memmove+0x12>
 800d654:	4601      	mov	r1, r0
 800d656:	4402      	add	r2, r0
 800d658:	428a      	cmp	r2, r1
 800d65a:	d100      	bne.n	800d65e <memmove+0x2a>
 800d65c:	bd10      	pop	{r4, pc}
 800d65e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d666:	e7f7      	b.n	800d658 <memmove+0x24>

0800d668 <memchr>:
 800d668:	4603      	mov	r3, r0
 800d66a:	b510      	push	{r4, lr}
 800d66c:	b2c9      	uxtb	r1, r1
 800d66e:	4402      	add	r2, r0
 800d670:	4293      	cmp	r3, r2
 800d672:	4618      	mov	r0, r3
 800d674:	d101      	bne.n	800d67a <memchr+0x12>
 800d676:	2000      	movs	r0, #0
 800d678:	e003      	b.n	800d682 <memchr+0x1a>
 800d67a:	7804      	ldrb	r4, [r0, #0]
 800d67c:	3301      	adds	r3, #1
 800d67e:	428c      	cmp	r4, r1
 800d680:	d1f6      	bne.n	800d670 <memchr+0x8>
 800d682:	bd10      	pop	{r4, pc}

0800d684 <memcpy>:
 800d684:	440a      	add	r2, r1
 800d686:	4291      	cmp	r1, r2
 800d688:	f100 33ff 	add.w	r3, r0, #4294967295
 800d68c:	d100      	bne.n	800d690 <memcpy+0xc>
 800d68e:	4770      	bx	lr
 800d690:	b510      	push	{r4, lr}
 800d692:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d696:	4291      	cmp	r1, r2
 800d698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d69c:	d1f9      	bne.n	800d692 <memcpy+0xe>
 800d69e:	bd10      	pop	{r4, pc}

0800d6a0 <_realloc_r>:
 800d6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a4:	4680      	mov	r8, r0
 800d6a6:	4614      	mov	r4, r2
 800d6a8:	460e      	mov	r6, r1
 800d6aa:	b921      	cbnz	r1, 800d6b6 <_realloc_r+0x16>
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b2:	f7ff bb41 	b.w	800cd38 <_malloc_r>
 800d6b6:	b92a      	cbnz	r2, 800d6c4 <_realloc_r+0x24>
 800d6b8:	f7ff fc88 	bl	800cfcc <_free_r>
 800d6bc:	4625      	mov	r5, r4
 800d6be:	4628      	mov	r0, r5
 800d6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c4:	f000 f81b 	bl	800d6fe <_malloc_usable_size_r>
 800d6c8:	4284      	cmp	r4, r0
 800d6ca:	4607      	mov	r7, r0
 800d6cc:	d802      	bhi.n	800d6d4 <_realloc_r+0x34>
 800d6ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6d2:	d812      	bhi.n	800d6fa <_realloc_r+0x5a>
 800d6d4:	4621      	mov	r1, r4
 800d6d6:	4640      	mov	r0, r8
 800d6d8:	f7ff fb2e 	bl	800cd38 <_malloc_r>
 800d6dc:	4605      	mov	r5, r0
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d0ed      	beq.n	800d6be <_realloc_r+0x1e>
 800d6e2:	42bc      	cmp	r4, r7
 800d6e4:	4622      	mov	r2, r4
 800d6e6:	4631      	mov	r1, r6
 800d6e8:	bf28      	it	cs
 800d6ea:	463a      	movcs	r2, r7
 800d6ec:	f7ff ffca 	bl	800d684 <memcpy>
 800d6f0:	4631      	mov	r1, r6
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	f7ff fc6a 	bl	800cfcc <_free_r>
 800d6f8:	e7e1      	b.n	800d6be <_realloc_r+0x1e>
 800d6fa:	4635      	mov	r5, r6
 800d6fc:	e7df      	b.n	800d6be <_realloc_r+0x1e>

0800d6fe <_malloc_usable_size_r>:
 800d6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d702:	1f18      	subs	r0, r3, #4
 800d704:	2b00      	cmp	r3, #0
 800d706:	bfbc      	itt	lt
 800d708:	580b      	ldrlt	r3, [r1, r0]
 800d70a:	18c0      	addlt	r0, r0, r3
 800d70c:	4770      	bx	lr
	...

0800d710 <_init>:
 800d710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d712:	bf00      	nop
 800d714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d716:	bc08      	pop	{r3}
 800d718:	469e      	mov	lr, r3
 800d71a:	4770      	bx	lr

0800d71c <_fini>:
 800d71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71e:	bf00      	nop
 800d720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d722:	bc08      	pop	{r3}
 800d724:	469e      	mov	lr, r3
 800d726:	4770      	bx	lr
