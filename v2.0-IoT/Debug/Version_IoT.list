
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc58  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de78  0800de78  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800de78  0800de78  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de78  0800de78  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de78  0800de78  0001de78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de7c  0800de7c  0001de7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800de80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  2000010c  0800df8c  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800df8c  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016514  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000353b  00000000  00000000  0003668c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  0003ae50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c67d  00000000  00000000  0003bcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c111  00000000  00000000  00058329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee73  00000000  00000000  0007443a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005210  00000000  00000000  001132b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001184c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce24 	.word	0x0800ce24

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800ce24 	.word	0x0800ce24

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc5a 	bl	8009b08 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fad2 	bl	8008800 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000128 	.word	0x20000128
 80004bc:	20000384 	.word	0x20000384
 80004c0:	200001d5 	.word	0x200001d5
 80004c4:	200001fd 	.word	0x200001fd
 80004c8:	20000200 	.word	0x20000200
 80004cc:	20000201 	.word	0x20000201
 80004d0:	20000202 	.word	0x20000202
 80004d4:	20000203 	.word	0x20000203
 80004d8:	20000204 	.word	0x20000204
 80004dc:	20000205 	.word	0x20000205
 80004e0:	20000215 	.word	0x20000215
 80004e4:	20000206 	.word	0x20000206
 80004e8:	20000216 	.word	0x20000216
 80004ec:	20000207 	.word	0x20000207
 80004f0:	20000217 	.word	0x20000217
 80004f4:	2000020a 	.word	0x2000020a
 80004f8:	2000020b 	.word	0x2000020b
 80004fc:	2000020c 	.word	0x2000020c
 8000500:	2000020d 	.word	0x2000020d
 8000504:	2000020e 	.word	0x2000020e
 8000508:	2000020f 	.word	0x2000020f
 800050c:	20000210 	.word	0x20000210
 8000510:	20000211 	.word	0x20000211
 8000514:	20000212 	.word	0x20000212
 8000518:	20000213 	.word	0x20000213
 800051c:	20000214 	.word	0x20000214
 8000520:	20000218 	.word	0x20000218
 8000524:	2000021a 	.word	0x2000021a
 8000528:	200001f8 	.word	0x200001f8
 800052c:	200001f9 	.word	0x200001f9
 8000530:	200001fa 	.word	0x200001fa
 8000534:	20000008 	.word	0x20000008
 8000538:	20000009 	.word	0x20000009
 800053c:	200001fb 	.word	0x200001fb
 8000540:	2000021d 	.word	0x2000021d
 8000544:	2000021b 	.word	0x2000021b
 8000548:	20000209 	.word	0x20000209
 800054c:	2000021c 	.word	0x2000021c
 8000550:	20000208 	.word	0x20000208
 8000554:	2000021e 	.word	0x2000021e
 8000558:	2000021f 	.word	0x2000021f
 800055c:	20000220 	.word	0x20000220
 8000560:	20000221 	.word	0x20000221
 8000564:	20000222 	.word	0x20000222
 8000568:	20000223 	.word	0x20000223
 800056c:	20000224 	.word	0x20000224
 8000570:	20000225 	.word	0x20000225
 8000574:	20000226 	.word	0x20000226
 8000578:	20000227 	.word	0x20000227
 800057c:	200001d4 	.word	0x200001d4
	}

	if(kapi1AcSure>5) {
 8000580:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <eepromKontrol+0x4b0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b56      	ldr	r3, [pc, #344]	; (80006e4 <eepromKontrol+0x4b0>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <eepromKontrol+0x4b4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <eepromKontrol+0x4b4>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b53      	ldr	r3, [pc, #332]	; (80006ec <eepromKontrol+0x4b8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b51      	ldr	r3, [pc, #324]	; (80006ec <eepromKontrol+0x4b8>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b51      	ldr	r3, [pc, #324]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <eepromKontrol+0x4bc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4c      	ldr	r3, [pc, #304]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b49      	ldr	r3, [pc, #292]	; (80006fc <eepromKontrol+0x4c8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <eepromKontrol+0x4c8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <eepromKontrol+0x4cc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <eepromKontrol+0x4cc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b44      	ldr	r3, [pc, #272]	; (8000704 <eepromKontrol+0x4d0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <eepromKontrol+0x4d0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b42      	ldr	r3, [pc, #264]	; (8000708 <eepromKontrol+0x4d4>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <eepromKontrol+0x4d4>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <eepromKontrol+0x4d8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <eepromKontrol+0x4d8>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <eepromKontrol+0x4dc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <eepromKontrol+0x4dc>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <eepromKontrol+0x4e0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b38      	ldr	r3, [pc, #224]	; (8000714 <eepromKontrol+0x4e0>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <eepromKontrol+0x4e4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <eepromKontrol+0x4e4>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <eepromKontrol+0x4e8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <eepromKontrol+0x4e8>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <eepromKontrol+0x4ec>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <eepromKontrol+0x4ec>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <eepromKontrol+0x4f0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <eepromKontrol+0x4f0>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <eepromKontrol+0x4f4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <eepromKontrol+0x4f4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <eepromKontrol+0x4f8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <eepromKontrol+0x4f8>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <eepromKontrol+0x4fc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <eepromKontrol+0x4fc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <eepromKontrol+0x500>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <eepromKontrol+0x500>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <eepromKontrol+0x504>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <eepromKontrol+0x504>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	//memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
	readFromEEPROM(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f851 	bl	800075c <readFromEEPROM>
	HAL_Delay(500);
 80006ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006be:	f008 f89f 	bl	8008800 <HAL_Delay>
	readFromEEPROM(2);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 f84a 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f008 f898 	bl	8008800 <HAL_Delay>
	readFromEEPROM(3);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f843 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f008 f891 	bl	8008800 <HAL_Delay>
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000215 	.word	0x20000215
 80006e8:	20000206 	.word	0x20000206
 80006ec:	20000216 	.word	0x20000216
 80006f0:	20000207 	.word	0x20000207
 80006f4:	20000209 	.word	0x20000209
 80006f8:	20000217 	.word	0x20000217
 80006fc:	2000020a 	.word	0x2000020a
 8000700:	2000020b 	.word	0x2000020b
 8000704:	2000020c 	.word	0x2000020c
 8000708:	2000020d 	.word	0x2000020d
 800070c:	2000020e 	.word	0x2000020e
 8000710:	2000020f 	.word	0x2000020f
 8000714:	20000210 	.word	0x20000210
 8000718:	20000211 	.word	0x20000211
 800071c:	20000212 	.word	0x20000212
 8000720:	20000213 	.word	0x20000213
 8000724:	20000214 	.word	0x20000214
 8000728:	20000218 	.word	0x20000218
 800072c:	2000021a 	.word	0x2000021a
 8000730:	2000021c 	.word	0x2000021c
 8000734:	2000021d 	.word	0x2000021d
 8000738:	2000021b 	.word	0x2000021b

0800073c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <getCharFromCursorPosition+0x1c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	2000002c 	.word	0x2000002c

0800075c <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d117      	bne.n	800079a <readFromEEPROM+0x3e>
		//MachineID Okuma
		uint8_t tempMachineIDStartPos = idStartPos;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <readFromEEPROM+0xc4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	e00d      	b.n	8000792 <readFromEEPROM+0x36>
			machineID[i] = eepromData[tempMachineIDStartPos];
 8000776:	7ffb      	ldrb	r3, [r7, #31]
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <readFromEEPROM+0xc8>)
 800077a:	5cd1      	ldrb	r1, [r2, r3]
 800077c:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <readFromEEPROM+0xcc>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	460a      	mov	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]

			tempMachineIDStartPos++;
 8000786:	7ffb      	ldrb	r3, [r7, #31]
 8000788:	3301      	adds	r3, #1
 800078a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	3301      	adds	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	2b0b      	cmp	r3, #11
 8000796:	ddee      	ble.n	8000776 <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 8000798:	e03e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 2) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d11c      	bne.n	80007da <readFromEEPROM+0x7e>
		uint8_t tempSSIDStartPos = ssidStartPos;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <readFromEEPROM+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e012      	b.n	80007d2 <readFromEEPROM+0x76>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <readFromEEPROM+0xc8>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffc2 	bl	800073c <getCharFromCursorPosition>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <readFromEEPROM+0xd4>)
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	460a      	mov	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	3301      	adds	r3, #1
 80007ca:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b13      	cmp	r3, #19
 80007d6:	dde9      	ble.n	80007ac <readFromEEPROM+0x50>
}
 80007d8:	e01e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 3) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d11b      	bne.n	8000818 <readFromEEPROM+0xbc>
		uint8_t tempPassStartPos = passStartPos;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <readFromEEPROM+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e012      	b.n	8000812 <readFromEEPROM+0xb6>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <readFromEEPROM+0xc8>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffa2 	bl	800073c <getCharFromCursorPosition>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <readFromEEPROM+0xdc>)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	3301      	adds	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b13      	cmp	r3, #19
 8000816:	dde9      	ble.n	80007ec <readFromEEPROM+0x90>
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000000c 	.word	0x2000000c
 8000824:	20000128 	.word	0x20000128
 8000828:	200001a0 	.word	0x200001a0
 800082c:	20000010 	.word	0x20000010
 8000830:	200001ac 	.word	0x200001ac
 8000834:	20000014 	.word	0x20000014
 8000838:	200001c0 	.word	0x200001c0

0800083c <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b09f      	sub	sp, #124	; 0x7c
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000848:	4948      	ldr	r1, [pc, #288]	; (800096c <ESP8266_Init+0x130>)
 800084a:	4849      	ldr	r0, [pc, #292]	; (8000970 <ESP8266_Init+0x134>)
 800084c:	f00b fe8a 	bl	800c564 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000850:	4847      	ldr	r0, [pc, #284]	; (8000970 <ESP8266_Init+0x134>)
 8000852:	f7ff fce7 	bl	8000224 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29b      	uxth	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	4944      	ldr	r1, [pc, #272]	; (8000970 <ESP8266_Init+0x134>)
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f00b f89a 	bl	800b998 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000868:	f007 ffca 	bl	8008800 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 800086c:	4941      	ldr	r1, [pc, #260]	; (8000974 <ESP8266_Init+0x138>)
 800086e:	4840      	ldr	r0, [pc, #256]	; (8000970 <ESP8266_Init+0x134>)
 8000870:	f00b fe78 	bl	800c564 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000874:	483e      	ldr	r0, [pc, #248]	; (8000970 <ESP8266_Init+0x134>)
 8000876:	f7ff fcd5 	bl	8000224 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29b      	uxth	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	493b      	ldr	r1, [pc, #236]	; (8000970 <ESP8266_Init+0x134>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f00b f888 	bl	800b998 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088c:	f007 ffb8 	bl	8008800 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000890:	4939      	ldr	r1, [pc, #228]	; (8000978 <ESP8266_Init+0x13c>)
 8000892:	4837      	ldr	r0, [pc, #220]	; (8000970 <ESP8266_Init+0x134>)
 8000894:	f00b fe66 	bl	800c564 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000898:	4835      	ldr	r0, [pc, #212]	; (8000970 <ESP8266_Init+0x134>)
 800089a:	f7ff fcc3 	bl	8000224 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	4932      	ldr	r1, [pc, #200]	; (8000970 <ESP8266_Init+0x134>)
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f00b f876 	bl	800b998 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b0:	f007 ffa6 	bl	8008800 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008b4:	4931      	ldr	r1, [pc, #196]	; (800097c <ESP8266_Init+0x140>)
 80008b6:	482e      	ldr	r0, [pc, #184]	; (8000970 <ESP8266_Init+0x134>)
 80008b8:	f00b fe54 	bl	800c564 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008bc:	482c      	ldr	r0, [pc, #176]	; (8000970 <ESP8266_Init+0x134>)
 80008be:	f7ff fcb1 	bl	8000224 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4929      	ldr	r1, [pc, #164]	; (8000970 <ESP8266_Init+0x134>)
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f00b f864 	bl	800b998 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008d4:	f007 ff94 	bl	8008800 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <ESP8266_Init+0x144>)
 80008de:	461c      	mov	r4, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e4:	c407      	stmia	r4!, {r0, r1, r2}
 80008e6:	8023      	strh	r3, [r4, #0]
 80008e8:	3402      	adds	r4, #2
 80008ea:	0c1b      	lsrs	r3, r3, #16
 80008ec:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00b fe97 	bl	800c628 <strcat>
	strcat(str, "\",\"");
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fc90 	bl	8000224 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4413      	add	r3, r2
 800090e:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <ESP8266_Init+0x148>)
 8000910:	6810      	ldr	r0, [r2, #0]
 8000912:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	4618      	mov	r0, r3
 800091c:	f00b fe84 	bl	800c628 <strcat>
	strcat(str, "\"\r\n");
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc7d 	bl	8000224 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4413      	add	r3, r2
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <ESP8266_Init+0x14c>)
 8000936:	6810      	ldr	r0, [r2, #0]
 8000938:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	461a      	mov	r2, r3
 8000940:	4912      	ldr	r1, [pc, #72]	; (800098c <ESP8266_Init+0x150>)
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <ESP8266_Init+0x134>)
 8000944:	f00b fe0e 	bl	800c564 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <ESP8266_Init+0x134>)
 800094a:	f7ff fc6b 	bl	8000224 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29b      	uxth	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	4906      	ldr	r1, [pc, #24]	; (8000970 <ESP8266_Init+0x134>)
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f00b f81e 	bl	800b998 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800095c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000960:	f007 ff4e 	bl	8008800 <HAL_Delay>
}
 8000964:	bf00      	nop
 8000966:	377c      	adds	r7, #124	; 0x7c
 8000968:	46bd      	mov	sp, r7
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	0800ce3c 	.word	0x0800ce3c
 8000970:	20000260 	.word	0x20000260
 8000974:	0800ce4c 	.word	0x0800ce4c
 8000978:	0800ce58 	.word	0x0800ce58
 800097c:	0800ce60 	.word	0x0800ce60
 8000980:	0800ce70 	.word	0x0800ce70
 8000984:	0800ce80 	.word	0x0800ce80
 8000988:	0800ce84 	.word	0x0800ce84
 800098c:	0800ce88 	.word	0x0800ce88

08000990 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b0c6      	sub	sp, #280	; 0x118
 8000994:	af02      	add	r7, sp, #8
 8000996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800099a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800099e:	6018      	str	r0, [r3, #0]
 80009a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009a8:	6019      	str	r1, [r3, #0]
 80009aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009b2:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009b4:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <sendMachineData+0xec>)
 80009b6:	4932      	ldr	r1, [pc, #200]	; (8000a80 <sendMachineData+0xf0>)
 80009b8:	4832      	ldr	r0, [pc, #200]	; (8000a84 <sendMachineData+0xf4>)
 80009ba:	f00b fdd3 	bl	800c564 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009be:	4831      	ldr	r0, [pc, #196]	; (8000a84 <sendMachineData+0xf4>)
 80009c0:	f7ff fc30 	bl	8000224 <strlen>
 80009c4:	4603      	mov	r3, r0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009d0:	492c      	ldr	r1, [pc, #176]	; (8000a84 <sendMachineData+0xf4>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	f00a ffe0 	bl	800b998 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80009d8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80009dc:	f007 ff10 	bl	8008800 <HAL_Delay>

	sprintf(local_txA,
 80009e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009e8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009ec:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80009f0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009f4:	4924      	ldr	r1, [pc, #144]	; (8000a88 <sendMachineData+0xf8>)
 80009f6:	9100      	str	r1, [sp, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	4923      	ldr	r1, [pc, #140]	; (8000a8c <sendMachineData+0xfc>)
 80009fe:	f00b fdb1 	bl	800c564 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fc0c 	bl	8000224 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a1a:	491d      	ldr	r1, [pc, #116]	; (8000a90 <sendMachineData+0x100>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00b fda1 	bl	800c564 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fbfc 	bl	8000224 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f107 0110 	add.w	r1, r7, #16
 8000a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	f00a ffab 	bl	800b998 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a42:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a46:	f007 fedb 	bl	8008800 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbe8 	bl	8000224 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	f00a ff97 	bl	800b998 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a6a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a6e:	f007 fec7 	bl	8008800 <HAL_Delay>
}
 8000a72:	bf00      	nop
 8000a74:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800ce8c 	.word	0x0800ce8c
 8000a80:	0800ce9c 	.word	0x0800ce9c
 8000a84:	20000260 	.word	0x20000260
 8000a88:	0800cf18 	.word	0x0800cf18
 8000a8c:	0800cebc 	.word	0x0800cebc
 8000a90:	0800cf2c 	.word	0x0800cf2c

08000a94 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af04      	add	r7, sp, #16
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <hata2EEPROM+0xa4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <hata2EEPROM+0xa8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a25      	ldr	r2, [pc, #148]	; (8000b40 <hata2EEPROM+0xac>)
 8000aac:	5cd3      	ldrb	r3, [r2, r3]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d002      	beq.n	8000ab8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000ab2:	f000 f92b 	bl	8000d0c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000ab6:	e000      	b.n	8000aba <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000ab8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e012      	b.n	8000ae6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <hata2EEPROM+0xa8>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <hata2EEPROM+0xac>)
 8000aca:	5cd3      	ldrb	r3, [r2, r3]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d107      	bne.n	8000ae0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <hata2EEPROM+0xa8>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4919      	ldr	r1, [pc, #100]	; (8000b40 <hata2EEPROM+0xac>)
 8000ada:	79fa      	ldrb	r2, [r7, #7]
 8000adc:	54ca      	strb	r2, [r1, r3]
					break;
 8000ade:	e007      	b.n	8000af0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <hata2EEPROM+0xa4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbe7      	blt.n	8000ac0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <hata2EEPROM+0xa8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	b299      	uxth	r1, r3
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <hata2EEPROM+0xa4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	b298      	uxth	r0, r3
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <hata2EEPROM+0xa8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <hata2EEPROM+0xac>)
 8000b02:	4413      	add	r3, r2
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <hata2EEPROM+0xa4>)
 8000b06:	6812      	ldr	r2, [r2, #0]
 8000b08:	b292      	uxth	r2, r2
 8000b0a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b0e:	9402      	str	r4, [sp, #8]
 8000b10:	9201      	str	r2, [sp, #4]
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	4603      	mov	r3, r0
 8000b16:	460a      	mov	r2, r1
 8000b18:	21a0      	movs	r1, #160	; 0xa0
 8000b1a:	480a      	ldr	r0, [pc, #40]	; (8000b44 <hata2EEPROM+0xb0>)
 8000b1c:	f008 fefa 	bl	8009914 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b24:	f007 fe6c 	bl	8008800 <HAL_Delay>
	eepromKontrol(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff fb83 	bl	8000234 <eepromKontrol>
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000a8 	.word	0x200000a8
 8000b3c:	200000ac 	.word	0x200000ac
 8000b40:	20000128 	.word	0x20000128
 8000b44:	20000384 	.word	0x20000384

08000b48 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d11d      	bne.n	8000b94 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b58:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b60:	4a61      	ldr	r2, [pc, #388]	; (8000ce8 <hataKoduLcdGoster+0x1a0>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	2001      	movs	r0, #1
 8000b66:	f007 f8f5 	bl	8007d54 <lcd_print>
 8000b6a:	e008      	b.n	8000b7e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b6c:	4b5d      	ldr	r3, [pc, #372]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d104      	bne.n	8000b7e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b74:	4a5d      	ldr	r2, [pc, #372]	; (8000cec <hataKoduLcdGoster+0x1a4>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f007 f8eb 	bl	8007d54 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b7e:	4a5c      	ldr	r2, [pc, #368]	; (8000cf0 <hataKoduLcdGoster+0x1a8>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	2002      	movs	r0, #2
 8000b84:	f007 f8e6 	bl	8007d54 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b88:	4a5a      	ldr	r2, [pc, #360]	; (8000cf4 <hataKoduLcdGoster+0x1ac>)
 8000b8a:	2107      	movs	r1, #7
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f007 f8e1 	bl	8007d54 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b92:	e0a3      	b.n	8000cdc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d11d      	bne.n	8000bd6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b9a:	4b52      	ldr	r3, [pc, #328]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000ba2:	4a51      	ldr	r2, [pc, #324]	; (8000ce8 <hataKoduLcdGoster+0x1a0>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f007 f8d4 	bl	8007d54 <lcd_print>
 8000bac:	e008      	b.n	8000bc0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000bae:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d104      	bne.n	8000bc0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bb6:	4a4d      	ldr	r2, [pc, #308]	; (8000cec <hataKoduLcdGoster+0x1a4>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f007 f8ca 	bl	8007d54 <lcd_print>
		lcd_print(2, 2, "2");
 8000bc0:	4a4d      	ldr	r2, [pc, #308]	; (8000cf8 <hataKoduLcdGoster+0x1b0>)
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f007 f8c5 	bl	8007d54 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bca:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <hataKoduLcdGoster+0x1ac>)
 8000bcc:	2107      	movs	r1, #7
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f007 f8c0 	bl	8007d54 <lcd_print>
}
 8000bd4:	e082      	b.n	8000cdc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d11d      	bne.n	8000c18 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000bdc:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d105      	bne.n	8000bf0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000be4:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <hataKoduLcdGoster+0x1a0>)
 8000be6:	2101      	movs	r1, #1
 8000be8:	2001      	movs	r0, #1
 8000bea:	f007 f8b3 	bl	8007d54 <lcd_print>
 8000bee:	e008      	b.n	8000c02 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000bf0:	4b3c      	ldr	r3, [pc, #240]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d104      	bne.n	8000c02 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000bf8:	4a3c      	ldr	r2, [pc, #240]	; (8000cec <hataKoduLcdGoster+0x1a4>)
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f007 f8a9 	bl	8007d54 <lcd_print>
		lcd_print(2, 3, "3");
 8000c02:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <hataKoduLcdGoster+0x1b4>)
 8000c04:	2103      	movs	r1, #3
 8000c06:	2002      	movs	r0, #2
 8000c08:	f007 f8a4 	bl	8007d54 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c0c:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <hataKoduLcdGoster+0x1ac>)
 8000c0e:	2107      	movs	r1, #7
 8000c10:	2002      	movs	r0, #2
 8000c12:	f007 f89f 	bl	8007d54 <lcd_print>
}
 8000c16:	e061      	b.n	8000cdc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d11d      	bne.n	8000c5a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d105      	bne.n	8000c32 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c26:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <hataKoduLcdGoster+0x1a0>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f007 f892 	bl	8007d54 <lcd_print>
 8000c30:	e008      	b.n	8000c44 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c32:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d104      	bne.n	8000c44 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c3a:	4a2c      	ldr	r2, [pc, #176]	; (8000cec <hataKoduLcdGoster+0x1a4>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f007 f888 	bl	8007d54 <lcd_print>
		lcd_print(2, 4, "4");
 8000c44:	4a2e      	ldr	r2, [pc, #184]	; (8000d00 <hataKoduLcdGoster+0x1b8>)
 8000c46:	2104      	movs	r1, #4
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f007 f883 	bl	8007d54 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <hataKoduLcdGoster+0x1ac>)
 8000c50:	2107      	movs	r1, #7
 8000c52:	2002      	movs	r0, #2
 8000c54:	f007 f87e 	bl	8007d54 <lcd_print>
}
 8000c58:	e040      	b.n	8000cdc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	d11d      	bne.n	8000c9c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d105      	bne.n	8000c74 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c68:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <hataKoduLcdGoster+0x1a0>)
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f007 f871 	bl	8007d54 <lcd_print>
 8000c72:	e008      	b.n	8000c86 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d104      	bne.n	8000c86 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <hataKoduLcdGoster+0x1a4>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2001      	movs	r0, #1
 8000c82:	f007 f867 	bl	8007d54 <lcd_print>
		lcd_print(2, 5, "5");
 8000c86:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <hataKoduLcdGoster+0x1bc>)
 8000c88:	2105      	movs	r1, #5
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f007 f862 	bl	8007d54 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <hataKoduLcdGoster+0x1ac>)
 8000c92:	2107      	movs	r1, #7
 8000c94:	2002      	movs	r0, #2
 8000c96:	f007 f85d 	bl	8007d54 <lcd_print>
}
 8000c9a:	e01f      	b.n	8000cdc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d11c      	bne.n	8000cdc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d105      	bne.n	8000cb6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <hataKoduLcdGoster+0x1a0>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f007 f850 	bl	8007d54 <lcd_print>
 8000cb4:	e008      	b.n	8000cc8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <hataKoduLcdGoster+0x19c>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d104      	bne.n	8000cc8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <hataKoduLcdGoster+0x1a4>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f007 f846 	bl	8007d54 <lcd_print>
		lcd_print(2, 6, "6");
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <hataKoduLcdGoster+0x1c0>)
 8000cca:	2106      	movs	r1, #6
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f007 f841 	bl	8007d54 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <hataKoduLcdGoster+0x1ac>)
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f007 f83c 	bl	8007d54 <lcd_print>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000021d 	.word	0x2000021d
 8000ce8:	0800cfb8 	.word	0x0800cfb8
 8000cec:	0800cfc8 	.word	0x0800cfc8
 8000cf0:	0800cfd8 	.word	0x0800cfd8
 8000cf4:	0800cfdc 	.word	0x0800cfdc
 8000cf8:	0800cfe8 	.word	0x0800cfe8
 8000cfc:	0800cfec 	.word	0x0800cfec
 8000d00:	0800cff0 	.word	0x0800cff0
 8000d04:	0800cff4 	.word	0x0800cff4
 8000d08:	0800cff8 	.word	0x0800cff8

08000d0c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e009      	b.n	8000d2c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <eepromDataFillWithEmpty+0x38>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <eepromDataFillWithEmpty+0x3c>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <eepromDataFillWithEmpty+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dbf0      	blt.n	8000d18 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000080 	.word	0x20000080
 8000d48:	20000128 	.word	0x20000128
 8000d4c:	200000a8 	.word	0x200000a8

08000d50 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d62:	4b50      	ldr	r3, [pc, #320]	; (8000ea4 <i2cTest+0x154>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b4e      	ldr	r3, [pc, #312]	; (8000ea4 <i2cTest+0x154>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0201 	bic.w	r2, r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d72:	484c      	ldr	r0, [pc, #304]	; (8000ea4 <i2cTest+0x154>)
 8000d74:	f008 fca0 	bl	80096b8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d78:	23c0      	movs	r3, #192	; 0xc0
 8000d7a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d7c:	2311      	movs	r3, #17
 8000d7e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4846      	ldr	r0, [pc, #280]	; (8000ea8 <i2cTest+0x158>)
 8000d8e:	f008 f8a7 	bl	8008ee0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	4844      	ldr	r0, [pc, #272]	; (8000ea8 <i2cTest+0x158>)
 8000d98:	f008 fb19 	bl	80093ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4841      	ldr	r0, [pc, #260]	; (8000ea8 <i2cTest+0x158>)
 8000da2:	f008 fb14 	bl	80093ce <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000da6:	200a      	movs	r0, #10
 8000da8:	f007 fd2a 	bl	8008800 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000dac:	bf00      	nop
 8000dae:	2140      	movs	r1, #64	; 0x40
 8000db0:	483d      	ldr	r0, [pc, #244]	; (8000ea8 <i2cTest+0x158>)
 8000db2:	f008 faf5 	bl	80093a0 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d006      	beq.n	8000dca <i2cTest+0x7a>
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	483a      	ldr	r0, [pc, #232]	; (8000ea8 <i2cTest+0x158>)
 8000dc0:	f008 faee 	bl	80093a0 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d1f1      	bne.n	8000dae <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	4836      	ldr	r0, [pc, #216]	; (8000ea8 <i2cTest+0x158>)
 8000dd0:	f008 fafd 	bl	80093ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000dd4:	200a      	movs	r0, #10
 8000dd6:	f007 fd13 	bl	8008800 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000dda:	bf00      	nop
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	4832      	ldr	r0, [pc, #200]	; (8000ea8 <i2cTest+0x158>)
 8000de0:	f008 fade 	bl	80093a0 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d0f8      	beq.n	8000ddc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <i2cTest+0x158>)
 8000df0:	f008 faed 	bl	80093ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f007 fd03 	bl	8008800 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dfa:	bf00      	nop
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	482a      	ldr	r0, [pc, #168]	; (8000ea8 <i2cTest+0x158>)
 8000e00:	f008 face 	bl	80093a0 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d0f8      	beq.n	8000dfc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	4826      	ldr	r0, [pc, #152]	; (8000ea8 <i2cTest+0x158>)
 8000e10:	f008 fadd 	bl	80093ce <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f007 fcf3 	bl	8008800 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e1a:	bf00      	nop
 8000e1c:	2140      	movs	r1, #64	; 0x40
 8000e1e:	4822      	ldr	r0, [pc, #136]	; (8000ea8 <i2cTest+0x158>)
 8000e20:	f008 fabe 	bl	80093a0 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d1f8      	bne.n	8000e1c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	481e      	ldr	r0, [pc, #120]	; (8000ea8 <i2cTest+0x158>)
 8000e30:	f008 facd 	bl	80093ce <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f007 fce3 	bl	8008800 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e3a:	bf00      	nop
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <i2cTest+0x158>)
 8000e40:	f008 faae 	bl	80093a0 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d1f8      	bne.n	8000e3c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <i2cTest+0x158>)
 8000e60:	f008 f83e 	bl	8008ee0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <i2cTest+0x154>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <i2cTest+0x154>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e72:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <i2cTest+0x154>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <i2cTest+0x154>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e82:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <i2cTest+0x154>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <i2cTest+0x154>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0201 	orr.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <i2cTest+0x154>)
 8000e96:	f008 facb 	bl	8009430 <HAL_I2C_Init>
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000384 	.word	0x20000384
 8000ea8:	40010c00 	.word	0x40010c00

08000eac <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000eb6:	20c8      	movs	r0, #200	; 0xc8
 8000eb8:	f007 fca2 	bl	8008800 <HAL_Delay>
	lcd_clear();
 8000ebc:	f006 ff76 	bl	8007dac <lcd_clear>
	if(type == 1 && page == 0) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d143      	bne.n	8000f4e <printTemplate+0xa2>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d140      	bne.n	8000f4e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000ecc:	4a9d      	ldr	r2, [pc, #628]	; (8001144 <printTemplate+0x298>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f006 ff3f 	bl	8007d54 <lcd_print>
		lcd_print(2, 3, "0");
 8000ed6:	4a9c      	ldr	r2, [pc, #624]	; (8001148 <printTemplate+0x29c>)
 8000ed8:	2103      	movs	r1, #3
 8000eda:	2002      	movs	r0, #2
 8000edc:	f006 ff3a 	bl	8007d54 <lcd_print>
		lcd_print(2, 4, "1");
 8000ee0:	4a9a      	ldr	r2, [pc, #616]	; (800114c <printTemplate+0x2a0>)
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f006 ff35 	bl	8007d54 <lcd_print>
		lcd_print(2, 5, "2");
 8000eea:	4a99      	ldr	r2, [pc, #612]	; (8001150 <printTemplate+0x2a4>)
 8000eec:	2105      	movs	r1, #5
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f006 ff30 	bl	8007d54 <lcd_print>
		lcd_print(2, 6, "3");
 8000ef4:	4a97      	ldr	r2, [pc, #604]	; (8001154 <printTemplate+0x2a8>)
 8000ef6:	2106      	movs	r1, #6
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f006 ff2b 	bl	8007d54 <lcd_print>
		lcd_print(2, 7, "4");
 8000efe:	4a96      	ldr	r2, [pc, #600]	; (8001158 <printTemplate+0x2ac>)
 8000f00:	2107      	movs	r1, #7
 8000f02:	2002      	movs	r0, #2
 8000f04:	f006 ff26 	bl	8007d54 <lcd_print>
		lcd_print(2, 10, "5");
 8000f08:	4a94      	ldr	r2, [pc, #592]	; (800115c <printTemplate+0x2b0>)
 8000f0a:	210a      	movs	r1, #10
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f006 ff21 	bl	8007d54 <lcd_print>
		lcd_print(2, 11, "6");
 8000f12:	4a93      	ldr	r2, [pc, #588]	; (8001160 <printTemplate+0x2b4>)
 8000f14:	210b      	movs	r1, #11
 8000f16:	2002      	movs	r0, #2
 8000f18:	f006 ff1c 	bl	8007d54 <lcd_print>
		lcd_print(2, 12, "7");
 8000f1c:	4a91      	ldr	r2, [pc, #580]	; (8001164 <printTemplate+0x2b8>)
 8000f1e:	210c      	movs	r1, #12
 8000f20:	2002      	movs	r0, #2
 8000f22:	f006 ff17 	bl	8007d54 <lcd_print>
		lcd_print(2, 13, "8");
 8000f26:	4a90      	ldr	r2, [pc, #576]	; (8001168 <printTemplate+0x2bc>)
 8000f28:	210d      	movs	r1, #13
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f006 ff12 	bl	8007d54 <lcd_print>
		lcd_print(2, 14, "9");
 8000f30:	4a8e      	ldr	r2, [pc, #568]	; (800116c <printTemplate+0x2c0>)
 8000f32:	210e      	movs	r1, #14
 8000f34:	2002      	movs	r0, #2
 8000f36:	f006 ff0d 	bl	8007d54 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f3a:	4a8d      	ldr	r2, [pc, #564]	; (8001170 <printTemplate+0x2c4>)
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f006 ff08 	bl	8007d54 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f44:	2103      	movs	r1, #3
 8000f46:	2002      	movs	r0, #2
 8000f48:	f006 fee5 	bl	8007d16 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f4c:	e0f5      	b.n	800113a <printTemplate+0x28e>
	} else if(type == 2) {
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d178      	bne.n	8001046 <printTemplate+0x19a>
		if(page == 1) {
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d114      	bne.n	8000f84 <printTemplate+0xd8>
			lcd_clear();
 8000f5a:	f006 ff27 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 8000f5e:	2064      	movs	r0, #100	; 0x64
 8000f60:	f007 fc4e 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f64:	4a83      	ldr	r2, [pc, #524]	; (8001174 <printTemplate+0x2c8>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f006 fef3 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f6e:	4a82      	ldr	r2, [pc, #520]	; (8001178 <printTemplate+0x2cc>)
 8000f70:	2107      	movs	r1, #7
 8000f72:	2001      	movs	r0, #1
 8000f74:	f006 feee 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f78:	4a80      	ldr	r2, [pc, #512]	; (800117c <printTemplate+0x2d0>)
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f006 fee9 	bl	8007d54 <lcd_print>
}
 8000f82:	e0da      	b.n	800113a <printTemplate+0x28e>
		} else if(page == 2) {
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d114      	bne.n	8000fb4 <printTemplate+0x108>
			lcd_clear();
 8000f8a:	f006 ff0f 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f007 fc36 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f94:	4a77      	ldr	r2, [pc, #476]	; (8001174 <printTemplate+0x2c8>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f006 fedb 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f9e:	4a76      	ldr	r2, [pc, #472]	; (8001178 <printTemplate+0x2cc>)
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f006 fed6 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fa8:	4a75      	ldr	r2, [pc, #468]	; (8001180 <printTemplate+0x2d4>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	2002      	movs	r0, #2
 8000fae:	f006 fed1 	bl	8007d54 <lcd_print>
}
 8000fb2:	e0c2      	b.n	800113a <printTemplate+0x28e>
		} else if(page == 3) {
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d114      	bne.n	8000fe4 <printTemplate+0x138>
			lcd_clear();
 8000fba:	f006 fef7 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 8000fbe:	2064      	movs	r0, #100	; 0x64
 8000fc0:	f007 fc1e 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fc4:	4a6b      	ldr	r2, [pc, #428]	; (8001174 <printTemplate+0x2c8>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f006 fec3 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fce:	4a6a      	ldr	r2, [pc, #424]	; (8001178 <printTemplate+0x2cc>)
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f006 febe 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fd8:	4a6a      	ldr	r2, [pc, #424]	; (8001184 <printTemplate+0x2d8>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f006 feb9 	bl	8007d54 <lcd_print>
}
 8000fe2:	e0aa      	b.n	800113a <printTemplate+0x28e>
		} else if(page == 4) {
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d114      	bne.n	8001014 <printTemplate+0x168>
			lcd_clear();
 8000fea:	f006 fedf 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 8000fee:	2064      	movs	r0, #100	; 0x64
 8000ff0:	f007 fc06 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ff4:	4a5f      	ldr	r2, [pc, #380]	; (8001174 <printTemplate+0x2c8>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f006 feab 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ffe:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <printTemplate+0x2cc>)
 8001000:	2107      	movs	r1, #7
 8001002:	2001      	movs	r0, #1
 8001004:	f006 fea6 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001008:	4a5f      	ldr	r2, [pc, #380]	; (8001188 <printTemplate+0x2dc>)
 800100a:	2101      	movs	r1, #1
 800100c:	2002      	movs	r0, #2
 800100e:	f006 fea1 	bl	8007d54 <lcd_print>
}
 8001012:	e092      	b.n	800113a <printTemplate+0x28e>
		} else if(page == 5) {
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b05      	cmp	r3, #5
 8001018:	f040 808f 	bne.w	800113a <printTemplate+0x28e>
			lcd_clear();
 800101c:	f006 fec6 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 8001020:	2064      	movs	r0, #100	; 0x64
 8001022:	f007 fbed 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001026:	4a53      	ldr	r2, [pc, #332]	; (8001174 <printTemplate+0x2c8>)
 8001028:	2101      	movs	r1, #1
 800102a:	2001      	movs	r0, #1
 800102c:	f006 fe92 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001030:	4a51      	ldr	r2, [pc, #324]	; (8001178 <printTemplate+0x2cc>)
 8001032:	2107      	movs	r1, #7
 8001034:	2001      	movs	r0, #1
 8001036:	f006 fe8d 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800103a:	4a54      	ldr	r2, [pc, #336]	; (800118c <printTemplate+0x2e0>)
 800103c:	2101      	movs	r1, #1
 800103e:	2002      	movs	r0, #2
 8001040:	f006 fe88 	bl	8007d54 <lcd_print>
}
 8001044:	e079      	b.n	800113a <printTemplate+0x28e>
	} else if(type == 3) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d176      	bne.n	800113a <printTemplate+0x28e>
		if(page == 1) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d114      	bne.n	800107c <printTemplate+0x1d0>
			lcd_clear();
 8001052:	f006 feab 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	; 0x64
 8001058:	f007 fbd2 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <printTemplate+0x2e4>)
 800105e:	2101      	movs	r1, #1
 8001060:	2001      	movs	r0, #1
 8001062:	f006 fe77 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001066:	4a4b      	ldr	r2, [pc, #300]	; (8001194 <printTemplate+0x2e8>)
 8001068:	2107      	movs	r1, #7
 800106a:	2001      	movs	r0, #1
 800106c:	f006 fe72 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001070:	4a42      	ldr	r2, [pc, #264]	; (800117c <printTemplate+0x2d0>)
 8001072:	2101      	movs	r1, #1
 8001074:	2002      	movs	r0, #2
 8001076:	f006 fe6d 	bl	8007d54 <lcd_print>
}
 800107a:	e05e      	b.n	800113a <printTemplate+0x28e>
		} else if(page == 2) {
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d114      	bne.n	80010ac <printTemplate+0x200>
			lcd_clear();
 8001082:	f006 fe93 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f007 fbba 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800108c:	4a40      	ldr	r2, [pc, #256]	; (8001190 <printTemplate+0x2e4>)
 800108e:	2101      	movs	r1, #1
 8001090:	2001      	movs	r0, #1
 8001092:	f006 fe5f 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001096:	4a3f      	ldr	r2, [pc, #252]	; (8001194 <printTemplate+0x2e8>)
 8001098:	2107      	movs	r1, #7
 800109a:	2001      	movs	r0, #1
 800109c:	f006 fe5a 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010a0:	4a37      	ldr	r2, [pc, #220]	; (8001180 <printTemplate+0x2d4>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	2002      	movs	r0, #2
 80010a6:	f006 fe55 	bl	8007d54 <lcd_print>
}
 80010aa:	e046      	b.n	800113a <printTemplate+0x28e>
		} else if(page == 3) {
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d114      	bne.n	80010dc <printTemplate+0x230>
			lcd_clear();
 80010b2:	f006 fe7b 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 80010b6:	2064      	movs	r0, #100	; 0x64
 80010b8:	f007 fba2 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010bc:	4a34      	ldr	r2, [pc, #208]	; (8001190 <printTemplate+0x2e4>)
 80010be:	2101      	movs	r1, #1
 80010c0:	2001      	movs	r0, #1
 80010c2:	f006 fe47 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010c6:	4a33      	ldr	r2, [pc, #204]	; (8001194 <printTemplate+0x2e8>)
 80010c8:	2107      	movs	r1, #7
 80010ca:	2001      	movs	r0, #1
 80010cc:	f006 fe42 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80010d0:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <printTemplate+0x2d8>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	2002      	movs	r0, #2
 80010d6:	f006 fe3d 	bl	8007d54 <lcd_print>
}
 80010da:	e02e      	b.n	800113a <printTemplate+0x28e>
		} else if(page == 4) {
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d114      	bne.n	800110c <printTemplate+0x260>
			lcd_clear();
 80010e2:	f006 fe63 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 80010e6:	2064      	movs	r0, #100	; 0x64
 80010e8:	f007 fb8a 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <printTemplate+0x2e4>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	2001      	movs	r0, #1
 80010f2:	f006 fe2f 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010f6:	4a27      	ldr	r2, [pc, #156]	; (8001194 <printTemplate+0x2e8>)
 80010f8:	2107      	movs	r1, #7
 80010fa:	2001      	movs	r0, #1
 80010fc:	f006 fe2a 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001100:	4a21      	ldr	r2, [pc, #132]	; (8001188 <printTemplate+0x2dc>)
 8001102:	2101      	movs	r1, #1
 8001104:	2002      	movs	r0, #2
 8001106:	f006 fe25 	bl	8007d54 <lcd_print>
}
 800110a:	e016      	b.n	800113a <printTemplate+0x28e>
		} else if(page == 5) {
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b05      	cmp	r3, #5
 8001110:	d113      	bne.n	800113a <printTemplate+0x28e>
			lcd_clear();
 8001112:	f006 fe4b 	bl	8007dac <lcd_clear>
			HAL_Delay(100);
 8001116:	2064      	movs	r0, #100	; 0x64
 8001118:	f007 fb72 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <printTemplate+0x2e4>)
 800111e:	2101      	movs	r1, #1
 8001120:	2001      	movs	r0, #1
 8001122:	f006 fe17 	bl	8007d54 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001126:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <printTemplate+0x2e8>)
 8001128:	2107      	movs	r1, #7
 800112a:	2001      	movs	r0, #1
 800112c:	f006 fe12 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001130:	4a16      	ldr	r2, [pc, #88]	; (800118c <printTemplate+0x2e0>)
 8001132:	2101      	movs	r1, #1
 8001134:	2002      	movs	r0, #2
 8001136:	f006 fe0d 	bl	8007d54 <lcd_print>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0800cffc 	.word	0x0800cffc
 8001148:	0800d004 	.word	0x0800d004
 800114c:	0800d008 	.word	0x0800d008
 8001150:	0800d00c 	.word	0x0800d00c
 8001154:	0800d010 	.word	0x0800d010
 8001158:	0800d014 	.word	0x0800d014
 800115c:	0800d018 	.word	0x0800d018
 8001160:	0800d01c 	.word	0x0800d01c
 8001164:	0800d020 	.word	0x0800d020
 8001168:	0800d024 	.word	0x0800d024
 800116c:	0800d028 	.word	0x0800d028
 8001170:	200001a0 	.word	0x200001a0
 8001174:	0800d02c 	.word	0x0800d02c
 8001178:	200001ac 	.word	0x200001ac
 800117c:	0800d034 	.word	0x0800d034
 8001180:	0800d048 	.word	0x0800d048
 8001184:	0800d05c 	.word	0x0800d05c
 8001188:	0800d070 	.word	0x0800d070
 800118c:	0800d084 	.word	0x0800d084
 8001190:	0800d098 	.word	0x0800d098
 8001194:	200001c0 	.word	0x200001c0

08001198 <checkSlideVal>:

int checkSlideVal(int state) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d111      	bne.n	80011ca <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011a6:	2101      	movs	r1, #1
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <checkSlideVal+0x60>)
 80011aa:	f008 f8f9 	bl	80093a0 <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <checkSlideVal+0x20>
			return 34;
 80011b4:	2322      	movs	r3, #34	; 0x22
 80011b6:	e01b      	b.n	80011f0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011b8:	2108      	movs	r1, #8
 80011ba:	4810      	ldr	r0, [pc, #64]	; (80011fc <checkSlideVal+0x64>)
 80011bc:	f008 f8f0 	bl	80093a0 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d113      	bne.n	80011ee <checkSlideVal+0x56>
			return 32;
 80011c6:	2320      	movs	r3, #32
 80011c8:	e012      	b.n	80011f0 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011ca:	2101      	movs	r1, #1
 80011cc:	480a      	ldr	r0, [pc, #40]	; (80011f8 <checkSlideVal+0x60>)
 80011ce:	f008 f8e7 	bl	80093a0 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <checkSlideVal+0x44>
			return 35;
 80011d8:	2323      	movs	r3, #35	; 0x23
 80011da:	e009      	b.n	80011f0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011dc:	2108      	movs	r1, #8
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <checkSlideVal+0x64>)
 80011e0:	f008 f8de 	bl	80093a0 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <checkSlideVal+0x56>
			return 33;
 80011ea:	2321      	movs	r3, #33	; 0x21
 80011ec:	e000      	b.n	80011f0 <checkSlideVal+0x58>
		}
	}
	return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40010800 	.word	0x40010800
 80011fc:	40011000 	.word	0x40011000

08001200 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff f808 	bl	8000224 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800121c:	e08a      	b.n	8001334 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f7ff ffba 	bl	8001198 <checkSlideVal>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	dd07      	ble.n	800123a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff ffb4 	bl	8001198 <checkSlideVal>
 8001230:	4603      	mov	r3, r0
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <slideText+0x148>)
 8001236:	701a      	strb	r2, [r3, #0]
			break;
 8001238:	e081      	b.n	800133e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
 800123e:	e075      	b.n	800132c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f7ff ffa9 	bl	8001198 <checkSlideVal>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	dd09      	ble.n	8001260 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f7ff ffa3 	bl	8001198 <checkSlideVal>
 8001252:	4603      	mov	r3, r0
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <slideText+0x148>)
 8001258:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800125e:	e069      	b.n	8001334 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	4413      	add	r3, r2
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	e029      	b.n	80012be <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	f7ff ff94 	bl	8001198 <checkSlideVal>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	dd0b      	ble.n	800128e <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f7ff ff8e 	bl	8001198 <checkSlideVal>
 800127c:	4603      	mov	r3, r0
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <slideText+0x148>)
 8001282:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800128c:	e01d      	b.n	80012ca <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	b2d9      	uxtb	r1, r3
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	f006 fd66 	bl	8007d7e <lcd_print_char>
				HAL_Delay(30);
 80012b2:	201e      	movs	r0, #30
 80012b4:	f007 faa4 	bl	8008800 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	3301      	adds	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	7dfa      	ldrb	r2, [r7, #23]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbcf      	blt.n	800126a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	e023      	b.n	800131a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff ff60 	bl	8001198 <checkSlideVal>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	dd0b      	ble.n	80012f6 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	f7ff ff5a 	bl	8001198 <checkSlideVal>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <slideText+0x148>)
 80012ea:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80012f4:	e017      	b.n	8001326 <slideText+0x126>
				}
			     if(j >= startPos) {
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	db0a      	blt.n	8001314 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	b2d1      	uxtb	r1, r2
 8001306:	2220      	movs	r2, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f006 fd38 	bl	8007d7e <lcd_print_char>
			    	 HAL_Delay(30);
 800130e:	201e      	movs	r0, #30
 8001310:	f007 fa76 	bl	8008800 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	3b01      	subs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	7dfa      	ldrb	r2, [r7, #23]
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	429a      	cmp	r2, r3
 8001324:	dad5      	bge.n	80012d2 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	3301      	adds	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	6a3a      	ldr	r2, [r7, #32]
 8001330:	429a      	cmp	r2, r3
 8001332:	db85      	blt.n	8001240 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	2b01      	cmp	r3, #1
 8001338:	f43f af71 	beq.w	800121e <slideText+0x1e>
			     }
			}
		}
	}
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001fc 	.word	0x200001fc

0800134c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001350:	f3bf 8f4f 	dsb	sy
}
 8001354:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <__NVIC_SystemReset+0x24>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800135e:	4904      	ldr	r1, [pc, #16]	; (8001370 <__NVIC_SystemReset+0x24>)
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_SystemReset+0x28>)
 8001362:	4313      	orrs	r3, r2
 8001364:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <__NVIC_SystemReset+0x20>
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	05fa0004 	.word	0x05fa0004

08001378 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800137e:	2101      	movs	r1, #1
 8001380:	488e      	ldr	r0, [pc, #568]	; (80015bc <menu+0x244>)
 8001382:	f008 f80d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b01      	cmp	r3, #1
 800138a:	f040 808e 	bne.w	80014aa <menu+0x132>
 800138e:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <menu+0x248>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8086 	beq.w	80014aa <menu+0x132>
		menuSayac = menuSayac+1;
 800139e:	4b89      	ldr	r3, [pc, #548]	; (80015c4 <menu+0x24c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b87      	ldr	r3, [pc, #540]	; (80015c4 <menu+0x24c>)
 80013a8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80013aa:	4b86      	ldr	r3, [pc, #536]	; (80015c4 <menu+0x24c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b24      	cmp	r3, #36	; 0x24
 80013b0:	d102      	bne.n	80013b8 <menu+0x40>
			menuSayac = 1;
 80013b2:	4b84      	ldr	r3, [pc, #528]	; (80015c4 <menu+0x24c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013b8:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <menu+0x24c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b12      	cmp	r3, #18
 80013be:	d106      	bne.n	80013ce <menu+0x56>
 80013c0:	4b81      	ldr	r3, [pc, #516]	; (80015c8 <menu+0x250>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <menu+0x56>
			menuSayac = 21;
 80013c8:	4b7e      	ldr	r3, [pc, #504]	; (80015c4 <menu+0x24c>)
 80013ca:	2215      	movs	r2, #21
 80013cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80013ce:	4b7d      	ldr	r3, [pc, #500]	; (80015c4 <menu+0x24c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d106      	bne.n	80013e4 <menu+0x6c>
 80013d6:	4b7d      	ldr	r3, [pc, #500]	; (80015cc <menu+0x254>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <menu+0x6c>
			menuSayac = 16;
 80013de:	4b79      	ldr	r3, [pc, #484]	; (80015c4 <menu+0x24c>)
 80013e0:	2210      	movs	r2, #16
 80013e2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80013e4:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <menu+0x24c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b0d      	cmp	r3, #13
 80013ea:	d106      	bne.n	80013fa <menu+0x82>
 80013ec:	4b77      	ldr	r3, [pc, #476]	; (80015cc <menu+0x254>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <menu+0x82>
			menuSayac = 16;
 80013f4:	4b73      	ldr	r3, [pc, #460]	; (80015c4 <menu+0x24c>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <menu+0x24c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b09      	cmp	r3, #9
 8001400:	d106      	bne.n	8001410 <menu+0x98>
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <menu+0x254>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d102      	bne.n	8001410 <menu+0x98>
			menuSayac = 13;
 800140a:	4b6e      	ldr	r3, [pc, #440]	; (80015c4 <menu+0x24c>)
 800140c:	220d      	movs	r2, #13
 800140e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001410:	4b6c      	ldr	r3, [pc, #432]	; (80015c4 <menu+0x24c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b0a      	cmp	r3, #10
 8001416:	d10a      	bne.n	800142e <menu+0xb6>
 8001418:	4b6d      	ldr	r3, [pc, #436]	; (80015d0 <menu+0x258>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d003      	beq.n	8001428 <menu+0xb0>
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <menu+0x258>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d102      	bne.n	800142e <menu+0xb6>
			menuSayac = 11;
 8001428:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <menu+0x24c>)
 800142a:	220b      	movs	r2, #11
 800142c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800142e:	4b65      	ldr	r3, [pc, #404]	; (80015c4 <menu+0x24c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d10e      	bne.n	8001454 <menu+0xdc>
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <menu+0x25c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d003      	beq.n	8001446 <menu+0xce>
 800143e:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <menu+0x25c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d106      	bne.n	8001454 <menu+0xdc>
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <menu+0x254>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <menu+0xdc>
			menuSayac = 16;
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <menu+0x24c>)
 8001450:	2210      	movs	r2, #16
 8001452:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001454:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <menu+0x24c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d10e      	bne.n	800147a <menu+0x102>
 800145c:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <menu+0x25c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d003      	beq.n	800146c <menu+0xf4>
 8001464:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <menu+0x25c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d106      	bne.n	800147a <menu+0x102>
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <menu+0x254>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d102      	bne.n	800147a <menu+0x102>
			menuSayac = 13;
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <menu+0x24c>)
 8001476:	220d      	movs	r2, #13
 8001478:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800147a:	4b52      	ldr	r3, [pc, #328]	; (80015c4 <menu+0x24c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	d106      	bne.n	8001490 <menu+0x118>
 8001482:	4b55      	ldr	r3, [pc, #340]	; (80015d8 <menu+0x260>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d102      	bne.n	8001490 <menu+0x118>
			menuSayac = 16;
 800148a:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <menu+0x24c>)
 800148c:	2210      	movs	r2, #16
 800148e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001490:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <menu+0x24c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b18      	cmp	r3, #24
 8001496:	d106      	bne.n	80014a6 <menu+0x12e>
 8001498:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <menu+0x250>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <menu+0x12e>
			menuSayac = 26;
 80014a0:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <menu+0x24c>)
 80014a2:	221a      	movs	r2, #26
 80014a4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014a6:	f003 fb39 	bl	8004b1c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014aa:	2108      	movs	r1, #8
 80014ac:	484b      	ldr	r0, [pc, #300]	; (80015dc <menu+0x264>)
 80014ae:	f007 ff77 	bl	80093a0 <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d175      	bne.n	80015a4 <menu+0x22c>
 80014b8:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <menu+0x248>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f083 0301 	eor.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d06e      	beq.n	80015a4 <menu+0x22c>
		if (menuSayac <= 1) {
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <menu+0x24c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d802      	bhi.n	80014d4 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <menu+0x24c>)
 80014d0:	2224      	movs	r2, #36	; 0x24
 80014d2:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <menu+0x24c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <menu+0x24c>)
 80014de:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <menu+0x24c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b14      	cmp	r3, #20
 80014e6:	d106      	bne.n	80014f6 <menu+0x17e>
 80014e8:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <menu+0x250>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <menu+0x17e>
			menuSayac = 17;
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <menu+0x24c>)
 80014f2:	2211      	movs	r2, #17
 80014f4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <menu+0x24c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	d106      	bne.n	800150c <menu+0x194>
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <menu+0x254>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <menu+0x194>
			menuSayac = 7;
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <menu+0x24c>)
 8001508:	2207      	movs	r2, #7
 800150a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <menu+0x24c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d106      	bne.n	8001522 <menu+0x1aa>
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <menu+0x254>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d102      	bne.n	8001522 <menu+0x1aa>
			menuSayac = 12;
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <menu+0x24c>)
 800151e:	220c      	movs	r2, #12
 8001520:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <menu+0x24c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d106      	bne.n	8001538 <menu+0x1c0>
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <menu+0x254>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d102      	bne.n	8001538 <menu+0x1c0>
			menuSayac = 8;
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <menu+0x24c>)
 8001534:	2208      	movs	r2, #8
 8001536:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <menu+0x24c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b0a      	cmp	r3, #10
 800153e:	d10a      	bne.n	8001556 <menu+0x1de>
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <menu+0x258>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d003      	beq.n	8001550 <menu+0x1d8>
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <menu+0x258>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d102      	bne.n	8001556 <menu+0x1de>
			menuSayac = 9;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <menu+0x24c>)
 8001552:	2209      	movs	r2, #9
 8001554:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <menu+0x24c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d10a      	bne.n	8001574 <menu+0x1fc>
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <menu+0x25c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d003      	beq.n	800156e <menu+0x1f6>
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <menu+0x25c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d102      	bne.n	8001574 <menu+0x1fc>
			menuSayac = 11;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <menu+0x24c>)
 8001570:	220b      	movs	r2, #11
 8001572:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <menu+0x24c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d106      	bne.n	800158a <menu+0x212>
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <menu+0x260>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d102      	bne.n	800158a <menu+0x212>
			menuSayac = 14;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <menu+0x24c>)
 8001586:	220e      	movs	r2, #14
 8001588:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <menu+0x24c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b19      	cmp	r3, #25
 8001590:	d106      	bne.n	80015a0 <menu+0x228>
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <menu+0x250>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <menu+0x228>
			menuSayac = 23;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <menu+0x24c>)
 800159c:	2217      	movs	r2, #23
 800159e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015a0:	f003 fabc 	bl	8004b1c <bekle>
	}

	if (menuSayac == 0) {
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <menu+0x24c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d133      	bne.n	8001614 <menu+0x29c>
		if(dilSecim == 0) {
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <menu+0x268>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d121      	bne.n	80015f8 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <menu+0x26c>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	2001      	movs	r0, #1
 80015ba:	e015      	b.n	80015e8 <menu+0x270>
 80015bc:	40010800 	.word	0x40010800
 80015c0:	2000022b 	.word	0x2000022b
 80015c4:	200001fc 	.word	0x200001fc
 80015c8:	2000020b 	.word	0x2000020b
 80015cc:	20000204 	.word	0x20000204
 80015d0:	20000205 	.word	0x20000205
 80015d4:	20000206 	.word	0x20000206
 80015d8:	20000207 	.word	0x20000207
 80015dc:	40011000 	.word	0x40011000
 80015e0:	2000021d 	.word	0x2000021d
 80015e4:	0800d0a0 	.word	0x0800d0a0
 80015e8:	f006 fbb4 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80015ec:	4a94      	ldr	r2, [pc, #592]	; (8001840 <menu+0x4c8>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	2002      	movs	r0, #2
 80015f2:	f006 fbaf 	bl	8007d54 <lcd_print>
 80015f6:	e00d      	b.n	8001614 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <menu+0x4cc>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d109      	bne.n	8001614 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001600:	4a91      	ldr	r2, [pc, #580]	; (8001848 <menu+0x4d0>)
 8001602:	2101      	movs	r1, #1
 8001604:	2001      	movs	r0, #1
 8001606:	f006 fba5 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800160a:	4a90      	ldr	r2, [pc, #576]	; (800184c <menu+0x4d4>)
 800160c:	2101      	movs	r1, #1
 800160e:	2002      	movs	r0, #2
 8001610:	f006 fba0 	bl	8007d54 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001614:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <menu+0x4d8>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	f040 82b5 	bne.w	8001b88 <menu+0x810>
		if(dilSecim == 0) {
 800161e:	4b89      	ldr	r3, [pc, #548]	; (8001844 <menu+0x4cc>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d105      	bne.n	8001632 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001626:	4a8b      	ldr	r2, [pc, #556]	; (8001854 <menu+0x4dc>)
 8001628:	2101      	movs	r1, #1
 800162a:	2001      	movs	r0, #1
 800162c:	f006 fb92 	bl	8007d54 <lcd_print>
 8001630:	e008      	b.n	8001644 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001632:	4b84      	ldr	r3, [pc, #528]	; (8001844 <menu+0x4cc>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d104      	bne.n	8001644 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800163a:	4a87      	ldr	r2, [pc, #540]	; (8001858 <menu+0x4e0>)
 800163c:	2101      	movs	r1, #1
 800163e:	2001      	movs	r0, #1
 8001640:	f006 fb88 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001644:	4b85      	ldr	r3, [pc, #532]	; (800185c <menu+0x4e4>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d123      	bne.n	8001694 <menu+0x31c>
			if(dilSecim == 0) {
 800164c:	4b7d      	ldr	r3, [pc, #500]	; (8001844 <menu+0x4cc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001654:	4a82      	ldr	r2, [pc, #520]	; (8001860 <menu+0x4e8>)
 8001656:	2101      	movs	r1, #1
 8001658:	2002      	movs	r0, #2
 800165a:	f006 fb7b 	bl	8007d54 <lcd_print>
 800165e:	e008      	b.n	8001672 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001660:	4b78      	ldr	r3, [pc, #480]	; (8001844 <menu+0x4cc>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d104      	bne.n	8001672 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001668:	4a7e      	ldr	r2, [pc, #504]	; (8001864 <menu+0x4ec>)
 800166a:	2101      	movs	r1, #1
 800166c:	2002      	movs	r0, #2
 800166e:	f006 fb71 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001672:	4a7d      	ldr	r2, [pc, #500]	; (8001868 <menu+0x4f0>)
 8001674:	210f      	movs	r1, #15
 8001676:	2002      	movs	r0, #2
 8001678:	f006 fb6c 	bl	8007d54 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800167c:	4b7b      	ldr	r3, [pc, #492]	; (800186c <menu+0x4f4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	220a      	movs	r2, #10
 8001682:	497b      	ldr	r1, [pc, #492]	; (8001870 <menu+0x4f8>)
 8001684:	4618      	mov	r0, r3
 8001686:	f00a feb7 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 800168a:	4a79      	ldr	r2, [pc, #484]	; (8001870 <menu+0x4f8>)
 800168c:	210e      	movs	r1, #14
 800168e:	2002      	movs	r0, #2
 8001690:	f006 fb60 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <menu+0x4e4>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d123      	bne.n	80016e4 <menu+0x36c>
			if(dilSecim == 0) {
 800169c:	4b69      	ldr	r3, [pc, #420]	; (8001844 <menu+0x4cc>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80016a4:	4a73      	ldr	r2, [pc, #460]	; (8001874 <menu+0x4fc>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	2002      	movs	r0, #2
 80016aa:	f006 fb53 	bl	8007d54 <lcd_print>
 80016ae:	e008      	b.n	80016c2 <menu+0x34a>
			} else if(dilSecim == 1) {
 80016b0:	4b64      	ldr	r3, [pc, #400]	; (8001844 <menu+0x4cc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d104      	bne.n	80016c2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80016b8:	4a6f      	ldr	r2, [pc, #444]	; (8001878 <menu+0x500>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	2002      	movs	r0, #2
 80016be:	f006 fb49 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016c2:	4a6e      	ldr	r2, [pc, #440]	; (800187c <menu+0x504>)
 80016c4:	210f      	movs	r1, #15
 80016c6:	2002      	movs	r0, #2
 80016c8:	f006 fb44 	bl	8007d54 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80016cc:	4b6c      	ldr	r3, [pc, #432]	; (8001880 <menu+0x508>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	220a      	movs	r2, #10
 80016d2:	4967      	ldr	r1, [pc, #412]	; (8001870 <menu+0x4f8>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00a fe8f 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 80016da:	4a65      	ldr	r2, [pc, #404]	; (8001870 <menu+0x4f8>)
 80016dc:	210e      	movs	r1, #14
 80016de:	2002      	movs	r0, #2
 80016e0:	f006 fb38 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <menu+0x4e4>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d123      	bne.n	8001734 <menu+0x3bc>
			if(dilSecim == 0) {
 80016ec:	4b55      	ldr	r3, [pc, #340]	; (8001844 <menu+0x4cc>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80016f4:	4a63      	ldr	r2, [pc, #396]	; (8001884 <menu+0x50c>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	2002      	movs	r0, #2
 80016fa:	f006 fb2b 	bl	8007d54 <lcd_print>
 80016fe:	e008      	b.n	8001712 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <menu+0x4cc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d104      	bne.n	8001712 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001708:	4a5f      	ldr	r2, [pc, #380]	; (8001888 <menu+0x510>)
 800170a:	2101      	movs	r1, #1
 800170c:	2002      	movs	r0, #2
 800170e:	f006 fb21 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001712:	4a5a      	ldr	r2, [pc, #360]	; (800187c <menu+0x504>)
 8001714:	210f      	movs	r1, #15
 8001716:	2002      	movs	r0, #2
 8001718:	f006 fb1c 	bl	8007d54 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800171c:	4b5b      	ldr	r3, [pc, #364]	; (800188c <menu+0x514>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	220a      	movs	r2, #10
 8001722:	4953      	ldr	r1, [pc, #332]	; (8001870 <menu+0x4f8>)
 8001724:	4618      	mov	r0, r3
 8001726:	f00a fe67 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 800172a:	4a51      	ldr	r2, [pc, #324]	; (8001870 <menu+0x4f8>)
 800172c:	210e      	movs	r1, #14
 800172e:	2002      	movs	r0, #2
 8001730:	f006 fb10 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001734:	4b49      	ldr	r3, [pc, #292]	; (800185c <menu+0x4e4>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d123      	bne.n	8001784 <menu+0x40c>
			if(dilSecim == 0) {
 800173c:	4b41      	ldr	r3, [pc, #260]	; (8001844 <menu+0x4cc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001744:	4a52      	ldr	r2, [pc, #328]	; (8001890 <menu+0x518>)
 8001746:	2101      	movs	r1, #1
 8001748:	2002      	movs	r0, #2
 800174a:	f006 fb03 	bl	8007d54 <lcd_print>
 800174e:	e008      	b.n	8001762 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001750:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <menu+0x4cc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d104      	bne.n	8001762 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001758:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <menu+0x51c>)
 800175a:	2101      	movs	r1, #1
 800175c:	2002      	movs	r0, #2
 800175e:	f006 faf9 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001762:	4a46      	ldr	r2, [pc, #280]	; (800187c <menu+0x504>)
 8001764:	210f      	movs	r1, #15
 8001766:	2002      	movs	r0, #2
 8001768:	f006 faf4 	bl	8007d54 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800176c:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <menu+0x520>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	220a      	movs	r2, #10
 8001772:	493f      	ldr	r1, [pc, #252]	; (8001870 <menu+0x4f8>)
 8001774:	4618      	mov	r0, r3
 8001776:	f00a fe3f 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 800177a:	4a3d      	ldr	r2, [pc, #244]	; (8001870 <menu+0x4f8>)
 800177c:	210e      	movs	r1, #14
 800177e:	2002      	movs	r0, #2
 8001780:	f006 fae8 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001784:	4b35      	ldr	r3, [pc, #212]	; (800185c <menu+0x4e4>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d123      	bne.n	80017d4 <menu+0x45c>
			if(dilSecim == 0) {
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <menu+0x4cc>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001794:	4a41      	ldr	r2, [pc, #260]	; (800189c <menu+0x524>)
 8001796:	2101      	movs	r1, #1
 8001798:	2002      	movs	r0, #2
 800179a:	f006 fadb 	bl	8007d54 <lcd_print>
 800179e:	e008      	b.n	80017b2 <menu+0x43a>
			} else if(dilSecim == 1) {
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <menu+0x4cc>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d104      	bne.n	80017b2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80017a8:	4a3d      	ldr	r2, [pc, #244]	; (80018a0 <menu+0x528>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	2002      	movs	r0, #2
 80017ae:	f006 fad1 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017b2:	4a32      	ldr	r2, [pc, #200]	; (800187c <menu+0x504>)
 80017b4:	210f      	movs	r1, #15
 80017b6:	2002      	movs	r0, #2
 80017b8:	f006 facc 	bl	8007d54 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <menu+0x52c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	220a      	movs	r2, #10
 80017c2:	492b      	ldr	r1, [pc, #172]	; (8001870 <menu+0x4f8>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00a fe17 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 80017ca:	4a29      	ldr	r2, [pc, #164]	; (8001870 <menu+0x4f8>)
 80017cc:	210e      	movs	r1, #14
 80017ce:	2002      	movs	r0, #2
 80017d0:	f006 fac0 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <menu+0x4e4>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d123      	bne.n	8001824 <menu+0x4ac>
			if(dilSecim == 0) {
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <menu+0x4cc>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80017e4:	4a30      	ldr	r2, [pc, #192]	; (80018a8 <menu+0x530>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2002      	movs	r0, #2
 80017ea:	f006 fab3 	bl	8007d54 <lcd_print>
 80017ee:	e008      	b.n	8001802 <menu+0x48a>
			} else if(dilSecim == 1) {
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <menu+0x4cc>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d104      	bne.n	8001802 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80017f8:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <menu+0x534>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	2002      	movs	r0, #2
 80017fe:	f006 faa9 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <menu+0x504>)
 8001804:	210f      	movs	r1, #15
 8001806:	2002      	movs	r0, #2
 8001808:	f006 faa4 	bl	8007d54 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <menu+0x538>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	220a      	movs	r2, #10
 8001812:	4917      	ldr	r1, [pc, #92]	; (8001870 <menu+0x4f8>)
 8001814:	4618      	mov	r0, r3
 8001816:	f00a fdef 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <menu+0x4f8>)
 800181c:	210e      	movs	r1, #14
 800181e:	2002      	movs	r0, #2
 8001820:	f006 fa98 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <menu+0x4e4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b06      	cmp	r3, #6
 800182a:	d15f      	bne.n	80018ec <menu+0x574>
			if(dilSecim == 0) {
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <menu+0x4cc>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d141      	bne.n	80018b8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001834:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <menu+0x53c>)
 8001836:	2101      	movs	r1, #1
 8001838:	2002      	movs	r0, #2
 800183a:	f006 fa8b 	bl	8007d54 <lcd_print>
 800183e:	e044      	b.n	80018ca <menu+0x552>
 8001840:	0800d0b4 	.word	0x0800d0b4
 8001844:	2000021d 	.word	0x2000021d
 8001848:	0800d0c8 	.word	0x0800d0c8
 800184c:	0800d0dc 	.word	0x0800d0dc
 8001850:	200001fc 	.word	0x200001fc
 8001854:	0800d0f0 	.word	0x0800d0f0
 8001858:	0800d104 	.word	0x0800d104
 800185c:	200001fe 	.word	0x200001fe
 8001860:	0800d118 	.word	0x0800d118
 8001864:	0800d128 	.word	0x0800d128
 8001868:	0800d138 	.word	0x0800d138
 800186c:	2000021e 	.word	0x2000021e
 8001870:	20000198 	.word	0x20000198
 8001874:	0800d13c 	.word	0x0800d13c
 8001878:	0800d14c 	.word	0x0800d14c
 800187c:	0800d15c 	.word	0x0800d15c
 8001880:	2000021f 	.word	0x2000021f
 8001884:	0800d160 	.word	0x0800d160
 8001888:	0800d170 	.word	0x0800d170
 800188c:	20000220 	.word	0x20000220
 8001890:	0800d180 	.word	0x0800d180
 8001894:	0800d190 	.word	0x0800d190
 8001898:	20000221 	.word	0x20000221
 800189c:	0800d1a0 	.word	0x0800d1a0
 80018a0:	0800d1b0 	.word	0x0800d1b0
 80018a4:	20000222 	.word	0x20000222
 80018a8:	0800d1c0 	.word	0x0800d1c0
 80018ac:	0800d1d0 	.word	0x0800d1d0
 80018b0:	20000223 	.word	0x20000223
 80018b4:	0800d1e0 	.word	0x0800d1e0
			} else if(dilSecim == 1) {
 80018b8:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <menu+0x680>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d104      	bne.n	80018ca <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <menu+0x684>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	2002      	movs	r0, #2
 80018c6:	f006 fa45 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018ca:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <menu+0x688>)
 80018cc:	210f      	movs	r1, #15
 80018ce:	2002      	movs	r0, #2
 80018d0:	f006 fa40 	bl	8007d54 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <menu+0x68c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	220a      	movs	r2, #10
 80018da:	494b      	ldr	r1, [pc, #300]	; (8001a08 <menu+0x690>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f00a fd8b 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 80018e2:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <menu+0x690>)
 80018e4:	210e      	movs	r1, #14
 80018e6:	2002      	movs	r0, #2
 80018e8:	f006 fa34 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80018ec:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <menu+0x694>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b07      	cmp	r3, #7
 80018f2:	d123      	bne.n	800193c <menu+0x5c4>
			if(dilSecim == 0) {
 80018f4:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <menu+0x680>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80018fc:	4a44      	ldr	r2, [pc, #272]	; (8001a10 <menu+0x698>)
 80018fe:	2101      	movs	r1, #1
 8001900:	2002      	movs	r0, #2
 8001902:	f006 fa27 	bl	8007d54 <lcd_print>
 8001906:	e008      	b.n	800191a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <menu+0x680>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d104      	bne.n	800191a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001910:	4a40      	ldr	r2, [pc, #256]	; (8001a14 <menu+0x69c>)
 8001912:	2101      	movs	r1, #1
 8001914:	2002      	movs	r0, #2
 8001916:	f006 fa1d 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800191a:	4a39      	ldr	r2, [pc, #228]	; (8001a00 <menu+0x688>)
 800191c:	210f      	movs	r1, #15
 800191e:	2002      	movs	r0, #2
 8001920:	f006 fa18 	bl	8007d54 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001924:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <menu+0x6a0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	220a      	movs	r2, #10
 800192a:	4937      	ldr	r1, [pc, #220]	; (8001a08 <menu+0x690>)
 800192c:	4618      	mov	r0, r3
 800192e:	f00a fd63 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 8001932:	4a35      	ldr	r2, [pc, #212]	; (8001a08 <menu+0x690>)
 8001934:	210e      	movs	r1, #14
 8001936:	2002      	movs	r0, #2
 8001938:	f006 fa0c 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <menu+0x694>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d123      	bne.n	800198c <menu+0x614>
			if(dilSecim == 0) {
 8001944:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <menu+0x680>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 800194c:	4a33      	ldr	r2, [pc, #204]	; (8001a1c <menu+0x6a4>)
 800194e:	2101      	movs	r1, #1
 8001950:	2002      	movs	r0, #2
 8001952:	f006 f9ff 	bl	8007d54 <lcd_print>
 8001956:	e008      	b.n	800196a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <menu+0x680>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d104      	bne.n	800196a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001960:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <menu+0x6a8>)
 8001962:	2101      	movs	r1, #1
 8001964:	2002      	movs	r0, #2
 8001966:	f006 f9f5 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800196a:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <menu+0x688>)
 800196c:	210f      	movs	r1, #15
 800196e:	2002      	movs	r0, #2
 8001970:	f006 f9f0 	bl	8007d54 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <menu+0x6ac>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	220a      	movs	r2, #10
 800197a:	4923      	ldr	r1, [pc, #140]	; (8001a08 <menu+0x690>)
 800197c:	4618      	mov	r0, r3
 800197e:	f00a fd3b 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 8001982:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <menu+0x690>)
 8001984:	210e      	movs	r1, #14
 8001986:	2002      	movs	r0, #2
 8001988:	f006 f9e4 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <menu+0x694>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b09      	cmp	r3, #9
 8001992:	d123      	bne.n	80019dc <menu+0x664>
			if(dilSecim == 0) {
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <menu+0x680>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 800199c:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <menu+0x6b0>)
 800199e:	2101      	movs	r1, #1
 80019a0:	2002      	movs	r0, #2
 80019a2:	f006 f9d7 	bl	8007d54 <lcd_print>
 80019a6:	e008      	b.n	80019ba <menu+0x642>
			} else if(dilSecim == 1) {
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <menu+0x680>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d104      	bne.n	80019ba <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80019b0:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <menu+0x6b4>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	2002      	movs	r0, #2
 80019b6:	f006 f9cd 	bl	8007d54 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <menu+0x6b8>)
 80019bc:	2110      	movs	r1, #16
 80019be:	2002      	movs	r0, #2
 80019c0:	f006 f9c8 	bl	8007d54 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <menu+0x6bc>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	220a      	movs	r2, #10
 80019ca:	490f      	ldr	r1, [pc, #60]	; (8001a08 <menu+0x690>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00a fd13 	bl	800c3f8 <itoa>
			lcd_print(2, 15, snum);
 80019d2:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <menu+0x690>)
 80019d4:	210f      	movs	r1, #15
 80019d6:	2002      	movs	r0, #2
 80019d8:	f006 f9bc 	bl	8007d54 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <menu+0x694>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b0a      	cmp	r3, #10
 80019e2:	d134      	bne.n	8001a4e <menu+0x6d6>
			if(dilSecim == 0) {
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <menu+0x680>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d127      	bne.n	8001a3c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 80019ec:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <menu+0x6c0>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	2002      	movs	r0, #2
 80019f2:	f006 f9af 	bl	8007d54 <lcd_print>
 80019f6:	e02a      	b.n	8001a4e <menu+0x6d6>
 80019f8:	2000021d 	.word	0x2000021d
 80019fc:	0800d1f0 	.word	0x0800d1f0
 8001a00:	0800d15c 	.word	0x0800d15c
 8001a04:	20000224 	.word	0x20000224
 8001a08:	20000198 	.word	0x20000198
 8001a0c:	200001fe 	.word	0x200001fe
 8001a10:	0800d200 	.word	0x0800d200
 8001a14:	0800d210 	.word	0x0800d210
 8001a18:	20000225 	.word	0x20000225
 8001a1c:	0800d220 	.word	0x0800d220
 8001a20:	0800d230 	.word	0x0800d230
 8001a24:	20000226 	.word	0x20000226
 8001a28:	0800d240 	.word	0x0800d240
 8001a2c:	0800d250 	.word	0x0800d250
 8001a30:	0800d260 	.word	0x0800d260
 8001a34:	20000227 	.word	0x20000227
 8001a38:	0800d264 	.word	0x0800d264
			} else if(dilSecim == 1) {
 8001a3c:	4b82      	ldr	r3, [pc, #520]	; (8001c48 <menu+0x8d0>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d104      	bne.n	8001a4e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001a44:	4a81      	ldr	r2, [pc, #516]	; (8001c4c <menu+0x8d4>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f006 f983 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a4e:	2102      	movs	r1, #2
 8001a50:	487f      	ldr	r0, [pc, #508]	; (8001c50 <menu+0x8d8>)
 8001a52:	f007 fca5 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d119      	bne.n	8001a90 <menu+0x718>
 8001a5c:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <menu+0x8dc>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f083 0301 	eor.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d012      	beq.n	8001a90 <menu+0x718>
 8001a6a:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <menu+0x8e0>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10e      	bne.n	8001a90 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a72:	4b7a      	ldr	r3, [pc, #488]	; (8001c5c <menu+0x8e4>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b78      	ldr	r3, [pc, #480]	; (8001c5c <menu+0x8e4>)
 8001a7c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a7e:	4b77      	ldr	r3, [pc, #476]	; (8001c5c <menu+0x8e4>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b0a      	cmp	r3, #10
 8001a84:	d902      	bls.n	8001a8c <menu+0x714>
				hataGostermeSirasi = 0;
 8001a86:	4b75      	ldr	r3, [pc, #468]	; (8001c5c <menu+0x8e4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a8c:	f003 f846 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a90:	2104      	movs	r1, #4
 8001a92:	486f      	ldr	r0, [pc, #444]	; (8001c50 <menu+0x8d8>)
 8001a94:	f007 fc84 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d119      	bne.n	8001ad2 <menu+0x75a>
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <menu+0x8dc>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d012      	beq.n	8001ad2 <menu+0x75a>
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <menu+0x8e0>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10e      	bne.n	8001ad2 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001ab4:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <menu+0x8e4>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <menu+0x8e4>)
 8001abe:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <menu+0x8e4>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b0b      	cmp	r3, #11
 8001ac6:	d902      	bls.n	8001ace <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001ac8:	4b64      	ldr	r3, [pc, #400]	; (8001c5c <menu+0x8e4>)
 8001aca:	220a      	movs	r2, #10
 8001acc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ace:	f003 f825 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	485e      	ldr	r0, [pc, #376]	; (8001c50 <menu+0x8d8>)
 8001ad6:	f007 fc63 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d153      	bne.n	8001b88 <menu+0x810>
 8001ae0:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <menu+0x8dc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f083 0301 	eor.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04c      	beq.n	8001b88 <menu+0x810>
 8001aee:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <menu+0x8e4>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b0a      	cmp	r3, #10
 8001af4:	d148      	bne.n	8001b88 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001af6:	4b5a      	ldr	r3, [pc, #360]	; (8001c60 <menu+0x8e8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <menu+0x8ec>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <menu+0x8f0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	4b56      	ldr	r3, [pc, #344]	; (8001c64 <menu+0x8ec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b12:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <menu+0x8f4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <menu+0x8ec>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <menu+0x8f8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <menu+0x8ec>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b2e:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <menu+0x8fc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <menu+0x8ec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001b3c:	4b4e      	ldr	r3, [pc, #312]	; (8001c78 <menu+0x900>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	4b48      	ldr	r3, [pc, #288]	; (8001c64 <menu+0x8ec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001b4a:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <menu+0x904>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <menu+0x8ec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b58:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <menu+0x908>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <menu+0x8ec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <menu+0x90c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <menu+0x8ec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <menu+0x910>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <menu+0x8ec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001b82:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <menu+0x914>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001b88:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <menu+0x918>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	f040 80fc 	bne.w	8001d8a <menu+0xa12>
		if(dilSecim == 0) {
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <menu+0x8d0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <menu+0x91c>)
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f006 f8d8 	bl	8007d54 <lcd_print>
 8001ba4:	e008      	b.n	8001bb8 <menu+0x840>
		} else if(dilSecim == 1) {
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <menu+0x8d0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d104      	bne.n	8001bb8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001bae:	4a3a      	ldr	r2, [pc, #232]	; (8001c98 <menu+0x920>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f006 f8ce 	bl	8007d54 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <menu+0x8e0>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d003      	beq.n	8001bc8 <menu+0x850>
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <menu+0x8e0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d112      	bne.n	8001bee <menu+0x876>
			if(dilSecim == 0) {
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <menu+0x8d0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001bd0:	4a32      	ldr	r2, [pc, #200]	; (8001c9c <menu+0x924>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f006 f8bd 	bl	8007d54 <lcd_print>
 8001bda:	e008      	b.n	8001bee <menu+0x876>
			} else if(dilSecim == 1) {
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <menu+0x8d0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d104      	bne.n	8001bee <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001be4:	4a2e      	ldr	r2, [pc, #184]	; (8001ca0 <menu+0x928>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2002      	movs	r0, #2
 8001bea:	f006 f8b3 	bl	8007d54 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <menu+0x92c>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d116      	bne.n	8001c24 <menu+0x8ac>
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <menu+0x8e0>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d112      	bne.n	8001c24 <menu+0x8ac>
			if(dilSecim == 0) {
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <menu+0x8d0>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d105      	bne.n	8001c12 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <menu+0x930>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f006 f8a2 	bl	8007d54 <lcd_print>
 8001c10:	e008      	b.n	8001c24 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <menu+0x8d0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d104      	bne.n	8001c24 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001c1a:	4a24      	ldr	r2, [pc, #144]	; (8001cac <menu+0x934>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f006 f898 	bl	8007d54 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <menu+0x92c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d14c      	bne.n	8001cc6 <menu+0x94e>
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <menu+0x8e0>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d148      	bne.n	8001cc6 <menu+0x94e>
			if(dilSecim == 0) {
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <menu+0x8d0>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d13b      	bne.n	8001cb4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <menu+0x938>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2002      	movs	r0, #2
 8001c42:	f006 f887 	bl	8007d54 <lcd_print>
 8001c46:	e03e      	b.n	8001cc6 <menu+0x94e>
 8001c48:	2000021d 	.word	0x2000021d
 8001c4c:	0800d278 	.word	0x0800d278
 8001c50:	40010800 	.word	0x40010800
 8001c54:	2000022b 	.word	0x2000022b
 8001c58:	2000020b 	.word	0x2000020b
 8001c5c:	200001fe 	.word	0x200001fe
 8001c60:	2000021e 	.word	0x2000021e
 8001c64:	20000128 	.word	0x20000128
 8001c68:	2000021f 	.word	0x2000021f
 8001c6c:	20000220 	.word	0x20000220
 8001c70:	20000221 	.word	0x20000221
 8001c74:	20000222 	.word	0x20000222
 8001c78:	20000223 	.word	0x20000223
 8001c7c:	20000224 	.word	0x20000224
 8001c80:	20000225 	.word	0x20000225
 8001c84:	20000226 	.word	0x20000226
 8001c88:	20000227 	.word	0x20000227
 8001c8c:	20000228 	.word	0x20000228
 8001c90:	200001fc 	.word	0x200001fc
 8001c94:	0800d28c 	.word	0x0800d28c
 8001c98:	0800d2a0 	.word	0x0800d2a0
 8001c9c:	0800d2b4 	.word	0x0800d2b4
 8001ca0:	0800d2c8 	.word	0x0800d2c8
 8001ca4:	200001fd 	.word	0x200001fd
 8001ca8:	0800d2dc 	.word	0x0800d2dc
 8001cac:	0800d2ec 	.word	0x0800d2ec
 8001cb0:	0800d2fc 	.word	0x0800d2fc
			} else if(dilSecim == 1) {
 8001cb4:	4b98      	ldr	r3, [pc, #608]	; (8001f18 <menu+0xba0>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d104      	bne.n	8001cc6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001cbc:	4a97      	ldr	r2, [pc, #604]	; (8001f1c <menu+0xba4>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	f006 f847 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	4895      	ldr	r0, [pc, #596]	; (8001f20 <menu+0xba8>)
 8001cca:	f007 fb69 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d119      	bne.n	8001d08 <menu+0x990>
 8001cd4:	4b93      	ldr	r3, [pc, #588]	; (8001f24 <menu+0xbac>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f083 0301 	eor.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d012      	beq.n	8001d08 <menu+0x990>
 8001ce2:	4b91      	ldr	r3, [pc, #580]	; (8001f28 <menu+0xbb0>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10e      	bne.n	8001d08 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001cea:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <menu+0xbb4>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <menu+0xbb4>)
 8001cf4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001cf6:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <menu+0xbb4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d902      	bls.n	8001d04 <menu+0x98c>
				calismaSekli = 0;
 8001cfe:	4b8b      	ldr	r3, [pc, #556]	; (8001f2c <menu+0xbb4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d04:	f002 ff0a 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d08:	2104      	movs	r1, #4
 8001d0a:	4885      	ldr	r0, [pc, #532]	; (8001f20 <menu+0xba8>)
 8001d0c:	f007 fb48 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d119      	bne.n	8001d4a <menu+0x9d2>
 8001d16:	4b83      	ldr	r3, [pc, #524]	; (8001f24 <menu+0xbac>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	f083 0301 	eor.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d012      	beq.n	8001d4a <menu+0x9d2>
 8001d24:	4b80      	ldr	r3, [pc, #512]	; (8001f28 <menu+0xbb0>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10e      	bne.n	8001d4a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d2c:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <menu+0xbb4>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b7d      	ldr	r3, [pc, #500]	; (8001f2c <menu+0xbb4>)
 8001d36:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d38:	4b7c      	ldr	r3, [pc, #496]	; (8001f2c <menu+0xbb4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <menu+0x9ce>
	    		calismaSekli = 1;
 8001d40:	4b7a      	ldr	r3, [pc, #488]	; (8001f2c <menu+0xbb4>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d46:	f002 fee9 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	4874      	ldr	r0, [pc, #464]	; (8001f20 <menu+0xba8>)
 8001d4e:	f007 fb27 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d118      	bne.n	8001d8a <menu+0xa12>
 8001d58:	4b72      	ldr	r3, [pc, #456]	; (8001f24 <menu+0xbac>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	f083 0301 	eor.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d011      	beq.n	8001d8a <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d66:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <menu+0xbb4>)
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	4b71      	ldr	r3, [pc, #452]	; (8001f30 <menu+0xbb8>)
 8001d6c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d6e:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <menu+0xbb4>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d106      	bne.n	8001d84 <menu+0xa0c>
				altLimit = 1;
 8001d76:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <menu+0xbbc>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <menu+0xbbc>)
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <menu+0xbb8>)
 8001d82:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d84:	4b6c      	ldr	r3, [pc, #432]	; (8001f38 <menu+0xbc0>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d8a:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <menu+0xbc4>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	f040 8083 	bne.w	8001e9a <menu+0xb22>
		if(dilSecim == 0) {
 8001d94:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <menu+0xba0>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d9c:	4a68      	ldr	r2, [pc, #416]	; (8001f40 <menu+0xbc8>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2001      	movs	r0, #1
 8001da2:	f005 ffd7 	bl	8007d54 <lcd_print>
 8001da6:	e008      	b.n	8001dba <menu+0xa42>
		} else if(dilSecim == 1) {
 8001da8:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <menu+0xba0>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d104      	bne.n	8001dba <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001db0:	4a64      	ldr	r2, [pc, #400]	; (8001f44 <menu+0xbcc>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	2001      	movs	r0, #1
 8001db6:	f005 ffcd 	bl	8007d54 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <menu+0xbd0>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d113      	bne.n	8001dea <menu+0xa72>
			if(dilSecim == 0) {
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <menu+0xba0>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001dca:	4a60      	ldr	r2, [pc, #384]	; (8001f4c <menu+0xbd4>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f005 ffc0 	bl	8007d54 <lcd_print>
 8001dd4:	e012      	b.n	8001dfc <menu+0xa84>
			} else if(dilSecim == 1) {
 8001dd6:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <menu+0xba0>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d10e      	bne.n	8001dfc <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001dde:	4a5c      	ldr	r2, [pc, #368]	; (8001f50 <menu+0xbd8>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	2002      	movs	r0, #2
 8001de4:	f005 ffb6 	bl	8007d54 <lcd_print>
 8001de8:	e008      	b.n	8001dfc <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001dea:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <menu+0xbd0>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d104      	bne.n	8001dfc <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001df2:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <menu+0xbdc>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	2002      	movs	r0, #2
 8001df8:	f005 ffac 	bl	8007d54 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	4848      	ldr	r0, [pc, #288]	; (8001f20 <menu+0xba8>)
 8001e00:	f007 face 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d115      	bne.n	8001e36 <menu+0xabe>
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <menu+0xbac>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e18:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <menu+0xbd0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <menu+0xbd0>)
 8001e22:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e24:	4b48      	ldr	r3, [pc, #288]	; (8001f48 <menu+0xbd0>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d902      	bls.n	8001e32 <menu+0xaba>
				emniyetCercevesi = 0;
 8001e2c:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <menu+0xbd0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e32:	f002 fe73 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e36:	2104      	movs	r1, #4
 8001e38:	4839      	ldr	r0, [pc, #228]	; (8001f20 <menu+0xba8>)
 8001e3a:	f007 fab1 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d115      	bne.n	8001e70 <menu+0xaf8>
 8001e44:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <menu+0xbac>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	f083 0301 	eor.w	r3, r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00e      	beq.n	8001e70 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <menu+0xbd0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <menu+0xbd0>)
 8001e5c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <menu+0xbd0>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <menu+0xbd0>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e6c:	f002 fe56 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e70:	2108      	movs	r1, #8
 8001e72:	482b      	ldr	r0, [pc, #172]	; (8001f20 <menu+0xba8>)
 8001e74:	f007 fa94 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10d      	bne.n	8001e9a <menu+0xb22>
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <menu+0xbac>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <menu+0xbd0>)
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <menu+0xbb8>)
 8001e92:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <menu+0xbc0>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <menu+0xbc4>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	f040 80ba 	bne.w	8002018 <menu+0xca0>
		if(dilSecim == 0) {
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <menu+0xba0>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001eac:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <menu+0xbe0>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f005 ff4f 	bl	8007d54 <lcd_print>
 8001eb6:	e008      	b.n	8001eca <menu+0xb52>
		} else if(dilSecim == 1) {
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <menu+0xba0>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d104      	bne.n	8001eca <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <menu+0xbe4>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f005 ff45 	bl	8007d54 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <menu+0xbe8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d113      	bne.n	8001efa <menu+0xb82>
			if(dilSecim == 0) {
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <menu+0xba0>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <menu+0xbd4>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f005 ff38 	bl	8007d54 <lcd_print>
 8001ee4:	e049      	b.n	8001f7a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <menu+0xba0>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d145      	bne.n	8001f7a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001eee:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <menu+0xbd8>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f005 ff2e 	bl	8007d54 <lcd_print>
 8001ef8:	e03f      	b.n	8001f7a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <menu+0xbe8>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d13b      	bne.n	8001f7a <menu+0xc02>
			if(dilSecim == 0) {
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <menu+0xba0>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d12e      	bne.n	8001f68 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <menu+0xbec>)
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f005 ff20 	bl	8007d54 <lcd_print>
 8001f14:	e031      	b.n	8001f7a <menu+0xc02>
 8001f16:	bf00      	nop
 8001f18:	2000021d 	.word	0x2000021d
 8001f1c:	0800d30c 	.word	0x0800d30c
 8001f20:	40010800 	.word	0x40010800
 8001f24:	2000022b 	.word	0x2000022b
 8001f28:	2000020b 	.word	0x2000020b
 8001f2c:	200001fd 	.word	0x200001fd
 8001f30:	20000128 	.word	0x20000128
 8001f34:	20000202 	.word	0x20000202
 8001f38:	20000228 	.word	0x20000228
 8001f3c:	200001fc 	.word	0x200001fc
 8001f40:	0800d31c 	.word	0x0800d31c
 8001f44:	0800d330 	.word	0x0800d330
 8001f48:	20000200 	.word	0x20000200
 8001f4c:	0800d344 	.word	0x0800d344
 8001f50:	0800d358 	.word	0x0800d358
 8001f54:	0800d36c 	.word	0x0800d36c
 8001f58:	0800d37c 	.word	0x0800d37c
 8001f5c:	0800d390 	.word	0x0800d390
 8001f60:	20000201 	.word	0x20000201
 8001f64:	0800d3a4 	.word	0x0800d3a4
			} else if(dilSecim == 1) {
 8001f68:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <menu+0xe3c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d104      	bne.n	8001f7a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001f70:	4a91      	ldr	r2, [pc, #580]	; (80021b8 <menu+0xe40>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	2002      	movs	r0, #2
 8001f76:	f005 feed 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	488f      	ldr	r0, [pc, #572]	; (80021bc <menu+0xe44>)
 8001f7e:	f007 fa0f 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d115      	bne.n	8001fb4 <menu+0xc3c>
 8001f88:	4b8d      	ldr	r3, [pc, #564]	; (80021c0 <menu+0xe48>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00e      	beq.n	8001fb4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f96:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <menu+0xe4c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b89      	ldr	r3, [pc, #548]	; (80021c4 <menu+0xe4c>)
 8001fa0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001fa2:	4b88      	ldr	r3, [pc, #544]	; (80021c4 <menu+0xe4c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d902      	bls.n	8001fb0 <menu+0xc38>
				yavaslamaLimit = 0;
 8001faa:	4b86      	ldr	r3, [pc, #536]	; (80021c4 <menu+0xe4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fb0:	f002 fdb4 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4881      	ldr	r0, [pc, #516]	; (80021bc <menu+0xe44>)
 8001fb8:	f007 f9f2 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d115      	bne.n	8001fee <menu+0xc76>
 8001fc2:	4b7f      	ldr	r3, [pc, #508]	; (80021c0 <menu+0xe48>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	f083 0301 	eor.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00e      	beq.n	8001fee <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001fd0:	4b7c      	ldr	r3, [pc, #496]	; (80021c4 <menu+0xe4c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b7a      	ldr	r3, [pc, #488]	; (80021c4 <menu+0xe4c>)
 8001fda:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001fdc:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <menu+0xe4c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001fe4:	4b77      	ldr	r3, [pc, #476]	; (80021c4 <menu+0xe4c>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fea:	f002 fd97 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fee:	2108      	movs	r1, #8
 8001ff0:	4872      	ldr	r0, [pc, #456]	; (80021bc <menu+0xe44>)
 8001ff2:	f007 f9d5 	bl	80093a0 <HAL_GPIO_ReadPin>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d10d      	bne.n	8002018 <menu+0xca0>
 8001ffc:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <menu+0xe48>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800200a:	4b6e      	ldr	r3, [pc, #440]	; (80021c4 <menu+0xe4c>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b6e      	ldr	r3, [pc, #440]	; (80021c8 <menu+0xe50>)
 8002010:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002012:	4b6e      	ldr	r3, [pc, #440]	; (80021cc <menu+0xe54>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002018:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <menu+0xe58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b05      	cmp	r3, #5
 800201e:	f040 80b9 	bne.w	8002194 <menu+0xe1c>
		if(dilSecim == 0) {
 8002022:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <menu+0xe3c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d105      	bne.n	8002036 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800202a:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <menu+0xe5c>)
 800202c:	2101      	movs	r1, #1
 800202e:	2001      	movs	r0, #1
 8002030:	f005 fe90 	bl	8007d54 <lcd_print>
 8002034:	e008      	b.n	8002048 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002036:	4b5f      	ldr	r3, [pc, #380]	; (80021b4 <menu+0xe3c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d104      	bne.n	8002048 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800203e:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <menu+0xe60>)
 8002040:	2101      	movs	r1, #1
 8002042:	2001      	movs	r0, #1
 8002044:	f005 fe86 	bl	8007d54 <lcd_print>
		}

		if(altLimit == 0) {
 8002048:	4b64      	ldr	r3, [pc, #400]	; (80021dc <menu+0xe64>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d113      	bne.n	8002078 <menu+0xd00>
			if(dilSecim == 0) {
 8002050:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <menu+0xe3c>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002058:	4a61      	ldr	r2, [pc, #388]	; (80021e0 <menu+0xe68>)
 800205a:	2101      	movs	r1, #1
 800205c:	2002      	movs	r0, #2
 800205e:	f005 fe79 	bl	8007d54 <lcd_print>
 8002062:	e020      	b.n	80020a6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <menu+0xe3c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d11c      	bne.n	80020a6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 800206c:	4a5d      	ldr	r2, [pc, #372]	; (80021e4 <menu+0xe6c>)
 800206e:	2101      	movs	r1, #1
 8002070:	2002      	movs	r0, #2
 8002072:	f005 fe6f 	bl	8007d54 <lcd_print>
 8002076:	e016      	b.n	80020a6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002078:	4b58      	ldr	r3, [pc, #352]	; (80021dc <menu+0xe64>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d112      	bne.n	80020a6 <menu+0xd2e>
			if(dilSecim == 0){
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <menu+0xe3c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002088:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <menu+0xe70>)
 800208a:	2101      	movs	r1, #1
 800208c:	2002      	movs	r0, #2
 800208e:	f005 fe61 	bl	8007d54 <lcd_print>
 8002092:	e008      	b.n	80020a6 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <menu+0xe3c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d104      	bne.n	80020a6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 800209c:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <menu+0xe40>)
 800209e:	2101      	movs	r1, #1
 80020a0:	2002      	movs	r0, #2
 80020a2:	f005 fe57 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80020a6:	2102      	movs	r1, #2
 80020a8:	4844      	ldr	r0, [pc, #272]	; (80021bc <menu+0xe44>)
 80020aa:	f007 f979 	bl	80093a0 <HAL_GPIO_ReadPin>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d119      	bne.n	80020e8 <menu+0xd70>
 80020b4:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <menu+0xe48>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	f083 0301 	eor.w	r3, r3, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d012      	beq.n	80020e8 <menu+0xd70>
 80020c2:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <menu+0xe74>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10e      	bne.n	80020e8 <menu+0xd70>
			altLimit = altLimit + 1;
 80020ca:	4b44      	ldr	r3, [pc, #272]	; (80021dc <menu+0xe64>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b42      	ldr	r3, [pc, #264]	; (80021dc <menu+0xe64>)
 80020d4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <menu+0xe64>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d902      	bls.n	80020e4 <menu+0xd6c>
				altLimit = 0;
 80020de:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <menu+0xe64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020e4:	f002 fd1a 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80020e8:	2104      	movs	r1, #4
 80020ea:	4834      	ldr	r0, [pc, #208]	; (80021bc <menu+0xe44>)
 80020ec:	f007 f958 	bl	80093a0 <HAL_GPIO_ReadPin>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d119      	bne.n	800212a <menu+0xdb2>
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <menu+0xe48>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d012      	beq.n	800212a <menu+0xdb2>
 8002104:	4b39      	ldr	r3, [pc, #228]	; (80021ec <menu+0xe74>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10e      	bne.n	800212a <menu+0xdb2>
			altLimit = altLimit - 1;
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <menu+0xe64>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <menu+0xe64>)
 8002116:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <menu+0xe64>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <menu+0xdae>
		   		altLimit = 1;
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <menu+0xe64>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002126:	f002 fcf9 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800212a:	2108      	movs	r1, #8
 800212c:	4823      	ldr	r0, [pc, #140]	; (80021bc <menu+0xe44>)
 800212e:	f007 f937 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d12d      	bne.n	8002194 <menu+0xe1c>
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <menu+0xe48>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	f083 0301 	eor.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d026      	beq.n	8002194 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <menu+0xe64>)
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <menu+0xe50>)
 800214c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <menu+0xe64>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d110      	bne.n	8002178 <menu+0xe00>
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <menu+0xe78>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <menu+0xdee>
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <menu+0xe78>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d108      	bne.n	8002178 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <menu+0xe78>)
 8002168:	2203      	movs	r2, #3
 800216a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <menu+0xe78>)
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <menu+0xe50>)
 8002172:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002176:	e00a      	b.n	800218e <menu+0xe16>
			} else if(altLimit == 0) {
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <menu+0xe64>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <menu+0xe16>
				platformSilindirTipi = 0;
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <menu+0xe7c>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <menu+0xe7c>)
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <menu+0xe50>)
 800218c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <menu+0xe54>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <menu+0xe58>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b06      	cmp	r3, #6
 800219a:	f040 80b6 	bne.w	800230a <menu+0xf92>
		if(dilSecim == 0) {
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <menu+0xe3c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d12a      	bne.n	80021fc <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <menu+0xe80>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	2001      	movs	r0, #1
 80021ac:	f005 fdd2 	bl	8007d54 <lcd_print>
 80021b0:	e02d      	b.n	800220e <menu+0xe96>
 80021b2:	bf00      	nop
 80021b4:	2000021d 	.word	0x2000021d
 80021b8:	0800d3b8 	.word	0x0800d3b8
 80021bc:	40010800 	.word	0x40010800
 80021c0:	2000022b 	.word	0x2000022b
 80021c4:	20000201 	.word	0x20000201
 80021c8:	20000128 	.word	0x20000128
 80021cc:	20000228 	.word	0x20000228
 80021d0:	200001fc 	.word	0x200001fc
 80021d4:	0800d3cc 	.word	0x0800d3cc
 80021d8:	0800d3e0 	.word	0x0800d3e0
 80021dc:	20000202 	.word	0x20000202
 80021e0:	0800d344 	.word	0x0800d344
 80021e4:	0800d358 	.word	0x0800d358
 80021e8:	0800d3a4 	.word	0x0800d3a4
 80021ec:	200001fd 	.word	0x200001fd
 80021f0:	20000209 	.word	0x20000209
 80021f4:	2000020f 	.word	0x2000020f
 80021f8:	0800d3f4 	.word	0x0800d3f4
		} else if(dilSecim == 1){
 80021fc:	4b7a      	ldr	r3, [pc, #488]	; (80023e8 <menu+0x1070>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d104      	bne.n	800220e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002204:	4a79      	ldr	r2, [pc, #484]	; (80023ec <menu+0x1074>)
 8002206:	2101      	movs	r1, #1
 8002208:	2001      	movs	r0, #1
 800220a:	f005 fda3 	bl	8007d54 <lcd_print>
		}
		if(basincSalteri == 0){
 800220e:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <menu+0x1078>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d113      	bne.n	800223e <menu+0xec6>
			if(dilSecim == 0) {
 8002216:	4b74      	ldr	r3, [pc, #464]	; (80023e8 <menu+0x1070>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800221e:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <menu+0x107c>)
 8002220:	2101      	movs	r1, #1
 8002222:	2002      	movs	r0, #2
 8002224:	f005 fd96 	bl	8007d54 <lcd_print>
 8002228:	e020      	b.n	800226c <menu+0xef4>
			} else if(dilSecim == 1){
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <menu+0x1070>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d11c      	bne.n	800226c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002232:	4a71      	ldr	r2, [pc, #452]	; (80023f8 <menu+0x1080>)
 8002234:	2101      	movs	r1, #1
 8002236:	2002      	movs	r0, #2
 8002238:	f005 fd8c 	bl	8007d54 <lcd_print>
 800223c:	e016      	b.n	800226c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800223e:	4b6c      	ldr	r3, [pc, #432]	; (80023f0 <menu+0x1078>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d112      	bne.n	800226c <menu+0xef4>
			if(dilSecim == 0) {
 8002246:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <menu+0x1070>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800224e:	4a6b      	ldr	r2, [pc, #428]	; (80023fc <menu+0x1084>)
 8002250:	2101      	movs	r1, #1
 8002252:	2002      	movs	r0, #2
 8002254:	f005 fd7e 	bl	8007d54 <lcd_print>
 8002258:	e008      	b.n	800226c <menu+0xef4>
			} else if(dilSecim == 1) {
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <menu+0x1070>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d104      	bne.n	800226c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002262:	4a67      	ldr	r2, [pc, #412]	; (8002400 <menu+0x1088>)
 8002264:	2101      	movs	r1, #1
 8002266:	2002      	movs	r0, #2
 8002268:	f005 fd74 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800226c:	2102      	movs	r1, #2
 800226e:	4865      	ldr	r0, [pc, #404]	; (8002404 <menu+0x108c>)
 8002270:	f007 f896 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d115      	bne.n	80022a6 <menu+0xf2e>
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <menu+0x1090>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <menu+0x1078>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <menu+0x1078>)
 8002292:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002294:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <menu+0x1078>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d902      	bls.n	80022a2 <menu+0xf2a>
				basincSalteri = 0;
 800229c:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <menu+0x1078>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022a2:	f002 fc3b 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a6:	2104      	movs	r1, #4
 80022a8:	4856      	ldr	r0, [pc, #344]	; (8002404 <menu+0x108c>)
 80022aa:	f007 f879 	bl	80093a0 <HAL_GPIO_ReadPin>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d115      	bne.n	80022e0 <menu+0xf68>
 80022b4:	4b54      	ldr	r3, [pc, #336]	; (8002408 <menu+0x1090>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f083 0301 	eor.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00e      	beq.n	80022e0 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <menu+0x1078>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <menu+0x1078>)
 80022cc:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80022ce:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <menu+0x1078>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <menu+0xf64>
		   		basincSalteri = 1;
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <menu+0x1078>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022dc:	f002 fc1e 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022e0:	2108      	movs	r1, #8
 80022e2:	4848      	ldr	r0, [pc, #288]	; (8002404 <menu+0x108c>)
 80022e4:	f007 f85c 	bl	80093a0 <HAL_GPIO_ReadPin>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10d      	bne.n	800230a <menu+0xf92>
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <menu+0x1090>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <menu+0xf92>
			eepromData[6] = basincSalteri;
 80022fc:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <menu+0x1078>)
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <menu+0x1094>)
 8002302:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002304:	4b42      	ldr	r3, [pc, #264]	; (8002410 <menu+0x1098>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800230a:	4b42      	ldr	r3, [pc, #264]	; (8002414 <menu+0x109c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b07      	cmp	r3, #7
 8002310:	f040 80f5 	bne.w	80024fe <menu+0x1186>
		if(dilSecim == 0) {
 8002314:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <menu+0x1070>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800231c:	4a3e      	ldr	r2, [pc, #248]	; (8002418 <menu+0x10a0>)
 800231e:	2101      	movs	r1, #1
 8002320:	2001      	movs	r0, #1
 8002322:	f005 fd17 	bl	8007d54 <lcd_print>
 8002326:	e008      	b.n	800233a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <menu+0x1070>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d104      	bne.n	800233a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <menu+0x10a4>)
 8002332:	2101      	movs	r1, #1
 8002334:	2001      	movs	r0, #1
 8002336:	f005 fd0d 	bl	8007d54 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <menu+0x10a8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d113      	bne.n	800236a <menu+0xff2>
			if(dilSecim == 0) {
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <menu+0x1070>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800234a:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <menu+0x107c>)
 800234c:	2101      	movs	r1, #1
 800234e:	2002      	movs	r0, #2
 8002350:	f005 fd00 	bl	8007d54 <lcd_print>
 8002354:	e079      	b.n	800244a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <menu+0x1070>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d175      	bne.n	800244a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <menu+0x1080>)
 8002360:	2101      	movs	r1, #1
 8002362:	2002      	movs	r0, #2
 8002364:	f005 fcf6 	bl	8007d54 <lcd_print>
 8002368:	e06f      	b.n	800244a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <menu+0x10a8>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d113      	bne.n	800239a <menu+0x1022>
			if(dilSecim == 0) {
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <menu+0x1070>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800237a:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <menu+0x10ac>)
 800237c:	2101      	movs	r1, #1
 800237e:	2002      	movs	r0, #2
 8002380:	f005 fce8 	bl	8007d54 <lcd_print>
 8002384:	e061      	b.n	800244a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <menu+0x1070>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d15d      	bne.n	800244a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800238e:	4a26      	ldr	r2, [pc, #152]	; (8002428 <menu+0x10b0>)
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f005 fcde 	bl	8007d54 <lcd_print>
 8002398:	e057      	b.n	800244a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800239a:	4b21      	ldr	r3, [pc, #132]	; (8002420 <menu+0x10a8>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d113      	bne.n	80023ca <menu+0x1052>
			if(dilSecim == 0) {
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <menu+0x1070>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80023aa:	4a20      	ldr	r2, [pc, #128]	; (800242c <menu+0x10b4>)
 80023ac:	2101      	movs	r1, #1
 80023ae:	2002      	movs	r0, #2
 80023b0:	f005 fcd0 	bl	8007d54 <lcd_print>
 80023b4:	e049      	b.n	800244a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <menu+0x1070>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d145      	bne.n	800244a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <menu+0x10b8>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	2002      	movs	r0, #2
 80023c4:	f005 fcc6 	bl	8007d54 <lcd_print>
 80023c8:	e03f      	b.n	800244a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <menu+0x10a8>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d13b      	bne.n	800244a <menu+0x10d2>
			if(dilSecim == 0) {
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <menu+0x1070>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12e      	bne.n	8002438 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <menu+0x10bc>)
 80023dc:	2101      	movs	r1, #1
 80023de:	2002      	movs	r0, #2
 80023e0:	f005 fcb8 	bl	8007d54 <lcd_print>
 80023e4:	e031      	b.n	800244a <menu+0x10d2>
 80023e6:	bf00      	nop
 80023e8:	2000021d 	.word	0x2000021d
 80023ec:	0800d404 	.word	0x0800d404
 80023f0:	20000203 	.word	0x20000203
 80023f4:	0800d344 	.word	0x0800d344
 80023f8:	0800d358 	.word	0x0800d358
 80023fc:	0800d3a4 	.word	0x0800d3a4
 8002400:	0800d3b8 	.word	0x0800d3b8
 8002404:	40010800 	.word	0x40010800
 8002408:	2000022b 	.word	0x2000022b
 800240c:	20000128 	.word	0x20000128
 8002410:	20000228 	.word	0x20000228
 8002414:	200001fc 	.word	0x200001fc
 8002418:	0800d414 	.word	0x0800d414
 800241c:	0800d428 	.word	0x0800d428
 8002420:	20000204 	.word	0x20000204
 8002424:	0800d43c 	.word	0x0800d43c
 8002428:	0800d450 	.word	0x0800d450
 800242c:	0800d464 	.word	0x0800d464
 8002430:	0800d478 	.word	0x0800d478
 8002434:	0800d48c 	.word	0x0800d48c
			} else if(dilSecim == 1){
 8002438:	4b99      	ldr	r3, [pc, #612]	; (80026a0 <menu+0x1328>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d104      	bne.n	800244a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002440:	4a98      	ldr	r2, [pc, #608]	; (80026a4 <menu+0x132c>)
 8002442:	2101      	movs	r1, #1
 8002444:	2002      	movs	r0, #2
 8002446:	f005 fc85 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800244a:	2102      	movs	r1, #2
 800244c:	4896      	ldr	r0, [pc, #600]	; (80026a8 <menu+0x1330>)
 800244e:	f006 ffa7 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d115      	bne.n	8002484 <menu+0x110c>
 8002458:	4b94      	ldr	r3, [pc, #592]	; (80026ac <menu+0x1334>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f083 0301 	eor.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00e      	beq.n	8002484 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002466:	4b92      	ldr	r3, [pc, #584]	; (80026b0 <menu+0x1338>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b90      	ldr	r3, [pc, #576]	; (80026b0 <menu+0x1338>)
 8002470:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002472:	4b8f      	ldr	r3, [pc, #572]	; (80026b0 <menu+0x1338>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d902      	bls.n	8002480 <menu+0x1108>
				kapiSecimleri = 0;
 800247a:	4b8d      	ldr	r3, [pc, #564]	; (80026b0 <menu+0x1338>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002480:	f002 fb4c 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002484:	2104      	movs	r1, #4
 8002486:	4888      	ldr	r0, [pc, #544]	; (80026a8 <menu+0x1330>)
 8002488:	f006 ff8a 	bl	80093a0 <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b01      	cmp	r3, #1
 8002490:	d115      	bne.n	80024be <menu+0x1146>
 8002492:	4b86      	ldr	r3, [pc, #536]	; (80026ac <menu+0x1334>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80024a0:	4b83      	ldr	r3, [pc, #524]	; (80026b0 <menu+0x1338>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <menu+0x1338>)
 80024aa:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80024ac:	4b80      	ldr	r3, [pc, #512]	; (80026b0 <menu+0x1338>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d902      	bls.n	80024ba <menu+0x1142>
		   		kapiSecimleri = 3;
 80024b4:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <menu+0x1338>)
 80024b6:	2203      	movs	r2, #3
 80024b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024ba:	f002 fb2f 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024be:	2108      	movs	r1, #8
 80024c0:	4879      	ldr	r0, [pc, #484]	; (80026a8 <menu+0x1330>)
 80024c2:	f006 ff6d 	bl	80093a0 <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d118      	bne.n	80024fe <menu+0x1186>
 80024cc:	4b77      	ldr	r3, [pc, #476]	; (80026ac <menu+0x1334>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	f083 0301 	eor.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d011      	beq.n	80024fe <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80024da:	4b75      	ldr	r3, [pc, #468]	; (80026b0 <menu+0x1338>)
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <menu+0x133c>)
 80024e0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <menu+0x1338>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <menu+0x1180>
				altLimit = 1;
 80024ea:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <menu+0x1340>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80024f0:	4b71      	ldr	r3, [pc, #452]	; (80026b8 <menu+0x1340>)
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <menu+0x133c>)
 80024f6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80024f8:	4b70      	ldr	r3, [pc, #448]	; (80026bc <menu+0x1344>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80024fe:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <menu+0x1348>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b08      	cmp	r3, #8
 8002504:	f040 8092 	bne.w	800262c <menu+0x12b4>
		if(dilSecim == 0) {
 8002508:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <menu+0x1328>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002510:	4a6c      	ldr	r2, [pc, #432]	; (80026c4 <menu+0x134c>)
 8002512:	2101      	movs	r1, #1
 8002514:	2001      	movs	r0, #1
 8002516:	f005 fc1d 	bl	8007d54 <lcd_print>
 800251a:	e008      	b.n	800252e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800251c:	4b60      	ldr	r3, [pc, #384]	; (80026a0 <menu+0x1328>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d104      	bne.n	800252e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002524:	4a68      	ldr	r2, [pc, #416]	; (80026c8 <menu+0x1350>)
 8002526:	2101      	movs	r1, #1
 8002528:	2001      	movs	r0, #1
 800252a:	f005 fc13 	bl	8007d54 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <menu+0x1354>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d113      	bne.n	800255e <menu+0x11e6>
			if(dilSecim == 0) {
 8002536:	4b5a      	ldr	r3, [pc, #360]	; (80026a0 <menu+0x1328>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800253e:	4a64      	ldr	r2, [pc, #400]	; (80026d0 <menu+0x1358>)
 8002540:	2101      	movs	r1, #1
 8002542:	2002      	movs	r0, #2
 8002544:	f005 fc06 	bl	8007d54 <lcd_print>
 8002548:	e020      	b.n	800258c <menu+0x1214>
			} else if(dilSecim == 1) {
 800254a:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <menu+0x1328>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d11c      	bne.n	800258c <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002552:	4a60      	ldr	r2, [pc, #384]	; (80026d4 <menu+0x135c>)
 8002554:	2101      	movs	r1, #1
 8002556:	2002      	movs	r0, #2
 8002558:	f005 fbfc 	bl	8007d54 <lcd_print>
 800255c:	e016      	b.n	800258c <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800255e:	4b5b      	ldr	r3, [pc, #364]	; (80026cc <menu+0x1354>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d112      	bne.n	800258c <menu+0x1214>
			if(dilSecim == 0){
 8002566:	4b4e      	ldr	r3, [pc, #312]	; (80026a0 <menu+0x1328>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d105      	bne.n	800257a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800256e:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <menu+0x1360>)
 8002570:	2101      	movs	r1, #1
 8002572:	2002      	movs	r0, #2
 8002574:	f005 fbee 	bl	8007d54 <lcd_print>
 8002578:	e008      	b.n	800258c <menu+0x1214>
			} else if(dilSecim == 1){
 800257a:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <menu+0x1328>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d104      	bne.n	800258c <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002582:	4a56      	ldr	r2, [pc, #344]	; (80026dc <menu+0x1364>)
 8002584:	2101      	movs	r1, #1
 8002586:	2002      	movs	r0, #2
 8002588:	f005 fbe4 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800258c:	2102      	movs	r1, #2
 800258e:	4846      	ldr	r0, [pc, #280]	; (80026a8 <menu+0x1330>)
 8002590:	f006 ff06 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002594:	4603      	mov	r3, r0
 8002596:	2b01      	cmp	r3, #1
 8002598:	d115      	bne.n	80025c6 <menu+0x124e>
 800259a:	4b44      	ldr	r3, [pc, #272]	; (80026ac <menu+0x1334>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	f083 0301 	eor.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00e      	beq.n	80025c6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80025a8:	4b48      	ldr	r3, [pc, #288]	; (80026cc <menu+0x1354>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <menu+0x1354>)
 80025b2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80025b4:	4b45      	ldr	r3, [pc, #276]	; (80026cc <menu+0x1354>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d902      	bls.n	80025c2 <menu+0x124a>
				kapiAcTipi = 0;
 80025bc:	4b43      	ldr	r3, [pc, #268]	; (80026cc <menu+0x1354>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c2:	f002 faab 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c6:	2104      	movs	r1, #4
 80025c8:	4837      	ldr	r0, [pc, #220]	; (80026a8 <menu+0x1330>)
 80025ca:	f006 fee9 	bl	80093a0 <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d115      	bne.n	8002600 <menu+0x1288>
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <menu+0x1334>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	f083 0301 	eor.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00e      	beq.n	8002600 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80025e2:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <menu+0x1354>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b38      	ldr	r3, [pc, #224]	; (80026cc <menu+0x1354>)
 80025ec:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <menu+0x1354>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <menu+0x1284>
		   		kapiAcTipi = 1;
 80025f6:	4b35      	ldr	r3, [pc, #212]	; (80026cc <menu+0x1354>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025fc:	f002 fa8e 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002600:	2108      	movs	r1, #8
 8002602:	4829      	ldr	r0, [pc, #164]	; (80026a8 <menu+0x1330>)
 8002604:	f006 fecc 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002608:	4603      	mov	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d10e      	bne.n	800262c <menu+0x12b4>
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <menu+0x1334>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <menu+0x1354>)
 800261e:	781a      	ldrb	r2, [r3, #0]
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <menu+0x133c>)
 8002622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002626:	4b25      	ldr	r3, [pc, #148]	; (80026bc <menu+0x1344>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <menu+0x1348>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b09      	cmp	r3, #9
 8002632:	f040 80b9 	bne.w	80027a8 <menu+0x1430>
		if(dilSecim == 0){
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <menu+0x1328>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800263e:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <menu+0x1368>)
 8002640:	2101      	movs	r1, #1
 8002642:	2001      	movs	r0, #1
 8002644:	f005 fb86 	bl	8007d54 <lcd_print>
 8002648:	e008      	b.n	800265c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <menu+0x1328>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d104      	bne.n	800265c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002652:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <menu+0x136c>)
 8002654:	2101      	movs	r1, #1
 8002656:	2001      	movs	r0, #1
 8002658:	f005 fb7c 	bl	8007d54 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800265c:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <menu+0x1370>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002664:	4a21      	ldr	r2, [pc, #132]	; (80026ec <menu+0x1374>)
 8002666:	2101      	movs	r1, #1
 8002668:	2002      	movs	r0, #2
 800266a:	f005 fb73 	bl	8007d54 <lcd_print>
 800266e:	e04c      	b.n	800270a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <menu+0x1370>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d13f      	bne.n	80026f8 <menu+0x1380>
			if(dilSecim == 0){
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <menu+0x1328>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002680:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <menu+0x1378>)
 8002682:	2101      	movs	r1, #1
 8002684:	2002      	movs	r0, #2
 8002686:	f005 fb65 	bl	8007d54 <lcd_print>
 800268a:	e03e      	b.n	800270a <menu+0x1392>
			} else if(dilSecim == 1) {
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <menu+0x1328>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d13a      	bne.n	800270a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002694:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <menu+0x137c>)
 8002696:	2101      	movs	r1, #1
 8002698:	2002      	movs	r0, #2
 800269a:	f005 fb5b 	bl	8007d54 <lcd_print>
 800269e:	e034      	b.n	800270a <menu+0x1392>
 80026a0:	2000021d 	.word	0x2000021d
 80026a4:	0800d4a0 	.word	0x0800d4a0
 80026a8:	40010800 	.word	0x40010800
 80026ac:	2000022b 	.word	0x2000022b
 80026b0:	20000204 	.word	0x20000204
 80026b4:	20000128 	.word	0x20000128
 80026b8:	20000202 	.word	0x20000202
 80026bc:	20000228 	.word	0x20000228
 80026c0:	200001fc 	.word	0x200001fc
 80026c4:	0800d4b4 	.word	0x0800d4b4
 80026c8:	0800d4c8 	.word	0x0800d4c8
 80026cc:	20000208 	.word	0x20000208
 80026d0:	0800d4dc 	.word	0x0800d4dc
 80026d4:	0800d4ec 	.word	0x0800d4ec
 80026d8:	0800d4fc 	.word	0x0800d4fc
 80026dc:	0800d510 	.word	0x0800d510
 80026e0:	0800d524 	.word	0x0800d524
 80026e4:	0800d538 	.word	0x0800d538
 80026e8:	20000205 	.word	0x20000205
 80026ec:	0800d54c 	.word	0x0800d54c
 80026f0:	0800d560 	.word	0x0800d560
 80026f4:	0800d570 	.word	0x0800d570
			}
		} else if(kapi1Tip == 2) {
 80026f8:	4b8a      	ldr	r3, [pc, #552]	; (8002924 <menu+0x15ac>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d104      	bne.n	800270a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002700:	4a89      	ldr	r2, [pc, #548]	; (8002928 <menu+0x15b0>)
 8002702:	2101      	movs	r1, #1
 8002704:	2002      	movs	r0, #2
 8002706:	f005 fb25 	bl	8007d54 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800270a:	2102      	movs	r1, #2
 800270c:	4887      	ldr	r0, [pc, #540]	; (800292c <menu+0x15b4>)
 800270e:	f006 fe47 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d115      	bne.n	8002744 <menu+0x13cc>
 8002718:	4b85      	ldr	r3, [pc, #532]	; (8002930 <menu+0x15b8>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00e      	beq.n	8002744 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002726:	4b7f      	ldr	r3, [pc, #508]	; (8002924 <menu+0x15ac>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4b7d      	ldr	r3, [pc, #500]	; (8002924 <menu+0x15ac>)
 8002730:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002732:	4b7c      	ldr	r3, [pc, #496]	; (8002924 <menu+0x15ac>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d902      	bls.n	8002740 <menu+0x13c8>
				kapi1Tip = 0;
 800273a:	4b7a      	ldr	r3, [pc, #488]	; (8002924 <menu+0x15ac>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002740:	f002 f9ec 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002744:	2104      	movs	r1, #4
 8002746:	4879      	ldr	r0, [pc, #484]	; (800292c <menu+0x15b4>)
 8002748:	f006 fe2a 	bl	80093a0 <HAL_GPIO_ReadPin>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	d115      	bne.n	800277e <menu+0x1406>
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <menu+0x15b8>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f083 0301 	eor.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002760:	4b70      	ldr	r3, [pc, #448]	; (8002924 <menu+0x15ac>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	3b01      	subs	r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b6e      	ldr	r3, [pc, #440]	; (8002924 <menu+0x15ac>)
 800276a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800276c:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <menu+0x15ac>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d902      	bls.n	800277a <menu+0x1402>
		   		kapi1Tip = 2;
 8002774:	4b6b      	ldr	r3, [pc, #428]	; (8002924 <menu+0x15ac>)
 8002776:	2202      	movs	r2, #2
 8002778:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800277a:	f002 f9cf 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800277e:	2108      	movs	r1, #8
 8002780:	486a      	ldr	r0, [pc, #424]	; (800292c <menu+0x15b4>)
 8002782:	f006 fe0d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d10d      	bne.n	80027a8 <menu+0x1430>
 800278c:	4b68      	ldr	r3, [pc, #416]	; (8002930 <menu+0x15b8>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f083 0301 	eor.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 800279a:	4b62      	ldr	r3, [pc, #392]	; (8002924 <menu+0x15ac>)
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <menu+0x15bc>)
 80027a0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80027a2:	4b65      	ldr	r3, [pc, #404]	; (8002938 <menu+0x15c0>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80027a8:	4b64      	ldr	r3, [pc, #400]	; (800293c <menu+0x15c4>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b0a      	cmp	r3, #10
 80027ae:	d17f      	bne.n	80028b0 <menu+0x1538>
		if(dilSecim == 0) {
 80027b0:	4b63      	ldr	r3, [pc, #396]	; (8002940 <menu+0x15c8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80027b8:	4a62      	ldr	r2, [pc, #392]	; (8002944 <menu+0x15cc>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	2001      	movs	r0, #1
 80027be:	f005 fac9 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027c2:	4a61      	ldr	r2, [pc, #388]	; (8002948 <menu+0x15d0>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	2002      	movs	r0, #2
 80027c8:	f005 fac4 	bl	8007d54 <lcd_print>
 80027cc:	e00d      	b.n	80027ea <menu+0x1472>
		} else if(dilSecim == 1) {
 80027ce:	4b5c      	ldr	r3, [pc, #368]	; (8002940 <menu+0x15c8>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d109      	bne.n	80027ea <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80027d6:	4a5d      	ldr	r2, [pc, #372]	; (800294c <menu+0x15d4>)
 80027d8:	2101      	movs	r1, #1
 80027da:	2001      	movs	r0, #1
 80027dc:	f005 faba 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80027e0:	4a5b      	ldr	r2, [pc, #364]	; (8002950 <menu+0x15d8>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	2002      	movs	r0, #2
 80027e6:	f005 fab5 	bl	8007d54 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80027ea:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <menu+0x15dc>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	220a      	movs	r2, #10
 80027f0:	4959      	ldr	r1, [pc, #356]	; (8002958 <menu+0x15e0>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f009 fe00 	bl	800c3f8 <itoa>
		lcd_print(2,16,snum);
 80027f8:	4a57      	ldr	r2, [pc, #348]	; (8002958 <menu+0x15e0>)
 80027fa:	2110      	movs	r1, #16
 80027fc:	2002      	movs	r0, #2
 80027fe:	f005 faa9 	bl	8007d54 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002802:	2102      	movs	r1, #2
 8002804:	4849      	ldr	r0, [pc, #292]	; (800292c <menu+0x15b4>)
 8002806:	f006 fdcb 	bl	80093a0 <HAL_GPIO_ReadPin>
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d119      	bne.n	8002844 <menu+0x14cc>
 8002810:	4b47      	ldr	r3, [pc, #284]	; (8002930 <menu+0x15b8>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	f083 0301 	eor.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <menu+0x14cc>
 800281e:	4b41      	ldr	r3, [pc, #260]	; (8002924 <menu+0x15ac>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10e      	bne.n	8002844 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002826:	4b4b      	ldr	r3, [pc, #300]	; (8002954 <menu+0x15dc>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4b49      	ldr	r3, [pc, #292]	; (8002954 <menu+0x15dc>)
 8002830:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002832:	4b48      	ldr	r3, [pc, #288]	; (8002954 <menu+0x15dc>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b05      	cmp	r3, #5
 8002838:	d902      	bls.n	8002840 <menu+0x14c8>
				kapi1AcSure = 0;
 800283a:	4b46      	ldr	r3, [pc, #280]	; (8002954 <menu+0x15dc>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002840:	f002 f96c 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002844:	2104      	movs	r1, #4
 8002846:	4839      	ldr	r0, [pc, #228]	; (800292c <menu+0x15b4>)
 8002848:	f006 fdaa 	bl	80093a0 <HAL_GPIO_ReadPin>
 800284c:	4603      	mov	r3, r0
 800284e:	2b01      	cmp	r3, #1
 8002850:	d119      	bne.n	8002886 <menu+0x150e>
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <menu+0x15b8>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	f083 0301 	eor.w	r3, r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <menu+0x150e>
 8002860:	4b30      	ldr	r3, [pc, #192]	; (8002924 <menu+0x15ac>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10e      	bne.n	8002886 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002868:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <menu+0x15dc>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	3b01      	subs	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b38      	ldr	r3, [pc, #224]	; (8002954 <menu+0x15dc>)
 8002872:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002874:	4b37      	ldr	r3, [pc, #220]	; (8002954 <menu+0x15dc>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b06      	cmp	r3, #6
 800287a:	d902      	bls.n	8002882 <menu+0x150a>
		   		kapi1AcSure = 5;
 800287c:	4b35      	ldr	r3, [pc, #212]	; (8002954 <menu+0x15dc>)
 800287e:	2205      	movs	r2, #5
 8002880:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002882:	f002 f94b 	bl	8004b1c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002886:	2108      	movs	r1, #8
 8002888:	4828      	ldr	r0, [pc, #160]	; (800292c <menu+0x15b4>)
 800288a:	f006 fd89 	bl	80093a0 <HAL_GPIO_ReadPin>
 800288e:	4603      	mov	r3, r0
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10d      	bne.n	80028b0 <menu+0x1538>
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <menu+0x15b8>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <menu+0x15dc>)
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <menu+0x15bc>)
 80028a8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <menu+0x15c0>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <menu+0x15c4>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b0b      	cmp	r3, #11
 80028b6:	f040 80b5 	bne.w	8002a24 <menu+0x16ac>
		if(dilSecim == 0) {
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <menu+0x15c8>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80028c2:	4a26      	ldr	r2, [pc, #152]	; (800295c <menu+0x15e4>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	2001      	movs	r0, #1
 80028c8:	f005 fa44 	bl	8007d54 <lcd_print>
 80028cc:	e008      	b.n	80028e0 <menu+0x1568>
		} else if(dilSecim == 1) {
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <menu+0x15c8>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d104      	bne.n	80028e0 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80028d6:	4a22      	ldr	r2, [pc, #136]	; (8002960 <menu+0x15e8>)
 80028d8:	2101      	movs	r1, #1
 80028da:	2001      	movs	r0, #1
 80028dc:	f005 fa3a 	bl	8007d54 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <menu+0x15ec>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80028e8:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <menu+0x15f0>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	2002      	movs	r0, #2
 80028ee:	f005 fa31 	bl	8007d54 <lcd_print>
 80028f2:	e048      	b.n	8002986 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <menu+0x15ec>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d13b      	bne.n	8002974 <menu+0x15fc>
			if(dilSecim == 0) {
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <menu+0x15c8>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <menu+0x15f4>)
 8002906:	2101      	movs	r1, #1
 8002908:	2002      	movs	r0, #2
 800290a:	f005 fa23 	bl	8007d54 <lcd_print>
 800290e:	e03a      	b.n	8002986 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <menu+0x15c8>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d136      	bne.n	8002986 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <menu+0x15f8>)
 800291a:	2101      	movs	r1, #1
 800291c:	2002      	movs	r0, #2
 800291e:	f005 fa19 	bl	8007d54 <lcd_print>
 8002922:	e030      	b.n	8002986 <menu+0x160e>
 8002924:	20000205 	.word	0x20000205
 8002928:	0800d584 	.word	0x0800d584
 800292c:	40010800 	.word	0x40010800
 8002930:	2000022b 	.word	0x2000022b
 8002934:	20000128 	.word	0x20000128
 8002938:	20000228 	.word	0x20000228
 800293c:	200001fc 	.word	0x200001fc
 8002940:	2000021d 	.word	0x2000021d
 8002944:	0800d594 	.word	0x0800d594
 8002948:	0800d5a8 	.word	0x0800d5a8
 800294c:	0800d5b8 	.word	0x0800d5b8
 8002950:	0800d5cc 	.word	0x0800d5cc
 8002954:	20000215 	.word	0x20000215
 8002958:	20000198 	.word	0x20000198
 800295c:	0800d5dc 	.word	0x0800d5dc
 8002960:	0800d5f0 	.word	0x0800d5f0
 8002964:	20000206 	.word	0x20000206
 8002968:	0800d54c 	.word	0x0800d54c
 800296c:	0800d560 	.word	0x0800d560
 8002970:	0800d570 	.word	0x0800d570
			}
		} else if(kapi2Tip == 2) {
 8002974:	4b8a      	ldr	r3, [pc, #552]	; (8002ba0 <menu+0x1828>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d104      	bne.n	8002986 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 800297c:	4a89      	ldr	r2, [pc, #548]	; (8002ba4 <menu+0x182c>)
 800297e:	2101      	movs	r1, #1
 8002980:	2002      	movs	r0, #2
 8002982:	f005 f9e7 	bl	8007d54 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002986:	2102      	movs	r1, #2
 8002988:	4887      	ldr	r0, [pc, #540]	; (8002ba8 <menu+0x1830>)
 800298a:	f006 fd09 	bl	80093a0 <HAL_GPIO_ReadPin>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d115      	bne.n	80029c0 <menu+0x1648>
 8002994:	4b85      	ldr	r3, [pc, #532]	; (8002bac <menu+0x1834>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	f083 0301 	eor.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00e      	beq.n	80029c0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80029a2:	4b7f      	ldr	r3, [pc, #508]	; (8002ba0 <menu+0x1828>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b7d      	ldr	r3, [pc, #500]	; (8002ba0 <menu+0x1828>)
 80029ac:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80029ae:	4b7c      	ldr	r3, [pc, #496]	; (8002ba0 <menu+0x1828>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d902      	bls.n	80029bc <menu+0x1644>
				kapi2Tip = 0;
 80029b6:	4b7a      	ldr	r3, [pc, #488]	; (8002ba0 <menu+0x1828>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029bc:	f002 f8ae 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c0:	2104      	movs	r1, #4
 80029c2:	4879      	ldr	r0, [pc, #484]	; (8002ba8 <menu+0x1830>)
 80029c4:	f006 fcec 	bl	80093a0 <HAL_GPIO_ReadPin>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d115      	bne.n	80029fa <menu+0x1682>
 80029ce:	4b77      	ldr	r3, [pc, #476]	; (8002bac <menu+0x1834>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f083 0301 	eor.w	r3, r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00e      	beq.n	80029fa <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80029dc:	4b70      	ldr	r3, [pc, #448]	; (8002ba0 <menu+0x1828>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	4b6e      	ldr	r3, [pc, #440]	; (8002ba0 <menu+0x1828>)
 80029e6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80029e8:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <menu+0x1828>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d902      	bls.n	80029f6 <menu+0x167e>
		   		kapi2Tip = 2;
 80029f0:	4b6b      	ldr	r3, [pc, #428]	; (8002ba0 <menu+0x1828>)
 80029f2:	2202      	movs	r2, #2
 80029f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029f6:	f002 f891 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fa:	2108      	movs	r1, #8
 80029fc:	486a      	ldr	r0, [pc, #424]	; (8002ba8 <menu+0x1830>)
 80029fe:	f006 fccf 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10d      	bne.n	8002a24 <menu+0x16ac>
 8002a08:	4b68      	ldr	r3, [pc, #416]	; (8002bac <menu+0x1834>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002a16:	4b62      	ldr	r3, [pc, #392]	; (8002ba0 <menu+0x1828>)
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	4b65      	ldr	r3, [pc, #404]	; (8002bb0 <menu+0x1838>)
 8002a1c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002a1e:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <menu+0x183c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002a24:	4b64      	ldr	r3, [pc, #400]	; (8002bb8 <menu+0x1840>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d17f      	bne.n	8002b2c <menu+0x17b4>
		if(dilSecim == 0) {
 8002a2c:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <menu+0x1844>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a34:	4a62      	ldr	r2, [pc, #392]	; (8002bc0 <menu+0x1848>)
 8002a36:	2101      	movs	r1, #1
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f005 f98b 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a3e:	4a61      	ldr	r2, [pc, #388]	; (8002bc4 <menu+0x184c>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	2002      	movs	r0, #2
 8002a44:	f005 f986 	bl	8007d54 <lcd_print>
 8002a48:	e00d      	b.n	8002a66 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002a4a:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <menu+0x1844>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d109      	bne.n	8002a66 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002a52:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <menu+0x1850>)
 8002a54:	2101      	movs	r1, #1
 8002a56:	2001      	movs	r0, #1
 8002a58:	f005 f97c 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a5c:	4a5b      	ldr	r2, [pc, #364]	; (8002bcc <menu+0x1854>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2002      	movs	r0, #2
 8002a62:	f005 f977 	bl	8007d54 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a66:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <menu+0x1858>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	220a      	movs	r2, #10
 8002a6c:	4959      	ldr	r1, [pc, #356]	; (8002bd4 <menu+0x185c>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f009 fcc2 	bl	800c3f8 <itoa>
		lcd_print(2,16,snum);
 8002a74:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <menu+0x185c>)
 8002a76:	2110      	movs	r1, #16
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f005 f96b 	bl	8007d54 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4849      	ldr	r0, [pc, #292]	; (8002ba8 <menu+0x1830>)
 8002a82:	f006 fc8d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d119      	bne.n	8002ac0 <menu+0x1748>
 8002a8c:	4b47      	ldr	r3, [pc, #284]	; (8002bac <menu+0x1834>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d012      	beq.n	8002ac0 <menu+0x1748>
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <menu+0x1828>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10e      	bne.n	8002ac0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002aa2:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <menu+0x1858>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <menu+0x1858>)
 8002aac:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002aae:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <menu+0x1858>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d902      	bls.n	8002abc <menu+0x1744>
				kapi2AcSure = 0;
 8002ab6:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <menu+0x1858>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002abc:	f002 f82e 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	4839      	ldr	r0, [pc, #228]	; (8002ba8 <menu+0x1830>)
 8002ac4:	f006 fc6c 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d119      	bne.n	8002b02 <menu+0x178a>
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <menu+0x1834>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	f083 0301 	eor.w	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <menu+0x178a>
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <menu+0x1828>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10e      	bne.n	8002b02 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002ae4:	4b3a      	ldr	r3, [pc, #232]	; (8002bd0 <menu+0x1858>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <menu+0x1858>)
 8002aee:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002af0:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <menu+0x1858>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b06      	cmp	r3, #6
 8002af6:	d902      	bls.n	8002afe <menu+0x1786>
		   		kapi2AcSure = 5;
 8002af8:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <menu+0x1858>)
 8002afa:	2205      	movs	r2, #5
 8002afc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002afe:	f002 f80d 	bl	8004b1c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b02:	2108      	movs	r1, #8
 8002b04:	4828      	ldr	r0, [pc, #160]	; (8002ba8 <menu+0x1830>)
 8002b06:	f006 fc4b 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10d      	bne.n	8002b2c <menu+0x17b4>
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <menu+0x1834>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f083 0301 	eor.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <menu+0x1858>)
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <menu+0x1838>)
 8002b24:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <menu+0x183c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b2c:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <menu+0x1840>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b0d      	cmp	r3, #13
 8002b32:	f040 80b5 	bne.w	8002ca0 <menu+0x1928>
		if(dilSecim == 0) {
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <menu+0x1844>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002b3e:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <menu+0x1860>)
 8002b40:	2101      	movs	r1, #1
 8002b42:	2001      	movs	r0, #1
 8002b44:	f005 f906 	bl	8007d54 <lcd_print>
 8002b48:	e008      	b.n	8002b5c <menu+0x17e4>
		} else if(dilSecim == 1){
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <menu+0x1844>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d104      	bne.n	8002b5c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002b52:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <menu+0x1864>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	2001      	movs	r0, #1
 8002b58:	f005 f8fc 	bl	8007d54 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <menu+0x1868>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <menu+0x186c>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f005 f8f3 	bl	8007d54 <lcd_print>
 8002b6e:	e048      	b.n	8002c02 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <menu+0x1868>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d13b      	bne.n	8002bf0 <menu+0x1878>
			if(dilSecim == 0) {
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <menu+0x1844>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <menu+0x1870>)
 8002b82:	2101      	movs	r1, #1
 8002b84:	2002      	movs	r0, #2
 8002b86:	f005 f8e5 	bl	8007d54 <lcd_print>
 8002b8a:	e03a      	b.n	8002c02 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <menu+0x1844>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d136      	bne.n	8002c02 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <menu+0x1874>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f005 f8db 	bl	8007d54 <lcd_print>
 8002b9e:	e030      	b.n	8002c02 <menu+0x188a>
 8002ba0:	20000206 	.word	0x20000206
 8002ba4:	0800d584 	.word	0x0800d584
 8002ba8:	40010800 	.word	0x40010800
 8002bac:	2000022b 	.word	0x2000022b
 8002bb0:	20000128 	.word	0x20000128
 8002bb4:	20000228 	.word	0x20000228
 8002bb8:	200001fc 	.word	0x200001fc
 8002bbc:	2000021d 	.word	0x2000021d
 8002bc0:	0800d604 	.word	0x0800d604
 8002bc4:	0800d5a8 	.word	0x0800d5a8
 8002bc8:	0800d618 	.word	0x0800d618
 8002bcc:	0800d5cc 	.word	0x0800d5cc
 8002bd0:	20000216 	.word	0x20000216
 8002bd4:	20000198 	.word	0x20000198
 8002bd8:	0800d62c 	.word	0x0800d62c
 8002bdc:	0800d640 	.word	0x0800d640
 8002be0:	20000207 	.word	0x20000207
 8002be4:	0800d54c 	.word	0x0800d54c
 8002be8:	0800d560 	.word	0x0800d560
 8002bec:	0800d570 	.word	0x0800d570
			}
		} else if(kapitablaTip == 2) {
 8002bf0:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <menu+0x19e8>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d104      	bne.n	8002c02 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002bf8:	4a5a      	ldr	r2, [pc, #360]	; (8002d64 <menu+0x19ec>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	f005 f8a9 	bl	8007d54 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c02:	2102      	movs	r1, #2
 8002c04:	4858      	ldr	r0, [pc, #352]	; (8002d68 <menu+0x19f0>)
 8002c06:	f006 fbcb 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d115      	bne.n	8002c3c <menu+0x18c4>
 8002c10:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <menu+0x19f4>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00e      	beq.n	8002c3c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002c1e:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <menu+0x19e8>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <menu+0x19e8>)
 8002c28:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c2a:	4b4d      	ldr	r3, [pc, #308]	; (8002d60 <menu+0x19e8>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <menu+0x18c0>
				kapitablaTip = 0;
 8002c32:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <menu+0x19e8>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c38:	f001 ff70 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	484a      	ldr	r0, [pc, #296]	; (8002d68 <menu+0x19f0>)
 8002c40:	f006 fbae 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d115      	bne.n	8002c76 <menu+0x18fe>
 8002c4a:	4b48      	ldr	r3, [pc, #288]	; (8002d6c <menu+0x19f4>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	f083 0301 	eor.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c58:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <menu+0x19e8>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <menu+0x19e8>)
 8002c62:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c64:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <menu+0x19e8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d902      	bls.n	8002c72 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002c6c:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <menu+0x19e8>)
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c72:	f001 ff53 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c76:	2108      	movs	r1, #8
 8002c78:	483b      	ldr	r0, [pc, #236]	; (8002d68 <menu+0x19f0>)
 8002c7a:	f006 fb91 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10d      	bne.n	8002ca0 <menu+0x1928>
 8002c84:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <menu+0x19f4>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002c92:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <menu+0x19e8>)
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <menu+0x19f8>)
 8002c98:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002c9a:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <menu+0x19fc>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <menu+0x1a00>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b0e      	cmp	r3, #14
 8002ca6:	f040 80f2 	bne.w	8002e8e <menu+0x1b16>
		if(dilSecim == 0) {
 8002caa:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <menu+0x1a04>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002cb2:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <menu+0x1a08>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f005 f84c 	bl	8007d54 <lcd_print>
 8002cbc:	e008      	b.n	8002cd0 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <menu+0x1a04>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d104      	bne.n	8002cd0 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002cc6:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <menu+0x1a0c>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f005 f842 	bl	8007d54 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <menu+0x1a10>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d113      	bne.n	8002d00 <menu+0x1988>
			if(dilSecim == 0){
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <menu+0x1a04>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002ce0:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <menu+0x1a14>)
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f005 f835 	bl	8007d54 <lcd_print>
 8002cea:	e071      	b.n	8002dd0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002cec:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <menu+0x1a04>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d16d      	bne.n	8002dd0 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <menu+0x1a18>)
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	2002      	movs	r0, #2
 8002cfa:	f005 f82b 	bl	8007d54 <lcd_print>
 8002cfe:	e067      	b.n	8002dd0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002d00:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <menu+0x1a10>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d112      	bne.n	8002d2e <menu+0x19b6>
			if(dilSecim == 0){
 8002d08:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <menu+0x1a04>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <menu+0x1a1c>)
 8002d12:	2101      	movs	r1, #1
 8002d14:	2002      	movs	r0, #2
 8002d16:	f005 f81d 	bl	8007d54 <lcd_print>
			}
			if(dilSecim == 1){
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <menu+0x1a04>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d156      	bne.n	8002dd0 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002d22:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <menu+0x1a20>)
 8002d24:	2101      	movs	r1, #1
 8002d26:	2002      	movs	r0, #2
 8002d28:	f005 f814 	bl	8007d54 <lcd_print>
 8002d2c:	e050      	b.n	8002dd0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <menu+0x1a10>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d136      	bne.n	8002da4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <menu+0x1a04>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <menu+0x1a24>)
 8002d40:	2101      	movs	r1, #1
 8002d42:	2002      	movs	r0, #2
 8002d44:	f005 f806 	bl	8007d54 <lcd_print>
 8002d48:	e042      	b.n	8002dd0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <menu+0x1a04>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d13e      	bne.n	8002dd0 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002d52:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <menu+0x1a28>)
 8002d54:	2101      	movs	r1, #1
 8002d56:	2002      	movs	r0, #2
 8002d58:	f004 fffc 	bl	8007d54 <lcd_print>
 8002d5c:	e038      	b.n	8002dd0 <menu+0x1a58>
 8002d5e:	bf00      	nop
 8002d60:	20000207 	.word	0x20000207
 8002d64:	0800d584 	.word	0x0800d584
 8002d68:	40010800 	.word	0x40010800
 8002d6c:	2000022b 	.word	0x2000022b
 8002d70:	20000128 	.word	0x20000128
 8002d74:	20000228 	.word	0x20000228
 8002d78:	200001fc 	.word	0x200001fc
 8002d7c:	2000021d 	.word	0x2000021d
 8002d80:	0800d654 	.word	0x0800d654
 8002d84:	0800d668 	.word	0x0800d668
 8002d88:	20000209 	.word	0x20000209
 8002d8c:	0800d67c 	.word	0x0800d67c
 8002d90:	0800d68c 	.word	0x0800d68c
 8002d94:	0800d69c 	.word	0x0800d69c
 8002d98:	0800d6ac 	.word	0x0800d6ac
 8002d9c:	0800d6bc 	.word	0x0800d6bc
 8002da0:	0800d6d0 	.word	0x0800d6d0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002da4:	4b9b      	ldr	r3, [pc, #620]	; (8003014 <menu+0x1c9c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d111      	bne.n	8002dd0 <menu+0x1a58>
			if(dilSecim == 0) {
 8002dac:	4b9a      	ldr	r3, [pc, #616]	; (8003018 <menu+0x1ca0>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002db4:	4a99      	ldr	r2, [pc, #612]	; (800301c <menu+0x1ca4>)
 8002db6:	2101      	movs	r1, #1
 8002db8:	2002      	movs	r0, #2
 8002dba:	f004 ffcb 	bl	8007d54 <lcd_print>
			}
			if(dilSecim == 1) {
 8002dbe:	4b96      	ldr	r3, [pc, #600]	; (8003018 <menu+0x1ca0>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d104      	bne.n	8002dd0 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002dc6:	4a96      	ldr	r2, [pc, #600]	; (8003020 <menu+0x1ca8>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	2002      	movs	r0, #2
 8002dcc:	f004 ffc2 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4894      	ldr	r0, [pc, #592]	; (8003024 <menu+0x1cac>)
 8002dd4:	f006 fae4 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d115      	bne.n	8002e0a <menu+0x1a92>
 8002dde:	4b92      	ldr	r3, [pc, #584]	; (8003028 <menu+0x1cb0>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	f083 0301 	eor.w	r3, r3, #1
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00e      	beq.n	8002e0a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002dec:	4b89      	ldr	r3, [pc, #548]	; (8003014 <menu+0x1c9c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	4b87      	ldr	r3, [pc, #540]	; (8003014 <menu+0x1c9c>)
 8002df6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002df8:	4b86      	ldr	r3, [pc, #536]	; (8003014 <menu+0x1c9c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d902      	bls.n	8002e06 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002e00:	4b84      	ldr	r3, [pc, #528]	; (8003014 <menu+0x1c9c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e06:	f001 fe89 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4885      	ldr	r0, [pc, #532]	; (8003024 <menu+0x1cac>)
 8002e0e:	f006 fac7 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d115      	bne.n	8002e44 <menu+0x1acc>
 8002e18:	4b83      	ldr	r3, [pc, #524]	; (8003028 <menu+0x1cb0>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	f083 0301 	eor.w	r3, r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00e      	beq.n	8002e44 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002e26:	4b7b      	ldr	r3, [pc, #492]	; (8003014 <menu+0x1c9c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b79      	ldr	r3, [pc, #484]	; (8003014 <menu+0x1c9c>)
 8002e30:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e32:	4b78      	ldr	r3, [pc, #480]	; (8003014 <menu+0x1c9c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d902      	bls.n	8002e40 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <menu+0x1c9c>)
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e40:	f001 fe6c 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e44:	2108      	movs	r1, #8
 8002e46:	4877      	ldr	r0, [pc, #476]	; (8003024 <menu+0x1cac>)
 8002e48:	f006 faaa 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d11d      	bne.n	8002e8e <menu+0x1b16>
 8002e52:	4b75      	ldr	r3, [pc, #468]	; (8003028 <menu+0x1cb0>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	f083 0301 	eor.w	r3, r3, #1
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d016      	beq.n	8002e8e <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <menu+0x1c9c>)
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	4b71      	ldr	r3, [pc, #452]	; (800302c <menu+0x1cb4>)
 8002e66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002e6a:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <menu+0x1c9c>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <menu+0x1b02>
 8002e72:	4b68      	ldr	r3, [pc, #416]	; (8003014 <menu+0x1c9c>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d106      	bne.n	8002e88 <menu+0x1b10>
				altLimit = 1;
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <menu+0x1cb8>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e80:	4b6b      	ldr	r3, [pc, #428]	; (8003030 <menu+0x1cb8>)
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	4b69      	ldr	r3, [pc, #420]	; (800302c <menu+0x1cb4>)
 8002e86:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <menu+0x1cbc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <menu+0x1cc0>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d17f      	bne.n	8002f96 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002e96:	4b60      	ldr	r3, [pc, #384]	; (8003018 <menu+0x1ca0>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002e9e:	4a67      	ldr	r2, [pc, #412]	; (800303c <menu+0x1cc4>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f004 ff56 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ea8:	4a65      	ldr	r2, [pc, #404]	; (8003040 <menu+0x1cc8>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2002      	movs	r0, #2
 8002eae:	f004 ff51 	bl	8007d54 <lcd_print>
 8002eb2:	e00d      	b.n	8002ed0 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002eb4:	4b58      	ldr	r3, [pc, #352]	; (8003018 <menu+0x1ca0>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d109      	bne.n	8002ed0 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ebc:	4a61      	ldr	r2, [pc, #388]	; (8003044 <menu+0x1ccc>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f004 ff47 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ec6:	4a60      	ldr	r2, [pc, #384]	; (8003048 <menu+0x1cd0>)
 8002ec8:	2101      	movs	r1, #1
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f004 ff42 	bl	8007d54 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	; (800304c <menu+0x1cd4>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	220a      	movs	r2, #10
 8002ed6:	495e      	ldr	r1, [pc, #376]	; (8003050 <menu+0x1cd8>)
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f009 fa8d 	bl	800c3f8 <itoa>
		lcd_print(2,16,snum);
 8002ede:	4a5c      	ldr	r2, [pc, #368]	; (8003050 <menu+0x1cd8>)
 8002ee0:	2110      	movs	r1, #16
 8002ee2:	2002      	movs	r0, #2
 8002ee4:	f004 ff36 	bl	8007d54 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ee8:	2102      	movs	r1, #2
 8002eea:	484e      	ldr	r0, [pc, #312]	; (8003024 <menu+0x1cac>)
 8002eec:	f006 fa58 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d119      	bne.n	8002f2a <menu+0x1bb2>
 8002ef6:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <menu+0x1cb0>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	f083 0301 	eor.w	r3, r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d012      	beq.n	8002f2a <menu+0x1bb2>
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <menu+0x1cdc>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10e      	bne.n	8002f2a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002f0c:	4b4f      	ldr	r3, [pc, #316]	; (800304c <menu+0x1cd4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	3301      	adds	r3, #1
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	4b4d      	ldr	r3, [pc, #308]	; (800304c <menu+0x1cd4>)
 8002f16:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002f18:	4b4c      	ldr	r3, [pc, #304]	; (800304c <menu+0x1cd4>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d902      	bls.n	8002f26 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002f20:	4b4a      	ldr	r3, [pc, #296]	; (800304c <menu+0x1cd4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f26:	f001 fdf9 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	483d      	ldr	r0, [pc, #244]	; (8003024 <menu+0x1cac>)
 8002f2e:	f006 fa37 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d119      	bne.n	8002f6c <menu+0x1bf4>
 8002f38:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <menu+0x1cb0>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	f083 0301 	eor.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <menu+0x1bf4>
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <menu+0x1cdc>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10e      	bne.n	8002f6c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002f4e:	4b3f      	ldr	r3, [pc, #252]	; (800304c <menu+0x1cd4>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4b3d      	ldr	r3, [pc, #244]	; (800304c <menu+0x1cd4>)
 8002f58:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f5a:	4b3c      	ldr	r3, [pc, #240]	; (800304c <menu+0x1cd4>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d902      	bls.n	8002f68 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f62:	4b3a      	ldr	r3, [pc, #232]	; (800304c <menu+0x1cd4>)
 8002f64:	2205      	movs	r2, #5
 8002f66:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002f68:	f001 fdd8 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f6c:	2108      	movs	r1, #8
 8002f6e:	482d      	ldr	r0, [pc, #180]	; (8003024 <menu+0x1cac>)
 8002f70:	f006 fa16 	bl	80093a0 <HAL_GPIO_ReadPin>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <menu+0x1c1e>
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <menu+0x1cb0>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	f083 0301 	eor.w	r3, r3, #1
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002f88:	4b30      	ldr	r3, [pc, #192]	; (800304c <menu+0x1cd4>)
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <menu+0x1cb4>)
 8002f8e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002f90:	4b28      	ldr	r3, [pc, #160]	; (8003034 <menu+0x1cbc>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <menu+0x1cc0>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	f040 80bc 	bne.w	8003118 <menu+0x1da0>
		if(dilSecim == 0) {
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <menu+0x1ca0>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002fa8:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <menu+0x1ce0>)
 8002faa:	2101      	movs	r1, #1
 8002fac:	2001      	movs	r0, #1
 8002fae:	f004 fed1 	bl	8007d54 <lcd_print>
 8002fb2:	e008      	b.n	8002fc6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <menu+0x1ca0>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d104      	bne.n	8002fc6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <menu+0x1ce4>)
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f004 fec7 	bl	8007d54 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <menu+0x1ce8>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d113      	bne.n	8002ff6 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <menu+0x1ca0>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d105      	bne.n	8002fe2 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002fd6:	4a11      	ldr	r2, [pc, #68]	; (800301c <menu+0x1ca4>)
 8002fd8:	2101      	movs	r1, #1
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f004 feba 	bl	8007d54 <lcd_print>
 8002fe0:	e04b      	b.n	800307a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <menu+0x1ca0>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d147      	bne.n	800307a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002fea:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <menu+0x1ca8>)
 8002fec:	2101      	movs	r1, #1
 8002fee:	2002      	movs	r0, #2
 8002ff0:	f004 feb0 	bl	8007d54 <lcd_print>
 8002ff4:	e041      	b.n	800307a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <menu+0x1ce8>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d13d      	bne.n	800307a <menu+0x1d02>
			if(dilSecim == 0) {
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <menu+0x1ca0>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d130      	bne.n	8003068 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8003006:	4a17      	ldr	r2, [pc, #92]	; (8003064 <menu+0x1cec>)
 8003008:	2101      	movs	r1, #1
 800300a:	2002      	movs	r0, #2
 800300c:	f004 fea2 	bl	8007d54 <lcd_print>
 8003010:	e033      	b.n	800307a <menu+0x1d02>
 8003012:	bf00      	nop
 8003014:	20000209 	.word	0x20000209
 8003018:	2000021d 	.word	0x2000021d
 800301c:	0800d344 	.word	0x0800d344
 8003020:	0800d358 	.word	0x0800d358
 8003024:	40010800 	.word	0x40010800
 8003028:	2000022b 	.word	0x2000022b
 800302c:	20000128 	.word	0x20000128
 8003030:	20000202 	.word	0x20000202
 8003034:	20000228 	.word	0x20000228
 8003038:	200001fc 	.word	0x200001fc
 800303c:	0800d6e4 	.word	0x0800d6e4
 8003040:	0800d5a8 	.word	0x0800d5a8
 8003044:	0800d6f8 	.word	0x0800d6f8
 8003048:	0800d5cc 	.word	0x0800d5cc
 800304c:	20000217 	.word	0x20000217
 8003050:	20000198 	.word	0x20000198
 8003054:	20000207 	.word	0x20000207
 8003058:	0800d70c 	.word	0x0800d70c
 800305c:	0800d720 	.word	0x0800d720
 8003060:	2000020a 	.word	0x2000020a
 8003064:	0800d3a4 	.word	0x0800d3a4
			} else if(dilSecim == 1) {
 8003068:	4b99      	ldr	r3, [pc, #612]	; (80032d0 <menu+0x1f58>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d104      	bne.n	800307a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003070:	4a98      	ldr	r2, [pc, #608]	; (80032d4 <menu+0x1f5c>)
 8003072:	2101      	movs	r1, #1
 8003074:	2002      	movs	r0, #2
 8003076:	f004 fe6d 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800307a:	2102      	movs	r1, #2
 800307c:	4896      	ldr	r0, [pc, #600]	; (80032d8 <menu+0x1f60>)
 800307e:	f006 f98f 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003082:	4603      	mov	r3, r0
 8003084:	2b01      	cmp	r3, #1
 8003086:	d115      	bne.n	80030b4 <menu+0x1d3c>
 8003088:	4b94      	ldr	r3, [pc, #592]	; (80032dc <menu+0x1f64>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	f083 0301 	eor.w	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00e      	beq.n	80030b4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003096:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <menu+0x1f68>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b90      	ldr	r3, [pc, #576]	; (80032e0 <menu+0x1f68>)
 80030a0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80030a2:	4b8f      	ldr	r3, [pc, #572]	; (80032e0 <menu+0x1f68>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d902      	bls.n	80030b0 <menu+0x1d38>
				yukariYavasLimit = 0;
 80030aa:	4b8d      	ldr	r3, [pc, #564]	; (80032e0 <menu+0x1f68>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030b0:	f001 fd34 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b4:	2104      	movs	r1, #4
 80030b6:	4888      	ldr	r0, [pc, #544]	; (80032d8 <menu+0x1f60>)
 80030b8:	f006 f972 	bl	80093a0 <HAL_GPIO_ReadPin>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d115      	bne.n	80030ee <menu+0x1d76>
 80030c2:	4b86      	ldr	r3, [pc, #536]	; (80032dc <menu+0x1f64>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	f083 0301 	eor.w	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00e      	beq.n	80030ee <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80030d0:	4b83      	ldr	r3, [pc, #524]	; (80032e0 <menu+0x1f68>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <menu+0x1f68>)
 80030da:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80030dc:	4b80      	ldr	r3, [pc, #512]	; (80032e0 <menu+0x1f68>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80030e4:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <menu+0x1f68>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ea:	f001 fd17 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ee:	2108      	movs	r1, #8
 80030f0:	4879      	ldr	r0, [pc, #484]	; (80032d8 <menu+0x1f60>)
 80030f2:	f006 f955 	bl	80093a0 <HAL_GPIO_ReadPin>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10d      	bne.n	8003118 <menu+0x1da0>
 80030fc:	4b77      	ldr	r3, [pc, #476]	; (80032dc <menu+0x1f64>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	f083 0301 	eor.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800310a:	4b75      	ldr	r3, [pc, #468]	; (80032e0 <menu+0x1f68>)
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <menu+0x1f6c>)
 8003110:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003112:	4b75      	ldr	r3, [pc, #468]	; (80032e8 <menu+0x1f70>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003118:	4b74      	ldr	r3, [pc, #464]	; (80032ec <menu+0x1f74>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b11      	cmp	r3, #17
 800311e:	f040 80c3 	bne.w	80032a8 <menu+0x1f30>
		if(dilSecim == 0) {
 8003122:	4b6b      	ldr	r3, [pc, #428]	; (80032d0 <menu+0x1f58>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800312a:	4a71      	ldr	r2, [pc, #452]	; (80032f0 <menu+0x1f78>)
 800312c:	2101      	movs	r1, #1
 800312e:	2001      	movs	r0, #1
 8003130:	f004 fe10 	bl	8007d54 <lcd_print>
 8003134:	e008      	b.n	8003148 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003136:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <menu+0x1f58>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d104      	bne.n	8003148 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800313e:	4a6d      	ldr	r2, [pc, #436]	; (80032f4 <menu+0x1f7c>)
 8003140:	2101      	movs	r1, #1
 8003142:	2001      	movs	r0, #1
 8003144:	f004 fe06 	bl	8007d54 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003148:	4b6b      	ldr	r3, [pc, #428]	; (80032f8 <menu+0x1f80>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d113      	bne.n	8003178 <menu+0x1e00>
			if(dilSecim == 0){
 8003150:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <menu+0x1f58>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003158:	4a68      	ldr	r2, [pc, #416]	; (80032fc <menu+0x1f84>)
 800315a:	2101      	movs	r1, #1
 800315c:	2002      	movs	r0, #2
 800315e:	f004 fdf9 	bl	8007d54 <lcd_print>
 8003162:	e038      	b.n	80031d6 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <menu+0x1f58>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d134      	bne.n	80031d6 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 800316c:	4a64      	ldr	r2, [pc, #400]	; (8003300 <menu+0x1f88>)
 800316e:	2101      	movs	r1, #1
 8003170:	2002      	movs	r0, #2
 8003172:	f004 fdef 	bl	8007d54 <lcd_print>
 8003176:	e02e      	b.n	80031d6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003178:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <menu+0x1f80>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d113      	bne.n	80031a8 <menu+0x1e30>
			if(dilSecim == 0){
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <menu+0x1f58>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003188:	4a5e      	ldr	r2, [pc, #376]	; (8003304 <menu+0x1f8c>)
 800318a:	2101      	movs	r1, #1
 800318c:	2002      	movs	r0, #2
 800318e:	f004 fde1 	bl	8007d54 <lcd_print>
 8003192:	e020      	b.n	80031d6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003194:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <menu+0x1f58>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d11c      	bne.n	80031d6 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 800319c:	4a5a      	ldr	r2, [pc, #360]	; (8003308 <menu+0x1f90>)
 800319e:	2101      	movs	r1, #1
 80031a0:	2002      	movs	r0, #2
 80031a2:	f004 fdd7 	bl	8007d54 <lcd_print>
 80031a6:	e016      	b.n	80031d6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80031a8:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <menu+0x1f80>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d112      	bne.n	80031d6 <menu+0x1e5e>
			if(dilSecim == 0) {
 80031b0:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <menu+0x1f58>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80031b8:	4a54      	ldr	r2, [pc, #336]	; (800330c <menu+0x1f94>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	2002      	movs	r0, #2
 80031be:	f004 fdc9 	bl	8007d54 <lcd_print>
 80031c2:	e008      	b.n	80031d6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <menu+0x1f58>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d104      	bne.n	80031d6 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80031cc:	4a50      	ldr	r2, [pc, #320]	; (8003310 <menu+0x1f98>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	2002      	movs	r0, #2
 80031d2:	f004 fdbf 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031d6:	2102      	movs	r1, #2
 80031d8:	483f      	ldr	r0, [pc, #252]	; (80032d8 <menu+0x1f60>)
 80031da:	f006 f8e1 	bl	80093a0 <HAL_GPIO_ReadPin>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d115      	bne.n	8003210 <menu+0x1e98>
 80031e4:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <menu+0x1f64>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	f083 0301 	eor.w	r3, r3, #1
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00e      	beq.n	8003210 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <menu+0x1f80>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <menu+0x1f80>)
 80031fc:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80031fe:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <menu+0x1f80>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d902      	bls.n	800320c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003206:	4b3c      	ldr	r3, [pc, #240]	; (80032f8 <menu+0x1f80>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800320c:	f001 fc86 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003210:	2104      	movs	r1, #4
 8003212:	4831      	ldr	r0, [pc, #196]	; (80032d8 <menu+0x1f60>)
 8003214:	f006 f8c4 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d115      	bne.n	800324a <menu+0x1ed2>
 800321e:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <menu+0x1f64>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f083 0301 	eor.w	r3, r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800322c:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <menu+0x1f80>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	3b01      	subs	r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <menu+0x1f80>)
 8003236:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003238:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <menu+0x1f80>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d902      	bls.n	8003246 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003240:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <menu+0x1f80>)
 8003242:	2202      	movs	r2, #2
 8003244:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003246:	f001 fc69 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800324a:	2108      	movs	r1, #8
 800324c:	4822      	ldr	r0, [pc, #136]	; (80032d8 <menu+0x1f60>)
 800324e:	f006 f8a7 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d127      	bne.n	80032a8 <menu+0x1f30>
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <menu+0x1f64>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f083 0301 	eor.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d020      	beq.n	80032a8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <menu+0x1f80>)
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <menu+0x1f6c>)
 800326c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <menu+0x1f80>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d003      	beq.n	800327e <menu+0x1f06>
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <menu+0x1f80>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d106      	bne.n	800328c <menu+0x1f14>
				calismaSekli = 0;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <menu+0x1f9c>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <menu+0x1f9c>)
 8003286:	781a      	ldrb	r2, [r3, #0]
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <menu+0x1f6c>)
 800328a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <menu+0x1f80>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d106      	bne.n	80032a2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003294:	4b20      	ldr	r3, [pc, #128]	; (8003318 <menu+0x1fa0>)
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <menu+0x1fa0>)
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <menu+0x1f6c>)
 80032a0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <menu+0x1f70>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <menu+0x1f74>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b12      	cmp	r3, #18
 80032ae:	f040 80d5 	bne.w	800345c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <menu+0x1f80>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d13c      	bne.n	8003334 <menu+0x1fbc>
			if(dilSecim == 0) {
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <menu+0x1f58>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12e      	bne.n	8003320 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80032c2:	4a16      	ldr	r2, [pc, #88]	; (800331c <menu+0x1fa4>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	2001      	movs	r0, #1
 80032c8:	f004 fd44 	bl	8007d54 <lcd_print>
 80032cc:	e048      	b.n	8003360 <menu+0x1fe8>
 80032ce:	bf00      	nop
 80032d0:	2000021d 	.word	0x2000021d
 80032d4:	0800d3b8 	.word	0x0800d3b8
 80032d8:	40010800 	.word	0x40010800
 80032dc:	2000022b 	.word	0x2000022b
 80032e0:	2000020a 	.word	0x2000020a
 80032e4:	20000128 	.word	0x20000128
 80032e8:	20000228 	.word	0x20000228
 80032ec:	200001fc 	.word	0x200001fc
 80032f0:	0800d734 	.word	0x0800d734
 80032f4:	0800d748 	.word	0x0800d748
 80032f8:	2000020b 	.word	0x2000020b
 80032fc:	0800d75c 	.word	0x0800d75c
 8003300:	0800d76c 	.word	0x0800d76c
 8003304:	0800d77c 	.word	0x0800d77c
 8003308:	0800d78c 	.word	0x0800d78c
 800330c:	0800d344 	.word	0x0800d344
 8003310:	0800d358 	.word	0x0800d358
 8003314:	200001fd 	.word	0x200001fd
 8003318:	2000020e 	.word	0x2000020e
 800331c:	0800d79c 	.word	0x0800d79c
			} else if(dilSecim == 1) {
 8003320:	4b7b      	ldr	r3, [pc, #492]	; (8003510 <menu+0x2198>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d11b      	bne.n	8003360 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003328:	4a7a      	ldr	r2, [pc, #488]	; (8003514 <menu+0x219c>)
 800332a:	2101      	movs	r1, #1
 800332c:	2001      	movs	r0, #1
 800332e:	f004 fd11 	bl	8007d54 <lcd_print>
 8003332:	e015      	b.n	8003360 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003334:	4b78      	ldr	r3, [pc, #480]	; (8003518 <menu+0x21a0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d111      	bne.n	8003360 <menu+0x1fe8>
			if(dilSecim == 0){
 800333c:	4b74      	ldr	r3, [pc, #464]	; (8003510 <menu+0x2198>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003344:	4a75      	ldr	r2, [pc, #468]	; (800351c <menu+0x21a4>)
 8003346:	2101      	movs	r1, #1
 8003348:	2001      	movs	r0, #1
 800334a:	f004 fd03 	bl	8007d54 <lcd_print>
			}
			if(dilSecim == 1){
 800334e:	4b70      	ldr	r3, [pc, #448]	; (8003510 <menu+0x2198>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d104      	bne.n	8003360 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003356:	4a72      	ldr	r2, [pc, #456]	; (8003520 <menu+0x21a8>)
 8003358:	2101      	movs	r1, #1
 800335a:	2001      	movs	r0, #1
 800335c:	f004 fcfa 	bl	8007d54 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003360:	4b70      	ldr	r3, [pc, #448]	; (8003524 <menu+0x21ac>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d113      	bne.n	8003390 <menu+0x2018>
			if(dilSecim == 0) {
 8003368:	4b69      	ldr	r3, [pc, #420]	; (8003510 <menu+0x2198>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003370:	4a6d      	ldr	r2, [pc, #436]	; (8003528 <menu+0x21b0>)
 8003372:	2101      	movs	r1, #1
 8003374:	2002      	movs	r0, #2
 8003376:	f004 fced 	bl	8007d54 <lcd_print>
 800337a:	e020      	b.n	80033be <menu+0x2046>
			} else if(dilSecim == 1){
 800337c:	4b64      	ldr	r3, [pc, #400]	; (8003510 <menu+0x2198>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d11c      	bne.n	80033be <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003384:	4a69      	ldr	r2, [pc, #420]	; (800352c <menu+0x21b4>)
 8003386:	2101      	movs	r1, #1
 8003388:	2002      	movs	r0, #2
 800338a:	f004 fce3 	bl	8007d54 <lcd_print>
 800338e:	e016      	b.n	80033be <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003390:	4b64      	ldr	r3, [pc, #400]	; (8003524 <menu+0x21ac>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d112      	bne.n	80033be <menu+0x2046>
			if(dilSecim == 0){
 8003398:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <menu+0x2198>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80033a0:	4a63      	ldr	r2, [pc, #396]	; (8003530 <menu+0x21b8>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	2002      	movs	r0, #2
 80033a6:	f004 fcd5 	bl	8007d54 <lcd_print>
 80033aa:	e008      	b.n	80033be <menu+0x2046>
			} else if(dilSecim == 1){
 80033ac:	4b58      	ldr	r3, [pc, #352]	; (8003510 <menu+0x2198>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d104      	bne.n	80033be <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80033b4:	4a5f      	ldr	r2, [pc, #380]	; (8003534 <menu+0x21bc>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	2002      	movs	r0, #2
 80033ba:	f004 fccb 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033be:	2102      	movs	r1, #2
 80033c0:	485d      	ldr	r0, [pc, #372]	; (8003538 <menu+0x21c0>)
 80033c2:	f005 ffed 	bl	80093a0 <HAL_GPIO_ReadPin>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d115      	bne.n	80033f8 <menu+0x2080>
 80033cc:	4b5b      	ldr	r3, [pc, #364]	; (800353c <menu+0x21c4>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	f083 0301 	eor.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00e      	beq.n	80033f8 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80033da:	4b52      	ldr	r3, [pc, #328]	; (8003524 <menu+0x21ac>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b50      	ldr	r3, [pc, #320]	; (8003524 <menu+0x21ac>)
 80033e4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80033e6:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <menu+0x21ac>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d902      	bls.n	80033f4 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80033ee:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <menu+0x21ac>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033f4:	f001 fb92 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f8:	2104      	movs	r1, #4
 80033fa:	484f      	ldr	r0, [pc, #316]	; (8003538 <menu+0x21c0>)
 80033fc:	f005 ffd0 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003400:	4603      	mov	r3, r0
 8003402:	2b01      	cmp	r3, #1
 8003404:	d115      	bne.n	8003432 <menu+0x20ba>
 8003406:	4b4d      	ldr	r3, [pc, #308]	; (800353c <menu+0x21c4>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	f083 0301 	eor.w	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00e      	beq.n	8003432 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003414:	4b43      	ldr	r3, [pc, #268]	; (8003524 <menu+0x21ac>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	3b01      	subs	r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	4b41      	ldr	r3, [pc, #260]	; (8003524 <menu+0x21ac>)
 800341e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003420:	4b40      	ldr	r3, [pc, #256]	; (8003524 <menu+0x21ac>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003428:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <menu+0x21ac>)
 800342a:	2201      	movs	r2, #1
 800342c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800342e:	f001 fb75 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003432:	2108      	movs	r1, #8
 8003434:	4840      	ldr	r0, [pc, #256]	; (8003538 <menu+0x21c0>)
 8003436:	f005 ffb3 	bl	80093a0 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d10d      	bne.n	800345c <menu+0x20e4>
 8003440:	4b3e      	ldr	r3, [pc, #248]	; (800353c <menu+0x21c4>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f083 0301 	eor.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800344e:	4b35      	ldr	r3, [pc, #212]	; (8003524 <menu+0x21ac>)
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <menu+0x21c8>)
 8003454:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <menu+0x21cc>)
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <menu+0x21d0>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b13      	cmp	r3, #19
 8003462:	f040 80d5 	bne.w	8003610 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <menu+0x21a0>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d113      	bne.n	8003496 <menu+0x211e>
			if(dilSecim == 0) {
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <menu+0x2198>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003476:	4a35      	ldr	r2, [pc, #212]	; (800354c <menu+0x21d4>)
 8003478:	2101      	movs	r1, #1
 800347a:	2001      	movs	r0, #1
 800347c:	f004 fc6a 	bl	8007d54 <lcd_print>
 8003480:	e01f      	b.n	80034c2 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003482:	4b23      	ldr	r3, [pc, #140]	; (8003510 <menu+0x2198>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d11b      	bne.n	80034c2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800348a:	4a31      	ldr	r2, [pc, #196]	; (8003550 <menu+0x21d8>)
 800348c:	2101      	movs	r1, #1
 800348e:	2001      	movs	r0, #1
 8003490:	f004 fc60 	bl	8007d54 <lcd_print>
 8003494:	e015      	b.n	80034c2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <menu+0x21a0>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d111      	bne.n	80034c2 <menu+0x214a>
			if(dilSecim == 0) {
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <menu+0x2198>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d104      	bne.n	80034b0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80034a6:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <menu+0x21dc>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	2001      	movs	r0, #1
 80034ac:	f004 fc52 	bl	8007d54 <lcd_print>
			}
			if(dilSecim == 1) {
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <menu+0x2198>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d104      	bne.n	80034c2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80034b8:	4a27      	ldr	r2, [pc, #156]	; (8003558 <menu+0x21e0>)
 80034ba:	2101      	movs	r1, #1
 80034bc:	2001      	movs	r0, #1
 80034be:	f004 fc49 	bl	8007d54 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80034c2:	4b26      	ldr	r3, [pc, #152]	; (800355c <menu+0x21e4>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d113      	bne.n	80034f2 <menu+0x217a>
			if(dilSecim == 0) {
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <menu+0x2198>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80034d2:	4a15      	ldr	r2, [pc, #84]	; (8003528 <menu+0x21b0>)
 80034d4:	2101      	movs	r1, #1
 80034d6:	2002      	movs	r0, #2
 80034d8:	f004 fc3c 	bl	8007d54 <lcd_print>
 80034dc:	e049      	b.n	8003572 <menu+0x21fa>
			} else if(dilSecim == 1) {
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <menu+0x2198>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d145      	bne.n	8003572 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80034e6:	4a11      	ldr	r2, [pc, #68]	; (800352c <menu+0x21b4>)
 80034e8:	2101      	movs	r1, #1
 80034ea:	2002      	movs	r0, #2
 80034ec:	f004 fc32 	bl	8007d54 <lcd_print>
 80034f0:	e03f      	b.n	8003572 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <menu+0x21e4>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d13b      	bne.n	8003572 <menu+0x21fa>
			if(dilSecim == 0) {
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <menu+0x2198>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d12e      	bne.n	8003560 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003502:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <menu+0x21b8>)
 8003504:	2101      	movs	r1, #1
 8003506:	2002      	movs	r0, #2
 8003508:	f004 fc24 	bl	8007d54 <lcd_print>
 800350c:	e031      	b.n	8003572 <menu+0x21fa>
 800350e:	bf00      	nop
 8003510:	2000021d 	.word	0x2000021d
 8003514:	0800d7b0 	.word	0x0800d7b0
 8003518:	2000020b 	.word	0x2000020b
 800351c:	0800d7c0 	.word	0x0800d7c0
 8003520:	0800d7d4 	.word	0x0800d7d4
 8003524:	2000020c 	.word	0x2000020c
 8003528:	0800d344 	.word	0x0800d344
 800352c:	0800d358 	.word	0x0800d358
 8003530:	0800d3a4 	.word	0x0800d3a4
 8003534:	0800d3b8 	.word	0x0800d3b8
 8003538:	40010800 	.word	0x40010800
 800353c:	2000022b 	.word	0x2000022b
 8003540:	20000128 	.word	0x20000128
 8003544:	20000228 	.word	0x20000228
 8003548:	200001fc 	.word	0x200001fc
 800354c:	0800d7e8 	.word	0x0800d7e8
 8003550:	0800d7fc 	.word	0x0800d7fc
 8003554:	0800d810 	.word	0x0800d810
 8003558:	0800d824 	.word	0x0800d824
 800355c:	2000020d 	.word	0x2000020d
			} else if(dilSecim == 1) {
 8003560:	4b90      	ldr	r3, [pc, #576]	; (80037a4 <menu+0x242c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d104      	bne.n	8003572 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003568:	4a8f      	ldr	r2, [pc, #572]	; (80037a8 <menu+0x2430>)
 800356a:	2101      	movs	r1, #1
 800356c:	2002      	movs	r0, #2
 800356e:	f004 fbf1 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003572:	2102      	movs	r1, #2
 8003574:	488d      	ldr	r0, [pc, #564]	; (80037ac <menu+0x2434>)
 8003576:	f005 ff13 	bl	80093a0 <HAL_GPIO_ReadPin>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d115      	bne.n	80035ac <menu+0x2234>
 8003580:	4b8b      	ldr	r3, [pc, #556]	; (80037b0 <menu+0x2438>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00e      	beq.n	80035ac <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800358e:	4b89      	ldr	r3, [pc, #548]	; (80037b4 <menu+0x243c>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b87      	ldr	r3, [pc, #540]	; (80037b4 <menu+0x243c>)
 8003598:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800359a:	4b86      	ldr	r3, [pc, #536]	; (80037b4 <menu+0x243c>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d902      	bls.n	80035a8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80035a2:	4b84      	ldr	r3, [pc, #528]	; (80037b4 <menu+0x243c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035a8:	f001 fab8 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ac:	2104      	movs	r1, #4
 80035ae:	487f      	ldr	r0, [pc, #508]	; (80037ac <menu+0x2434>)
 80035b0:	f005 fef6 	bl	80093a0 <HAL_GPIO_ReadPin>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d115      	bne.n	80035e6 <menu+0x226e>
 80035ba:	4b7d      	ldr	r3, [pc, #500]	; (80037b0 <menu+0x2438>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	f083 0301 	eor.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80035c8:	4b7a      	ldr	r3, [pc, #488]	; (80037b4 <menu+0x243c>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	4b78      	ldr	r3, [pc, #480]	; (80037b4 <menu+0x243c>)
 80035d2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80035d4:	4b77      	ldr	r3, [pc, #476]	; (80037b4 <menu+0x243c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80035dc:	4b75      	ldr	r3, [pc, #468]	; (80037b4 <menu+0x243c>)
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035e2:	f001 fa9b 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e6:	2108      	movs	r1, #8
 80035e8:	4870      	ldr	r0, [pc, #448]	; (80037ac <menu+0x2434>)
 80035ea:	f005 fed9 	bl	80093a0 <HAL_GPIO_ReadPin>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10d      	bne.n	8003610 <menu+0x2298>
 80035f4:	4b6e      	ldr	r3, [pc, #440]	; (80037b0 <menu+0x2438>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f083 0301 	eor.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003602:	4b6c      	ldr	r3, [pc, #432]	; (80037b4 <menu+0x243c>)
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <menu+0x2440>)
 8003608:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800360a:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <menu+0x2444>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003610:	4b6b      	ldr	r3, [pc, #428]	; (80037c0 <menu+0x2448>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b14      	cmp	r3, #20
 8003616:	f040 80b5 	bne.w	8003784 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800361a:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <menu+0x244c>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d113      	bne.n	800364a <menu+0x22d2>
			if(dilSecim == 0) {
 8003622:	4b60      	ldr	r3, [pc, #384]	; (80037a4 <menu+0x242c>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800362a:	4a67      	ldr	r2, [pc, #412]	; (80037c8 <menu+0x2450>)
 800362c:	2101      	movs	r1, #1
 800362e:	2001      	movs	r0, #1
 8003630:	f004 fb90 	bl	8007d54 <lcd_print>
 8003634:	e020      	b.n	8003678 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <menu+0x242c>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d11c      	bne.n	8003678 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800363e:	4a63      	ldr	r2, [pc, #396]	; (80037cc <menu+0x2454>)
 8003640:	2101      	movs	r1, #1
 8003642:	2001      	movs	r0, #1
 8003644:	f004 fb86 	bl	8007d54 <lcd_print>
 8003648:	e016      	b.n	8003678 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800364a:	4b5e      	ldr	r3, [pc, #376]	; (80037c4 <menu+0x244c>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d112      	bne.n	8003678 <menu+0x2300>
			if(dilSecim == 0) {
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <menu+0x242c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800365a:	4a5d      	ldr	r2, [pc, #372]	; (80037d0 <menu+0x2458>)
 800365c:	2101      	movs	r1, #1
 800365e:	2001      	movs	r0, #1
 8003660:	f004 fb78 	bl	8007d54 <lcd_print>
 8003664:	e008      	b.n	8003678 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003666:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <menu+0x242c>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d104      	bne.n	8003678 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800366e:	4a59      	ldr	r2, [pc, #356]	; (80037d4 <menu+0x245c>)
 8003670:	2101      	movs	r1, #1
 8003672:	2001      	movs	r0, #1
 8003674:	f004 fb6e 	bl	8007d54 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003678:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <menu+0x2460>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d113      	bne.n	80036a8 <menu+0x2330>
			if(dilSecim == 0) {
 8003680:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <menu+0x242c>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003688:	4a54      	ldr	r2, [pc, #336]	; (80037dc <menu+0x2464>)
 800368a:	2101      	movs	r1, #1
 800368c:	2002      	movs	r0, #2
 800368e:	f004 fb61 	bl	8007d54 <lcd_print>
 8003692:	e020      	b.n	80036d6 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003694:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <menu+0x242c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d11c      	bne.n	80036d6 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 800369c:	4a50      	ldr	r2, [pc, #320]	; (80037e0 <menu+0x2468>)
 800369e:	2101      	movs	r1, #1
 80036a0:	2002      	movs	r0, #2
 80036a2:	f004 fb57 	bl	8007d54 <lcd_print>
 80036a6:	e016      	b.n	80036d6 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80036a8:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <menu+0x2460>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d112      	bne.n	80036d6 <menu+0x235e>
			if(dilSecim == 0) {
 80036b0:	4b3c      	ldr	r3, [pc, #240]	; (80037a4 <menu+0x242c>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d105      	bne.n	80036c4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80036b8:	4a4a      	ldr	r2, [pc, #296]	; (80037e4 <menu+0x246c>)
 80036ba:	2101      	movs	r1, #1
 80036bc:	2002      	movs	r0, #2
 80036be:	f004 fb49 	bl	8007d54 <lcd_print>
 80036c2:	e008      	b.n	80036d6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80036c4:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <menu+0x242c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d104      	bne.n	80036d6 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80036cc:	4a46      	ldr	r2, [pc, #280]	; (80037e8 <menu+0x2470>)
 80036ce:	2101      	movs	r1, #1
 80036d0:	2002      	movs	r0, #2
 80036d2:	f004 fb3f 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036d6:	2102      	movs	r1, #2
 80036d8:	4834      	ldr	r0, [pc, #208]	; (80037ac <menu+0x2434>)
 80036da:	f005 fe61 	bl	80093a0 <HAL_GPIO_ReadPin>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d119      	bne.n	8003718 <menu+0x23a0>
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <menu+0x2438>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	f083 0301 	eor.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d012      	beq.n	8003718 <menu+0x23a0>
 80036f2:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <menu+0x244c>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d10e      	bne.n	8003718 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <menu+0x2460>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <menu+0x2460>)
 8003704:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003706:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <menu+0x2460>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d902      	bls.n	8003714 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800370e:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <menu+0x2460>)
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003714:	f001 fa02 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003718:	2104      	movs	r1, #4
 800371a:	4824      	ldr	r0, [pc, #144]	; (80037ac <menu+0x2434>)
 800371c:	f005 fe40 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003720:	4603      	mov	r3, r0
 8003722:	2b01      	cmp	r3, #1
 8003724:	d119      	bne.n	800375a <menu+0x23e2>
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <menu+0x2438>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	f083 0301 	eor.w	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d012      	beq.n	800375a <menu+0x23e2>
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <menu+0x244c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d10e      	bne.n	800375a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <menu+0x2460>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <menu+0x2460>)
 8003746:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <menu+0x2460>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003750:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <menu+0x2460>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003756:	f001 f9e1 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800375a:	2108      	movs	r1, #8
 800375c:	4813      	ldr	r0, [pc, #76]	; (80037ac <menu+0x2434>)
 800375e:	f005 fe1f 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10d      	bne.n	8003784 <menu+0x240c>
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <menu+0x2438>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	f083 0301 	eor.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d006      	beq.n	8003784 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003776:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <menu+0x2460>)
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <menu+0x2440>)
 800377c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <menu+0x2444>)
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <menu+0x2448>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b15      	cmp	r3, #21
 800378a:	f040 80c2 	bne.w	8003912 <menu+0x259a>
		if(dilSecim == 0) {
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <menu+0x242c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d12c      	bne.n	80037f0 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <menu+0x2474>)
 8003798:	2101      	movs	r1, #1
 800379a:	2001      	movs	r0, #1
 800379c:	f004 fada 	bl	8007d54 <lcd_print>
 80037a0:	e02f      	b.n	8003802 <menu+0x248a>
 80037a2:	bf00      	nop
 80037a4:	2000021d 	.word	0x2000021d
 80037a8:	0800d3b8 	.word	0x0800d3b8
 80037ac:	40010800 	.word	0x40010800
 80037b0:	2000022b 	.word	0x2000022b
 80037b4:	2000020d 	.word	0x2000020d
 80037b8:	20000128 	.word	0x20000128
 80037bc:	20000228 	.word	0x20000228
 80037c0:	200001fc 	.word	0x200001fc
 80037c4:	2000020b 	.word	0x2000020b
 80037c8:	0800d838 	.word	0x0800d838
 80037cc:	0800d84c 	.word	0x0800d84c
 80037d0:	0800d860 	.word	0x0800d860
 80037d4:	0800d874 	.word	0x0800d874
 80037d8:	2000020e 	.word	0x2000020e
 80037dc:	0800d888 	.word	0x0800d888
 80037e0:	0800d89c 	.word	0x0800d89c
 80037e4:	0800d8ac 	.word	0x0800d8ac
 80037e8:	0800d8c0 	.word	0x0800d8c0
 80037ec:	0800d8d0 	.word	0x0800d8d0
		} else if(dilSecim == 1) {
 80037f0:	4b9c      	ldr	r3, [pc, #624]	; (8003a64 <menu+0x26ec>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d104      	bne.n	8003802 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80037f8:	4a9b      	ldr	r2, [pc, #620]	; (8003a68 <menu+0x26f0>)
 80037fa:	2101      	movs	r1, #1
 80037fc:	2001      	movs	r0, #1
 80037fe:	f004 faa9 	bl	8007d54 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003802:	4b9a      	ldr	r3, [pc, #616]	; (8003a6c <menu+0x26f4>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d112      	bne.n	8003830 <menu+0x24b8>
			if(dilSecim == 0) {
 800380a:	4b96      	ldr	r3, [pc, #600]	; (8003a64 <menu+0x26ec>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003812:	4a97      	ldr	r2, [pc, #604]	; (8003a70 <menu+0x26f8>)
 8003814:	2101      	movs	r1, #1
 8003816:	2002      	movs	r0, #2
 8003818:	f004 fa9c 	bl	8007d54 <lcd_print>
			}
			if(dilSecim == 1) {
 800381c:	4b91      	ldr	r3, [pc, #580]	; (8003a64 <menu+0x26ec>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d11c      	bne.n	800385e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003824:	4a93      	ldr	r2, [pc, #588]	; (8003a74 <menu+0x26fc>)
 8003826:	2101      	movs	r1, #1
 8003828:	2002      	movs	r0, #2
 800382a:	f004 fa93 	bl	8007d54 <lcd_print>
 800382e:	e016      	b.n	800385e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003830:	4b8e      	ldr	r3, [pc, #568]	; (8003a6c <menu+0x26f4>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d112      	bne.n	800385e <menu+0x24e6>
			if(dilSecim == 0) {
 8003838:	4b8a      	ldr	r3, [pc, #552]	; (8003a64 <menu+0x26ec>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d105      	bne.n	800384c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003840:	4a8d      	ldr	r2, [pc, #564]	; (8003a78 <menu+0x2700>)
 8003842:	2101      	movs	r1, #1
 8003844:	2002      	movs	r0, #2
 8003846:	f004 fa85 	bl	8007d54 <lcd_print>
 800384a:	e008      	b.n	800385e <menu+0x24e6>
			} else if(dilSecim == 1) {
 800384c:	4b85      	ldr	r3, [pc, #532]	; (8003a64 <menu+0x26ec>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d104      	bne.n	800385e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003854:	4a89      	ldr	r2, [pc, #548]	; (8003a7c <menu+0x2704>)
 8003856:	2101      	movs	r1, #1
 8003858:	2002      	movs	r0, #2
 800385a:	f004 fa7b 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800385e:	2102      	movs	r1, #2
 8003860:	4887      	ldr	r0, [pc, #540]	; (8003a80 <menu+0x2708>)
 8003862:	f005 fd9d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003866:	4603      	mov	r3, r0
 8003868:	2b01      	cmp	r3, #1
 800386a:	d115      	bne.n	8003898 <menu+0x2520>
 800386c:	4b85      	ldr	r3, [pc, #532]	; (8003a84 <menu+0x270c>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	f083 0301 	eor.w	r3, r3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00e      	beq.n	8003898 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800387a:	4b7c      	ldr	r3, [pc, #496]	; (8003a6c <menu+0x26f4>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	3301      	adds	r3, #1
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4b7a      	ldr	r3, [pc, #488]	; (8003a6c <menu+0x26f4>)
 8003884:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003886:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <menu+0x26f4>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d902      	bls.n	8003894 <menu+0x251c>
				platformSilindirTipi = 0;
 800388e:	4b77      	ldr	r3, [pc, #476]	; (8003a6c <menu+0x26f4>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003894:	f001 f942 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003898:	2104      	movs	r1, #4
 800389a:	4879      	ldr	r0, [pc, #484]	; (8003a80 <menu+0x2708>)
 800389c:	f005 fd80 	bl	80093a0 <HAL_GPIO_ReadPin>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d115      	bne.n	80038d2 <menu+0x255a>
 80038a6:	4b77      	ldr	r3, [pc, #476]	; (8003a84 <menu+0x270c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	f083 0301 	eor.w	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00e      	beq.n	80038d2 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80038b4:	4b6d      	ldr	r3, [pc, #436]	; (8003a6c <menu+0x26f4>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	4b6b      	ldr	r3, [pc, #428]	; (8003a6c <menu+0x26f4>)
 80038be:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <menu+0x26f4>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <menu+0x2556>
		   		platformSilindirTipi = 1;
 80038c8:	4b68      	ldr	r3, [pc, #416]	; (8003a6c <menu+0x26f4>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038ce:	f001 f925 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d2:	2108      	movs	r1, #8
 80038d4:	486a      	ldr	r0, [pc, #424]	; (8003a80 <menu+0x2708>)
 80038d6:	f005 fd63 	bl	80093a0 <HAL_GPIO_ReadPin>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d118      	bne.n	8003912 <menu+0x259a>
 80038e0:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <menu+0x270c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f083 0301 	eor.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d011      	beq.n	8003912 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80038ee:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <menu+0x26f4>)
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	4b65      	ldr	r3, [pc, #404]	; (8003a88 <menu+0x2710>)
 80038f4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80038f6:	4b5d      	ldr	r3, [pc, #372]	; (8003a6c <menu+0x26f4>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d106      	bne.n	800390c <menu+0x2594>
				altLimit = 1;
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <menu+0x2714>)
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003904:	4b61      	ldr	r3, [pc, #388]	; (8003a8c <menu+0x2714>)
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <menu+0x2710>)
 800390a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800390c:	4b60      	ldr	r3, [pc, #384]	; (8003a90 <menu+0x2718>)
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003912:	4b60      	ldr	r3, [pc, #384]	; (8003a94 <menu+0x271c>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b16      	cmp	r3, #22
 8003918:	f040 8081 	bne.w	8003a1e <menu+0x26a6>
		if(dilSecim == 0) {
 800391c:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <menu+0x26ec>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003924:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <menu+0x2720>)
 8003926:	2101      	movs	r1, #1
 8003928:	2001      	movs	r0, #1
 800392a:	f004 fa13 	bl	8007d54 <lcd_print>
 800392e:	e008      	b.n	8003942 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003930:	4b4c      	ldr	r3, [pc, #304]	; (8003a64 <menu+0x26ec>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d104      	bne.n	8003942 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <menu+0x2724>)
 800393a:	2101      	movs	r1, #1
 800393c:	2001      	movs	r0, #1
 800393e:	f004 fa09 	bl	8007d54 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003942:	4b48      	ldr	r3, [pc, #288]	; (8003a64 <menu+0x26ec>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800394a:	4a55      	ldr	r2, [pc, #340]	; (8003aa0 <menu+0x2728>)
 800394c:	2101      	movs	r1, #1
 800394e:	2002      	movs	r0, #2
 8003950:	f004 fa00 	bl	8007d54 <lcd_print>
 8003954:	e008      	b.n	8003968 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003956:	4b43      	ldr	r3, [pc, #268]	; (8003a64 <menu+0x26ec>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d104      	bne.n	8003968 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800395e:	4a51      	ldr	r2, [pc, #324]	; (8003aa4 <menu+0x272c>)
 8003960:	2101      	movs	r1, #1
 8003962:	2002      	movs	r0, #2
 8003964:	f004 f9f6 	bl	8007d54 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003968:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <menu+0x2730>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	220a      	movs	r2, #10
 800396e:	494f      	ldr	r1, [pc, #316]	; (8003aac <menu+0x2734>)
 8003970:	4618      	mov	r0, r3
 8003972:	f008 fd41 	bl	800c3f8 <itoa>
		lcd_print(2,16,snum);
 8003976:	4a4d      	ldr	r2, [pc, #308]	; (8003aac <menu+0x2734>)
 8003978:	2110      	movs	r1, #16
 800397a:	2002      	movs	r0, #2
 800397c:	f004 f9ea 	bl	8007d54 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003980:	2102      	movs	r1, #2
 8003982:	483f      	ldr	r0, [pc, #252]	; (8003a80 <menu+0x2708>)
 8003984:	f005 fd0c 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003988:	4603      	mov	r3, r0
 800398a:	2b01      	cmp	r3, #1
 800398c:	d115      	bne.n	80039ba <menu+0x2642>
 800398e:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <menu+0x270c>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	f083 0301 	eor.w	r3, r3, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 800399c:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <menu+0x2730>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <menu+0x2730>)
 80039a6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80039a8:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <menu+0x2730>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d902      	bls.n	80039b6 <menu+0x263e>
				yukariValfTmr = 0;
 80039b0:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <menu+0x2730>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039b6:	f001 f8b1 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ba:	2104      	movs	r1, #4
 80039bc:	4830      	ldr	r0, [pc, #192]	; (8003a80 <menu+0x2708>)
 80039be:	f005 fcef 	bl	80093a0 <HAL_GPIO_ReadPin>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d115      	bne.n	80039f4 <menu+0x267c>
 80039c8:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <menu+0x270c>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	f083 0301 	eor.w	r3, r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80039d6:	4b34      	ldr	r3, [pc, #208]	; (8003aa8 <menu+0x2730>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	3b01      	subs	r3, #1
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <menu+0x2730>)
 80039e0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <menu+0x2730>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <menu+0x2678>
		   		yukariValfTmr = 5;
 80039ea:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <menu+0x2730>)
 80039ec:	2205      	movs	r2, #5
 80039ee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039f0:	f001 f894 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f4:	2108      	movs	r1, #8
 80039f6:	4822      	ldr	r0, [pc, #136]	; (8003a80 <menu+0x2708>)
 80039f8:	f005 fcd2 	bl	80093a0 <HAL_GPIO_ReadPin>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10d      	bne.n	8003a1e <menu+0x26a6>
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <menu+0x270c>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	f083 0301 	eor.w	r3, r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d006      	beq.n	8003a1e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <menu+0x2730>)
 8003a12:	781a      	ldrb	r2, [r3, #0]
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <menu+0x2710>)
 8003a16:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <menu+0x2718>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <menu+0x271c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b17      	cmp	r3, #23
 8003a24:	f040 80ac 	bne.w	8003b80 <menu+0x2808>
		if(dilSecim == 0) {
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <menu+0x26ec>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a30:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <menu+0x2738>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	2001      	movs	r0, #1
 8003a36:	f004 f98d 	bl	8007d54 <lcd_print>
 8003a3a:	e008      	b.n	8003a4e <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <menu+0x26ec>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d104      	bne.n	8003a4e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003a44:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <menu+0x273c>)
 8003a46:	2101      	movs	r1, #1
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f004 f983 	bl	8007d54 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <menu+0x26ec>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d130      	bne.n	8003ab8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a56:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <menu+0x2728>)
 8003a58:	2101      	movs	r1, #1
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f004 f97a 	bl	8007d54 <lcd_print>
 8003a60:	e033      	b.n	8003aca <menu+0x2752>
 8003a62:	bf00      	nop
 8003a64:	2000021d 	.word	0x2000021d
 8003a68:	0800d8e4 	.word	0x0800d8e4
 8003a6c:	2000020f 	.word	0x2000020f
 8003a70:	0800d888 	.word	0x0800d888
 8003a74:	0800d89c 	.word	0x0800d89c
 8003a78:	0800d8ac 	.word	0x0800d8ac
 8003a7c:	0800d8c0 	.word	0x0800d8c0
 8003a80:	40010800 	.word	0x40010800
 8003a84:	2000022b 	.word	0x2000022b
 8003a88:	20000128 	.word	0x20000128
 8003a8c:	20000202 	.word	0x20000202
 8003a90:	20000228 	.word	0x20000228
 8003a94:	200001fc 	.word	0x200001fc
 8003a98:	0800d8f4 	.word	0x0800d8f4
 8003a9c:	0800d908 	.word	0x0800d908
 8003aa0:	0800d5a8 	.word	0x0800d5a8
 8003aa4:	0800d91c 	.word	0x0800d91c
 8003aa8:	20000210 	.word	0x20000210
 8003aac:	20000198 	.word	0x20000198
 8003ab0:	0800d92c 	.word	0x0800d92c
 8003ab4:	0800d940 	.word	0x0800d940
			} else if(dilSecim == 1) {
 8003ab8:	4b98      	ldr	r3, [pc, #608]	; (8003d1c <menu+0x29a4>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d104      	bne.n	8003aca <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003ac0:	4a97      	ldr	r2, [pc, #604]	; (8003d20 <menu+0x29a8>)
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	f004 f945 	bl	8007d54 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003aca:	4b96      	ldr	r3, [pc, #600]	; (8003d24 <menu+0x29ac>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	220a      	movs	r2, #10
 8003ad0:	4995      	ldr	r1, [pc, #596]	; (8003d28 <menu+0x29b0>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f008 fc90 	bl	800c3f8 <itoa>
		lcd_print(2,16,snum);
 8003ad8:	4a93      	ldr	r2, [pc, #588]	; (8003d28 <menu+0x29b0>)
 8003ada:	2110      	movs	r1, #16
 8003adc:	2002      	movs	r0, #2
 8003ade:	f004 f939 	bl	8007d54 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4891      	ldr	r0, [pc, #580]	; (8003d2c <menu+0x29b4>)
 8003ae6:	f005 fc5b 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d115      	bne.n	8003b1c <menu+0x27a4>
 8003af0:	4b8f      	ldr	r3, [pc, #572]	; (8003d30 <menu+0x29b8>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	f083 0301 	eor.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003afe:	4b89      	ldr	r3, [pc, #548]	; (8003d24 <menu+0x29ac>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b87      	ldr	r3, [pc, #540]	; (8003d24 <menu+0x29ac>)
 8003b08:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003b0a:	4b86      	ldr	r3, [pc, #536]	; (8003d24 <menu+0x29ac>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d902      	bls.n	8003b18 <menu+0x27a0>
				asagiValfTmr = 0;
 8003b12:	4b84      	ldr	r3, [pc, #528]	; (8003d24 <menu+0x29ac>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b18:	f001 f800 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1c:	2104      	movs	r1, #4
 8003b1e:	4883      	ldr	r0, [pc, #524]	; (8003d2c <menu+0x29b4>)
 8003b20:	f005 fc3e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d115      	bne.n	8003b56 <menu+0x27de>
 8003b2a:	4b81      	ldr	r3, [pc, #516]	; (8003d30 <menu+0x29b8>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	f083 0301 	eor.w	r3, r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b38:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <menu+0x29ac>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <menu+0x29ac>)
 8003b42:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003b44:	4b77      	ldr	r3, [pc, #476]	; (8003d24 <menu+0x29ac>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d902      	bls.n	8003b52 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003b4c:	4b75      	ldr	r3, [pc, #468]	; (8003d24 <menu+0x29ac>)
 8003b4e:	2205      	movs	r2, #5
 8003b50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b52:	f000 ffe3 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b56:	2108      	movs	r1, #8
 8003b58:	4874      	ldr	r0, [pc, #464]	; (8003d2c <menu+0x29b4>)
 8003b5a:	f005 fc21 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10d      	bne.n	8003b80 <menu+0x2808>
 8003b64:	4b72      	ldr	r3, [pc, #456]	; (8003d30 <menu+0x29b8>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	f083 0301 	eor.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <menu+0x29ac>)
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	4b6f      	ldr	r3, [pc, #444]	; (8003d34 <menu+0x29bc>)
 8003b78:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003b7a:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <menu+0x29c0>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003b80:	4b6e      	ldr	r3, [pc, #440]	; (8003d3c <menu+0x29c4>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b18      	cmp	r3, #24
 8003b86:	f040 809d 	bne.w	8003cc4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003b8a:	4b6d      	ldr	r3, [pc, #436]	; (8003d40 <menu+0x29c8>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d113      	bne.n	8003bba <menu+0x2842>
			if(dilSecim == 0) {
 8003b92:	4b62      	ldr	r3, [pc, #392]	; (8003d1c <menu+0x29a4>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003b9a:	4a6a      	ldr	r2, [pc, #424]	; (8003d44 <menu+0x29cc>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f004 f8d8 	bl	8007d54 <lcd_print>
 8003ba4:	e020      	b.n	8003be8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <menu+0x29a4>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d11c      	bne.n	8003be8 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003bae:	4a66      	ldr	r2, [pc, #408]	; (8003d48 <menu+0x29d0>)
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f004 f8ce 	bl	8007d54 <lcd_print>
 8003bb8:	e016      	b.n	8003be8 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003bba:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <menu+0x29c8>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d112      	bne.n	8003be8 <menu+0x2870>
			if(dilSecim == 0) {
 8003bc2:	4b56      	ldr	r3, [pc, #344]	; (8003d1c <menu+0x29a4>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003bca:	4a60      	ldr	r2, [pc, #384]	; (8003d4c <menu+0x29d4>)
 8003bcc:	2101      	movs	r1, #1
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f004 f8c0 	bl	8007d54 <lcd_print>
 8003bd4:	e008      	b.n	8003be8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003bd6:	4b51      	ldr	r3, [pc, #324]	; (8003d1c <menu+0x29a4>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d104      	bne.n	8003be8 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003bde:	4a5c      	ldr	r2, [pc, #368]	; (8003d50 <menu+0x29d8>)
 8003be0:	2101      	movs	r1, #1
 8003be2:	2001      	movs	r0, #1
 8003be4:	f004 f8b6 	bl	8007d54 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003be8:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <menu+0x29a4>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <menu+0x29dc>)
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	2002      	movs	r0, #2
 8003bf6:	f004 f8ad 	bl	8007d54 <lcd_print>
 8003bfa:	e008      	b.n	8003c0e <menu+0x2896>
			} else if(dilSecim == 1) {
 8003bfc:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <menu+0x29a4>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d104      	bne.n	8003c0e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003c04:	4a46      	ldr	r2, [pc, #280]	; (8003d20 <menu+0x29a8>)
 8003c06:	2101      	movs	r1, #1
 8003c08:	2002      	movs	r0, #2
 8003c0a:	f004 f8a3 	bl	8007d54 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003c0e:	4b52      	ldr	r3, [pc, #328]	; (8003d58 <menu+0x29e0>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	220a      	movs	r2, #10
 8003c14:	4944      	ldr	r1, [pc, #272]	; (8003d28 <menu+0x29b0>)
 8003c16:	4618      	mov	r0, r3
 8003c18:	f008 fbee 	bl	800c3f8 <itoa>
		lcd_print(2, 16, snum);
 8003c1c:	4a42      	ldr	r2, [pc, #264]	; (8003d28 <menu+0x29b0>)
 8003c1e:	2110      	movs	r1, #16
 8003c20:	2002      	movs	r0, #2
 8003c22:	f004 f897 	bl	8007d54 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c26:	2102      	movs	r1, #2
 8003c28:	4840      	ldr	r0, [pc, #256]	; (8003d2c <menu+0x29b4>)
 8003c2a:	f005 fbb9 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d115      	bne.n	8003c60 <menu+0x28e8>
 8003c34:	4b3e      	ldr	r3, [pc, #248]	; (8003d30 <menu+0x29b8>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	f083 0301 	eor.w	r3, r3, #1
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003c42:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <menu+0x29e0>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <menu+0x29e0>)
 8003c4c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003c4e:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <menu+0x29e0>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d902      	bls.n	8003c5c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003c56:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <menu+0x29e0>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c5c:	f000 ff5e 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c60:	2104      	movs	r1, #4
 8003c62:	4832      	ldr	r0, [pc, #200]	; (8003d2c <menu+0x29b4>)
 8003c64:	f005 fb9c 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d115      	bne.n	8003c9a <menu+0x2922>
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <menu+0x29b8>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	f083 0301 	eor.w	r3, r3, #1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003c7c:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <menu+0x29e0>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <menu+0x29e0>)
 8003c86:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003c88:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <menu+0x29e0>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b06      	cmp	r3, #6
 8003c8e:	d902      	bls.n	8003c96 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003c90:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <menu+0x29e0>)
 8003c92:	2205      	movs	r2, #5
 8003c94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c96:	f000 ff41 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c9a:	2108      	movs	r1, #8
 8003c9c:	4823      	ldr	r0, [pc, #140]	; (8003d2c <menu+0x29b4>)
 8003c9e:	f005 fb7f 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d10d      	bne.n	8003cc4 <menu+0x294c>
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <menu+0x29b8>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	f083 0301 	eor.w	r3, r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003cb6:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <menu+0x29e0>)
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <menu+0x29bc>)
 8003cbc:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <menu+0x29c0>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <menu+0x29c4>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b19      	cmp	r3, #25
 8003cca:	f040 80c4 	bne.w	8003e56 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <menu+0x29c8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d113      	bne.n	8003cfe <menu+0x2986>
			if(dilSecim == 0) {
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <menu+0x29a4>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003cde:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <menu+0x29e4>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f004 f836 	bl	8007d54 <lcd_print>
 8003ce8:	e047      	b.n	8003d7a <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <menu+0x29a4>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d143      	bne.n	8003d7a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003cf2:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <menu+0x29e8>)
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f004 f82c 	bl	8007d54 <lcd_print>
 8003cfc:	e03d      	b.n	8003d7a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <menu+0x29c8>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d139      	bne.n	8003d7a <menu+0x2a02>
			if(dilSecim == 0) {
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <menu+0x29a4>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d12c      	bne.n	8003d68 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <menu+0x29ec>)
 8003d10:	2101      	movs	r1, #1
 8003d12:	2001      	movs	r0, #1
 8003d14:	f004 f81e 	bl	8007d54 <lcd_print>
 8003d18:	e02f      	b.n	8003d7a <menu+0x2a02>
 8003d1a:	bf00      	nop
 8003d1c:	2000021d 	.word	0x2000021d
 8003d20:	0800d91c 	.word	0x0800d91c
 8003d24:	20000211 	.word	0x20000211
 8003d28:	20000198 	.word	0x20000198
 8003d2c:	40010800 	.word	0x40010800
 8003d30:	2000022b 	.word	0x2000022b
 8003d34:	20000128 	.word	0x20000128
 8003d38:	20000228 	.word	0x20000228
 8003d3c:	200001fc 	.word	0x200001fc
 8003d40:	2000020b 	.word	0x2000020b
 8003d44:	0800d954 	.word	0x0800d954
 8003d48:	0800d968 	.word	0x0800d968
 8003d4c:	0800d97c 	.word	0x0800d97c
 8003d50:	0800d990 	.word	0x0800d990
 8003d54:	0800d5a8 	.word	0x0800d5a8
 8003d58:	20000212 	.word	0x20000212
 8003d5c:	0800d9a4 	.word	0x0800d9a4
 8003d60:	0800d9b8 	.word	0x0800d9b8
 8003d64:	0800d9cc 	.word	0x0800d9cc
			} else if(dilSecim == 1) {
 8003d68:	4b73      	ldr	r3, [pc, #460]	; (8003f38 <menu+0x2bc0>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d104      	bne.n	8003d7a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003d70:	4a72      	ldr	r2, [pc, #456]	; (8003f3c <menu+0x2bc4>)
 8003d72:	2101      	movs	r1, #1
 8003d74:	2001      	movs	r0, #1
 8003d76:	f003 ffed 	bl	8007d54 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003d7a:	4b6f      	ldr	r3, [pc, #444]	; (8003f38 <menu+0x2bc0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d105      	bne.n	8003d8e <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d82:	4a6f      	ldr	r2, [pc, #444]	; (8003f40 <menu+0x2bc8>)
 8003d84:	2101      	movs	r1, #1
 8003d86:	2002      	movs	r0, #2
 8003d88:	f003 ffe4 	bl	8007d54 <lcd_print>
 8003d8c:	e008      	b.n	8003da0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <menu+0x2bc0>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d104      	bne.n	8003da0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003d96:	4a6b      	ldr	r2, [pc, #428]	; (8003f44 <menu+0x2bcc>)
 8003d98:	2101      	movs	r1, #1
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	f003 ffda 	bl	8007d54 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003da0:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <menu+0x2bd0>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	220a      	movs	r2, #10
 8003da6:	4969      	ldr	r1, [pc, #420]	; (8003f4c <menu+0x2bd4>)
 8003da8:	4618      	mov	r0, r3
 8003daa:	f008 fb25 	bl	800c3f8 <itoa>
		lcd_print(2,16,snum);
 8003dae:	4a67      	ldr	r2, [pc, #412]	; (8003f4c <menu+0x2bd4>)
 8003db0:	2110      	movs	r1, #16
 8003db2:	2002      	movs	r0, #2
 8003db4:	f003 ffce 	bl	8007d54 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003db8:	2102      	movs	r1, #2
 8003dba:	4865      	ldr	r0, [pc, #404]	; (8003f50 <menu+0x2bd8>)
 8003dbc:	f005 faf0 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d115      	bne.n	8003df2 <menu+0x2a7a>
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <menu+0x2bdc>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003dd4:	4b5c      	ldr	r3, [pc, #368]	; (8003f48 <menu+0x2bd0>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <menu+0x2bd0>)
 8003dde:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003de0:	4b59      	ldr	r3, [pc, #356]	; (8003f48 <menu+0x2bd0>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d902      	bls.n	8003dee <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003de8:	4b57      	ldr	r3, [pc, #348]	; (8003f48 <menu+0x2bd0>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003dee:	f000 fe95 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df2:	2104      	movs	r1, #4
 8003df4:	4856      	ldr	r0, [pc, #344]	; (8003f50 <menu+0x2bd8>)
 8003df6:	f005 fad3 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d115      	bne.n	8003e2c <menu+0x2ab4>
 8003e00:	4b54      	ldr	r3, [pc, #336]	; (8003f54 <menu+0x2bdc>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f083 0301 	eor.w	r3, r3, #1
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00e      	beq.n	8003e2c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003e0e:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <menu+0x2bd0>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	4b4c      	ldr	r3, [pc, #304]	; (8003f48 <menu+0x2bd0>)
 8003e18:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003e1a:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <menu+0x2bd0>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d902      	bls.n	8003e28 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003e22:	4b49      	ldr	r3, [pc, #292]	; (8003f48 <menu+0x2bd0>)
 8003e24:	2205      	movs	r2, #5
 8003e26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e28:	f000 fe78 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2c:	2108      	movs	r1, #8
 8003e2e:	4848      	ldr	r0, [pc, #288]	; (8003f50 <menu+0x2bd8>)
 8003e30:	f005 fab6 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10d      	bne.n	8003e56 <menu+0x2ade>
 8003e3a:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <menu+0x2bdc>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	f083 0301 	eor.w	r3, r3, #1
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d006      	beq.n	8003e56 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003e48:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <menu+0x2bd0>)
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	4b42      	ldr	r3, [pc, #264]	; (8003f58 <menu+0x2be0>)
 8003e4e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003e50:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <menu+0x2be4>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003e56:	4b42      	ldr	r3, [pc, #264]	; (8003f60 <menu+0x2be8>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b1a      	cmp	r3, #26
 8003e5c:	f040 80ec 	bne.w	8004038 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e60:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <menu+0x2bc0>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003e68:	4a3e      	ldr	r2, [pc, #248]	; (8003f64 <menu+0x2bec>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f003 ff71 	bl	8007d54 <lcd_print>
 8003e72:	e008      	b.n	8003e86 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <menu+0x2bc0>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d104      	bne.n	8003e86 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003e7c:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <menu+0x2bf0>)
 8003e7e:	2101      	movs	r1, #1
 8003e80:	2001      	movs	r0, #1
 8003e82:	f003 ff67 	bl	8007d54 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <menu+0x2bf4>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b63      	cmp	r3, #99	; 0x63
 8003e8c:	d91e      	bls.n	8003ecc <menu+0x2b54>
			if(dilSecim == 0) {
 8003e8e:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <menu+0x2bc0>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e96:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <menu+0x2bc8>)
 8003e98:	2101      	movs	r1, #1
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	f003 ff5a 	bl	8007d54 <lcd_print>
			}
			if(dilSecim == 1) {
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <menu+0x2bc0>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d104      	bne.n	8003eb2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003ea8:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <menu+0x2bcc>)
 8003eaa:	2101      	movs	r1, #1
 8003eac:	2002      	movs	r0, #2
 8003eae:	f003 ff51 	bl	8007d54 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eb2:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <menu+0x2bf4>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	220a      	movs	r2, #10
 8003eb8:	4924      	ldr	r1, [pc, #144]	; (8003f4c <menu+0x2bd4>)
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f008 fa9c 	bl	800c3f8 <itoa>
			lcd_print(2,14,snum);
 8003ec0:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <menu+0x2bd4>)
 8003ec2:	210e      	movs	r1, #14
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f003 ff45 	bl	8007d54 <lcd_print>
 8003eca:	e066      	b.n	8003f9a <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <menu+0x2bf4>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d923      	bls.n	8003f1c <menu+0x2ba4>
 8003ed4:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <menu+0x2bf4>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b63      	cmp	r3, #99	; 0x63
 8003eda:	d81f      	bhi.n	8003f1c <menu+0x2ba4>
			if(dilSecim == 0) {
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <menu+0x2bc0>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ee4:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <menu+0x2bc8>)
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	2002      	movs	r0, #2
 8003eea:	f003 ff33 	bl	8007d54 <lcd_print>
 8003eee:	e008      	b.n	8003f02 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <menu+0x2bc0>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d104      	bne.n	8003f02 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003ef8:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <menu+0x2bcc>)
 8003efa:	2101      	movs	r1, #1
 8003efc:	2002      	movs	r0, #2
 8003efe:	f003 ff29 	bl	8007d54 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f02:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <menu+0x2bf4>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	220a      	movs	r2, #10
 8003f08:	4910      	ldr	r1, [pc, #64]	; (8003f4c <menu+0x2bd4>)
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f008 fa74 	bl	800c3f8 <itoa>
			lcd_print(2, 15, snum);
 8003f10:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <menu+0x2bd4>)
 8003f12:	210f      	movs	r1, #15
 8003f14:	2002      	movs	r0, #2
 8003f16:	f003 ff1d 	bl	8007d54 <lcd_print>
 8003f1a:	e03e      	b.n	8003f9a <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003f1c:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <menu+0x2bf4>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d83a      	bhi.n	8003f9a <menu+0x2c22>
			if(dilSecim == 0) {
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <menu+0x2bc0>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d121      	bne.n	8003f70 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <menu+0x2bc8>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	2002      	movs	r0, #2
 8003f32:	f003 ff0f 	bl	8007d54 <lcd_print>
 8003f36:	e024      	b.n	8003f82 <menu+0x2c0a>
 8003f38:	2000021d 	.word	0x2000021d
 8003f3c:	0800d9e0 	.word	0x0800d9e0
 8003f40:	0800d5a8 	.word	0x0800d5a8
 8003f44:	0800d91c 	.word	0x0800d91c
 8003f48:	20000213 	.word	0x20000213
 8003f4c:	20000198 	.word	0x20000198
 8003f50:	40010800 	.word	0x40010800
 8003f54:	2000022b 	.word	0x2000022b
 8003f58:	20000128 	.word	0x20000128
 8003f5c:	20000228 	.word	0x20000228
 8003f60:	200001fc 	.word	0x200001fc
 8003f64:	0800d9f4 	.word	0x0800d9f4
 8003f68:	0800da08 	.word	0x0800da08
 8003f6c:	20000214 	.word	0x20000214
			} else if(dilSecim == 1) {
 8003f70:	4b8f      	ldr	r3, [pc, #572]	; (80041b0 <menu+0x2e38>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d104      	bne.n	8003f82 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003f78:	4a8e      	ldr	r2, [pc, #568]	; (80041b4 <menu+0x2e3c>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	2002      	movs	r0, #2
 8003f7e:	f003 fee9 	bl	8007d54 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f82:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <menu+0x2e40>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	220a      	movs	r2, #10
 8003f88:	498c      	ldr	r1, [pc, #560]	; (80041bc <menu+0x2e44>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f008 fa34 	bl	800c3f8 <itoa>
			lcd_print(2, 16, snum);
 8003f90:	4a8a      	ldr	r2, [pc, #552]	; (80041bc <menu+0x2e44>)
 8003f92:	2110      	movs	r1, #16
 8003f94:	2002      	movs	r0, #2
 8003f96:	f003 fedd 	bl	8007d54 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4888      	ldr	r0, [pc, #544]	; (80041c0 <menu+0x2e48>)
 8003f9e:	f005 f9ff 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d115      	bne.n	8003fd4 <menu+0x2c5c>
 8003fa8:	4b86      	ldr	r3, [pc, #536]	; (80041c4 <menu+0x2e4c>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f083 0301 	eor.w	r3, r3, #1
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003fb6:	4b80      	ldr	r3, [pc, #512]	; (80041b8 <menu+0x2e40>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	4b7e      	ldr	r3, [pc, #504]	; (80041b8 <menu+0x2e40>)
 8003fc0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003fc2:	4b7d      	ldr	r3, [pc, #500]	; (80041b8 <menu+0x2e40>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2bb4      	cmp	r3, #180	; 0xb4
 8003fc8:	d902      	bls.n	8003fd0 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003fca:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <menu+0x2e40>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fd0:	f000 fda4 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fd4:	2104      	movs	r1, #4
 8003fd6:	487a      	ldr	r0, [pc, #488]	; (80041c0 <menu+0x2e48>)
 8003fd8:	f005 f9e2 	bl	80093a0 <HAL_GPIO_ReadPin>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d115      	bne.n	800400e <menu+0x2c96>
 8003fe2:	4b78      	ldr	r3, [pc, #480]	; (80041c4 <menu+0x2e4c>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	f083 0301 	eor.w	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003ff0:	4b71      	ldr	r3, [pc, #452]	; (80041b8 <menu+0x2e40>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	; (80041b8 <menu+0x2e40>)
 8003ffa:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003ffc:	4b6e      	ldr	r3, [pc, #440]	; (80041b8 <menu+0x2e40>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2bb5      	cmp	r3, #181	; 0xb5
 8004002:	d902      	bls.n	800400a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004004:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <menu+0x2e40>)
 8004006:	22b4      	movs	r2, #180	; 0xb4
 8004008:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800400a:	f000 fd87 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800400e:	2108      	movs	r1, #8
 8004010:	486b      	ldr	r0, [pc, #428]	; (80041c0 <menu+0x2e48>)
 8004012:	f005 f9c5 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004016:	4603      	mov	r3, r0
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10d      	bne.n	8004038 <menu+0x2cc0>
 800401c:	4b69      	ldr	r3, [pc, #420]	; (80041c4 <menu+0x2e4c>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	f083 0301 	eor.w	r3, r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <menu+0x2e40>)
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	4b66      	ldr	r3, [pc, #408]	; (80041c8 <menu+0x2e50>)
 8004030:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004032:	4b66      	ldr	r3, [pc, #408]	; (80041cc <menu+0x2e54>)
 8004034:	2201      	movs	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004038:	4b65      	ldr	r3, [pc, #404]	; (80041d0 <menu+0x2e58>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b1b      	cmp	r3, #27
 800403e:	f040 8083 	bne.w	8004148 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8004042:	4a64      	ldr	r2, [pc, #400]	; (80041d4 <menu+0x2e5c>)
 8004044:	2101      	movs	r1, #1
 8004046:	2001      	movs	r0, #1
 8004048:	f003 fe84 	bl	8007d54 <lcd_print>

		if(buzzer == 0) {
 800404c:	4b62      	ldr	r3, [pc, #392]	; (80041d8 <menu+0x2e60>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d113      	bne.n	800407c <menu+0x2d04>
			if(dilSecim == 0) {
 8004054:	4b56      	ldr	r3, [pc, #344]	; (80041b0 <menu+0x2e38>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 800405c:	4a5f      	ldr	r2, [pc, #380]	; (80041dc <menu+0x2e64>)
 800405e:	2101      	movs	r1, #1
 8004060:	2002      	movs	r0, #2
 8004062:	f003 fe77 	bl	8007d54 <lcd_print>
 8004066:	e020      	b.n	80040aa <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004068:	4b51      	ldr	r3, [pc, #324]	; (80041b0 <menu+0x2e38>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d11c      	bne.n	80040aa <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004070:	4a5b      	ldr	r2, [pc, #364]	; (80041e0 <menu+0x2e68>)
 8004072:	2101      	movs	r1, #1
 8004074:	2002      	movs	r0, #2
 8004076:	f003 fe6d 	bl	8007d54 <lcd_print>
 800407a:	e016      	b.n	80040aa <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 800407c:	4b56      	ldr	r3, [pc, #344]	; (80041d8 <menu+0x2e60>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d112      	bne.n	80040aa <menu+0x2d32>
			if(dilSecim == 0) {
 8004084:	4b4a      	ldr	r3, [pc, #296]	; (80041b0 <menu+0x2e38>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 800408c:	4a55      	ldr	r2, [pc, #340]	; (80041e4 <menu+0x2e6c>)
 800408e:	2101      	movs	r1, #1
 8004090:	2002      	movs	r0, #2
 8004092:	f003 fe5f 	bl	8007d54 <lcd_print>
 8004096:	e008      	b.n	80040aa <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004098:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <menu+0x2e38>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d104      	bne.n	80040aa <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80040a0:	4a51      	ldr	r2, [pc, #324]	; (80041e8 <menu+0x2e70>)
 80040a2:	2101      	movs	r1, #1
 80040a4:	2002      	movs	r0, #2
 80040a6:	f003 fe55 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040aa:	2102      	movs	r1, #2
 80040ac:	4844      	ldr	r0, [pc, #272]	; (80041c0 <menu+0x2e48>)
 80040ae:	f005 f977 	bl	80093a0 <HAL_GPIO_ReadPin>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d115      	bne.n	80040e4 <menu+0x2d6c>
 80040b8:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <menu+0x2e4c>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00e      	beq.n	80040e4 <menu+0x2d6c>
			buzzer = buzzer + 1;
 80040c6:	4b44      	ldr	r3, [pc, #272]	; (80041d8 <menu+0x2e60>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <menu+0x2e60>)
 80040d0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80040d2:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <menu+0x2e60>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d902      	bls.n	80040e0 <menu+0x2d68>
				buzzer = 0;
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <menu+0x2e60>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040e0:	f000 fd1c 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e4:	2104      	movs	r1, #4
 80040e6:	4836      	ldr	r0, [pc, #216]	; (80041c0 <menu+0x2e48>)
 80040e8:	f005 f95a 	bl	80093a0 <HAL_GPIO_ReadPin>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d115      	bne.n	800411e <menu+0x2da6>
 80040f2:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <menu+0x2e4c>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	f083 0301 	eor.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00e      	beq.n	800411e <menu+0x2da6>
			buzzer = buzzer - 1;
 8004100:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <menu+0x2e60>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	3b01      	subs	r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <menu+0x2e60>)
 800410a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800410c:	4b32      	ldr	r3, [pc, #200]	; (80041d8 <menu+0x2e60>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <menu+0x2da2>
		   		buzzer = 1;
 8004114:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <menu+0x2e60>)
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800411a:	f000 fcff 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800411e:	2108      	movs	r1, #8
 8004120:	4827      	ldr	r0, [pc, #156]	; (80041c0 <menu+0x2e48>)
 8004122:	f005 f93d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d10d      	bne.n	8004148 <menu+0x2dd0>
 800412c:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <menu+0x2e4c>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	f083 0301 	eor.w	r3, r3, #1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <menu+0x2e60>)
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <menu+0x2e50>)
 8004140:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <menu+0x2e54>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <menu+0x2e58>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b1c      	cmp	r3, #28
 800414e:	f040 80ab 	bne.w	80042a8 <menu+0x2f30>
		calismaSayModu = 0;
 8004152:	4b26      	ldr	r3, [pc, #152]	; (80041ec <menu+0x2e74>)
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004158:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <menu+0x2e78>)
 800415a:	2101      	movs	r1, #1
 800415c:	2001      	movs	r0, #1
 800415e:	f003 fdf9 	bl	8007d54 <lcd_print>

		if(demoMode == 0) {
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <menu+0x2e7c>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d113      	bne.n	8004192 <menu+0x2e1a>
			if(dilSecim == 0) {
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <menu+0x2e38>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004172:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <menu+0x2e64>)
 8004174:	2101      	movs	r1, #1
 8004176:	2002      	movs	r0, #2
 8004178:	f003 fdec 	bl	8007d54 <lcd_print>
 800417c:	e045      	b.n	800420a <menu+0x2e92>
			} else if(dilSecim == 1) {
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <menu+0x2e38>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d141      	bne.n	800420a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004186:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <menu+0x2e68>)
 8004188:	2101      	movs	r1, #1
 800418a:	2002      	movs	r0, #2
 800418c:	f003 fde2 	bl	8007d54 <lcd_print>
 8004190:	e03b      	b.n	800420a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8004192:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <menu+0x2e7c>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d137      	bne.n	800420a <menu+0x2e92>
			if(dilSecim == 0){
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <menu+0x2e38>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d12a      	bne.n	80041f8 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80041a2:	4a10      	ldr	r2, [pc, #64]	; (80041e4 <menu+0x2e6c>)
 80041a4:	2101      	movs	r1, #1
 80041a6:	2002      	movs	r0, #2
 80041a8:	f003 fdd4 	bl	8007d54 <lcd_print>
 80041ac:	e02d      	b.n	800420a <menu+0x2e92>
 80041ae:	bf00      	nop
 80041b0:	2000021d 	.word	0x2000021d
 80041b4:	0800d91c 	.word	0x0800d91c
 80041b8:	20000214 	.word	0x20000214
 80041bc:	20000198 	.word	0x20000198
 80041c0:	40010800 	.word	0x40010800
 80041c4:	2000022b 	.word	0x2000022b
 80041c8:	20000128 	.word	0x20000128
 80041cc:	20000228 	.word	0x20000228
 80041d0:	200001fc 	.word	0x200001fc
 80041d4:	0800da1c 	.word	0x0800da1c
 80041d8:	20000218 	.word	0x20000218
 80041dc:	0800d344 	.word	0x0800d344
 80041e0:	0800d358 	.word	0x0800d358
 80041e4:	0800d3a4 	.word	0x0800d3a4
 80041e8:	0800d3b8 	.word	0x0800d3b8
 80041ec:	2000021c 	.word	0x2000021c
 80041f0:	0800da30 	.word	0x0800da30
 80041f4:	2000021a 	.word	0x2000021a
			} else if(dilSecim == 1) {
 80041f8:	4b71      	ldr	r3, [pc, #452]	; (80043c0 <menu+0x3048>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d104      	bne.n	800420a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004200:	4a70      	ldr	r2, [pc, #448]	; (80043c4 <menu+0x304c>)
 8004202:	2101      	movs	r1, #1
 8004204:	2002      	movs	r0, #2
 8004206:	f003 fda5 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800420a:	2102      	movs	r1, #2
 800420c:	486e      	ldr	r0, [pc, #440]	; (80043c8 <menu+0x3050>)
 800420e:	f005 f8c7 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004212:	4603      	mov	r3, r0
 8004214:	2b01      	cmp	r3, #1
 8004216:	d115      	bne.n	8004244 <menu+0x2ecc>
 8004218:	4b6c      	ldr	r3, [pc, #432]	; (80043cc <menu+0x3054>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	f083 0301 	eor.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00e      	beq.n	8004244 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004226:	4b6a      	ldr	r3, [pc, #424]	; (80043d0 <menu+0x3058>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4b68      	ldr	r3, [pc, #416]	; (80043d0 <menu+0x3058>)
 8004230:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004232:	4b67      	ldr	r3, [pc, #412]	; (80043d0 <menu+0x3058>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d902      	bls.n	8004240 <menu+0x2ec8>
				demoMode = 0;
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <menu+0x3058>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004240:	f000 fc6c 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004244:	2104      	movs	r1, #4
 8004246:	4860      	ldr	r0, [pc, #384]	; (80043c8 <menu+0x3050>)
 8004248:	f005 f8aa 	bl	80093a0 <HAL_GPIO_ReadPin>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d115      	bne.n	800427e <menu+0x2f06>
 8004252:	4b5e      	ldr	r3, [pc, #376]	; (80043cc <menu+0x3054>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f083 0301 	eor.w	r3, r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00e      	beq.n	800427e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004260:	4b5b      	ldr	r3, [pc, #364]	; (80043d0 <menu+0x3058>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	3b01      	subs	r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <menu+0x3058>)
 800426a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800426c:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <menu+0x3058>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <menu+0x2f02>
		   		demoMode = 1;
 8004274:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <menu+0x3058>)
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800427a:	f000 fc4f 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800427e:	2108      	movs	r1, #8
 8004280:	4851      	ldr	r0, [pc, #324]	; (80043c8 <menu+0x3050>)
 8004282:	f005 f88d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10d      	bne.n	80042a8 <menu+0x2f30>
 800428c:	4b4f      	ldr	r3, [pc, #316]	; (80043cc <menu+0x3054>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f083 0301 	eor.w	r3, r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <menu+0x2f30>
			eepromData[26] = demoMode;
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <menu+0x3058>)
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	4b4d      	ldr	r3, [pc, #308]	; (80043d4 <menu+0x305c>)
 80042a0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80042a2:	4b4d      	ldr	r3, [pc, #308]	; (80043d8 <menu+0x3060>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80042a8:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <menu+0x3064>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b1d      	cmp	r3, #29
 80042ae:	f040 8132 	bne.w	8004516 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80042b2:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <menu+0x3068>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d113      	bne.n	80042e2 <menu+0x2f6a>
 80042ba:	4b4a      	ldr	r3, [pc, #296]	; (80043e4 <menu+0x306c>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <menu+0x2f6a>
 80042c2:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <menu+0x3070>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <menu+0x2f6a>
 80042ca:	4b48      	ldr	r3, [pc, #288]	; (80043ec <menu+0x3074>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <menu+0x2f6a>
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <menu+0x3078>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80042da:	4b46      	ldr	r3, [pc, #280]	; (80043f4 <menu+0x307c>)
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
 80042e0:	e002      	b.n	80042e8 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80042e2:	4b44      	ldr	r3, [pc, #272]	; (80043f4 <menu+0x307c>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <menu+0x3080>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d154      	bne.n	800439a <menu+0x3022>
			if(dilSecim == 0) {
 80042f0:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <menu+0x3048>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042f8:	4a40      	ldr	r2, [pc, #256]	; (80043fc <menu+0x3084>)
 80042fa:	2101      	movs	r1, #1
 80042fc:	2001      	movs	r0, #1
 80042fe:	f003 fd29 	bl	8007d54 <lcd_print>
 8004302:	e008      	b.n	8004316 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <menu+0x3048>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d104      	bne.n	8004316 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800430c:	4a3c      	ldr	r2, [pc, #240]	; (8004400 <menu+0x3088>)
 800430e:	2101      	movs	r1, #1
 8004310:	2001      	movs	r0, #1
 8004312:	f003 fd1f 	bl	8007d54 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004316:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <menu+0x3078>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	220a      	movs	r2, #10
 800431c:	4939      	ldr	r1, [pc, #228]	; (8004404 <menu+0x308c>)
 800431e:	4618      	mov	r0, r3
 8004320:	f008 f86a 	bl	800c3f8 <itoa>
			lcd_print(2, 12, snum);
 8004324:	4a37      	ldr	r2, [pc, #220]	; (8004404 <menu+0x308c>)
 8004326:	210c      	movs	r1, #12
 8004328:	2002      	movs	r0, #2
 800432a:	f003 fd13 	bl	8007d54 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800432e:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <menu+0x3074>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	220a      	movs	r2, #10
 8004334:	4933      	ldr	r1, [pc, #204]	; (8004404 <menu+0x308c>)
 8004336:	4618      	mov	r0, r3
 8004338:	f008 f85e 	bl	800c3f8 <itoa>
			lcd_print(2, 13, snum);
 800433c:	4a31      	ldr	r2, [pc, #196]	; (8004404 <menu+0x308c>)
 800433e:	210d      	movs	r1, #13
 8004340:	2002      	movs	r0, #2
 8004342:	f003 fd07 	bl	8007d54 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004346:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <menu+0x3070>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	220a      	movs	r2, #10
 800434c:	492d      	ldr	r1, [pc, #180]	; (8004404 <menu+0x308c>)
 800434e:	4618      	mov	r0, r3
 8004350:	f008 f852 	bl	800c3f8 <itoa>
			lcd_print(2, 14, snum);
 8004354:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <menu+0x308c>)
 8004356:	210e      	movs	r1, #14
 8004358:	2002      	movs	r0, #2
 800435a:	f003 fcfb 	bl	8007d54 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800435e:	4b21      	ldr	r3, [pc, #132]	; (80043e4 <menu+0x306c>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	220a      	movs	r2, #10
 8004364:	4927      	ldr	r1, [pc, #156]	; (8004404 <menu+0x308c>)
 8004366:	4618      	mov	r0, r3
 8004368:	f008 f846 	bl	800c3f8 <itoa>
			lcd_print(2, 15, snum);
 800436c:	4a25      	ldr	r2, [pc, #148]	; (8004404 <menu+0x308c>)
 800436e:	210f      	movs	r1, #15
 8004370:	2002      	movs	r0, #2
 8004372:	f003 fcef 	bl	8007d54 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <menu+0x3068>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	220a      	movs	r2, #10
 800437c:	4921      	ldr	r1, [pc, #132]	; (8004404 <menu+0x308c>)
 800437e:	4618      	mov	r0, r3
 8004380:	f008 f83a 	bl	800c3f8 <itoa>
			lcd_print(2, 16, snum);
 8004384:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <menu+0x308c>)
 8004386:	2110      	movs	r1, #16
 8004388:	2002      	movs	r0, #2
 800438a:	f003 fce3 	bl	8007d54 <lcd_print>

			lcd_print(2, 1, "           ");
 800438e:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <menu+0x3090>)
 8004390:	2101      	movs	r1, #1
 8004392:	2002      	movs	r0, #2
 8004394:	f003 fcde 	bl	8007d54 <lcd_print>
 8004398:	e048      	b.n	800442c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <menu+0x3080>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d144      	bne.n	800442c <menu+0x30b4>
			if(dilSecim == 0) {
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <menu+0x3048>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d132      	bne.n	8004410 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043aa:	4a14      	ldr	r2, [pc, #80]	; (80043fc <menu+0x3084>)
 80043ac:	2101      	movs	r1, #1
 80043ae:	2001      	movs	r0, #1
 80043b0:	f003 fcd0 	bl	8007d54 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <menu+0x3094>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	2002      	movs	r0, #2
 80043ba:	f003 fccb 	bl	8007d54 <lcd_print>
 80043be:	e035      	b.n	800442c <menu+0x30b4>
 80043c0:	2000021d 	.word	0x2000021d
 80043c4:	0800d3b8 	.word	0x0800d3b8
 80043c8:	40010800 	.word	0x40010800
 80043cc:	2000022b 	.word	0x2000022b
 80043d0:	2000021a 	.word	0x2000021a
 80043d4:	20000128 	.word	0x20000128
 80043d8:	20000228 	.word	0x20000228
 80043dc:	200001fc 	.word	0x200001fc
 80043e0:	200001f9 	.word	0x200001f9
 80043e4:	200001fa 	.word	0x200001fa
 80043e8:	20000008 	.word	0x20000008
 80043ec:	20000009 	.word	0x20000009
 80043f0:	200001fb 	.word	0x200001fb
 80043f4:	2000023d 	.word	0x2000023d
 80043f8:	2000021c 	.word	0x2000021c
 80043fc:	0800da40 	.word	0x0800da40
 8004400:	0800da54 	.word	0x0800da54
 8004404:	20000198 	.word	0x20000198
 8004408:	0800da68 	.word	0x0800da68
 800440c:	0800da74 	.word	0x0800da74
			} else if(dilSecim == 1) {
 8004410:	4b94      	ldr	r3, [pc, #592]	; (8004664 <menu+0x32ec>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d109      	bne.n	800442c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004418:	4a93      	ldr	r2, [pc, #588]	; (8004668 <menu+0x32f0>)
 800441a:	2101      	movs	r1, #1
 800441c:	2001      	movs	r0, #1
 800441e:	f003 fc99 	bl	8007d54 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004422:	4a92      	ldr	r2, [pc, #584]	; (800466c <menu+0x32f4>)
 8004424:	2101      	movs	r1, #1
 8004426:	2002      	movs	r0, #2
 8004428:	f003 fc94 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800442c:	2102      	movs	r1, #2
 800442e:	4890      	ldr	r0, [pc, #576]	; (8004670 <menu+0x32f8>)
 8004430:	f004 ffb6 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004434:	4603      	mov	r3, r0
 8004436:	2b01      	cmp	r3, #1
 8004438:	d119      	bne.n	800446e <menu+0x30f6>
 800443a:	4b8e      	ldr	r3, [pc, #568]	; (8004674 <menu+0x32fc>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d012      	beq.n	800446e <menu+0x30f6>
 8004448:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <menu+0x3300>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004450:	4b8a      	ldr	r3, [pc, #552]	; (800467c <menu+0x3304>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	b2da      	uxtb	r2, r3
 8004458:	4b88      	ldr	r3, [pc, #544]	; (800467c <menu+0x3304>)
 800445a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800445c:	4b87      	ldr	r3, [pc, #540]	; (800467c <menu+0x3304>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d902      	bls.n	800446a <menu+0x30f2>
				calismaSayModu = 0;
 8004464:	4b85      	ldr	r3, [pc, #532]	; (800467c <menu+0x3304>)
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800446a:	f000 fb57 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800446e:	2104      	movs	r1, #4
 8004470:	487f      	ldr	r0, [pc, #508]	; (8004670 <menu+0x32f8>)
 8004472:	f004 ff95 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d119      	bne.n	80044b0 <menu+0x3138>
 800447c:	4b7d      	ldr	r3, [pc, #500]	; (8004674 <menu+0x32fc>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f083 0301 	eor.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <menu+0x3138>
 800448a:	4b7b      	ldr	r3, [pc, #492]	; (8004678 <menu+0x3300>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00e      	beq.n	80044b0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004492:	4b7a      	ldr	r3, [pc, #488]	; (800467c <menu+0x3304>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	3b01      	subs	r3, #1
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b78      	ldr	r3, [pc, #480]	; (800467c <menu+0x3304>)
 800449c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800449e:	4b77      	ldr	r3, [pc, #476]	; (800467c <menu+0x3304>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <menu+0x3134>
		   		calismaSayModu = 1;
 80044a6:	4b75      	ldr	r3, [pc, #468]	; (800467c <menu+0x3304>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044ac:	f000 fb36 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044b0:	2108      	movs	r1, #8
 80044b2:	486f      	ldr	r0, [pc, #444]	; (8004670 <menu+0x32f8>)
 80044b4:	f004 ff74 	bl	80093a0 <HAL_GPIO_ReadPin>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d12b      	bne.n	8004516 <menu+0x319e>
 80044be:	4b6d      	ldr	r3, [pc, #436]	; (8004674 <menu+0x32fc>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f083 0301 	eor.w	r3, r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d024      	beq.n	8004516 <menu+0x319e>
			eepromData[32] = 0;
 80044cc:	4b6c      	ldr	r3, [pc, #432]	; (8004680 <menu+0x3308>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80044d4:	4b6a      	ldr	r3, [pc, #424]	; (8004680 <menu+0x3308>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80044da:	4b69      	ldr	r3, [pc, #420]	; (8004680 <menu+0x3308>)
 80044dc:	2200      	movs	r2, #0
 80044de:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80044e0:	4b67      	ldr	r3, [pc, #412]	; (8004680 <menu+0x3308>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80044e6:	4b66      	ldr	r3, [pc, #408]	; (8004680 <menu+0x3308>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80044ec:	4b65      	ldr	r3, [pc, #404]	; (8004684 <menu+0x330c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80044f2:	4b65      	ldr	r3, [pc, #404]	; (8004688 <menu+0x3310>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80044f8:	4b64      	ldr	r3, [pc, #400]	; (800468c <menu+0x3314>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80044fe:	4b64      	ldr	r3, [pc, #400]	; (8004690 <menu+0x3318>)
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004504:	4b63      	ldr	r3, [pc, #396]	; (8004694 <menu+0x331c>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800450a:	4b5c      	ldr	r3, [pc, #368]	; (800467c <menu+0x3304>)
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004510:	4b61      	ldr	r3, [pc, #388]	; (8004698 <menu+0x3320>)
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004516:	4b61      	ldr	r3, [pc, #388]	; (800469c <menu+0x3324>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b1e      	cmp	r3, #30
 800451c:	d16f      	bne.n	80045fe <menu+0x3286>
		calismaSayModu = 0;
 800451e:	4b57      	ldr	r3, [pc, #348]	; (800467c <menu+0x3304>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004524:	4b4f      	ldr	r3, [pc, #316]	; (8004664 <menu+0x32ec>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800452c:	4a5c      	ldr	r2, [pc, #368]	; (80046a0 <menu+0x3328>)
 800452e:	2101      	movs	r1, #1
 8004530:	2001      	movs	r0, #1
 8004532:	f003 fc0f 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004536:	4a5b      	ldr	r2, [pc, #364]	; (80046a4 <menu+0x332c>)
 8004538:	2101      	movs	r1, #1
 800453a:	2002      	movs	r0, #2
 800453c:	f003 fc0a 	bl	8007d54 <lcd_print>
 8004540:	e00d      	b.n	800455e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004542:	4b48      	ldr	r3, [pc, #288]	; (8004664 <menu+0x32ec>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d109      	bne.n	800455e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800454a:	4a57      	ldr	r2, [pc, #348]	; (80046a8 <menu+0x3330>)
 800454c:	2101      	movs	r1, #1
 800454e:	2001      	movs	r0, #1
 8004550:	f003 fc00 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004554:	4a55      	ldr	r2, [pc, #340]	; (80046ac <menu+0x3334>)
 8004556:	2101      	movs	r1, #1
 8004558:	2002      	movs	r0, #2
 800455a:	f003 fbfb 	bl	8007d54 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800455e:	2102      	movs	r1, #2
 8004560:	4843      	ldr	r0, [pc, #268]	; (8004670 <menu+0x32f8>)
 8004562:	f004 ff1d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d115      	bne.n	8004598 <menu+0x3220>
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <menu+0x32fc>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f083 0301 	eor.w	r3, r3, #1
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800457a:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <menu+0x32ec>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b38      	ldr	r3, [pc, #224]	; (8004664 <menu+0x32ec>)
 8004584:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <menu+0x32ec>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d902      	bls.n	8004594 <menu+0x321c>
				dilSecim = 0;
 800458e:	4b35      	ldr	r3, [pc, #212]	; (8004664 <menu+0x32ec>)
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004594:	f000 fac2 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004598:	2104      	movs	r1, #4
 800459a:	4835      	ldr	r0, [pc, #212]	; (8004670 <menu+0x32f8>)
 800459c:	f004 ff00 	bl	80093a0 <HAL_GPIO_ReadPin>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d115      	bne.n	80045d2 <menu+0x325a>
 80045a6:	4b33      	ldr	r3, [pc, #204]	; (8004674 <menu+0x32fc>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80045b4:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <menu+0x32ec>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	4b29      	ldr	r3, [pc, #164]	; (8004664 <menu+0x32ec>)
 80045be:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80045c0:	4b28      	ldr	r3, [pc, #160]	; (8004664 <menu+0x32ec>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <menu+0x3256>
		   		dilSecim = 1;
 80045c8:	4b26      	ldr	r3, [pc, #152]	; (8004664 <menu+0x32ec>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80045ce:	f000 faa5 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d2:	2108      	movs	r1, #8
 80045d4:	4826      	ldr	r0, [pc, #152]	; (8004670 <menu+0x32f8>)
 80045d6:	f004 fee3 	bl	80093a0 <HAL_GPIO_ReadPin>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10e      	bne.n	80045fe <menu+0x3286>
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <menu+0x32fc>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	f083 0301 	eor.w	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <menu+0x3286>
			eepromData[33] = dilSecim;
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <menu+0x32ec>)
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	4b23      	ldr	r3, [pc, #140]	; (8004680 <menu+0x3308>)
 80045f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80045f8:	4b27      	ldr	r3, [pc, #156]	; (8004698 <menu+0x3320>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80045fe:	4b27      	ldr	r3, [pc, #156]	; (800469c <menu+0x3324>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b1f      	cmp	r3, #31
 8004604:	f040 80b7 	bne.w	8004776 <menu+0x33fe>
		calismaSayModu = 0;
 8004608:	4b1c      	ldr	r3, [pc, #112]	; (800467c <menu+0x3304>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800460e:	4a28      	ldr	r2, [pc, #160]	; (80046b0 <menu+0x3338>)
 8004610:	2101      	movs	r1, #1
 8004612:	2001      	movs	r0, #1
 8004614:	f003 fb9e 	bl	8007d54 <lcd_print>

		if(iotMode == 0) {
 8004618:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <menu+0x333c>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d113      	bne.n	8004648 <menu+0x32d0>
			if(dilSecim == 0) {
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <menu+0x32ec>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <menu+0x3340>)
 800462a:	2101      	movs	r1, #1
 800462c:	2002      	movs	r0, #2
 800462e:	f003 fb91 	bl	8007d54 <lcd_print>
 8004632:	e050      	b.n	80046d6 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <menu+0x32ec>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d14c      	bne.n	80046d6 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800463c:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <menu+0x3344>)
 800463e:	2101      	movs	r1, #1
 8004640:	2002      	movs	r0, #2
 8004642:	f003 fb87 	bl	8007d54 <lcd_print>
 8004646:	e046      	b.n	80046d6 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004648:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <menu+0x333c>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d142      	bne.n	80046d6 <menu+0x335e>
			if(dilSecim == 0) {
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <menu+0x32ec>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d135      	bne.n	80046c4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <menu+0x3348>)
 800465a:	2101      	movs	r1, #1
 800465c:	2002      	movs	r0, #2
 800465e:	f003 fb79 	bl	8007d54 <lcd_print>
 8004662:	e038      	b.n	80046d6 <menu+0x335e>
 8004664:	2000021d 	.word	0x2000021d
 8004668:	0800da54 	.word	0x0800da54
 800466c:	0800da88 	.word	0x0800da88
 8004670:	40010800 	.word	0x40010800
 8004674:	2000022b 	.word	0x2000022b
 8004678:	2000023d 	.word	0x2000023d
 800467c:	2000021c 	.word	0x2000021c
 8004680:	20000128 	.word	0x20000128
 8004684:	200001fb 	.word	0x200001fb
 8004688:	20000009 	.word	0x20000009
 800468c:	20000008 	.word	0x20000008
 8004690:	200001fa 	.word	0x200001fa
 8004694:	200001f9 	.word	0x200001f9
 8004698:	20000228 	.word	0x20000228
 800469c:	200001fc 	.word	0x200001fc
 80046a0:	0800da9c 	.word	0x0800da9c
 80046a4:	0800dab0 	.word	0x0800dab0
 80046a8:	0800dac4 	.word	0x0800dac4
 80046ac:	0800dad8 	.word	0x0800dad8
 80046b0:	0800daec 	.word	0x0800daec
 80046b4:	2000021b 	.word	0x2000021b
 80046b8:	0800d344 	.word	0x0800d344
 80046bc:	0800d358 	.word	0x0800d358
 80046c0:	0800d3a4 	.word	0x0800d3a4
			} else if(dilSecim == 1) {
 80046c4:	4bae      	ldr	r3, [pc, #696]	; (8004980 <menu+0x3608>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d104      	bne.n	80046d6 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80046cc:	4aad      	ldr	r2, [pc, #692]	; (8004984 <menu+0x360c>)
 80046ce:	2101      	movs	r1, #1
 80046d0:	2002      	movs	r0, #2
 80046d2:	f003 fb3f 	bl	8007d54 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046d6:	2102      	movs	r1, #2
 80046d8:	48ab      	ldr	r0, [pc, #684]	; (8004988 <menu+0x3610>)
 80046da:	f004 fe61 	bl	80093a0 <HAL_GPIO_ReadPin>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d115      	bne.n	8004710 <menu+0x3398>
 80046e4:	4ba9      	ldr	r3, [pc, #676]	; (800498c <menu+0x3614>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	f083 0301 	eor.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <menu+0x3398>
			iotMode = iotMode + 1;
 80046f2:	4ba7      	ldr	r3, [pc, #668]	; (8004990 <menu+0x3618>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4ba5      	ldr	r3, [pc, #660]	; (8004990 <menu+0x3618>)
 80046fc:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80046fe:	4ba4      	ldr	r3, [pc, #656]	; (8004990 <menu+0x3618>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d902      	bls.n	800470c <menu+0x3394>
				iotMode = 0;
 8004706:	4ba2      	ldr	r3, [pc, #648]	; (8004990 <menu+0x3618>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800470c:	f000 fa06 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004710:	2104      	movs	r1, #4
 8004712:	489d      	ldr	r0, [pc, #628]	; (8004988 <menu+0x3610>)
 8004714:	f004 fe44 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d115      	bne.n	800474a <menu+0x33d2>
 800471e:	4b9b      	ldr	r3, [pc, #620]	; (800498c <menu+0x3614>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f083 0301 	eor.w	r3, r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <menu+0x33d2>
			iotMode = iotMode - 1;
 800472c:	4b98      	ldr	r3, [pc, #608]	; (8004990 <menu+0x3618>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	3b01      	subs	r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b96      	ldr	r3, [pc, #600]	; (8004990 <menu+0x3618>)
 8004736:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004738:	4b95      	ldr	r3, [pc, #596]	; (8004990 <menu+0x3618>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <menu+0x33ce>
		   		iotMode = 1;
 8004740:	4b93      	ldr	r3, [pc, #588]	; (8004990 <menu+0x3618>)
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004746:	f000 f9e9 	bl	8004b1c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800474a:	2108      	movs	r1, #8
 800474c:	488e      	ldr	r0, [pc, #568]	; (8004988 <menu+0x3610>)
 800474e:	f004 fe27 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004752:	4603      	mov	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10e      	bne.n	8004776 <menu+0x33fe>
 8004758:	4b8c      	ldr	r3, [pc, #560]	; (800498c <menu+0x3614>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f083 0301 	eor.w	r3, r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004766:	4b8a      	ldr	r3, [pc, #552]	; (8004990 <menu+0x3618>)
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	4b8a      	ldr	r3, [pc, #552]	; (8004994 <menu+0x361c>)
 800476c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004770:	4b89      	ldr	r3, [pc, #548]	; (8004998 <menu+0x3620>)
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004776:	4b89      	ldr	r3, [pc, #548]	; (800499c <menu+0x3624>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b20      	cmp	r3, #32
 800477c:	d141      	bne.n	8004802 <menu+0x348a>
		calismaSayModu = 0;
 800477e:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <menu+0x3628>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004784:	4b7e      	ldr	r3, [pc, #504]	; (8004980 <menu+0x3608>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 800478c:	4a85      	ldr	r2, [pc, #532]	; (80049a4 <menu+0x362c>)
 800478e:	2101      	movs	r1, #1
 8004790:	2001      	movs	r0, #1
 8004792:	f003 fadf 	bl	8007d54 <lcd_print>
 8004796:	e004      	b.n	80047a2 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004798:	4a83      	ldr	r2, [pc, #524]	; (80049a8 <menu+0x3630>)
 800479a:	2101      	movs	r1, #1
 800479c:	2001      	movs	r0, #1
 800479e:	f003 fad9 	bl	8007d54 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80047a2:	4a82      	ldr	r2, [pc, #520]	; (80049ac <menu+0x3634>)
 80047a4:	2101      	movs	r1, #1
 80047a6:	2002      	movs	r0, #2
 80047a8:	f003 fad4 	bl	8007d54 <lcd_print>
		lcd_print(2, 13, "    ");
 80047ac:	4a80      	ldr	r2, [pc, #512]	; (80049b0 <menu+0x3638>)
 80047ae:	210d      	movs	r1, #13
 80047b0:	2002      	movs	r0, #2
 80047b2:	f003 facf 	bl	8007d54 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047b6:	2102      	movs	r1, #2
 80047b8:	4873      	ldr	r0, [pc, #460]	; (8004988 <menu+0x3610>)
 80047ba:	f004 fdf1 	bl	80093a0 <HAL_GPIO_ReadPin>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d11e      	bne.n	8004802 <menu+0x348a>
 80047c4:	2104      	movs	r1, #4
 80047c6:	4870      	ldr	r0, [pc, #448]	; (8004988 <menu+0x3610>)
 80047c8:	f004 fdea 	bl	80093a0 <HAL_GPIO_ReadPin>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d117      	bne.n	8004802 <menu+0x348a>
 80047d2:	4b6e      	ldr	r3, [pc, #440]	; (800498c <menu+0x3614>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f083 0301 	eor.w	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d010      	beq.n	8004802 <menu+0x348a>
			takeMachineID();
 80047e0:	f002 faa8 	bl	8006d34 <takeMachineID>

			HAL_Delay(50);
 80047e4:	2032      	movs	r0, #50	; 0x32
 80047e6:	f004 f80b 	bl	8008800 <HAL_Delay>

			lcd_print(2, 1, machineID);
 80047ea:	4a70      	ldr	r2, [pc, #448]	; (80049ac <menu+0x3634>)
 80047ec:	2101      	movs	r1, #1
 80047ee:	2002      	movs	r0, #2
 80047f0:	f003 fab0 	bl	8007d54 <lcd_print>
			lcd_print(2, 13, "    ");
 80047f4:	4a6e      	ldr	r2, [pc, #440]	; (80049b0 <menu+0x3638>)
 80047f6:	210d      	movs	r1, #13
 80047f8:	2002      	movs	r0, #2
 80047fa:	f003 faab 	bl	8007d54 <lcd_print>

			bekle();
 80047fe:	f000 f98d 	bl	8004b1c <bekle>
		}
	}

	if (menuSayac == 33) {
 8004802:	4b66      	ldr	r3, [pc, #408]	; (800499c <menu+0x3624>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b21      	cmp	r3, #33	; 0x21
 8004808:	d151      	bne.n	80048ae <menu+0x3536>
		calismaSayModu = 0;
 800480a:	4b65      	ldr	r3, [pc, #404]	; (80049a0 <menu+0x3628>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 8004810:	4868      	ldr	r0, [pc, #416]	; (80049b4 <menu+0x363c>)
 8004812:	f7fb fd07 	bl	8000224 <strlen>
 8004816:	4603      	mov	r3, r0
 8004818:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 800481a:	4a67      	ldr	r2, [pc, #412]	; (80049b8 <menu+0x3640>)
 800481c:	2101      	movs	r1, #1
 800481e:	2001      	movs	r0, #1
 8004820:	f003 fa98 	bl	8007d54 <lcd_print>
		if(ssidLength <=16) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b10      	cmp	r3, #16
 8004828:	dc0e      	bgt.n	8004848 <menu+0x34d0>
			lcd_print(2, 1, wifiSSID);
 800482a:	4a62      	ldr	r2, [pc, #392]	; (80049b4 <menu+0x363c>)
 800482c:	2101      	movs	r1, #1
 800482e:	2002      	movs	r0, #2
 8004830:	f003 fa90 	bl	8007d54 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	3301      	adds	r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4a5f      	ldr	r2, [pc, #380]	; (80049bc <menu+0x3644>)
 800483e:	4619      	mov	r1, r3
 8004840:	2002      	movs	r0, #2
 8004842:	f003 fa87 	bl	8007d54 <lcd_print>
 8004846:	e005      	b.n	8004854 <menu+0x34dc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004848:	2300      	movs	r3, #0
 800484a:	2202      	movs	r2, #2
 800484c:	2101      	movs	r1, #1
 800484e:	4859      	ldr	r0, [pc, #356]	; (80049b4 <menu+0x363c>)
 8004850:	f7fc fcd6 	bl	8001200 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004854:	2102      	movs	r1, #2
 8004856:	484c      	ldr	r0, [pc, #304]	; (8004988 <menu+0x3610>)
 8004858:	f004 fda2 	bl	80093a0 <HAL_GPIO_ReadPin>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d125      	bne.n	80048ae <menu+0x3536>
 8004862:	2104      	movs	r1, #4
 8004864:	4848      	ldr	r0, [pc, #288]	; (8004988 <menu+0x3610>)
 8004866:	f004 fd9b 	bl	80093a0 <HAL_GPIO_ReadPin>
 800486a:	4603      	mov	r3, r0
 800486c:	2b01      	cmp	r3, #1
 800486e:	d11e      	bne.n	80048ae <menu+0x3536>
 8004870:	4b46      	ldr	r3, [pc, #280]	; (800498c <menu+0x3614>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f083 0301 	eor.w	r3, r3, #1
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d017      	beq.n	80048ae <menu+0x3536>
			takeWifiSSID();
 800487e:	f002 fba9 	bl	8006fd4 <takeWifiSSID>

			HAL_Delay(50);
 8004882:	2032      	movs	r0, #50	; 0x32
 8004884:	f003 ffbc 	bl	8008800 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004888:	4a4a      	ldr	r2, [pc, #296]	; (80049b4 <menu+0x363c>)
 800488a:	2101      	movs	r1, #1
 800488c:	2002      	movs	r0, #2
 800488e:	f003 fa61 	bl	8007d54 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004892:	4848      	ldr	r0, [pc, #288]	; (80049b4 <menu+0x363c>)
 8004894:	f7fb fcc6 	bl	8000224 <strlen>
 8004898:	4603      	mov	r3, r0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	3301      	adds	r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4a46      	ldr	r2, [pc, #280]	; (80049bc <menu+0x3644>)
 80048a2:	4619      	mov	r1, r3
 80048a4:	2002      	movs	r0, #2
 80048a6:	f003 fa55 	bl	8007d54 <lcd_print>

			bekle();
 80048aa:	f000 f937 	bl	8004b1c <bekle>
		}
	}

	if (menuSayac == 34) {
 80048ae:	4b3b      	ldr	r3, [pc, #236]	; (800499c <menu+0x3624>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b22      	cmp	r3, #34	; 0x22
 80048b4:	d151      	bne.n	800495a <menu+0x35e2>
		calismaSayModu = 0;
 80048b6:	4b3a      	ldr	r3, [pc, #232]	; (80049a0 <menu+0x3628>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80048bc:	4840      	ldr	r0, [pc, #256]	; (80049c0 <menu+0x3648>)
 80048be:	f7fb fcb1 	bl	8000224 <strlen>
 80048c2:	4603      	mov	r3, r0
 80048c4:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80048c6:	4a3f      	ldr	r2, [pc, #252]	; (80049c4 <menu+0x364c>)
 80048c8:	2101      	movs	r1, #1
 80048ca:	2001      	movs	r0, #1
 80048cc:	f003 fa42 	bl	8007d54 <lcd_print>

		if(passLength <= 16) {
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	dc0e      	bgt.n	80048f4 <menu+0x357c>
			lcd_print(2, 1, wifiPass);
 80048d6:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <menu+0x3648>)
 80048d8:	2101      	movs	r1, #1
 80048da:	2002      	movs	r0, #2
 80048dc:	f003 fa3a 	bl	8007d54 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	3301      	adds	r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	4a34      	ldr	r2, [pc, #208]	; (80049bc <menu+0x3644>)
 80048ea:	4619      	mov	r1, r3
 80048ec:	2002      	movs	r0, #2
 80048ee:	f003 fa31 	bl	8007d54 <lcd_print>
 80048f2:	e005      	b.n	8004900 <menu+0x3588>
		} else {
			slideText(wifiPass, 1, 2, 1);
 80048f4:	2301      	movs	r3, #1
 80048f6:	2202      	movs	r2, #2
 80048f8:	2101      	movs	r1, #1
 80048fa:	4831      	ldr	r0, [pc, #196]	; (80049c0 <menu+0x3648>)
 80048fc:	f7fc fc80 	bl	8001200 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004900:	2102      	movs	r1, #2
 8004902:	4821      	ldr	r0, [pc, #132]	; (8004988 <menu+0x3610>)
 8004904:	f004 fd4c 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d125      	bne.n	800495a <menu+0x35e2>
 800490e:	2104      	movs	r1, #4
 8004910:	481d      	ldr	r0, [pc, #116]	; (8004988 <menu+0x3610>)
 8004912:	f004 fd45 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004916:	4603      	mov	r3, r0
 8004918:	2b01      	cmp	r3, #1
 800491a:	d11e      	bne.n	800495a <menu+0x35e2>
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <menu+0x3614>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f083 0301 	eor.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d017      	beq.n	800495a <menu+0x35e2>
			takeWifiPass();
 800492a:	f002 fd15 	bl	8007358 <takeWifiPass>

			HAL_Delay(50);
 800492e:	2032      	movs	r0, #50	; 0x32
 8004930:	f003 ff66 	bl	8008800 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004934:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <menu+0x3648>)
 8004936:	2101      	movs	r1, #1
 8004938:	2002      	movs	r0, #2
 800493a:	f003 fa0b 	bl	8007d54 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 800493e:	4820      	ldr	r0, [pc, #128]	; (80049c0 <menu+0x3648>)
 8004940:	f7fb fc70 	bl	8000224 <strlen>
 8004944:	4603      	mov	r3, r0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	3301      	adds	r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <menu+0x3644>)
 800494e:	4619      	mov	r1, r3
 8004950:	2002      	movs	r0, #2
 8004952:	f003 f9ff 	bl	8007d54 <lcd_print>

			bekle();
 8004956:	f000 f8e1 	bl	8004b1c <bekle>
		}
	}

	if (menuSayac == 35) {
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <menu+0x3624>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b23      	cmp	r3, #35	; 0x23
 8004960:	d175      	bne.n	8004a4e <menu+0x36d6>
		if(dilSecim == 0) {
 8004962:	4b07      	ldr	r3, [pc, #28]	; (8004980 <menu+0x3608>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d132      	bne.n	80049d0 <menu+0x3658>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <menu+0x3650>)
 800496c:	2101      	movs	r1, #1
 800496e:	2001      	movs	r0, #1
 8004970:	f003 f9f0 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <menu+0x3654>)
 8004976:	2101      	movs	r1, #1
 8004978:	2002      	movs	r0, #2
 800497a:	f003 f9eb 	bl	8007d54 <lcd_print>
 800497e:	e035      	b.n	80049ec <menu+0x3674>
 8004980:	2000021d 	.word	0x2000021d
 8004984:	0800d3b8 	.word	0x0800d3b8
 8004988:	40010800 	.word	0x40010800
 800498c:	2000022b 	.word	0x2000022b
 8004990:	2000021b 	.word	0x2000021b
 8004994:	20000128 	.word	0x20000128
 8004998:	20000228 	.word	0x20000228
 800499c:	200001fc 	.word	0x200001fc
 80049a0:	2000021c 	.word	0x2000021c
 80049a4:	0800db00 	.word	0x0800db00
 80049a8:	0800db14 	.word	0x0800db14
 80049ac:	200001a0 	.word	0x200001a0
 80049b0:	0800db28 	.word	0x0800db28
 80049b4:	200001ac 	.word	0x200001ac
 80049b8:	0800db30 	.word	0x0800db30
 80049bc:	20000018 	.word	0x20000018
 80049c0:	200001c0 	.word	0x200001c0
 80049c4:	0800db44 	.word	0x0800db44
 80049c8:	0800db58 	.word	0x0800db58
 80049cc:	0800db6c 	.word	0x0800db6c
		} else if(dilSecim == 1) {
 80049d0:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <menu+0x36e0>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d109      	bne.n	80049ec <menu+0x3674>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80049d8:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <menu+0x36e4>)
 80049da:	2101      	movs	r1, #1
 80049dc:	2001      	movs	r0, #1
 80049de:	f003 f9b9 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80049e2:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <menu+0x36e8>)
 80049e4:	2101      	movs	r1, #1
 80049e6:	2002      	movs	r0, #2
 80049e8:	f003 f9b4 	bl	8007d54 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80049ec:	2108      	movs	r1, #8
 80049ee:	481d      	ldr	r0, [pc, #116]	; (8004a64 <menu+0x36ec>)
 80049f0:	f004 fcd6 	bl	80093a0 <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d129      	bne.n	8004a4e <menu+0x36d6>
			menuGiris = 0;
 80049fa:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <menu+0x36f0>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004a00:	bf00      	nop
 8004a02:	481a      	ldr	r0, [pc, #104]	; (8004a6c <menu+0x36f4>)
 8004a04:	f005 faf5 	bl	8009ff2 <HAL_I2C_GetError>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d0f9      	beq.n	8004a02 <menu+0x368a>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004a0e:	bf00      	nop
 8004a10:	4816      	ldr	r0, [pc, #88]	; (8004a6c <menu+0x36f4>)
 8004a12:	f005 fae1 	bl	8009fd8 <HAL_I2C_GetState>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d1f9      	bne.n	8004a10 <menu+0x3698>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004a1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a20:	9302      	str	r3, [sp, #8]
 8004a22:	236e      	movs	r3, #110	; 0x6e
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <menu+0x36f8>)
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	236e      	movs	r3, #110	; 0x6e
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	21a0      	movs	r1, #160	; 0xa0
 8004a30:	480e      	ldr	r0, [pc, #56]	; (8004a6c <menu+0x36f4>)
 8004a32:	f004 ff6f 	bl	8009914 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004a36:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004a3a:	f003 fee1 	bl	8008800 <HAL_Delay>

			lcd_clear();
 8004a3e:	f003 f9b5 	bl	8007dac <lcd_clear>
			HAL_Delay(500);
 8004a42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a46:	f003 fedb 	bl	8008800 <HAL_Delay>
			NVIC_SystemReset();
 8004a4a:	f7fc fc7f 	bl	800134c <__NVIC_SystemReset>
		}
	}
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	2000021d 	.word	0x2000021d
 8004a5c:	0800db80 	.word	0x0800db80
 8004a60:	0800db94 	.word	0x0800db94
 8004a64:	40010800 	.word	0x40010800
 8004a68:	20000219 	.word	0x20000219
 8004a6c:	20000384 	.word	0x20000384
 8004a70:	20000128 	.word	0x20000128

08004a74 <lcdUpdate>:
#include "main.h"
#include "Process.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void lcdUpdate(uint8_t y) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a84:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <lcdUpdate+0x9c>)
 8004a86:	2101      	movs	r1, #1
 8004a88:	2002      	movs	r0, #2
 8004a8a:	f003 f963 	bl	8007d54 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a8e:	e03b      	b.n	8004b08 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d105      	bne.n	8004aa2 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a96:	4a1e      	ldr	r2, [pc, #120]	; (8004b10 <lcdUpdate+0x9c>)
 8004a98:	2102      	movs	r1, #2
 8004a9a:	2002      	movs	r0, #2
 8004a9c:	f003 f95a 	bl	8007d54 <lcd_print>
}
 8004aa0:	e032      	b.n	8004b08 <lcdUpdate+0x94>
	} else if(y==3) {
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d105      	bne.n	8004ab4 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <lcdUpdate+0x9c>)
 8004aaa:	2103      	movs	r1, #3
 8004aac:	2002      	movs	r0, #2
 8004aae:	f003 f951 	bl	8007d54 <lcd_print>
}
 8004ab2:	e029      	b.n	8004b08 <lcdUpdate+0x94>
	} else if(y==4) {
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d105      	bne.n	8004ac6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <lcdUpdate+0x9c>)
 8004abc:	2104      	movs	r1, #4
 8004abe:	2002      	movs	r0, #2
 8004ac0:	f003 f948 	bl	8007d54 <lcd_print>
}
 8004ac4:	e020      	b.n	8004b08 <lcdUpdate+0x94>
	} else if(y==5) {
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	d105      	bne.n	8004ad8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004acc:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <lcdUpdate+0x9c>)
 8004ace:	2105      	movs	r1, #5
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	f003 f93f 	bl	8007d54 <lcd_print>
}
 8004ad6:	e017      	b.n	8004b08 <lcdUpdate+0x94>
	} else if(y==6) {
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	2b06      	cmp	r3, #6
 8004adc:	d105      	bne.n	8004aea <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004ade:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <lcdUpdate+0x9c>)
 8004ae0:	2106      	movs	r1, #6
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	f003 f936 	bl	8007d54 <lcd_print>
}
 8004ae8:	e00e      	b.n	8004b08 <lcdUpdate+0x94>
	} else if (y==7) {
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	2b07      	cmp	r3, #7
 8004aee:	d10b      	bne.n	8004b08 <lcdUpdate+0x94>
		lcd_clear();
 8004af0:	f003 f95c 	bl	8007dac <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004af4:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <lcdUpdate+0xa0>)
 8004af6:	2104      	movs	r1, #4
 8004af8:	2001      	movs	r0, #1
 8004afa:	f003 f92b 	bl	8007d54 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004afe:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <lcdUpdate+0xa4>)
 8004b00:	2106      	movs	r1, #6
 8004b02:	2002      	movs	r0, #2
 8004b04:	f003 f926 	bl	8007d54 <lcd_print>
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	0800dba8 	.word	0x0800dba8
 8004b14:	0800dbac 	.word	0x0800dbac
 8004b18:	0800dbb4 	.word	0x0800dbb4

08004b1c <bekle>:

void bekle() {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
	timer1=millis;
 8004b20:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <bekle+0x124>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a47      	ldr	r2, [pc, #284]	; (8004c44 <bekle+0x128>)
 8004b26:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b28:	e002      	b.n	8004b30 <bekle+0x14>
    	butonKontrol = 1;
 8004b2a:	4b47      	ldr	r3, [pc, #284]	; (8004c48 <bekle+0x12c>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b30:	2101      	movs	r1, #1
 8004b32:	4846      	ldr	r0, [pc, #280]	; (8004c4c <bekle+0x130>)
 8004b34:	f004 fc34 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d109      	bne.n	8004b52 <bekle+0x36>
 8004b3e:	4b40      	ldr	r3, [pc, #256]	; (8004c40 <bekle+0x124>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <bekle+0x128>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d0ef      	beq.n	8004b2a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b4a:	e002      	b.n	8004b52 <bekle+0x36>
    	butonKontrol = 1;
 8004b4c:	4b3e      	ldr	r3, [pc, #248]	; (8004c48 <bekle+0x12c>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b52:	2108      	movs	r1, #8
 8004b54:	483e      	ldr	r0, [pc, #248]	; (8004c50 <bekle+0x134>)
 8004b56:	f004 fc23 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d109      	bne.n	8004b74 <bekle+0x58>
 8004b60:	4b37      	ldr	r3, [pc, #220]	; (8004c40 <bekle+0x124>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <bekle+0x128>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d0ef      	beq.n	8004b4c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b6c:	e002      	b.n	8004b74 <bekle+0x58>
    	butonKontrol = 1;
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <bekle+0x12c>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b74:	2102      	movs	r1, #2
 8004b76:	4835      	ldr	r0, [pc, #212]	; (8004c4c <bekle+0x130>)
 8004b78:	f004 fc12 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d109      	bne.n	8004b96 <bekle+0x7a>
 8004b82:	4b2f      	ldr	r3, [pc, #188]	; (8004c40 <bekle+0x124>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <bekle+0x128>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d0ef      	beq.n	8004b6e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b8e:	e002      	b.n	8004b96 <bekle+0x7a>
    	butonKontrol = 1;
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <bekle+0x12c>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b96:	2104      	movs	r1, #4
 8004b98:	482c      	ldr	r0, [pc, #176]	; (8004c4c <bekle+0x130>)
 8004b9a:	f004 fc01 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d109      	bne.n	8004bb8 <bekle+0x9c>
 8004ba4:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <bekle+0x124>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <bekle+0x128>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d0ef      	beq.n	8004b90 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bb0:	e002      	b.n	8004bb8 <bekle+0x9c>
    	butonKontrol = 1;
 8004bb2:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <bekle+0x12c>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bb8:	2108      	movs	r1, #8
 8004bba:	4824      	ldr	r0, [pc, #144]	; (8004c4c <bekle+0x130>)
 8004bbc:	f004 fbf0 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d109      	bne.n	8004bda <bekle+0xbe>
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <bekle+0x124>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <bekle+0x128>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d0ef      	beq.n	8004bb2 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bd2:	e002      	b.n	8004bda <bekle+0xbe>
    	butonKontrol = 1;
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <bekle+0x12c>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bda:	2180      	movs	r1, #128	; 0x80
 8004bdc:	481c      	ldr	r0, [pc, #112]	; (8004c50 <bekle+0x134>)
 8004bde:	f004 fbdf 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <bekle+0xe0>
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <bekle+0x124>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <bekle+0x128>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d0ef      	beq.n	8004bd4 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bf4:	e002      	b.n	8004bfc <bekle+0xe0>
    	butonKontrol = 1;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <bekle+0x12c>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c00:	4813      	ldr	r0, [pc, #76]	; (8004c50 <bekle+0x134>)
 8004c02:	f004 fbcd 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <bekle+0x104>
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <bekle+0x124>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <bekle+0x128>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d0ee      	beq.n	8004bf6 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c18:	e002      	b.n	8004c20 <bekle+0x104>
    	butonKontrol = 1;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <bekle+0x12c>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c24:	480a      	ldr	r0, [pc, #40]	; (8004c50 <bekle+0x134>)
 8004c26:	f004 fbbb 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <bekle+0x120>
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <bekle+0x124>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <bekle+0x128>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d0ee      	beq.n	8004c1a <bekle+0xfe>
    }

}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	200001d8 	.word	0x200001d8
 8004c44:	200001e0 	.word	0x200001e0
 8004c48:	2000022b 	.word	0x2000022b
 8004c4c:	40010800 	.word	0x40010800
 8004c50:	40011000 	.word	0x40011000

08004c54 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <checkLCDBacklight+0x24>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <checkLCDBacklight+0x28>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b3b      	cmp	r3, #59	; 0x3b
 8004c64:	d903      	bls.n	8004c6e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c66:	2000      	movs	r0, #0
 8004c68:	f003 f8c0 	bl	8007dec <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c6c:	e002      	b.n	8004c74 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c6e:	2001      	movs	r0, #1
 8004c70:	f003 f8bc 	bl	8007dec <lcd_backlight>
}
 8004c74:	bf00      	nop
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	200001d8 	.word	0x200001d8
 8004c7c:	200001f4 	.word	0x200001f4

08004c80 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c84:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <checkBasincSalteri+0x54>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d102      	bne.n	8004c92 <checkBasincSalteri+0x12>
		basincVar=1;
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <checkBasincSalteri+0x58>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <checkBasincSalteri+0x54>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d119      	bne.n	8004cce <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c9e:	480f      	ldr	r0, [pc, #60]	; (8004cdc <checkBasincSalteri+0x5c>)
 8004ca0:	f004 fb7e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004caa:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <checkBasincSalteri+0x60>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <checkBasincSalteri+0x64>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d90a      	bls.n	8004cce <checkBasincSalteri+0x4e>
				basincVar=1;
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <checkBasincSalteri+0x58>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004cbe:	e006      	b.n	8004cce <checkBasincSalteri+0x4e>
			timer5=millis;
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <checkBasincSalteri+0x60>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <checkBasincSalteri+0x64>)
 8004cc6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <checkBasincSalteri+0x58>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000203 	.word	0x20000203
 8004cd8:	200001ff 	.word	0x200001ff
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	200001d8 	.word	0x200001d8
 8004ce4:	200001f0 	.word	0x200001f0

08004ce8 <checkBasGonder>:

void checkBasGonder() {
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004cec:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <checkBasGonder+0x74>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10b      	bne.n	8004d0c <checkBasGonder+0x24>
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <checkBasGonder+0x78>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <checkBasGonder+0x24>
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <checkBasGonder+0x7c>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <checkBasGonder+0x80>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e009      	b.n	8004d20 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004d0c:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <checkBasGonder+0x78>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	f083 0301 	eor.w	r3, r3, #1
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <checkBasGonder+0x80>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d20:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <checkBasGonder+0x74>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10b      	bne.n	8004d40 <checkBasGonder+0x58>
 8004d28:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <checkBasGonder+0x84>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <checkBasGonder+0x58>
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <checkBasGonder+0x7c>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <checkBasGonder+0x88>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004d3e:	e009      	b.n	8004d54 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <checkBasGonder+0x84>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f083 0301 	eor.w	r3, r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004d4e:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <checkBasGonder+0x88>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	200001fd 	.word	0x200001fd
 8004d60:	20000231 	.word	0x20000231
 8004d64:	2000020b 	.word	0x2000020b
 8004d68:	20000238 	.word	0x20000238
 8004d6c:	20000234 	.word	0x20000234
 8004d70:	20000239 	.word	0x20000239

08004d74 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <checkKapiSecimleri+0x98>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <checkKapiSecimleri+0x9c>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d86:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <checkKapiSecimleri+0x98>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10e      	bne.n	8004dac <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d92:	4820      	ldr	r0, [pc, #128]	; (8004e14 <checkKapiSecimleri+0xa0>)
 8004d94:	f004 fb04 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <checkKapiSecimleri+0x9c>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e002      	b.n	8004dac <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004da6:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <checkKapiSecimleri+0x9c>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004dac:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <checkKapiSecimleri+0x98>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d10e      	bne.n	8004dd2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004db8:	4816      	ldr	r0, [pc, #88]	; (8004e14 <checkKapiSecimleri+0xa0>)
 8004dba:	f004 faf1 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d103      	bne.n	8004dcc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004dc4:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <checkKapiSecimleri+0x9c>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	e002      	b.n	8004dd2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <checkKapiSecimleri+0x9c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004dd2:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <checkKapiSecimleri+0x98>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d116      	bne.n	8004e08 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dde:	480d      	ldr	r0, [pc, #52]	; (8004e14 <checkKapiSecimleri+0xa0>)
 8004de0:	f004 fade 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <checkKapiSecimleri+0x8e>
 8004dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dee:	4809      	ldr	r0, [pc, #36]	; (8004e14 <checkKapiSecimleri+0xa0>)
 8004df0:	f004 fad6 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <checkKapiSecimleri+0x9c>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004e00:	e002      	b.n	8004e08 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004e02:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <checkKapiSecimleri+0x9c>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20000204 	.word	0x20000204
 8004e10:	2000024f 	.word	0x2000024f
 8004e14:	40010800 	.word	0x40010800

08004e18 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004e1c:	4b62      	ldr	r3, [pc, #392]	; (8004fa8 <checkAktifCalisma+0x190>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f041 833e 	bne.w	80064a2 <checkAktifCalisma+0x168a>
 8004e26:	4b61      	ldr	r3, [pc, #388]	; (8004fac <checkAktifCalisma+0x194>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f041 8339 	bne.w	80064a2 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004e30:	4b5f      	ldr	r3, [pc, #380]	; (8004fb0 <checkAktifCalisma+0x198>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11a      	bne.n	8004e6e <checkAktifCalisma+0x56>
 8004e38:	4b5e      	ldr	r3, [pc, #376]	; (8004fb4 <checkAktifCalisma+0x19c>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <checkAktifCalisma+0x56>
 8004e40:	4b5d      	ldr	r3, [pc, #372]	; (8004fb8 <checkAktifCalisma+0x1a0>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <checkAktifCalisma+0x46>
 8004e48:	4b5c      	ldr	r3, [pc, #368]	; (8004fbc <checkAktifCalisma+0x1a4>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f083 0301 	eor.w	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <checkAktifCalisma+0x46>
 8004e56:	4b5a      	ldr	r3, [pc, #360]	; (8004fc0 <checkAktifCalisma+0x1a8>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d007      	beq.n	8004e6e <checkAktifCalisma+0x56>
 8004e5e:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <checkAktifCalisma+0x1ac>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <checkAktifCalisma+0x80>
 8004e66:	4b58      	ldr	r3, [pc, #352]	; (8004fc8 <checkAktifCalisma+0x1b0>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d114      	bne.n	8004e98 <checkAktifCalisma+0x80>
 8004e6e:	4b57      	ldr	r3, [pc, #348]	; (8004fcc <checkAktifCalisma+0x1b4>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d010      	beq.n	8004e98 <checkAktifCalisma+0x80>
 8004e76:	4b56      	ldr	r3, [pc, #344]	; (8004fd0 <checkAktifCalisma+0x1b8>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e84:	4853      	ldr	r0, [pc, #332]	; (8004fd4 <checkAktifCalisma+0x1bc>)
 8004e86:	f004 faa2 	bl	80093ce <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e8a:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <checkAktifCalisma+0x1c0>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e90:	4b52      	ldr	r3, [pc, #328]	; (8004fdc <checkAktifCalisma+0x1c4>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e008      	b.n	8004eaa <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e9e:	484d      	ldr	r0, [pc, #308]	; (8004fd4 <checkAktifCalisma+0x1bc>)
 8004ea0:	f004 fa95 	bl	80093ce <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004ea4:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <checkAktifCalisma+0x1c0>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004eaa:	4b40      	ldr	r3, [pc, #256]	; (8004fac <checkAktifCalisma+0x194>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d160      	bne.n	8004f74 <checkAktifCalisma+0x15c>
 8004eb2:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <checkAktifCalisma+0x1b4>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d05c      	beq.n	8004f74 <checkAktifCalisma+0x15c>
 8004eba:	4b45      	ldr	r3, [pc, #276]	; (8004fd0 <checkAktifCalisma+0x1b8>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d058      	beq.n	8004f74 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ec6:	4843      	ldr	r0, [pc, #268]	; (8004fd4 <checkAktifCalisma+0x1bc>)
 8004ec8:	f004 fa6a 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <checkAktifCalisma+0xc2>
 8004ed2:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <checkAktifCalisma+0x1c8>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04c      	beq.n	8004f74 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004eda:	2102      	movs	r1, #2
 8004edc:	4841      	ldr	r0, [pc, #260]	; (8004fe4 <checkAktifCalisma+0x1cc>)
 8004ede:	f004 fa5f 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d145      	bne.n	8004f74 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <checkAktifCalisma+0x1d0>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d041      	beq.n	8004f74 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ef4:	4837      	ldr	r0, [pc, #220]	; (8004fd4 <checkAktifCalisma+0x1bc>)
 8004ef6:	f004 fa53 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10e      	bne.n	8004f1e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f04:	4833      	ldr	r0, [pc, #204]	; (8004fd4 <checkAktifCalisma+0x1bc>)
 8004f06:	f004 fa4b 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d106      	bne.n	8004f1e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004f10:	2140      	movs	r1, #64	; 0x40
 8004f12:	4834      	ldr	r0, [pc, #208]	; (8004fe4 <checkAktifCalisma+0x1cc>)
 8004f14:	f004 fa44 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d003      	beq.n	8004f26 <checkAktifCalisma+0x10e>
 8004f1e:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <checkAktifCalisma+0x198>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d026      	beq.n	8004f74 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <checkAktifCalisma+0x1a0>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	f083 0301 	eor.w	r3, r3, #1
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01f      	beq.n	8004f74 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004f34:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <checkAktifCalisma+0x19c>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	f083 0301 	eor.w	r3, r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004f42:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <checkAktifCalisma+0x1ac>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f083 0301 	eor.w	r3, r3, #1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d011      	beq.n	8004f74 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004f50:	4b26      	ldr	r3, [pc, #152]	; (8004fec <checkAktifCalisma+0x1d4>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	f083 0301 	eor.w	r3, r3, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <checkAktifCalisma+0x1d8>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	f083 0301 	eor.w	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <checkAktifCalisma+0x198>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e002      	b.n	8004f7a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <checkAktifCalisma+0x198>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <checkAktifCalisma+0x198>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d03a      	beq.n	8004ff8 <checkAktifCalisma+0x1e0>
 8004f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f86:	4817      	ldr	r0, [pc, #92]	; (8004fe4 <checkAktifCalisma+0x1cc>)
 8004f88:	f004 fa0a 	bl	80093a0 <HAL_GPIO_ReadPin>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d132      	bne.n	8004ff8 <checkAktifCalisma+0x1e0>
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <checkAktifCalisma+0x1dc>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d02e      	beq.n	8004ff8 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fa0:	480c      	ldr	r0, [pc, #48]	; (8004fd4 <checkAktifCalisma+0x1bc>)
 8004fa2:	f004 fa14 	bl	80093ce <HAL_GPIO_WritePin>
 8004fa6:	e02d      	b.n	8005004 <checkAktifCalisma+0x1ec>
 8004fa8:	2000021a 	.word	0x2000021a
 8004fac:	20000219 	.word	0x20000219
 8004fb0:	20000231 	.word	0x20000231
 8004fb4:	20000232 	.word	0x20000232
 8004fb8:	20000234 	.word	0x20000234
 8004fbc:	2000022c 	.word	0x2000022c
 8004fc0:	2000020f 	.word	0x2000020f
 8004fc4:	20000233 	.word	0x20000233
 8004fc8:	2000020e 	.word	0x2000020e
 8004fcc:	2000024e 	.word	0x2000024e
 8004fd0:	2000024f 	.word	0x2000024f
 8004fd4:	40010c00 	.word	0x40010c00
 8004fd8:	20000250 	.word	0x20000250
 8004fdc:	2000023b 	.word	0x2000023b
 8004fe0:	20000238 	.word	0x20000238
 8004fe4:	40011000 	.word	0x40011000
 8004fe8:	200001ff 	.word	0x200001ff
 8004fec:	20000236 	.word	0x20000236
 8004ff0:	20000237 	.word	0x20000237
 8004ff4:	2000020a 	.word	0x2000020a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ffe:	4860      	ldr	r0, [pc, #384]	; (8005180 <checkAktifCalisma+0x368>)
 8005000:	f004 f9e5 	bl	80093ce <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005004:	4b5f      	ldr	r3, [pc, #380]	; (8005184 <checkAktifCalisma+0x36c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <checkAktifCalisma+0x21c>
 800500c:	4b5e      	ldr	r3, [pc, #376]	; (8005188 <checkAktifCalisma+0x370>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d007      	beq.n	8005024 <checkAktifCalisma+0x20c>
 8005014:	4b5c      	ldr	r3, [pc, #368]	; (8005188 <checkAktifCalisma+0x370>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d003      	beq.n	8005024 <checkAktifCalisma+0x20c>
 800501c:	4b5b      	ldr	r3, [pc, #364]	; (800518c <checkAktifCalisma+0x374>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d107      	bne.n	8005034 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005024:	2201      	movs	r2, #1
 8005026:	2104      	movs	r1, #4
 8005028:	4855      	ldr	r0, [pc, #340]	; (8005180 <checkAktifCalisma+0x368>)
 800502a:	f004 f9d0 	bl	80093ce <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800502e:	4b58      	ldr	r3, [pc, #352]	; (8005190 <checkAktifCalisma+0x378>)
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005034:	4b56      	ldr	r3, [pc, #344]	; (8005190 <checkAktifCalisma+0x378>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02f      	beq.n	800509c <checkAktifCalisma+0x284>
 800503c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005040:	484f      	ldr	r0, [pc, #316]	; (8005180 <checkAktifCalisma+0x368>)
 8005042:	f004 f9ad 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005046:	4603      	mov	r3, r0
 8005048:	2b01      	cmp	r3, #1
 800504a:	d106      	bne.n	800505a <checkAktifCalisma+0x242>
 800504c:	4b51      	ldr	r3, [pc, #324]	; (8005194 <checkAktifCalisma+0x37c>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <checkAktifCalisma+0x250>
 800505a:	2102      	movs	r1, #2
 800505c:	484e      	ldr	r0, [pc, #312]	; (8005198 <checkAktifCalisma+0x380>)
 800505e:	f004 f99f 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005062:	4603      	mov	r3, r0
 8005064:	2b01      	cmp	r3, #1
 8005066:	d119      	bne.n	800509c <checkAktifCalisma+0x284>
 8005068:	4b4c      	ldr	r3, [pc, #304]	; (800519c <checkAktifCalisma+0x384>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d015      	beq.n	800509c <checkAktifCalisma+0x284>
 8005070:	4b4b      	ldr	r3, [pc, #300]	; (80051a0 <checkAktifCalisma+0x388>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d011      	beq.n	800509c <checkAktifCalisma+0x284>
 8005078:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <checkAktifCalisma+0x38c>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <checkAktifCalisma+0x284>
 8005080:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <checkAktifCalisma+0x390>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	f083 0301 	eor.w	r3, r3, #1
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d006      	beq.n	800509c <checkAktifCalisma+0x284>
			timer2=millis;
 800508e:	4b47      	ldr	r3, [pc, #284]	; (80051ac <checkAktifCalisma+0x394>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a47      	ldr	r2, [pc, #284]	; (80051b0 <checkAktifCalisma+0x398>)
 8005094:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005096:	4b44      	ldr	r3, [pc, #272]	; (80051a8 <checkAktifCalisma+0x390>)
 8005098:	2201      	movs	r2, #1
 800509a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 800509c:	4b43      	ldr	r3, [pc, #268]	; (80051ac <checkAktifCalisma+0x394>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b43      	ldr	r3, [pc, #268]	; (80051b0 <checkAktifCalisma+0x398>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	4a43      	ldr	r2, [pc, #268]	; (80051b4 <checkAktifCalisma+0x39c>)
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d303      	bcc.n	80050b6 <checkAktifCalisma+0x29e>
 80050ae:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <checkAktifCalisma+0x390>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d111      	bne.n	80050da <checkAktifCalisma+0x2c2>
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <checkAktifCalisma+0x384>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f083 0301 	eor.w	r3, r3, #1
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <checkAktifCalisma+0x2c2>
 80050c4:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <checkAktifCalisma+0x388>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	f083 0301 	eor.w	r3, r3, #1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <checkAktifCalisma+0x2c2>
 80050d2:	4b34      	ldr	r3, [pc, #208]	; (80051a4 <checkAktifCalisma+0x38c>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80050da:	2200      	movs	r2, #0
 80050dc:	2104      	movs	r1, #4
 80050de:	4828      	ldr	r0, [pc, #160]	; (8005180 <checkAktifCalisma+0x368>)
 80050e0:	f004 f975 	bl	80093ce <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80050e4:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <checkAktifCalisma+0x378>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <checkAktifCalisma+0x390>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80050f0:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <checkAktifCalisma+0x3a0>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80050f8:	4b30      	ldr	r3, [pc, #192]	; (80051bc <checkAktifCalisma+0x3a4>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80050fe:	4b2e      	ldr	r3, [pc, #184]	; (80051b8 <checkAktifCalisma+0x3a0>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d116      	bne.n	8005134 <checkAktifCalisma+0x31c>
 8005106:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <checkAktifCalisma+0x3a8>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d112      	bne.n	8005134 <checkAktifCalisma+0x31c>
 800510e:	2101      	movs	r1, #1
 8005110:	4821      	ldr	r0, [pc, #132]	; (8005198 <checkAktifCalisma+0x380>)
 8005112:	f004 f945 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10b      	bne.n	8005134 <checkAktifCalisma+0x31c>
 800511c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005120:	4817      	ldr	r0, [pc, #92]	; (8005180 <checkAktifCalisma+0x368>)
 8005122:	f004 f93d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800512c:	4b23      	ldr	r3, [pc, #140]	; (80051bc <checkAktifCalisma+0x3a4>)
 800512e:	2201      	movs	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	e011      	b.n	8005158 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005134:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <checkAktifCalisma+0x3a0>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10d      	bne.n	8005158 <checkAktifCalisma+0x340>
 800513c:	2101      	movs	r1, #1
 800513e:	4816      	ldr	r0, [pc, #88]	; (8005198 <checkAktifCalisma+0x380>)
 8005140:	f004 f92e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d106      	bne.n	8005158 <checkAktifCalisma+0x340>
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <checkAktifCalisma+0x3a8>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005152:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <checkAktifCalisma+0x3a4>)
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005158:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <checkAktifCalisma+0x3a0>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d134      	bne.n	80051ca <checkAktifCalisma+0x3b2>
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <checkAktifCalisma+0x3a8>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d130      	bne.n	80051ca <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005168:	2101      	movs	r1, #1
 800516a:	480b      	ldr	r0, [pc, #44]	; (8005198 <checkAktifCalisma+0x380>)
 800516c:	f004 f918 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d126      	bne.n	80051c4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005176:	4b11      	ldr	r3, [pc, #68]	; (80051bc <checkAktifCalisma+0x3a4>)
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e025      	b.n	80051ca <checkAktifCalisma+0x3b2>
 800517e:	bf00      	nop
 8005180:	40010c00 	.word	0x40010c00
 8005184:	20000231 	.word	0x20000231
 8005188:	2000020b 	.word	0x2000020b
 800518c:	2000020f 	.word	0x2000020f
 8005190:	20000235 	.word	0x20000235
 8005194:	20000238 	.word	0x20000238
 8005198:	40011000 	.word	0x40011000
 800519c:	2000024e 	.word	0x2000024e
 80051a0:	2000024f 	.word	0x2000024f
 80051a4:	200001ff 	.word	0x200001ff
 80051a8:	2000022d 	.word	0x2000022d
 80051ac:	200001d8 	.word	0x200001d8
 80051b0:	200001e4 	.word	0x200001e4
 80051b4:	20000210 	.word	0x20000210
 80051b8:	20000200 	.word	0x20000200
 80051bc:	20000253 	.word	0x20000253
 80051c0:	200001fd 	.word	0x200001fd
			} else {
				cerceveVar=0;
 80051c4:	4b7f      	ldr	r3, [pc, #508]	; (80053c4 <checkAktifCalisma+0x5ac>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80051ca:	4b7f      	ldr	r3, [pc, #508]	; (80053c8 <checkAktifCalisma+0x5b0>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d17c      	bne.n	80052cc <checkAktifCalisma+0x4b4>
 80051d2:	4b7e      	ldr	r3, [pc, #504]	; (80053cc <checkAktifCalisma+0x5b4>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d078      	beq.n	80052cc <checkAktifCalisma+0x4b4>
 80051da:	4b7d      	ldr	r3, [pc, #500]	; (80053d0 <checkAktifCalisma+0x5b8>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d074      	beq.n	80052cc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80051e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051e6:	487b      	ldr	r0, [pc, #492]	; (80053d4 <checkAktifCalisma+0x5bc>)
 80051e8:	f004 f8da 	bl	80093a0 <HAL_GPIO_ReadPin>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <checkAktifCalisma+0x3e2>
 80051f2:	4b79      	ldr	r3, [pc, #484]	; (80053d8 <checkAktifCalisma+0x5c0>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d068      	beq.n	80052cc <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80051fa:	4b72      	ldr	r3, [pc, #456]	; (80053c4 <checkAktifCalisma+0x5ac>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d064      	beq.n	80052cc <checkAktifCalisma+0x4b4>
 8005202:	4b76      	ldr	r3, [pc, #472]	; (80053dc <checkAktifCalisma+0x5c4>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d05d      	beq.n	80052cc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005210:	2104      	movs	r1, #4
 8005212:	4873      	ldr	r0, [pc, #460]	; (80053e0 <checkAktifCalisma+0x5c8>)
 8005214:	f004 f8c4 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <checkAktifCalisma+0x40e>
 800521e:	4b71      	ldr	r3, [pc, #452]	; (80053e4 <checkAktifCalisma+0x5cc>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d152      	bne.n	80052cc <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800522a:	486a      	ldr	r0, [pc, #424]	; (80053d4 <checkAktifCalisma+0x5bc>)
 800522c:	f004 f8b8 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005230:	4603      	mov	r3, r0
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10e      	bne.n	8005254 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800523a:	4866      	ldr	r0, [pc, #408]	; (80053d4 <checkAktifCalisma+0x5bc>)
 800523c:	f004 f8b0 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d106      	bne.n	8005254 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005246:	2140      	movs	r1, #64	; 0x40
 8005248:	4865      	ldr	r0, [pc, #404]	; (80053e0 <checkAktifCalisma+0x5c8>)
 800524a:	f004 f8a9 	bl	80093a0 <HAL_GPIO_ReadPin>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d003      	beq.n	800525c <checkAktifCalisma+0x444>
 8005254:	4b64      	ldr	r3, [pc, #400]	; (80053e8 <checkAktifCalisma+0x5d0>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d037      	beq.n	80052cc <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800525c:	4b63      	ldr	r3, [pc, #396]	; (80053ec <checkAktifCalisma+0x5d4>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f083 0301 	eor.w	r3, r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d030      	beq.n	80052cc <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800526a:	4b61      	ldr	r3, [pc, #388]	; (80053f0 <checkAktifCalisma+0x5d8>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f083 0301 	eor.w	r3, r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d029      	beq.n	80052cc <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005278:	4b5e      	ldr	r3, [pc, #376]	; (80053f4 <checkAktifCalisma+0x5dc>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f083 0301 	eor.w	r3, r3, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d022      	beq.n	80052cc <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005286:	4b5c      	ldr	r3, [pc, #368]	; (80053f8 <checkAktifCalisma+0x5e0>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f083 0301 	eor.w	r3, r3, #1
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005294:	4b59      	ldr	r3, [pc, #356]	; (80053fc <checkAktifCalisma+0x5e4>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	f083 0301 	eor.w	r3, r3, #1
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d014      	beq.n	80052cc <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <checkAktifCalisma+0x5e8>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	f083 0301 	eor.w	r3, r3, #1
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00d      	beq.n	80052cc <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80052b0:	2201      	movs	r2, #1
 80052b2:	2102      	movs	r1, #2
 80052b4:	4847      	ldr	r0, [pc, #284]	; (80053d4 <checkAktifCalisma+0x5bc>)
 80052b6:	f004 f88a 	bl	80093ce <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80052ba:	4b4b      	ldr	r3, [pc, #300]	; (80053e8 <checkAktifCalisma+0x5d0>)
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80052c0:	4b50      	ldr	r3, [pc, #320]	; (8005404 <checkAktifCalisma+0x5ec>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80052c6:	4b50      	ldr	r3, [pc, #320]	; (8005408 <checkAktifCalisma+0x5f0>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80052cc:	4b46      	ldr	r3, [pc, #280]	; (80053e8 <checkAktifCalisma+0x5d0>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d033      	beq.n	800533c <checkAktifCalisma+0x524>
 80052d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052d8:	483e      	ldr	r0, [pc, #248]	; (80053d4 <checkAktifCalisma+0x5bc>)
 80052da:	f004 f861 	bl	80093a0 <HAL_GPIO_ReadPin>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d106      	bne.n	80052f2 <checkAktifCalisma+0x4da>
 80052e4:	4b3c      	ldr	r3, [pc, #240]	; (80053d8 <checkAktifCalisma+0x5c0>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	f083 0301 	eor.w	r3, r3, #1
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <checkAktifCalisma+0x4f0>
 80052f2:	2104      	movs	r1, #4
 80052f4:	483a      	ldr	r0, [pc, #232]	; (80053e0 <checkAktifCalisma+0x5c8>)
 80052f6:	f004 f853 	bl	80093a0 <HAL_GPIO_ReadPin>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d11d      	bne.n	800533c <checkAktifCalisma+0x524>
 8005300:	4b38      	ldr	r3, [pc, #224]	; (80053e4 <checkAktifCalisma+0x5cc>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d019      	beq.n	800533c <checkAktifCalisma+0x524>
 8005308:	4b30      	ldr	r3, [pc, #192]	; (80053cc <checkAktifCalisma+0x5b4>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <checkAktifCalisma+0x524>
 8005310:	4b2f      	ldr	r3, [pc, #188]	; (80053d0 <checkAktifCalisma+0x5b8>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d011      	beq.n	800533c <checkAktifCalisma+0x524>
 8005318:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <checkAktifCalisma+0x5ac>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <checkAktifCalisma+0x524>
 8005320:	4b3a      	ldr	r3, [pc, #232]	; (800540c <checkAktifCalisma+0x5f4>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f083 0301 	eor.w	r3, r3, #1
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d006      	beq.n	800533c <checkAktifCalisma+0x524>
			timer2=millis;
 800532e:	4b38      	ldr	r3, [pc, #224]	; (8005410 <checkAktifCalisma+0x5f8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a38      	ldr	r2, [pc, #224]	; (8005414 <checkAktifCalisma+0x5fc>)
 8005334:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005336:	4b35      	ldr	r3, [pc, #212]	; (800540c <checkAktifCalisma+0x5f4>)
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800533c:	4b34      	ldr	r3, [pc, #208]	; (8005410 <checkAktifCalisma+0x5f8>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <checkAktifCalisma+0x5fc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	4a34      	ldr	r2, [pc, #208]	; (8005418 <checkAktifCalisma+0x600>)
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	4293      	cmp	r3, r2
 800534c:	d303      	bcc.n	8005356 <checkAktifCalisma+0x53e>
 800534e:	4b2f      	ldr	r3, [pc, #188]	; (800540c <checkAktifCalisma+0x5f4>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d114      	bne.n	8005380 <checkAktifCalisma+0x568>
 8005356:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <checkAktifCalisma+0x5b4>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	f083 0301 	eor.w	r3, r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10d      	bne.n	8005380 <checkAktifCalisma+0x568>
 8005364:	4b1a      	ldr	r3, [pc, #104]	; (80053d0 <checkAktifCalisma+0x5b8>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	f083 0301 	eor.w	r3, r3, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <checkAktifCalisma+0x568>
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <checkAktifCalisma+0x5ac>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	f083 0301 	eor.w	r3, r3, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005380:	2200      	movs	r2, #0
 8005382:	2102      	movs	r1, #2
 8005384:	4813      	ldr	r0, [pc, #76]	; (80053d4 <checkAktifCalisma+0x5bc>)
 8005386:	f004 f822 	bl	80093ce <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800538a:	4b17      	ldr	r3, [pc, #92]	; (80053e8 <checkAktifCalisma+0x5d0>)
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <checkAktifCalisma+0x5f4>)
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <checkAktifCalisma+0x5d0>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d040      	beq.n	8005420 <checkAktifCalisma+0x608>
 800539e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053a2:	480f      	ldr	r0, [pc, #60]	; (80053e0 <checkAktifCalisma+0x5c8>)
 80053a4:	f003 fffc 	bl	80093a0 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d138      	bne.n	8005420 <checkAktifCalisma+0x608>
 80053ae:	4b1b      	ldr	r3, [pc, #108]	; (800541c <checkAktifCalisma+0x604>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d034      	beq.n	8005420 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80053b6:	2201      	movs	r2, #1
 80053b8:	2101      	movs	r1, #1
 80053ba:	4806      	ldr	r0, [pc, #24]	; (80053d4 <checkAktifCalisma+0x5bc>)
 80053bc:	f004 f807 	bl	80093ce <HAL_GPIO_WritePin>
 80053c0:	e033      	b.n	800542a <checkAktifCalisma+0x612>
 80053c2:	bf00      	nop
 80053c4:	20000253 	.word	0x20000253
 80053c8:	20000219 	.word	0x20000219
 80053cc:	2000024e 	.word	0x2000024e
 80053d0:	2000024f 	.word	0x2000024f
 80053d4:	40010c00 	.word	0x40010c00
 80053d8:	20000239 	.word	0x20000239
 80053dc:	2000024d 	.word	0x2000024d
 80053e0:	40011000 	.word	0x40011000
 80053e4:	20000202 	.word	0x20000202
 80053e8:	20000234 	.word	0x20000234
 80053ec:	20000231 	.word	0x20000231
 80053f0:	20000235 	.word	0x20000235
 80053f4:	20000232 	.word	0x20000232
 80053f8:	20000233 	.word	0x20000233
 80053fc:	20000236 	.word	0x20000236
 8005400:	20000237 	.word	0x20000237
 8005404:	2000023c 	.word	0x2000023c
 8005408:	2000025d 	.word	0x2000025d
 800540c:	2000022c 	.word	0x2000022c
 8005410:	200001d8 	.word	0x200001d8
 8005414:	200001e4 	.word	0x200001e4
 8005418:	20000211 	.word	0x20000211
 800541c:	20000201 	.word	0x20000201
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005420:	2200      	movs	r2, #0
 8005422:	2101      	movs	r1, #1
 8005424:	4836      	ldr	r0, [pc, #216]	; (8005500 <checkAktifCalisma+0x6e8>)
 8005426:	f003 ffd2 	bl	80093ce <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800542a:	4b36      	ldr	r3, [pc, #216]	; (8005504 <checkAktifCalisma+0x6ec>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 8080 	bne.w	8005534 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005434:	4b34      	ldr	r3, [pc, #208]	; (8005508 <checkAktifCalisma+0x6f0>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d003      	beq.n	8005444 <checkAktifCalisma+0x62c>
 800543c:	4b32      	ldr	r3, [pc, #200]	; (8005508 <checkAktifCalisma+0x6f0>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d177      	bne.n	8005534 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005444:	4b31      	ldr	r3, [pc, #196]	; (800550c <checkAktifCalisma+0x6f4>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d073      	beq.n	8005534 <checkAktifCalisma+0x71c>
 800544c:	4b30      	ldr	r3, [pc, #192]	; (8005510 <checkAktifCalisma+0x6f8>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d06f      	beq.n	8005534 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005458:	4829      	ldr	r0, [pc, #164]	; (8005500 <checkAktifCalisma+0x6e8>)
 800545a:	f003 ffa1 	bl	80093a0 <HAL_GPIO_ReadPin>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d167      	bne.n	8005534 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005468:	482a      	ldr	r0, [pc, #168]	; (8005514 <checkAktifCalisma+0x6fc>)
 800546a:	f003 ff99 	bl	80093a0 <HAL_GPIO_ReadPin>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <checkAktifCalisma+0x664>
 8005474:	4b28      	ldr	r3, [pc, #160]	; (8005518 <checkAktifCalisma+0x700>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d15b      	bne.n	8005534 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800547c:	2140      	movs	r1, #64	; 0x40
 800547e:	4825      	ldr	r0, [pc, #148]	; (8005514 <checkAktifCalisma+0x6fc>)
 8005480:	f003 ff8e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d10f      	bne.n	80054aa <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800548a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800548e:	481c      	ldr	r0, [pc, #112]	; (8005500 <checkAktifCalisma+0x6e8>)
 8005490:	f003 ff86 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005494:	4603      	mov	r3, r0
 8005496:	2b01      	cmp	r3, #1
 8005498:	d107      	bne.n	80054aa <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800549a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800549e:	4818      	ldr	r0, [pc, #96]	; (8005500 <checkAktifCalisma+0x6e8>)
 80054a0:	f003 ff7e 	bl	80093a0 <HAL_GPIO_ReadPin>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d003      	beq.n	80054b2 <checkAktifCalisma+0x69a>
 80054aa:	4b1c      	ldr	r3, [pc, #112]	; (800551c <checkAktifCalisma+0x704>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d040      	beq.n	8005534 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80054b2:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <checkAktifCalisma+0x708>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	f083 0301 	eor.w	r3, r3, #1
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d039      	beq.n	8005534 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80054c0:	4b18      	ldr	r3, [pc, #96]	; (8005524 <checkAktifCalisma+0x70c>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f083 0301 	eor.w	r3, r3, #1
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d032      	beq.n	8005534 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <checkAktifCalisma+0x710>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	f083 0301 	eor.w	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d02b      	beq.n	8005534 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <checkAktifCalisma+0x714>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f083 0301 	eor.w	r3, r3, #1
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d024      	beq.n	8005534 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80054ea:	4b11      	ldr	r3, [pc, #68]	; (8005530 <checkAktifCalisma+0x718>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f083 0301 	eor.w	r3, r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01d      	beq.n	8005534 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80054f8:	4b08      	ldr	r3, [pc, #32]	; (800551c <checkAktifCalisma+0x704>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e01c      	b.n	800553a <checkAktifCalisma+0x722>
 8005500:	40010c00 	.word	0x40010c00
 8005504:	20000219 	.word	0x20000219
 8005508:	2000020b 	.word	0x2000020b
 800550c:	2000024e 	.word	0x2000024e
 8005510:	2000024f 	.word	0x2000024f
 8005514:	40011000 	.word	0x40011000
 8005518:	2000020c 	.word	0x2000020c
 800551c:	20000232 	.word	0x20000232
 8005520:	20000231 	.word	0x20000231
 8005524:	20000235 	.word	0x20000235
 8005528:	20000234 	.word	0x20000234
 800552c:	20000233 	.word	0x20000233
 8005530:	20000237 	.word	0x20000237
		} else {
			devmotoryukaricalisiyor=0;
 8005534:	4b64      	ldr	r3, [pc, #400]	; (80056c8 <checkAktifCalisma+0x8b0>)
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800553a:	4b63      	ldr	r3, [pc, #396]	; (80056c8 <checkAktifCalisma+0x8b0>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005542:	2201      	movs	r2, #1
 8005544:	2120      	movs	r1, #32
 8005546:	4861      	ldr	r0, [pc, #388]	; (80056cc <checkAktifCalisma+0x8b4>)
 8005548:	f003 ff41 	bl	80093ce <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800554c:	4b60      	ldr	r3, [pc, #384]	; (80056d0 <checkAktifCalisma+0x8b8>)
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005552:	4b5f      	ldr	r3, [pc, #380]	; (80056d0 <checkAktifCalisma+0x8b8>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d025      	beq.n	80055a6 <checkAktifCalisma+0x78e>
 800555a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800555e:	485d      	ldr	r0, [pc, #372]	; (80056d4 <checkAktifCalisma+0x8bc>)
 8005560:	f003 ff1e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005564:	4603      	mov	r3, r0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d007      	beq.n	800557a <checkAktifCalisma+0x762>
 800556a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800556e:	4857      	ldr	r0, [pc, #348]	; (80056cc <checkAktifCalisma+0x8b4>)
 8005570:	f003 ff16 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d115      	bne.n	80055a6 <checkAktifCalisma+0x78e>
 800557a:	4b57      	ldr	r3, [pc, #348]	; (80056d8 <checkAktifCalisma+0x8c0>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d011      	beq.n	80055a6 <checkAktifCalisma+0x78e>
 8005582:	4b56      	ldr	r3, [pc, #344]	; (80056dc <checkAktifCalisma+0x8c4>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00d      	beq.n	80055a6 <checkAktifCalisma+0x78e>
 800558a:	4b55      	ldr	r3, [pc, #340]	; (80056e0 <checkAktifCalisma+0x8c8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f083 0301 	eor.w	r3, r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d006      	beq.n	80055a6 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005598:	4b52      	ldr	r3, [pc, #328]	; (80056e4 <checkAktifCalisma+0x8cc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a52      	ldr	r2, [pc, #328]	; (80056e8 <checkAktifCalisma+0x8d0>)
 800559e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80055a0:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <checkAktifCalisma+0x8c8>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055a6:	4b4f      	ldr	r3, [pc, #316]	; (80056e4 <checkAktifCalisma+0x8cc>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b4f      	ldr	r3, [pc, #316]	; (80056e8 <checkAktifCalisma+0x8d0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	4a4e      	ldr	r2, [pc, #312]	; (80056ec <checkAktifCalisma+0x8d4>)
 80055b2:	7812      	ldrb	r2, [r2, #0]
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d303      	bcc.n	80055c0 <checkAktifCalisma+0x7a8>
 80055b8:	4b49      	ldr	r3, [pc, #292]	; (80056e0 <checkAktifCalisma+0x8c8>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <checkAktifCalisma+0x7c4>
 80055c0:	4b45      	ldr	r3, [pc, #276]	; (80056d8 <checkAktifCalisma+0x8c0>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	f083 0301 	eor.w	r3, r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <checkAktifCalisma+0x7c4>
 80055ce:	4b43      	ldr	r3, [pc, #268]	; (80056dc <checkAktifCalisma+0x8c4>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	f083 0301 	eor.w	r3, r3, #1
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80055dc:	2200      	movs	r2, #0
 80055de:	2120      	movs	r1, #32
 80055e0:	483a      	ldr	r0, [pc, #232]	; (80056cc <checkAktifCalisma+0x8b4>)
 80055e2:	f003 fef4 	bl	80093ce <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80055e6:	4b3a      	ldr	r3, [pc, #232]	; (80056d0 <checkAktifCalisma+0x8b8>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80055ec:	4b3c      	ldr	r3, [pc, #240]	; (80056e0 <checkAktifCalisma+0x8c8>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80055f2:	4b3f      	ldr	r3, [pc, #252]	; (80056f0 <checkAktifCalisma+0x8d8>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 8088 	bne.w	800570c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80055fc:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <checkAktifCalisma+0x8dc>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d003      	beq.n	800560c <checkAktifCalisma+0x7f4>
 8005604:	4b3b      	ldr	r3, [pc, #236]	; (80056f4 <checkAktifCalisma+0x8dc>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d17f      	bne.n	800570c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 800560c:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <checkAktifCalisma+0x8c0>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d07b      	beq.n	800570c <checkAktifCalisma+0x8f4>
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <checkAktifCalisma+0x8c4>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d077      	beq.n	800570c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800561c:	2140      	movs	r1, #64	; 0x40
 800561e:	482b      	ldr	r0, [pc, #172]	; (80056cc <checkAktifCalisma+0x8b4>)
 8005620:	f003 febe 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d170      	bne.n	800570c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800562a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800562e:	4827      	ldr	r0, [pc, #156]	; (80056cc <checkAktifCalisma+0x8b4>)
 8005630:	f003 feb6 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <checkAktifCalisma+0x82a>
 800563a:	4b2f      	ldr	r3, [pc, #188]	; (80056f8 <checkAktifCalisma+0x8e0>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d164      	bne.n	800570c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005646:	4823      	ldr	r0, [pc, #140]	; (80056d4 <checkAktifCalisma+0x8bc>)
 8005648:	f003 feaa 	bl	80093a0 <HAL_GPIO_ReadPin>
 800564c:	4603      	mov	r3, r0
 800564e:	2b01      	cmp	r3, #1
 8005650:	d10f      	bne.n	8005672 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005656:	481f      	ldr	r0, [pc, #124]	; (80056d4 <checkAktifCalisma+0x8bc>)
 8005658:	f003 fea2 	bl	80093a0 <HAL_GPIO_ReadPin>
 800565c:	4603      	mov	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d107      	bne.n	8005672 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005666:	481b      	ldr	r0, [pc, #108]	; (80056d4 <checkAktifCalisma+0x8bc>)
 8005668:	f003 fe9a 	bl	80093a0 <HAL_GPIO_ReadPin>
 800566c:	4603      	mov	r3, r0
 800566e:	2b01      	cmp	r3, #1
 8005670:	d003      	beq.n	800567a <checkAktifCalisma+0x862>
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <checkAktifCalisma+0x8e4>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d048      	beq.n	800570c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800567a:	4b21      	ldr	r3, [pc, #132]	; (8005700 <checkAktifCalisma+0x8e8>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f083 0301 	eor.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d041      	beq.n	800570c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005688:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <checkAktifCalisma+0x8ec>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f083 0301 	eor.w	r3, r3, #1
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d03a      	beq.n	800570c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <checkAktifCalisma+0x8f0>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f083 0301 	eor.w	r3, r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d033      	beq.n	800570c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80056a4:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <checkAktifCalisma+0x8b8>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f083 0301 	eor.w	r3, r3, #1
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02c      	beq.n	800570c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <checkAktifCalisma+0x8b0>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f083 0301 	eor.w	r3, r3, #1
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d025      	beq.n	800570c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80056c0:	4b0e      	ldr	r3, [pc, #56]	; (80056fc <checkAktifCalisma+0x8e4>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e024      	b.n	8005712 <checkAktifCalisma+0x8fa>
 80056c8:	20000232 	.word	0x20000232
 80056cc:	40011000 	.word	0x40011000
 80056d0:	20000236 	.word	0x20000236
 80056d4:	40010c00 	.word	0x40010c00
 80056d8:	2000024e 	.word	0x2000024e
 80056dc:	2000024f 	.word	0x2000024f
 80056e0:	2000022e 	.word	0x2000022e
 80056e4:	200001d8 	.word	0x200001d8
 80056e8:	200001e4 	.word	0x200001e4
 80056ec:	20000212 	.word	0x20000212
 80056f0:	20000219 	.word	0x20000219
 80056f4:	2000020b 	.word	0x2000020b
 80056f8:	2000020d 	.word	0x2000020d
 80056fc:	20000233 	.word	0x20000233
 8005700:	20000231 	.word	0x20000231
 8005704:	20000235 	.word	0x20000235
 8005708:	20000234 	.word	0x20000234
		} else {
			devmotorasagicalisiyor=0;
 800570c:	4b96      	ldr	r3, [pc, #600]	; (8005968 <checkAktifCalisma+0xb50>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005712:	4b95      	ldr	r3, [pc, #596]	; (8005968 <checkAktifCalisma+0xb50>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d007      	beq.n	800572a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800571a:	2201      	movs	r2, #1
 800571c:	2110      	movs	r1, #16
 800571e:	4893      	ldr	r0, [pc, #588]	; (800596c <checkAktifCalisma+0xb54>)
 8005720:	f003 fe55 	bl	80093ce <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005724:	4b92      	ldr	r3, [pc, #584]	; (8005970 <checkAktifCalisma+0xb58>)
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800572a:	4b91      	ldr	r3, [pc, #580]	; (8005970 <checkAktifCalisma+0xb58>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d024      	beq.n	800577c <checkAktifCalisma+0x964>
 8005732:	2140      	movs	r1, #64	; 0x40
 8005734:	488d      	ldr	r0, [pc, #564]	; (800596c <checkAktifCalisma+0xb54>)
 8005736:	f003 fe33 	bl	80093a0 <HAL_GPIO_ReadPin>
 800573a:	4603      	mov	r3, r0
 800573c:	2b01      	cmp	r3, #1
 800573e:	d007      	beq.n	8005750 <checkAktifCalisma+0x938>
 8005740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005744:	4889      	ldr	r0, [pc, #548]	; (800596c <checkAktifCalisma+0xb54>)
 8005746:	f003 fe2b 	bl	80093a0 <HAL_GPIO_ReadPin>
 800574a:	4603      	mov	r3, r0
 800574c:	2b01      	cmp	r3, #1
 800574e:	d115      	bne.n	800577c <checkAktifCalisma+0x964>
 8005750:	4b88      	ldr	r3, [pc, #544]	; (8005974 <checkAktifCalisma+0xb5c>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d011      	beq.n	800577c <checkAktifCalisma+0x964>
 8005758:	4b87      	ldr	r3, [pc, #540]	; (8005978 <checkAktifCalisma+0xb60>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00d      	beq.n	800577c <checkAktifCalisma+0x964>
 8005760:	4b86      	ldr	r3, [pc, #536]	; (800597c <checkAktifCalisma+0xb64>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f083 0301 	eor.w	r3, r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d006      	beq.n	800577c <checkAktifCalisma+0x964>
			timer2=millis;
 800576e:	4b84      	ldr	r3, [pc, #528]	; (8005980 <checkAktifCalisma+0xb68>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a84      	ldr	r2, [pc, #528]	; (8005984 <checkAktifCalisma+0xb6c>)
 8005774:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005776:	4b81      	ldr	r3, [pc, #516]	; (800597c <checkAktifCalisma+0xb64>)
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800577c:	4b80      	ldr	r3, [pc, #512]	; (8005980 <checkAktifCalisma+0xb68>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	4b80      	ldr	r3, [pc, #512]	; (8005984 <checkAktifCalisma+0xb6c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4a80      	ldr	r2, [pc, #512]	; (8005988 <checkAktifCalisma+0xb70>)
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	4293      	cmp	r3, r2
 800578c:	d303      	bcc.n	8005796 <checkAktifCalisma+0x97e>
 800578e:	4b7b      	ldr	r3, [pc, #492]	; (800597c <checkAktifCalisma+0xb64>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <checkAktifCalisma+0x99a>
 8005796:	4b77      	ldr	r3, [pc, #476]	; (8005974 <checkAktifCalisma+0xb5c>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	f083 0301 	eor.w	r3, r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <checkAktifCalisma+0x99a>
 80057a4:	4b74      	ldr	r3, [pc, #464]	; (8005978 <checkAktifCalisma+0xb60>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f083 0301 	eor.w	r3, r3, #1
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80057b2:	2200      	movs	r2, #0
 80057b4:	2110      	movs	r1, #16
 80057b6:	486d      	ldr	r0, [pc, #436]	; (800596c <checkAktifCalisma+0xb54>)
 80057b8:	f003 fe09 	bl	80093ce <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80057bc:	4b6c      	ldr	r3, [pc, #432]	; (8005970 <checkAktifCalisma+0xb58>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80057c2:	4b6e      	ldr	r3, [pc, #440]	; (800597c <checkAktifCalisma+0xb64>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80057c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057cc:	486f      	ldr	r0, [pc, #444]	; (800598c <checkAktifCalisma+0xb74>)
 80057ce:	f003 fde7 	bl	80093a0 <HAL_GPIO_ReadPin>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d120      	bne.n	800581a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80057d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057dc:	486b      	ldr	r0, [pc, #428]	; (800598c <checkAktifCalisma+0xb74>)
 80057de:	f003 fddf 	bl	80093a0 <HAL_GPIO_ReadPin>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d118      	bne.n	800581a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80057e8:	2104      	movs	r1, #4
 80057ea:	4868      	ldr	r0, [pc, #416]	; (800598c <checkAktifCalisma+0xb74>)
 80057ec:	f003 fdd8 	bl	80093a0 <HAL_GPIO_ReadPin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d111      	bne.n	800581a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80057f6:	2102      	movs	r1, #2
 80057f8:	4864      	ldr	r0, [pc, #400]	; (800598c <checkAktifCalisma+0xb74>)
 80057fa:	f003 fdd1 	bl	80093a0 <HAL_GPIO_ReadPin>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005804:	2101      	movs	r1, #1
 8005806:	4861      	ldr	r0, [pc, #388]	; (800598c <checkAktifCalisma+0xb74>)
 8005808:	f003 fdca 	bl	80093a0 <HAL_GPIO_ReadPin>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <checkAktifCalisma+0xa02>
			makineStop=1;
 8005812:	4b5f      	ldr	r3, [pc, #380]	; (8005990 <checkAktifCalisma+0xb78>)
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e002      	b.n	8005820 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800581a:	4b5d      	ldr	r3, [pc, #372]	; (8005990 <checkAktifCalisma+0xb78>)
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005820:	4b5c      	ldr	r3, [pc, #368]	; (8005994 <checkAktifCalisma+0xb7c>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d144      	bne.n	80058b2 <checkAktifCalisma+0xa9a>
 8005828:	4b5b      	ldr	r3, [pc, #364]	; (8005998 <checkAktifCalisma+0xb80>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d003      	beq.n	8005838 <checkAktifCalisma+0xa20>
 8005830:	4b59      	ldr	r3, [pc, #356]	; (8005998 <checkAktifCalisma+0xb80>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d13c      	bne.n	80058b2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005838:	2180      	movs	r1, #128	; 0x80
 800583a:	484c      	ldr	r0, [pc, #304]	; (800596c <checkAktifCalisma+0xb54>)
 800583c:	f003 fdb0 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <checkAktifCalisma+0xa36>
 8005846:	4b55      	ldr	r3, [pc, #340]	; (800599c <checkAktifCalisma+0xb84>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <checkAktifCalisma+0xa4e>
 800584e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005852:	484e      	ldr	r0, [pc, #312]	; (800598c <checkAktifCalisma+0xb74>)
 8005854:	f003 fda4 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d129      	bne.n	80058b2 <checkAktifCalisma+0xa9a>
 800585e:	4b4f      	ldr	r3, [pc, #316]	; (800599c <checkAktifCalisma+0xb84>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d125      	bne.n	80058b2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005866:	2104      	movs	r1, #4
 8005868:	4840      	ldr	r0, [pc, #256]	; (800596c <checkAktifCalisma+0xb54>)
 800586a:	f003 fd99 	bl	80093a0 <HAL_GPIO_ReadPin>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d003      	beq.n	800587c <checkAktifCalisma+0xa64>
 8005874:	4b4a      	ldr	r3, [pc, #296]	; (80059a0 <checkAktifCalisma+0xb88>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11a      	bne.n	80058b2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800587c:	2102      	movs	r1, #2
 800587e:	483b      	ldr	r0, [pc, #236]	; (800596c <checkAktifCalisma+0xb54>)
 8005880:	f003 fd8e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d113      	bne.n	80058b2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800588a:	4b46      	ldr	r3, [pc, #280]	; (80059a4 <checkAktifCalisma+0xb8c>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	f083 0301 	eor.w	r3, r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00c      	beq.n	80058b2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005898:	4b3d      	ldr	r3, [pc, #244]	; (8005990 <checkAktifCalisma+0xb78>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80058a0:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <checkAktifCalisma+0xb90>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058a6:	4b36      	ldr	r3, [pc, #216]	; (8005980 <checkAktifCalisma+0xb68>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a40      	ldr	r2, [pc, #256]	; (80059ac <checkAktifCalisma+0xb94>)
 80058ac:	6013      	str	r3, [r2, #0]
			bekle();
 80058ae:	f7ff f935 	bl	8004b1c <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80058b2:	4b33      	ldr	r3, [pc, #204]	; (8005980 <checkAktifCalisma+0xb68>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4b3d      	ldr	r3, [pc, #244]	; (80059ac <checkAktifCalisma+0xb94>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	4a3c      	ldr	r2, [pc, #240]	; (80059b0 <checkAktifCalisma+0xb98>)
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d211      	bcs.n	80058e8 <checkAktifCalisma+0xad0>
 80058c4:	2104      	movs	r1, #4
 80058c6:	4829      	ldr	r0, [pc, #164]	; (800596c <checkAktifCalisma+0xb54>)
 80058c8:	f003 fd6a 	bl	80093a0 <HAL_GPIO_ReadPin>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <checkAktifCalisma+0xad0>
 80058d2:	4b33      	ldr	r3, [pc, #204]	; (80059a0 <checkAktifCalisma+0xb88>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <checkAktifCalisma+0xad0>
 80058da:	4b2d      	ldr	r3, [pc, #180]	; (8005990 <checkAktifCalisma+0xb78>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	f083 0301 	eor.w	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80058e8:	4b2f      	ldr	r3, [pc, #188]	; (80059a8 <checkAktifCalisma+0xb90>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058ee:	4b29      	ldr	r3, [pc, #164]	; (8005994 <checkAktifCalisma+0xb7c>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d160      	bne.n	80059b8 <checkAktifCalisma+0xba0>
 80058f6:	4b28      	ldr	r3, [pc, #160]	; (8005998 <checkAktifCalisma+0xb80>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d003      	beq.n	8005906 <checkAktifCalisma+0xaee>
 80058fe:	4b26      	ldr	r3, [pc, #152]	; (8005998 <checkAktifCalisma+0xb80>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d158      	bne.n	80059b8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005906:	2104      	movs	r1, #4
 8005908:	4818      	ldr	r0, [pc, #96]	; (800596c <checkAktifCalisma+0xb54>)
 800590a:	f003 fd49 	bl	80093a0 <HAL_GPIO_ReadPin>
 800590e:	4603      	mov	r3, r0
 8005910:	2b01      	cmp	r3, #1
 8005912:	d003      	beq.n	800591c <checkAktifCalisma+0xb04>
 8005914:	4b22      	ldr	r3, [pc, #136]	; (80059a0 <checkAktifCalisma+0xb88>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d14d      	bne.n	80059b8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800591c:	2102      	movs	r1, #2
 800591e:	4813      	ldr	r0, [pc, #76]	; (800596c <checkAktifCalisma+0xb54>)
 8005920:	f003 fd3e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d146      	bne.n	80059b8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	480f      	ldr	r0, [pc, #60]	; (800596c <checkAktifCalisma+0xb54>)
 800592e:	f003 fd37 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d103      	bne.n	8005940 <checkAktifCalisma+0xb28>
 8005938:	4b18      	ldr	r3, [pc, #96]	; (800599c <checkAktifCalisma+0xb84>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <checkAktifCalisma+0xb40>
 8005940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005944:	4811      	ldr	r0, [pc, #68]	; (800598c <checkAktifCalisma+0xb74>)
 8005946:	f003 fd2b 	bl	80093a0 <HAL_GPIO_ReadPin>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d133      	bne.n	80059b8 <checkAktifCalisma+0xba0>
 8005950:	4b12      	ldr	r3, [pc, #72]	; (800599c <checkAktifCalisma+0xb84>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d12f      	bne.n	80059b8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005958:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <checkAktifCalisma+0xb78>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d02b      	beq.n	80059b8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005960:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <checkAktifCalisma+0xb9c>)
 8005962:	2201      	movs	r2, #1
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e02a      	b.n	80059be <checkAktifCalisma+0xba6>
 8005968:	20000233 	.word	0x20000233
 800596c:	40011000 	.word	0x40011000
 8005970:	20000237 	.word	0x20000237
 8005974:	2000024e 	.word	0x2000024e
 8005978:	2000024f 	.word	0x2000024f
 800597c:	2000022f 	.word	0x2000022f
 8005980:	200001d8 	.word	0x200001d8
 8005984:	200001e4 	.word	0x200001e4
 8005988:	20000212 	.word	0x20000212
 800598c:	40010c00 	.word	0x40010c00
 8005990:	2000023e 	.word	0x2000023e
 8005994:	20000205 	.word	0x20000205
 8005998:	20000204 	.word	0x20000204
 800599c:	20000208 	.word	0x20000208
 80059a0:	20000202 	.word	0x20000202
 80059a4:	2000022b 	.word	0x2000022b
 80059a8:	2000023f 	.word	0x2000023f
 80059ac:	200001dc 	.word	0x200001dc
 80059b0:	20000215 	.word	0x20000215
 80059b4:	20000240 	.word	0x20000240
		} else {
			kapi1butonkontrol=0;
 80059b8:	4b8b      	ldr	r3, [pc, #556]	; (8005be8 <checkAktifCalisma+0xdd0>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059be:	4b8b      	ldr	r3, [pc, #556]	; (8005bec <checkAktifCalisma+0xdd4>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d121      	bne.n	8005a0a <checkAktifCalisma+0xbf2>
 80059c6:	4b8a      	ldr	r3, [pc, #552]	; (8005bf0 <checkAktifCalisma+0xdd8>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d003      	beq.n	80059d6 <checkAktifCalisma+0xbbe>
 80059ce:	4b88      	ldr	r3, [pc, #544]	; (8005bf0 <checkAktifCalisma+0xdd8>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d119      	bne.n	8005a0a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059d6:	2104      	movs	r1, #4
 80059d8:	4886      	ldr	r0, [pc, #536]	; (8005bf4 <checkAktifCalisma+0xddc>)
 80059da:	f003 fce1 	bl	80093a0 <HAL_GPIO_ReadPin>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d003      	beq.n	80059ec <checkAktifCalisma+0xbd4>
 80059e4:	4b84      	ldr	r3, [pc, #528]	; (8005bf8 <checkAktifCalisma+0xde0>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10e      	bne.n	8005a0a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059ec:	2102      	movs	r1, #2
 80059ee:	4881      	ldr	r0, [pc, #516]	; (8005bf4 <checkAktifCalisma+0xddc>)
 80059f0:	f003 fcd6 	bl	80093a0 <HAL_GPIO_ReadPin>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80059fa:	4b80      	ldr	r3, [pc, #512]	; (8005bfc <checkAktifCalisma+0xde4>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005a02:	4b7f      	ldr	r3, [pc, #508]	; (8005c00 <checkAktifCalisma+0xde8>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e002      	b.n	8005a10 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005a0a:	4b7d      	ldr	r3, [pc, #500]	; (8005c00 <checkAktifCalisma+0xde8>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005a10:	4b75      	ldr	r3, [pc, #468]	; (8005be8 <checkAktifCalisma+0xdd0>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d107      	bne.n	8005a28 <checkAktifCalisma+0xc10>
 8005a18:	4b79      	ldr	r3, [pc, #484]	; (8005c00 <checkAktifCalisma+0xde8>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <checkAktifCalisma+0xc10>
 8005a20:	4b78      	ldr	r3, [pc, #480]	; (8005c04 <checkAktifCalisma+0xdec>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a28:	2201      	movs	r2, #1
 8005a2a:	2180      	movs	r1, #128	; 0x80
 8005a2c:	4876      	ldr	r0, [pc, #472]	; (8005c08 <checkAktifCalisma+0xdf0>)
 8005a2e:	f003 fcce 	bl	80093ce <HAL_GPIO_WritePin>
 8005a32:	e004      	b.n	8005a3e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a34:	2200      	movs	r2, #0
 8005a36:	2180      	movs	r1, #128	; 0x80
 8005a38:	4873      	ldr	r0, [pc, #460]	; (8005c08 <checkAktifCalisma+0xdf0>)
 8005a3a:	f003 fcc8 	bl	80093ce <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a3e:	4b73      	ldr	r3, [pc, #460]	; (8005c0c <checkAktifCalisma+0xdf4>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d141      	bne.n	8005aca <checkAktifCalisma+0xcb2>
 8005a46:	4b6a      	ldr	r3, [pc, #424]	; (8005bf0 <checkAktifCalisma+0xdd8>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d003      	beq.n	8005a56 <checkAktifCalisma+0xc3e>
 8005a4e:	4b68      	ldr	r3, [pc, #416]	; (8005bf0 <checkAktifCalisma+0xdd8>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d139      	bne.n	8005aca <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a5a:	4866      	ldr	r0, [pc, #408]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005a5c:	f003 fca0 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <checkAktifCalisma+0xc56>
 8005a66:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <checkAktifCalisma+0xdf8>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <checkAktifCalisma+0xc6e>
 8005a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a72:	4868      	ldr	r0, [pc, #416]	; (8005c14 <checkAktifCalisma+0xdfc>)
 8005a74:	f003 fc94 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d125      	bne.n	8005aca <checkAktifCalisma+0xcb2>
 8005a7e:	4b64      	ldr	r3, [pc, #400]	; (8005c10 <checkAktifCalisma+0xdf8>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d121      	bne.n	8005aca <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a86:	2102      	movs	r1, #2
 8005a88:	485a      	ldr	r0, [pc, #360]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005a8a:	f003 fc89 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d11a      	bne.n	8005aca <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a94:	2104      	movs	r1, #4
 8005a96:	4857      	ldr	r0, [pc, #348]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005a98:	f003 fc82 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d113      	bne.n	8005aca <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005aa2:	4b56      	ldr	r3, [pc, #344]	; (8005bfc <checkAktifCalisma+0xde4>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00f      	beq.n	8005aca <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005aaa:	4b5b      	ldr	r3, [pc, #364]	; (8005c18 <checkAktifCalisma+0xe00>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f083 0301 	eor.w	r3, r3, #1
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005ab8:	4b58      	ldr	r3, [pc, #352]	; (8005c1c <checkAktifCalisma+0xe04>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005abe:	4b58      	ldr	r3, [pc, #352]	; (8005c20 <checkAktifCalisma+0xe08>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a58      	ldr	r2, [pc, #352]	; (8005c24 <checkAktifCalisma+0xe0c>)
 8005ac4:	6013      	str	r3, [r2, #0]
			bekle();
 8005ac6:	f7ff f829 	bl	8004b1c <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005aca:	4b55      	ldr	r3, [pc, #340]	; (8005c20 <checkAktifCalisma+0xe08>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b55      	ldr	r3, [pc, #340]	; (8005c24 <checkAktifCalisma+0xe0c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	4a54      	ldr	r2, [pc, #336]	; (8005c28 <checkAktifCalisma+0xe10>)
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d20d      	bcs.n	8005af8 <checkAktifCalisma+0xce0>
 8005adc:	2102      	movs	r1, #2
 8005ade:	4845      	ldr	r0, [pc, #276]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005ae0:	f003 fc5e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <checkAktifCalisma+0xce0>
 8005aea:	4b44      	ldr	r3, [pc, #272]	; (8005bfc <checkAktifCalisma+0xde4>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	f083 0301 	eor.w	r3, r3, #1
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005af8:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <checkAktifCalisma+0xe04>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005afe:	4b43      	ldr	r3, [pc, #268]	; (8005c0c <checkAktifCalisma+0xdf4>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d135      	bne.n	8005b72 <checkAktifCalisma+0xd5a>
 8005b06:	4b3a      	ldr	r3, [pc, #232]	; (8005bf0 <checkAktifCalisma+0xdd8>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d003      	beq.n	8005b16 <checkAktifCalisma+0xcfe>
 8005b0e:	4b38      	ldr	r3, [pc, #224]	; (8005bf0 <checkAktifCalisma+0xdd8>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d12d      	bne.n	8005b72 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b1a:	4836      	ldr	r0, [pc, #216]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005b1c:	f003 fc40 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <checkAktifCalisma+0xd16>
 8005b26:	4b3a      	ldr	r3, [pc, #232]	; (8005c10 <checkAktifCalisma+0xdf8>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <checkAktifCalisma+0xd2e>
 8005b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b32:	4838      	ldr	r0, [pc, #224]	; (8005c14 <checkAktifCalisma+0xdfc>)
 8005b34:	f003 fc34 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d119      	bne.n	8005b72 <checkAktifCalisma+0xd5a>
 8005b3e:	4b34      	ldr	r3, [pc, #208]	; (8005c10 <checkAktifCalisma+0xdf8>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d115      	bne.n	8005b72 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b46:	2102      	movs	r1, #2
 8005b48:	482a      	ldr	r0, [pc, #168]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005b4a:	f003 fc29 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d10e      	bne.n	8005b72 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b54:	2104      	movs	r1, #4
 8005b56:	4827      	ldr	r0, [pc, #156]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005b58:	f003 fc22 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d107      	bne.n	8005b72 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b62:	4b26      	ldr	r3, [pc, #152]	; (8005bfc <checkAktifCalisma+0xde4>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b6a:	4b30      	ldr	r3, [pc, #192]	; (8005c2c <checkAktifCalisma+0xe14>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	e002      	b.n	8005b78 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b72:	4b2e      	ldr	r3, [pc, #184]	; (8005c2c <checkAktifCalisma+0xe14>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b78:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <checkAktifCalisma+0xdf4>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d11d      	bne.n	8005bbc <checkAktifCalisma+0xda4>
 8005b80:	4b1b      	ldr	r3, [pc, #108]	; (8005bf0 <checkAktifCalisma+0xdd8>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d003      	beq.n	8005b90 <checkAktifCalisma+0xd78>
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <checkAktifCalisma+0xdd8>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d115      	bne.n	8005bbc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b90:	2102      	movs	r1, #2
 8005b92:	4818      	ldr	r0, [pc, #96]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005b94:	f003 fc04 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d10e      	bne.n	8005bbc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b9e:	2104      	movs	r1, #4
 8005ba0:	4814      	ldr	r0, [pc, #80]	; (8005bf4 <checkAktifCalisma+0xddc>)
 8005ba2:	f003 fbfd 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <checkAktifCalisma+0xde4>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005bb4:	4b1e      	ldr	r3, [pc, #120]	; (8005c30 <checkAktifCalisma+0xe18>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <checkAktifCalisma+0xe18>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <checkAktifCalisma+0xe14>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d107      	bne.n	8005bda <checkAktifCalisma+0xdc2>
 8005bca:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <checkAktifCalisma+0xe18>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d103      	bne.n	8005bda <checkAktifCalisma+0xdc2>
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <checkAktifCalisma+0xe04>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d02c      	beq.n	8005c34 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005bda:	2201      	movs	r2, #1
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	480a      	ldr	r0, [pc, #40]	; (8005c08 <checkAktifCalisma+0xdf0>)
 8005be0:	f003 fbf5 	bl	80093ce <HAL_GPIO_WritePin>
 8005be4:	e02b      	b.n	8005c3e <checkAktifCalisma+0xe26>
 8005be6:	bf00      	nop
 8005be8:	20000240 	.word	0x20000240
 8005bec:	20000205 	.word	0x20000205
 8005bf0:	20000204 	.word	0x20000204
 8005bf4:	40011000 	.word	0x40011000
 8005bf8:	20000202 	.word	0x20000202
 8005bfc:	2000023e 	.word	0x2000023e
 8005c00:	20000241 	.word	0x20000241
 8005c04:	2000023f 	.word	0x2000023f
 8005c08:	40010800 	.word	0x40010800
 8005c0c:	20000206 	.word	0x20000206
 8005c10:	20000208 	.word	0x20000208
 8005c14:	40010c00 	.word	0x40010c00
 8005c18:	2000022b 	.word	0x2000022b
 8005c1c:	20000242 	.word	0x20000242
 8005c20:	200001d8 	.word	0x200001d8
 8005c24:	200001dc 	.word	0x200001dc
 8005c28:	20000216 	.word	0x20000216
 8005c2c:	20000243 	.word	0x20000243
 8005c30:	20000244 	.word	0x20000244
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c34:	2200      	movs	r2, #0
 8005c36:	2140      	movs	r1, #64	; 0x40
 8005c38:	488d      	ldr	r0, [pc, #564]	; (8005e70 <checkAktifCalisma+0x1058>)
 8005c3a:	f003 fbc8 	bl	80093ce <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005c3e:	4b8d      	ldr	r3, [pc, #564]	; (8005e74 <checkAktifCalisma+0x105c>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <checkAktifCalisma+0xe36>
 8005c46:	4b8b      	ldr	r3, [pc, #556]	; (8005e74 <checkAktifCalisma+0x105c>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d115      	bne.n	8005c7a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c4e:	2104      	movs	r1, #4
 8005c50:	4889      	ldr	r0, [pc, #548]	; (8005e78 <checkAktifCalisma+0x1060>)
 8005c52:	f003 fba5 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d003      	beq.n	8005c64 <checkAktifCalisma+0xe4c>
 8005c5c:	4b87      	ldr	r3, [pc, #540]	; (8005e7c <checkAktifCalisma+0x1064>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c64:	2102      	movs	r1, #2
 8005c66:	4884      	ldr	r0, [pc, #528]	; (8005e78 <checkAktifCalisma+0x1060>)
 8005c68:	f003 fb9a 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c72:	4b83      	ldr	r3, [pc, #524]	; (8005e80 <checkAktifCalisma+0x1068>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e002      	b.n	8005c80 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c7a:	4b81      	ldr	r3, [pc, #516]	; (8005e80 <checkAktifCalisma+0x1068>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c80:	4b7c      	ldr	r3, [pc, #496]	; (8005e74 <checkAktifCalisma+0x105c>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d003      	beq.n	8005c90 <checkAktifCalisma+0xe78>
 8005c88:	4b7a      	ldr	r3, [pc, #488]	; (8005e74 <checkAktifCalisma+0x105c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d111      	bne.n	8005cb4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c90:	2102      	movs	r1, #2
 8005c92:	4879      	ldr	r0, [pc, #484]	; (8005e78 <checkAktifCalisma+0x1060>)
 8005c94:	f003 fb84 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d10a      	bne.n	8005cb4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c9e:	2104      	movs	r1, #4
 8005ca0:	4875      	ldr	r0, [pc, #468]	; (8005e78 <checkAktifCalisma+0x1060>)
 8005ca2:	f003 fb7d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005cac:	4b75      	ldr	r3, [pc, #468]	; (8005e84 <checkAktifCalisma+0x106c>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e002      	b.n	8005cba <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005cb4:	4b73      	ldr	r3, [pc, #460]	; (8005e84 <checkAktifCalisma+0x106c>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005cba:	4b71      	ldr	r3, [pc, #452]	; (8005e80 <checkAktifCalisma+0x1068>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00f      	beq.n	8005ce2 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005cc2:	4b71      	ldr	r3, [pc, #452]	; (8005e88 <checkAktifCalisma+0x1070>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d10b      	bne.n	8005ce2 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cce:	486f      	ldr	r0, [pc, #444]	; (8005e8c <checkAktifCalisma+0x1074>)
 8005cd0:	f003 fb66 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005cda:	4b6d      	ldr	r3, [pc, #436]	; (8005e90 <checkAktifCalisma+0x1078>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	e002      	b.n	8005ce8 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005ce2:	4b6b      	ldr	r3, [pc, #428]	; (8005e90 <checkAktifCalisma+0x1078>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005ce8:	4b66      	ldr	r3, [pc, #408]	; (8005e84 <checkAktifCalisma+0x106c>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00f      	beq.n	8005d10 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005cf0:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <checkAktifCalisma+0x1070>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d10b      	bne.n	8005d10 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cfc:	4863      	ldr	r0, [pc, #396]	; (8005e8c <checkAktifCalisma+0x1074>)
 8005cfe:	f003 fb4f 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005d08:	4b62      	ldr	r3, [pc, #392]	; (8005e94 <checkAktifCalisma+0x107c>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e002      	b.n	8005d16 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005d10:	4b60      	ldr	r3, [pc, #384]	; (8005e94 <checkAktifCalisma+0x107c>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d16:	4b60      	ldr	r3, [pc, #384]	; (8005e98 <checkAktifCalisma+0x1080>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d137      	bne.n	8005d8e <checkAktifCalisma+0xf76>
 8005d1e:	4b5f      	ldr	r3, [pc, #380]	; (8005e9c <checkAktifCalisma+0x1084>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d003      	beq.n	8005d2e <checkAktifCalisma+0xf16>
 8005d26:	4b5d      	ldr	r3, [pc, #372]	; (8005e9c <checkAktifCalisma+0x1084>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d12f      	bne.n	8005d8e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d2e:	4b54      	ldr	r3, [pc, #336]	; (8005e80 <checkAktifCalisma+0x1068>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <checkAktifCalisma+0xf26>
 8005d36:	4b53      	ldr	r3, [pc, #332]	; (8005e84 <checkAktifCalisma+0x106c>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d027      	beq.n	8005d8e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d42:	484d      	ldr	r0, [pc, #308]	; (8005e78 <checkAktifCalisma+0x1060>)
 8005d44:	f003 fb2c 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <checkAktifCalisma+0xf3e>
 8005d4e:	4b4e      	ldr	r3, [pc, #312]	; (8005e88 <checkAktifCalisma+0x1070>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d56:	4b4e      	ldr	r3, [pc, #312]	; (8005e90 <checkAktifCalisma+0x1078>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <checkAktifCalisma+0xf4e>
 8005d5e:	4b4d      	ldr	r3, [pc, #308]	; (8005e94 <checkAktifCalisma+0x107c>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d013      	beq.n	8005d8e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d66:	4b4e      	ldr	r3, [pc, #312]	; (8005ea0 <checkAktifCalisma+0x1088>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00f      	beq.n	8005d8e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d6e:	4b4d      	ldr	r3, [pc, #308]	; (8005ea4 <checkAktifCalisma+0x108c>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	f083 0301 	eor.w	r3, r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d7c:	4b4a      	ldr	r3, [pc, #296]	; (8005ea8 <checkAktifCalisma+0x1090>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d82:	4b4a      	ldr	r3, [pc, #296]	; (8005eac <checkAktifCalisma+0x1094>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a4a      	ldr	r2, [pc, #296]	; (8005eb0 <checkAktifCalisma+0x1098>)
 8005d88:	6013      	str	r3, [r2, #0]
			bekle();
 8005d8a:	f7fe fec7 	bl	8004b1c <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d8e:	4b47      	ldr	r3, [pc, #284]	; (8005eac <checkAktifCalisma+0x1094>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <checkAktifCalisma+0x1098>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	4a46      	ldr	r2, [pc, #280]	; (8005eb4 <checkAktifCalisma+0x109c>)
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d214      	bcs.n	8005dca <checkAktifCalisma+0xfb2>
 8005da0:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <checkAktifCalisma+0x1068>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f083 0301 	eor.w	r3, r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d006      	beq.n	8005dbc <checkAktifCalisma+0xfa4>
 8005dae:	4b35      	ldr	r3, [pc, #212]	; (8005e84 <checkAktifCalisma+0x106c>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f083 0301 	eor.w	r3, r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <checkAktifCalisma+0xfb2>
 8005dbc:	4b38      	ldr	r3, [pc, #224]	; (8005ea0 <checkAktifCalisma+0x1088>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f083 0301 	eor.w	r3, r3, #1
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005dca:	4b37      	ldr	r3, [pc, #220]	; (8005ea8 <checkAktifCalisma+0x1090>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005dd0:	4b31      	ldr	r3, [pc, #196]	; (8005e98 <checkAktifCalisma+0x1080>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d12b      	bne.n	8005e30 <checkAktifCalisma+0x1018>
 8005dd8:	4b30      	ldr	r3, [pc, #192]	; (8005e9c <checkAktifCalisma+0x1084>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d003      	beq.n	8005de8 <checkAktifCalisma+0xfd0>
 8005de0:	4b2e      	ldr	r3, [pc, #184]	; (8005e9c <checkAktifCalisma+0x1084>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d123      	bne.n	8005e30 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <checkAktifCalisma+0x1068>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d103      	bne.n	8005df8 <checkAktifCalisma+0xfe0>
 8005df0:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <checkAktifCalisma+0x106c>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01b      	beq.n	8005e30 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dfc:	481e      	ldr	r0, [pc, #120]	; (8005e78 <checkAktifCalisma+0x1060>)
 8005dfe:	f003 facf 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <checkAktifCalisma+0xff8>
 8005e08:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <checkAktifCalisma+0x1070>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e10:	4b1f      	ldr	r3, [pc, #124]	; (8005e90 <checkAktifCalisma+0x1078>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d103      	bne.n	8005e20 <checkAktifCalisma+0x1008>
 8005e18:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <checkAktifCalisma+0x107c>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005e20:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <checkAktifCalisma+0x1088>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005e28:	4b23      	ldr	r3, [pc, #140]	; (8005eb8 <checkAktifCalisma+0x10a0>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005e30:	4b21      	ldr	r3, [pc, #132]	; (8005eb8 <checkAktifCalisma+0x10a0>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e36:	4b18      	ldr	r3, [pc, #96]	; (8005e98 <checkAktifCalisma+0x1080>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d140      	bne.n	8005ec0 <checkAktifCalisma+0x10a8>
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <checkAktifCalisma+0x1084>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d003      	beq.n	8005e4e <checkAktifCalisma+0x1036>
 8005e46:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <checkAktifCalisma+0x1084>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d138      	bne.n	8005ec0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <checkAktifCalisma+0x1068>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <checkAktifCalisma+0x1046>
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <checkAktifCalisma+0x106c>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d030      	beq.n	8005ec0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e5e:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <checkAktifCalisma+0x1088>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d02c      	beq.n	8005ec0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <checkAktifCalisma+0x10a4>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	e02b      	b.n	8005ec6 <checkAktifCalisma+0x10ae>
 8005e6e:	bf00      	nop
 8005e70:	40010800 	.word	0x40010800
 8005e74:	20000209 	.word	0x20000209
 8005e78:	40011000 	.word	0x40011000
 8005e7c:	20000202 	.word	0x20000202
 8005e80:	20000248 	.word	0x20000248
 8005e84:	20000249 	.word	0x20000249
 8005e88:	20000208 	.word	0x20000208
 8005e8c:	40010c00 	.word	0x40010c00
 8005e90:	20000258 	.word	0x20000258
 8005e94:	20000259 	.word	0x20000259
 8005e98:	20000207 	.word	0x20000207
 8005e9c:	20000204 	.word	0x20000204
 8005ea0:	2000023e 	.word	0x2000023e
 8005ea4:	2000022b 	.word	0x2000022b
 8005ea8:	20000245 	.word	0x20000245
 8005eac:	200001d8 	.word	0x200001d8
 8005eb0:	200001dc 	.word	0x200001dc
 8005eb4:	20000217 	.word	0x20000217
 8005eb8:	20000246 	.word	0x20000246
 8005ebc:	20000247 	.word	0x20000247
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005ec0:	4b8b      	ldr	r3, [pc, #556]	; (80060f0 <checkAktifCalisma+0x12d8>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005ec6:	4b8b      	ldr	r3, [pc, #556]	; (80060f4 <checkAktifCalisma+0x12dc>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d107      	bne.n	8005ede <checkAktifCalisma+0x10c6>
 8005ece:	4b8a      	ldr	r3, [pc, #552]	; (80060f8 <checkAktifCalisma+0x12e0>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <checkAktifCalisma+0x10c6>
 8005ed6:	4b86      	ldr	r3, [pc, #536]	; (80060f0 <checkAktifCalisma+0x12d8>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005ede:	2201      	movs	r2, #1
 8005ee0:	2120      	movs	r1, #32
 8005ee2:	4886      	ldr	r0, [pc, #536]	; (80060fc <checkAktifCalisma+0x12e4>)
 8005ee4:	f003 fa73 	bl	80093ce <HAL_GPIO_WritePin>
 8005ee8:	e004      	b.n	8005ef4 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005eea:	2200      	movs	r2, #0
 8005eec:	2120      	movs	r1, #32
 8005eee:	4883      	ldr	r0, [pc, #524]	; (80060fc <checkAktifCalisma+0x12e4>)
 8005ef0:	f003 fa6d 	bl	80093ce <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005ef4:	4b82      	ldr	r3, [pc, #520]	; (8006100 <checkAktifCalisma+0x12e8>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00e      	beq.n	8005f1a <checkAktifCalisma+0x1102>
 8005efc:	2102      	movs	r1, #2
 8005efe:	4881      	ldr	r0, [pc, #516]	; (8006104 <checkAktifCalisma+0x12ec>)
 8005f00:	f003 fa4e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d107      	bne.n	8005f1a <checkAktifCalisma+0x1102>
 8005f0a:	4b7f      	ldr	r3, [pc, #508]	; (8006108 <checkAktifCalisma+0x12f0>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <checkAktifCalisma+0x1102>
 8005f12:	4b7e      	ldr	r3, [pc, #504]	; (800610c <checkAktifCalisma+0x12f4>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d112      	bne.n	8005f40 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005f1a:	4b7d      	ldr	r3, [pc, #500]	; (8006110 <checkAktifCalisma+0x12f8>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d066      	beq.n	8005ff0 <checkAktifCalisma+0x11d8>
 8005f22:	2104      	movs	r1, #4
 8005f24:	4877      	ldr	r0, [pc, #476]	; (8006104 <checkAktifCalisma+0x12ec>)
 8005f26:	f003 fa3b 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d15f      	bne.n	8005ff0 <checkAktifCalisma+0x11d8>
 8005f30:	4b75      	ldr	r3, [pc, #468]	; (8006108 <checkAktifCalisma+0x12f0>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d05b      	beq.n	8005ff0 <checkAktifCalisma+0x11d8>
 8005f38:	4b74      	ldr	r3, [pc, #464]	; (800610c <checkAktifCalisma+0x12f4>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d057      	beq.n	8005ff0 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005f40:	4b74      	ldr	r3, [pc, #464]	; (8006114 <checkAktifCalisma+0x12fc>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	3301      	adds	r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	4b72      	ldr	r3, [pc, #456]	; (8006114 <checkAktifCalisma+0x12fc>)
 8005f4a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005f4c:	4b71      	ldr	r3, [pc, #452]	; (8006114 <checkAktifCalisma+0x12fc>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b09      	cmp	r3, #9
 8005f52:	d908      	bls.n	8005f66 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f54:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <checkAktifCalisma+0x12fc>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f5a:	4b6f      	ldr	r3, [pc, #444]	; (8006118 <checkAktifCalisma+0x1300>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	4b6d      	ldr	r3, [pc, #436]	; (8006118 <checkAktifCalisma+0x1300>)
 8005f64:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f66:	4b6c      	ldr	r3, [pc, #432]	; (8006118 <checkAktifCalisma+0x1300>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d908      	bls.n	8005f80 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f6e:	4b6a      	ldr	r3, [pc, #424]	; (8006118 <checkAktifCalisma+0x1300>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f74:	4b69      	ldr	r3, [pc, #420]	; (800611c <checkAktifCalisma+0x1304>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	4b67      	ldr	r3, [pc, #412]	; (800611c <checkAktifCalisma+0x1304>)
 8005f7e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f80:	4b66      	ldr	r3, [pc, #408]	; (800611c <checkAktifCalisma+0x1304>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d908      	bls.n	8005f9a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f88:	4b64      	ldr	r3, [pc, #400]	; (800611c <checkAktifCalisma+0x1304>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f8e:	4b64      	ldr	r3, [pc, #400]	; (8006120 <checkAktifCalisma+0x1308>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	4b62      	ldr	r3, [pc, #392]	; (8006120 <checkAktifCalisma+0x1308>)
 8005f98:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f9a:	4b61      	ldr	r3, [pc, #388]	; (8006120 <checkAktifCalisma+0x1308>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	d908      	bls.n	8005fb4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005fa2:	4b5f      	ldr	r3, [pc, #380]	; (8006120 <checkAktifCalisma+0x1308>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005fa8:	4b5e      	ldr	r3, [pc, #376]	; (8006124 <checkAktifCalisma+0x130c>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	4b5c      	ldr	r3, [pc, #368]	; (8006124 <checkAktifCalisma+0x130c>)
 8005fb2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005fb4:	4b5b      	ldr	r3, [pc, #364]	; (8006124 <checkAktifCalisma+0x130c>)
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <checkAktifCalisma+0x1310>)
 8005fba:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005fbe:	4b58      	ldr	r3, [pc, #352]	; (8006120 <checkAktifCalisma+0x1308>)
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	4b59      	ldr	r3, [pc, #356]	; (8006128 <checkAktifCalisma+0x1310>)
 8005fc4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005fc6:	4b55      	ldr	r3, [pc, #340]	; (800611c <checkAktifCalisma+0x1304>)
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	4b57      	ldr	r3, [pc, #348]	; (8006128 <checkAktifCalisma+0x1310>)
 8005fcc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005fce:	4b52      	ldr	r3, [pc, #328]	; (8006118 <checkAktifCalisma+0x1300>)
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	4b55      	ldr	r3, [pc, #340]	; (8006128 <checkAktifCalisma+0x1310>)
 8005fd4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005fd6:	4b4f      	ldr	r3, [pc, #316]	; (8006114 <checkAktifCalisma+0x12fc>)
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	4b53      	ldr	r3, [pc, #332]	; (8006128 <checkAktifCalisma+0x1310>)
 8005fdc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005fde:	4b53      	ldr	r3, [pc, #332]	; (800612c <checkAktifCalisma+0x1314>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005fe4:	4b46      	ldr	r3, [pc, #280]	; (8006100 <checkAktifCalisma+0x12e8>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005fea:	4b49      	ldr	r3, [pc, #292]	; (8006110 <checkAktifCalisma+0x12f8>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ff4:	484e      	ldr	r0, [pc, #312]	; (8006130 <checkAktifCalisma+0x1318>)
 8005ff6:	f003 f9d3 	bl	80093a0 <HAL_GPIO_ReadPin>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d016      	beq.n	800602e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006004:	484a      	ldr	r0, [pc, #296]	; (8006130 <checkAktifCalisma+0x1318>)
 8006006:	f003 f9cb 	bl	80093a0 <HAL_GPIO_ReadPin>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00e      	beq.n	800602e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006014:	4846      	ldr	r0, [pc, #280]	; (8006130 <checkAktifCalisma+0x1318>)
 8006016:	f003 f9c3 	bl	80093a0 <HAL_GPIO_ReadPin>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d006      	beq.n	800602e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006020:	2140      	movs	r1, #64	; 0x40
 8006022:	4838      	ldr	r0, [pc, #224]	; (8006104 <checkAktifCalisma+0x12ec>)
 8006024:	f003 f9bc 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <checkAktifCalisma+0x121e>
			startBasili=1;
 800602e:	4b41      	ldr	r3, [pc, #260]	; (8006134 <checkAktifCalisma+0x131c>)
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e002      	b.n	800603c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006036:	4b3f      	ldr	r3, [pc, #252]	; (8006134 <checkAktifCalisma+0x131c>)
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800603c:	4b3d      	ldr	r3, [pc, #244]	; (8006134 <checkAktifCalisma+0x131c>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d016      	beq.n	8006072 <checkAktifCalisma+0x125a>
 8006044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006048:	4839      	ldr	r0, [pc, #228]	; (8006130 <checkAktifCalisma+0x1318>)
 800604a:	f003 f9a9 	bl	80093a0 <HAL_GPIO_ReadPin>
 800604e:	4603      	mov	r3, r0
 8006050:	2b01      	cmp	r3, #1
 8006052:	d10e      	bne.n	8006072 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006054:	4b38      	ldr	r3, [pc, #224]	; (8006138 <checkAktifCalisma+0x1320>)
 8006056:	2201      	movs	r2, #1
 8006058:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800605a:	2001      	movs	r0, #1
 800605c:	f7fa fd74 	bl	8000b48 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006060:	2001      	movs	r0, #1
 8006062:	f7fa fd17 	bl	8000a94 <hata2EEPROM>
			convertAndSendData();
 8006066:	f001 fc5b 	bl	8007920 <convertAndSendData>
			acilstophatasi=1;
 800606a:	4b34      	ldr	r3, [pc, #208]	; (800613c <checkAktifCalisma+0x1324>)
 800606c:	2201      	movs	r2, #1
 800606e:	701a      	strb	r2, [r3, #0]
		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006070:	e018      	b.n	80060a4 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006072:	4b32      	ldr	r3, [pc, #200]	; (800613c <checkAktifCalisma+0x1324>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d014      	beq.n	80060a4 <checkAktifCalisma+0x128c>
 800607a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800607e:	482c      	ldr	r0, [pc, #176]	; (8006130 <checkAktifCalisma+0x1318>)
 8006080:	f003 f98e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10c      	bne.n	80060a4 <checkAktifCalisma+0x128c>
 800608a:	4b2a      	ldr	r3, [pc, #168]	; (8006134 <checkAktifCalisma+0x131c>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f083 0301 	eor.w	r3, r3, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006098:	4b28      	ldr	r3, [pc, #160]	; (800613c <checkAktifCalisma+0x1324>)
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800609e:	2001      	movs	r0, #1
 80060a0:	f7fe fce8 	bl	8004a74 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80060a4:	4b26      	ldr	r3, [pc, #152]	; (8006140 <checkAktifCalisma+0x1328>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f083 0301 	eor.w	r3, r3, #1
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d04e      	beq.n	8006150 <checkAktifCalisma+0x1338>
 80060b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060b6:	481e      	ldr	r0, [pc, #120]	; (8006130 <checkAktifCalisma+0x1318>)
 80060b8:	f003 f972 	bl	80093a0 <HAL_GPIO_ReadPin>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <checkAktifCalisma+0x12b2>
 80060c2:	4b20      	ldr	r3, [pc, #128]	; (8006144 <checkAktifCalisma+0x132c>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d042      	beq.n	8006150 <checkAktifCalisma+0x1338>
 80060ca:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <checkAktifCalisma+0x1330>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d13e      	bne.n	8006150 <checkAktifCalisma+0x1338>
			hataVar=1;
 80060d2:	4b19      	ldr	r3, [pc, #100]	; (8006138 <checkAktifCalisma+0x1320>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80060d8:	2002      	movs	r0, #2
 80060da:	f7fa fd35 	bl	8000b48 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80060de:	2002      	movs	r0, #2
 80060e0:	f7fa fcd8 	bl	8000a94 <hata2EEPROM>
			convertAndSendData();
 80060e4:	f001 fc1c 	bl	8007920 <convertAndSendData>
			emniyetCercevesihatasi=1;
 80060e8:	4b18      	ldr	r3, [pc, #96]	; (800614c <checkAktifCalisma+0x1334>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80060ee:	e047      	b.n	8006180 <checkAktifCalisma+0x1368>
 80060f0:	20000247 	.word	0x20000247
 80060f4:	20000246 	.word	0x20000246
 80060f8:	20000245 	.word	0x20000245
 80060fc:	40010800 	.word	0x40010800
 8006100:	2000023b 	.word	0x2000023b
 8006104:	40011000 	.word	0x40011000
 8006108:	20000202 	.word	0x20000202
 800610c:	2000023e 	.word	0x2000023e
 8006110:	2000023c 	.word	0x2000023c
 8006114:	200001f9 	.word	0x200001f9
 8006118:	200001fa 	.word	0x200001fa
 800611c:	20000008 	.word	0x20000008
 8006120:	20000009 	.word	0x20000009
 8006124:	200001fb 	.word	0x200001fb
 8006128:	20000128 	.word	0x20000128
 800612c:	20000228 	.word	0x20000228
 8006130:	40010c00 	.word	0x40010c00
 8006134:	2000024a 	.word	0x2000024a
 8006138:	20000251 	.word	0x20000251
 800613c:	2000024c 	.word	0x2000024c
 8006140:	20000253 	.word	0x20000253
 8006144:	2000025d 	.word	0x2000025d
 8006148:	20000200 	.word	0x20000200
 800614c:	2000024d 	.word	0x2000024d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006150:	4b9b      	ldr	r3, [pc, #620]	; (80063c0 <checkAktifCalisma+0x15a8>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d013      	beq.n	8006180 <checkAktifCalisma+0x1368>
 8006158:	4b9a      	ldr	r3, [pc, #616]	; (80063c4 <checkAktifCalisma+0x15ac>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00f      	beq.n	8006180 <checkAktifCalisma+0x1368>
 8006160:	4b99      	ldr	r3, [pc, #612]	; (80063c8 <checkAktifCalisma+0x15b0>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f083 0301 	eor.w	r3, r3, #1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800616e:	4b94      	ldr	r3, [pc, #592]	; (80063c0 <checkAktifCalisma+0x15a8>)
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006174:	4b95      	ldr	r3, [pc, #596]	; (80063cc <checkAktifCalisma+0x15b4>)
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800617a:	2002      	movs	r0, #2
 800617c:	f7fe fc7a 	bl	8004a74 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006180:	4b93      	ldr	r3, [pc, #588]	; (80063d0 <checkAktifCalisma+0x15b8>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11e      	bne.n	80061c6 <checkAktifCalisma+0x13ae>
 8006188:	4b92      	ldr	r3, [pc, #584]	; (80063d4 <checkAktifCalisma+0x15bc>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d11a      	bne.n	80061c6 <checkAktifCalisma+0x13ae>
 8006190:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <checkAktifCalisma+0x15c0>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d016      	beq.n	80061c6 <checkAktifCalisma+0x13ae>
 8006198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800619c:	488f      	ldr	r0, [pc, #572]	; (80063dc <checkAktifCalisma+0x15c4>)
 800619e:	f003 f8ff 	bl	80093a0 <HAL_GPIO_ReadPin>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d10e      	bne.n	80061c6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 80061a8:	4b8d      	ldr	r3, [pc, #564]	; (80063e0 <checkAktifCalisma+0x15c8>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80061ae:	2003      	movs	r0, #3
 80061b0:	f7fa fcca 	bl	8000b48 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80061b4:	2003      	movs	r0, #3
 80061b6:	f7fa fc6d 	bl	8000a94 <hata2EEPROM>
			convertAndSendData();
 80061ba:	f001 fbb1 	bl	8007920 <convertAndSendData>
			basinchatasi=1;
 80061be:	4b89      	ldr	r3, [pc, #548]	; (80063e4 <checkAktifCalisma+0x15cc>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80061c4:	e015      	b.n	80061f2 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80061c6:	4b87      	ldr	r3, [pc, #540]	; (80063e4 <checkAktifCalisma+0x15cc>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d011      	beq.n	80061f2 <checkAktifCalisma+0x13da>
 80061ce:	4b80      	ldr	r3, [pc, #512]	; (80063d0 <checkAktifCalisma+0x15b8>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10d      	bne.n	80061f2 <checkAktifCalisma+0x13da>
 80061d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061da:	4883      	ldr	r0, [pc, #524]	; (80063e8 <checkAktifCalisma+0x15d0>)
 80061dc:	f003 f8e0 	bl	80093a0 <HAL_GPIO_ReadPin>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d105      	bne.n	80061f2 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80061e6:	4b7f      	ldr	r3, [pc, #508]	; (80063e4 <checkAktifCalisma+0x15cc>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80061ec:	2003      	movs	r0, #3
 80061ee:	f7fe fc41 	bl	8004a74 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80061f2:	4b7e      	ldr	r3, [pc, #504]	; (80063ec <checkAktifCalisma+0x15d4>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <checkAktifCalisma+0x13ea>
 80061fa:	4b7d      	ldr	r3, [pc, #500]	; (80063f0 <checkAktifCalisma+0x15d8>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01e      	beq.n	8006240 <checkAktifCalisma+0x1428>
 8006202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006206:	487b      	ldr	r0, [pc, #492]	; (80063f4 <checkAktifCalisma+0x15dc>)
 8006208:	f003 f8ca 	bl	80093a0 <HAL_GPIO_ReadPin>
 800620c:	4603      	mov	r3, r0
 800620e:	2b01      	cmp	r3, #1
 8006210:	d116      	bne.n	8006240 <checkAktifCalisma+0x1428>
 8006212:	4b79      	ldr	r3, [pc, #484]	; (80063f8 <checkAktifCalisma+0x15e0>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d003      	beq.n	8006222 <checkAktifCalisma+0x140a>
 800621a:	4b77      	ldr	r3, [pc, #476]	; (80063f8 <checkAktifCalisma+0x15e0>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b03      	cmp	r3, #3
 8006220:	d10e      	bne.n	8006240 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006222:	4b6f      	ldr	r3, [pc, #444]	; (80063e0 <checkAktifCalisma+0x15c8>)
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006228:	2004      	movs	r0, #4
 800622a:	f7fa fc8d 	bl	8000b48 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800622e:	2004      	movs	r0, #4
 8006230:	f7fa fc30 	bl	8000a94 <hata2EEPROM>
			convertAndSendData();
 8006234:	f001 fb74 	bl	8007920 <convertAndSendData>
			katkapisivicihatasi=1;
 8006238:	4b70      	ldr	r3, [pc, #448]	; (80063fc <checkAktifCalisma+0x15e4>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800623e:	e01f      	b.n	8006280 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006240:	4b6e      	ldr	r3, [pc, #440]	; (80063fc <checkAktifCalisma+0x15e4>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01b      	beq.n	8006280 <checkAktifCalisma+0x1468>
 8006248:	4b6d      	ldr	r3, [pc, #436]	; (8006400 <checkAktifCalisma+0x15e8>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d017      	beq.n	8006280 <checkAktifCalisma+0x1468>
 8006250:	4b66      	ldr	r3, [pc, #408]	; (80063ec <checkAktifCalisma+0x15d4>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f083 0301 	eor.w	r3, r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d010      	beq.n	8006280 <checkAktifCalisma+0x1468>
 800625e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006262:	4864      	ldr	r0, [pc, #400]	; (80063f4 <checkAktifCalisma+0x15dc>)
 8006264:	f003 f89c 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d108      	bne.n	8006280 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800626e:	4b63      	ldr	r3, [pc, #396]	; (80063fc <checkAktifCalisma+0x15e4>)
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006274:	4b5e      	ldr	r3, [pc, #376]	; (80063f0 <checkAktifCalisma+0x15d8>)
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800627a:	2004      	movs	r0, #4
 800627c:	f7fe fbfa 	bl	8004a74 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006280:	4b5a      	ldr	r3, [pc, #360]	; (80063ec <checkAktifCalisma+0x15d4>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <checkAktifCalisma+0x1478>
 8006288:	4b5e      	ldr	r3, [pc, #376]	; (8006404 <checkAktifCalisma+0x15ec>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01e      	beq.n	80062ce <checkAktifCalisma+0x14b6>
 8006290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006294:	4857      	ldr	r0, [pc, #348]	; (80063f4 <checkAktifCalisma+0x15dc>)
 8006296:	f003 f883 	bl	80093a0 <HAL_GPIO_ReadPin>
 800629a:	4603      	mov	r3, r0
 800629c:	2b01      	cmp	r3, #1
 800629e:	d116      	bne.n	80062ce <checkAktifCalisma+0x14b6>
 80062a0:	4b55      	ldr	r3, [pc, #340]	; (80063f8 <checkAktifCalisma+0x15e0>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d003      	beq.n	80062b0 <checkAktifCalisma+0x1498>
 80062a8:	4b53      	ldr	r3, [pc, #332]	; (80063f8 <checkAktifCalisma+0x15e0>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d10e      	bne.n	80062ce <checkAktifCalisma+0x14b6>
			hataVar=1;
 80062b0:	4b4b      	ldr	r3, [pc, #300]	; (80063e0 <checkAktifCalisma+0x15c8>)
 80062b2:	2201      	movs	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80062b6:	2005      	movs	r0, #5
 80062b8:	f7fa fc46 	bl	8000b48 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80062bc:	2005      	movs	r0, #5
 80062be:	f7fa fbe9 	bl	8000a94 <hata2EEPROM>
			convertAndSendData();
 80062c2:	f001 fb2d 	bl	8007920 <convertAndSendData>
			tablakapisivicihatasi=1;
 80062c6:	4b50      	ldr	r3, [pc, #320]	; (8006408 <checkAktifCalisma+0x15f0>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062cc:	e023      	b.n	8006316 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80062ce:	4b4e      	ldr	r3, [pc, #312]	; (8006408 <checkAktifCalisma+0x15f0>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01f      	beq.n	8006316 <checkAktifCalisma+0x14fe>
 80062d6:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <checkAktifCalisma+0x15e8>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01b      	beq.n	8006316 <checkAktifCalisma+0x14fe>
 80062de:	4b43      	ldr	r3, [pc, #268]	; (80063ec <checkAktifCalisma+0x15d4>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	f083 0301 	eor.w	r3, r3, #1
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d014      	beq.n	8006316 <checkAktifCalisma+0x14fe>
 80062ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062f0:	4840      	ldr	r0, [pc, #256]	; (80063f4 <checkAktifCalisma+0x15dc>)
 80062f2:	f003 f855 	bl	80093a0 <HAL_GPIO_ReadPin>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10c      	bne.n	8006316 <checkAktifCalisma+0x14fe>
 80062fc:	4b40      	ldr	r3, [pc, #256]	; (8006400 <checkAktifCalisma+0x15e8>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006304:	4b40      	ldr	r3, [pc, #256]	; (8006408 <checkAktifCalisma+0x15f0>)
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800630a:	4b3e      	ldr	r3, [pc, #248]	; (8006404 <checkAktifCalisma+0x15ec>)
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006310:	2005      	movs	r0, #5
 8006312:	f7fe fbaf 	bl	8004a74 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006316:	4b30      	ldr	r3, [pc, #192]	; (80063d8 <checkAktifCalisma+0x15c0>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d107      	bne.n	800632e <checkAktifCalisma+0x1516>
 800631e:	4b2a      	ldr	r3, [pc, #168]	; (80063c8 <checkAktifCalisma+0x15b0>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <checkAktifCalisma+0x1516>
 8006326:	4b39      	ldr	r3, [pc, #228]	; (800640c <checkAktifCalisma+0x15f4>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d016      	beq.n	800635c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800632e:	4b38      	ldr	r3, [pc, #224]	; (8006410 <checkAktifCalisma+0x15f8>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b38      	ldr	r3, [pc, #224]	; (8006414 <checkAktifCalisma+0x15fc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	4a37      	ldr	r2, [pc, #220]	; (8006418 <checkAktifCalisma+0x1600>)
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	4293      	cmp	r3, r2
 800633e:	d30d      	bcc.n	800635c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <checkAktifCalisma+0x15c8>)
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006346:	2006      	movs	r0, #6
 8006348:	f7fa fbfe 	bl	8000b48 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800634c:	2006      	movs	r0, #6
 800634e:	f7fa fba1 	bl	8000a94 <hata2EEPROM>
			  	convertAndSendData();
 8006352:	f001 fae5 	bl	8007920 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006356:	4b31      	ldr	r3, [pc, #196]	; (800641c <checkAktifCalisma+0x1604>)
 8006358:	2201      	movs	r2, #1
 800635a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800635c:	4b2f      	ldr	r3, [pc, #188]	; (800641c <checkAktifCalisma+0x1604>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <checkAktifCalisma+0x1574>
 8006364:	2108      	movs	r1, #8
 8006366:	4823      	ldr	r0, [pc, #140]	; (80063f4 <checkAktifCalisma+0x15dc>)
 8006368:	f003 f81a 	bl	80093a0 <HAL_GPIO_ReadPin>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00c      	beq.n	800638c <checkAktifCalisma+0x1574>
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <checkAktifCalisma+0x15d4>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	f083 0301 	eor.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006380:	4b26      	ldr	r3, [pc, #152]	; (800641c <checkAktifCalisma+0x1604>)
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006386:	2006      	movs	r0, #6
 8006388:	f7fe fb74 	bl	8004a74 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800638c:	4b24      	ldr	r3, [pc, #144]	; (8006420 <checkAktifCalisma+0x1608>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <checkAktifCalisma+0x1594>
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <checkAktifCalisma+0x15b0>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d107      	bne.n	80063ac <checkAktifCalisma+0x1594>
 800639c:	4b21      	ldr	r3, [pc, #132]	; (8006424 <checkAktifCalisma+0x160c>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d103      	bne.n	80063ac <checkAktifCalisma+0x1594>
 80063a4:	4b19      	ldr	r3, [pc, #100]	; (800640c <checkAktifCalisma+0x15f4>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d03f      	beq.n	800642c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80063ac:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <checkAktifCalisma+0x1610>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80063b2:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <checkAktifCalisma+0x15d8>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80063b8:	4b12      	ldr	r3, [pc, #72]	; (8006404 <checkAktifCalisma+0x15ec>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e03c      	b.n	800643a <checkAktifCalisma+0x1622>
 80063c0:	2000024d 	.word	0x2000024d
 80063c4:	20000253 	.word	0x20000253
 80063c8:	20000234 	.word	0x20000234
 80063cc:	2000025d 	.word	0x2000025d
 80063d0:	200001ff 	.word	0x200001ff
 80063d4:	20000203 	.word	0x20000203
 80063d8:	20000250 	.word	0x20000250
 80063dc:	40011000 	.word	0x40011000
 80063e0:	20000251 	.word	0x20000251
 80063e4:	2000025a 	.word	0x2000025a
 80063e8:	40010c00 	.word	0x40010c00
 80063ec:	2000024a 	.word	0x2000024a
 80063f0:	2000025e 	.word	0x2000025e
 80063f4:	40010800 	.word	0x40010800
 80063f8:	20000204 	.word	0x20000204
 80063fc:	2000025b 	.word	0x2000025b
 8006400:	2000023e 	.word	0x2000023e
 8006404:	2000025f 	.word	0x2000025f
 8006408:	2000025c 	.word	0x2000025c
 800640c:	20000233 	.word	0x20000233
 8006410:	200001d8 	.word	0x200001d8
 8006414:	200001ec 	.word	0x200001ec
 8006418:	20000214 	.word	0x20000214
 800641c:	2000024b 	.word	0x2000024b
 8006420:	20000231 	.word	0x20000231
 8006424:	20000232 	.word	0x20000232
 8006428:	20000252 	.word	0x20000252
		} else {
			makineCalisiyor=1;
 800642c:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <checkAktifCalisma+0x1690>)
 800642e:	2201      	movs	r2, #1
 8006430:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006432:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <checkAktifCalisma+0x1694>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <checkAktifCalisma+0x1698>)
 8006438:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800643a:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <checkAktifCalisma+0x169c>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d02f      	beq.n	80064a2 <checkAktifCalisma+0x168a>
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <checkAktifCalisma+0x16a0>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	f083 0301 	eor.w	r3, r3, #1
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d028      	beq.n	80064a2 <checkAktifCalisma+0x168a>
 8006450:	4b1a      	ldr	r3, [pc, #104]	; (80064bc <checkAktifCalisma+0x16a4>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f083 0301 	eor.w	r3, r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d021      	beq.n	80064a2 <checkAktifCalisma+0x168a>
 800645e:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <checkAktifCalisma+0x16a8>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f083 0301 	eor.w	r3, r3, #1
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01a      	beq.n	80064a2 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <checkAktifCalisma+0x16ac>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f083 0301 	eor.w	r3, r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d013      	beq.n	80064a2 <checkAktifCalisma+0x168a>
 800647a:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <checkAktifCalisma+0x16b0>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f083 0301 	eor.w	r3, r3, #1
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00c      	beq.n	80064a2 <checkAktifCalisma+0x168a>
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <checkAktifCalisma+0x16b4>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f083 0301 	eor.w	r3, r3, #1
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <checkAktifCalisma+0x168a>
			hataVar=0;
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <checkAktifCalisma+0x169c>)
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 800649c:	2007      	movs	r0, #7
 800649e:	f7fe fae9 	bl	8004a74 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000252 	.word	0x20000252
 80064ac:	200001d8 	.word	0x200001d8
 80064b0:	200001ec 	.word	0x200001ec
 80064b4:	20000251 	.word	0x20000251
 80064b8:	2000024c 	.word	0x2000024c
 80064bc:	2000024d 	.word	0x2000024d
 80064c0:	2000025a 	.word	0x2000025a
 80064c4:	2000025b 	.word	0x2000025b
 80064c8:	2000025c 	.word	0x2000025c
 80064cc:	2000024b 	.word	0x2000024b

080064d0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80064d4:	4b8b      	ldr	r3, [pc, #556]	; (8006704 <checkDemoModCalisma+0x234>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	f040 8229 	bne.w	8006930 <checkDemoModCalisma+0x460>
 80064de:	4b8a      	ldr	r3, [pc, #552]	; (8006708 <checkDemoModCalisma+0x238>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8224 	beq.w	8006930 <checkDemoModCalisma+0x460>
 80064e8:	4b88      	ldr	r3, [pc, #544]	; (800670c <checkDemoModCalisma+0x23c>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 821f 	bne.w	8006930 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064f2:	2102      	movs	r1, #2
 80064f4:	4886      	ldr	r0, [pc, #536]	; (8006710 <checkDemoModCalisma+0x240>)
 80064f6:	f002 ff53 	bl	80093a0 <HAL_GPIO_ReadPin>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11d      	bne.n	800653c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006500:	4b84      	ldr	r3, [pc, #528]	; (8006714 <checkDemoModCalisma+0x244>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	f083 0301 	eor.w	r3, r3, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800650e:	4b82      	ldr	r3, [pc, #520]	; (8006718 <checkDemoModCalisma+0x248>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f083 0301 	eor.w	r3, r3, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00f      	beq.n	800653c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 800651c:	4b7f      	ldr	r3, [pc, #508]	; (800671c <checkDemoModCalisma+0x24c>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f083 0301 	eor.w	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800652a:	2201      	movs	r2, #1
 800652c:	2104      	movs	r1, #4
 800652e:	487c      	ldr	r0, [pc, #496]	; (8006720 <checkDemoModCalisma+0x250>)
 8006530:	f002 ff4d 	bl	80093ce <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006534:	4b7b      	ldr	r3, [pc, #492]	; (8006724 <checkDemoModCalisma+0x254>)
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e00e      	b.n	800655a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800653c:	2102      	movs	r1, #2
 800653e:	4874      	ldr	r0, [pc, #464]	; (8006710 <checkDemoModCalisma+0x240>)
 8006540:	f002 ff2e 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006544:	4603      	mov	r3, r0
 8006546:	2b01      	cmp	r3, #1
 8006548:	d107      	bne.n	800655a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800654a:	2200      	movs	r2, #0
 800654c:	2104      	movs	r1, #4
 800654e:	4874      	ldr	r0, [pc, #464]	; (8006720 <checkDemoModCalisma+0x250>)
 8006550:	f002 ff3d 	bl	80093ce <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006554:	4b73      	ldr	r3, [pc, #460]	; (8006724 <checkDemoModCalisma+0x254>)
 8006556:	2200      	movs	r2, #0
 8006558:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800655a:	4b72      	ldr	r3, [pc, #456]	; (8006724 <checkDemoModCalisma+0x254>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <checkDemoModCalisma+0xaa>
 8006562:	4b6d      	ldr	r3, [pc, #436]	; (8006718 <checkDemoModCalisma+0x248>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d107      	bne.n	800657a <checkDemoModCalisma+0xaa>
 800656a:	4b6c      	ldr	r3, [pc, #432]	; (800671c <checkDemoModCalisma+0x24c>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <checkDemoModCalisma+0xaa>
 8006572:	4b68      	ldr	r3, [pc, #416]	; (8006714 <checkDemoModCalisma+0x244>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00c      	beq.n	8006594 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800657a:	2201      	movs	r2, #1
 800657c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006580:	4867      	ldr	r0, [pc, #412]	; (8006720 <checkDemoModCalisma+0x250>)
 8006582:	f002 ff24 	bl	80093ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006586:	2201      	movs	r2, #1
 8006588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800658c:	4864      	ldr	r0, [pc, #400]	; (8006720 <checkDemoModCalisma+0x250>)
 800658e:	f002 ff1e 	bl	80093ce <HAL_GPIO_WritePin>
 8006592:	e00b      	b.n	80065ac <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006594:	2200      	movs	r2, #0
 8006596:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800659a:	4861      	ldr	r0, [pc, #388]	; (8006720 <checkDemoModCalisma+0x250>)
 800659c:	f002 ff17 	bl	80093ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065a0:	2200      	movs	r2, #0
 80065a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065a6:	485e      	ldr	r0, [pc, #376]	; (8006720 <checkDemoModCalisma+0x250>)
 80065a8:	f002 ff11 	bl	80093ce <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065ac:	2102      	movs	r1, #2
 80065ae:	4858      	ldr	r0, [pc, #352]	; (8006710 <checkDemoModCalisma+0x240>)
 80065b0:	f002 fef6 	bl	80093a0 <HAL_GPIO_ReadPin>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d10d      	bne.n	80065d6 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065be:	4854      	ldr	r0, [pc, #336]	; (8006710 <checkDemoModCalisma+0x240>)
 80065c0:	f002 feee 	bl	80093a0 <HAL_GPIO_ReadPin>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d105      	bne.n	80065d6 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80065ca:	4b56      	ldr	r3, [pc, #344]	; (8006724 <checkDemoModCalisma+0x254>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f083 0301 	eor.w	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065d6:	2102      	movs	r1, #2
 80065d8:	484d      	ldr	r0, [pc, #308]	; (8006710 <checkDemoModCalisma+0x240>)
 80065da:	f002 fee1 	bl	80093a0 <HAL_GPIO_ReadPin>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d125      	bne.n	8006630 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065e8:	4849      	ldr	r0, [pc, #292]	; (8006710 <checkDemoModCalisma+0x240>)
 80065ea:	f002 fed9 	bl	80093a0 <HAL_GPIO_ReadPin>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d11d      	bne.n	8006630 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80065f4:	4b4b      	ldr	r3, [pc, #300]	; (8006724 <checkDemoModCalisma+0x254>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f083 0301 	eor.w	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d016      	beq.n	8006630 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006602:	4b44      	ldr	r3, [pc, #272]	; (8006714 <checkDemoModCalisma+0x244>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	f083 0301 	eor.w	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00f      	beq.n	8006630 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006610:	4b42      	ldr	r3, [pc, #264]	; (800671c <checkDemoModCalisma+0x24c>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f083 0301 	eor.w	r3, r3, #1
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800661e:	2201      	movs	r2, #1
 8006620:	2120      	movs	r1, #32
 8006622:	483b      	ldr	r0, [pc, #236]	; (8006710 <checkDemoModCalisma+0x240>)
 8006624:	f002 fed3 	bl	80093ce <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006628:	4b3b      	ldr	r3, [pc, #236]	; (8006718 <checkDemoModCalisma+0x248>)
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	e007      	b.n	8006640 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006630:	2200      	movs	r2, #0
 8006632:	2120      	movs	r1, #32
 8006634:	4836      	ldr	r0, [pc, #216]	; (8006710 <checkDemoModCalisma+0x240>)
 8006636:	f002 feca 	bl	80093ce <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800663a:	4b37      	ldr	r3, [pc, #220]	; (8006718 <checkDemoModCalisma+0x248>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006640:	2102      	movs	r1, #2
 8006642:	4833      	ldr	r0, [pc, #204]	; (8006710 <checkDemoModCalisma+0x240>)
 8006644:	f002 feac 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d125      	bne.n	800669a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800664e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006652:	482f      	ldr	r0, [pc, #188]	; (8006710 <checkDemoModCalisma+0x240>)
 8006654:	f002 fea4 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d11d      	bne.n	800669a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800665e:	4b31      	ldr	r3, [pc, #196]	; (8006724 <checkDemoModCalisma+0x254>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f083 0301 	eor.w	r3, r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d016      	beq.n	800669a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800666c:	4b2a      	ldr	r3, [pc, #168]	; (8006718 <checkDemoModCalisma+0x248>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f083 0301 	eor.w	r3, r3, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00f      	beq.n	800669a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800667a:	4b26      	ldr	r3, [pc, #152]	; (8006714 <checkDemoModCalisma+0x244>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f083 0301 	eor.w	r3, r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006688:	2201      	movs	r2, #1
 800668a:	2110      	movs	r1, #16
 800668c:	4820      	ldr	r0, [pc, #128]	; (8006710 <checkDemoModCalisma+0x240>)
 800668e:	f002 fe9e 	bl	80093ce <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006692:	4b22      	ldr	r3, [pc, #136]	; (800671c <checkDemoModCalisma+0x24c>)
 8006694:	2201      	movs	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e007      	b.n	80066aa <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800669a:	2200      	movs	r2, #0
 800669c:	2110      	movs	r1, #16
 800669e:	481c      	ldr	r0, [pc, #112]	; (8006710 <checkDemoModCalisma+0x240>)
 80066a0:	f002 fe95 	bl	80093ce <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80066a4:	4b1d      	ldr	r3, [pc, #116]	; (800671c <checkDemoModCalisma+0x24c>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80066aa:	2104      	movs	r1, #4
 80066ac:	4818      	ldr	r0, [pc, #96]	; (8006710 <checkDemoModCalisma+0x240>)
 80066ae:	f002 fe77 	bl	80093a0 <HAL_GPIO_ReadPin>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d139      	bne.n	800672c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80066b8:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <checkDemoModCalisma+0x254>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f083 0301 	eor.w	r3, r3, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d032      	beq.n	800672c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <checkDemoModCalisma+0x24c>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	f083 0301 	eor.w	r3, r3, #1
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02b      	beq.n	800672c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <checkDemoModCalisma+0x248>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f083 0301 	eor.w	r3, r3, #1
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d024      	beq.n	800672c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80066e2:	2201      	movs	r2, #1
 80066e4:	2102      	movs	r1, #2
 80066e6:	480e      	ldr	r0, [pc, #56]	; (8006720 <checkDemoModCalisma+0x250>)
 80066e8:	f002 fe71 	bl	80093ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80066ec:	2201      	movs	r2, #1
 80066ee:	2101      	movs	r1, #1
 80066f0:	480b      	ldr	r0, [pc, #44]	; (8006720 <checkDemoModCalisma+0x250>)
 80066f2:	f002 fe6c 	bl	80093ce <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80066f6:	4b07      	ldr	r3, [pc, #28]	; (8006714 <checkDemoModCalisma+0x244>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <checkDemoModCalisma+0x258>)
 80066fe:	2201      	movs	r2, #1
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	e027      	b.n	8006754 <checkDemoModCalisma+0x284>
 8006704:	2000021a 	.word	0x2000021a
 8006708:	2000024e 	.word	0x2000024e
 800670c:	20000219 	.word	0x20000219
 8006710:	40011000 	.word	0x40011000
 8006714:	20000255 	.word	0x20000255
 8006718:	20000256 	.word	0x20000256
 800671c:	20000257 	.word	0x20000257
 8006720:	40010c00 	.word	0x40010c00
 8006724:	20000254 	.word	0x20000254
 8006728:	2000023a 	.word	0x2000023a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800672c:	2104      	movs	r1, #4
 800672e:	48a0      	ldr	r0, [pc, #640]	; (80069b0 <checkDemoModCalisma+0x4e0>)
 8006730:	f002 fe36 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006734:	4603      	mov	r3, r0
 8006736:	2b01      	cmp	r3, #1
 8006738:	d10c      	bne.n	8006754 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800673a:	2200      	movs	r2, #0
 800673c:	2102      	movs	r1, #2
 800673e:	489d      	ldr	r0, [pc, #628]	; (80069b4 <checkDemoModCalisma+0x4e4>)
 8006740:	f002 fe45 	bl	80093ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006744:	2200      	movs	r2, #0
 8006746:	2101      	movs	r1, #1
 8006748:	489a      	ldr	r0, [pc, #616]	; (80069b4 <checkDemoModCalisma+0x4e4>)
 800674a:	f002 fe40 	bl	80093ce <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800674e:	4b9a      	ldr	r3, [pc, #616]	; (80069b8 <checkDemoModCalisma+0x4e8>)
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006754:	2104      	movs	r1, #4
 8006756:	4896      	ldr	r0, [pc, #600]	; (80069b0 <checkDemoModCalisma+0x4e0>)
 8006758:	f002 fe22 	bl	80093a0 <HAL_GPIO_ReadPin>
 800675c:	4603      	mov	r3, r0
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10d      	bne.n	800677e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006762:	2201      	movs	r2, #1
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	4895      	ldr	r0, [pc, #596]	; (80069bc <checkDemoModCalisma+0x4ec>)
 8006768:	f002 fe31 	bl	80093ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800676c:	2201      	movs	r2, #1
 800676e:	2120      	movs	r1, #32
 8006770:	4892      	ldr	r0, [pc, #584]	; (80069bc <checkDemoModCalisma+0x4ec>)
 8006772:	f002 fe2c 	bl	80093ce <HAL_GPIO_WritePin>
			timer3 = millis;
 8006776:	4b92      	ldr	r3, [pc, #584]	; (80069c0 <checkDemoModCalisma+0x4f0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a92      	ldr	r2, [pc, #584]	; (80069c4 <checkDemoModCalisma+0x4f4>)
 800677c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800677e:	4b90      	ldr	r3, [pc, #576]	; (80069c0 <checkDemoModCalisma+0x4f0>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b90      	ldr	r3, [pc, #576]	; (80069c4 <checkDemoModCalisma+0x4f4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b04      	cmp	r3, #4
 800678a:	d909      	bls.n	80067a0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800678c:	2200      	movs	r2, #0
 800678e:	2180      	movs	r1, #128	; 0x80
 8006790:	488a      	ldr	r0, [pc, #552]	; (80069bc <checkDemoModCalisma+0x4ec>)
 8006792:	f002 fe1c 	bl	80093ce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006796:	2200      	movs	r2, #0
 8006798:	2120      	movs	r1, #32
 800679a:	4888      	ldr	r0, [pc, #544]	; (80069bc <checkDemoModCalisma+0x4ec>)
 800679c:	f002 fe17 	bl	80093ce <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80067a0:	2102      	movs	r1, #2
 80067a2:	4883      	ldr	r0, [pc, #524]	; (80069b0 <checkDemoModCalisma+0x4e0>)
 80067a4:	f002 fdfc 	bl	80093a0 <HAL_GPIO_ReadPin>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d108      	bne.n	80067c0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80067ae:	2201      	movs	r2, #1
 80067b0:	2140      	movs	r1, #64	; 0x40
 80067b2:	4882      	ldr	r0, [pc, #520]	; (80069bc <checkDemoModCalisma+0x4ec>)
 80067b4:	f002 fe0b 	bl	80093ce <HAL_GPIO_WritePin>
			timer3 = millis;
 80067b8:	4b81      	ldr	r3, [pc, #516]	; (80069c0 <checkDemoModCalisma+0x4f0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a81      	ldr	r2, [pc, #516]	; (80069c4 <checkDemoModCalisma+0x4f4>)
 80067be:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067c0:	4b7f      	ldr	r3, [pc, #508]	; (80069c0 <checkDemoModCalisma+0x4f0>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b7f      	ldr	r3, [pc, #508]	; (80069c4 <checkDemoModCalisma+0x4f4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d904      	bls.n	80067d8 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80067ce:	2200      	movs	r2, #0
 80067d0:	2140      	movs	r1, #64	; 0x40
 80067d2:	487a      	ldr	r0, [pc, #488]	; (80069bc <checkDemoModCalisma+0x4ec>)
 80067d4:	f002 fdfb 	bl	80093ce <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80067d8:	4b7b      	ldr	r3, [pc, #492]	; (80069c8 <checkDemoModCalisma+0x4f8>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d058      	beq.n	8006892 <checkDemoModCalisma+0x3c2>
 80067e0:	4b7a      	ldr	r3, [pc, #488]	; (80069cc <checkDemoModCalisma+0x4fc>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d054      	beq.n	8006892 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80067e8:	4b79      	ldr	r3, [pc, #484]	; (80069d0 <checkDemoModCalisma+0x500>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	4b77      	ldr	r3, [pc, #476]	; (80069d0 <checkDemoModCalisma+0x500>)
 80067f2:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80067f4:	4b76      	ldr	r3, [pc, #472]	; (80069d0 <checkDemoModCalisma+0x500>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b09      	cmp	r3, #9
 80067fa:	d908      	bls.n	800680e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80067fc:	4b74      	ldr	r3, [pc, #464]	; (80069d0 <checkDemoModCalisma+0x500>)
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006802:	4b74      	ldr	r3, [pc, #464]	; (80069d4 <checkDemoModCalisma+0x504>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	4b72      	ldr	r3, [pc, #456]	; (80069d4 <checkDemoModCalisma+0x504>)
 800680c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800680e:	4b71      	ldr	r3, [pc, #452]	; (80069d4 <checkDemoModCalisma+0x504>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b09      	cmp	r3, #9
 8006814:	d908      	bls.n	8006828 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006816:	4b6f      	ldr	r3, [pc, #444]	; (80069d4 <checkDemoModCalisma+0x504>)
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 800681c:	4b6e      	ldr	r3, [pc, #440]	; (80069d8 <checkDemoModCalisma+0x508>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	b2da      	uxtb	r2, r3
 8006824:	4b6c      	ldr	r3, [pc, #432]	; (80069d8 <checkDemoModCalisma+0x508>)
 8006826:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006828:	4b6b      	ldr	r3, [pc, #428]	; (80069d8 <checkDemoModCalisma+0x508>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b09      	cmp	r3, #9
 800682e:	d908      	bls.n	8006842 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006830:	4b69      	ldr	r3, [pc, #420]	; (80069d8 <checkDemoModCalisma+0x508>)
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006836:	4b69      	ldr	r3, [pc, #420]	; (80069dc <checkDemoModCalisma+0x50c>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	b2da      	uxtb	r2, r3
 800683e:	4b67      	ldr	r3, [pc, #412]	; (80069dc <checkDemoModCalisma+0x50c>)
 8006840:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006842:	4b66      	ldr	r3, [pc, #408]	; (80069dc <checkDemoModCalisma+0x50c>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b09      	cmp	r3, #9
 8006848:	d908      	bls.n	800685c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800684a:	4b64      	ldr	r3, [pc, #400]	; (80069dc <checkDemoModCalisma+0x50c>)
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006850:	4b63      	ldr	r3, [pc, #396]	; (80069e0 <checkDemoModCalisma+0x510>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	4b61      	ldr	r3, [pc, #388]	; (80069e0 <checkDemoModCalisma+0x510>)
 800685a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800685c:	4b60      	ldr	r3, [pc, #384]	; (80069e0 <checkDemoModCalisma+0x510>)
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	4b60      	ldr	r3, [pc, #384]	; (80069e4 <checkDemoModCalisma+0x514>)
 8006862:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006866:	4b5d      	ldr	r3, [pc, #372]	; (80069dc <checkDemoModCalisma+0x50c>)
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	4b5e      	ldr	r3, [pc, #376]	; (80069e4 <checkDemoModCalisma+0x514>)
 800686c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800686e:	4b5a      	ldr	r3, [pc, #360]	; (80069d8 <checkDemoModCalisma+0x508>)
 8006870:	781a      	ldrb	r2, [r3, #0]
 8006872:	4b5c      	ldr	r3, [pc, #368]	; (80069e4 <checkDemoModCalisma+0x514>)
 8006874:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006876:	4b57      	ldr	r3, [pc, #348]	; (80069d4 <checkDemoModCalisma+0x504>)
 8006878:	781a      	ldrb	r2, [r3, #0]
 800687a:	4b5a      	ldr	r3, [pc, #360]	; (80069e4 <checkDemoModCalisma+0x514>)
 800687c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800687e:	4b54      	ldr	r3, [pc, #336]	; (80069d0 <checkDemoModCalisma+0x500>)
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	4b58      	ldr	r3, [pc, #352]	; (80069e4 <checkDemoModCalisma+0x514>)
 8006884:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006886:	4b58      	ldr	r3, [pc, #352]	; (80069e8 <checkDemoModCalisma+0x518>)
 8006888:	2201      	movs	r2, #1
 800688a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800688c:	4b4f      	ldr	r3, [pc, #316]	; (80069cc <checkDemoModCalisma+0x4fc>)
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006892:	4b56      	ldr	r3, [pc, #344]	; (80069ec <checkDemoModCalisma+0x51c>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 8087 	bne.w	80069aa <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 800689c:	4a54      	ldr	r2, [pc, #336]	; (80069f0 <checkDemoModCalisma+0x520>)
 800689e:	2101      	movs	r1, #1
 80068a0:	2002      	movs	r0, #2
 80068a2:	f001 fa57 	bl	8007d54 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80068a6:	4a53      	ldr	r2, [pc, #332]	; (80069f4 <checkDemoModCalisma+0x524>)
 80068a8:	2101      	movs	r1, #1
 80068aa:	2001      	movs	r0, #1
 80068ac:	f001 fa52 	bl	8007d54 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80068b0:	4b4b      	ldr	r3, [pc, #300]	; (80069e0 <checkDemoModCalisma+0x510>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	220a      	movs	r2, #10
 80068b6:	4950      	ldr	r1, [pc, #320]	; (80069f8 <checkDemoModCalisma+0x528>)
 80068b8:	4618      	mov	r0, r3
 80068ba:	f005 fd9d 	bl	800c3f8 <itoa>
			lcd_print(2,12,snum);
 80068be:	4a4e      	ldr	r2, [pc, #312]	; (80069f8 <checkDemoModCalisma+0x528>)
 80068c0:	210c      	movs	r1, #12
 80068c2:	2002      	movs	r0, #2
 80068c4:	f001 fa46 	bl	8007d54 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80068c8:	4b44      	ldr	r3, [pc, #272]	; (80069dc <checkDemoModCalisma+0x50c>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	220a      	movs	r2, #10
 80068ce:	494a      	ldr	r1, [pc, #296]	; (80069f8 <checkDemoModCalisma+0x528>)
 80068d0:	4618      	mov	r0, r3
 80068d2:	f005 fd91 	bl	800c3f8 <itoa>
			lcd_print(2,13,snum);
 80068d6:	4a48      	ldr	r2, [pc, #288]	; (80069f8 <checkDemoModCalisma+0x528>)
 80068d8:	210d      	movs	r1, #13
 80068da:	2002      	movs	r0, #2
 80068dc:	f001 fa3a 	bl	8007d54 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80068e0:	4b3d      	ldr	r3, [pc, #244]	; (80069d8 <checkDemoModCalisma+0x508>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	220a      	movs	r2, #10
 80068e6:	4944      	ldr	r1, [pc, #272]	; (80069f8 <checkDemoModCalisma+0x528>)
 80068e8:	4618      	mov	r0, r3
 80068ea:	f005 fd85 	bl	800c3f8 <itoa>
			lcd_print(2,14,snum);
 80068ee:	4a42      	ldr	r2, [pc, #264]	; (80069f8 <checkDemoModCalisma+0x528>)
 80068f0:	210e      	movs	r1, #14
 80068f2:	2002      	movs	r0, #2
 80068f4:	f001 fa2e 	bl	8007d54 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80068f8:	4b36      	ldr	r3, [pc, #216]	; (80069d4 <checkDemoModCalisma+0x504>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	220a      	movs	r2, #10
 80068fe:	493e      	ldr	r1, [pc, #248]	; (80069f8 <checkDemoModCalisma+0x528>)
 8006900:	4618      	mov	r0, r3
 8006902:	f005 fd79 	bl	800c3f8 <itoa>
			lcd_print(2,15,snum);
 8006906:	4a3c      	ldr	r2, [pc, #240]	; (80069f8 <checkDemoModCalisma+0x528>)
 8006908:	210f      	movs	r1, #15
 800690a:	2002      	movs	r0, #2
 800690c:	f001 fa22 	bl	8007d54 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006910:	4b2f      	ldr	r3, [pc, #188]	; (80069d0 <checkDemoModCalisma+0x500>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	220a      	movs	r2, #10
 8006916:	4938      	ldr	r1, [pc, #224]	; (80069f8 <checkDemoModCalisma+0x528>)
 8006918:	4618      	mov	r0, r3
 800691a:	f005 fd6d 	bl	800c3f8 <itoa>
			lcd_print(2,16,snum);
 800691e:	4a36      	ldr	r2, [pc, #216]	; (80069f8 <checkDemoModCalisma+0x528>)
 8006920:	2110      	movs	r1, #16
 8006922:	2002      	movs	r0, #2
 8006924:	f001 fa16 	bl	8007d54 <lcd_print>
			mesajYazildi=1;
 8006928:	4b34      	ldr	r3, [pc, #208]	; (80069fc <checkDemoModCalisma+0x52c>)
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800692e:	e03c      	b.n	80069aa <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006930:	4b33      	ldr	r3, [pc, #204]	; (8006a00 <checkDemoModCalisma+0x530>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d003      	beq.n	8006940 <checkDemoModCalisma+0x470>
 8006938:	4b2c      	ldr	r3, [pc, #176]	; (80069ec <checkDemoModCalisma+0x51c>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d134      	bne.n	80069aa <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006940:	2200      	movs	r2, #0
 8006942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006946:	481b      	ldr	r0, [pc, #108]	; (80069b4 <checkDemoModCalisma+0x4e4>)
 8006948:	f002 fd41 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800694c:	2200      	movs	r2, #0
 800694e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006952:	4818      	ldr	r0, [pc, #96]	; (80069b4 <checkDemoModCalisma+0x4e4>)
 8006954:	f002 fd3b 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006958:	2200      	movs	r2, #0
 800695a:	2104      	movs	r1, #4
 800695c:	4815      	ldr	r0, [pc, #84]	; (80069b4 <checkDemoModCalisma+0x4e4>)
 800695e:	f002 fd36 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006962:	2200      	movs	r2, #0
 8006964:	2102      	movs	r1, #2
 8006966:	4813      	ldr	r0, [pc, #76]	; (80069b4 <checkDemoModCalisma+0x4e4>)
 8006968:	f002 fd31 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800696c:	2200      	movs	r2, #0
 800696e:	2101      	movs	r1, #1
 8006970:	4810      	ldr	r0, [pc, #64]	; (80069b4 <checkDemoModCalisma+0x4e4>)
 8006972:	f002 fd2c 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006976:	2200      	movs	r2, #0
 8006978:	2120      	movs	r1, #32
 800697a:	480d      	ldr	r0, [pc, #52]	; (80069b0 <checkDemoModCalisma+0x4e0>)
 800697c:	f002 fd27 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006980:	2200      	movs	r2, #0
 8006982:	2110      	movs	r1, #16
 8006984:	480a      	ldr	r0, [pc, #40]	; (80069b0 <checkDemoModCalisma+0x4e0>)
 8006986:	f002 fd22 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800698a:	2200      	movs	r2, #0
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	480b      	ldr	r0, [pc, #44]	; (80069bc <checkDemoModCalisma+0x4ec>)
 8006990:	f002 fd1d 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006994:	2200      	movs	r2, #0
 8006996:	2140      	movs	r1, #64	; 0x40
 8006998:	4808      	ldr	r0, [pc, #32]	; (80069bc <checkDemoModCalisma+0x4ec>)
 800699a:	f002 fd18 	bl	80093ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800699e:	2200      	movs	r2, #0
 80069a0:	2120      	movs	r1, #32
 80069a2:	4806      	ldr	r0, [pc, #24]	; (80069bc <checkDemoModCalisma+0x4ec>)
 80069a4:	f002 fd13 	bl	80093ce <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80069a8:	e7ff      	b.n	80069aa <checkDemoModCalisma+0x4da>
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40011000 	.word	0x40011000
 80069b4:	40010c00 	.word	0x40010c00
 80069b8:	20000255 	.word	0x20000255
 80069bc:	40010800 	.word	0x40010800
 80069c0:	200001d8 	.word	0x200001d8
 80069c4:	200001e8 	.word	0x200001e8
 80069c8:	20000254 	.word	0x20000254
 80069cc:	2000023a 	.word	0x2000023a
 80069d0:	200001f9 	.word	0x200001f9
 80069d4:	200001fa 	.word	0x200001fa
 80069d8:	20000008 	.word	0x20000008
 80069dc:	20000009 	.word	0x20000009
 80069e0:	200001fb 	.word	0x200001fb
 80069e4:	20000128 	.word	0x20000128
 80069e8:	20000228 	.word	0x20000228
 80069ec:	20000219 	.word	0x20000219
 80069f0:	0800dbb8 	.word	0x0800dbb8
 80069f4:	0800dbc4 	.word	0x0800dbc4
 80069f8:	20000198 	.word	0x20000198
 80069fc:	20000230 	.word	0x20000230
 8006a00:	2000021a 	.word	0x2000021a

08006a04 <mainLoop>:

void mainLoop() {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006a0a:	f7fe f923 	bl	8004c54 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006a0e:	2101      	movs	r1, #1
 8006a10:	48ac      	ldr	r0, [pc, #688]	; (8006cc4 <mainLoop+0x2c0>)
 8006a12:	f002 fcc5 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d136      	bne.n	8006a8a <mainLoop+0x86>
 8006a1c:	2108      	movs	r1, #8
 8006a1e:	48aa      	ldr	r0, [pc, #680]	; (8006cc8 <mainLoop+0x2c4>)
 8006a20:	f002 fcbe 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d12f      	bne.n	8006a8a <mainLoop+0x86>
 8006a2a:	2102      	movs	r1, #2
 8006a2c:	48a5      	ldr	r0, [pc, #660]	; (8006cc4 <mainLoop+0x2c0>)
 8006a2e:	f002 fcb7 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d128      	bne.n	8006a8a <mainLoop+0x86>
 8006a38:	2104      	movs	r1, #4
 8006a3a:	48a2      	ldr	r0, [pc, #648]	; (8006cc4 <mainLoop+0x2c0>)
 8006a3c:	f002 fcb0 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d121      	bne.n	8006a8a <mainLoop+0x86>
 8006a46:	2108      	movs	r1, #8
 8006a48:	489e      	ldr	r0, [pc, #632]	; (8006cc4 <mainLoop+0x2c0>)
 8006a4a:	f002 fca9 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11a      	bne.n	8006a8a <mainLoop+0x86>
 8006a54:	2180      	movs	r1, #128	; 0x80
 8006a56:	489c      	ldr	r0, [pc, #624]	; (8006cc8 <mainLoop+0x2c4>)
 8006a58:	f002 fca2 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d113      	bne.n	8006a8a <mainLoop+0x86>
 8006a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a66:	4898      	ldr	r0, [pc, #608]	; (8006cc8 <mainLoop+0x2c4>)
 8006a68:	f002 fc9a 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d10b      	bne.n	8006a8a <mainLoop+0x86>
 8006a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a76:	4894      	ldr	r0, [pc, #592]	; (8006cc8 <mainLoop+0x2c4>)
 8006a78:	f002 fc92 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d103      	bne.n	8006a8a <mainLoop+0x86>
			butonKontrol=0;
 8006a82:	4b92      	ldr	r3, [pc, #584]	; (8006ccc <mainLoop+0x2c8>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	e003      	b.n	8006a92 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a8a:	4b91      	ldr	r3, [pc, #580]	; (8006cd0 <mainLoop+0x2cc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a91      	ldr	r2, [pc, #580]	; (8006cd4 <mainLoop+0x2d0>)
 8006a90:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a92:	4b91      	ldr	r3, [pc, #580]	; (8006cd8 <mainLoop+0x2d4>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d03a      	beq.n	8006b10 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a9a:	bf00      	nop
 8006a9c:	488f      	ldr	r0, [pc, #572]	; (8006cdc <mainLoop+0x2d8>)
 8006a9e:	f003 faa8 	bl	8009ff2 <HAL_I2C_GetError>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d0f9      	beq.n	8006a9c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006aa8:	bf00      	nop
 8006aaa:	488c      	ldr	r0, [pc, #560]	; (8006cdc <mainLoop+0x2d8>)
 8006aac:	f003 fa94 	bl	8009fd8 <HAL_I2C_GetState>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d1f9      	bne.n	8006aaa <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ab6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006aba:	9302      	str	r3, [sp, #8]
 8006abc:	236e      	movs	r3, #110	; 0x6e
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	4b87      	ldr	r3, [pc, #540]	; (8006ce0 <mainLoop+0x2dc>)
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	236e      	movs	r3, #110	; 0x6e
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	21a0      	movs	r1, #160	; 0xa0
 8006aca:	4884      	ldr	r0, [pc, #528]	; (8006cdc <mainLoop+0x2d8>)
 8006acc:	f002 ff22 	bl	8009914 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ad4:	f001 fe94 	bl	8008800 <HAL_Delay>

		  hafizaYaz=0;
 8006ad8:	4b7f      	ldr	r3, [pc, #508]	; (8006cd8 <mainLoop+0x2d4>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006ade:	4b81      	ldr	r3, [pc, #516]	; (8006ce4 <mainLoop+0x2e0>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d105      	bne.n	8006af2 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006ae6:	4a80      	ldr	r2, [pc, #512]	; (8006ce8 <mainLoop+0x2e4>)
 8006ae8:	2101      	movs	r1, #1
 8006aea:	2002      	movs	r0, #2
 8006aec:	f001 f932 	bl	8007d54 <lcd_print>
 8006af0:	e008      	b.n	8006b04 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006af2:	4b7c      	ldr	r3, [pc, #496]	; (8006ce4 <mainLoop+0x2e0>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d104      	bne.n	8006b04 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006afa:	4a7c      	ldr	r2, [pc, #496]	; (8006cec <mainLoop+0x2e8>)
 8006afc:	2101      	movs	r1, #1
 8006afe:	2002      	movs	r0, #2
 8006b00:	f001 f928 	bl	8007d54 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b08:	f001 fe7a 	bl	8008800 <HAL_Delay>
		  lcd_clear();
 8006b0c:	f001 f94e 	bl	8007dac <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006b10:	4b77      	ldr	r3, [pc, #476]	; (8006cf0 <mainLoop+0x2ec>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f083 0301 	eor.w	r3, r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d06e      	beq.n	8006bfc <mainLoop+0x1f8>
 8006b1e:	486f      	ldr	r0, [pc, #444]	; (8006cdc <mainLoop+0x2d8>)
 8006b20:	f003 fa5a 	bl	8009fd8 <HAL_I2C_GetState>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d168      	bne.n	8006bfc <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8006b2a:	4b72      	ldr	r3, [pc, #456]	; (8006cf4 <mainLoop+0x2f0>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	f083 0301 	eor.w	r3, r3, #1
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d044      	beq.n	8006bc2 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006b38:	4a6f      	ldr	r2, [pc, #444]	; (8006cf8 <mainLoop+0x2f4>)
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	f001 f909 	bl	8007d54 <lcd_print>
			  if(dilSecim==0) {
 8006b42:	4b68      	ldr	r3, [pc, #416]	; (8006ce4 <mainLoop+0x2e0>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d105      	bne.n	8006b56 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006b4a:	4a6c      	ldr	r2, [pc, #432]	; (8006cfc <mainLoop+0x2f8>)
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	2002      	movs	r0, #2
 8006b50:	f001 f900 	bl	8007d54 <lcd_print>
 8006b54:	e008      	b.n	8006b68 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006b56:	4b63      	ldr	r3, [pc, #396]	; (8006ce4 <mainLoop+0x2e0>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d104      	bne.n	8006b68 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006b5e:	4a68      	ldr	r2, [pc, #416]	; (8006d00 <mainLoop+0x2fc>)
 8006b60:	2101      	movs	r1, #1
 8006b62:	2002      	movs	r0, #2
 8006b64:	f001 f8f6 	bl	8007d54 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b6c:	f001 fe48 	bl	8008800 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b70:	bf00      	nop
 8006b72:	485a      	ldr	r0, [pc, #360]	; (8006cdc <mainLoop+0x2d8>)
 8006b74:	f003 fa3d 	bl	8009ff2 <HAL_I2C_GetError>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d0f9      	beq.n	8006b72 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b7e:	e003      	b.n	8006b88 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b84:	f001 fe3c 	bl	8008800 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b88:	4854      	ldr	r0, [pc, #336]	; (8006cdc <mainLoop+0x2d8>)
 8006b8a:	f003 fa25 	bl	8009fd8 <HAL_I2C_GetState>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d1f5      	bne.n	8006b80 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b94:	4b53      	ldr	r3, [pc, #332]	; (8006ce4 <mainLoop+0x2e0>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b9c:	4a59      	ldr	r2, [pc, #356]	; (8006d04 <mainLoop+0x300>)
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	2002      	movs	r0, #2
 8006ba2:	f001 f8d7 	bl	8007d54 <lcd_print>
 8006ba6:	e008      	b.n	8006bba <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006ba8:	4b4e      	ldr	r3, [pc, #312]	; (8006ce4 <mainLoop+0x2e0>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d104      	bne.n	8006bba <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006bb0:	4a55      	ldr	r2, [pc, #340]	; (8006d08 <mainLoop+0x304>)
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	2002      	movs	r0, #2
 8006bb6:	f001 f8cd 	bl	8007d54 <lcd_print>
			  }

			  ilkOkuma=1;
 8006bba:	4b4e      	ldr	r3, [pc, #312]	; (8006cf4 <mainLoop+0x2f0>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	e014      	b.n	8006bec <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006bc2:	4b48      	ldr	r3, [pc, #288]	; (8006ce4 <mainLoop+0x2e0>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d105      	bne.n	8006bd6 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006bca:	4a50      	ldr	r2, [pc, #320]	; (8006d0c <mainLoop+0x308>)
 8006bcc:	2101      	movs	r1, #1
 8006bce:	2002      	movs	r0, #2
 8006bd0:	f001 f8c0 	bl	8007d54 <lcd_print>
 8006bd4:	e008      	b.n	8006be8 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006bd6:	4b43      	ldr	r3, [pc, #268]	; (8006ce4 <mainLoop+0x2e0>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d104      	bne.n	8006be8 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006bde:	4a4c      	ldr	r2, [pc, #304]	; (8006d10 <mainLoop+0x30c>)
 8006be0:	2101      	movs	r1, #1
 8006be2:	2002      	movs	r0, #2
 8006be4:	f001 f8b6 	bl	8007d54 <lcd_print>
			  }
			  lcd_clear();
 8006be8:	f001 f8e0 	bl	8007dac <lcd_clear>
		  }

		  lcd_clear();
 8006bec:	f001 f8de 	bl	8007dac <lcd_clear>

		  eepromKontrol(1);
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	f7f9 fb1f 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006bf6:	4b3e      	ldr	r3, [pc, #248]	; (8006cf0 <mainLoop+0x2ec>)
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006bfc:	4b45      	ldr	r3, [pc, #276]	; (8006d14 <mainLoop+0x310>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11c      	bne.n	8006c3e <mainLoop+0x23a>
 8006c04:	4b44      	ldr	r3, [pc, #272]	; (8006d18 <mainLoop+0x314>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f083 0301 	eor.w	r3, r3, #1
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d015      	beq.n	8006c3e <mainLoop+0x23a>
 8006c12:	4b42      	ldr	r3, [pc, #264]	; (8006d1c <mainLoop+0x318>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d111      	bne.n	8006c3e <mainLoop+0x23a>
			lcd_clear();
 8006c1a:	f001 f8c7 	bl	8007dac <lcd_clear>
			HAL_Delay(10);
 8006c1e:	200a      	movs	r0, #10
 8006c20:	f001 fdee 	bl	8008800 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006c24:	4a3e      	ldr	r2, [pc, #248]	; (8006d20 <mainLoop+0x31c>)
 8006c26:	2101      	movs	r1, #1
 8006c28:	2001      	movs	r0, #1
 8006c2a:	f001 f893 	bl	8007d54 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006c2e:	4a3d      	ldr	r2, [pc, #244]	; (8006d24 <mainLoop+0x320>)
 8006c30:	2101      	movs	r1, #1
 8006c32:	2002      	movs	r0, #2
 8006c34:	f001 f88e 	bl	8007d54 <lcd_print>
			mesajYazildi=1;
 8006c38:	4b37      	ldr	r3, [pc, #220]	; (8006d18 <mainLoop+0x314>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006c3e:	4b35      	ldr	r3, [pc, #212]	; (8006d14 <mainLoop+0x310>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d112      	bne.n	8006c6c <mainLoop+0x268>
 8006c46:	2102      	movs	r1, #2
 8006c48:	481e      	ldr	r0, [pc, #120]	; (8006cc4 <mainLoop+0x2c0>)
 8006c4a:	f002 fba9 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d10b      	bne.n	8006c6c <mainLoop+0x268>
 8006c54:	2104      	movs	r1, #4
 8006c56:	481b      	ldr	r0, [pc, #108]	; (8006cc4 <mainLoop+0x2c0>)
 8006c58:	f002 fba2 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d104      	bne.n	8006c6c <mainLoop+0x268>
			menuGiris=1;
 8006c62:	4b2c      	ldr	r3, [pc, #176]	; (8006d14 <mainLoop+0x310>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c68:	f001 f8a0 	bl	8007dac <lcd_clear>
		}

		if(menuGiris==1) {
 8006c6c:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <mainLoop+0x310>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <mainLoop+0x274>
			menu();
 8006c74:	f7fa fb80 	bl	8001378 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c7c:	4812      	ldr	r0, [pc, #72]	; (8006cc8 <mainLoop+0x2c4>)
 8006c7e:	f002 fbbe 	bl	80093fe <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c86:	4828      	ldr	r0, [pc, #160]	; (8006d28 <mainLoop+0x324>)
 8006c88:	f002 fb8a 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <mainLoop+0x2a4>
 8006c92:	4b26      	ldr	r3, [pc, #152]	; (8006d2c <mainLoop+0x328>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	f083 0301 	eor.w	r3, r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <mainLoop+0x2a4>
			stopVar=1;
 8006ca0:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <mainLoop+0x32c>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	e002      	b.n	8006cae <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8006ca8:	4b21      	ldr	r3, [pc, #132]	; (8006d30 <mainLoop+0x32c>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006cae:	f7fd ffe7 	bl	8004c80 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006cb2:	f7fe f819 	bl	8004ce8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006cb6:	f7fe f85d 	bl	8004d74 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006cba:	f7fe f8ad 	bl	8004e18 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006cbe:	f7ff fc07 	bl	80064d0 <checkDemoModCalisma>
		checkLCDBacklight();
 8006cc2:	e6a2      	b.n	8006a0a <mainLoop+0x6>
 8006cc4:	40010800 	.word	0x40010800
 8006cc8:	40011000 	.word	0x40011000
 8006ccc:	2000022b 	.word	0x2000022b
 8006cd0:	200001d8 	.word	0x200001d8
 8006cd4:	200001f4 	.word	0x200001f4
 8006cd8:	20000228 	.word	0x20000228
 8006cdc:	20000384 	.word	0x20000384
 8006ce0:	20000128 	.word	0x20000128
 8006ce4:	2000021d 	.word	0x2000021d
 8006ce8:	0800dbd8 	.word	0x0800dbd8
 8006cec:	0800dbec 	.word	0x0800dbec
 8006cf0:	20000229 	.word	0x20000229
 8006cf4:	2000022a 	.word	0x2000022a
 8006cf8:	0800dc00 	.word	0x0800dc00
 8006cfc:	0800dc14 	.word	0x0800dc14
 8006d00:	0800dc28 	.word	0x0800dc28
 8006d04:	0800dc3c 	.word	0x0800dc3c
 8006d08:	0800dc50 	.word	0x0800dc50
 8006d0c:	0800dc64 	.word	0x0800dc64
 8006d10:	0800dc78 	.word	0x0800dc78
 8006d14:	20000219 	.word	0x20000219
 8006d18:	20000230 	.word	0x20000230
 8006d1c:	2000021a 	.word	0x2000021a
 8006d20:	0800dc8c 	.word	0x0800dc8c
 8006d24:	0800dca0 	.word	0x0800dca0
 8006d28:	40010c00 	.word	0x40010c00
 8006d2c:	20000251 	.word	0x20000251
 8006d30:	2000024e 	.word	0x2000024e

08006d34 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
	mainSection:
	lcd_cursor(1);
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	f001 f868 	bl	8007e10 <lcd_cursor>

    memset(machineID, 0, sizeof(machineID));
 8006d40:	220c      	movs	r2, #12
 8006d42:	2100      	movs	r1, #0
 8006d44:	4899      	ldr	r0, [pc, #612]	; (8006fac <takeMachineID+0x278>)
 8006d46:	f005 fc7e 	bl	800c646 <memset>

    int cursorPosition = 3;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006d52:	2305      	movs	r3, #5
 8006d54:	607b      	str	r3, [r7, #4]

    printTemplate(1, 0);
 8006d56:	2100      	movs	r1, #0
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f7fa f8a7 	bl	8000eac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d5e:	2108      	movs	r1, #8
 8006d60:	4893      	ldr	r0, [pc, #588]	; (8006fb0 <takeMachineID+0x27c>)
 8006d62:	f002 fb1d 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d135      	bne.n	8006dd8 <takeMachineID+0xa4>
        	lcd_cursor(0);
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f001 f84f 	bl	8007e10 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006d72:	4b8e      	ldr	r3, [pc, #568]	; (8006fac <takeMachineID+0x278>)
 8006d74:	7adb      	ldrb	r3, [r3, #11]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11f      	bne.n	8006dba <takeMachineID+0x86>
        		lcd_clear();
 8006d7a:	f001 f817 	bl	8007dac <lcd_clear>
        		if(dilSecim == 0) {
 8006d7e:	4b8d      	ldr	r3, [pc, #564]	; (8006fb4 <takeMachineID+0x280>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <takeMachineID+0x68>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8006d86:	4a8c      	ldr	r2, [pc, #560]	; (8006fb8 <takeMachineID+0x284>)
 8006d88:	2101      	movs	r1, #1
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	f000 ffe2 	bl	8007d54 <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006d90:	4a8a      	ldr	r2, [pc, #552]	; (8006fbc <takeMachineID+0x288>)
 8006d92:	2101      	movs	r1, #1
 8006d94:	2002      	movs	r0, #2
 8006d96:	f000 ffdd 	bl	8007d54 <lcd_print>
 8006d9a:	e009      	b.n	8006db0 <takeMachineID+0x7c>
        		} else {
        			lcd_print(1, 1, "MACHINE ID MUST");
 8006d9c:	4a88      	ldr	r2, [pc, #544]	; (8006fc0 <takeMachineID+0x28c>)
 8006d9e:	2101      	movs	r1, #1
 8006da0:	2001      	movs	r0, #1
 8006da2:	f000 ffd7 	bl	8007d54 <lcd_print>
        			lcd_print(2, 1, "BE 12 CHARACTERS");
 8006da6:	4a87      	ldr	r2, [pc, #540]	; (8006fc4 <takeMachineID+0x290>)
 8006da8:	2101      	movs	r1, #1
 8006daa:	2002      	movs	r0, #2
 8006dac:	f000 ffd2 	bl	8007d54 <lcd_print>
        		}
        		HAL_Delay(1200);
 8006db0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006db4:	f001 fd24 	bl	8008800 <HAL_Delay>
        		goto mainSection;
 8006db8:	e7bf      	b.n	8006d3a <takeMachineID+0x6>
        		} else {
        			setupCompleted = 1;
        		}
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, machineIDCharacterLimit);
 8006dba:	4b83      	ldr	r3, [pc, #524]	; (8006fc8 <takeMachineID+0x294>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a83      	ldr	r2, [pc, #524]	; (8006fcc <takeMachineID+0x298>)
 8006dc0:	4413      	add	r3, r2
 8006dc2:	4a7a      	ldr	r2, [pc, #488]	; (8006fac <takeMachineID+0x278>)
 8006dc4:	6810      	ldr	r0, [r2, #0]
 8006dc6:	6851      	ldr	r1, [r2, #4]
 8006dc8:	6892      	ldr	r2, [r2, #8]
 8006dca:	6018      	str	r0, [r3, #0]
 8006dcc:	6059      	str	r1, [r3, #4]
 8006dce:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006dd0:	20c8      	movs	r0, #200	; 0xc8
 8006dd2:	f001 fd15 	bl	8008800 <HAL_Delay>

            break;
 8006dd6:	e0e5      	b.n	8006fa4 <takeMachineID+0x270>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4875      	ldr	r0, [pc, #468]	; (8006fb0 <takeMachineID+0x27c>)
 8006ddc:	f002 fae0 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d112      	bne.n	8006e0c <takeMachineID+0xd8>
        	if(cursorPosition == 7) {
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b07      	cmp	r3, #7
 8006dea:	d102      	bne.n	8006df2 <takeMachineID+0xbe>
        		cursorPosition = 10;
 8006dec:	230a      	movs	r3, #10
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e008      	b.n	8006e04 <takeMachineID+0xd0>
        	} else if (cursorPosition == 14) {
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b0e      	cmp	r3, #14
 8006df6:	d102      	bne.n	8006dfe <takeMachineID+0xca>
                cursorPosition = 3;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e002      	b.n	8006e04 <takeMachineID+0xd0>
            } else {
            	cursorPosition++;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(350);
 8006e04:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006e08:	f001 fcfa 	bl	8008800 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006e0c:	2108      	movs	r1, #8
 8006e0e:	4870      	ldr	r0, [pc, #448]	; (8006fd0 <takeMachineID+0x29c>)
 8006e10:	f002 fac6 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d112      	bne.n	8006e40 <takeMachineID+0x10c>
            if (cursorPosition == 3) {
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d102      	bne.n	8006e26 <takeMachineID+0xf2>
                cursorPosition = 14;
 8006e20:	230e      	movs	r3, #14
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e008      	b.n	8006e38 <takeMachineID+0x104>
            } else if(cursorPosition == 10) {
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b0a      	cmp	r3, #10
 8006e2a:	d102      	bne.n	8006e32 <takeMachineID+0xfe>
            	cursorPosition = 7;
 8006e2c:	2307      	movs	r3, #7
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e002      	b.n	8006e38 <takeMachineID+0x104>
            } else {
            	cursorPosition--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 8006e38:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006e3c:	f001 fce0 	bl	8008800 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e40:	2102      	movs	r1, #2
 8006e42:	485b      	ldr	r0, [pc, #364]	; (8006fb0 <takeMachineID+0x27c>)
 8006e44:	f002 faac 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d16c      	bne.n	8006f28 <takeMachineID+0x1f4>
        	if(cursorPosition == 3) {
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d105      	bne.n	8006e60 <takeMachineID+0x12c>
        		machineID[machineIDLoc] = '0';
 8006e54:	4a55      	ldr	r2, [pc, #340]	; (8006fac <takeMachineID+0x278>)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4413      	add	r3, r2
 8006e5a:	2230      	movs	r2, #48	; 0x30
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	e04f      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 4) {
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d105      	bne.n	8006e72 <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '1';
 8006e66:	4a51      	ldr	r2, [pc, #324]	; (8006fac <takeMachineID+0x278>)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	2231      	movs	r2, #49	; 0x31
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e046      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 5) {
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d105      	bne.n	8006e84 <takeMachineID+0x150>
        		machineID[machineIDLoc] = '2';
 8006e78:	4a4c      	ldr	r2, [pc, #304]	; (8006fac <takeMachineID+0x278>)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	2232      	movs	r2, #50	; 0x32
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	e03d      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 6) {
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b06      	cmp	r3, #6
 8006e88:	d105      	bne.n	8006e96 <takeMachineID+0x162>
        		machineID[machineIDLoc] = '3';
 8006e8a:	4a48      	ldr	r2, [pc, #288]	; (8006fac <takeMachineID+0x278>)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4413      	add	r3, r2
 8006e90:	2233      	movs	r2, #51	; 0x33
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	e034      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 7) {
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b07      	cmp	r3, #7
 8006e9a:	d105      	bne.n	8006ea8 <takeMachineID+0x174>
        		machineID[machineIDLoc] = '4';
 8006e9c:	4a43      	ldr	r2, [pc, #268]	; (8006fac <takeMachineID+0x278>)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	2234      	movs	r2, #52	; 0x34
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e02b      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 10) {
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b0a      	cmp	r3, #10
 8006eac:	d105      	bne.n	8006eba <takeMachineID+0x186>
        		machineID[machineIDLoc] = '5';
 8006eae:	4a3f      	ldr	r2, [pc, #252]	; (8006fac <takeMachineID+0x278>)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	2235      	movs	r2, #53	; 0x35
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	e022      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 11) {
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b0b      	cmp	r3, #11
 8006ebe:	d105      	bne.n	8006ecc <takeMachineID+0x198>
        		machineID[machineIDLoc] = '6';
 8006ec0:	4a3a      	ldr	r2, [pc, #232]	; (8006fac <takeMachineID+0x278>)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	2236      	movs	r2, #54	; 0x36
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	e019      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 12) {
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b0c      	cmp	r3, #12
 8006ed0:	d105      	bne.n	8006ede <takeMachineID+0x1aa>
        		machineID[machineIDLoc] = '7';
 8006ed2:	4a36      	ldr	r2, [pc, #216]	; (8006fac <takeMachineID+0x278>)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	2237      	movs	r2, #55	; 0x37
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	e010      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 13) {
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b0d      	cmp	r3, #13
 8006ee2:	d105      	bne.n	8006ef0 <takeMachineID+0x1bc>
        		machineID[machineIDLoc] = '8';
 8006ee4:	4a31      	ldr	r2, [pc, #196]	; (8006fac <takeMachineID+0x278>)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4413      	add	r3, r2
 8006eea:	2238      	movs	r2, #56	; 0x38
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e007      	b.n	8006f00 <takeMachineID+0x1cc>
        	} else if(cursorPosition == 14) {
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b0e      	cmp	r3, #14
 8006ef4:	d104      	bne.n	8006f00 <takeMachineID+0x1cc>
        		machineID[machineIDLoc] = '9';
 8006ef6:	4a2d      	ldr	r2, [pc, #180]	; (8006fac <takeMachineID+0x278>)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4413      	add	r3, r2
 8006efc:	2239      	movs	r2, #57	; 0x39
 8006efe:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	b2d9      	uxtb	r1, r3
 8006f04:	4a29      	ldr	r2, [pc, #164]	; (8006fac <takeMachineID+0x278>)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	2001      	movs	r0, #1
 8006f10:	f000 ff35 	bl	8007d7e <lcd_print_char>

        	writeLoc++;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3301      	adds	r3, #1
 8006f18:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(450);
 8006f20:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8006f24:	f001 fc6c 	bl	8008800 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006f28:	2104      	movs	r1, #4
 8006f2a:	4821      	ldr	r0, [pc, #132]	; (8006fb0 <takeMachineID+0x27c>)
 8006f2c:	f002 fa38 	bl	80093a0 <HAL_GPIO_ReadPin>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d12f      	bne.n	8006f96 <takeMachineID+0x262>
            if(strlen(machineID) >= 1) {
 8006f36:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <takeMachineID+0x278>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d027      	beq.n	8006f8e <takeMachineID+0x25a>

                machineID[machineIDLoc] = '\0';
 8006f3e:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <takeMachineID+0x278>)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4413      	add	r3, r2
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	4619      	mov	r1, r3
 8006f52:	2001      	movs	r0, #1
 8006f54:	f000 ff34 	bl	8007dc0 <lcd_delete_char>
                HAL_Delay(50);
 8006f58:	2032      	movs	r0, #50	; 0x32
 8006f5a:	f001 fc51 	bl	8008800 <HAL_Delay>

                if(writeLoc > 5) {
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b05      	cmp	r3, #5
 8006f62:	dd03      	ble.n	8006f6c <takeMachineID+0x238>
                	writeLoc--;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	607b      	str	r3, [r7, #4]
 8006f6a:	e004      	b.n	8006f76 <takeMachineID+0x242>
                } else if(writeLoc < 5) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	dc01      	bgt.n	8006f76 <takeMachineID+0x242>
                	writeLoc = 5;
 8006f72:	2305      	movs	r3, #5
 8006f74:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dd03      	ble.n	8006f84 <takeMachineID+0x250>
                	machineIDLoc--;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	60bb      	str	r3, [r7, #8]
 8006f82:	e004      	b.n	8006f8e <takeMachineID+0x25a>
                } else if(machineIDLoc < 0) {
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da01      	bge.n	8006f8e <takeMachineID+0x25a>
                	machineIDLoc = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(350);
 8006f8e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006f92:	f001 fc35 	bl	8008800 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	2002      	movs	r0, #2
 8006f9e:	f000 feba 	bl	8007d16 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fa2:	e6dc      	b.n	8006d5e <takeMachineID+0x2a>
    }
}
 8006fa4:	bf00      	nop
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200001a0 	.word	0x200001a0
 8006fb0:	40010800 	.word	0x40010800
 8006fb4:	2000021d 	.word	0x2000021d
 8006fb8:	0800dcb4 	.word	0x0800dcb4
 8006fbc:	0800dcc8 	.word	0x0800dcc8
 8006fc0:	0800dcdc 	.word	0x0800dcdc
 8006fc4:	0800dcec 	.word	0x0800dcec
 8006fc8:	2000000c 	.word	0x2000000c
 8006fcc:	20000128 	.word	0x20000128
 8006fd0:	40011000 	.word	0x40011000

08006fd4 <takeWifiSSID>:

void takeWifiSSID() {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
	mainSSIDSection:
    lcd_cursor(1);
 8006fda:	2001      	movs	r0, #1
 8006fdc:	f000 ff18 	bl	8007e10 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006fe0:	2214      	movs	r2, #20
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4889      	ldr	r0, [pc, #548]	; (800720c <takeWifiSSID+0x238>)
 8006fe6:	f005 fb2e 	bl	800c646 <memset>

    int realCharPos = 1;
 8006fea:	2301      	movs	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8006fee:	4b88      	ldr	r3, [pc, #544]	; (8007210 <takeWifiSSID+0x23c>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
    page = 1;
 8006ff4:	4b87      	ldr	r3, [pc, #540]	; (8007214 <takeWifiSSID+0x240>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006ffe:	2307      	movs	r3, #7
 8007000:	607b      	str	r3, [r7, #4]

    int characterSavePos = ssidStartPos;
 8007002:	4b85      	ldr	r3, [pc, #532]	; (8007218 <takeWifiSSID+0x244>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	603b      	str	r3, [r7, #0]

    printTemplate(2, 1);
 8007008:	2101      	movs	r1, #1
 800700a:	2002      	movs	r0, #2
 800700c:	f7f9 ff4e 	bl	8000eac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007010:	2108      	movs	r1, #8
 8007012:	4882      	ldr	r0, [pc, #520]	; (800721c <takeWifiSSID+0x248>)
 8007014:	f002 f9c4 	bl	80093a0 <HAL_GPIO_ReadPin>
 8007018:	4603      	mov	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d129      	bne.n	8007072 <takeWifiSSID+0x9e>
            lcd_cursor(0);
 800701e:	2000      	movs	r0, #0
 8007020:	f000 fef6 	bl	8007e10 <lcd_cursor>

            if(strlen(wifiSSID) > wifiCharacterLimit) {
 8007024:	4879      	ldr	r0, [pc, #484]	; (800720c <takeWifiSSID+0x238>)
 8007026:	f7f9 f8fd 	bl	8000224 <strlen>
 800702a:	4603      	mov	r3, r0
 800702c:	2b14      	cmp	r3, #20
 800702e:	f240 8185 	bls.w	800733c <takeWifiSSID+0x368>
                lcd_clear();
 8007032:	f000 febb 	bl	8007dac <lcd_clear>
                if(dilSecim == 0) {
 8007036:	4b7a      	ldr	r3, [pc, #488]	; (8007220 <takeWifiSSID+0x24c>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <takeWifiSSID+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 800703e:	4a79      	ldr	r2, [pc, #484]	; (8007224 <takeWifiSSID+0x250>)
 8007040:	2101      	movs	r1, #1
 8007042:	2001      	movs	r0, #1
 8007044:	f000 fe86 	bl	8007d54 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007048:	4a77      	ldr	r2, [pc, #476]	; (8007228 <takeWifiSSID+0x254>)
 800704a:	2101      	movs	r1, #1
 800704c:	2002      	movs	r0, #2
 800704e:	f000 fe81 	bl	8007d54 <lcd_print>
 8007052:	e009      	b.n	8007068 <takeWifiSSID+0x94>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8007054:	4a75      	ldr	r2, [pc, #468]	; (800722c <takeWifiSSID+0x258>)
 8007056:	2101      	movs	r1, #1
 8007058:	2001      	movs	r0, #1
 800705a:	f000 fe7b 	bl	8007d54 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 800705e:	4a74      	ldr	r2, [pc, #464]	; (8007230 <takeWifiSSID+0x25c>)
 8007060:	2101      	movs	r1, #1
 8007062:	2002      	movs	r0, #2
 8007064:	f000 fe76 	bl	8007d54 <lcd_print>
                }
                HAL_Delay(1200);
 8007068:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800706c:	f001 fbc8 	bl	8008800 <HAL_Delay>
                goto mainSSIDSection;
 8007070:	e7b3      	b.n	8006fda <takeWifiSSID+0x6>
            }

            break;
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007072:	2101      	movs	r1, #1
 8007074:	4869      	ldr	r0, [pc, #420]	; (800721c <takeWifiSSID+0x248>)
 8007076:	f002 f993 	bl	80093a0 <HAL_GPIO_ReadPin>
 800707a:	4603      	mov	r3, r0
 800707c:	2b01      	cmp	r3, #1
 800707e:	d166      	bne.n	800714e <takeWifiSSID+0x17a>
        	realCharPos++;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3301      	adds	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b50      	cmp	r3, #80	; 0x50
 800708a:	dd01      	ble.n	8007090 <takeWifiSSID+0xbc>
        		realCharPos = 1;
 800708c:	2301      	movs	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8007090:	4b5f      	ldr	r3, [pc, #380]	; (8007210 <takeWifiSSID+0x23c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b10      	cmp	r3, #16
 8007096:	d152      	bne.n	800713e <takeWifiSSID+0x16a>
            	if(page == 1) {
 8007098:	4b5e      	ldr	r3, [pc, #376]	; (8007214 <takeWifiSSID+0x240>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d10c      	bne.n	80070ba <takeWifiSSID+0xe6>
            		cursorPosition = 1;
 80070a0:	4b5b      	ldr	r3, [pc, #364]	; (8007210 <takeWifiSSID+0x23c>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
            		page++;
 80070a6:	4b5b      	ldr	r3, [pc, #364]	; (8007214 <takeWifiSSID+0x240>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	4a59      	ldr	r2, [pc, #356]	; (8007214 <takeWifiSSID+0x240>)
 80070ae:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 80070b0:	2102      	movs	r1, #2
 80070b2:	2002      	movs	r0, #2
 80070b4:	f7f9 fefa 	bl	8000eac <printTemplate>
 80070b8:	e046      	b.n	8007148 <takeWifiSSID+0x174>
            	} else if(page == 2) {
 80070ba:	4b56      	ldr	r3, [pc, #344]	; (8007214 <takeWifiSSID+0x240>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d10c      	bne.n	80070dc <takeWifiSSID+0x108>
            		cursorPosition = 1;
 80070c2:	4b53      	ldr	r3, [pc, #332]	; (8007210 <takeWifiSSID+0x23c>)
 80070c4:	2201      	movs	r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
            		page++;
 80070c8:	4b52      	ldr	r3, [pc, #328]	; (8007214 <takeWifiSSID+0x240>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	4a51      	ldr	r2, [pc, #324]	; (8007214 <takeWifiSSID+0x240>)
 80070d0:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 80070d2:	2103      	movs	r1, #3
 80070d4:	2002      	movs	r0, #2
 80070d6:	f7f9 fee9 	bl	8000eac <printTemplate>
 80070da:	e035      	b.n	8007148 <takeWifiSSID+0x174>
            	} else if(page == 3) {
 80070dc:	4b4d      	ldr	r3, [pc, #308]	; (8007214 <takeWifiSSID+0x240>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d10c      	bne.n	80070fe <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 80070e4:	4b4a      	ldr	r3, [pc, #296]	; (8007210 <takeWifiSSID+0x23c>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
            		page++;
 80070ea:	4b4a      	ldr	r3, [pc, #296]	; (8007214 <takeWifiSSID+0x240>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	4a48      	ldr	r2, [pc, #288]	; (8007214 <takeWifiSSID+0x240>)
 80070f2:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80070f4:	2104      	movs	r1, #4
 80070f6:	2002      	movs	r0, #2
 80070f8:	f7f9 fed8 	bl	8000eac <printTemplate>
 80070fc:	e024      	b.n	8007148 <takeWifiSSID+0x174>
            	} else if(page == 4) {
 80070fe:	4b45      	ldr	r3, [pc, #276]	; (8007214 <takeWifiSSID+0x240>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b04      	cmp	r3, #4
 8007104:	d10c      	bne.n	8007120 <takeWifiSSID+0x14c>
            		cursorPosition = 1;
 8007106:	4b42      	ldr	r3, [pc, #264]	; (8007210 <takeWifiSSID+0x23c>)
 8007108:	2201      	movs	r2, #1
 800710a:	601a      	str	r2, [r3, #0]
            		page++;
 800710c:	4b41      	ldr	r3, [pc, #260]	; (8007214 <takeWifiSSID+0x240>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3301      	adds	r3, #1
 8007112:	4a40      	ldr	r2, [pc, #256]	; (8007214 <takeWifiSSID+0x240>)
 8007114:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8007116:	2105      	movs	r1, #5
 8007118:	2002      	movs	r0, #2
 800711a:	f7f9 fec7 	bl	8000eac <printTemplate>
 800711e:	e013      	b.n	8007148 <takeWifiSSID+0x174>
            	} else if(page == 5) {
 8007120:	4b3c      	ldr	r3, [pc, #240]	; (8007214 <takeWifiSSID+0x240>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b05      	cmp	r3, #5
 8007126:	d10f      	bne.n	8007148 <takeWifiSSID+0x174>
            		cursorPosition = 1;
 8007128:	4b39      	ldr	r3, [pc, #228]	; (8007210 <takeWifiSSID+0x23c>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
            		page = 1;
 800712e:	4b39      	ldr	r3, [pc, #228]	; (8007214 <takeWifiSSID+0x240>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8007134:	2101      	movs	r1, #1
 8007136:	2002      	movs	r0, #2
 8007138:	f7f9 feb8 	bl	8000eac <printTemplate>
 800713c:	e004      	b.n	8007148 <takeWifiSSID+0x174>
            	}
            } else {
            	cursorPosition++;
 800713e:	4b34      	ldr	r3, [pc, #208]	; (8007210 <takeWifiSSID+0x23c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	4a32      	ldr	r2, [pc, #200]	; (8007210 <takeWifiSSID+0x23c>)
 8007146:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007148:	20fa      	movs	r0, #250	; 0xfa
 800714a:	f001 fb59 	bl	8008800 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800714e:	2108      	movs	r1, #8
 8007150:	4838      	ldr	r0, [pc, #224]	; (8007234 <takeWifiSSID+0x260>)
 8007152:	f002 f925 	bl	80093a0 <HAL_GPIO_ReadPin>
 8007156:	4603      	mov	r3, r0
 8007158:	2b01      	cmp	r3, #1
 800715a:	d175      	bne.n	8007248 <takeWifiSSID+0x274>
        	realCharPos--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3b01      	subs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dc01      	bgt.n	800716c <takeWifiSSID+0x198>
        		realCharPos = 80;
 8007168:	2350      	movs	r3, #80	; 0x50
 800716a:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 800716c:	4b28      	ldr	r3, [pc, #160]	; (8007210 <takeWifiSSID+0x23c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d161      	bne.n	8007238 <takeWifiSSID+0x264>
            	if(page == 1) {
 8007174:	4b27      	ldr	r3, [pc, #156]	; (8007214 <takeWifiSSID+0x240>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d10a      	bne.n	8007192 <takeWifiSSID+0x1be>
            		cursorPosition = 16;
 800717c:	4b24      	ldr	r3, [pc, #144]	; (8007210 <takeWifiSSID+0x23c>)
 800717e:	2210      	movs	r2, #16
 8007180:	601a      	str	r2, [r3, #0]
            		page = 5;
 8007182:	4b24      	ldr	r3, [pc, #144]	; (8007214 <takeWifiSSID+0x240>)
 8007184:	2205      	movs	r2, #5
 8007186:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8007188:	2105      	movs	r1, #5
 800718a:	2002      	movs	r0, #2
 800718c:	f7f9 fe8e 	bl	8000eac <printTemplate>
 8007190:	e057      	b.n	8007242 <takeWifiSSID+0x26e>
            	} else if(page == 2) {
 8007192:	4b20      	ldr	r3, [pc, #128]	; (8007214 <takeWifiSSID+0x240>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d10a      	bne.n	80071b0 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 800719a:	4b1d      	ldr	r3, [pc, #116]	; (8007210 <takeWifiSSID+0x23c>)
 800719c:	2210      	movs	r2, #16
 800719e:	601a      	str	r2, [r3, #0]
            		page = 1;
 80071a0:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <takeWifiSSID+0x240>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80071a6:	2101      	movs	r1, #1
 80071a8:	2002      	movs	r0, #2
 80071aa:	f7f9 fe7f 	bl	8000eac <printTemplate>
 80071ae:	e048      	b.n	8007242 <takeWifiSSID+0x26e>
            	} else if(page == 3) {
 80071b0:	4b18      	ldr	r3, [pc, #96]	; (8007214 <takeWifiSSID+0x240>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d10a      	bne.n	80071ce <takeWifiSSID+0x1fa>
            		cursorPosition = 16;
 80071b8:	4b15      	ldr	r3, [pc, #84]	; (8007210 <takeWifiSSID+0x23c>)
 80071ba:	2210      	movs	r2, #16
 80071bc:	601a      	str	r2, [r3, #0]
            		page = 2;
 80071be:	4b15      	ldr	r3, [pc, #84]	; (8007214 <takeWifiSSID+0x240>)
 80071c0:	2202      	movs	r2, #2
 80071c2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 80071c4:	2102      	movs	r1, #2
 80071c6:	2002      	movs	r0, #2
 80071c8:	f7f9 fe70 	bl	8000eac <printTemplate>
 80071cc:	e039      	b.n	8007242 <takeWifiSSID+0x26e>
            	} else if(page == 4) {
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <takeWifiSSID+0x240>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d10a      	bne.n	80071ec <takeWifiSSID+0x218>
            		cursorPosition = 16;
 80071d6:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <takeWifiSSID+0x23c>)
 80071d8:	2210      	movs	r2, #16
 80071da:	601a      	str	r2, [r3, #0]
            		page = 3;
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <takeWifiSSID+0x240>)
 80071de:	2203      	movs	r2, #3
 80071e0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80071e2:	2103      	movs	r1, #3
 80071e4:	2002      	movs	r0, #2
 80071e6:	f7f9 fe61 	bl	8000eac <printTemplate>
 80071ea:	e02a      	b.n	8007242 <takeWifiSSID+0x26e>
            	} else if(page == 5) {
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <takeWifiSSID+0x240>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b05      	cmp	r3, #5
 80071f2:	d126      	bne.n	8007242 <takeWifiSSID+0x26e>
            		cursorPosition = 16;
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <takeWifiSSID+0x23c>)
 80071f6:	2210      	movs	r2, #16
 80071f8:	601a      	str	r2, [r3, #0]
            		page = 4;
 80071fa:	4b06      	ldr	r3, [pc, #24]	; (8007214 <takeWifiSSID+0x240>)
 80071fc:	2204      	movs	r2, #4
 80071fe:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8007200:	2104      	movs	r1, #4
 8007202:	2002      	movs	r0, #2
 8007204:	f7f9 fe52 	bl	8000eac <printTemplate>
 8007208:	e01b      	b.n	8007242 <takeWifiSSID+0x26e>
 800720a:	bf00      	nop
 800720c:	200001ac 	.word	0x200001ac
 8007210:	20000000 	.word	0x20000000
 8007214:	20000004 	.word	0x20000004
 8007218:	20000010 	.word	0x20000010
 800721c:	40010800 	.word	0x40010800
 8007220:	2000021d 	.word	0x2000021d
 8007224:	0800dd00 	.word	0x0800dd00
 8007228:	0800dd14 	.word	0x0800dd14
 800722c:	0800dd28 	.word	0x0800dd28
 8007230:	0800dd3c 	.word	0x0800dd3c
 8007234:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007238:	4b43      	ldr	r3, [pc, #268]	; (8007348 <takeWifiSSID+0x374>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3b01      	subs	r3, #1
 800723e:	4a42      	ldr	r2, [pc, #264]	; (8007348 <takeWifiSSID+0x374>)
 8007240:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007242:	20fa      	movs	r0, #250	; 0xfa
 8007244:	f001 fadc 	bl	8008800 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007248:	2102      	movs	r1, #2
 800724a:	4840      	ldr	r0, [pc, #256]	; (800734c <takeWifiSSID+0x378>)
 800724c:	f002 f8a8 	bl	80093a0 <HAL_GPIO_ReadPin>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d12a      	bne.n	80072ac <takeWifiSSID+0x2d8>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b01      	subs	r3, #1
 800725a:	4618      	mov	r0, r3
 800725c:	f7f9 fa6e 	bl	800073c <getCharFromCursorPosition>
 8007260:	4603      	mov	r3, r0
 8007262:	4619      	mov	r1, r3
 8007264:	4a3a      	ldr	r2, [pc, #232]	; (8007350 <takeWifiSSID+0x37c>)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	460a      	mov	r2, r1
 800726c:	701a      	strb	r2, [r3, #0]

            eepromData[characterSavePos] = realCharPos - 1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	4a37      	ldr	r2, [pc, #220]	; (8007354 <takeWifiSSID+0x380>)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	4413      	add	r3, r2
 800727c:	460a      	mov	r2, r1
 800727e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	b2d9      	uxtb	r1, r3
 8007284:	4a32      	ldr	r2, [pc, #200]	; (8007350 <takeWifiSSID+0x37c>)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4413      	add	r3, r2
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	2001      	movs	r0, #1
 8007290:	f000 fd75 	bl	8007d7e <lcd_print_char>

            writeLoc++;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3301      	adds	r3, #1
 8007298:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	3301      	adds	r3, #1
 800729e:	60bb      	str	r3, [r7, #8]
            characterSavePos++;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	3301      	adds	r3, #1
 80072a4:	603b      	str	r3, [r7, #0]

            HAL_Delay(250);
 80072a6:	20fa      	movs	r0, #250	; 0xfa
 80072a8:	f001 faaa 	bl	8008800 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072ac:	2104      	movs	r1, #4
 80072ae:	4827      	ldr	r0, [pc, #156]	; (800734c <takeWifiSSID+0x378>)
 80072b0:	f002 f876 	bl	80093a0 <HAL_GPIO_ReadPin>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d136      	bne.n	8007328 <takeWifiSSID+0x354>
        	if(strlen(wifiSSID) >= 1) {
 80072ba:	4b25      	ldr	r3, [pc, #148]	; (8007350 <takeWifiSSID+0x37c>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d02f      	beq.n	8007322 <takeWifiSSID+0x34e>
        		wifiSSID[wifiNameLoc] = '\0';
 80072c2:	4a23      	ldr	r2, [pc, #140]	; (8007350 <takeWifiSSID+0x37c>)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4413      	add	r3, r2
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
        		eepromData[characterSavePos] = '\0';
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <takeWifiSSID+0x380>)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	4413      	add	r3, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	3306      	adds	r3, #6
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	4619      	mov	r1, r3
 80072e0:	2001      	movs	r0, #1
 80072e2:	f000 fd6d 	bl	8007dc0 <lcd_delete_char>
        		HAL_Delay(50);
 80072e6:	2032      	movs	r0, #50	; 0x32
 80072e8:	f001 fa8a 	bl	8008800 <HAL_Delay>
        		if(writeLoc > 7) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b07      	cmp	r3, #7
 80072f0:	dd03      	ble.n	80072fa <takeWifiSSID+0x326>
        			writeLoc--;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	e004      	b.n	8007304 <takeWifiSSID+0x330>
        		} else if(writeLoc < 7) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b06      	cmp	r3, #6
 80072fe:	dc01      	bgt.n	8007304 <takeWifiSSID+0x330>
        			writeLoc = 7;
 8007300:	2307      	movs	r3, #7
 8007302:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	dd06      	ble.n	8007318 <takeWifiSSID+0x344>
        			wifiNameLoc--;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	3b01      	subs	r3, #1
 800730e:	60bb      	str	r3, [r7, #8]
        			characterSavePos--;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	3b01      	subs	r3, #1
 8007314:	603b      	str	r3, [r7, #0]
 8007316:	e004      	b.n	8007322 <takeWifiSSID+0x34e>
        		} else if(wifiNameLoc < 0) {
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	da01      	bge.n	8007322 <takeWifiSSID+0x34e>
        			wifiNameLoc = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(250);
 8007322:	20fa      	movs	r0, #250	; 0xfa
 8007324:	f001 fa6c 	bl	8008800 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <takeWifiSSID+0x374>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	4619      	mov	r1, r3
 8007330:	2002      	movs	r0, #2
 8007332:	f000 fcf0 	bl	8007d16 <lcd_gotoxy>
        bekle();
 8007336:	f7fd fbf1 	bl	8004b1c <bekle>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800733a:	e669      	b.n	8007010 <takeWifiSSID+0x3c>
            break;
 800733c:	bf00      	nop
    }
}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000000 	.word	0x20000000
 800734c:	40010800 	.word	0x40010800
 8007350:	200001ac 	.word	0x200001ac
 8007354:	20000128 	.word	0x20000128

08007358 <takeWifiPass>:

void takeWifiPass() {
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
	mainPASSSection:
    lcd_cursor(1);
 800735e:	2001      	movs	r0, #1
 8007360:	f000 fd56 	bl	8007e10 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007364:	2214      	movs	r2, #20
 8007366:	2100      	movs	r1, #0
 8007368:	4889      	ldr	r0, [pc, #548]	; (8007590 <takeWifiPass+0x238>)
 800736a:	f005 f96c 	bl	800c646 <memset>

    int realCharPos = 1;
 800736e:	2301      	movs	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8007372:	4b88      	ldr	r3, [pc, #544]	; (8007594 <takeWifiPass+0x23c>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]
    page = 1;
 8007378:	4b87      	ldr	r3, [pc, #540]	; (8007598 <takeWifiPass+0x240>)
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007382:	2307      	movs	r3, #7
 8007384:	607b      	str	r3, [r7, #4]

    int characterSavePos = passStartPos;
 8007386:	4b85      	ldr	r3, [pc, #532]	; (800759c <takeWifiPass+0x244>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	603b      	str	r3, [r7, #0]

    printTemplate(3, 1);
 800738c:	2101      	movs	r1, #1
 800738e:	2003      	movs	r0, #3
 8007390:	f7f9 fd8c 	bl	8000eac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007394:	2108      	movs	r1, #8
 8007396:	4882      	ldr	r0, [pc, #520]	; (80075a0 <takeWifiPass+0x248>)
 8007398:	f002 f802 	bl	80093a0 <HAL_GPIO_ReadPin>
 800739c:	4603      	mov	r3, r0
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d129      	bne.n	80073f6 <takeWifiPass+0x9e>
            lcd_cursor(0);
 80073a2:	2000      	movs	r0, #0
 80073a4:	f000 fd34 	bl	8007e10 <lcd_cursor>

            if(strlen(wifiPass) > wifiCharacterLimit) {
 80073a8:	4879      	ldr	r0, [pc, #484]	; (8007590 <takeWifiPass+0x238>)
 80073aa:	f7f8 ff3b 	bl	8000224 <strlen>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b14      	cmp	r3, #20
 80073b2:	f240 8185 	bls.w	80076c0 <takeWifiPass+0x368>
                lcd_clear();
 80073b6:	f000 fcf9 	bl	8007dac <lcd_clear>
                if(dilSecim == 0) {
 80073ba:	4b7a      	ldr	r3, [pc, #488]	; (80075a4 <takeWifiPass+0x24c>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <takeWifiPass+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073c2:	4a79      	ldr	r2, [pc, #484]	; (80075a8 <takeWifiPass+0x250>)
 80073c4:	2101      	movs	r1, #1
 80073c6:	2001      	movs	r0, #1
 80073c8:	f000 fcc4 	bl	8007d54 <lcd_print>
                	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80073cc:	4a77      	ldr	r2, [pc, #476]	; (80075ac <takeWifiPass+0x254>)
 80073ce:	2101      	movs	r1, #1
 80073d0:	2002      	movs	r0, #2
 80073d2:	f000 fcbf 	bl	8007d54 <lcd_print>
 80073d6:	e009      	b.n	80073ec <takeWifiPass+0x94>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 80073d8:	4a75      	ldr	r2, [pc, #468]	; (80075b0 <takeWifiPass+0x258>)
 80073da:	2101      	movs	r1, #1
 80073dc:	2001      	movs	r0, #1
 80073de:	f000 fcb9 	bl	8007d54 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 80073e2:	4a74      	ldr	r2, [pc, #464]	; (80075b4 <takeWifiPass+0x25c>)
 80073e4:	2101      	movs	r1, #1
 80073e6:	2002      	movs	r0, #2
 80073e8:	f000 fcb4 	bl	8007d54 <lcd_print>
                }
                HAL_Delay(1200);
 80073ec:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80073f0:	f001 fa06 	bl	8008800 <HAL_Delay>
                goto mainPASSSection;
 80073f4:	e7b3      	b.n	800735e <takeWifiPass+0x6>
            }

            break;
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80073f6:	2101      	movs	r1, #1
 80073f8:	4869      	ldr	r0, [pc, #420]	; (80075a0 <takeWifiPass+0x248>)
 80073fa:	f001 ffd1 	bl	80093a0 <HAL_GPIO_ReadPin>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b01      	cmp	r3, #1
 8007402:	d166      	bne.n	80074d2 <takeWifiPass+0x17a>
        	realCharPos++;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b50      	cmp	r3, #80	; 0x50
 800740e:	dd01      	ble.n	8007414 <takeWifiPass+0xbc>
        	    realCharPos = 1;
 8007410:	2301      	movs	r3, #1
 8007412:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8007414:	4b5f      	ldr	r3, [pc, #380]	; (8007594 <takeWifiPass+0x23c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b10      	cmp	r3, #16
 800741a:	d152      	bne.n	80074c2 <takeWifiPass+0x16a>
            	if(page == 1) {
 800741c:	4b5e      	ldr	r3, [pc, #376]	; (8007598 <takeWifiPass+0x240>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d10c      	bne.n	800743e <takeWifiPass+0xe6>
            		cursorPosition = 1;
 8007424:	4b5b      	ldr	r3, [pc, #364]	; (8007594 <takeWifiPass+0x23c>)
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]
            		page++;
 800742a:	4b5b      	ldr	r3, [pc, #364]	; (8007598 <takeWifiPass+0x240>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3301      	adds	r3, #1
 8007430:	4a59      	ldr	r2, [pc, #356]	; (8007598 <takeWifiPass+0x240>)
 8007432:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8007434:	2102      	movs	r1, #2
 8007436:	2003      	movs	r0, #3
 8007438:	f7f9 fd38 	bl	8000eac <printTemplate>
 800743c:	e046      	b.n	80074cc <takeWifiPass+0x174>
            	} else if(page == 2) {
 800743e:	4b56      	ldr	r3, [pc, #344]	; (8007598 <takeWifiPass+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d10c      	bne.n	8007460 <takeWifiPass+0x108>
            		cursorPosition = 1;
 8007446:	4b53      	ldr	r3, [pc, #332]	; (8007594 <takeWifiPass+0x23c>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
            		page++;
 800744c:	4b52      	ldr	r3, [pc, #328]	; (8007598 <takeWifiPass+0x240>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3301      	adds	r3, #1
 8007452:	4a51      	ldr	r2, [pc, #324]	; (8007598 <takeWifiPass+0x240>)
 8007454:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8007456:	2103      	movs	r1, #3
 8007458:	2003      	movs	r0, #3
 800745a:	f7f9 fd27 	bl	8000eac <printTemplate>
 800745e:	e035      	b.n	80074cc <takeWifiPass+0x174>
            	} else if(page == 3) {
 8007460:	4b4d      	ldr	r3, [pc, #308]	; (8007598 <takeWifiPass+0x240>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b03      	cmp	r3, #3
 8007466:	d10c      	bne.n	8007482 <takeWifiPass+0x12a>
            		cursorPosition = 1;
 8007468:	4b4a      	ldr	r3, [pc, #296]	; (8007594 <takeWifiPass+0x23c>)
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
            		page++;
 800746e:	4b4a      	ldr	r3, [pc, #296]	; (8007598 <takeWifiPass+0x240>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3301      	adds	r3, #1
 8007474:	4a48      	ldr	r2, [pc, #288]	; (8007598 <takeWifiPass+0x240>)
 8007476:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8007478:	2104      	movs	r1, #4
 800747a:	2003      	movs	r0, #3
 800747c:	f7f9 fd16 	bl	8000eac <printTemplate>
 8007480:	e024      	b.n	80074cc <takeWifiPass+0x174>
            	} else if(page == 4) {
 8007482:	4b45      	ldr	r3, [pc, #276]	; (8007598 <takeWifiPass+0x240>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b04      	cmp	r3, #4
 8007488:	d10c      	bne.n	80074a4 <takeWifiPass+0x14c>
            		cursorPosition = 1;
 800748a:	4b42      	ldr	r3, [pc, #264]	; (8007594 <takeWifiPass+0x23c>)
 800748c:	2201      	movs	r2, #1
 800748e:	601a      	str	r2, [r3, #0]
            		page++;
 8007490:	4b41      	ldr	r3, [pc, #260]	; (8007598 <takeWifiPass+0x240>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3301      	adds	r3, #1
 8007496:	4a40      	ldr	r2, [pc, #256]	; (8007598 <takeWifiPass+0x240>)
 8007498:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 800749a:	2105      	movs	r1, #5
 800749c:	2003      	movs	r0, #3
 800749e:	f7f9 fd05 	bl	8000eac <printTemplate>
 80074a2:	e013      	b.n	80074cc <takeWifiPass+0x174>
            	} else if(page == 5) {
 80074a4:	4b3c      	ldr	r3, [pc, #240]	; (8007598 <takeWifiPass+0x240>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d10f      	bne.n	80074cc <takeWifiPass+0x174>
            		cursorPosition = 1;
 80074ac:	4b39      	ldr	r3, [pc, #228]	; (8007594 <takeWifiPass+0x23c>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
            		page = 1;
 80074b2:	4b39      	ldr	r3, [pc, #228]	; (8007598 <takeWifiPass+0x240>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80074b8:	2101      	movs	r1, #1
 80074ba:	2003      	movs	r0, #3
 80074bc:	f7f9 fcf6 	bl	8000eac <printTemplate>
 80074c0:	e004      	b.n	80074cc <takeWifiPass+0x174>
            	}
            } else {
            	cursorPosition++;
 80074c2:	4b34      	ldr	r3, [pc, #208]	; (8007594 <takeWifiPass+0x23c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3301      	adds	r3, #1
 80074c8:	4a32      	ldr	r2, [pc, #200]	; (8007594 <takeWifiPass+0x23c>)
 80074ca:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80074cc:	20fa      	movs	r0, #250	; 0xfa
 80074ce:	f001 f997 	bl	8008800 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80074d2:	2108      	movs	r1, #8
 80074d4:	4838      	ldr	r0, [pc, #224]	; (80075b8 <takeWifiPass+0x260>)
 80074d6:	f001 ff63 	bl	80093a0 <HAL_GPIO_ReadPin>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d175      	bne.n	80075cc <takeWifiPass+0x274>
        	realCharPos--;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dc01      	bgt.n	80074f0 <takeWifiPass+0x198>
        	    realCharPos = 80;
 80074ec:	2350      	movs	r3, #80	; 0x50
 80074ee:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 80074f0:	4b28      	ldr	r3, [pc, #160]	; (8007594 <takeWifiPass+0x23c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d161      	bne.n	80075bc <takeWifiPass+0x264>
            	if(page == 1) {
 80074f8:	4b27      	ldr	r3, [pc, #156]	; (8007598 <takeWifiPass+0x240>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d10a      	bne.n	8007516 <takeWifiPass+0x1be>
            		cursorPosition = 16;
 8007500:	4b24      	ldr	r3, [pc, #144]	; (8007594 <takeWifiPass+0x23c>)
 8007502:	2210      	movs	r2, #16
 8007504:	601a      	str	r2, [r3, #0]
            		page = 5;
 8007506:	4b24      	ldr	r3, [pc, #144]	; (8007598 <takeWifiPass+0x240>)
 8007508:	2205      	movs	r2, #5
 800750a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800750c:	2105      	movs	r1, #5
 800750e:	2003      	movs	r0, #3
 8007510:	f7f9 fccc 	bl	8000eac <printTemplate>
 8007514:	e057      	b.n	80075c6 <takeWifiPass+0x26e>
            	} else if(page == 2) {
 8007516:	4b20      	ldr	r3, [pc, #128]	; (8007598 <takeWifiPass+0x240>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d10a      	bne.n	8007534 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 800751e:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <takeWifiPass+0x23c>)
 8007520:	2210      	movs	r2, #16
 8007522:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007524:	4b1c      	ldr	r3, [pc, #112]	; (8007598 <takeWifiPass+0x240>)
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800752a:	2101      	movs	r1, #1
 800752c:	2003      	movs	r0, #3
 800752e:	f7f9 fcbd 	bl	8000eac <printTemplate>
 8007532:	e048      	b.n	80075c6 <takeWifiPass+0x26e>
            	} else if(page == 3) {
 8007534:	4b18      	ldr	r3, [pc, #96]	; (8007598 <takeWifiPass+0x240>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d10a      	bne.n	8007552 <takeWifiPass+0x1fa>
            		cursorPosition = 16;
 800753c:	4b15      	ldr	r3, [pc, #84]	; (8007594 <takeWifiPass+0x23c>)
 800753e:	2210      	movs	r2, #16
 8007540:	601a      	str	r2, [r3, #0]
            		page = 2;
 8007542:	4b15      	ldr	r3, [pc, #84]	; (8007598 <takeWifiPass+0x240>)
 8007544:	2202      	movs	r2, #2
 8007546:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8007548:	2102      	movs	r1, #2
 800754a:	2003      	movs	r0, #3
 800754c:	f7f9 fcae 	bl	8000eac <printTemplate>
 8007550:	e039      	b.n	80075c6 <takeWifiPass+0x26e>
            	} else if(page == 4) {
 8007552:	4b11      	ldr	r3, [pc, #68]	; (8007598 <takeWifiPass+0x240>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b04      	cmp	r3, #4
 8007558:	d10a      	bne.n	8007570 <takeWifiPass+0x218>
            		cursorPosition = 16;
 800755a:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <takeWifiPass+0x23c>)
 800755c:	2210      	movs	r2, #16
 800755e:	601a      	str	r2, [r3, #0]
            		page = 3;
 8007560:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <takeWifiPass+0x240>)
 8007562:	2203      	movs	r2, #3
 8007564:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8007566:	2103      	movs	r1, #3
 8007568:	2003      	movs	r0, #3
 800756a:	f7f9 fc9f 	bl	8000eac <printTemplate>
 800756e:	e02a      	b.n	80075c6 <takeWifiPass+0x26e>
            	} else if(page == 5) {
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <takeWifiPass+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b05      	cmp	r3, #5
 8007576:	d126      	bne.n	80075c6 <takeWifiPass+0x26e>
            		cursorPosition = 16;
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <takeWifiPass+0x23c>)
 800757a:	2210      	movs	r2, #16
 800757c:	601a      	str	r2, [r3, #0]
            		page = 4;
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <takeWifiPass+0x240>)
 8007580:	2204      	movs	r2, #4
 8007582:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8007584:	2104      	movs	r1, #4
 8007586:	2003      	movs	r0, #3
 8007588:	f7f9 fc90 	bl	8000eac <printTemplate>
 800758c:	e01b      	b.n	80075c6 <takeWifiPass+0x26e>
 800758e:	bf00      	nop
 8007590:	200001c0 	.word	0x200001c0
 8007594:	20000000 	.word	0x20000000
 8007598:	20000004 	.word	0x20000004
 800759c:	20000014 	.word	0x20000014
 80075a0:	40010800 	.word	0x40010800
 80075a4:	2000021d 	.word	0x2000021d
 80075a8:	0800dd00 	.word	0x0800dd00
 80075ac:	0800dd50 	.word	0x0800dd50
 80075b0:	0800dd64 	.word	0x0800dd64
 80075b4:	0800dd3c 	.word	0x0800dd3c
 80075b8:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80075bc:	4b43      	ldr	r3, [pc, #268]	; (80076cc <takeWifiPass+0x374>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	4a42      	ldr	r2, [pc, #264]	; (80076cc <takeWifiPass+0x374>)
 80075c4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80075c6:	20fa      	movs	r0, #250	; 0xfa
 80075c8:	f001 f91a 	bl	8008800 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80075cc:	2102      	movs	r1, #2
 80075ce:	4840      	ldr	r0, [pc, #256]	; (80076d0 <takeWifiPass+0x378>)
 80075d0:	f001 fee6 	bl	80093a0 <HAL_GPIO_ReadPin>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d12a      	bne.n	8007630 <takeWifiPass+0x2d8>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3b01      	subs	r3, #1
 80075de:	4618      	mov	r0, r3
 80075e0:	f7f9 f8ac 	bl	800073c <getCharFromCursorPosition>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4619      	mov	r1, r3
 80075e8:	4a3a      	ldr	r2, [pc, #232]	; (80076d4 <takeWifiPass+0x37c>)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	460a      	mov	r2, r1
 80075f0:	701a      	strb	r2, [r3, #0]
        	eepromData[characterSavePos] = realCharPos - 1;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b2d9      	uxtb	r1, r3
 80075fa:	4a37      	ldr	r2, [pc, #220]	; (80076d8 <takeWifiPass+0x380>)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	4413      	add	r3, r2
 8007600:	460a      	mov	r2, r1
 8007602:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	b2d9      	uxtb	r1, r3
 8007608:	4a32      	ldr	r2, [pc, #200]	; (80076d4 <takeWifiPass+0x37c>)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	2001      	movs	r0, #1
 8007614:	f000 fbb3 	bl	8007d7e <lcd_print_char>

            writeLoc++;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3301      	adds	r3, #1
 800761c:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	3301      	adds	r3, #1
 8007622:	60bb      	str	r3, [r7, #8]
            characterSavePos++;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	603b      	str	r3, [r7, #0]

            HAL_Delay(250);
 800762a:	20fa      	movs	r0, #250	; 0xfa
 800762c:	f001 f8e8 	bl	8008800 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007630:	2104      	movs	r1, #4
 8007632:	4827      	ldr	r0, [pc, #156]	; (80076d0 <takeWifiPass+0x378>)
 8007634:	f001 feb4 	bl	80093a0 <HAL_GPIO_ReadPin>
 8007638:	4603      	mov	r3, r0
 800763a:	2b01      	cmp	r3, #1
 800763c:	d136      	bne.n	80076ac <takeWifiPass+0x354>
            if(strlen(wifiPass) >= 1) {
 800763e:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <takeWifiPass+0x37c>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d02f      	beq.n	80076a6 <takeWifiPass+0x34e>
            	wifiPass[wifiPassLoc] = '\0';
 8007646:	4a23      	ldr	r2, [pc, #140]	; (80076d4 <takeWifiPass+0x37c>)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4413      	add	r3, r2
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
            	eepromData[characterSavePos] = '\0';
 8007650:	4a21      	ldr	r2, [pc, #132]	; (80076d8 <takeWifiPass+0x380>)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	4413      	add	r3, r2
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	3306      	adds	r3, #6
 8007660:	b2db      	uxtb	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	2001      	movs	r0, #1
 8007666:	f000 fbab 	bl	8007dc0 <lcd_delete_char>
            	HAL_Delay(50);
 800766a:	2032      	movs	r0, #50	; 0x32
 800766c:	f001 f8c8 	bl	8008800 <HAL_Delay>

            	if(writeLoc > 7) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b07      	cmp	r3, #7
 8007674:	dd03      	ble.n	800767e <takeWifiPass+0x326>
            		writeLoc--;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	607b      	str	r3, [r7, #4]
 800767c:	e004      	b.n	8007688 <takeWifiPass+0x330>
            	} else if(writeLoc < 7) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b06      	cmp	r3, #6
 8007682:	dc01      	bgt.n	8007688 <takeWifiPass+0x330>
            		writeLoc = 7;
 8007684:	2307      	movs	r3, #7
 8007686:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd06      	ble.n	800769c <takeWifiPass+0x344>
            		wifiPassLoc--;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3b01      	subs	r3, #1
 8007692:	60bb      	str	r3, [r7, #8]
            		characterSavePos--;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	3b01      	subs	r3, #1
 8007698:	603b      	str	r3, [r7, #0]
 800769a:	e004      	b.n	80076a6 <takeWifiPass+0x34e>
            	} else if(wifiPassLoc < 0) {
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	da01      	bge.n	80076a6 <takeWifiPass+0x34e>
            		wifiPassLoc = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(250);
 80076a6:	20fa      	movs	r0, #250	; 0xfa
 80076a8:	f001 f8aa 	bl	8008800 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80076ac:	4b07      	ldr	r3, [pc, #28]	; (80076cc <takeWifiPass+0x374>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	2002      	movs	r0, #2
 80076b6:	f000 fb2e 	bl	8007d16 <lcd_gotoxy>
        bekle();
 80076ba:	f7fd fa2f 	bl	8004b1c <bekle>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80076be:	e669      	b.n	8007394 <takeWifiPass+0x3c>
            break;
 80076c0:	bf00      	nop
    }
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000000 	.word	0x20000000
 80076d0:	40010800 	.word	0x40010800
 80076d4:	200001c0 	.word	0x200001c0
 80076d8:	20000128 	.word	0x20000128

080076dc <mergeData>:

char* mergeData() {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b09c      	sub	sp, #112	; 0x70
 80076e0:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80076e2:	2300      	movs	r3, #0
 80076e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076ea:	2228      	movs	r2, #40	; 0x28
 80076ec:	2100      	movs	r1, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f004 ffa9 	bl	800c646 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80076f4:	4b67      	ldr	r3, [pc, #412]	; (8007894 <mergeData+0x1b8>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	713b      	strb	r3, [r7, #4]
 80076fa:	4b67      	ldr	r3, [pc, #412]	; (8007898 <mergeData+0x1bc>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	717b      	strb	r3, [r7, #5]
 8007700:	4b66      	ldr	r3, [pc, #408]	; (800789c <mergeData+0x1c0>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	71bb      	strb	r3, [r7, #6]
 8007706:	4b66      	ldr	r3, [pc, #408]	; (80078a0 <mergeData+0x1c4>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
 800770c:	4b65      	ldr	r3, [pc, #404]	; (80078a4 <mergeData+0x1c8>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	723b      	strb	r3, [r7, #8]
 8007712:	4b65      	ldr	r3, [pc, #404]	; (80078a8 <mergeData+0x1cc>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	727b      	strb	r3, [r7, #9]
 8007718:	4b64      	ldr	r3, [pc, #400]	; (80078ac <mergeData+0x1d0>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	72bb      	strb	r3, [r7, #10]
 800771e:	4b64      	ldr	r3, [pc, #400]	; (80078b0 <mergeData+0x1d4>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	72fb      	strb	r3, [r7, #11]
 8007724:	4b63      	ldr	r3, [pc, #396]	; (80078b4 <mergeData+0x1d8>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	733b      	strb	r3, [r7, #12]
 800772a:	4b63      	ldr	r3, [pc, #396]	; (80078b8 <mergeData+0x1dc>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	737b      	strb	r3, [r7, #13]
 8007730:	4b62      	ldr	r3, [pc, #392]	; (80078bc <mergeData+0x1e0>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	73bb      	strb	r3, [r7, #14]
 8007736:	4b62      	ldr	r3, [pc, #392]	; (80078c0 <mergeData+0x1e4>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	73fb      	strb	r3, [r7, #15]
 800773c:	4b61      	ldr	r3, [pc, #388]	; (80078c4 <mergeData+0x1e8>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	743b      	strb	r3, [r7, #16]
 8007742:	4b61      	ldr	r3, [pc, #388]	; (80078c8 <mergeData+0x1ec>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	747b      	strb	r3, [r7, #17]
 8007748:	4b60      	ldr	r3, [pc, #384]	; (80078cc <mergeData+0x1f0>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	74bb      	strb	r3, [r7, #18]
 800774e:	4b60      	ldr	r3, [pc, #384]	; (80078d0 <mergeData+0x1f4>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	74fb      	strb	r3, [r7, #19]
 8007754:	4b5f      	ldr	r3, [pc, #380]	; (80078d4 <mergeData+0x1f8>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	753b      	strb	r3, [r7, #20]
 800775a:	4b5f      	ldr	r3, [pc, #380]	; (80078d8 <mergeData+0x1fc>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	757b      	strb	r3, [r7, #21]
 8007760:	4b5e      	ldr	r3, [pc, #376]	; (80078dc <mergeData+0x200>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	75bb      	strb	r3, [r7, #22]
 8007766:	4b5e      	ldr	r3, [pc, #376]	; (80078e0 <mergeData+0x204>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	75fb      	strb	r3, [r7, #23]
 800776c:	4b5d      	ldr	r3, [pc, #372]	; (80078e4 <mergeData+0x208>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	763b      	strb	r3, [r7, #24]
 8007772:	4b5d      	ldr	r3, [pc, #372]	; (80078e8 <mergeData+0x20c>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	767b      	strb	r3, [r7, #25]
 8007778:	4b5c      	ldr	r3, [pc, #368]	; (80078ec <mergeData+0x210>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	76bb      	strb	r3, [r7, #26]
 800777e:	4b5c      	ldr	r3, [pc, #368]	; (80078f0 <mergeData+0x214>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	76fb      	strb	r3, [r7, #27]
 8007784:	4b5b      	ldr	r3, [pc, #364]	; (80078f4 <mergeData+0x218>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	773b      	strb	r3, [r7, #28]
 800778a:	4b5b      	ldr	r3, [pc, #364]	; (80078f8 <mergeData+0x21c>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	777b      	strb	r3, [r7, #29]
 8007790:	4b5a      	ldr	r3, [pc, #360]	; (80078fc <mergeData+0x220>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	77bb      	strb	r3, [r7, #30]
 8007796:	4b5a      	ldr	r3, [pc, #360]	; (8007900 <mergeData+0x224>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	4b59      	ldr	r3, [pc, #356]	; (8007904 <mergeData+0x228>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f887 3020 	strb.w	r3, [r7, #32]
 80077a4:	4b58      	ldr	r3, [pc, #352]	; (8007908 <mergeData+0x22c>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80077ac:	4b57      	ldr	r3, [pc, #348]	; (800790c <mergeData+0x230>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077b4:	4b56      	ldr	r3, [pc, #344]	; (8007910 <mergeData+0x234>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077bc:	4b55      	ldr	r3, [pc, #340]	; (8007914 <mergeData+0x238>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80077c4:	4b54      	ldr	r3, [pc, #336]	; (8007918 <mergeData+0x23c>)
 80077c6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80077ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80077ce:	4b52      	ldr	r3, [pc, #328]	; (8007918 <mergeData+0x23c>)
 80077d0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80077d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80077d8:	4b4f      	ldr	r3, [pc, #316]	; (8007918 <mergeData+0x23c>)
 80077da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80077de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80077e2:	4b4d      	ldr	r3, [pc, #308]	; (8007918 <mergeData+0x23c>)
 80077e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80077e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80077ec:	4b4a      	ldr	r3, [pc, #296]	; (8007918 <mergeData+0x23c>)
 80077ee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80077f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80077f6:	4b48      	ldr	r3, [pc, #288]	; (8007918 <mergeData+0x23c>)
 80077f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80077fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007800:	4b45      	ldr	r3, [pc, #276]	; (8007918 <mergeData+0x23c>)
 8007802:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800780a:	4b43      	ldr	r3, [pc, #268]	; (8007918 <mergeData+0x23c>)
 800780c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007810:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007814:	4b40      	ldr	r3, [pc, #256]	; (8007918 <mergeData+0x23c>)
 8007816:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800781a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800781e:	4b3e      	ldr	r3, [pc, #248]	; (8007918 <mergeData+0x23c>)
 8007820:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007824:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007828:	2306      	movs	r3, #6
 800782a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800782e:	2300      	movs	r3, #0
 8007830:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007832:	e015      	b.n	8007860 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007834:	1d3a      	adds	r2, r7, #4
 8007836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007838:	4413      	add	r3, r2
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007842:	4936      	ldr	r1, [pc, #216]	; (800791c <mergeData+0x240>)
 8007844:	4618      	mov	r0, r3
 8007846:	f004 fe8d 	bl	800c564 <siprintf>
	    strcat(combinedString, temp);
 800784a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800784e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f004 fee7 	bl	800c628 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800785a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785c:	3301      	adds	r3, #1
 800785e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007862:	2b2b      	cmp	r3, #43	; 0x2b
 8007864:	d9e6      	bls.n	8007834 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007866:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800786a:	4618      	mov	r0, r3
 800786c:	f7f8 fcda 	bl	8000224 <strlen>
 8007870:	4603      	mov	r3, r0
 8007872:	3301      	adds	r3, #1
 8007874:	4618      	mov	r0, r3
 8007876:	f004 fdc1 	bl	800c3fc <malloc>
 800787a:	4603      	mov	r3, r0
 800787c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800787e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007882:	4619      	mov	r1, r3
 8007884:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007886:	f004 ff23 	bl	800c6d0 <strcpy>
	return result;
 800788a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800788c:	4618      	mov	r0, r3
 800788e:	3770      	adds	r7, #112	; 0x70
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	2000020b 	.word	0x2000020b
 8007898:	200001fd 	.word	0x200001fd
 800789c:	20000200 	.word	0x20000200
 80078a0:	20000201 	.word	0x20000201
 80078a4:	20000202 	.word	0x20000202
 80078a8:	20000209 	.word	0x20000209
 80078ac:	20000203 	.word	0x20000203
 80078b0:	20000204 	.word	0x20000204
 80078b4:	20000208 	.word	0x20000208
 80078b8:	20000205 	.word	0x20000205
 80078bc:	20000215 	.word	0x20000215
 80078c0:	20000206 	.word	0x20000206
 80078c4:	20000216 	.word	0x20000216
 80078c8:	20000207 	.word	0x20000207
 80078cc:	20000217 	.word	0x20000217
 80078d0:	2000020a 	.word	0x2000020a
 80078d4:	2000020c 	.word	0x2000020c
 80078d8:	2000020d 	.word	0x2000020d
 80078dc:	2000020e 	.word	0x2000020e
 80078e0:	2000020f 	.word	0x2000020f
 80078e4:	20000210 	.word	0x20000210
 80078e8:	20000211 	.word	0x20000211
 80078ec:	20000212 	.word	0x20000212
 80078f0:	20000213 	.word	0x20000213
 80078f4:	20000214 	.word	0x20000214
 80078f8:	20000218 	.word	0x20000218
 80078fc:	2000021a 	.word	0x2000021a
 8007900:	200001f9 	.word	0x200001f9
 8007904:	200001fa 	.word	0x200001fa
 8007908:	20000008 	.word	0x20000008
 800790c:	20000009 	.word	0x20000009
 8007910:	200001fb 	.word	0x200001fb
 8007914:	2000021d 	.word	0x2000021d
 8007918:	20000128 	.word	0x20000128
 800791c:	0800dd78 	.word	0x0800dd78

08007920 <convertAndSendData>:

void convertAndSendData() {
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 8007926:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <convertAndSendData+0x70>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 800792e:	4a19      	ldr	r2, [pc, #100]	; (8007994 <convertAndSendData+0x74>)
 8007930:	2101      	movs	r1, #1
 8007932:	2001      	movs	r0, #1
 8007934:	f000 fa0e 	bl	8007d54 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007938:	4a17      	ldr	r2, [pc, #92]	; (8007998 <convertAndSendData+0x78>)
 800793a:	2101      	movs	r1, #1
 800793c:	2002      	movs	r0, #2
 800793e:	f000 fa09 	bl	8007d54 <lcd_print>
 8007942:	e009      	b.n	8007958 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007944:	4a15      	ldr	r2, [pc, #84]	; (800799c <convertAndSendData+0x7c>)
 8007946:	2101      	movs	r1, #1
 8007948:	2001      	movs	r0, #1
 800794a:	f000 fa03 	bl	8007d54 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 800794e:	4a14      	ldr	r2, [pc, #80]	; (80079a0 <convertAndSendData+0x80>)
 8007950:	2101      	movs	r1, #1
 8007952:	2002      	movs	r0, #2
 8007954:	f000 f9fe 	bl	8007d54 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 8007958:	2300      	movs	r3, #0
 800795a:	607b      	str	r3, [r7, #4]
 800795c:	e00a      	b.n	8007974 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 800795e:	f7ff febd 	bl	80076dc <mergeData>
 8007962:	4603      	mov	r3, r0
 8007964:	461a      	mov	r2, r3
 8007966:	490f      	ldr	r1, [pc, #60]	; (80079a4 <convertAndSendData+0x84>)
 8007968:	480f      	ldr	r0, [pc, #60]	; (80079a8 <convertAndSendData+0x88>)
 800796a:	f7f9 f811 	bl	8000990 <sendMachineData>
	for(int i=0; i<2; i++) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3301      	adds	r3, #1
 8007972:	607b      	str	r3, [r7, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b01      	cmp	r3, #1
 8007978:	ddf1      	ble.n	800795e <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 800797a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800797e:	f000 ff3f 	bl	8008800 <HAL_Delay>
	lcd_clear();
 8007982:	f000 fa13 	bl	8007dac <lcd_clear>
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	2000021d 	.word	0x2000021d
 8007994:	0800dd7c 	.word	0x0800dd7c
 8007998:	0800dd90 	.word	0x0800dd90
 800799c:	0800dda4 	.word	0x0800dda4
 80079a0:	0800ddb8 	.word	0x0800ddb8
 80079a4:	200001a0 	.word	0x200001a0
 80079a8:	20000420 	.word	0x20000420

080079ac <iotSetup>:

void iotSetup() {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <iotSetup+0x64>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01d      	beq.n	80079f4 <iotSetup+0x48>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 80079b8:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <iotSetup+0x68>)
 80079ba:	7adb      	ldrb	r3, [r3, #11]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <iotSetup+0x18>
			takeMachineID();
 80079c0:	f7ff f9b8 	bl	8006d34 <takeMachineID>
		}
		HAL_Delay(500);
 80079c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079c8:	f000 ff1a 	bl	8008800 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 80079cc:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <iotSetup+0x6c>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <iotSetup+0x2c>
			takeWifiSSID();
 80079d4:	f7ff fafe 	bl	8006fd4 <takeWifiSSID>
		}
		HAL_Delay(500);
 80079d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079dc:	f000 ff10 	bl	8008800 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 80079e0:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <iotSetup+0x70>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <iotSetup+0x40>
			takeWifiPass();
 80079e8:	f7ff fcb6 	bl	8007358 <takeWifiPass>
		}
		HAL_Delay(500);
 80079ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079f0:	f000 ff06 	bl	8008800 <HAL_Delay>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 80079f4:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <iotSetup+0x70>)
 80079f6:	4908      	ldr	r1, [pc, #32]	; (8007a18 <iotSetup+0x6c>)
 80079f8:	4809      	ldr	r0, [pc, #36]	; (8007a20 <iotSetup+0x74>)
 80079fa:	f7f8 ff1f 	bl	800083c <ESP8266_Init>
	HAL_Delay(500);
 80079fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a02:	f000 fefd 	bl	8008800 <HAL_Delay>
	convertAndSendData();
 8007a06:	f7ff ff8b 	bl	8007920 <convertAndSendData>
}
 8007a0a:	bf00      	nop
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	2000021b 	.word	0x2000021b
 8007a14:	200001a0 	.word	0x200001a0
 8007a18:	200001ac 	.word	0x200001ac
 8007a1c:	200001c0 	.word	0x200001c0
 8007a20:	20000420 	.word	0x20000420

08007a24 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	f023 030f 	bic.w	r3, r3, #15
 8007a34:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a3c:	7b7b      	ldrb	r3, [r7, #13]
 8007a3e:	f043 030c 	orr.w	r3, r3, #12
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a46:	7b7b      	ldrb	r3, [r7, #13]
 8007a48:	f043 0308 	orr.w	r3, r3, #8
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a50:	7b3b      	ldrb	r3, [r7, #12]
 8007a52:	f043 030c 	orr.w	r3, r3, #12
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007a5a:	7b3b      	ldrb	r3, [r7, #12]
 8007a5c:	f043 0308 	orr.w	r3, r3, #8
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a64:	bf00      	nop
 8007a66:	4825      	ldr	r0, [pc, #148]	; (8007afc <lcd_send_cmd+0xd8>)
 8007a68:	f002 fac3 	bl	8009ff2 <HAL_I2C_GetError>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d0f9      	beq.n	8007a66 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a72:	bf00      	nop
 8007a74:	4821      	ldr	r0, [pc, #132]	; (8007afc <lcd_send_cmd+0xd8>)
 8007a76:	f002 faaf 	bl	8009fd8 <HAL_I2C_GetState>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d1f9      	bne.n	8007a74 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a80:	4b1f      	ldr	r3, [pc, #124]	; (8007b00 <lcd_send_cmd+0xdc>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d116      	bne.n	8007ab6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
 8007a8c:	e00f      	b.n	8007aae <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	3310      	adds	r3, #16
 8007a92:	443b      	add	r3, r7
 8007a94:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	f022 0208 	bic.w	r2, r2, #8
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	3310      	adds	r3, #16
 8007aa2:	443b      	add	r3, r7
 8007aa4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	73fb      	strb	r3, [r7, #15]
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d9ec      	bls.n	8007a8e <lcd_send_cmd+0x6a>
 8007ab4:	e015      	b.n	8007ae2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73bb      	strb	r3, [r7, #14]
 8007aba:	e00f      	b.n	8007adc <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	3310      	adds	r3, #16
 8007ac0:	443b      	add	r3, r7
 8007ac2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	f042 0208 	orr.w	r2, r2, #8
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	3310      	adds	r3, #16
 8007ad0:	443b      	add	r3, r7
 8007ad2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	73bb      	strb	r3, [r7, #14]
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d9ec      	bls.n	8007abc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007ae2:	f107 0208 	add.w	r2, r7, #8
 8007ae6:	2364      	movs	r3, #100	; 0x64
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	2304      	movs	r3, #4
 8007aec:	214e      	movs	r1, #78	; 0x4e
 8007aee:	4803      	ldr	r0, [pc, #12]	; (8007afc <lcd_send_cmd+0xd8>)
 8007af0:	f001 fe12 	bl	8009718 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20000384 	.word	0x20000384
 8007b00:	2000035a 	.word	0x2000035a

08007b04 <lcd_send_data>:

void lcd_send_data (char data) {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af02      	add	r7, sp, #8
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	f023 030f 	bic.w	r3, r3, #15
 8007b14:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b1c:	7b7b      	ldrb	r3, [r7, #13]
 8007b1e:	f043 030d 	orr.w	r3, r3, #13
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b26:	7b7b      	ldrb	r3, [r7, #13]
 8007b28:	f043 0309 	orr.w	r3, r3, #9
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b30:	7b3b      	ldrb	r3, [r7, #12]
 8007b32:	f043 030d 	orr.w	r3, r3, #13
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b3a:	7b3b      	ldrb	r3, [r7, #12]
 8007b3c:	f043 0309 	orr.w	r3, r3, #9
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b44:	bf00      	nop
 8007b46:	4825      	ldr	r0, [pc, #148]	; (8007bdc <lcd_send_data+0xd8>)
 8007b48:	f002 fa53 	bl	8009ff2 <HAL_I2C_GetError>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d0f9      	beq.n	8007b46 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b52:	bf00      	nop
 8007b54:	4821      	ldr	r0, [pc, #132]	; (8007bdc <lcd_send_data+0xd8>)
 8007b56:	f002 fa3f 	bl	8009fd8 <HAL_I2C_GetState>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b20      	cmp	r3, #32
 8007b5e:	d1f9      	bne.n	8007b54 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b60:	4b1f      	ldr	r3, [pc, #124]	; (8007be0 <lcd_send_data+0xdc>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d116      	bne.n	8007b96 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
 8007b6c:	e00f      	b.n	8007b8e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	3310      	adds	r3, #16
 8007b72:	443b      	add	r3, r7
 8007b74:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	f022 0208 	bic.w	r2, r2, #8
 8007b7e:	b2d2      	uxtb	r2, r2
 8007b80:	3310      	adds	r3, #16
 8007b82:	443b      	add	r3, r7
 8007b84:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d9ec      	bls.n	8007b6e <lcd_send_data+0x6a>
 8007b94:	e015      	b.n	8007bc2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b96:	2300      	movs	r3, #0
 8007b98:	73bb      	strb	r3, [r7, #14]
 8007b9a:	e00f      	b.n	8007bbc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	3310      	adds	r3, #16
 8007ba0:	443b      	add	r3, r7
 8007ba2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	f042 0208 	orr.w	r2, r2, #8
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	3310      	adds	r3, #16
 8007bb0:	443b      	add	r3, r7
 8007bb2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	73bb      	strb	r3, [r7, #14]
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d9ec      	bls.n	8007b9c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007bc2:	f107 0208 	add.w	r2, r7, #8
 8007bc6:	2364      	movs	r3, #100	; 0x64
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	2304      	movs	r3, #4
 8007bcc:	214e      	movs	r1, #78	; 0x4e
 8007bce:	4803      	ldr	r0, [pc, #12]	; (8007bdc <lcd_send_data+0xd8>)
 8007bd0:	f001 fda2 	bl	8009718 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007bd4:	bf00      	nop
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20000384 	.word	0x20000384
 8007be0:	2000035a 	.word	0x2000035a

08007be4 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007bec:	e006      	b.n	8007bfc <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ff84 	bl	8007b04 <lcd_send_data>
	while (*str) {
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f4      	bne.n	8007bee <lcd_send_string+0xa>
	}
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	4603      	mov	r3, r0
 8007c18:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	f023 030f 	bic.w	r3, r3, #15
 8007c20:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c28:	7b7b      	ldrb	r3, [r7, #13]
 8007c2a:	f043 030d 	orr.w	r3, r3, #13
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	f043 0309 	orr.w	r3, r3, #9
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c3c:	7b3b      	ldrb	r3, [r7, #12]
 8007c3e:	f043 030d 	orr.w	r3, r3, #13
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c46:	7b3b      	ldrb	r3, [r7, #12]
 8007c48:	f043 0309 	orr.w	r3, r3, #9
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c50:	bf00      	nop
 8007c52:	4825      	ldr	r0, [pc, #148]	; (8007ce8 <lcd_send_char+0xd8>)
 8007c54:	f002 f9cd 	bl	8009ff2 <HAL_I2C_GetError>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d0f9      	beq.n	8007c52 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c5e:	bf00      	nop
 8007c60:	4821      	ldr	r0, [pc, #132]	; (8007ce8 <lcd_send_char+0xd8>)
 8007c62:	f002 f9b9 	bl	8009fd8 <HAL_I2C_GetState>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d1f9      	bne.n	8007c60 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007c6c:	4b1f      	ldr	r3, [pc, #124]	; (8007cec <lcd_send_char+0xdc>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d116      	bne.n	8007ca2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e00f      	b.n	8007c9a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	3310      	adds	r3, #16
 8007c7e:	443b      	add	r3, r7
 8007c80:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	f022 0208 	bic.w	r2, r2, #8
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	3310      	adds	r3, #16
 8007c8e:	443b      	add	r3, r7
 8007c90:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	3301      	adds	r3, #1
 8007c98:	73fb      	strb	r3, [r7, #15]
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d9ec      	bls.n	8007c7a <lcd_send_char+0x6a>
 8007ca0:	e015      	b.n	8007cce <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73bb      	strb	r3, [r7, #14]
 8007ca6:	e00f      	b.n	8007cc8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	3310      	adds	r3, #16
 8007cac:	443b      	add	r3, r7
 8007cae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	f042 0208 	orr.w	r2, r2, #8
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	3310      	adds	r3, #16
 8007cbc:	443b      	add	r3, r7
 8007cbe:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	73bb      	strb	r3, [r7, #14]
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d9ec      	bls.n	8007ca8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007cce:	f107 0208 	add.w	r2, r7, #8
 8007cd2:	2364      	movs	r3, #100	; 0x64
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	2304      	movs	r3, #4
 8007cd8:	214e      	movs	r1, #78	; 0x4e
 8007cda:	4803      	ldr	r0, [pc, #12]	; (8007ce8 <lcd_send_char+0xd8>)
 8007cdc:	f001 fd1c 	bl	8009718 <HAL_I2C_Master_Transmit>
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000384 	.word	0x20000384
 8007cec:	2000035a 	.word	0x2000035a

08007cf0 <lcd_init>:

void lcd_init (void) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007cf4:	2002      	movs	r0, #2
 8007cf6:	f7ff fe95 	bl	8007a24 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007cfa:	2028      	movs	r0, #40	; 0x28
 8007cfc:	f7ff fe92 	bl	8007a24 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007d00:	200c      	movs	r0, #12
 8007d02:	f7ff fe8f 	bl	8007a24 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d06:	2080      	movs	r0, #128	; 0x80
 8007d08:	f7ff fe8c 	bl	8007a24 <lcd_send_cmd>
	lcd_backlight(1);
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	f000 f86d 	bl	8007dec <lcd_backlight>
}
 8007d12:	bf00      	nop
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	460a      	mov	r2, r1
 8007d20:	71fb      	strb	r3, [r7, #7]
 8007d22:	4613      	mov	r3, r2
 8007d24:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d106      	bne.n	8007d3a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d2c:	79bb      	ldrb	r3, [r7, #6]
 8007d2e:	337f      	adds	r3, #127	; 0x7f
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fe76 	bl	8007a24 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d38:	e008      	b.n	8007d4c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d105      	bne.n	8007d4c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d40:	79bb      	ldrb	r3, [r7, #6]
 8007d42:	3b41      	subs	r3, #65	; 0x41
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff fe6c 	bl	8007a24 <lcd_send_cmd>
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	603a      	str	r2, [r7, #0]
 8007d5e:	71fb      	strb	r3, [r7, #7]
 8007d60:	460b      	mov	r3, r1
 8007d62:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007d64:	79ba      	ldrb	r2, [r7, #6]
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff ffd3 	bl	8007d16 <lcd_gotoxy>
	lcd_send_string(str);
 8007d70:	6838      	ldr	r0, [r7, #0]
 8007d72:	f7ff ff37 	bl	8007be4 <lcd_send_string>
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	4603      	mov	r3, r0
 8007d86:	71fb      	strb	r3, [r7, #7]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	71bb      	strb	r3, [r7, #6]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007d90:	79ba      	ldrb	r2, [r7, #6]
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff ffbd 	bl	8007d16 <lcd_gotoxy>
    lcd_send_char(ch);
 8007d9c:	797b      	ldrb	r3, [r7, #5]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff ff36 	bl	8007c10 <lcd_send_char>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <lcd_clear>:

void lcd_clear(void) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007db0:	2001      	movs	r0, #1
 8007db2:	f7ff fe37 	bl	8007a24 <lcd_send_cmd>
    HAL_Delay(2);
 8007db6:	2002      	movs	r0, #2
 8007db8:	f000 fd22 	bl	8008800 <HAL_Delay>
}
 8007dbc:	bf00      	nop
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	460a      	mov	r2, r1
 8007dca:	71fb      	strb	r3, [r7, #7]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007dd0:	79ba      	ldrb	r2, [r7, #6]
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff ff9d 	bl	8007d16 <lcd_gotoxy>

    lcd_send_char(' ');
 8007ddc:	2020      	movs	r0, #32
 8007dde:	f7ff ff17 	bl	8007c10 <lcd_send_char>
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007df6:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <lcd_backlight+0x20>)
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f7ff fe11 	bl	8007a24 <lcd_send_cmd>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	2000035a 	.word	0x2000035a

08007e10 <lcd_cursor>:

void lcd_cursor(int state) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d106      	bne.n	8007e2c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e1e:	200e      	movs	r0, #14
 8007e20:	f7ff fe00 	bl	8007a24 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e24:	200f      	movs	r0, #15
 8007e26:	f7ff fdfd 	bl	8007a24 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e2a:	e002      	b.n	8007e32 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e2c:	200c      	movs	r0, #12
 8007e2e:	f7ff fdf9 	bl	8007a24 <lcd_send_cmd>
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	4a03      	ldr	r2, [pc, #12]	; (8007e58 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e4c:	6013      	str	r3, [r2, #0]
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr
 8007e58:	200001d8 	.word	0x200001d8

08007e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e60:	f000 fc6c 	bl	800873c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e68:	f000 fcca 	bl	8008800 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e6c:	f000 f89c 	bl	8007fa8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e70:	f000 f9be 	bl	80081f0 <MX_GPIO_Init>
  MX_CAN_Init();
 8007e74:	f000 f8de 	bl	8008034 <MX_CAN_Init>
  MX_I2C1_Init();
 8007e78:	f000 f910 	bl	800809c <MX_I2C1_Init>
  MX_TIM1_Init();
 8007e7c:	f000 f93c 	bl	80080f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007e80:	f000 f98c 	bl	800819c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007e84:	2201      	movs	r2, #1
 8007e86:	2140      	movs	r1, #64	; 0x40
 8007e88:	483e      	ldr	r0, [pc, #248]	; (8007f84 <main+0x128>)
 8007e8a:	f001 faa0 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007e8e:	2201      	movs	r2, #1
 8007e90:	2180      	movs	r1, #128	; 0x80
 8007e92:	483c      	ldr	r0, [pc, #240]	; (8007f84 <main+0x128>)
 8007e94:	f001 fa9b 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007e98:	200a      	movs	r0, #10
 8007e9a:	f000 fcb1 	bl	8008800 <HAL_Delay>
  lcd_init();
 8007e9e:	f7ff ff27 	bl	8007cf0 <lcd_init>
  HAL_Delay(10);
 8007ea2:	200a      	movs	r0, #10
 8007ea4:	f000 fcac 	bl	8008800 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007ea8:	4837      	ldr	r0, [pc, #220]	; (8007f88 <main+0x12c>)
 8007eaa:	f003 f943 	bl	800b134 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007eae:	bf00      	nop
 8007eb0:	4836      	ldr	r0, [pc, #216]	; (8007f8c <main+0x130>)
 8007eb2:	f002 f89e 	bl	8009ff2 <HAL_I2C_GetError>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d0f9      	beq.n	8007eb0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ebc:	bf00      	nop
 8007ebe:	4833      	ldr	r0, [pc, #204]	; (8007f8c <main+0x130>)
 8007ec0:	f002 f88a 	bl	8009fd8 <HAL_I2C_GetState>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d1f9      	bne.n	8007ebe <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ed0:	482c      	ldr	r0, [pc, #176]	; (8007f84 <main+0x128>)
 8007ed2:	f001 fa7c 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007edc:	4829      	ldr	r0, [pc, #164]	; (8007f84 <main+0x128>)
 8007ede:	f001 fa76 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2104      	movs	r1, #4
 8007ee6:	4827      	ldr	r0, [pc, #156]	; (8007f84 <main+0x128>)
 8007ee8:	f001 fa71 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007eec:	2200      	movs	r2, #0
 8007eee:	2102      	movs	r1, #2
 8007ef0:	4824      	ldr	r0, [pc, #144]	; (8007f84 <main+0x128>)
 8007ef2:	f001 fa6c 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2101      	movs	r1, #1
 8007efa:	4822      	ldr	r0, [pc, #136]	; (8007f84 <main+0x128>)
 8007efc:	f001 fa67 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f00:	2200      	movs	r2, #0
 8007f02:	2120      	movs	r1, #32
 8007f04:	4822      	ldr	r0, [pc, #136]	; (8007f90 <main+0x134>)
 8007f06:	f001 fa62 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2110      	movs	r1, #16
 8007f0e:	4820      	ldr	r0, [pc, #128]	; (8007f90 <main+0x134>)
 8007f10:	f001 fa5d 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f14:	2200      	movs	r2, #0
 8007f16:	2180      	movs	r1, #128	; 0x80
 8007f18:	481e      	ldr	r0, [pc, #120]	; (8007f94 <main+0x138>)
 8007f1a:	f001 fa58 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2140      	movs	r1, #64	; 0x40
 8007f22:	481c      	ldr	r0, [pc, #112]	; (8007f94 <main+0x138>)
 8007f24:	f001 fa53 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2120      	movs	r1, #32
 8007f2c:	4819      	ldr	r0, [pc, #100]	; (8007f94 <main+0x138>)
 8007f2e:	f001 fa4e 	bl	80093ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f32:	2200      	movs	r2, #0
 8007f34:	2110      	movs	r1, #16
 8007f36:	4817      	ldr	r0, [pc, #92]	; (8007f94 <main+0x138>)
 8007f38:	f001 fa49 	bl	80093ce <HAL_GPIO_WritePin>

  i2cTest();
 8007f3c:	f7f8 ff08 	bl	8000d50 <i2cTest>
  HAL_Delay(100);
 8007f40:	2064      	movs	r0, #100	; 0x64
 8007f42:	f000 fc5d 	bl	8008800 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f46:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <main+0x13c>)
 8007f48:	2101      	movs	r1, #1
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	f7ff ff02 	bl	8007d54 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f50:	4a12      	ldr	r2, [pc, #72]	; (8007f9c <main+0x140>)
 8007f52:	2101      	movs	r1, #1
 8007f54:	2002      	movs	r0, #2
 8007f56:	f7ff fefd 	bl	8007d54 <lcd_print>
  HAL_Delay(1000);
 8007f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f5e:	f000 fc4f 	bl	8008800 <HAL_Delay>
  lcd_clear();
 8007f62:	f7ff ff23 	bl	8007dac <lcd_clear>

  eepromKontrol();
 8007f66:	f7f8 f965 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f6e:	f000 fc47 	bl	8008800 <HAL_Delay>

  backLightTimer = millis;
 8007f72:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <main+0x144>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a0b      	ldr	r2, [pc, #44]	; (8007fa4 <main+0x148>)
 8007f78:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007f7a:	f7ff fd17 	bl	80079ac <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f7e:	f7fe fd41 	bl	8006a04 <mainLoop>
 8007f82:	e7fc      	b.n	8007f7e <main+0x122>
 8007f84:	40010c00 	.word	0x40010c00
 8007f88:	200003d8 	.word	0x200003d8
 8007f8c:	20000384 	.word	0x20000384
 8007f90:	40011000 	.word	0x40011000
 8007f94:	40010800 	.word	0x40010800
 8007f98:	0800ddcc 	.word	0x0800ddcc
 8007f9c:	0800dde0 	.word	0x0800dde0
 8007fa0:	200001d8 	.word	0x200001d8
 8007fa4:	200001f4 	.word	0x200001f4

08007fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b090      	sub	sp, #64	; 0x40
 8007fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fae:	f107 0318 	add.w	r3, r7, #24
 8007fb2:	2228      	movs	r2, #40	; 0x28
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f004 fb45 	bl	800c646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fbc:	1d3b      	adds	r3, r7, #4
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
 8007fc4:	609a      	str	r2, [r3, #8]
 8007fc6:	60da      	str	r2, [r3, #12]
 8007fc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fe6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fec:	f107 0318 	add.w	r3, r7, #24
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f002 fc3f 	bl	800a874 <HAL_RCC_OscConfig>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007ffc:	f000 f9a2 	bl	8008344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008000:	230f      	movs	r3, #15
 8008002:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008004:	2302      	movs	r3, #2
 8008006:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800800c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008012:	2300      	movs	r3, #0
 8008014:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008016:	1d3b      	adds	r3, r7, #4
 8008018:	2102      	movs	r1, #2
 800801a:	4618      	mov	r0, r3
 800801c:	f002 feac 	bl	800ad78 <HAL_RCC_ClockConfig>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008026:	f000 f98d 	bl	8008344 <Error_Handler>
  }
}
 800802a:	bf00      	nop
 800802c:	3740      	adds	r7, #64	; 0x40
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008038:	4b16      	ldr	r3, [pc, #88]	; (8008094 <MX_CAN_Init+0x60>)
 800803a:	4a17      	ldr	r2, [pc, #92]	; (8008098 <MX_CAN_Init+0x64>)
 800803c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800803e:	4b15      	ldr	r3, [pc, #84]	; (8008094 <MX_CAN_Init+0x60>)
 8008040:	2210      	movs	r2, #16
 8008042:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008044:	4b13      	ldr	r3, [pc, #76]	; (8008094 <MX_CAN_Init+0x60>)
 8008046:	2200      	movs	r2, #0
 8008048:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800804a:	4b12      	ldr	r3, [pc, #72]	; (8008094 <MX_CAN_Init+0x60>)
 800804c:	2200      	movs	r2, #0
 800804e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008050:	4b10      	ldr	r3, [pc, #64]	; (8008094 <MX_CAN_Init+0x60>)
 8008052:	2200      	movs	r2, #0
 8008054:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008056:	4b0f      	ldr	r3, [pc, #60]	; (8008094 <MX_CAN_Init+0x60>)
 8008058:	2200      	movs	r2, #0
 800805a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <MX_CAN_Init+0x60>)
 800805e:	2200      	movs	r2, #0
 8008060:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008062:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <MX_CAN_Init+0x60>)
 8008064:	2200      	movs	r2, #0
 8008066:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <MX_CAN_Init+0x60>)
 800806a:	2200      	movs	r2, #0
 800806c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800806e:	4b09      	ldr	r3, [pc, #36]	; (8008094 <MX_CAN_Init+0x60>)
 8008070:	2200      	movs	r2, #0
 8008072:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008074:	4b07      	ldr	r3, [pc, #28]	; (8008094 <MX_CAN_Init+0x60>)
 8008076:	2200      	movs	r2, #0
 8008078:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800807a:	4b06      	ldr	r3, [pc, #24]	; (8008094 <MX_CAN_Init+0x60>)
 800807c:	2200      	movs	r2, #0
 800807e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008080:	4804      	ldr	r0, [pc, #16]	; (8008094 <MX_CAN_Init+0x60>)
 8008082:	f000 fbe1 	bl	8008848 <HAL_CAN_Init>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800808c:	f000 f95a 	bl	8008344 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008090:	bf00      	nop
 8008092:	bd80      	pop	{r7, pc}
 8008094:	2000035c 	.word	0x2000035c
 8008098:	40006400 	.word	0x40006400

0800809c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <MX_I2C1_Init+0x50>)
 80080a2:	4a13      	ldr	r2, [pc, #76]	; (80080f0 <MX_I2C1_Init+0x54>)
 80080a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80080a6:	4b11      	ldr	r3, [pc, #68]	; (80080ec <MX_I2C1_Init+0x50>)
 80080a8:	4a12      	ldr	r2, [pc, #72]	; (80080f4 <MX_I2C1_Init+0x58>)
 80080aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <MX_I2C1_Init+0x50>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80080b2:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <MX_I2C1_Init+0x50>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <MX_I2C1_Init+0x50>)
 80080ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080c0:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <MX_I2C1_Init+0x50>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <MX_I2C1_Init+0x50>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080cc:	4b07      	ldr	r3, [pc, #28]	; (80080ec <MX_I2C1_Init+0x50>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080d2:	4b06      	ldr	r3, [pc, #24]	; (80080ec <MX_I2C1_Init+0x50>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080d8:	4804      	ldr	r0, [pc, #16]	; (80080ec <MX_I2C1_Init+0x50>)
 80080da:	f001 f9a9 	bl	8009430 <HAL_I2C_Init>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080e4:	f000 f92e 	bl	8008344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80080e8:	bf00      	nop
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20000384 	.word	0x20000384
 80080f0:	40005400 	.word	0x40005400
 80080f4:	00061a80 	.word	0x00061a80

080080f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080fe:	f107 0308 	add.w	r3, r7, #8
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	605a      	str	r2, [r3, #4]
 8008108:	609a      	str	r2, [r3, #8]
 800810a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800810c:	463b      	mov	r3, r7
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008114:	4b1f      	ldr	r3, [pc, #124]	; (8008194 <MX_TIM1_Init+0x9c>)
 8008116:	4a20      	ldr	r2, [pc, #128]	; (8008198 <MX_TIM1_Init+0xa0>)
 8008118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800811a:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <MX_TIM1_Init+0x9c>)
 800811c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008120:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008122:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <MX_TIM1_Init+0x9c>)
 8008124:	2200      	movs	r2, #0
 8008126:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008128:	4b1a      	ldr	r3, [pc, #104]	; (8008194 <MX_TIM1_Init+0x9c>)
 800812a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800812e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008130:	4b18      	ldr	r3, [pc, #96]	; (8008194 <MX_TIM1_Init+0x9c>)
 8008132:	2200      	movs	r2, #0
 8008134:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008136:	4b17      	ldr	r3, [pc, #92]	; (8008194 <MX_TIM1_Init+0x9c>)
 8008138:	2200      	movs	r2, #0
 800813a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800813c:	4b15      	ldr	r3, [pc, #84]	; (8008194 <MX_TIM1_Init+0x9c>)
 800813e:	2200      	movs	r2, #0
 8008140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008142:	4814      	ldr	r0, [pc, #80]	; (8008194 <MX_TIM1_Init+0x9c>)
 8008144:	f002 ffa6 	bl	800b094 <HAL_TIM_Base_Init>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800814e:	f000 f8f9 	bl	8008344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008156:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008158:	f107 0308 	add.w	r3, r7, #8
 800815c:	4619      	mov	r1, r3
 800815e:	480d      	ldr	r0, [pc, #52]	; (8008194 <MX_TIM1_Init+0x9c>)
 8008160:	f003 f950 	bl	800b404 <HAL_TIM_ConfigClockSource>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800816a:	f000 f8eb 	bl	8008344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800816e:	2300      	movs	r3, #0
 8008170:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008176:	463b      	mov	r3, r7
 8008178:	4619      	mov	r1, r3
 800817a:	4806      	ldr	r0, [pc, #24]	; (8008194 <MX_TIM1_Init+0x9c>)
 800817c:	f003 fb3e 	bl	800b7fc <HAL_TIMEx_MasterConfigSynchronization>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008186:	f000 f8dd 	bl	8008344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800818a:	bf00      	nop
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200003d8 	.word	0x200003d8
 8008198:	40012c00 	.word	0x40012c00

0800819c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081a2:	4a12      	ldr	r2, [pc, #72]	; (80081ec <MX_USART1_UART_Init+0x50>)
 80081a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80081a6:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80081ae:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081ba:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081bc:	2200      	movs	r2, #0
 80081be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081c2:	220c      	movs	r2, #12
 80081c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081c6:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081d2:	4805      	ldr	r0, [pc, #20]	; (80081e8 <MX_USART1_UART_Init+0x4c>)
 80081d4:	f003 fb90 	bl	800b8f8 <HAL_UART_Init>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80081de:	f000 f8b1 	bl	8008344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081e2:	bf00      	nop
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20000420 	.word	0x20000420
 80081ec:	40013800 	.word	0x40013800

080081f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f6:	f107 0310 	add.w	r3, r7, #16
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	605a      	str	r2, [r3, #4]
 8008200:	609a      	str	r2, [r3, #8]
 8008202:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008204:	4b4b      	ldr	r3, [pc, #300]	; (8008334 <MX_GPIO_Init+0x144>)
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	4a4a      	ldr	r2, [pc, #296]	; (8008334 <MX_GPIO_Init+0x144>)
 800820a:	f043 0310 	orr.w	r3, r3, #16
 800820e:	6193      	str	r3, [r2, #24]
 8008210:	4b48      	ldr	r3, [pc, #288]	; (8008334 <MX_GPIO_Init+0x144>)
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800821c:	4b45      	ldr	r3, [pc, #276]	; (8008334 <MX_GPIO_Init+0x144>)
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	4a44      	ldr	r2, [pc, #272]	; (8008334 <MX_GPIO_Init+0x144>)
 8008222:	f043 0320 	orr.w	r3, r3, #32
 8008226:	6193      	str	r3, [r2, #24]
 8008228:	4b42      	ldr	r3, [pc, #264]	; (8008334 <MX_GPIO_Init+0x144>)
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008234:	4b3f      	ldr	r3, [pc, #252]	; (8008334 <MX_GPIO_Init+0x144>)
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	4a3e      	ldr	r2, [pc, #248]	; (8008334 <MX_GPIO_Init+0x144>)
 800823a:	f043 0304 	orr.w	r3, r3, #4
 800823e:	6193      	str	r3, [r2, #24]
 8008240:	4b3c      	ldr	r3, [pc, #240]	; (8008334 <MX_GPIO_Init+0x144>)
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	607b      	str	r3, [r7, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800824c:	4b39      	ldr	r3, [pc, #228]	; (8008334 <MX_GPIO_Init+0x144>)
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	4a38      	ldr	r2, [pc, #224]	; (8008334 <MX_GPIO_Init+0x144>)
 8008252:	f043 0308 	orr.w	r3, r3, #8
 8008256:	6193      	str	r3, [r2, #24]
 8008258:	4b36      	ldr	r3, [pc, #216]	; (8008334 <MX_GPIO_Init+0x144>)
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	603b      	str	r3, [r7, #0]
 8008262:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008264:	2200      	movs	r2, #0
 8008266:	21f0      	movs	r1, #240	; 0xf0
 8008268:	4833      	ldr	r0, [pc, #204]	; (8008338 <MX_GPIO_Init+0x148>)
 800826a:	f001 f8b0 	bl	80093ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800826e:	2200      	movs	r2, #0
 8008270:	f241 0130 	movw	r1, #4144	; 0x1030
 8008274:	4831      	ldr	r0, [pc, #196]	; (800833c <MX_GPIO_Init+0x14c>)
 8008276:	f001 f8aa 	bl	80093ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800827a:	2200      	movs	r2, #0
 800827c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008280:	482f      	ldr	r0, [pc, #188]	; (8008340 <MX_GPIO_Init+0x150>)
 8008282:	f001 f8a4 	bl	80093ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008286:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800828a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008294:	f107 0310 	add.w	r3, r7, #16
 8008298:	4619      	mov	r1, r3
 800829a:	4828      	ldr	r0, [pc, #160]	; (800833c <MX_GPIO_Init+0x14c>)
 800829c:	f000 fe20 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80082a0:	f248 130f 	movw	r3, #33039	; 0x810f
 80082a4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ae:	f107 0310 	add.w	r3, r7, #16
 80082b2:	4619      	mov	r1, r3
 80082b4:	4820      	ldr	r0, [pc, #128]	; (8008338 <MX_GPIO_Init+0x148>)
 80082b6:	f000 fe13 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80082ba:	23f0      	movs	r3, #240	; 0xf0
 80082bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082be:	2301      	movs	r3, #1
 80082c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082c6:	2302      	movs	r3, #2
 80082c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ca:	f107 0310 	add.w	r3, r7, #16
 80082ce:	4619      	mov	r1, r3
 80082d0:	4819      	ldr	r0, [pc, #100]	; (8008338 <MX_GPIO_Init+0x148>)
 80082d2:	f000 fe05 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80082d6:	f241 0330 	movw	r3, #4144	; 0x1030
 80082da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082dc:	2301      	movs	r3, #1
 80082de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e4:	2302      	movs	r3, #2
 80082e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082e8:	f107 0310 	add.w	r3, r7, #16
 80082ec:	4619      	mov	r1, r3
 80082ee:	4813      	ldr	r0, [pc, #76]	; (800833c <MX_GPIO_Init+0x14c>)
 80082f0:	f000 fdf6 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082f4:	f640 4307 	movw	r3, #3079	; 0xc07
 80082f8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082fa:	2301      	movs	r3, #1
 80082fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008302:	2302      	movs	r3, #2
 8008304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008306:	f107 0310 	add.w	r3, r7, #16
 800830a:	4619      	mov	r1, r3
 800830c:	480c      	ldr	r0, [pc, #48]	; (8008340 <MX_GPIO_Init+0x150>)
 800830e:	f000 fde7 	bl	8008ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008312:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800831c:	2300      	movs	r3, #0
 800831e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008320:	f107 0310 	add.w	r3, r7, #16
 8008324:	4619      	mov	r1, r3
 8008326:	4806      	ldr	r0, [pc, #24]	; (8008340 <MX_GPIO_Init+0x150>)
 8008328:	f000 fdda 	bl	8008ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800832c:	bf00      	nop
 800832e:	3720      	adds	r7, #32
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	40021000 	.word	0x40021000
 8008338:	40010800 	.word	0x40010800
 800833c:	40011000 	.word	0x40011000
 8008340:	40010c00 	.word	0x40010c00

08008344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008348:	bf00      	nop
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr

08008350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008356:	4b15      	ldr	r3, [pc, #84]	; (80083ac <HAL_MspInit+0x5c>)
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	4a14      	ldr	r2, [pc, #80]	; (80083ac <HAL_MspInit+0x5c>)
 800835c:	f043 0301 	orr.w	r3, r3, #1
 8008360:	6193      	str	r3, [r2, #24]
 8008362:	4b12      	ldr	r3, [pc, #72]	; (80083ac <HAL_MspInit+0x5c>)
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	60bb      	str	r3, [r7, #8]
 800836c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <HAL_MspInit+0x5c>)
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	4a0e      	ldr	r2, [pc, #56]	; (80083ac <HAL_MspInit+0x5c>)
 8008374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008378:	61d3      	str	r3, [r2, #28]
 800837a:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <HAL_MspInit+0x5c>)
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008382:	607b      	str	r3, [r7, #4]
 8008384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <HAL_MspInit+0x60>)
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	4a04      	ldr	r2, [pc, #16]	; (80083b0 <HAL_MspInit+0x60>)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr
 80083ac:	40021000 	.word	0x40021000
 80083b0:	40010000 	.word	0x40010000

080083b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083bc:	f107 0310 	add.w	r3, r7, #16
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	609a      	str	r2, [r3, #8]
 80083c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a1c      	ldr	r2, [pc, #112]	; (8008440 <HAL_CAN_MspInit+0x8c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d131      	bne.n	8008438 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80083d4:	4b1b      	ldr	r3, [pc, #108]	; (8008444 <HAL_CAN_MspInit+0x90>)
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	4a1a      	ldr	r2, [pc, #104]	; (8008444 <HAL_CAN_MspInit+0x90>)
 80083da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083de:	61d3      	str	r3, [r2, #28]
 80083e0:	4b18      	ldr	r3, [pc, #96]	; (8008444 <HAL_CAN_MspInit+0x90>)
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ec:	4b15      	ldr	r3, [pc, #84]	; (8008444 <HAL_CAN_MspInit+0x90>)
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	4a14      	ldr	r2, [pc, #80]	; (8008444 <HAL_CAN_MspInit+0x90>)
 80083f2:	f043 0304 	orr.w	r3, r3, #4
 80083f6:	6193      	str	r3, [r2, #24]
 80083f8:	4b12      	ldr	r3, [pc, #72]	; (8008444 <HAL_CAN_MspInit+0x90>)
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800840e:	2300      	movs	r3, #0
 8008410:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008412:	f107 0310 	add.w	r3, r7, #16
 8008416:	4619      	mov	r1, r3
 8008418:	480b      	ldr	r0, [pc, #44]	; (8008448 <HAL_CAN_MspInit+0x94>)
 800841a:	f000 fd61 	bl	8008ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800841e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008424:	2302      	movs	r3, #2
 8008426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008428:	2303      	movs	r3, #3
 800842a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800842c:	f107 0310 	add.w	r3, r7, #16
 8008430:	4619      	mov	r1, r3
 8008432:	4805      	ldr	r0, [pc, #20]	; (8008448 <HAL_CAN_MspInit+0x94>)
 8008434:	f000 fd54 	bl	8008ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008438:	bf00      	nop
 800843a:	3720      	adds	r7, #32
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40006400 	.word	0x40006400
 8008444:	40021000 	.word	0x40021000
 8008448:	40010800 	.word	0x40010800

0800844c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008454:	f107 0310 	add.w	r3, r7, #16
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	605a      	str	r2, [r3, #4]
 800845e:	609a      	str	r2, [r3, #8]
 8008460:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a15      	ldr	r2, [pc, #84]	; (80084bc <HAL_I2C_MspInit+0x70>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d123      	bne.n	80084b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800846c:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <HAL_I2C_MspInit+0x74>)
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	4a13      	ldr	r2, [pc, #76]	; (80084c0 <HAL_I2C_MspInit+0x74>)
 8008472:	f043 0308 	orr.w	r3, r3, #8
 8008476:	6193      	str	r3, [r2, #24]
 8008478:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <HAL_I2C_MspInit+0x74>)
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008484:	23c0      	movs	r3, #192	; 0xc0
 8008486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008488:	2312      	movs	r3, #18
 800848a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800848c:	2303      	movs	r3, #3
 800848e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008490:	f107 0310 	add.w	r3, r7, #16
 8008494:	4619      	mov	r1, r3
 8008496:	480b      	ldr	r0, [pc, #44]	; (80084c4 <HAL_I2C_MspInit+0x78>)
 8008498:	f000 fd22 	bl	8008ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800849c:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <HAL_I2C_MspInit+0x74>)
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	4a07      	ldr	r2, [pc, #28]	; (80084c0 <HAL_I2C_MspInit+0x74>)
 80084a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084a6:	61d3      	str	r3, [r2, #28]
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <HAL_I2C_MspInit+0x74>)
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084b0:	60bb      	str	r3, [r7, #8]
 80084b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084b4:	bf00      	nop
 80084b6:	3720      	adds	r7, #32
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40005400 	.word	0x40005400
 80084c0:	40021000 	.word	0x40021000
 80084c4:	40010c00 	.word	0x40010c00

080084c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a0a      	ldr	r2, [pc, #40]	; (8008500 <HAL_I2C_MspDeInit+0x38>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d10d      	bne.n	80084f6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80084da:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <HAL_I2C_MspDeInit+0x3c>)
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	4a09      	ldr	r2, [pc, #36]	; (8008504 <HAL_I2C_MspDeInit+0x3c>)
 80084e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084e4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80084e6:	2140      	movs	r1, #64	; 0x40
 80084e8:	4807      	ldr	r0, [pc, #28]	; (8008508 <HAL_I2C_MspDeInit+0x40>)
 80084ea:	f000 fe8d 	bl	8009208 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80084ee:	2180      	movs	r1, #128	; 0x80
 80084f0:	4805      	ldr	r0, [pc, #20]	; (8008508 <HAL_I2C_MspDeInit+0x40>)
 80084f2:	f000 fe89 	bl	8009208 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	40005400 	.word	0x40005400
 8008504:	40021000 	.word	0x40021000
 8008508:	40010c00 	.word	0x40010c00

0800850c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a0d      	ldr	r2, [pc, #52]	; (8008550 <HAL_TIM_Base_MspInit+0x44>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d113      	bne.n	8008546 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800851e:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <HAL_TIM_Base_MspInit+0x48>)
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	4a0c      	ldr	r2, [pc, #48]	; (8008554 <HAL_TIM_Base_MspInit+0x48>)
 8008524:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008528:	6193      	str	r3, [r2, #24]
 800852a:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <HAL_TIM_Base_MspInit+0x48>)
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	2019      	movs	r0, #25
 800853c:	f000 fb57 	bl	8008bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008540:	2019      	movs	r0, #25
 8008542:	f000 fb70 	bl	8008c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	40012c00 	.word	0x40012c00
 8008554:	40021000 	.word	0x40021000

08008558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008560:	f107 0310 	add.w	r3, r7, #16
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	609a      	str	r2, [r3, #8]
 800856c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a20      	ldr	r2, [pc, #128]	; (80085f4 <HAL_UART_MspInit+0x9c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d139      	bne.n	80085ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008578:	4b1f      	ldr	r3, [pc, #124]	; (80085f8 <HAL_UART_MspInit+0xa0>)
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	4a1e      	ldr	r2, [pc, #120]	; (80085f8 <HAL_UART_MspInit+0xa0>)
 800857e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008582:	6193      	str	r3, [r2, #24]
 8008584:	4b1c      	ldr	r3, [pc, #112]	; (80085f8 <HAL_UART_MspInit+0xa0>)
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008590:	4b19      	ldr	r3, [pc, #100]	; (80085f8 <HAL_UART_MspInit+0xa0>)
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <HAL_UART_MspInit+0xa0>)
 8008596:	f043 0304 	orr.w	r3, r3, #4
 800859a:	6193      	str	r3, [r2, #24]
 800859c:	4b16      	ldr	r3, [pc, #88]	; (80085f8 <HAL_UART_MspInit+0xa0>)
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ae:	2302      	movs	r3, #2
 80085b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085b2:	2303      	movs	r3, #3
 80085b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b6:	f107 0310 	add.w	r3, r7, #16
 80085ba:	4619      	mov	r1, r3
 80085bc:	480f      	ldr	r0, [pc, #60]	; (80085fc <HAL_UART_MspInit+0xa4>)
 80085be:	f000 fc8f 	bl	8008ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	4619      	mov	r1, r3
 80085d6:	4809      	ldr	r0, [pc, #36]	; (80085fc <HAL_UART_MspInit+0xa4>)
 80085d8:	f000 fc82 	bl	8008ee0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80085dc:	2200      	movs	r2, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	2025      	movs	r0, #37	; 0x25
 80085e2:	f000 fb04 	bl	8008bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085e6:	2025      	movs	r0, #37	; 0x25
 80085e8:	f000 fb1d 	bl	8008c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085ec:	bf00      	nop
 80085ee:	3720      	adds	r7, #32
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	40013800 	.word	0x40013800
 80085f8:	40021000 	.word	0x40021000
 80085fc:	40010800 	.word	0x40010800

08008600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008604:	e7fe      	b.n	8008604 <NMI_Handler+0x4>

08008606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008606:	b480      	push	{r7}
 8008608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800860a:	e7fe      	b.n	800860a <HardFault_Handler+0x4>

0800860c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008610:	e7fe      	b.n	8008610 <MemManage_Handler+0x4>

08008612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008612:	b480      	push	{r7}
 8008614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008616:	e7fe      	b.n	8008616 <BusFault_Handler+0x4>

08008618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008618:	b480      	push	{r7}
 800861a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800861c:	e7fe      	b.n	800861c <UsageFault_Handler+0x4>

0800861e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800861e:	b480      	push	{r7}
 8008620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008622:	bf00      	nop
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr

0800862a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800862a:	b480      	push	{r7}
 800862c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800862e:	bf00      	nop
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr

08008636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008636:	b480      	push	{r7}
 8008638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800863a:	bf00      	nop
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr

08008642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008646:	f000 f8bf 	bl	80087c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800864a:	bf00      	nop
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008654:	4802      	ldr	r0, [pc, #8]	; (8008660 <TIM1_UP_IRQHandler+0x10>)
 8008656:	f002 fdcd 	bl	800b1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800865a:	bf00      	nop
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200003d8 	.word	0x200003d8

08008664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008668:	4802      	ldr	r0, [pc, #8]	; (8008674 <USART1_IRQHandler+0x10>)
 800866a:	f003 f9cb 	bl	800ba04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800866e:	bf00      	nop
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20000420 	.word	0x20000420

08008678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008680:	4a14      	ldr	r2, [pc, #80]	; (80086d4 <_sbrk+0x5c>)
 8008682:	4b15      	ldr	r3, [pc, #84]	; (80086d8 <_sbrk+0x60>)
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800868c:	4b13      	ldr	r3, [pc, #76]	; (80086dc <_sbrk+0x64>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008694:	4b11      	ldr	r3, [pc, #68]	; (80086dc <_sbrk+0x64>)
 8008696:	4a12      	ldr	r2, [pc, #72]	; (80086e0 <_sbrk+0x68>)
 8008698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <_sbrk+0x64>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d207      	bcs.n	80086b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086a8:	f003 ffe6 	bl	800c678 <__errno>
 80086ac:	4603      	mov	r3, r0
 80086ae:	220c      	movs	r2, #12
 80086b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086b6:	e009      	b.n	80086cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086b8:	4b08      	ldr	r3, [pc, #32]	; (80086dc <_sbrk+0x64>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <_sbrk+0x64>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	4a05      	ldr	r2, [pc, #20]	; (80086dc <_sbrk+0x64>)
 80086c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086ca:	68fb      	ldr	r3, [r7, #12]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000c000 	.word	0x2000c000
 80086d8:	00000400 	.word	0x00000400
 80086dc:	20000468 	.word	0x20000468
 80086e0:	200005b8 	.word	0x200005b8

080086e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr

080086f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086f0:	480c      	ldr	r0, [pc, #48]	; (8008724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80086f2:	490d      	ldr	r1, [pc, #52]	; (8008728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80086f4:	4a0d      	ldr	r2, [pc, #52]	; (800872c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80086f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086f8:	e002      	b.n	8008700 <LoopCopyDataInit>

080086fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086fe:	3304      	adds	r3, #4

08008700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008704:	d3f9      	bcc.n	80086fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008706:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008708:	4c0a      	ldr	r4, [pc, #40]	; (8008734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800870a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800870c:	e001      	b.n	8008712 <LoopFillZerobss>

0800870e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800870e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008710:	3204      	adds	r2, #4

08008712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008714:	d3fb      	bcc.n	800870e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008716:	f7ff ffe5 	bl	80086e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800871a:	f003 ffb3 	bl	800c684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800871e:	f7ff fb9d 	bl	8007e5c <main>
  bx lr
 8008722:	4770      	bx	lr
  ldr r0, =_sdata
 8008724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008728:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 800872c:	0800de80 	.word	0x0800de80
  ldr r2, =_sbss
 8008730:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8008734:	200005b8 	.word	0x200005b8

08008738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008738:	e7fe      	b.n	8008738 <ADC1_2_IRQHandler>
	...

0800873c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008740:	4b08      	ldr	r3, [pc, #32]	; (8008764 <HAL_Init+0x28>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a07      	ldr	r2, [pc, #28]	; (8008764 <HAL_Init+0x28>)
 8008746:	f043 0310 	orr.w	r3, r3, #16
 800874a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800874c:	2003      	movs	r0, #3
 800874e:	f000 fa43 	bl	8008bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008752:	200f      	movs	r0, #15
 8008754:	f000 f808 	bl	8008768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008758:	f7ff fdfa 	bl	8008350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	40022000 	.word	0x40022000

08008768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008770:	4b12      	ldr	r3, [pc, #72]	; (80087bc <HAL_InitTick+0x54>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	4b12      	ldr	r3, [pc, #72]	; (80087c0 <HAL_InitTick+0x58>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	4619      	mov	r1, r3
 800877a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800877e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008782:	fbb2 f3f3 	udiv	r3, r2, r3
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fa5b 	bl	8008c42 <HAL_SYSTICK_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e00e      	b.n	80087b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b0f      	cmp	r3, #15
 800879a:	d80a      	bhi.n	80087b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800879c:	2200      	movs	r2, #0
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a4:	f000 fa23 	bl	8008bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087a8:	4a06      	ldr	r2, [pc, #24]	; (80087c4 <HAL_InitTick+0x5c>)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	e000      	b.n	80087b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	200000b0 	.word	0x200000b0
 80087c0:	200000b8 	.word	0x200000b8
 80087c4:	200000b4 	.word	0x200000b4

080087c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087c8:	b480      	push	{r7}
 80087ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <HAL_IncTick+0x1c>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <HAL_IncTick+0x20>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4413      	add	r3, r2
 80087d8:	4a03      	ldr	r2, [pc, #12]	; (80087e8 <HAL_IncTick+0x20>)
 80087da:	6013      	str	r3, [r2, #0]
}
 80087dc:	bf00      	nop
 80087de:	46bd      	mov	sp, r7
 80087e0:	bc80      	pop	{r7}
 80087e2:	4770      	bx	lr
 80087e4:	200000b8 	.word	0x200000b8
 80087e8:	2000046c 	.word	0x2000046c

080087ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  return uwTick;
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <HAL_GetTick+0x10>)
 80087f2:	681b      	ldr	r3, [r3, #0]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	2000046c 	.word	0x2000046c

08008800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008808:	f7ff fff0 	bl	80087ec <HAL_GetTick>
 800880c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008818:	d005      	beq.n	8008826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <HAL_Delay+0x44>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008826:	bf00      	nop
 8008828:	f7ff ffe0 	bl	80087ec <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	429a      	cmp	r2, r3
 8008836:	d8f7      	bhi.n	8008828 <HAL_Delay+0x28>
  {
  }
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	200000b8 	.word	0x200000b8

08008848 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e0ed      	b.n	8008a36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d102      	bne.n	800886c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fda4 	bl	80083b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800887c:	f7ff ffb6 	bl	80087ec <HAL_GetTick>
 8008880:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008882:	e012      	b.n	80088aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008884:	f7ff ffb2 	bl	80087ec <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b0a      	cmp	r3, #10
 8008890:	d90b      	bls.n	80088aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2205      	movs	r2, #5
 80088a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e0c5      	b.n	8008a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0e5      	beq.n	8008884 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0202 	bic.w	r2, r2, #2
 80088c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088c8:	f7ff ff90 	bl	80087ec <HAL_GetTick>
 80088cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088ce:	e012      	b.n	80088f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088d0:	f7ff ff8c 	bl	80087ec <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	2b0a      	cmp	r3, #10
 80088dc:	d90b      	bls.n	80088f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2205      	movs	r2, #5
 80088ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e09f      	b.n	8008a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e5      	bne.n	80088d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7e1b      	ldrb	r3, [r3, #24]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d108      	bne.n	800891e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	e007      	b.n	800892e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800892c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	7e5b      	ldrb	r3, [r3, #25]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d108      	bne.n	8008948 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	e007      	b.n	8008958 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008956:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7e9b      	ldrb	r3, [r3, #26]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d108      	bne.n	8008972 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0220 	orr.w	r2, r2, #32
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	e007      	b.n	8008982 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0220 	bic.w	r2, r2, #32
 8008980:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	7edb      	ldrb	r3, [r3, #27]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d108      	bne.n	800899c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0210 	bic.w	r2, r2, #16
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	e007      	b.n	80089ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f042 0210 	orr.w	r2, r2, #16
 80089aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7f1b      	ldrb	r3, [r3, #28]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d108      	bne.n	80089c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0208 	orr.w	r2, r2, #8
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e007      	b.n	80089d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 0208 	bic.w	r2, r2, #8
 80089d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7f5b      	ldrb	r3, [r3, #29]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d108      	bne.n	80089f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f042 0204 	orr.w	r2, r2, #4
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e007      	b.n	8008a00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0204 	bic.w	r2, r2, #4
 80089fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	ea42 0103 	orr.w	r1, r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	1e5a      	subs	r2, r3, #1
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <__NVIC_SetPriorityGrouping>:
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a50:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <__NVIC_SetPriorityGrouping+0x44>)
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a72:	4a04      	ldr	r2, [pc, #16]	; (8008a84 <__NVIC_SetPriorityGrouping+0x44>)
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	60d3      	str	r3, [r2, #12]
}
 8008a78:	bf00      	nop
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	e000ed00 	.word	0xe000ed00

08008a88 <__NVIC_GetPriorityGrouping>:
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	0a1b      	lsrs	r3, r3, #8
 8008a92:	f003 0307 	and.w	r3, r3, #7
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	e000ed00 	.word	0xe000ed00

08008aa4 <__NVIC_EnableIRQ>:
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	db0b      	blt.n	8008ace <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	f003 021f 	and.w	r2, r3, #31
 8008abc:	4906      	ldr	r1, [pc, #24]	; (8008ad8 <__NVIC_EnableIRQ+0x34>)
 8008abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac2:	095b      	lsrs	r3, r3, #5
 8008ac4:	2001      	movs	r0, #1
 8008ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8008aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008ace:	bf00      	nop
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr
 8008ad8:	e000e100 	.word	0xe000e100

08008adc <__NVIC_SetPriority>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6039      	str	r1, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db0a      	blt.n	8008b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	490c      	ldr	r1, [pc, #48]	; (8008b28 <__NVIC_SetPriority+0x4c>)
 8008af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afa:	0112      	lsls	r2, r2, #4
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	440b      	add	r3, r1
 8008b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b04:	e00a      	b.n	8008b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4908      	ldr	r1, [pc, #32]	; (8008b2c <__NVIC_SetPriority+0x50>)
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	3b04      	subs	r3, #4
 8008b14:	0112      	lsls	r2, r2, #4
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	440b      	add	r3, r1
 8008b1a:	761a      	strb	r2, [r3, #24]
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bc80      	pop	{r7}
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	e000e100 	.word	0xe000e100
 8008b2c:	e000ed00 	.word	0xe000ed00

08008b30 <NVIC_EncodePriority>:
{
 8008b30:	b480      	push	{r7}
 8008b32:	b089      	sub	sp, #36	; 0x24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	f1c3 0307 	rsb	r3, r3, #7
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	bf28      	it	cs
 8008b4e:	2304      	movcs	r3, #4
 8008b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	3304      	adds	r3, #4
 8008b56:	2b06      	cmp	r3, #6
 8008b58:	d902      	bls.n	8008b60 <NVIC_EncodePriority+0x30>
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	3b03      	subs	r3, #3
 8008b5e:	e000      	b.n	8008b62 <NVIC_EncodePriority+0x32>
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6e:	43da      	mvns	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	401a      	ands	r2, r3
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b82:	43d9      	mvns	r1, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b88:	4313      	orrs	r3, r2
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3724      	adds	r7, #36	; 0x24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ba4:	d301      	bcc.n	8008baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e00f      	b.n	8008bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008baa:	4a0a      	ldr	r2, [pc, #40]	; (8008bd4 <SysTick_Config+0x40>)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008bb2:	210f      	movs	r1, #15
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb8:	f7ff ff90 	bl	8008adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <SysTick_Config+0x40>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bc2:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <SysTick_Config+0x40>)
 8008bc4:	2207      	movs	r2, #7
 8008bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	e000e010 	.word	0xe000e010

08008bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff ff2d 	bl	8008a40 <__NVIC_SetPriorityGrouping>
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b086      	sub	sp, #24
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]
 8008bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c00:	f7ff ff42 	bl	8008a88 <__NVIC_GetPriorityGrouping>
 8008c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	68b9      	ldr	r1, [r7, #8]
 8008c0a:	6978      	ldr	r0, [r7, #20]
 8008c0c:	f7ff ff90 	bl	8008b30 <NVIC_EncodePriority>
 8008c10:	4602      	mov	r2, r0
 8008c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff ff5f 	bl	8008adc <__NVIC_SetPriority>
}
 8008c1e:	bf00      	nop
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff ff35 	bl	8008aa4 <__NVIC_EnableIRQ>
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff ffa2 	bl	8008b94 <SysTick_Config>
 8008c50:	4603      	mov	r3, r0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d008      	beq.n	8008c84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2204      	movs	r2, #4
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e020      	b.n	8008cc6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 020e 	bic.w	r2, r2, #14
 8008c92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cac:	2101      	movs	r1, #1
 8008cae:	fa01 f202 	lsl.w	r2, r1, r2
 8008cb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bc80      	pop	{r7}
 8008cce:	4770      	bx	lr

08008cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d005      	beq.n	8008cf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2204      	movs	r2, #4
 8008cec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	73fb      	strb	r3, [r7, #15]
 8008cf2:	e0d6      	b.n	8008ea2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 020e 	bic.w	r2, r2, #14
 8008d02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 0201 	bic.w	r2, r2, #1
 8008d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4b64      	ldr	r3, [pc, #400]	; (8008eac <HAL_DMA_Abort_IT+0x1dc>)
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d958      	bls.n	8008dd2 <HAL_DMA_Abort_IT+0x102>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a62      	ldr	r2, [pc, #392]	; (8008eb0 <HAL_DMA_Abort_IT+0x1e0>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d04f      	beq.n	8008dca <HAL_DMA_Abort_IT+0xfa>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a61      	ldr	r2, [pc, #388]	; (8008eb4 <HAL_DMA_Abort_IT+0x1e4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d048      	beq.n	8008dc6 <HAL_DMA_Abort_IT+0xf6>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a5f      	ldr	r2, [pc, #380]	; (8008eb8 <HAL_DMA_Abort_IT+0x1e8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d040      	beq.n	8008dc0 <HAL_DMA_Abort_IT+0xf0>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a5e      	ldr	r2, [pc, #376]	; (8008ebc <HAL_DMA_Abort_IT+0x1ec>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d038      	beq.n	8008dba <HAL_DMA_Abort_IT+0xea>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a5c      	ldr	r2, [pc, #368]	; (8008ec0 <HAL_DMA_Abort_IT+0x1f0>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d030      	beq.n	8008db4 <HAL_DMA_Abort_IT+0xe4>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a5b      	ldr	r2, [pc, #364]	; (8008ec4 <HAL_DMA_Abort_IT+0x1f4>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d028      	beq.n	8008dae <HAL_DMA_Abort_IT+0xde>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a52      	ldr	r2, [pc, #328]	; (8008eac <HAL_DMA_Abort_IT+0x1dc>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d020      	beq.n	8008da8 <HAL_DMA_Abort_IT+0xd8>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a57      	ldr	r2, [pc, #348]	; (8008ec8 <HAL_DMA_Abort_IT+0x1f8>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d019      	beq.n	8008da4 <HAL_DMA_Abort_IT+0xd4>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a55      	ldr	r2, [pc, #340]	; (8008ecc <HAL_DMA_Abort_IT+0x1fc>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d012      	beq.n	8008da0 <HAL_DMA_Abort_IT+0xd0>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a54      	ldr	r2, [pc, #336]	; (8008ed0 <HAL_DMA_Abort_IT+0x200>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d00a      	beq.n	8008d9a <HAL_DMA_Abort_IT+0xca>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a52      	ldr	r2, [pc, #328]	; (8008ed4 <HAL_DMA_Abort_IT+0x204>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d102      	bne.n	8008d94 <HAL_DMA_Abort_IT+0xc4>
 8008d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d92:	e01b      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d98:	e018      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d9e:	e015      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008da0:	2310      	movs	r3, #16
 8008da2:	e013      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e011      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dac:	e00e      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008dae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008db2:	e00b      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008db8:	e008      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dbe:	e005      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dc4:	e002      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	e000      	b.n	8008dcc <HAL_DMA_Abort_IT+0xfc>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4a42      	ldr	r2, [pc, #264]	; (8008ed8 <HAL_DMA_Abort_IT+0x208>)
 8008dce:	6053      	str	r3, [r2, #4]
 8008dd0:	e057      	b.n	8008e82 <HAL_DMA_Abort_IT+0x1b2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a36      	ldr	r2, [pc, #216]	; (8008eb0 <HAL_DMA_Abort_IT+0x1e0>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d04f      	beq.n	8008e7c <HAL_DMA_Abort_IT+0x1ac>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a34      	ldr	r2, [pc, #208]	; (8008eb4 <HAL_DMA_Abort_IT+0x1e4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d048      	beq.n	8008e78 <HAL_DMA_Abort_IT+0x1a8>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a33      	ldr	r2, [pc, #204]	; (8008eb8 <HAL_DMA_Abort_IT+0x1e8>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d040      	beq.n	8008e72 <HAL_DMA_Abort_IT+0x1a2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a31      	ldr	r2, [pc, #196]	; (8008ebc <HAL_DMA_Abort_IT+0x1ec>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d038      	beq.n	8008e6c <HAL_DMA_Abort_IT+0x19c>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a30      	ldr	r2, [pc, #192]	; (8008ec0 <HAL_DMA_Abort_IT+0x1f0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d030      	beq.n	8008e66 <HAL_DMA_Abort_IT+0x196>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a2e      	ldr	r2, [pc, #184]	; (8008ec4 <HAL_DMA_Abort_IT+0x1f4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d028      	beq.n	8008e60 <HAL_DMA_Abort_IT+0x190>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a26      	ldr	r2, [pc, #152]	; (8008eac <HAL_DMA_Abort_IT+0x1dc>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d020      	beq.n	8008e5a <HAL_DMA_Abort_IT+0x18a>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a2a      	ldr	r2, [pc, #168]	; (8008ec8 <HAL_DMA_Abort_IT+0x1f8>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d019      	beq.n	8008e56 <HAL_DMA_Abort_IT+0x186>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a29      	ldr	r2, [pc, #164]	; (8008ecc <HAL_DMA_Abort_IT+0x1fc>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d012      	beq.n	8008e52 <HAL_DMA_Abort_IT+0x182>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a27      	ldr	r2, [pc, #156]	; (8008ed0 <HAL_DMA_Abort_IT+0x200>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00a      	beq.n	8008e4c <HAL_DMA_Abort_IT+0x17c>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a26      	ldr	r2, [pc, #152]	; (8008ed4 <HAL_DMA_Abort_IT+0x204>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d102      	bne.n	8008e46 <HAL_DMA_Abort_IT+0x176>
 8008e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e44:	e01b      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e4a:	e018      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e50:	e015      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e52:	2310      	movs	r3, #16
 8008e54:	e013      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e011      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e5e:	e00e      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e64:	e00b      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e6a:	e008      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e70:	e005      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e76:	e002      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	e000      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1ae>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	4a17      	ldr	r2, [pc, #92]	; (8008edc <HAL_DMA_Abort_IT+0x20c>)
 8008e80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
    } 
  }
  return status;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40020080 	.word	0x40020080
 8008eb0:	40020008 	.word	0x40020008
 8008eb4:	4002001c 	.word	0x4002001c
 8008eb8:	40020030 	.word	0x40020030
 8008ebc:	40020044 	.word	0x40020044
 8008ec0:	40020058 	.word	0x40020058
 8008ec4:	4002006c 	.word	0x4002006c
 8008ec8:	40020408 	.word	0x40020408
 8008ecc:	4002041c 	.word	0x4002041c
 8008ed0:	40020430 	.word	0x40020430
 8008ed4:	40020444 	.word	0x40020444
 8008ed8:	40020400 	.word	0x40020400
 8008edc:	40020000 	.word	0x40020000

08008ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b08b      	sub	sp, #44	; 0x2c
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008eea:	2300      	movs	r3, #0
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ef2:	e179      	b.n	80091e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8008efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69fa      	ldr	r2, [r7, #28]
 8008f04:	4013      	ands	r3, r2
 8008f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	f040 8168 	bne.w	80091e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	4a96      	ldr	r2, [pc, #600]	; (8009170 <HAL_GPIO_Init+0x290>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d05e      	beq.n	8008fda <HAL_GPIO_Init+0xfa>
 8008f1c:	4a94      	ldr	r2, [pc, #592]	; (8009170 <HAL_GPIO_Init+0x290>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d875      	bhi.n	800900e <HAL_GPIO_Init+0x12e>
 8008f22:	4a94      	ldr	r2, [pc, #592]	; (8009174 <HAL_GPIO_Init+0x294>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d058      	beq.n	8008fda <HAL_GPIO_Init+0xfa>
 8008f28:	4a92      	ldr	r2, [pc, #584]	; (8009174 <HAL_GPIO_Init+0x294>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d86f      	bhi.n	800900e <HAL_GPIO_Init+0x12e>
 8008f2e:	4a92      	ldr	r2, [pc, #584]	; (8009178 <HAL_GPIO_Init+0x298>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d052      	beq.n	8008fda <HAL_GPIO_Init+0xfa>
 8008f34:	4a90      	ldr	r2, [pc, #576]	; (8009178 <HAL_GPIO_Init+0x298>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d869      	bhi.n	800900e <HAL_GPIO_Init+0x12e>
 8008f3a:	4a90      	ldr	r2, [pc, #576]	; (800917c <HAL_GPIO_Init+0x29c>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d04c      	beq.n	8008fda <HAL_GPIO_Init+0xfa>
 8008f40:	4a8e      	ldr	r2, [pc, #568]	; (800917c <HAL_GPIO_Init+0x29c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d863      	bhi.n	800900e <HAL_GPIO_Init+0x12e>
 8008f46:	4a8e      	ldr	r2, [pc, #568]	; (8009180 <HAL_GPIO_Init+0x2a0>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d046      	beq.n	8008fda <HAL_GPIO_Init+0xfa>
 8008f4c:	4a8c      	ldr	r2, [pc, #560]	; (8009180 <HAL_GPIO_Init+0x2a0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d85d      	bhi.n	800900e <HAL_GPIO_Init+0x12e>
 8008f52:	2b12      	cmp	r3, #18
 8008f54:	d82a      	bhi.n	8008fac <HAL_GPIO_Init+0xcc>
 8008f56:	2b12      	cmp	r3, #18
 8008f58:	d859      	bhi.n	800900e <HAL_GPIO_Init+0x12e>
 8008f5a:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <HAL_GPIO_Init+0x80>)
 8008f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f60:	08008fdb 	.word	0x08008fdb
 8008f64:	08008fb5 	.word	0x08008fb5
 8008f68:	08008fc7 	.word	0x08008fc7
 8008f6c:	08009009 	.word	0x08009009
 8008f70:	0800900f 	.word	0x0800900f
 8008f74:	0800900f 	.word	0x0800900f
 8008f78:	0800900f 	.word	0x0800900f
 8008f7c:	0800900f 	.word	0x0800900f
 8008f80:	0800900f 	.word	0x0800900f
 8008f84:	0800900f 	.word	0x0800900f
 8008f88:	0800900f 	.word	0x0800900f
 8008f8c:	0800900f 	.word	0x0800900f
 8008f90:	0800900f 	.word	0x0800900f
 8008f94:	0800900f 	.word	0x0800900f
 8008f98:	0800900f 	.word	0x0800900f
 8008f9c:	0800900f 	.word	0x0800900f
 8008fa0:	0800900f 	.word	0x0800900f
 8008fa4:	08008fbd 	.word	0x08008fbd
 8008fa8:	08008fd1 	.word	0x08008fd1
 8008fac:	4a75      	ldr	r2, [pc, #468]	; (8009184 <HAL_GPIO_Init+0x2a4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d013      	beq.n	8008fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008fb2:	e02c      	b.n	800900e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	623b      	str	r3, [r7, #32]
          break;
 8008fba:	e029      	b.n	8009010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	623b      	str	r3, [r7, #32]
          break;
 8008fc4:	e024      	b.n	8009010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	623b      	str	r3, [r7, #32]
          break;
 8008fce:	e01f      	b.n	8009010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	330c      	adds	r3, #12
 8008fd6:	623b      	str	r3, [r7, #32]
          break;
 8008fd8:	e01a      	b.n	8009010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	623b      	str	r3, [r7, #32]
          break;
 8008fe6:	e013      	b.n	8009010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d105      	bne.n	8008ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	611a      	str	r2, [r3, #16]
          break;
 8008ffa:	e009      	b.n	8009010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ffc:	2308      	movs	r3, #8
 8008ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69fa      	ldr	r2, [r7, #28]
 8009004:	615a      	str	r2, [r3, #20]
          break;
 8009006:	e003      	b.n	8009010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009008:	2300      	movs	r3, #0
 800900a:	623b      	str	r3, [r7, #32]
          break;
 800900c:	e000      	b.n	8009010 <HAL_GPIO_Init+0x130>
          break;
 800900e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2bff      	cmp	r3, #255	; 0xff
 8009014:	d801      	bhi.n	800901a <HAL_GPIO_Init+0x13a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	e001      	b.n	800901e <HAL_GPIO_Init+0x13e>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	2bff      	cmp	r3, #255	; 0xff
 8009024:	d802      	bhi.n	800902c <HAL_GPIO_Init+0x14c>
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	e002      	b.n	8009032 <HAL_GPIO_Init+0x152>
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	3b08      	subs	r3, #8
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	210f      	movs	r1, #15
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	fa01 f303 	lsl.w	r3, r1, r3
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	6a39      	ldr	r1, [r7, #32]
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	fa01 f303 	lsl.w	r3, r1, r3
 800904c:	431a      	orrs	r2, r3
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 80c1 	beq.w	80091e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009060:	4b49      	ldr	r3, [pc, #292]	; (8009188 <HAL_GPIO_Init+0x2a8>)
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	4a48      	ldr	r2, [pc, #288]	; (8009188 <HAL_GPIO_Init+0x2a8>)
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	6193      	str	r3, [r2, #24]
 800906c:	4b46      	ldr	r3, [pc, #280]	; (8009188 <HAL_GPIO_Init+0x2a8>)
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009078:	4a44      	ldr	r2, [pc, #272]	; (800918c <HAL_GPIO_Init+0x2ac>)
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	089b      	lsrs	r3, r3, #2
 800907e:	3302      	adds	r3, #2
 8009080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	220f      	movs	r2, #15
 8009090:	fa02 f303 	lsl.w	r3, r2, r3
 8009094:	43db      	mvns	r3, r3
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4013      	ands	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a3c      	ldr	r2, [pc, #240]	; (8009190 <HAL_GPIO_Init+0x2b0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d01f      	beq.n	80090e4 <HAL_GPIO_Init+0x204>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a3b      	ldr	r2, [pc, #236]	; (8009194 <HAL_GPIO_Init+0x2b4>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d019      	beq.n	80090e0 <HAL_GPIO_Init+0x200>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a3a      	ldr	r2, [pc, #232]	; (8009198 <HAL_GPIO_Init+0x2b8>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d013      	beq.n	80090dc <HAL_GPIO_Init+0x1fc>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a39      	ldr	r2, [pc, #228]	; (800919c <HAL_GPIO_Init+0x2bc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00d      	beq.n	80090d8 <HAL_GPIO_Init+0x1f8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a38      	ldr	r2, [pc, #224]	; (80091a0 <HAL_GPIO_Init+0x2c0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d007      	beq.n	80090d4 <HAL_GPIO_Init+0x1f4>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a37      	ldr	r2, [pc, #220]	; (80091a4 <HAL_GPIO_Init+0x2c4>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d101      	bne.n	80090d0 <HAL_GPIO_Init+0x1f0>
 80090cc:	2305      	movs	r3, #5
 80090ce:	e00a      	b.n	80090e6 <HAL_GPIO_Init+0x206>
 80090d0:	2306      	movs	r3, #6
 80090d2:	e008      	b.n	80090e6 <HAL_GPIO_Init+0x206>
 80090d4:	2304      	movs	r3, #4
 80090d6:	e006      	b.n	80090e6 <HAL_GPIO_Init+0x206>
 80090d8:	2303      	movs	r3, #3
 80090da:	e004      	b.n	80090e6 <HAL_GPIO_Init+0x206>
 80090dc:	2302      	movs	r3, #2
 80090de:	e002      	b.n	80090e6 <HAL_GPIO_Init+0x206>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <HAL_GPIO_Init+0x206>
 80090e4:	2300      	movs	r3, #0
 80090e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e8:	f002 0203 	and.w	r2, r2, #3
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	4093      	lsls	r3, r2
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80090f6:	4925      	ldr	r1, [pc, #148]	; (800918c <HAL_GPIO_Init+0x2ac>)
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	089b      	lsrs	r3, r3, #2
 80090fc:	3302      	adds	r3, #2
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d006      	beq.n	800911e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009110:	4b25      	ldr	r3, [pc, #148]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	4924      	ldr	r1, [pc, #144]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	4313      	orrs	r3, r2
 800911a:	608b      	str	r3, [r1, #8]
 800911c:	e006      	b.n	800912c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800911e:	4b22      	ldr	r3, [pc, #136]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	43db      	mvns	r3, r3
 8009126:	4920      	ldr	r1, [pc, #128]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 8009128:	4013      	ands	r3, r2
 800912a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d006      	beq.n	8009146 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	491a      	ldr	r1, [pc, #104]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	4313      	orrs	r3, r2
 8009142:	60cb      	str	r3, [r1, #12]
 8009144:	e006      	b.n	8009154 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009146:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	43db      	mvns	r3, r3
 800914e:	4916      	ldr	r1, [pc, #88]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 8009150:	4013      	ands	r3, r2
 8009152:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d025      	beq.n	80091ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009160:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	4910      	ldr	r1, [pc, #64]	; (80091a8 <HAL_GPIO_Init+0x2c8>)
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	4313      	orrs	r3, r2
 800916a:	604b      	str	r3, [r1, #4]
 800916c:	e025      	b.n	80091ba <HAL_GPIO_Init+0x2da>
 800916e:	bf00      	nop
 8009170:	10320000 	.word	0x10320000
 8009174:	10310000 	.word	0x10310000
 8009178:	10220000 	.word	0x10220000
 800917c:	10210000 	.word	0x10210000
 8009180:	10120000 	.word	0x10120000
 8009184:	10110000 	.word	0x10110000
 8009188:	40021000 	.word	0x40021000
 800918c:	40010000 	.word	0x40010000
 8009190:	40010800 	.word	0x40010800
 8009194:	40010c00 	.word	0x40010c00
 8009198:	40011000 	.word	0x40011000
 800919c:	40011400 	.word	0x40011400
 80091a0:	40011800 	.word	0x40011800
 80091a4:	40011c00 	.word	0x40011c00
 80091a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80091ac:	4b15      	ldr	r3, [pc, #84]	; (8009204 <HAL_GPIO_Init+0x324>)
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	43db      	mvns	r3, r3
 80091b4:	4913      	ldr	r1, [pc, #76]	; (8009204 <HAL_GPIO_Init+0x324>)
 80091b6:	4013      	ands	r3, r2
 80091b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d006      	beq.n	80091d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80091c6:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <HAL_GPIO_Init+0x324>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	490e      	ldr	r1, [pc, #56]	; (8009204 <HAL_GPIO_Init+0x324>)
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	600b      	str	r3, [r1, #0]
 80091d2:	e006      	b.n	80091e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80091d4:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <HAL_GPIO_Init+0x324>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	43db      	mvns	r3, r3
 80091dc:	4909      	ldr	r1, [pc, #36]	; (8009204 <HAL_GPIO_Init+0x324>)
 80091de:	4013      	ands	r3, r2
 80091e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	3301      	adds	r3, #1
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	fa22 f303 	lsr.w	r3, r2, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f47f ae7e 	bne.w	8008ef4 <HAL_GPIO_Init+0x14>
  }
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	372c      	adds	r7, #44	; 0x2c
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr
 8009204:	40010400 	.word	0x40010400

08009208 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009208:	b480      	push	{r7}
 800920a:	b089      	sub	sp, #36	; 0x24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009212:	2300      	movs	r3, #0
 8009214:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009216:	e0a6      	b.n	8009366 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009218:	2201      	movs	r2, #1
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	fa02 f303 	lsl.w	r3, r2, r3
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	4013      	ands	r3, r2
 8009224:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8099 	beq.w	8009360 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800922e:	4a54      	ldr	r2, [pc, #336]	; (8009380 <HAL_GPIO_DeInit+0x178>)
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	089b      	lsrs	r3, r3, #2
 8009234:	3302      	adds	r3, #2
 8009236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800923a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	220f      	movs	r2, #15
 8009246:	fa02 f303 	lsl.w	r3, r2, r3
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	4013      	ands	r3, r2
 800924e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a4c      	ldr	r2, [pc, #304]	; (8009384 <HAL_GPIO_DeInit+0x17c>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d01f      	beq.n	8009298 <HAL_GPIO_DeInit+0x90>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a4b      	ldr	r2, [pc, #300]	; (8009388 <HAL_GPIO_DeInit+0x180>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d019      	beq.n	8009294 <HAL_GPIO_DeInit+0x8c>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a4a      	ldr	r2, [pc, #296]	; (800938c <HAL_GPIO_DeInit+0x184>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d013      	beq.n	8009290 <HAL_GPIO_DeInit+0x88>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a49      	ldr	r2, [pc, #292]	; (8009390 <HAL_GPIO_DeInit+0x188>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00d      	beq.n	800928c <HAL_GPIO_DeInit+0x84>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a48      	ldr	r2, [pc, #288]	; (8009394 <HAL_GPIO_DeInit+0x18c>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d007      	beq.n	8009288 <HAL_GPIO_DeInit+0x80>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a47      	ldr	r2, [pc, #284]	; (8009398 <HAL_GPIO_DeInit+0x190>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d101      	bne.n	8009284 <HAL_GPIO_DeInit+0x7c>
 8009280:	2305      	movs	r3, #5
 8009282:	e00a      	b.n	800929a <HAL_GPIO_DeInit+0x92>
 8009284:	2306      	movs	r3, #6
 8009286:	e008      	b.n	800929a <HAL_GPIO_DeInit+0x92>
 8009288:	2304      	movs	r3, #4
 800928a:	e006      	b.n	800929a <HAL_GPIO_DeInit+0x92>
 800928c:	2303      	movs	r3, #3
 800928e:	e004      	b.n	800929a <HAL_GPIO_DeInit+0x92>
 8009290:	2302      	movs	r3, #2
 8009292:	e002      	b.n	800929a <HAL_GPIO_DeInit+0x92>
 8009294:	2301      	movs	r3, #1
 8009296:	e000      	b.n	800929a <HAL_GPIO_DeInit+0x92>
 8009298:	2300      	movs	r3, #0
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	f002 0203 	and.w	r2, r2, #3
 80092a0:	0092      	lsls	r2, r2, #2
 80092a2:	4093      	lsls	r3, r2
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d132      	bne.n	8009310 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80092aa:	4b3c      	ldr	r3, [pc, #240]	; (800939c <HAL_GPIO_DeInit+0x194>)
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	43db      	mvns	r3, r3
 80092b2:	493a      	ldr	r1, [pc, #232]	; (800939c <HAL_GPIO_DeInit+0x194>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80092b8:	4b38      	ldr	r3, [pc, #224]	; (800939c <HAL_GPIO_DeInit+0x194>)
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	43db      	mvns	r3, r3
 80092c0:	4936      	ldr	r1, [pc, #216]	; (800939c <HAL_GPIO_DeInit+0x194>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80092c6:	4b35      	ldr	r3, [pc, #212]	; (800939c <HAL_GPIO_DeInit+0x194>)
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	43db      	mvns	r3, r3
 80092ce:	4933      	ldr	r1, [pc, #204]	; (800939c <HAL_GPIO_DeInit+0x194>)
 80092d0:	4013      	ands	r3, r2
 80092d2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80092d4:	4b31      	ldr	r3, [pc, #196]	; (800939c <HAL_GPIO_DeInit+0x194>)
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	43db      	mvns	r3, r3
 80092dc:	492f      	ldr	r1, [pc, #188]	; (800939c <HAL_GPIO_DeInit+0x194>)
 80092de:	4013      	ands	r3, r2
 80092e0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	220f      	movs	r2, #15
 80092ec:	fa02 f303 	lsl.w	r3, r2, r3
 80092f0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80092f2:	4a23      	ldr	r2, [pc, #140]	; (8009380 <HAL_GPIO_DeInit+0x178>)
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	089b      	lsrs	r3, r3, #2
 80092f8:	3302      	adds	r3, #2
 80092fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	43da      	mvns	r2, r3
 8009302:	481f      	ldr	r0, [pc, #124]	; (8009380 <HAL_GPIO_DeInit+0x178>)
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	089b      	lsrs	r3, r3, #2
 8009308:	400a      	ands	r2, r1
 800930a:	3302      	adds	r3, #2
 800930c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	2bff      	cmp	r3, #255	; 0xff
 8009314:	d801      	bhi.n	800931a <HAL_GPIO_DeInit+0x112>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	e001      	b.n	800931e <HAL_GPIO_DeInit+0x116>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3304      	adds	r3, #4
 800931e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2bff      	cmp	r3, #255	; 0xff
 8009324:	d802      	bhi.n	800932c <HAL_GPIO_DeInit+0x124>
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	e002      	b.n	8009332 <HAL_GPIO_DeInit+0x12a>
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	3b08      	subs	r3, #8
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	210f      	movs	r1, #15
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	fa01 f303 	lsl.w	r3, r1, r3
 8009340:	43db      	mvns	r3, r3
 8009342:	401a      	ands	r2, r3
 8009344:	2104      	movs	r1, #4
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	fa01 f303 	lsl.w	r3, r1, r3
 800934c:	431a      	orrs	r2, r3
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	43db      	mvns	r3, r3
 800935a:	401a      	ands	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	3301      	adds	r3, #1
 8009364:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	fa22 f303 	lsr.w	r3, r2, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	f47f af52 	bne.w	8009218 <HAL_GPIO_DeInit+0x10>
  }
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	3724      	adds	r7, #36	; 0x24
 800937a:	46bd      	mov	sp, r7
 800937c:	bc80      	pop	{r7}
 800937e:	4770      	bx	lr
 8009380:	40010000 	.word	0x40010000
 8009384:	40010800 	.word	0x40010800
 8009388:	40010c00 	.word	0x40010c00
 800938c:	40011000 	.word	0x40011000
 8009390:	40011400 	.word	0x40011400
 8009394:	40011800 	.word	0x40011800
 8009398:	40011c00 	.word	0x40011c00
 800939c:	40010400 	.word	0x40010400

080093a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	887b      	ldrh	r3, [r7, #2]
 80093b2:	4013      	ands	r3, r2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093b8:	2301      	movs	r3, #1
 80093ba:	73fb      	strb	r3, [r7, #15]
 80093bc:	e001      	b.n	80093c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bc80      	pop	{r7}
 80093cc:	4770      	bx	lr

080093ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	807b      	strh	r3, [r7, #2]
 80093da:	4613      	mov	r3, r2
 80093dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093de:	787b      	ldrb	r3, [r7, #1]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093e4:	887a      	ldrh	r2, [r7, #2]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093ea:	e003      	b.n	80093f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093ec:	887b      	ldrh	r3, [r7, #2]
 80093ee:	041a      	lsls	r2, r3, #16
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	611a      	str	r2, [r3, #16]
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bc80      	pop	{r7}
 80093fc:	4770      	bx	lr

080093fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093fe:	b480      	push	{r7}
 8009400:	b085      	sub	sp, #20
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009410:	887a      	ldrh	r2, [r7, #2]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4013      	ands	r3, r2
 8009416:	041a      	lsls	r2, r3, #16
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	43d9      	mvns	r1, r3
 800941c:	887b      	ldrh	r3, [r7, #2]
 800941e:	400b      	ands	r3, r1
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	611a      	str	r2, [r3, #16]
}
 8009426:	bf00      	nop
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	bc80      	pop	{r7}
 800942e:	4770      	bx	lr

08009430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e12b      	b.n	800969a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7fe fff8 	bl	800844c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2224      	movs	r2, #36	; 0x24
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0201 	bic.w	r2, r2, #1
 8009472:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009482:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009492:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009494:	f001 fdb8 	bl	800b008 <HAL_RCC_GetPCLK1Freq>
 8009498:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	4a81      	ldr	r2, [pc, #516]	; (80096a4 <HAL_I2C_Init+0x274>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d807      	bhi.n	80094b4 <HAL_I2C_Init+0x84>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4a80      	ldr	r2, [pc, #512]	; (80096a8 <HAL_I2C_Init+0x278>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	bf94      	ite	ls
 80094ac:	2301      	movls	r3, #1
 80094ae:	2300      	movhi	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	e006      	b.n	80094c2 <HAL_I2C_Init+0x92>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4a7d      	ldr	r2, [pc, #500]	; (80096ac <HAL_I2C_Init+0x27c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	bf94      	ite	ls
 80094bc:	2301      	movls	r3, #1
 80094be:	2300      	movhi	r3, #0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e0e7      	b.n	800969a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4a78      	ldr	r2, [pc, #480]	; (80096b0 <HAL_I2C_Init+0x280>)
 80094ce:	fba2 2303 	umull	r2, r3, r2, r3
 80094d2:	0c9b      	lsrs	r3, r3, #18
 80094d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	4a6a      	ldr	r2, [pc, #424]	; (80096a4 <HAL_I2C_Init+0x274>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d802      	bhi.n	8009504 <HAL_I2C_Init+0xd4>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	3301      	adds	r3, #1
 8009502:	e009      	b.n	8009518 <HAL_I2C_Init+0xe8>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800950a:	fb02 f303 	mul.w	r3, r2, r3
 800950e:	4a69      	ldr	r2, [pc, #420]	; (80096b4 <HAL_I2C_Init+0x284>)
 8009510:	fba2 2303 	umull	r2, r3, r2, r3
 8009514:	099b      	lsrs	r3, r3, #6
 8009516:	3301      	adds	r3, #1
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6812      	ldr	r2, [r2, #0]
 800951c:	430b      	orrs	r3, r1
 800951e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800952a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	495c      	ldr	r1, [pc, #368]	; (80096a4 <HAL_I2C_Init+0x274>)
 8009534:	428b      	cmp	r3, r1
 8009536:	d819      	bhi.n	800956c <HAL_I2C_Init+0x13c>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	1e59      	subs	r1, r3, #1
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	fbb1 f3f3 	udiv	r3, r1, r3
 8009546:	1c59      	adds	r1, r3, #1
 8009548:	f640 73fc 	movw	r3, #4092	; 0xffc
 800954c:	400b      	ands	r3, r1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <HAL_I2C_Init+0x138>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	1e59      	subs	r1, r3, #1
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	005b      	lsls	r3, r3, #1
 800955c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009560:	3301      	adds	r3, #1
 8009562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009566:	e051      	b.n	800960c <HAL_I2C_Init+0x1dc>
 8009568:	2304      	movs	r3, #4
 800956a:	e04f      	b.n	800960c <HAL_I2C_Init+0x1dc>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d111      	bne.n	8009598 <HAL_I2C_Init+0x168>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	1e58      	subs	r0, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6859      	ldr	r1, [r3, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	440b      	add	r3, r1
 8009582:	fbb0 f3f3 	udiv	r3, r0, r3
 8009586:	3301      	adds	r3, #1
 8009588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800958c:	2b00      	cmp	r3, #0
 800958e:	bf0c      	ite	eq
 8009590:	2301      	moveq	r3, #1
 8009592:	2300      	movne	r3, #0
 8009594:	b2db      	uxtb	r3, r3
 8009596:	e012      	b.n	80095be <HAL_I2C_Init+0x18e>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	1e58      	subs	r0, r3, #1
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6859      	ldr	r1, [r3, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	0099      	lsls	r1, r3, #2
 80095a8:	440b      	add	r3, r1
 80095aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80095ae:	3301      	adds	r3, #1
 80095b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bf0c      	ite	eq
 80095b8:	2301      	moveq	r3, #1
 80095ba:	2300      	movne	r3, #0
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_I2C_Init+0x196>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e022      	b.n	800960c <HAL_I2C_Init+0x1dc>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10e      	bne.n	80095ec <HAL_I2C_Init+0x1bc>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	1e58      	subs	r0, r3, #1
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6859      	ldr	r1, [r3, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	005b      	lsls	r3, r3, #1
 80095da:	440b      	add	r3, r1
 80095dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80095e0:	3301      	adds	r3, #1
 80095e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ea:	e00f      	b.n	800960c <HAL_I2C_Init+0x1dc>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	1e58      	subs	r0, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6859      	ldr	r1, [r3, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	0099      	lsls	r1, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009602:	3301      	adds	r3, #1
 8009604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	6809      	ldr	r1, [r1, #0]
 8009610:	4313      	orrs	r3, r2
 8009612:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	69da      	ldr	r2, [r3, #28]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	431a      	orrs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800963a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6911      	ldr	r1, [r2, #16]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	68d2      	ldr	r2, [r2, #12]
 8009646:	4311      	orrs	r1, r2
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6812      	ldr	r2, [r2, #0]
 800964c:	430b      	orrs	r3, r1
 800964e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	695a      	ldr	r2, [r3, #20]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	430a      	orrs	r2, r1
 800966a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0201 	orr.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	000186a0 	.word	0x000186a0
 80096a8:	001e847f 	.word	0x001e847f
 80096ac:	003d08ff 	.word	0x003d08ff
 80096b0:	431bde83 	.word	0x431bde83
 80096b4:	10624dd3 	.word	0x10624dd3

080096b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e021      	b.n	800970e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2224      	movs	r2, #36	; 0x24
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0201 	bic.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fe fef0 	bl	80084c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af02      	add	r7, sp, #8
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	607a      	str	r2, [r7, #4]
 8009722:	461a      	mov	r2, r3
 8009724:	460b      	mov	r3, r1
 8009726:	817b      	strh	r3, [r7, #10]
 8009728:	4613      	mov	r3, r2
 800972a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800972c:	f7ff f85e 	bl	80087ec <HAL_GetTick>
 8009730:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b20      	cmp	r3, #32
 800973c:	f040 80e0 	bne.w	8009900 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	2319      	movs	r3, #25
 8009746:	2201      	movs	r2, #1
 8009748:	4970      	ldr	r1, [pc, #448]	; (800990c <HAL_I2C_Master_Transmit+0x1f4>)
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fe5c 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009756:	2302      	movs	r3, #2
 8009758:	e0d3      	b.n	8009902 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009760:	2b01      	cmp	r3, #1
 8009762:	d101      	bne.n	8009768 <HAL_I2C_Master_Transmit+0x50>
 8009764:	2302      	movs	r3, #2
 8009766:	e0cc      	b.n	8009902 <HAL_I2C_Master_Transmit+0x1ea>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b01      	cmp	r3, #1
 800977c:	d007      	beq.n	800978e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 0201 	orr.w	r2, r2, #1
 800978c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800979c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2221      	movs	r2, #33	; 0x21
 80097a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2210      	movs	r2, #16
 80097aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	893a      	ldrh	r2, [r7, #8]
 80097be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4a50      	ldr	r2, [pc, #320]	; (8009910 <HAL_I2C_Master_Transmit+0x1f8>)
 80097ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097d0:	8979      	ldrh	r1, [r7, #10]
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	6a3a      	ldr	r2, [r7, #32]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 fc16 	bl	800a008 <I2C_MasterRequestWrite>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e08d      	b.n	8009902 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097e6:	2300      	movs	r3, #0
 80097e8:	613b      	str	r3, [r7, #16]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	613b      	str	r3, [r7, #16]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80097fc:	e066      	b.n	80098cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	6a39      	ldr	r1, [r7, #32]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 ff1a 	bl	800a63c <I2C_WaitOnTXEFlagUntilTimeout>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00d      	beq.n	800982a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009812:	2b04      	cmp	r3, #4
 8009814:	d107      	bne.n	8009826 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009824:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e06b      	b.n	8009902 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	781a      	ldrb	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009844:	b29b      	uxth	r3, r3
 8009846:	3b01      	subs	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009852:	3b01      	subs	r3, #1
 8009854:	b29a      	uxth	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	f003 0304 	and.w	r3, r3, #4
 8009864:	2b04      	cmp	r3, #4
 8009866:	d11b      	bne.n	80098a0 <HAL_I2C_Master_Transmit+0x188>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800986c:	2b00      	cmp	r3, #0
 800986e:	d017      	beq.n	80098a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	781a      	ldrb	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009898:	3b01      	subs	r3, #1
 800989a:	b29a      	uxth	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	6a39      	ldr	r1, [r7, #32]
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 ff11 	bl	800a6cc <I2C_WaitOnBTFFlagUntilTimeout>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00d      	beq.n	80098cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d107      	bne.n	80098c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e01a      	b.n	8009902 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d194      	bne.n	80097fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	e000      	b.n	8009902 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009900:	2302      	movs	r3, #2
  }
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	00100002 	.word	0x00100002
 8009910:	ffff0000 	.word	0xffff0000

08009914 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af02      	add	r7, sp, #8
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	4608      	mov	r0, r1
 800991e:	4611      	mov	r1, r2
 8009920:	461a      	mov	r2, r3
 8009922:	4603      	mov	r3, r0
 8009924:	817b      	strh	r3, [r7, #10]
 8009926:	460b      	mov	r3, r1
 8009928:	813b      	strh	r3, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800992e:	f7fe ff5d 	bl	80087ec <HAL_GetTick>
 8009932:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b20      	cmp	r3, #32
 800993e:	f040 80d9 	bne.w	8009af4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	2319      	movs	r3, #25
 8009948:	2201      	movs	r2, #1
 800994a:	496d      	ldr	r1, [pc, #436]	; (8009b00 <HAL_I2C_Mem_Write+0x1ec>)
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 fd5b 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009958:	2302      	movs	r3, #2
 800995a:	e0cc      	b.n	8009af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009962:	2b01      	cmp	r3, #1
 8009964:	d101      	bne.n	800996a <HAL_I2C_Mem_Write+0x56>
 8009966:	2302      	movs	r3, #2
 8009968:	e0c5      	b.n	8009af6 <HAL_I2C_Mem_Write+0x1e2>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b01      	cmp	r3, #1
 800997e:	d007      	beq.n	8009990 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 0201 	orr.w	r2, r2, #1
 800998e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800999e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2221      	movs	r2, #33	; 0x21
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2240      	movs	r2, #64	; 0x40
 80099ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a3a      	ldr	r2, [r7, #32]
 80099ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4a4d      	ldr	r2, [pc, #308]	; (8009b04 <HAL_I2C_Mem_Write+0x1f0>)
 80099d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099d2:	88f8      	ldrh	r0, [r7, #6]
 80099d4:	893a      	ldrh	r2, [r7, #8]
 80099d6:	8979      	ldrh	r1, [r7, #10]
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	9301      	str	r3, [sp, #4]
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	4603      	mov	r3, r0
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 fb92 	bl	800a10c <I2C_RequestMemoryWrite>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d052      	beq.n	8009a94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e081      	b.n	8009af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fe20 	bl	800a63c <I2C_WaitOnTXEFlagUntilTimeout>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00d      	beq.n	8009a1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d107      	bne.n	8009a1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e06b      	b.n	8009af6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	781a      	ldrb	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	d11b      	bne.n	8009a94 <HAL_I2C_Mem_Write+0x180>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d017      	beq.n	8009a94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	781a      	ldrb	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1aa      	bne.n	80099f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 fe13 	bl	800a6cc <I2C_WaitOnBTFFlagUntilTimeout>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00d      	beq.n	8009ac8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d107      	bne.n	8009ac4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ac2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e016      	b.n	8009af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2220      	movs	r2, #32
 8009adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	e000      	b.n	8009af6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009af4:	2302      	movs	r3, #2
  }
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	00100002 	.word	0x00100002
 8009b04:	ffff0000 	.word	0xffff0000

08009b08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	; 0x30
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	817b      	strh	r3, [r7, #10]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	813b      	strh	r3, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b26:	f7fe fe61 	bl	80087ec <HAL_GetTick>
 8009b2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	f040 8244 	bne.w	8009fc2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	2319      	movs	r3, #25
 8009b40:	2201      	movs	r2, #1
 8009b42:	4982      	ldr	r1, [pc, #520]	; (8009d4c <HAL_I2C_Mem_Read+0x244>)
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 fc5f 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b50:	2302      	movs	r3, #2
 8009b52:	e237      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d101      	bne.n	8009b62 <HAL_I2C_Mem_Read+0x5a>
 8009b5e:	2302      	movs	r3, #2
 8009b60:	e230      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d007      	beq.n	8009b88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f042 0201 	orr.w	r2, r2, #1
 8009b86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2222      	movs	r2, #34	; 0x22
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2240      	movs	r2, #64	; 0x40
 8009ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4a62      	ldr	r2, [pc, #392]	; (8009d50 <HAL_I2C_Mem_Read+0x248>)
 8009bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bca:	88f8      	ldrh	r0, [r7, #6]
 8009bcc:	893a      	ldrh	r2, [r7, #8]
 8009bce:	8979      	ldrh	r1, [r7, #10]
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	4603      	mov	r3, r0
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 fb2c 	bl	800a238 <I2C_RequestMemoryRead>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e1ec      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d113      	bne.n	8009c1a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61fb      	str	r3, [r7, #28]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	61fb      	str	r3, [r7, #28]
 8009c06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	e1c0      	b.n	8009f9c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d11e      	bne.n	8009c60 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c32:	b672      	cpsid	i
}
 8009c34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c36:	2300      	movs	r3, #0
 8009c38:	61bb      	str	r3, [r7, #24]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	61bb      	str	r3, [r7, #24]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c5c:	b662      	cpsie	i
}
 8009c5e:	e035      	b.n	8009ccc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d11e      	bne.n	8009ca6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c78:	b672      	cpsid	i
}
 8009c7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009ca2:	b662      	cpsie	i
}
 8009ca4:	e012      	b.n	8009ccc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cb4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	613b      	str	r3, [r7, #16]
 8009cca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009ccc:	e166      	b.n	8009f9c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	f200 811f 	bhi.w	8009f16 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d123      	bne.n	8009d28 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fd39 	bl	800a75c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e167      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691a      	ldr	r2, [r3, #16]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	b2d2      	uxtb	r2, r2
 8009d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d26:	e139      	b.n	8009f9c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d152      	bne.n	8009dd6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	2200      	movs	r2, #0
 8009d38:	4906      	ldr	r1, [pc, #24]	; (8009d54 <HAL_I2C_Mem_Read+0x24c>)
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 fb64 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d008      	beq.n	8009d58 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e13c      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
 8009d4a:	bf00      	nop
 8009d4c:	00100002 	.word	0x00100002
 8009d50:	ffff0000 	.word	0xffff0000
 8009d54:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d58:	b672      	cpsid	i
}
 8009d5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	691a      	ldr	r2, [r3, #16]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	3b01      	subs	r3, #1
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d9e:	b662      	cpsie	i
}
 8009da0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	691a      	ldr	r2, [r3, #16]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dac:	b2d2      	uxtb	r2, r2
 8009dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009dd4:	e0e2      	b.n	8009f9c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ddc:	2200      	movs	r2, #0
 8009dde:	497b      	ldr	r1, [pc, #492]	; (8009fcc <HAL_I2C_Mem_Read+0x4c4>)
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 fb11 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e0e9      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e00:	b672      	cpsid	i
}
 8009e02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	691a      	ldr	r2, [r3, #16]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	b2d2      	uxtb	r2, r2
 8009e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e36:	4b66      	ldr	r3, [pc, #408]	; (8009fd0 <HAL_I2C_Mem_Read+0x4c8>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	08db      	lsrs	r3, r3, #3
 8009e3c:	4a65      	ldr	r2, [pc, #404]	; (8009fd4 <HAL_I2C_Mem_Read+0x4cc>)
 8009e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e42:	0a1a      	lsrs	r2, r3, #8
 8009e44:	4613      	mov	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	00da      	lsls	r2, r3, #3
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d118      	bne.n	8009e8e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	f043 0220 	orr.w	r2, r3, #32
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e7e:	b662      	cpsie	i
}
 8009e80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e09a      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d1d9      	bne.n	8009e50 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	691a      	ldr	r2, [r3, #16]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009ede:	b662      	cpsie	i
}
 8009ee0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	691a      	ldr	r2, [r3, #16]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	b2d2      	uxtb	r2, r2
 8009eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009efe:	3b01      	subs	r3, #1
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f14:	e042      	b.n	8009f9c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 fc1e 	bl	800a75c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e04c      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691a      	ldr	r2, [r3, #16]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	b2d2      	uxtb	r2, r2
 8009f36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f46:	3b01      	subs	r3, #1
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b04      	cmp	r3, #4
 8009f68:	d118      	bne.n	8009f9c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	691a      	ldr	r2, [r3, #16]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	b2d2      	uxtb	r2, r2
 8009f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f47f ae94 	bne.w	8009cce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2220      	movs	r2, #32
 8009faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e000      	b.n	8009fc4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009fc2:	2302      	movs	r3, #2
  }
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3728      	adds	r7, #40	; 0x28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	00010004 	.word	0x00010004
 8009fd0:	200000b0 	.word	0x200000b0
 8009fd4:	14f8b589 	.word	0x14f8b589

08009fd8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe6:	b2db      	uxtb	r3, r3
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bc80      	pop	{r7}
 8009ff0:	4770      	bx	lr

08009ff2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	bc80      	pop	{r7}
 800a006:	4770      	bx	lr

0800a008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af02      	add	r7, sp, #8
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	607a      	str	r2, [r7, #4]
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	460b      	mov	r3, r1
 800a016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b08      	cmp	r3, #8
 800a022:	d006      	beq.n	800a032 <I2C_MasterRequestWrite+0x2a>
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d003      	beq.n	800a032 <I2C_MasterRequestWrite+0x2a>
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a030:	d108      	bne.n	800a044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	e00b      	b.n	800a05c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a048:	2b12      	cmp	r3, #18
 800a04a:	d107      	bne.n	800a05c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a05a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f9cd 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00d      	beq.n	800a090 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a07e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a082:	d103      	bne.n	800a08c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a08a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e035      	b.n	800a0fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a098:	d108      	bne.n	800a0ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a09a:	897b      	ldrh	r3, [r7, #10]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	461a      	mov	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0a8:	611a      	str	r2, [r3, #16]
 800a0aa:	e01b      	b.n	800a0e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0ac:	897b      	ldrh	r3, [r7, #10]
 800a0ae:	11db      	asrs	r3, r3, #7
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	f003 0306 	and.w	r3, r3, #6
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f063 030f 	orn	r3, r3, #15
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	490e      	ldr	r1, [pc, #56]	; (800a104 <I2C_MasterRequestWrite+0xfc>)
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fa16 	bl	800a4fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e010      	b.n	800a0fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0da:	897b      	ldrh	r3, [r7, #10]
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	4907      	ldr	r1, [pc, #28]	; (800a108 <I2C_MasterRequestWrite+0x100>)
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 fa06 	bl	800a4fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	00010008 	.word	0x00010008
 800a108:	00010002 	.word	0x00010002

0800a10c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af02      	add	r7, sp, #8
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	4608      	mov	r0, r1
 800a116:	4611      	mov	r1, r2
 800a118:	461a      	mov	r2, r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	817b      	strh	r3, [r7, #10]
 800a11e:	460b      	mov	r3, r1
 800a120:	813b      	strh	r3, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f000 f960 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00d      	beq.n	800a16a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a15c:	d103      	bne.n	800a166 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e05f      	b.n	800a22a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a16a:	897b      	ldrh	r3, [r7, #10]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	461a      	mov	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a178:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	6a3a      	ldr	r2, [r7, #32]
 800a17e:	492d      	ldr	r1, [pc, #180]	; (800a234 <I2C_RequestMemoryWrite+0x128>)
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f9bb 	bl	800a4fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e04c      	b.n	800a22a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a190:	2300      	movs	r3, #0
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a8:	6a39      	ldr	r1, [r7, #32]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 fa46 	bl	800a63c <I2C_WaitOnTXEFlagUntilTimeout>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00d      	beq.n	800a1d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	d107      	bne.n	800a1ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e02b      	b.n	800a22a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1d2:	88fb      	ldrh	r3, [r7, #6]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d105      	bne.n	800a1e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1d8:	893b      	ldrh	r3, [r7, #8]
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	611a      	str	r2, [r3, #16]
 800a1e2:	e021      	b.n	800a228 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1e4:	893b      	ldrh	r3, [r7, #8]
 800a1e6:	0a1b      	lsrs	r3, r3, #8
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f4:	6a39      	ldr	r1, [r7, #32]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 fa20 	bl	800a63c <I2C_WaitOnTXEFlagUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00d      	beq.n	800a21e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	2b04      	cmp	r3, #4
 800a208:	d107      	bne.n	800a21a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a218:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e005      	b.n	800a22a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a21e:	893b      	ldrh	r3, [r7, #8]
 800a220:	b2da      	uxtb	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	00010002 	.word	0x00010002

0800a238 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af02      	add	r7, sp, #8
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	4608      	mov	r0, r1
 800a242:	4611      	mov	r1, r2
 800a244:	461a      	mov	r2, r3
 800a246:	4603      	mov	r3, r0
 800a248:	817b      	strh	r3, [r7, #10]
 800a24a:	460b      	mov	r3, r1
 800a24c:	813b      	strh	r3, [r7, #8]
 800a24e:	4613      	mov	r3, r2
 800a250:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a260:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	2200      	movs	r2, #0
 800a27a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 f8c2 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00d      	beq.n	800a2a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a298:	d103      	bne.n	800a2a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e0aa      	b.n	800a3fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2a6:	897b      	ldrh	r3, [r7, #10]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	6a3a      	ldr	r2, [r7, #32]
 800a2ba:	4952      	ldr	r1, [pc, #328]	; (800a404 <I2C_RequestMemoryRead+0x1cc>)
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 f91d 	bl	800a4fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e097      	b.n	800a3fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e4:	6a39      	ldr	r1, [r7, #32]
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 f9a8 	bl	800a63c <I2C_WaitOnTXEFlagUntilTimeout>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00d      	beq.n	800a30e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d107      	bne.n	800a30a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e076      	b.n	800a3fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d105      	bne.n	800a320 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a314:	893b      	ldrh	r3, [r7, #8]
 800a316:	b2da      	uxtb	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	611a      	str	r2, [r3, #16]
 800a31e:	e021      	b.n	800a364 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a320:	893b      	ldrh	r3, [r7, #8]
 800a322:	0a1b      	lsrs	r3, r3, #8
 800a324:	b29b      	uxth	r3, r3
 800a326:	b2da      	uxtb	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a32e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a330:	6a39      	ldr	r1, [r7, #32]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 f982 	bl	800a63c <I2C_WaitOnTXEFlagUntilTimeout>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00d      	beq.n	800a35a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	2b04      	cmp	r3, #4
 800a344:	d107      	bne.n	800a356 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e050      	b.n	800a3fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a35a:	893b      	ldrh	r3, [r7, #8]
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a366:	6a39      	ldr	r1, [r7, #32]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 f967 	bl	800a63c <I2C_WaitOnTXEFlagUntilTimeout>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00d      	beq.n	800a390 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d107      	bne.n	800a38c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a38a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e035      	b.n	800a3fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a39e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f82b 	bl	800a408 <I2C_WaitOnFlagUntilTimeout>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00d      	beq.n	800a3d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c6:	d103      	bne.n	800a3d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e013      	b.n	800a3fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3d4:	897b      	ldrh	r3, [r7, #10]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	f043 0301 	orr.w	r3, r3, #1
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	6a3a      	ldr	r2, [r7, #32]
 800a3e8:	4906      	ldr	r1, [pc, #24]	; (800a404 <I2C_RequestMemoryRead+0x1cc>)
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 f886 	bl	800a4fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e000      	b.n	800a3fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	00010002 	.word	0x00010002

0800a408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	4613      	mov	r3, r2
 800a416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a418:	e048      	b.n	800a4ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a420:	d044      	beq.n	800a4ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a422:	f7fe f9e3 	bl	80087ec <HAL_GetTick>
 800a426:	4602      	mov	r2, r0
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d302      	bcc.n	800a438 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d139      	bne.n	800a4ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	0c1b      	lsrs	r3, r3, #16
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d10d      	bne.n	800a45e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	43da      	mvns	r2, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	4013      	ands	r3, r2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	2b00      	cmp	r3, #0
 800a452:	bf0c      	ite	eq
 800a454:	2301      	moveq	r3, #1
 800a456:	2300      	movne	r3, #0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	461a      	mov	r2, r3
 800a45c:	e00c      	b.n	800a478 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	43da      	mvns	r2, r3
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4013      	ands	r3, r2
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bf0c      	ite	eq
 800a470:	2301      	moveq	r3, #1
 800a472:	2300      	movne	r3, #0
 800a474:	b2db      	uxtb	r3, r3
 800a476:	461a      	mov	r2, r3
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d116      	bne.n	800a4ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2220      	movs	r2, #32
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a498:	f043 0220 	orr.w	r2, r3, #32
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e023      	b.n	800a4f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	0c1b      	lsrs	r3, r3, #16
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d10d      	bne.n	800a4d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	43da      	mvns	r2, r3
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bf0c      	ite	eq
 800a4c8:	2301      	moveq	r3, #1
 800a4ca:	2300      	movne	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	e00c      	b.n	800a4ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	43da      	mvns	r2, r3
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	4013      	ands	r3, r2
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bf0c      	ite	eq
 800a4e4:	2301      	moveq	r3, #1
 800a4e6:	2300      	movne	r3, #0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d093      	beq.n	800a41a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a50a:	e071      	b.n	800a5f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a51a:	d123      	bne.n	800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a52a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a550:	f043 0204 	orr.w	r2, r3, #4
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e067      	b.n	800a634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a56a:	d041      	beq.n	800a5f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a56c:	f7fe f93e 	bl	80087ec <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d302      	bcc.n	800a582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d136      	bne.n	800a5f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	0c1b      	lsrs	r3, r3, #16
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d10c      	bne.n	800a5a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	43da      	mvns	r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	4013      	ands	r3, r2
 800a598:	b29b      	uxth	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bf14      	ite	ne
 800a59e:	2301      	movne	r3, #1
 800a5a0:	2300      	moveq	r3, #0
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	e00b      	b.n	800a5be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	43da      	mvns	r2, r3
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bf14      	ite	ne
 800a5b8:	2301      	movne	r3, #1
 800a5ba:	2300      	moveq	r3, #0
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d016      	beq.n	800a5f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5dc:	f043 0220 	orr.w	r2, r3, #32
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e021      	b.n	800a634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d10c      	bne.n	800a614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	43da      	mvns	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	4013      	ands	r3, r2
 800a606:	b29b      	uxth	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bf14      	ite	ne
 800a60c:	2301      	movne	r3, #1
 800a60e:	2300      	moveq	r3, #0
 800a610:	b2db      	uxtb	r3, r3
 800a612:	e00b      	b.n	800a62c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	43da      	mvns	r2, r3
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4013      	ands	r3, r2
 800a620:	b29b      	uxth	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	bf14      	ite	ne
 800a626:	2301      	movne	r3, #1
 800a628:	2300      	moveq	r3, #0
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f47f af6d 	bne.w	800a50c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a648:	e034      	b.n	800a6b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 f8e3 	bl	800a816 <I2C_IsAcknowledgeFailed>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e034      	b.n	800a6c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a660:	d028      	beq.n	800a6b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a662:	f7fe f8c3 	bl	80087ec <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d302      	bcc.n	800a678 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d11d      	bne.n	800a6b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a682:	2b80      	cmp	r3, #128	; 0x80
 800a684:	d016      	beq.n	800a6b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	f043 0220 	orr.w	r2, r3, #32
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e007      	b.n	800a6c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6be:	2b80      	cmp	r3, #128	; 0x80
 800a6c0:	d1c3      	bne.n	800a64a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6d8:	e034      	b.n	800a744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f89b 	bl	800a816 <I2C_IsAcknowledgeFailed>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e034      	b.n	800a754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6f0:	d028      	beq.n	800a744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6f2:	f7fe f87b 	bl	80087ec <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d302      	bcc.n	800a708 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d11d      	bne.n	800a744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b04      	cmp	r3, #4
 800a714:	d016      	beq.n	800a744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2220      	movs	r2, #32
 800a720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a730:	f043 0220 	orr.w	r2, r3, #32
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e007      	b.n	800a754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d1c3      	bne.n	800a6da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a768:	e049      	b.n	800a7fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	f003 0310 	and.w	r3, r3, #16
 800a774:	2b10      	cmp	r3, #16
 800a776:	d119      	bne.n	800a7ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f06f 0210 	mvn.w	r2, #16
 800a780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e030      	b.n	800a80e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ac:	f7fe f81e 	bl	80087ec <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d302      	bcc.n	800a7c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d11d      	bne.n	800a7fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7cc:	2b40      	cmp	r3, #64	; 0x40
 800a7ce:	d016      	beq.n	800a7fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ea:	f043 0220 	orr.w	r2, r3, #32
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e007      	b.n	800a80e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a808:	2b40      	cmp	r3, #64	; 0x40
 800a80a:	d1ae      	bne.n	800a76a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a82c:	d11b      	bne.n	800a866 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a836:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	f043 0204 	orr.w	r2, r3, #4
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e000      	b.n	800a868 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bc80      	pop	{r7}
 800a870:	4770      	bx	lr
	...

0800a874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e272      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 8087 	beq.w	800a9a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a894:	4b92      	ldr	r3, [pc, #584]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f003 030c 	and.w	r3, r3, #12
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	d00c      	beq.n	800a8ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a8a0:	4b8f      	ldr	r3, [pc, #572]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f003 030c 	and.w	r3, r3, #12
 800a8a8:	2b08      	cmp	r3, #8
 800a8aa:	d112      	bne.n	800a8d2 <HAL_RCC_OscConfig+0x5e>
 800a8ac:	4b8c      	ldr	r3, [pc, #560]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b8:	d10b      	bne.n	800a8d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8ba:	4b89      	ldr	r3, [pc, #548]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d06c      	beq.n	800a9a0 <HAL_RCC_OscConfig+0x12c>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d168      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e24c      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8da:	d106      	bne.n	800a8ea <HAL_RCC_OscConfig+0x76>
 800a8dc:	4b80      	ldr	r3, [pc, #512]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a7f      	ldr	r2, [pc, #508]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a8e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	e02e      	b.n	800a948 <HAL_RCC_OscConfig+0xd4>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10c      	bne.n	800a90c <HAL_RCC_OscConfig+0x98>
 800a8f2:	4b7b      	ldr	r3, [pc, #492]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a7a      	ldr	r2, [pc, #488]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a8f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	4b78      	ldr	r3, [pc, #480]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a77      	ldr	r2, [pc, #476]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	e01d      	b.n	800a948 <HAL_RCC_OscConfig+0xd4>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a914:	d10c      	bne.n	800a930 <HAL_RCC_OscConfig+0xbc>
 800a916:	4b72      	ldr	r3, [pc, #456]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a71      	ldr	r2, [pc, #452]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a91c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	4b6f      	ldr	r3, [pc, #444]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a6e      	ldr	r2, [pc, #440]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a92c:	6013      	str	r3, [r2, #0]
 800a92e:	e00b      	b.n	800a948 <HAL_RCC_OscConfig+0xd4>
 800a930:	4b6b      	ldr	r3, [pc, #428]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a6a      	ldr	r2, [pc, #424]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	4b68      	ldr	r3, [pc, #416]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a67      	ldr	r2, [pc, #412]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a946:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d013      	beq.n	800a978 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a950:	f7fd ff4c 	bl	80087ec <HAL_GetTick>
 800a954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a956:	e008      	b.n	800a96a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a958:	f7fd ff48 	bl	80087ec <HAL_GetTick>
 800a95c:	4602      	mov	r2, r0
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	2b64      	cmp	r3, #100	; 0x64
 800a964:	d901      	bls.n	800a96a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e200      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a96a:	4b5d      	ldr	r3, [pc, #372]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0f0      	beq.n	800a958 <HAL_RCC_OscConfig+0xe4>
 800a976:	e014      	b.n	800a9a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a978:	f7fd ff38 	bl	80087ec <HAL_GetTick>
 800a97c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a97e:	e008      	b.n	800a992 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a980:	f7fd ff34 	bl	80087ec <HAL_GetTick>
 800a984:	4602      	mov	r2, r0
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	2b64      	cmp	r3, #100	; 0x64
 800a98c:	d901      	bls.n	800a992 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e1ec      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a992:	4b53      	ldr	r3, [pc, #332]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1f0      	bne.n	800a980 <HAL_RCC_OscConfig+0x10c>
 800a99e:	e000      	b.n	800a9a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d063      	beq.n	800aa76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9ae:	4b4c      	ldr	r3, [pc, #304]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f003 030c 	and.w	r3, r3, #12
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00b      	beq.n	800a9d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a9ba:	4b49      	ldr	r3, [pc, #292]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	f003 030c 	and.w	r3, r3, #12
 800a9c2:	2b08      	cmp	r3, #8
 800a9c4:	d11c      	bne.n	800aa00 <HAL_RCC_OscConfig+0x18c>
 800a9c6:	4b46      	ldr	r3, [pc, #280]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d116      	bne.n	800aa00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9d2:	4b43      	ldr	r3, [pc, #268]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0302 	and.w	r3, r3, #2
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <HAL_RCC_OscConfig+0x176>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d001      	beq.n	800a9ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e1c0      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9ea:	4b3d      	ldr	r3, [pc, #244]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	4939      	ldr	r1, [pc, #228]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9fe:	e03a      	b.n	800aa76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d020      	beq.n	800aa4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa08:	4b36      	ldr	r3, [pc, #216]	; (800aae4 <HAL_RCC_OscConfig+0x270>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa0e:	f7fd feed 	bl	80087ec <HAL_GetTick>
 800aa12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa14:	e008      	b.n	800aa28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa16:	f7fd fee9 	bl	80087ec <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d901      	bls.n	800aa28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e1a1      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa28:	4b2d      	ldr	r3, [pc, #180]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0f0      	beq.n	800aa16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa34:	4b2a      	ldr	r3, [pc, #168]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	695b      	ldr	r3, [r3, #20]
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	4927      	ldr	r1, [pc, #156]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	600b      	str	r3, [r1, #0]
 800aa48:	e015      	b.n	800aa76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa4a:	4b26      	ldr	r3, [pc, #152]	; (800aae4 <HAL_RCC_OscConfig+0x270>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa50:	f7fd fecc 	bl	80087ec <HAL_GetTick>
 800aa54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa56:	e008      	b.n	800aa6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa58:	f7fd fec8 	bl	80087ec <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d901      	bls.n	800aa6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e180      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa6a:	4b1d      	ldr	r3, [pc, #116]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1f0      	bne.n	800aa58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0308 	and.w	r3, r3, #8
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d03a      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d019      	beq.n	800aabe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa8a:	4b17      	ldr	r3, [pc, #92]	; (800aae8 <HAL_RCC_OscConfig+0x274>)
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa90:	f7fd feac 	bl	80087ec <HAL_GetTick>
 800aa94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa96:	e008      	b.n	800aaaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa98:	f7fd fea8 	bl	80087ec <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d901      	bls.n	800aaaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e160      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	; (800aae0 <HAL_RCC_OscConfig+0x26c>)
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0f0      	beq.n	800aa98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aab6:	2001      	movs	r0, #1
 800aab8:	f000 face 	bl	800b058 <RCC_Delay>
 800aabc:	e01c      	b.n	800aaf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aabe:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <HAL_RCC_OscConfig+0x274>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aac4:	f7fd fe92 	bl	80087ec <HAL_GetTick>
 800aac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaca:	e00f      	b.n	800aaec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aacc:	f7fd fe8e 	bl	80087ec <HAL_GetTick>
 800aad0:	4602      	mov	r2, r0
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d908      	bls.n	800aaec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e146      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
 800aade:	bf00      	nop
 800aae0:	40021000 	.word	0x40021000
 800aae4:	42420000 	.word	0x42420000
 800aae8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaec:	4b92      	ldr	r3, [pc, #584]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	f003 0302 	and.w	r3, r3, #2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e9      	bne.n	800aacc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 80a6 	beq.w	800ac52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab06:	2300      	movs	r3, #0
 800ab08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab0a:	4b8b      	ldr	r3, [pc, #556]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10d      	bne.n	800ab32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab16:	4b88      	ldr	r3, [pc, #544]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	4a87      	ldr	r2, [pc, #540]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab20:	61d3      	str	r3, [r2, #28]
 800ab22:	4b85      	ldr	r3, [pc, #532]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab2a:	60bb      	str	r3, [r7, #8]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab32:	4b82      	ldr	r3, [pc, #520]	; (800ad3c <HAL_RCC_OscConfig+0x4c8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d118      	bne.n	800ab70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab3e:	4b7f      	ldr	r3, [pc, #508]	; (800ad3c <HAL_RCC_OscConfig+0x4c8>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a7e      	ldr	r2, [pc, #504]	; (800ad3c <HAL_RCC_OscConfig+0x4c8>)
 800ab44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab4a:	f7fd fe4f 	bl	80087ec <HAL_GetTick>
 800ab4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab50:	e008      	b.n	800ab64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab52:	f7fd fe4b 	bl	80087ec <HAL_GetTick>
 800ab56:	4602      	mov	r2, r0
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	2b64      	cmp	r3, #100	; 0x64
 800ab5e:	d901      	bls.n	800ab64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e103      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab64:	4b75      	ldr	r3, [pc, #468]	; (800ad3c <HAL_RCC_OscConfig+0x4c8>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0f0      	beq.n	800ab52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d106      	bne.n	800ab86 <HAL_RCC_OscConfig+0x312>
 800ab78:	4b6f      	ldr	r3, [pc, #444]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	4a6e      	ldr	r2, [pc, #440]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab7e:	f043 0301 	orr.w	r3, r3, #1
 800ab82:	6213      	str	r3, [r2, #32]
 800ab84:	e02d      	b.n	800abe2 <HAL_RCC_OscConfig+0x36e>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10c      	bne.n	800aba8 <HAL_RCC_OscConfig+0x334>
 800ab8e:	4b6a      	ldr	r3, [pc, #424]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	4a69      	ldr	r2, [pc, #420]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab94:	f023 0301 	bic.w	r3, r3, #1
 800ab98:	6213      	str	r3, [r2, #32]
 800ab9a:	4b67      	ldr	r3, [pc, #412]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	4a66      	ldr	r2, [pc, #408]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800aba0:	f023 0304 	bic.w	r3, r3, #4
 800aba4:	6213      	str	r3, [r2, #32]
 800aba6:	e01c      	b.n	800abe2 <HAL_RCC_OscConfig+0x36e>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	2b05      	cmp	r3, #5
 800abae:	d10c      	bne.n	800abca <HAL_RCC_OscConfig+0x356>
 800abb0:	4b61      	ldr	r3, [pc, #388]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	4a60      	ldr	r2, [pc, #384]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800abb6:	f043 0304 	orr.w	r3, r3, #4
 800abba:	6213      	str	r3, [r2, #32]
 800abbc:	4b5e      	ldr	r3, [pc, #376]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	4a5d      	ldr	r2, [pc, #372]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800abc2:	f043 0301 	orr.w	r3, r3, #1
 800abc6:	6213      	str	r3, [r2, #32]
 800abc8:	e00b      	b.n	800abe2 <HAL_RCC_OscConfig+0x36e>
 800abca:	4b5b      	ldr	r3, [pc, #364]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	4a5a      	ldr	r2, [pc, #360]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800abd0:	f023 0301 	bic.w	r3, r3, #1
 800abd4:	6213      	str	r3, [r2, #32]
 800abd6:	4b58      	ldr	r3, [pc, #352]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	4a57      	ldr	r2, [pc, #348]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800abdc:	f023 0304 	bic.w	r3, r3, #4
 800abe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d015      	beq.n	800ac16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abea:	f7fd fdff 	bl	80087ec <HAL_GetTick>
 800abee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abf0:	e00a      	b.n	800ac08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abf2:	f7fd fdfb 	bl	80087ec <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d901      	bls.n	800ac08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e0b1      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac08:	4b4b      	ldr	r3, [pc, #300]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0ee      	beq.n	800abf2 <HAL_RCC_OscConfig+0x37e>
 800ac14:	e014      	b.n	800ac40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac16:	f7fd fde9 	bl	80087ec <HAL_GetTick>
 800ac1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac1c:	e00a      	b.n	800ac34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac1e:	f7fd fde5 	bl	80087ec <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d901      	bls.n	800ac34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e09b      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac34:	4b40      	ldr	r3, [pc, #256]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ac36:	6a1b      	ldr	r3, [r3, #32]
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1ee      	bne.n	800ac1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac40:	7dfb      	ldrb	r3, [r7, #23]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d105      	bne.n	800ac52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac46:	4b3c      	ldr	r3, [pc, #240]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	4a3b      	ldr	r2, [pc, #236]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ac4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 8087 	beq.w	800ad6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac5c:	4b36      	ldr	r3, [pc, #216]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f003 030c 	and.w	r3, r3, #12
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d061      	beq.n	800ad2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d146      	bne.n	800acfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac70:	4b33      	ldr	r3, [pc, #204]	; (800ad40 <HAL_RCC_OscConfig+0x4cc>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac76:	f7fd fdb9 	bl	80087ec <HAL_GetTick>
 800ac7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac7c:	e008      	b.n	800ac90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac7e:	f7fd fdb5 	bl	80087ec <HAL_GetTick>
 800ac82:	4602      	mov	r2, r0
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d901      	bls.n	800ac90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e06d      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac90:	4b29      	ldr	r3, [pc, #164]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1f0      	bne.n	800ac7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca4:	d108      	bne.n	800acb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aca6:	4b24      	ldr	r3, [pc, #144]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	4921      	ldr	r1, [pc, #132]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acb8:	4b1f      	ldr	r3, [pc, #124]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a19      	ldr	r1, [r3, #32]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	430b      	orrs	r3, r1
 800acca:	491b      	ldr	r1, [pc, #108]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800accc:	4313      	orrs	r3, r2
 800acce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acd0:	4b1b      	ldr	r3, [pc, #108]	; (800ad40 <HAL_RCC_OscConfig+0x4cc>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acd6:	f7fd fd89 	bl	80087ec <HAL_GetTick>
 800acda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acdc:	e008      	b.n	800acf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acde:	f7fd fd85 	bl	80087ec <HAL_GetTick>
 800ace2:	4602      	mov	r2, r0
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d901      	bls.n	800acf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e03d      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acf0:	4b11      	ldr	r3, [pc, #68]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0f0      	beq.n	800acde <HAL_RCC_OscConfig+0x46a>
 800acfc:	e035      	b.n	800ad6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acfe:	4b10      	ldr	r3, [pc, #64]	; (800ad40 <HAL_RCC_OscConfig+0x4cc>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad04:	f7fd fd72 	bl	80087ec <HAL_GetTick>
 800ad08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad0a:	e008      	b.n	800ad1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad0c:	f7fd fd6e 	bl	80087ec <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d901      	bls.n	800ad1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e026      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad1e:	4b06      	ldr	r3, [pc, #24]	; (800ad38 <HAL_RCC_OscConfig+0x4c4>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1f0      	bne.n	800ad0c <HAL_RCC_OscConfig+0x498>
 800ad2a:	e01e      	b.n	800ad6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d107      	bne.n	800ad44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	e019      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
 800ad38:	40021000 	.word	0x40021000
 800ad3c:	40007000 	.word	0x40007000
 800ad40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad44:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <HAL_RCC_OscConfig+0x500>)
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d106      	bne.n	800ad66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d001      	beq.n	800ad6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e000      	b.n	800ad6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3718      	adds	r7, #24
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	40021000 	.word	0x40021000

0800ad78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d101      	bne.n	800ad8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e0d0      	b.n	800af2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad8c:	4b6a      	ldr	r3, [pc, #424]	; (800af38 <HAL_RCC_ClockConfig+0x1c0>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0307 	and.w	r3, r3, #7
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d910      	bls.n	800adbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad9a:	4b67      	ldr	r3, [pc, #412]	; (800af38 <HAL_RCC_ClockConfig+0x1c0>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f023 0207 	bic.w	r2, r3, #7
 800ada2:	4965      	ldr	r1, [pc, #404]	; (800af38 <HAL_RCC_ClockConfig+0x1c0>)
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adaa:	4b63      	ldr	r3, [pc, #396]	; (800af38 <HAL_RCC_ClockConfig+0x1c0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0307 	and.w	r3, r3, #7
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d001      	beq.n	800adbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	e0b8      	b.n	800af2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d020      	beq.n	800ae0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0304 	and.w	r3, r3, #4
 800add0:	2b00      	cmp	r3, #0
 800add2:	d005      	beq.n	800ade0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800add4:	4b59      	ldr	r3, [pc, #356]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	4a58      	ldr	r2, [pc, #352]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800adda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800adde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0308 	and.w	r3, r3, #8
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adec:	4b53      	ldr	r3, [pc, #332]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4a52      	ldr	r2, [pc, #328]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800adf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800adf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adf8:	4b50      	ldr	r3, [pc, #320]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	494d      	ldr	r1, [pc, #308]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d040      	beq.n	800ae98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d107      	bne.n	800ae2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae1e:	4b47      	ldr	r3, [pc, #284]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d115      	bne.n	800ae56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e07f      	b.n	800af2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d107      	bne.n	800ae46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae36:	4b41      	ldr	r3, [pc, #260]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d109      	bne.n	800ae56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e073      	b.n	800af2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae46:	4b3d      	ldr	r3, [pc, #244]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e06b      	b.n	800af2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae56:	4b39      	ldr	r3, [pc, #228]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f023 0203 	bic.w	r2, r3, #3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	4936      	ldr	r1, [pc, #216]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae68:	f7fd fcc0 	bl	80087ec <HAL_GetTick>
 800ae6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae6e:	e00a      	b.n	800ae86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae70:	f7fd fcbc 	bl	80087ec <HAL_GetTick>
 800ae74:	4602      	mov	r2, r0
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d901      	bls.n	800ae86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e053      	b.n	800af2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae86:	4b2d      	ldr	r3, [pc, #180]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f003 020c 	and.w	r2, r3, #12
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d1eb      	bne.n	800ae70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae98:	4b27      	ldr	r3, [pc, #156]	; (800af38 <HAL_RCC_ClockConfig+0x1c0>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f003 0307 	and.w	r3, r3, #7
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d210      	bcs.n	800aec8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aea6:	4b24      	ldr	r3, [pc, #144]	; (800af38 <HAL_RCC_ClockConfig+0x1c0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f023 0207 	bic.w	r2, r3, #7
 800aeae:	4922      	ldr	r1, [pc, #136]	; (800af38 <HAL_RCC_ClockConfig+0x1c0>)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeb6:	4b20      	ldr	r3, [pc, #128]	; (800af38 <HAL_RCC_ClockConfig+0x1c0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0307 	and.w	r3, r3, #7
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d001      	beq.n	800aec8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e032      	b.n	800af2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0304 	and.w	r3, r3, #4
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d008      	beq.n	800aee6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aed4:	4b19      	ldr	r3, [pc, #100]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	4916      	ldr	r1, [pc, #88]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800aee2:	4313      	orrs	r3, r2
 800aee4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0308 	and.w	r3, r3, #8
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d009      	beq.n	800af06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aef2:	4b12      	ldr	r3, [pc, #72]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	490e      	ldr	r1, [pc, #56]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800af02:	4313      	orrs	r3, r2
 800af04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af06:	f000 f821 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800af0a:	4602      	mov	r2, r0
 800af0c:	4b0b      	ldr	r3, [pc, #44]	; (800af3c <HAL_RCC_ClockConfig+0x1c4>)
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	091b      	lsrs	r3, r3, #4
 800af12:	f003 030f 	and.w	r3, r3, #15
 800af16:	490a      	ldr	r1, [pc, #40]	; (800af40 <HAL_RCC_ClockConfig+0x1c8>)
 800af18:	5ccb      	ldrb	r3, [r1, r3]
 800af1a:	fa22 f303 	lsr.w	r3, r2, r3
 800af1e:	4a09      	ldr	r2, [pc, #36]	; (800af44 <HAL_RCC_ClockConfig+0x1cc>)
 800af20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af22:	4b09      	ldr	r3, [pc, #36]	; (800af48 <HAL_RCC_ClockConfig+0x1d0>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4618      	mov	r0, r3
 800af28:	f7fd fc1e 	bl	8008768 <HAL_InitTick>

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	40022000 	.word	0x40022000
 800af3c:	40021000 	.word	0x40021000
 800af40:	0800ddf4 	.word	0x0800ddf4
 800af44:	200000b0 	.word	0x200000b0
 800af48:	200000b4 	.word	0x200000b4

0800af4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b087      	sub	sp, #28
 800af50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af52:	2300      	movs	r3, #0
 800af54:	60fb      	str	r3, [r7, #12]
 800af56:	2300      	movs	r3, #0
 800af58:	60bb      	str	r3, [r7, #8]
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	2300      	movs	r3, #0
 800af60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af66:	4b1e      	ldr	r3, [pc, #120]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f003 030c 	and.w	r3, r3, #12
 800af72:	2b04      	cmp	r3, #4
 800af74:	d002      	beq.n	800af7c <HAL_RCC_GetSysClockFreq+0x30>
 800af76:	2b08      	cmp	r3, #8
 800af78:	d003      	beq.n	800af82 <HAL_RCC_GetSysClockFreq+0x36>
 800af7a:	e027      	b.n	800afcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af7c:	4b19      	ldr	r3, [pc, #100]	; (800afe4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af7e:	613b      	str	r3, [r7, #16]
      break;
 800af80:	e027      	b.n	800afd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	0c9b      	lsrs	r3, r3, #18
 800af86:	f003 030f 	and.w	r3, r3, #15
 800af8a:	4a17      	ldr	r2, [pc, #92]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af8c:	5cd3      	ldrb	r3, [r2, r3]
 800af8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d010      	beq.n	800afbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af9a:	4b11      	ldr	r3, [pc, #68]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	0c5b      	lsrs	r3, r3, #17
 800afa0:	f003 0301 	and.w	r3, r3, #1
 800afa4:	4a11      	ldr	r2, [pc, #68]	; (800afec <HAL_RCC_GetSysClockFreq+0xa0>)
 800afa6:	5cd3      	ldrb	r3, [r2, r3]
 800afa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <HAL_RCC_GetSysClockFreq+0x98>)
 800afae:	fb03 f202 	mul.w	r2, r3, r2
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb8:	617b      	str	r3, [r7, #20]
 800afba:	e004      	b.n	800afc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a0c      	ldr	r2, [pc, #48]	; (800aff0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800afc0:	fb02 f303 	mul.w	r3, r2, r3
 800afc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	613b      	str	r3, [r7, #16]
      break;
 800afca:	e002      	b.n	800afd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800afcc:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <HAL_RCC_GetSysClockFreq+0x98>)
 800afce:	613b      	str	r3, [r7, #16]
      break;
 800afd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800afd2:	693b      	ldr	r3, [r7, #16]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	bc80      	pop	{r7}
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	40021000 	.word	0x40021000
 800afe4:	007a1200 	.word	0x007a1200
 800afe8:	0800de0c 	.word	0x0800de0c
 800afec:	0800de1c 	.word	0x0800de1c
 800aff0:	003d0900 	.word	0x003d0900

0800aff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aff4:	b480      	push	{r7}
 800aff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aff8:	4b02      	ldr	r3, [pc, #8]	; (800b004 <HAL_RCC_GetHCLKFreq+0x10>)
 800affa:	681b      	ldr	r3, [r3, #0]
}
 800affc:	4618      	mov	r0, r3
 800affe:	46bd      	mov	sp, r7
 800b000:	bc80      	pop	{r7}
 800b002:	4770      	bx	lr
 800b004:	200000b0 	.word	0x200000b0

0800b008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b00c:	f7ff fff2 	bl	800aff4 <HAL_RCC_GetHCLKFreq>
 800b010:	4602      	mov	r2, r0
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	0a1b      	lsrs	r3, r3, #8
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	4903      	ldr	r1, [pc, #12]	; (800b02c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b01e:	5ccb      	ldrb	r3, [r1, r3]
 800b020:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b024:	4618      	mov	r0, r3
 800b026:	bd80      	pop	{r7, pc}
 800b028:	40021000 	.word	0x40021000
 800b02c:	0800de04 	.word	0x0800de04

0800b030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b034:	f7ff ffde 	bl	800aff4 <HAL_RCC_GetHCLKFreq>
 800b038:	4602      	mov	r2, r0
 800b03a:	4b05      	ldr	r3, [pc, #20]	; (800b050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	0adb      	lsrs	r3, r3, #11
 800b040:	f003 0307 	and.w	r3, r3, #7
 800b044:	4903      	ldr	r1, [pc, #12]	; (800b054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b046:	5ccb      	ldrb	r3, [r1, r3]
 800b048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40021000 	.word	0x40021000
 800b054:	0800de04 	.word	0x0800de04

0800b058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b060:	4b0a      	ldr	r3, [pc, #40]	; (800b08c <RCC_Delay+0x34>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a0a      	ldr	r2, [pc, #40]	; (800b090 <RCC_Delay+0x38>)
 800b066:	fba2 2303 	umull	r2, r3, r2, r3
 800b06a:	0a5b      	lsrs	r3, r3, #9
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	fb02 f303 	mul.w	r3, r2, r3
 800b072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b074:	bf00      	nop
  }
  while (Delay --);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	1e5a      	subs	r2, r3, #1
 800b07a:	60fa      	str	r2, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1f9      	bne.n	800b074 <RCC_Delay+0x1c>
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	bc80      	pop	{r7}
 800b08a:	4770      	bx	lr
 800b08c:	200000b0 	.word	0x200000b0
 800b090:	10624dd3 	.word	0x10624dd3

0800b094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e041      	b.n	800b12a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7fd fa26 	bl	800850c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	f000 fa82 	bl	800b5dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b01      	cmp	r3, #1
 800b146:	d001      	beq.n	800b14c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e044      	b.n	800b1d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f042 0201 	orr.w	r2, r2, #1
 800b162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a1d      	ldr	r2, [pc, #116]	; (800b1e0 <HAL_TIM_Base_Start_IT+0xac>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d018      	beq.n	800b1a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a1c      	ldr	r2, [pc, #112]	; (800b1e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d013      	beq.n	800b1a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b180:	d00e      	beq.n	800b1a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a18      	ldr	r2, [pc, #96]	; (800b1e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d009      	beq.n	800b1a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a16      	ldr	r2, [pc, #88]	; (800b1ec <HAL_TIM_Base_Start_IT+0xb8>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d004      	beq.n	800b1a0 <HAL_TIM_Base_Start_IT+0x6c>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a15      	ldr	r2, [pc, #84]	; (800b1f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d111      	bne.n	800b1c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	f003 0307 	and.w	r3, r3, #7
 800b1aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b06      	cmp	r3, #6
 800b1b0:	d010      	beq.n	800b1d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f042 0201 	orr.w	r2, r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1c2:	e007      	b.n	800b1d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f042 0201 	orr.w	r2, r2, #1
 800b1d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bc80      	pop	{r7}
 800b1de:	4770      	bx	lr
 800b1e0:	40012c00 	.word	0x40012c00
 800b1e4:	40013400 	.word	0x40013400
 800b1e8:	40000400 	.word	0x40000400
 800b1ec:	40000800 	.word	0x40000800
 800b1f0:	40000c00 	.word	0x40000c00

0800b1f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b02      	cmp	r3, #2
 800b208:	d122      	bne.n	800b250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f003 0302 	and.w	r3, r3, #2
 800b214:	2b02      	cmp	r3, #2
 800b216:	d11b      	bne.n	800b250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f06f 0202 	mvn.w	r2, #2
 800b220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	f003 0303 	and.w	r3, r3, #3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f9b4 	bl	800b5a4 <HAL_TIM_IC_CaptureCallback>
 800b23c:	e005      	b.n	800b24a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f9a7 	bl	800b592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f9b6 	bl	800b5b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	f003 0304 	and.w	r3, r3, #4
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d122      	bne.n	800b2a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	f003 0304 	and.w	r3, r3, #4
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d11b      	bne.n	800b2a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f06f 0204 	mvn.w	r2, #4
 800b274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2202      	movs	r2, #2
 800b27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f98a 	bl	800b5a4 <HAL_TIM_IC_CaptureCallback>
 800b290:	e005      	b.n	800b29e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f97d 	bl	800b592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f98c 	bl	800b5b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	f003 0308 	and.w	r3, r3, #8
 800b2ae:	2b08      	cmp	r3, #8
 800b2b0:	d122      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	f003 0308 	and.w	r3, r3, #8
 800b2bc:	2b08      	cmp	r3, #8
 800b2be:	d11b      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f06f 0208 	mvn.w	r2, #8
 800b2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	69db      	ldr	r3, [r3, #28]
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f960 	bl	800b5a4 <HAL_TIM_IC_CaptureCallback>
 800b2e4:	e005      	b.n	800b2f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f953 	bl	800b592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f962 	bl	800b5b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f003 0310 	and.w	r3, r3, #16
 800b302:	2b10      	cmp	r3, #16
 800b304:	d122      	bne.n	800b34c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f003 0310 	and.w	r3, r3, #16
 800b310:	2b10      	cmp	r3, #16
 800b312:	d11b      	bne.n	800b34c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f06f 0210 	mvn.w	r2, #16
 800b31c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2208      	movs	r2, #8
 800b322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	69db      	ldr	r3, [r3, #28]
 800b32a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f936 	bl	800b5a4 <HAL_TIM_IC_CaptureCallback>
 800b338:	e005      	b.n	800b346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f929 	bl	800b592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f938 	bl	800b5b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b01      	cmp	r3, #1
 800b358:	d10e      	bne.n	800b378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	2b01      	cmp	r3, #1
 800b366:	d107      	bne.n	800b378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f06f 0201 	mvn.w	r2, #1
 800b370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7fc fd62 	bl	8007e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b382:	2b80      	cmp	r3, #128	; 0x80
 800b384:	d10e      	bne.n	800b3a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b390:	2b80      	cmp	r3, #128	; 0x80
 800b392:	d107      	bne.n	800b3a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b39c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 faa1 	bl	800b8e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ae:	2b40      	cmp	r3, #64	; 0x40
 800b3b0:	d10e      	bne.n	800b3d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3bc:	2b40      	cmp	r3, #64	; 0x40
 800b3be:	d107      	bne.n	800b3d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f8fc 	bl	800b5c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	f003 0320 	and.w	r3, r3, #32
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	d10e      	bne.n	800b3fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b20      	cmp	r3, #32
 800b3ea:	d107      	bne.n	800b3fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f06f 0220 	mvn.w	r2, #32
 800b3f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fa6c 	bl	800b8d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d101      	bne.n	800b420 <HAL_TIM_ConfigClockSource+0x1c>
 800b41c:	2302      	movs	r3, #2
 800b41e:	e0b4      	b.n	800b58a <HAL_TIM_ConfigClockSource+0x186>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2202      	movs	r2, #2
 800b42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b43e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b458:	d03e      	beq.n	800b4d8 <HAL_TIM_ConfigClockSource+0xd4>
 800b45a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b45e:	f200 8087 	bhi.w	800b570 <HAL_TIM_ConfigClockSource+0x16c>
 800b462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b466:	f000 8086 	beq.w	800b576 <HAL_TIM_ConfigClockSource+0x172>
 800b46a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46e:	d87f      	bhi.n	800b570 <HAL_TIM_ConfigClockSource+0x16c>
 800b470:	2b70      	cmp	r3, #112	; 0x70
 800b472:	d01a      	beq.n	800b4aa <HAL_TIM_ConfigClockSource+0xa6>
 800b474:	2b70      	cmp	r3, #112	; 0x70
 800b476:	d87b      	bhi.n	800b570 <HAL_TIM_ConfigClockSource+0x16c>
 800b478:	2b60      	cmp	r3, #96	; 0x60
 800b47a:	d050      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x11a>
 800b47c:	2b60      	cmp	r3, #96	; 0x60
 800b47e:	d877      	bhi.n	800b570 <HAL_TIM_ConfigClockSource+0x16c>
 800b480:	2b50      	cmp	r3, #80	; 0x50
 800b482:	d03c      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0xfa>
 800b484:	2b50      	cmp	r3, #80	; 0x50
 800b486:	d873      	bhi.n	800b570 <HAL_TIM_ConfigClockSource+0x16c>
 800b488:	2b40      	cmp	r3, #64	; 0x40
 800b48a:	d058      	beq.n	800b53e <HAL_TIM_ConfigClockSource+0x13a>
 800b48c:	2b40      	cmp	r3, #64	; 0x40
 800b48e:	d86f      	bhi.n	800b570 <HAL_TIM_ConfigClockSource+0x16c>
 800b490:	2b30      	cmp	r3, #48	; 0x30
 800b492:	d064      	beq.n	800b55e <HAL_TIM_ConfigClockSource+0x15a>
 800b494:	2b30      	cmp	r3, #48	; 0x30
 800b496:	d86b      	bhi.n	800b570 <HAL_TIM_ConfigClockSource+0x16c>
 800b498:	2b20      	cmp	r3, #32
 800b49a:	d060      	beq.n	800b55e <HAL_TIM_ConfigClockSource+0x15a>
 800b49c:	2b20      	cmp	r3, #32
 800b49e:	d867      	bhi.n	800b570 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d05c      	beq.n	800b55e <HAL_TIM_ConfigClockSource+0x15a>
 800b4a4:	2b10      	cmp	r3, #16
 800b4a6:	d05a      	beq.n	800b55e <HAL_TIM_ConfigClockSource+0x15a>
 800b4a8:	e062      	b.n	800b570 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4ba:	f000 f980 	bl	800b7be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	609a      	str	r2, [r3, #8]
      break;
 800b4d6:	e04f      	b.n	800b578 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4e8:	f000 f969 	bl	800b7be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689a      	ldr	r2, [r3, #8]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4fa:	609a      	str	r2, [r3, #8]
      break;
 800b4fc:	e03c      	b.n	800b578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b50a:	461a      	mov	r2, r3
 800b50c:	f000 f8e0 	bl	800b6d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2150      	movs	r1, #80	; 0x50
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f937 	bl	800b78a <TIM_ITRx_SetConfig>
      break;
 800b51c:	e02c      	b.n	800b578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b52a:	461a      	mov	r2, r3
 800b52c:	f000 f8fe 	bl	800b72c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2160      	movs	r1, #96	; 0x60
 800b536:	4618      	mov	r0, r3
 800b538:	f000 f927 	bl	800b78a <TIM_ITRx_SetConfig>
      break;
 800b53c:	e01c      	b.n	800b578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b54a:	461a      	mov	r2, r3
 800b54c:	f000 f8c0 	bl	800b6d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2140      	movs	r1, #64	; 0x40
 800b556:	4618      	mov	r0, r3
 800b558:	f000 f917 	bl	800b78a <TIM_ITRx_SetConfig>
      break;
 800b55c:	e00c      	b.n	800b578 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4619      	mov	r1, r3
 800b568:	4610      	mov	r0, r2
 800b56a:	f000 f90e 	bl	800b78a <TIM_ITRx_SetConfig>
      break;
 800b56e:	e003      	b.n	800b578 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	73fb      	strb	r3, [r7, #15]
      break;
 800b574:	e000      	b.n	800b578 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b59a:	bf00      	nop
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc80      	pop	{r7}
 800b5a2:	4770      	bx	lr

0800b5a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bc80      	pop	{r7}
 800b5b4:	4770      	bx	lr

0800b5b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bc80      	pop	{r7}
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bc80      	pop	{r7}
 800b5d8:	4770      	bx	lr
	...

0800b5dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a33      	ldr	r2, [pc, #204]	; (800b6bc <TIM_Base_SetConfig+0xe0>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d013      	beq.n	800b61c <TIM_Base_SetConfig+0x40>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a32      	ldr	r2, [pc, #200]	; (800b6c0 <TIM_Base_SetConfig+0xe4>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d00f      	beq.n	800b61c <TIM_Base_SetConfig+0x40>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b602:	d00b      	beq.n	800b61c <TIM_Base_SetConfig+0x40>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a2f      	ldr	r2, [pc, #188]	; (800b6c4 <TIM_Base_SetConfig+0xe8>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d007      	beq.n	800b61c <TIM_Base_SetConfig+0x40>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a2e      	ldr	r2, [pc, #184]	; (800b6c8 <TIM_Base_SetConfig+0xec>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d003      	beq.n	800b61c <TIM_Base_SetConfig+0x40>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a2d      	ldr	r2, [pc, #180]	; (800b6cc <TIM_Base_SetConfig+0xf0>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d108      	bne.n	800b62e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a22      	ldr	r2, [pc, #136]	; (800b6bc <TIM_Base_SetConfig+0xe0>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d013      	beq.n	800b65e <TIM_Base_SetConfig+0x82>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a21      	ldr	r2, [pc, #132]	; (800b6c0 <TIM_Base_SetConfig+0xe4>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d00f      	beq.n	800b65e <TIM_Base_SetConfig+0x82>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b644:	d00b      	beq.n	800b65e <TIM_Base_SetConfig+0x82>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a1e      	ldr	r2, [pc, #120]	; (800b6c4 <TIM_Base_SetConfig+0xe8>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d007      	beq.n	800b65e <TIM_Base_SetConfig+0x82>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a1d      	ldr	r2, [pc, #116]	; (800b6c8 <TIM_Base_SetConfig+0xec>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d003      	beq.n	800b65e <TIM_Base_SetConfig+0x82>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a1c      	ldr	r2, [pc, #112]	; (800b6cc <TIM_Base_SetConfig+0xf0>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d108      	bne.n	800b670 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a09      	ldr	r2, [pc, #36]	; (800b6bc <TIM_Base_SetConfig+0xe0>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d003      	beq.n	800b6a4 <TIM_Base_SetConfig+0xc8>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a08      	ldr	r2, [pc, #32]	; (800b6c0 <TIM_Base_SetConfig+0xe4>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d103      	bne.n	800b6ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	691a      	ldr	r2, [r3, #16]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	615a      	str	r2, [r3, #20]
}
 800b6b2:	bf00      	nop
 800b6b4:	3714      	adds	r7, #20
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bc80      	pop	{r7}
 800b6ba:	4770      	bx	lr
 800b6bc:	40012c00 	.word	0x40012c00
 800b6c0:	40013400 	.word	0x40013400
 800b6c4:	40000400 	.word	0x40000400
 800b6c8:	40000800 	.word	0x40000800
 800b6cc:	40000c00 	.word	0x40000c00

0800b6d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6a1b      	ldr	r3, [r3, #32]
 800b6e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	f023 0201 	bic.w	r2, r3, #1
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	011b      	lsls	r3, r3, #4
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	4313      	orrs	r3, r2
 800b704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	f023 030a 	bic.w	r3, r3, #10
 800b70c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4313      	orrs	r3, r2
 800b714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	621a      	str	r2, [r3, #32]
}
 800b722:	bf00      	nop
 800b724:	371c      	adds	r7, #28
 800b726:	46bd      	mov	sp, r7
 800b728:	bc80      	pop	{r7}
 800b72a:	4770      	bx	lr

0800b72c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a1b      	ldr	r3, [r3, #32]
 800b73c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6a1b      	ldr	r3, [r3, #32]
 800b742:	f023 0210 	bic.w	r2, r3, #16
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	699b      	ldr	r3, [r3, #24]
 800b74e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	031b      	lsls	r3, r3, #12
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	4313      	orrs	r3, r2
 800b760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b768:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	011b      	lsls	r3, r3, #4
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	4313      	orrs	r3, r2
 800b772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	621a      	str	r2, [r3, #32]
}
 800b780:	bf00      	nop
 800b782:	371c      	adds	r7, #28
 800b784:	46bd      	mov	sp, r7
 800b786:	bc80      	pop	{r7}
 800b788:	4770      	bx	lr

0800b78a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b085      	sub	sp, #20
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	f043 0307 	orr.w	r3, r3, #7
 800b7ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	609a      	str	r2, [r3, #8]
}
 800b7b4:	bf00      	nop
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bc80      	pop	{r7}
 800b7bc:	4770      	bx	lr

0800b7be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b087      	sub	sp, #28
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	60f8      	str	r0, [r7, #12]
 800b7c6:	60b9      	str	r1, [r7, #8]
 800b7c8:	607a      	str	r2, [r7, #4]
 800b7ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	021a      	lsls	r2, r3, #8
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	609a      	str	r2, [r3, #8]
}
 800b7f2:	bf00      	nop
 800b7f4:	371c      	adds	r7, #28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bc80      	pop	{r7}
 800b7fa:	4770      	bx	lr

0800b7fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d101      	bne.n	800b814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b810:	2302      	movs	r3, #2
 800b812:	e050      	b.n	800b8b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2202      	movs	r2, #2
 800b820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b83a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a1b      	ldr	r2, [pc, #108]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d018      	beq.n	800b88a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a19      	ldr	r2, [pc, #100]	; (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d013      	beq.n	800b88a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b86a:	d00e      	beq.n	800b88a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a15      	ldr	r2, [pc, #84]	; (800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d009      	beq.n	800b88a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a14      	ldr	r2, [pc, #80]	; (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d004      	beq.n	800b88a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a12      	ldr	r2, [pc, #72]	; (800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d10c      	bne.n	800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bc80      	pop	{r7}
 800b8be:	4770      	bx	lr
 800b8c0:	40012c00 	.word	0x40012c00
 800b8c4:	40013400 	.word	0x40013400
 800b8c8:	40000400 	.word	0x40000400
 800b8cc:	40000800 	.word	0x40000800
 800b8d0:	40000c00 	.word	0x40000c00

0800b8d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr

0800b8e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8ee:	bf00      	nop
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bc80      	pop	{r7}
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e042      	b.n	800b990 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7fc fe1a 	bl	8008558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2224      	movs	r2, #36	; 0x24
 800b928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68da      	ldr	r2, [r3, #12]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b93a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fcb5 	bl	800c2ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	691a      	ldr	r2, [r3, #16]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	695a      	ldr	r2, [r3, #20]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2220      	movs	r2, #32
 800b984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b20      	cmp	r3, #32
 800b9b0:	d121      	bne.n	800b9f6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <HAL_UART_Transmit_IT+0x26>
 800b9b8:	88fb      	ldrh	r3, [r7, #6]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e01a      	b.n	800b9f8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	88fa      	ldrh	r2, [r7, #6]
 800b9cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	88fa      	ldrh	r2, [r7, #6]
 800b9d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2221      	movs	r2, #33	; 0x21
 800b9de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68da      	ldr	r2, [r3, #12]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e000      	b.n	800b9f8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b9f6:	2302      	movs	r3, #2
  }
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bc80      	pop	{r7}
 800ba00:	4770      	bx	lr
	...

0800ba04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b0ba      	sub	sp, #232	; 0xe8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba30:	2300      	movs	r3, #0
 800ba32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba3a:	f003 030f 	and.w	r3, r3, #15
 800ba3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10f      	bne.n	800ba6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba4e:	f003 0320 	and.w	r3, r3, #32
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d009      	beq.n	800ba6a <HAL_UART_IRQHandler+0x66>
 800ba56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5a:	f003 0320 	and.w	r3, r3, #32
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 fb63 	bl	800c12e <UART_Receive_IT>
      return;
 800ba68:	e25b      	b.n	800bf22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 80de 	beq.w	800bc30 <HAL_UART_IRQHandler+0x22c>
 800ba74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d106      	bne.n	800ba8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 80d1 	beq.w	800bc30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00b      	beq.n	800bab2 <HAL_UART_IRQHandler+0xae>
 800ba9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d005      	beq.n	800bab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baaa:	f043 0201 	orr.w	r2, r3, #1
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab6:	f003 0304 	and.w	r3, r3, #4
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00b      	beq.n	800bad6 <HAL_UART_IRQHandler+0xd2>
 800babe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bac2:	f003 0301 	and.w	r3, r3, #1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bace:	f043 0202 	orr.w	r2, r3, #2
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00b      	beq.n	800bafa <HAL_UART_IRQHandler+0xf6>
 800bae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	d005      	beq.n	800bafa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf2:	f043 0204 	orr.w	r2, r3, #4
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bafe:	f003 0308 	and.w	r3, r3, #8
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d011      	beq.n	800bb2a <HAL_UART_IRQHandler+0x126>
 800bb06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb0a:	f003 0320 	and.w	r3, r3, #32
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d105      	bne.n	800bb1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d005      	beq.n	800bb2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb22:	f043 0208 	orr.w	r2, r3, #8
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f000 81f2 	beq.w	800bf18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d008      	beq.n	800bb52 <HAL_UART_IRQHandler+0x14e>
 800bb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb44:	f003 0320 	and.w	r3, r3, #32
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 faee 	bl	800c12e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	695b      	ldr	r3, [r3, #20]
 800bb58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	bf14      	ite	ne
 800bb60:	2301      	movne	r3, #1
 800bb62:	2300      	moveq	r3, #0
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb6e:	f003 0308 	and.w	r3, r3, #8
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d103      	bne.n	800bb7e <HAL_UART_IRQHandler+0x17a>
 800bb76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d04f      	beq.n	800bc1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f9f8 	bl	800bf74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d041      	beq.n	800bc16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3314      	adds	r3, #20
 800bb98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bba0:	e853 3f00 	ldrex	r3, [r3]
 800bba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bbac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3314      	adds	r3, #20
 800bbba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbce:	e841 2300 	strex	r3, r2, [r1]
 800bbd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1d9      	bne.n	800bb92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d013      	beq.n	800bc0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbea:	4a7e      	ldr	r2, [pc, #504]	; (800bde4 <HAL_UART_IRQHandler+0x3e0>)
 800bbec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fd f86c 	bl	8008cd0 <HAL_DMA_Abort_IT>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d016      	beq.n	800bc2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc08:	4610      	mov	r0, r2
 800bc0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc0c:	e00e      	b.n	800bc2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f99c 	bl	800bf4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc14:	e00a      	b.n	800bc2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f998 	bl	800bf4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc1c:	e006      	b.n	800bc2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f994 	bl	800bf4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc2a:	e175      	b.n	800bf18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2c:	bf00      	nop
    return;
 800bc2e:	e173      	b.n	800bf18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	f040 814f 	bne.w	800bed8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc3e:	f003 0310 	and.w	r3, r3, #16
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 8148 	beq.w	800bed8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc4c:	f003 0310 	and.w	r3, r3, #16
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 8141 	beq.w	800bed8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc56:	2300      	movs	r3, #0
 800bc58:	60bb      	str	r3, [r7, #8]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	60bb      	str	r3, [r7, #8]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	60bb      	str	r3, [r7, #8]
 800bc6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 80b6 	beq.w	800bde8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 8145 	beq.w	800bf1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	f080 813e 	bcs.w	800bf1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	2b20      	cmp	r3, #32
 800bcb0:	f000 8088 	beq.w	800bdc4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	330c      	adds	r3, #12
 800bcba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcc2:	e853 3f00 	ldrex	r3, [r3]
 800bcc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bcca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	330c      	adds	r3, #12
 800bcdc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bce0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bcec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bcf0:	e841 2300 	strex	r3, r2, [r1]
 800bcf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bcf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1d9      	bne.n	800bcb4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3314      	adds	r3, #20
 800bd06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd0a:	e853 3f00 	ldrex	r3, [r3]
 800bd0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd12:	f023 0301 	bic.w	r3, r3, #1
 800bd16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3314      	adds	r3, #20
 800bd20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd30:	e841 2300 	strex	r3, r2, [r1]
 800bd34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e1      	bne.n	800bd00 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3314      	adds	r3, #20
 800bd42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd46:	e853 3f00 	ldrex	r3, [r3]
 800bd4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3314      	adds	r3, #20
 800bd5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd60:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd68:	e841 2300 	strex	r3, r2, [r1]
 800bd6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e3      	bne.n	800bd3c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2220      	movs	r2, #32
 800bd78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	330c      	adds	r3, #12
 800bd88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd8c:	e853 3f00 	ldrex	r3, [r3]
 800bd90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd94:	f023 0310 	bic.w	r3, r3, #16
 800bd98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	330c      	adds	r3, #12
 800bda2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bda6:	65ba      	str	r2, [r7, #88]	; 0x58
 800bda8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdae:	e841 2300 	strex	r3, r2, [r1]
 800bdb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bdb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e3      	bne.n	800bd82 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fc ff4b 	bl	8008c5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f8bf 	bl	800bf5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bde0:	e09c      	b.n	800bf1c <HAL_UART_IRQHandler+0x518>
 800bde2:	bf00      	nop
 800bde4:	0800c039 	.word	0x0800c039
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f000 808e 	beq.w	800bf20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f000 8089 	beq.w	800bf20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	330c      	adds	r3, #12
 800be14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be18:	e853 3f00 	ldrex	r3, [r3]
 800be1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	330c      	adds	r3, #12
 800be2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be32:	647a      	str	r2, [r7, #68]	; 0x44
 800be34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be3a:	e841 2300 	strex	r3, r2, [r1]
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1e3      	bne.n	800be0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3314      	adds	r3, #20
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	e853 3f00 	ldrex	r3, [r3]
 800be54:	623b      	str	r3, [r7, #32]
   return(result);
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	f023 0301 	bic.w	r3, r3, #1
 800be5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3314      	adds	r3, #20
 800be66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be6a:	633a      	str	r2, [r7, #48]	; 0x30
 800be6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e3      	bne.n	800be46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2220      	movs	r2, #32
 800be82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	330c      	adds	r3, #12
 800be92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	e853 3f00 	ldrex	r3, [r3]
 800be9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f023 0310 	bic.w	r3, r3, #16
 800bea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	330c      	adds	r3, #12
 800beac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800beb0:	61fa      	str	r2, [r7, #28]
 800beb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	69b9      	ldr	r1, [r7, #24]
 800beb6:	69fa      	ldr	r2, [r7, #28]
 800beb8:	e841 2300 	strex	r3, r2, [r1]
 800bebc:	617b      	str	r3, [r7, #20]
   return(result);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e3      	bne.n	800be8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2202      	movs	r2, #2
 800bec8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800beca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f844 	bl	800bf5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bed6:	e023      	b.n	800bf20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bedc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d009      	beq.n	800bef8 <HAL_UART_IRQHandler+0x4f4>
 800bee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beec:	2b00      	cmp	r3, #0
 800beee:	d003      	beq.n	800bef8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 f8b5 	bl	800c060 <UART_Transmit_IT>
    return;
 800bef6:	e014      	b.n	800bf22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800befc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00e      	beq.n	800bf22 <HAL_UART_IRQHandler+0x51e>
 800bf04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d008      	beq.n	800bf22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f8f4 	bl	800c0fe <UART_EndTransmit_IT>
    return;
 800bf16:	e004      	b.n	800bf22 <HAL_UART_IRQHandler+0x51e>
    return;
 800bf18:	bf00      	nop
 800bf1a:	e002      	b.n	800bf22 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf1c:	bf00      	nop
 800bf1e:	e000      	b.n	800bf22 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf20:	bf00      	nop
  }
}
 800bf22:	37e8      	adds	r7, #232	; 0xe8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bc80      	pop	{r7}
 800bf38:	4770      	bx	lr

0800bf3a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bc80      	pop	{r7}
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bc80      	pop	{r7}
 800bf5c:	4770      	bx	lr

0800bf5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	460b      	mov	r3, r1
 800bf68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf6a:	bf00      	nop
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bc80      	pop	{r7}
 800bf72:	4770      	bx	lr

0800bf74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b095      	sub	sp, #84	; 0x54
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	330c      	adds	r3, #12
 800bf82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf86:	e853 3f00 	ldrex	r3, [r3]
 800bf8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	330c      	adds	r3, #12
 800bf9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf9c:	643a      	str	r2, [r7, #64]	; 0x40
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfa4:	e841 2300 	strex	r3, r2, [r1]
 800bfa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1e5      	bne.n	800bf7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	3314      	adds	r3, #20
 800bfb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	e853 3f00 	ldrex	r3, [r3]
 800bfbe:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	f023 0301 	bic.w	r3, r3, #1
 800bfc6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3314      	adds	r3, #20
 800bfce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfd8:	e841 2300 	strex	r3, r2, [r1]
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1e5      	bne.n	800bfb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d119      	bne.n	800c020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	330c      	adds	r3, #12
 800bff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	e853 3f00 	ldrex	r3, [r3]
 800bffa:	60bb      	str	r3, [r7, #8]
   return(result);
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	f023 0310 	bic.w	r3, r3, #16
 800c002:	647b      	str	r3, [r7, #68]	; 0x44
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	330c      	adds	r3, #12
 800c00a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c00c:	61ba      	str	r2, [r7, #24]
 800c00e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c010:	6979      	ldr	r1, [r7, #20]
 800c012:	69ba      	ldr	r2, [r7, #24]
 800c014:	e841 2300 	strex	r3, r2, [r1]
 800c018:	613b      	str	r3, [r7, #16]
   return(result);
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1e5      	bne.n	800bfec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2220      	movs	r2, #32
 800c024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c02e:	bf00      	nop
 800c030:	3754      	adds	r7, #84	; 0x54
 800c032:	46bd      	mov	sp, r7
 800c034:	bc80      	pop	{r7}
 800c036:	4770      	bx	lr

0800c038 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f7ff ff7a 	bl	800bf4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c058:	bf00      	nop
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b21      	cmp	r3, #33	; 0x21
 800c072:	d13e      	bne.n	800c0f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c07c:	d114      	bne.n	800c0a8 <UART_Transmit_IT+0x48>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d110      	bne.n	800c0a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	881b      	ldrh	r3, [r3, #0]
 800c090:	461a      	mov	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c09a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a1b      	ldr	r3, [r3, #32]
 800c0a0:	1c9a      	adds	r2, r3, #2
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	621a      	str	r2, [r3, #32]
 800c0a6:	e008      	b.n	800c0ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	1c59      	adds	r1, r3, #1
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	6211      	str	r1, [r2, #32]
 800c0b2:	781a      	ldrb	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10f      	bne.n	800c0ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68da      	ldr	r2, [r3, #12]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68da      	ldr	r2, [r3, #12]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e000      	b.n	800c0f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0f2:	2302      	movs	r3, #2
  }
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bc80      	pop	{r7}
 800c0fc:	4770      	bx	lr

0800c0fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b082      	sub	sp, #8
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68da      	ldr	r2, [r3, #12]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2220      	movs	r2, #32
 800c11a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff ff02 	bl	800bf28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b08c      	sub	sp, #48	; 0x30
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2b22      	cmp	r3, #34	; 0x22
 800c140:	f040 80ae 	bne.w	800c2a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c14c:	d117      	bne.n	800c17e <UART_Receive_IT+0x50>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d113      	bne.n	800c17e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c156:	2300      	movs	r3, #0
 800c158:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	b29b      	uxth	r3, r3
 800c168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c176:	1c9a      	adds	r2, r3, #2
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	629a      	str	r2, [r3, #40]	; 0x28
 800c17c:	e026      	b.n	800c1cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c184:	2300      	movs	r3, #0
 800c186:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c190:	d007      	beq.n	800c1a2 <UART_Receive_IT+0x74>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <UART_Receive_IT+0x82>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d106      	bne.n	800c1b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	701a      	strb	r2, [r3, #0]
 800c1ae:	e008      	b.n	800c1c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d15d      	bne.n	800c29c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f022 0220 	bic.w	r2, r2, #32
 800c1ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68da      	ldr	r2, [r3, #12]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	695a      	ldr	r2, [r3, #20]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f022 0201 	bic.w	r2, r2, #1
 800c20e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2220      	movs	r2, #32
 800c214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c222:	2b01      	cmp	r3, #1
 800c224:	d135      	bne.n	800c292 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	330c      	adds	r3, #12
 800c232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	e853 3f00 	ldrex	r3, [r3]
 800c23a:	613b      	str	r3, [r7, #16]
   return(result);
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f023 0310 	bic.w	r3, r3, #16
 800c242:	627b      	str	r3, [r7, #36]	; 0x24
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	330c      	adds	r3, #12
 800c24a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c24c:	623a      	str	r2, [r7, #32]
 800c24e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c250:	69f9      	ldr	r1, [r7, #28]
 800c252:	6a3a      	ldr	r2, [r7, #32]
 800c254:	e841 2300 	strex	r3, r2, [r1]
 800c258:	61bb      	str	r3, [r7, #24]
   return(result);
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e5      	bne.n	800c22c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f003 0310 	and.w	r3, r3, #16
 800c26a:	2b10      	cmp	r3, #16
 800c26c:	d10a      	bne.n	800c284 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c26e:	2300      	movs	r3, #0
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60fb      	str	r3, [r7, #12]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff fe67 	bl	800bf5e <HAL_UARTEx_RxEventCallback>
 800c290:	e002      	b.n	800c298 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff fe51 	bl	800bf3a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	e002      	b.n	800c2a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	e000      	b.n	800c2a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2a0:	2302      	movs	r3, #2
  }
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3730      	adds	r7, #48	; 0x30
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68da      	ldr	r2, [r3, #12]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	689a      	ldr	r2, [r3, #8]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c2e6:	f023 030c 	bic.w	r3, r3, #12
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	6812      	ldr	r2, [r2, #0]
 800c2ee:	68b9      	ldr	r1, [r7, #8]
 800c2f0:	430b      	orrs	r3, r1
 800c2f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	699a      	ldr	r2, [r3, #24]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	430a      	orrs	r2, r1
 800c308:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a2c      	ldr	r2, [pc, #176]	; (800c3c0 <UART_SetConfig+0x114>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d103      	bne.n	800c31c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c314:	f7fe fe8c 	bl	800b030 <HAL_RCC_GetPCLK2Freq>
 800c318:	60f8      	str	r0, [r7, #12]
 800c31a:	e002      	b.n	800c322 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c31c:	f7fe fe74 	bl	800b008 <HAL_RCC_GetPCLK1Freq>
 800c320:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009a      	lsls	r2, r3, #2
 800c32c:	441a      	add	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	fbb2 f3f3 	udiv	r3, r2, r3
 800c338:	4a22      	ldr	r2, [pc, #136]	; (800c3c4 <UART_SetConfig+0x118>)
 800c33a:	fba2 2303 	umull	r2, r3, r2, r3
 800c33e:	095b      	lsrs	r3, r3, #5
 800c340:	0119      	lsls	r1, r3, #4
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	4613      	mov	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	009a      	lsls	r2, r3, #2
 800c34c:	441a      	add	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	fbb2 f2f3 	udiv	r2, r2, r3
 800c358:	4b1a      	ldr	r3, [pc, #104]	; (800c3c4 <UART_SetConfig+0x118>)
 800c35a:	fba3 0302 	umull	r0, r3, r3, r2
 800c35e:	095b      	lsrs	r3, r3, #5
 800c360:	2064      	movs	r0, #100	; 0x64
 800c362:	fb00 f303 	mul.w	r3, r0, r3
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	011b      	lsls	r3, r3, #4
 800c36a:	3332      	adds	r3, #50	; 0x32
 800c36c:	4a15      	ldr	r2, [pc, #84]	; (800c3c4 <UART_SetConfig+0x118>)
 800c36e:	fba2 2303 	umull	r2, r3, r2, r3
 800c372:	095b      	lsrs	r3, r3, #5
 800c374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c378:	4419      	add	r1, r3
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009a      	lsls	r2, r3, #2
 800c384:	441a      	add	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c390:	4b0c      	ldr	r3, [pc, #48]	; (800c3c4 <UART_SetConfig+0x118>)
 800c392:	fba3 0302 	umull	r0, r3, r3, r2
 800c396:	095b      	lsrs	r3, r3, #5
 800c398:	2064      	movs	r0, #100	; 0x64
 800c39a:	fb00 f303 	mul.w	r3, r0, r3
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	011b      	lsls	r3, r3, #4
 800c3a2:	3332      	adds	r3, #50	; 0x32
 800c3a4:	4a07      	ldr	r2, [pc, #28]	; (800c3c4 <UART_SetConfig+0x118>)
 800c3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3aa:	095b      	lsrs	r3, r3, #5
 800c3ac:	f003 020f 	and.w	r2, r3, #15
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	440a      	add	r2, r1
 800c3b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c3b8:	bf00      	nop
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	40013800 	.word	0x40013800
 800c3c4:	51eb851f 	.word	0x51eb851f

0800c3c8 <__itoa>:
 800c3c8:	1e93      	subs	r3, r2, #2
 800c3ca:	2b22      	cmp	r3, #34	; 0x22
 800c3cc:	b510      	push	{r4, lr}
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	d904      	bls.n	800c3dc <__itoa+0x14>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	461c      	mov	r4, r3
 800c3d6:	700b      	strb	r3, [r1, #0]
 800c3d8:	4620      	mov	r0, r4
 800c3da:	bd10      	pop	{r4, pc}
 800c3dc:	2a0a      	cmp	r2, #10
 800c3de:	d109      	bne.n	800c3f4 <__itoa+0x2c>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	da07      	bge.n	800c3f4 <__itoa+0x2c>
 800c3e4:	232d      	movs	r3, #45	; 0x2d
 800c3e6:	700b      	strb	r3, [r1, #0]
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	4240      	negs	r0, r0
 800c3ec:	4421      	add	r1, r4
 800c3ee:	f000 f8d9 	bl	800c5a4 <__utoa>
 800c3f2:	e7f1      	b.n	800c3d8 <__itoa+0x10>
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	e7f9      	b.n	800c3ec <__itoa+0x24>

0800c3f8 <itoa>:
 800c3f8:	f7ff bfe6 	b.w	800c3c8 <__itoa>

0800c3fc <malloc>:
 800c3fc:	4b02      	ldr	r3, [pc, #8]	; (800c408 <malloc+0xc>)
 800c3fe:	4601      	mov	r1, r0
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	f000 b823 	b.w	800c44c <_malloc_r>
 800c406:	bf00      	nop
 800c408:	20000108 	.word	0x20000108

0800c40c <sbrk_aligned>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	4e0e      	ldr	r6, [pc, #56]	; (800c448 <sbrk_aligned+0x3c>)
 800c410:	460c      	mov	r4, r1
 800c412:	6831      	ldr	r1, [r6, #0]
 800c414:	4605      	mov	r5, r0
 800c416:	b911      	cbnz	r1, 800c41e <sbrk_aligned+0x12>
 800c418:	f000 f91e 	bl	800c658 <_sbrk_r>
 800c41c:	6030      	str	r0, [r6, #0]
 800c41e:	4621      	mov	r1, r4
 800c420:	4628      	mov	r0, r5
 800c422:	f000 f919 	bl	800c658 <_sbrk_r>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d00a      	beq.n	800c440 <sbrk_aligned+0x34>
 800c42a:	1cc4      	adds	r4, r0, #3
 800c42c:	f024 0403 	bic.w	r4, r4, #3
 800c430:	42a0      	cmp	r0, r4
 800c432:	d007      	beq.n	800c444 <sbrk_aligned+0x38>
 800c434:	1a21      	subs	r1, r4, r0
 800c436:	4628      	mov	r0, r5
 800c438:	f000 f90e 	bl	800c658 <_sbrk_r>
 800c43c:	3001      	adds	r0, #1
 800c43e:	d101      	bne.n	800c444 <sbrk_aligned+0x38>
 800c440:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c444:	4620      	mov	r0, r4
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	20000474 	.word	0x20000474

0800c44c <_malloc_r>:
 800c44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c450:	1ccd      	adds	r5, r1, #3
 800c452:	f025 0503 	bic.w	r5, r5, #3
 800c456:	3508      	adds	r5, #8
 800c458:	2d0c      	cmp	r5, #12
 800c45a:	bf38      	it	cc
 800c45c:	250c      	movcc	r5, #12
 800c45e:	2d00      	cmp	r5, #0
 800c460:	4607      	mov	r7, r0
 800c462:	db01      	blt.n	800c468 <_malloc_r+0x1c>
 800c464:	42a9      	cmp	r1, r5
 800c466:	d905      	bls.n	800c474 <_malloc_r+0x28>
 800c468:	230c      	movs	r3, #12
 800c46a:	2600      	movs	r6, #0
 800c46c:	603b      	str	r3, [r7, #0]
 800c46e:	4630      	mov	r0, r6
 800c470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c548 <_malloc_r+0xfc>
 800c478:	f000 f868 	bl	800c54c <__malloc_lock>
 800c47c:	f8d8 3000 	ldr.w	r3, [r8]
 800c480:	461c      	mov	r4, r3
 800c482:	bb5c      	cbnz	r4, 800c4dc <_malloc_r+0x90>
 800c484:	4629      	mov	r1, r5
 800c486:	4638      	mov	r0, r7
 800c488:	f7ff ffc0 	bl	800c40c <sbrk_aligned>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	4604      	mov	r4, r0
 800c490:	d155      	bne.n	800c53e <_malloc_r+0xf2>
 800c492:	f8d8 4000 	ldr.w	r4, [r8]
 800c496:	4626      	mov	r6, r4
 800c498:	2e00      	cmp	r6, #0
 800c49a:	d145      	bne.n	800c528 <_malloc_r+0xdc>
 800c49c:	2c00      	cmp	r4, #0
 800c49e:	d048      	beq.n	800c532 <_malloc_r+0xe6>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	eb04 0903 	add.w	r9, r4, r3
 800c4aa:	f000 f8d5 	bl	800c658 <_sbrk_r>
 800c4ae:	4581      	cmp	r9, r0
 800c4b0:	d13f      	bne.n	800c532 <_malloc_r+0xe6>
 800c4b2:	6821      	ldr	r1, [r4, #0]
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	1a6d      	subs	r5, r5, r1
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f7ff ffa7 	bl	800c40c <sbrk_aligned>
 800c4be:	3001      	adds	r0, #1
 800c4c0:	d037      	beq.n	800c532 <_malloc_r+0xe6>
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	442b      	add	r3, r5
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d038      	beq.n	800c542 <_malloc_r+0xf6>
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	42a2      	cmp	r2, r4
 800c4d4:	d12b      	bne.n	800c52e <_malloc_r+0xe2>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	605a      	str	r2, [r3, #4]
 800c4da:	e00f      	b.n	800c4fc <_malloc_r+0xb0>
 800c4dc:	6822      	ldr	r2, [r4, #0]
 800c4de:	1b52      	subs	r2, r2, r5
 800c4e0:	d41f      	bmi.n	800c522 <_malloc_r+0xd6>
 800c4e2:	2a0b      	cmp	r2, #11
 800c4e4:	d917      	bls.n	800c516 <_malloc_r+0xca>
 800c4e6:	1961      	adds	r1, r4, r5
 800c4e8:	42a3      	cmp	r3, r4
 800c4ea:	6025      	str	r5, [r4, #0]
 800c4ec:	bf18      	it	ne
 800c4ee:	6059      	strne	r1, [r3, #4]
 800c4f0:	6863      	ldr	r3, [r4, #4]
 800c4f2:	bf08      	it	eq
 800c4f4:	f8c8 1000 	streq.w	r1, [r8]
 800c4f8:	5162      	str	r2, [r4, r5]
 800c4fa:	604b      	str	r3, [r1, #4]
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	f104 060b 	add.w	r6, r4, #11
 800c502:	f000 f829 	bl	800c558 <__malloc_unlock>
 800c506:	f026 0607 	bic.w	r6, r6, #7
 800c50a:	1d23      	adds	r3, r4, #4
 800c50c:	1af2      	subs	r2, r6, r3
 800c50e:	d0ae      	beq.n	800c46e <_malloc_r+0x22>
 800c510:	1b9b      	subs	r3, r3, r6
 800c512:	50a3      	str	r3, [r4, r2]
 800c514:	e7ab      	b.n	800c46e <_malloc_r+0x22>
 800c516:	42a3      	cmp	r3, r4
 800c518:	6862      	ldr	r2, [r4, #4]
 800c51a:	d1dd      	bne.n	800c4d8 <_malloc_r+0x8c>
 800c51c:	f8c8 2000 	str.w	r2, [r8]
 800c520:	e7ec      	b.n	800c4fc <_malloc_r+0xb0>
 800c522:	4623      	mov	r3, r4
 800c524:	6864      	ldr	r4, [r4, #4]
 800c526:	e7ac      	b.n	800c482 <_malloc_r+0x36>
 800c528:	4634      	mov	r4, r6
 800c52a:	6876      	ldr	r6, [r6, #4]
 800c52c:	e7b4      	b.n	800c498 <_malloc_r+0x4c>
 800c52e:	4613      	mov	r3, r2
 800c530:	e7cc      	b.n	800c4cc <_malloc_r+0x80>
 800c532:	230c      	movs	r3, #12
 800c534:	4638      	mov	r0, r7
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	f000 f80e 	bl	800c558 <__malloc_unlock>
 800c53c:	e797      	b.n	800c46e <_malloc_r+0x22>
 800c53e:	6025      	str	r5, [r4, #0]
 800c540:	e7dc      	b.n	800c4fc <_malloc_r+0xb0>
 800c542:	605b      	str	r3, [r3, #4]
 800c544:	deff      	udf	#255	; 0xff
 800c546:	bf00      	nop
 800c548:	20000470 	.word	0x20000470

0800c54c <__malloc_lock>:
 800c54c:	4801      	ldr	r0, [pc, #4]	; (800c554 <__malloc_lock+0x8>)
 800c54e:	f000 b8bd 	b.w	800c6cc <__retarget_lock_acquire_recursive>
 800c552:	bf00      	nop
 800c554:	200005b0 	.word	0x200005b0

0800c558 <__malloc_unlock>:
 800c558:	4801      	ldr	r0, [pc, #4]	; (800c560 <__malloc_unlock+0x8>)
 800c55a:	f000 b8b8 	b.w	800c6ce <__retarget_lock_release_recursive>
 800c55e:	bf00      	nop
 800c560:	200005b0 	.word	0x200005b0

0800c564 <siprintf>:
 800c564:	b40e      	push	{r1, r2, r3}
 800c566:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c56a:	b500      	push	{lr}
 800c56c:	b09c      	sub	sp, #112	; 0x70
 800c56e:	ab1d      	add	r3, sp, #116	; 0x74
 800c570:	9002      	str	r0, [sp, #8]
 800c572:	9006      	str	r0, [sp, #24]
 800c574:	9107      	str	r1, [sp, #28]
 800c576:	9104      	str	r1, [sp, #16]
 800c578:	4808      	ldr	r0, [pc, #32]	; (800c59c <siprintf+0x38>)
 800c57a:	4909      	ldr	r1, [pc, #36]	; (800c5a0 <siprintf+0x3c>)
 800c57c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c580:	9105      	str	r1, [sp, #20]
 800c582:	6800      	ldr	r0, [r0, #0]
 800c584:	a902      	add	r1, sp, #8
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	f000 f94c 	bl	800c824 <_svfiprintf_r>
 800c58c:	2200      	movs	r2, #0
 800c58e:	9b02      	ldr	r3, [sp, #8]
 800c590:	701a      	strb	r2, [r3, #0]
 800c592:	b01c      	add	sp, #112	; 0x70
 800c594:	f85d eb04 	ldr.w	lr, [sp], #4
 800c598:	b003      	add	sp, #12
 800c59a:	4770      	bx	lr
 800c59c:	20000108 	.word	0x20000108
 800c5a0:	ffff0208 	.word	0xffff0208

0800c5a4 <__utoa>:
 800c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5a6:	b08b      	sub	sp, #44	; 0x2c
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	466e      	mov	r6, sp
 800c5ae:	4c1d      	ldr	r4, [pc, #116]	; (800c624 <__utoa+0x80>)
 800c5b0:	f104 0c20 	add.w	ip, r4, #32
 800c5b4:	4637      	mov	r7, r6
 800c5b6:	6820      	ldr	r0, [r4, #0]
 800c5b8:	6861      	ldr	r1, [r4, #4]
 800c5ba:	3408      	adds	r4, #8
 800c5bc:	c703      	stmia	r7!, {r0, r1}
 800c5be:	4564      	cmp	r4, ip
 800c5c0:	463e      	mov	r6, r7
 800c5c2:	d1f7      	bne.n	800c5b4 <__utoa+0x10>
 800c5c4:	7921      	ldrb	r1, [r4, #4]
 800c5c6:	6820      	ldr	r0, [r4, #0]
 800c5c8:	7139      	strb	r1, [r7, #4]
 800c5ca:	1e91      	subs	r1, r2, #2
 800c5cc:	2922      	cmp	r1, #34	; 0x22
 800c5ce:	6038      	str	r0, [r7, #0]
 800c5d0:	f04f 0100 	mov.w	r1, #0
 800c5d4:	d904      	bls.n	800c5e0 <__utoa+0x3c>
 800c5d6:	7019      	strb	r1, [r3, #0]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4618      	mov	r0, r3
 800c5dc:	b00b      	add	sp, #44	; 0x2c
 800c5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5e0:	1e58      	subs	r0, r3, #1
 800c5e2:	4684      	mov	ip, r0
 800c5e4:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5e8:	fb02 5617 	mls	r6, r2, r7, r5
 800c5ec:	3628      	adds	r6, #40	; 0x28
 800c5ee:	446e      	add	r6, sp
 800c5f0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5fa:	462e      	mov	r6, r5
 800c5fc:	42b2      	cmp	r2, r6
 800c5fe:	463d      	mov	r5, r7
 800c600:	f101 0101 	add.w	r1, r1, #1
 800c604:	d9ee      	bls.n	800c5e4 <__utoa+0x40>
 800c606:	2200      	movs	r2, #0
 800c608:	545a      	strb	r2, [r3, r1]
 800c60a:	1919      	adds	r1, r3, r4
 800c60c:	1aa5      	subs	r5, r4, r2
 800c60e:	42aa      	cmp	r2, r5
 800c610:	dae3      	bge.n	800c5da <__utoa+0x36>
 800c612:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c616:	780e      	ldrb	r6, [r1, #0]
 800c618:	3201      	adds	r2, #1
 800c61a:	7006      	strb	r6, [r0, #0]
 800c61c:	f801 5901 	strb.w	r5, [r1], #-1
 800c620:	e7f4      	b.n	800c60c <__utoa+0x68>
 800c622:	bf00      	nop
 800c624:	0800de1e 	.word	0x0800de1e

0800c628 <strcat>:
 800c628:	4602      	mov	r2, r0
 800c62a:	b510      	push	{r4, lr}
 800c62c:	7814      	ldrb	r4, [r2, #0]
 800c62e:	4613      	mov	r3, r2
 800c630:	3201      	adds	r2, #1
 800c632:	2c00      	cmp	r4, #0
 800c634:	d1fa      	bne.n	800c62c <strcat+0x4>
 800c636:	3b01      	subs	r3, #1
 800c638:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c63c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c640:	2a00      	cmp	r2, #0
 800c642:	d1f9      	bne.n	800c638 <strcat+0x10>
 800c644:	bd10      	pop	{r4, pc}

0800c646 <memset>:
 800c646:	4603      	mov	r3, r0
 800c648:	4402      	add	r2, r0
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d100      	bne.n	800c650 <memset+0xa>
 800c64e:	4770      	bx	lr
 800c650:	f803 1b01 	strb.w	r1, [r3], #1
 800c654:	e7f9      	b.n	800c64a <memset+0x4>
	...

0800c658 <_sbrk_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	2300      	movs	r3, #0
 800c65c:	4d05      	ldr	r5, [pc, #20]	; (800c674 <_sbrk_r+0x1c>)
 800c65e:	4604      	mov	r4, r0
 800c660:	4608      	mov	r0, r1
 800c662:	602b      	str	r3, [r5, #0]
 800c664:	f7fc f808 	bl	8008678 <_sbrk>
 800c668:	1c43      	adds	r3, r0, #1
 800c66a:	d102      	bne.n	800c672 <_sbrk_r+0x1a>
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	b103      	cbz	r3, 800c672 <_sbrk_r+0x1a>
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	200005b4 	.word	0x200005b4

0800c678 <__errno>:
 800c678:	4b01      	ldr	r3, [pc, #4]	; (800c680 <__errno+0x8>)
 800c67a:	6818      	ldr	r0, [r3, #0]
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	20000108 	.word	0x20000108

0800c684 <__libc_init_array>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	2600      	movs	r6, #0
 800c688:	4d0c      	ldr	r5, [pc, #48]	; (800c6bc <__libc_init_array+0x38>)
 800c68a:	4c0d      	ldr	r4, [pc, #52]	; (800c6c0 <__libc_init_array+0x3c>)
 800c68c:	1b64      	subs	r4, r4, r5
 800c68e:	10a4      	asrs	r4, r4, #2
 800c690:	42a6      	cmp	r6, r4
 800c692:	d109      	bne.n	800c6a8 <__libc_init_array+0x24>
 800c694:	f000 fbc6 	bl	800ce24 <_init>
 800c698:	2600      	movs	r6, #0
 800c69a:	4d0a      	ldr	r5, [pc, #40]	; (800c6c4 <__libc_init_array+0x40>)
 800c69c:	4c0a      	ldr	r4, [pc, #40]	; (800c6c8 <__libc_init_array+0x44>)
 800c69e:	1b64      	subs	r4, r4, r5
 800c6a0:	10a4      	asrs	r4, r4, #2
 800c6a2:	42a6      	cmp	r6, r4
 800c6a4:	d105      	bne.n	800c6b2 <__libc_init_array+0x2e>
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ac:	4798      	blx	r3
 800c6ae:	3601      	adds	r6, #1
 800c6b0:	e7ee      	b.n	800c690 <__libc_init_array+0xc>
 800c6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b6:	4798      	blx	r3
 800c6b8:	3601      	adds	r6, #1
 800c6ba:	e7f2      	b.n	800c6a2 <__libc_init_array+0x1e>
 800c6bc:	0800de78 	.word	0x0800de78
 800c6c0:	0800de78 	.word	0x0800de78
 800c6c4:	0800de78 	.word	0x0800de78
 800c6c8:	0800de7c 	.word	0x0800de7c

0800c6cc <__retarget_lock_acquire_recursive>:
 800c6cc:	4770      	bx	lr

0800c6ce <__retarget_lock_release_recursive>:
 800c6ce:	4770      	bx	lr

0800c6d0 <strcpy>:
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6d6:	f803 2b01 	strb.w	r2, [r3], #1
 800c6da:	2a00      	cmp	r2, #0
 800c6dc:	d1f9      	bne.n	800c6d2 <strcpy+0x2>
 800c6de:	4770      	bx	lr

0800c6e0 <_free_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	2900      	cmp	r1, #0
 800c6e6:	d040      	beq.n	800c76a <_free_r+0x8a>
 800c6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ec:	1f0c      	subs	r4, r1, #4
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	bfb8      	it	lt
 800c6f2:	18e4      	addlt	r4, r4, r3
 800c6f4:	f7ff ff2a 	bl	800c54c <__malloc_lock>
 800c6f8:	4a1c      	ldr	r2, [pc, #112]	; (800c76c <_free_r+0x8c>)
 800c6fa:	6813      	ldr	r3, [r2, #0]
 800c6fc:	b933      	cbnz	r3, 800c70c <_free_r+0x2c>
 800c6fe:	6063      	str	r3, [r4, #4]
 800c700:	6014      	str	r4, [r2, #0]
 800c702:	4628      	mov	r0, r5
 800c704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c708:	f7ff bf26 	b.w	800c558 <__malloc_unlock>
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	d908      	bls.n	800c722 <_free_r+0x42>
 800c710:	6820      	ldr	r0, [r4, #0]
 800c712:	1821      	adds	r1, r4, r0
 800c714:	428b      	cmp	r3, r1
 800c716:	bf01      	itttt	eq
 800c718:	6819      	ldreq	r1, [r3, #0]
 800c71a:	685b      	ldreq	r3, [r3, #4]
 800c71c:	1809      	addeq	r1, r1, r0
 800c71e:	6021      	streq	r1, [r4, #0]
 800c720:	e7ed      	b.n	800c6fe <_free_r+0x1e>
 800c722:	461a      	mov	r2, r3
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	b10b      	cbz	r3, 800c72c <_free_r+0x4c>
 800c728:	42a3      	cmp	r3, r4
 800c72a:	d9fa      	bls.n	800c722 <_free_r+0x42>
 800c72c:	6811      	ldr	r1, [r2, #0]
 800c72e:	1850      	adds	r0, r2, r1
 800c730:	42a0      	cmp	r0, r4
 800c732:	d10b      	bne.n	800c74c <_free_r+0x6c>
 800c734:	6820      	ldr	r0, [r4, #0]
 800c736:	4401      	add	r1, r0
 800c738:	1850      	adds	r0, r2, r1
 800c73a:	4283      	cmp	r3, r0
 800c73c:	6011      	str	r1, [r2, #0]
 800c73e:	d1e0      	bne.n	800c702 <_free_r+0x22>
 800c740:	6818      	ldr	r0, [r3, #0]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	4408      	add	r0, r1
 800c746:	6010      	str	r0, [r2, #0]
 800c748:	6053      	str	r3, [r2, #4]
 800c74a:	e7da      	b.n	800c702 <_free_r+0x22>
 800c74c:	d902      	bls.n	800c754 <_free_r+0x74>
 800c74e:	230c      	movs	r3, #12
 800c750:	602b      	str	r3, [r5, #0]
 800c752:	e7d6      	b.n	800c702 <_free_r+0x22>
 800c754:	6820      	ldr	r0, [r4, #0]
 800c756:	1821      	adds	r1, r4, r0
 800c758:	428b      	cmp	r3, r1
 800c75a:	bf01      	itttt	eq
 800c75c:	6819      	ldreq	r1, [r3, #0]
 800c75e:	685b      	ldreq	r3, [r3, #4]
 800c760:	1809      	addeq	r1, r1, r0
 800c762:	6021      	streq	r1, [r4, #0]
 800c764:	6063      	str	r3, [r4, #4]
 800c766:	6054      	str	r4, [r2, #4]
 800c768:	e7cb      	b.n	800c702 <_free_r+0x22>
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	20000470 	.word	0x20000470

0800c770 <__ssputs_r>:
 800c770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c774:	461f      	mov	r7, r3
 800c776:	688e      	ldr	r6, [r1, #8]
 800c778:	4682      	mov	sl, r0
 800c77a:	42be      	cmp	r6, r7
 800c77c:	460c      	mov	r4, r1
 800c77e:	4690      	mov	r8, r2
 800c780:	680b      	ldr	r3, [r1, #0]
 800c782:	d82c      	bhi.n	800c7de <__ssputs_r+0x6e>
 800c784:	898a      	ldrh	r2, [r1, #12]
 800c786:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c78a:	d026      	beq.n	800c7da <__ssputs_r+0x6a>
 800c78c:	6965      	ldr	r5, [r4, #20]
 800c78e:	6909      	ldr	r1, [r1, #16]
 800c790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c794:	eba3 0901 	sub.w	r9, r3, r1
 800c798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c79c:	1c7b      	adds	r3, r7, #1
 800c79e:	444b      	add	r3, r9
 800c7a0:	106d      	asrs	r5, r5, #1
 800c7a2:	429d      	cmp	r5, r3
 800c7a4:	bf38      	it	cc
 800c7a6:	461d      	movcc	r5, r3
 800c7a8:	0553      	lsls	r3, r2, #21
 800c7aa:	d527      	bpl.n	800c7fc <__ssputs_r+0x8c>
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	f7ff fe4d 	bl	800c44c <_malloc_r>
 800c7b2:	4606      	mov	r6, r0
 800c7b4:	b360      	cbz	r0, 800c810 <__ssputs_r+0xa0>
 800c7b6:	464a      	mov	r2, r9
 800c7b8:	6921      	ldr	r1, [r4, #16]
 800c7ba:	f000 fb1c 	bl	800cdf6 <memcpy>
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	6126      	str	r6, [r4, #16]
 800c7cc:	444e      	add	r6, r9
 800c7ce:	6026      	str	r6, [r4, #0]
 800c7d0:	463e      	mov	r6, r7
 800c7d2:	6165      	str	r5, [r4, #20]
 800c7d4:	eba5 0509 	sub.w	r5, r5, r9
 800c7d8:	60a5      	str	r5, [r4, #8]
 800c7da:	42be      	cmp	r6, r7
 800c7dc:	d900      	bls.n	800c7e0 <__ssputs_r+0x70>
 800c7de:	463e      	mov	r6, r7
 800c7e0:	4632      	mov	r2, r6
 800c7e2:	4641      	mov	r1, r8
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	f000 fade 	bl	800cda6 <memmove>
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	68a3      	ldr	r3, [r4, #8]
 800c7ee:	1b9b      	subs	r3, r3, r6
 800c7f0:	60a3      	str	r3, [r4, #8]
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	4433      	add	r3, r6
 800c7f6:	6023      	str	r3, [r4, #0]
 800c7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	f000 faa3 	bl	800cd48 <_realloc_r>
 800c802:	4606      	mov	r6, r0
 800c804:	2800      	cmp	r0, #0
 800c806:	d1e0      	bne.n	800c7ca <__ssputs_r+0x5a>
 800c808:	4650      	mov	r0, sl
 800c80a:	6921      	ldr	r1, [r4, #16]
 800c80c:	f7ff ff68 	bl	800c6e0 <_free_r>
 800c810:	230c      	movs	r3, #12
 800c812:	f8ca 3000 	str.w	r3, [sl]
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c820:	81a3      	strh	r3, [r4, #12]
 800c822:	e7e9      	b.n	800c7f8 <__ssputs_r+0x88>

0800c824 <_svfiprintf_r>:
 800c824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c828:	4698      	mov	r8, r3
 800c82a:	898b      	ldrh	r3, [r1, #12]
 800c82c:	4607      	mov	r7, r0
 800c82e:	061b      	lsls	r3, r3, #24
 800c830:	460d      	mov	r5, r1
 800c832:	4614      	mov	r4, r2
 800c834:	b09d      	sub	sp, #116	; 0x74
 800c836:	d50e      	bpl.n	800c856 <_svfiprintf_r+0x32>
 800c838:	690b      	ldr	r3, [r1, #16]
 800c83a:	b963      	cbnz	r3, 800c856 <_svfiprintf_r+0x32>
 800c83c:	2140      	movs	r1, #64	; 0x40
 800c83e:	f7ff fe05 	bl	800c44c <_malloc_r>
 800c842:	6028      	str	r0, [r5, #0]
 800c844:	6128      	str	r0, [r5, #16]
 800c846:	b920      	cbnz	r0, 800c852 <_svfiprintf_r+0x2e>
 800c848:	230c      	movs	r3, #12
 800c84a:	603b      	str	r3, [r7, #0]
 800c84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c850:	e0d0      	b.n	800c9f4 <_svfiprintf_r+0x1d0>
 800c852:	2340      	movs	r3, #64	; 0x40
 800c854:	616b      	str	r3, [r5, #20]
 800c856:	2300      	movs	r3, #0
 800c858:	9309      	str	r3, [sp, #36]	; 0x24
 800c85a:	2320      	movs	r3, #32
 800c85c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c860:	2330      	movs	r3, #48	; 0x30
 800c862:	f04f 0901 	mov.w	r9, #1
 800c866:	f8cd 800c 	str.w	r8, [sp, #12]
 800c86a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca0c <_svfiprintf_r+0x1e8>
 800c86e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c872:	4623      	mov	r3, r4
 800c874:	469a      	mov	sl, r3
 800c876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c87a:	b10a      	cbz	r2, 800c880 <_svfiprintf_r+0x5c>
 800c87c:	2a25      	cmp	r2, #37	; 0x25
 800c87e:	d1f9      	bne.n	800c874 <_svfiprintf_r+0x50>
 800c880:	ebba 0b04 	subs.w	fp, sl, r4
 800c884:	d00b      	beq.n	800c89e <_svfiprintf_r+0x7a>
 800c886:	465b      	mov	r3, fp
 800c888:	4622      	mov	r2, r4
 800c88a:	4629      	mov	r1, r5
 800c88c:	4638      	mov	r0, r7
 800c88e:	f7ff ff6f 	bl	800c770 <__ssputs_r>
 800c892:	3001      	adds	r0, #1
 800c894:	f000 80a9 	beq.w	800c9ea <_svfiprintf_r+0x1c6>
 800c898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c89a:	445a      	add	r2, fp
 800c89c:	9209      	str	r2, [sp, #36]	; 0x24
 800c89e:	f89a 3000 	ldrb.w	r3, [sl]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 80a1 	beq.w	800c9ea <_svfiprintf_r+0x1c6>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8b2:	f10a 0a01 	add.w	sl, sl, #1
 800c8b6:	9304      	str	r3, [sp, #16]
 800c8b8:	9307      	str	r3, [sp, #28]
 800c8ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8be:	931a      	str	r3, [sp, #104]	; 0x68
 800c8c0:	4654      	mov	r4, sl
 800c8c2:	2205      	movs	r2, #5
 800c8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c8:	4850      	ldr	r0, [pc, #320]	; (800ca0c <_svfiprintf_r+0x1e8>)
 800c8ca:	f000 fa86 	bl	800cdda <memchr>
 800c8ce:	9a04      	ldr	r2, [sp, #16]
 800c8d0:	b9d8      	cbnz	r0, 800c90a <_svfiprintf_r+0xe6>
 800c8d2:	06d0      	lsls	r0, r2, #27
 800c8d4:	bf44      	itt	mi
 800c8d6:	2320      	movmi	r3, #32
 800c8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8dc:	0711      	lsls	r1, r2, #28
 800c8de:	bf44      	itt	mi
 800c8e0:	232b      	movmi	r3, #43	; 0x2b
 800c8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ec:	d015      	beq.n	800c91a <_svfiprintf_r+0xf6>
 800c8ee:	4654      	mov	r4, sl
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	f04f 0c0a 	mov.w	ip, #10
 800c8f6:	9a07      	ldr	r2, [sp, #28]
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8fe:	3b30      	subs	r3, #48	; 0x30
 800c900:	2b09      	cmp	r3, #9
 800c902:	d94d      	bls.n	800c9a0 <_svfiprintf_r+0x17c>
 800c904:	b1b0      	cbz	r0, 800c934 <_svfiprintf_r+0x110>
 800c906:	9207      	str	r2, [sp, #28]
 800c908:	e014      	b.n	800c934 <_svfiprintf_r+0x110>
 800c90a:	eba0 0308 	sub.w	r3, r0, r8
 800c90e:	fa09 f303 	lsl.w	r3, r9, r3
 800c912:	4313      	orrs	r3, r2
 800c914:	46a2      	mov	sl, r4
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	e7d2      	b.n	800c8c0 <_svfiprintf_r+0x9c>
 800c91a:	9b03      	ldr	r3, [sp, #12]
 800c91c:	1d19      	adds	r1, r3, #4
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	9103      	str	r1, [sp, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	bfbb      	ittet	lt
 800c926:	425b      	neglt	r3, r3
 800c928:	f042 0202 	orrlt.w	r2, r2, #2
 800c92c:	9307      	strge	r3, [sp, #28]
 800c92e:	9307      	strlt	r3, [sp, #28]
 800c930:	bfb8      	it	lt
 800c932:	9204      	strlt	r2, [sp, #16]
 800c934:	7823      	ldrb	r3, [r4, #0]
 800c936:	2b2e      	cmp	r3, #46	; 0x2e
 800c938:	d10c      	bne.n	800c954 <_svfiprintf_r+0x130>
 800c93a:	7863      	ldrb	r3, [r4, #1]
 800c93c:	2b2a      	cmp	r3, #42	; 0x2a
 800c93e:	d134      	bne.n	800c9aa <_svfiprintf_r+0x186>
 800c940:	9b03      	ldr	r3, [sp, #12]
 800c942:	3402      	adds	r4, #2
 800c944:	1d1a      	adds	r2, r3, #4
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	9203      	str	r2, [sp, #12]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	bfb8      	it	lt
 800c94e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c952:	9305      	str	r3, [sp, #20]
 800c954:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca10 <_svfiprintf_r+0x1ec>
 800c958:	2203      	movs	r2, #3
 800c95a:	4650      	mov	r0, sl
 800c95c:	7821      	ldrb	r1, [r4, #0]
 800c95e:	f000 fa3c 	bl	800cdda <memchr>
 800c962:	b138      	cbz	r0, 800c974 <_svfiprintf_r+0x150>
 800c964:	2240      	movs	r2, #64	; 0x40
 800c966:	9b04      	ldr	r3, [sp, #16]
 800c968:	eba0 000a 	sub.w	r0, r0, sl
 800c96c:	4082      	lsls	r2, r0
 800c96e:	4313      	orrs	r3, r2
 800c970:	3401      	adds	r4, #1
 800c972:	9304      	str	r3, [sp, #16]
 800c974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c978:	2206      	movs	r2, #6
 800c97a:	4826      	ldr	r0, [pc, #152]	; (800ca14 <_svfiprintf_r+0x1f0>)
 800c97c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c980:	f000 fa2b 	bl	800cdda <memchr>
 800c984:	2800      	cmp	r0, #0
 800c986:	d038      	beq.n	800c9fa <_svfiprintf_r+0x1d6>
 800c988:	4b23      	ldr	r3, [pc, #140]	; (800ca18 <_svfiprintf_r+0x1f4>)
 800c98a:	bb1b      	cbnz	r3, 800c9d4 <_svfiprintf_r+0x1b0>
 800c98c:	9b03      	ldr	r3, [sp, #12]
 800c98e:	3307      	adds	r3, #7
 800c990:	f023 0307 	bic.w	r3, r3, #7
 800c994:	3308      	adds	r3, #8
 800c996:	9303      	str	r3, [sp, #12]
 800c998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c99a:	4433      	add	r3, r6
 800c99c:	9309      	str	r3, [sp, #36]	; 0x24
 800c99e:	e768      	b.n	800c872 <_svfiprintf_r+0x4e>
 800c9a0:	460c      	mov	r4, r1
 800c9a2:	2001      	movs	r0, #1
 800c9a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9a8:	e7a6      	b.n	800c8f8 <_svfiprintf_r+0xd4>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f04f 0c0a 	mov.w	ip, #10
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	3401      	adds	r4, #1
 800c9b4:	9305      	str	r3, [sp, #20]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9bc:	3a30      	subs	r2, #48	; 0x30
 800c9be:	2a09      	cmp	r2, #9
 800c9c0:	d903      	bls.n	800c9ca <_svfiprintf_r+0x1a6>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0c6      	beq.n	800c954 <_svfiprintf_r+0x130>
 800c9c6:	9105      	str	r1, [sp, #20]
 800c9c8:	e7c4      	b.n	800c954 <_svfiprintf_r+0x130>
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9d2:	e7f0      	b.n	800c9b6 <_svfiprintf_r+0x192>
 800c9d4:	ab03      	add	r3, sp, #12
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	462a      	mov	r2, r5
 800c9da:	4638      	mov	r0, r7
 800c9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <_svfiprintf_r+0x1f8>)
 800c9de:	a904      	add	r1, sp, #16
 800c9e0:	f3af 8000 	nop.w
 800c9e4:	1c42      	adds	r2, r0, #1
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	d1d6      	bne.n	800c998 <_svfiprintf_r+0x174>
 800c9ea:	89ab      	ldrh	r3, [r5, #12]
 800c9ec:	065b      	lsls	r3, r3, #25
 800c9ee:	f53f af2d 	bmi.w	800c84c <_svfiprintf_r+0x28>
 800c9f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9f4:	b01d      	add	sp, #116	; 0x74
 800c9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fa:	ab03      	add	r3, sp, #12
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	462a      	mov	r2, r5
 800ca00:	4638      	mov	r0, r7
 800ca02:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <_svfiprintf_r+0x1f8>)
 800ca04:	a904      	add	r1, sp, #16
 800ca06:	f000 f87d 	bl	800cb04 <_printf_i>
 800ca0a:	e7eb      	b.n	800c9e4 <_svfiprintf_r+0x1c0>
 800ca0c:	0800de43 	.word	0x0800de43
 800ca10:	0800de49 	.word	0x0800de49
 800ca14:	0800de4d 	.word	0x0800de4d
 800ca18:	00000000 	.word	0x00000000
 800ca1c:	0800c771 	.word	0x0800c771

0800ca20 <_printf_common>:
 800ca20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca24:	4616      	mov	r6, r2
 800ca26:	4699      	mov	r9, r3
 800ca28:	688a      	ldr	r2, [r1, #8]
 800ca2a:	690b      	ldr	r3, [r1, #16]
 800ca2c:	4607      	mov	r7, r0
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	bfb8      	it	lt
 800ca32:	4613      	movlt	r3, r2
 800ca34:	6033      	str	r3, [r6, #0]
 800ca36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca40:	b10a      	cbz	r2, 800ca46 <_printf_common+0x26>
 800ca42:	3301      	adds	r3, #1
 800ca44:	6033      	str	r3, [r6, #0]
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	0699      	lsls	r1, r3, #26
 800ca4a:	bf42      	ittt	mi
 800ca4c:	6833      	ldrmi	r3, [r6, #0]
 800ca4e:	3302      	addmi	r3, #2
 800ca50:	6033      	strmi	r3, [r6, #0]
 800ca52:	6825      	ldr	r5, [r4, #0]
 800ca54:	f015 0506 	ands.w	r5, r5, #6
 800ca58:	d106      	bne.n	800ca68 <_printf_common+0x48>
 800ca5a:	f104 0a19 	add.w	sl, r4, #25
 800ca5e:	68e3      	ldr	r3, [r4, #12]
 800ca60:	6832      	ldr	r2, [r6, #0]
 800ca62:	1a9b      	subs	r3, r3, r2
 800ca64:	42ab      	cmp	r3, r5
 800ca66:	dc2b      	bgt.n	800cac0 <_printf_common+0xa0>
 800ca68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca6c:	1e13      	subs	r3, r2, #0
 800ca6e:	6822      	ldr	r2, [r4, #0]
 800ca70:	bf18      	it	ne
 800ca72:	2301      	movne	r3, #1
 800ca74:	0692      	lsls	r2, r2, #26
 800ca76:	d430      	bmi.n	800cada <_printf_common+0xba>
 800ca78:	4649      	mov	r1, r9
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca80:	47c0      	blx	r8
 800ca82:	3001      	adds	r0, #1
 800ca84:	d023      	beq.n	800cace <_printf_common+0xae>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	6922      	ldr	r2, [r4, #16]
 800ca8a:	f003 0306 	and.w	r3, r3, #6
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	bf14      	ite	ne
 800ca92:	2500      	movne	r5, #0
 800ca94:	6833      	ldreq	r3, [r6, #0]
 800ca96:	f04f 0600 	mov.w	r6, #0
 800ca9a:	bf08      	it	eq
 800ca9c:	68e5      	ldreq	r5, [r4, #12]
 800ca9e:	f104 041a 	add.w	r4, r4, #26
 800caa2:	bf08      	it	eq
 800caa4:	1aed      	subeq	r5, r5, r3
 800caa6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800caaa:	bf08      	it	eq
 800caac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cab0:	4293      	cmp	r3, r2
 800cab2:	bfc4      	itt	gt
 800cab4:	1a9b      	subgt	r3, r3, r2
 800cab6:	18ed      	addgt	r5, r5, r3
 800cab8:	42b5      	cmp	r5, r6
 800caba:	d11a      	bne.n	800caf2 <_printf_common+0xd2>
 800cabc:	2000      	movs	r0, #0
 800cabe:	e008      	b.n	800cad2 <_printf_common+0xb2>
 800cac0:	2301      	movs	r3, #1
 800cac2:	4652      	mov	r2, sl
 800cac4:	4649      	mov	r1, r9
 800cac6:	4638      	mov	r0, r7
 800cac8:	47c0      	blx	r8
 800caca:	3001      	adds	r0, #1
 800cacc:	d103      	bne.n	800cad6 <_printf_common+0xb6>
 800cace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad6:	3501      	adds	r5, #1
 800cad8:	e7c1      	b.n	800ca5e <_printf_common+0x3e>
 800cada:	2030      	movs	r0, #48	; 0x30
 800cadc:	18e1      	adds	r1, r4, r3
 800cade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cae2:	1c5a      	adds	r2, r3, #1
 800cae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cae8:	4422      	add	r2, r4
 800caea:	3302      	adds	r3, #2
 800caec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800caf0:	e7c2      	b.n	800ca78 <_printf_common+0x58>
 800caf2:	2301      	movs	r3, #1
 800caf4:	4622      	mov	r2, r4
 800caf6:	4649      	mov	r1, r9
 800caf8:	4638      	mov	r0, r7
 800cafa:	47c0      	blx	r8
 800cafc:	3001      	adds	r0, #1
 800cafe:	d0e6      	beq.n	800cace <_printf_common+0xae>
 800cb00:	3601      	adds	r6, #1
 800cb02:	e7d9      	b.n	800cab8 <_printf_common+0x98>

0800cb04 <_printf_i>:
 800cb04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb08:	7e0f      	ldrb	r7, [r1, #24]
 800cb0a:	4691      	mov	r9, r2
 800cb0c:	2f78      	cmp	r7, #120	; 0x78
 800cb0e:	4680      	mov	r8, r0
 800cb10:	460c      	mov	r4, r1
 800cb12:	469a      	mov	sl, r3
 800cb14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb1a:	d807      	bhi.n	800cb2c <_printf_i+0x28>
 800cb1c:	2f62      	cmp	r7, #98	; 0x62
 800cb1e:	d80a      	bhi.n	800cb36 <_printf_i+0x32>
 800cb20:	2f00      	cmp	r7, #0
 800cb22:	f000 80d5 	beq.w	800ccd0 <_printf_i+0x1cc>
 800cb26:	2f58      	cmp	r7, #88	; 0x58
 800cb28:	f000 80c1 	beq.w	800ccae <_printf_i+0x1aa>
 800cb2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb34:	e03a      	b.n	800cbac <_printf_i+0xa8>
 800cb36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb3a:	2b15      	cmp	r3, #21
 800cb3c:	d8f6      	bhi.n	800cb2c <_printf_i+0x28>
 800cb3e:	a101      	add	r1, pc, #4	; (adr r1, 800cb44 <_printf_i+0x40>)
 800cb40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb44:	0800cb9d 	.word	0x0800cb9d
 800cb48:	0800cbb1 	.word	0x0800cbb1
 800cb4c:	0800cb2d 	.word	0x0800cb2d
 800cb50:	0800cb2d 	.word	0x0800cb2d
 800cb54:	0800cb2d 	.word	0x0800cb2d
 800cb58:	0800cb2d 	.word	0x0800cb2d
 800cb5c:	0800cbb1 	.word	0x0800cbb1
 800cb60:	0800cb2d 	.word	0x0800cb2d
 800cb64:	0800cb2d 	.word	0x0800cb2d
 800cb68:	0800cb2d 	.word	0x0800cb2d
 800cb6c:	0800cb2d 	.word	0x0800cb2d
 800cb70:	0800ccb7 	.word	0x0800ccb7
 800cb74:	0800cbdd 	.word	0x0800cbdd
 800cb78:	0800cc71 	.word	0x0800cc71
 800cb7c:	0800cb2d 	.word	0x0800cb2d
 800cb80:	0800cb2d 	.word	0x0800cb2d
 800cb84:	0800ccd9 	.word	0x0800ccd9
 800cb88:	0800cb2d 	.word	0x0800cb2d
 800cb8c:	0800cbdd 	.word	0x0800cbdd
 800cb90:	0800cb2d 	.word	0x0800cb2d
 800cb94:	0800cb2d 	.word	0x0800cb2d
 800cb98:	0800cc79 	.word	0x0800cc79
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	1d1a      	adds	r2, r3, #4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	602a      	str	r2, [r5, #0]
 800cba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbac:	2301      	movs	r3, #1
 800cbae:	e0a0      	b.n	800ccf2 <_printf_i+0x1ee>
 800cbb0:	6820      	ldr	r0, [r4, #0]
 800cbb2:	682b      	ldr	r3, [r5, #0]
 800cbb4:	0607      	lsls	r7, r0, #24
 800cbb6:	f103 0104 	add.w	r1, r3, #4
 800cbba:	6029      	str	r1, [r5, #0]
 800cbbc:	d501      	bpl.n	800cbc2 <_printf_i+0xbe>
 800cbbe:	681e      	ldr	r6, [r3, #0]
 800cbc0:	e003      	b.n	800cbca <_printf_i+0xc6>
 800cbc2:	0646      	lsls	r6, r0, #25
 800cbc4:	d5fb      	bpl.n	800cbbe <_printf_i+0xba>
 800cbc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cbca:	2e00      	cmp	r6, #0
 800cbcc:	da03      	bge.n	800cbd6 <_printf_i+0xd2>
 800cbce:	232d      	movs	r3, #45	; 0x2d
 800cbd0:	4276      	negs	r6, r6
 800cbd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbd6:	230a      	movs	r3, #10
 800cbd8:	4859      	ldr	r0, [pc, #356]	; (800cd40 <_printf_i+0x23c>)
 800cbda:	e012      	b.n	800cc02 <_printf_i+0xfe>
 800cbdc:	682b      	ldr	r3, [r5, #0]
 800cbde:	6820      	ldr	r0, [r4, #0]
 800cbe0:	1d19      	adds	r1, r3, #4
 800cbe2:	6029      	str	r1, [r5, #0]
 800cbe4:	0605      	lsls	r5, r0, #24
 800cbe6:	d501      	bpl.n	800cbec <_printf_i+0xe8>
 800cbe8:	681e      	ldr	r6, [r3, #0]
 800cbea:	e002      	b.n	800cbf2 <_printf_i+0xee>
 800cbec:	0641      	lsls	r1, r0, #25
 800cbee:	d5fb      	bpl.n	800cbe8 <_printf_i+0xe4>
 800cbf0:	881e      	ldrh	r6, [r3, #0]
 800cbf2:	2f6f      	cmp	r7, #111	; 0x6f
 800cbf4:	bf0c      	ite	eq
 800cbf6:	2308      	moveq	r3, #8
 800cbf8:	230a      	movne	r3, #10
 800cbfa:	4851      	ldr	r0, [pc, #324]	; (800cd40 <_printf_i+0x23c>)
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc02:	6865      	ldr	r5, [r4, #4]
 800cc04:	2d00      	cmp	r5, #0
 800cc06:	bfa8      	it	ge
 800cc08:	6821      	ldrge	r1, [r4, #0]
 800cc0a:	60a5      	str	r5, [r4, #8]
 800cc0c:	bfa4      	itt	ge
 800cc0e:	f021 0104 	bicge.w	r1, r1, #4
 800cc12:	6021      	strge	r1, [r4, #0]
 800cc14:	b90e      	cbnz	r6, 800cc1a <_printf_i+0x116>
 800cc16:	2d00      	cmp	r5, #0
 800cc18:	d04b      	beq.n	800ccb2 <_printf_i+0x1ae>
 800cc1a:	4615      	mov	r5, r2
 800cc1c:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc20:	fb03 6711 	mls	r7, r3, r1, r6
 800cc24:	5dc7      	ldrb	r7, [r0, r7]
 800cc26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc2a:	4637      	mov	r7, r6
 800cc2c:	42bb      	cmp	r3, r7
 800cc2e:	460e      	mov	r6, r1
 800cc30:	d9f4      	bls.n	800cc1c <_printf_i+0x118>
 800cc32:	2b08      	cmp	r3, #8
 800cc34:	d10b      	bne.n	800cc4e <_printf_i+0x14a>
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	07de      	lsls	r6, r3, #31
 800cc3a:	d508      	bpl.n	800cc4e <_printf_i+0x14a>
 800cc3c:	6923      	ldr	r3, [r4, #16]
 800cc3e:	6861      	ldr	r1, [r4, #4]
 800cc40:	4299      	cmp	r1, r3
 800cc42:	bfde      	ittt	le
 800cc44:	2330      	movle	r3, #48	; 0x30
 800cc46:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc4a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc4e:	1b52      	subs	r2, r2, r5
 800cc50:	6122      	str	r2, [r4, #16]
 800cc52:	464b      	mov	r3, r9
 800cc54:	4621      	mov	r1, r4
 800cc56:	4640      	mov	r0, r8
 800cc58:	f8cd a000 	str.w	sl, [sp]
 800cc5c:	aa03      	add	r2, sp, #12
 800cc5e:	f7ff fedf 	bl	800ca20 <_printf_common>
 800cc62:	3001      	adds	r0, #1
 800cc64:	d14a      	bne.n	800ccfc <_printf_i+0x1f8>
 800cc66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc6a:	b004      	add	sp, #16
 800cc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	f043 0320 	orr.w	r3, r3, #32
 800cc76:	6023      	str	r3, [r4, #0]
 800cc78:	2778      	movs	r7, #120	; 0x78
 800cc7a:	4832      	ldr	r0, [pc, #200]	; (800cd44 <_printf_i+0x240>)
 800cc7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	6829      	ldr	r1, [r5, #0]
 800cc84:	061f      	lsls	r7, r3, #24
 800cc86:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc8a:	d402      	bmi.n	800cc92 <_printf_i+0x18e>
 800cc8c:	065f      	lsls	r7, r3, #25
 800cc8e:	bf48      	it	mi
 800cc90:	b2b6      	uxthmi	r6, r6
 800cc92:	07df      	lsls	r7, r3, #31
 800cc94:	bf48      	it	mi
 800cc96:	f043 0320 	orrmi.w	r3, r3, #32
 800cc9a:	6029      	str	r1, [r5, #0]
 800cc9c:	bf48      	it	mi
 800cc9e:	6023      	strmi	r3, [r4, #0]
 800cca0:	b91e      	cbnz	r6, 800ccaa <_printf_i+0x1a6>
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	f023 0320 	bic.w	r3, r3, #32
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	2310      	movs	r3, #16
 800ccac:	e7a6      	b.n	800cbfc <_printf_i+0xf8>
 800ccae:	4824      	ldr	r0, [pc, #144]	; (800cd40 <_printf_i+0x23c>)
 800ccb0:	e7e4      	b.n	800cc7c <_printf_i+0x178>
 800ccb2:	4615      	mov	r5, r2
 800ccb4:	e7bd      	b.n	800cc32 <_printf_i+0x12e>
 800ccb6:	682b      	ldr	r3, [r5, #0]
 800ccb8:	6826      	ldr	r6, [r4, #0]
 800ccba:	1d18      	adds	r0, r3, #4
 800ccbc:	6961      	ldr	r1, [r4, #20]
 800ccbe:	6028      	str	r0, [r5, #0]
 800ccc0:	0635      	lsls	r5, r6, #24
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	d501      	bpl.n	800ccca <_printf_i+0x1c6>
 800ccc6:	6019      	str	r1, [r3, #0]
 800ccc8:	e002      	b.n	800ccd0 <_printf_i+0x1cc>
 800ccca:	0670      	lsls	r0, r6, #25
 800cccc:	d5fb      	bpl.n	800ccc6 <_printf_i+0x1c2>
 800ccce:	8019      	strh	r1, [r3, #0]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4615      	mov	r5, r2
 800ccd4:	6123      	str	r3, [r4, #16]
 800ccd6:	e7bc      	b.n	800cc52 <_printf_i+0x14e>
 800ccd8:	682b      	ldr	r3, [r5, #0]
 800ccda:	2100      	movs	r1, #0
 800ccdc:	1d1a      	adds	r2, r3, #4
 800ccde:	602a      	str	r2, [r5, #0]
 800cce0:	681d      	ldr	r5, [r3, #0]
 800cce2:	6862      	ldr	r2, [r4, #4]
 800cce4:	4628      	mov	r0, r5
 800cce6:	f000 f878 	bl	800cdda <memchr>
 800ccea:	b108      	cbz	r0, 800ccf0 <_printf_i+0x1ec>
 800ccec:	1b40      	subs	r0, r0, r5
 800ccee:	6060      	str	r0, [r4, #4]
 800ccf0:	6863      	ldr	r3, [r4, #4]
 800ccf2:	6123      	str	r3, [r4, #16]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccfa:	e7aa      	b.n	800cc52 <_printf_i+0x14e>
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4649      	mov	r1, r9
 800cd00:	4640      	mov	r0, r8
 800cd02:	6923      	ldr	r3, [r4, #16]
 800cd04:	47d0      	blx	sl
 800cd06:	3001      	adds	r0, #1
 800cd08:	d0ad      	beq.n	800cc66 <_printf_i+0x162>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	079b      	lsls	r3, r3, #30
 800cd0e:	d413      	bmi.n	800cd38 <_printf_i+0x234>
 800cd10:	68e0      	ldr	r0, [r4, #12]
 800cd12:	9b03      	ldr	r3, [sp, #12]
 800cd14:	4298      	cmp	r0, r3
 800cd16:	bfb8      	it	lt
 800cd18:	4618      	movlt	r0, r3
 800cd1a:	e7a6      	b.n	800cc6a <_printf_i+0x166>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	4632      	mov	r2, r6
 800cd20:	4649      	mov	r1, r9
 800cd22:	4640      	mov	r0, r8
 800cd24:	47d0      	blx	sl
 800cd26:	3001      	adds	r0, #1
 800cd28:	d09d      	beq.n	800cc66 <_printf_i+0x162>
 800cd2a:	3501      	adds	r5, #1
 800cd2c:	68e3      	ldr	r3, [r4, #12]
 800cd2e:	9903      	ldr	r1, [sp, #12]
 800cd30:	1a5b      	subs	r3, r3, r1
 800cd32:	42ab      	cmp	r3, r5
 800cd34:	dcf2      	bgt.n	800cd1c <_printf_i+0x218>
 800cd36:	e7eb      	b.n	800cd10 <_printf_i+0x20c>
 800cd38:	2500      	movs	r5, #0
 800cd3a:	f104 0619 	add.w	r6, r4, #25
 800cd3e:	e7f5      	b.n	800cd2c <_printf_i+0x228>
 800cd40:	0800de54 	.word	0x0800de54
 800cd44:	0800de65 	.word	0x0800de65

0800cd48 <_realloc_r>:
 800cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4c:	4680      	mov	r8, r0
 800cd4e:	4614      	mov	r4, r2
 800cd50:	460e      	mov	r6, r1
 800cd52:	b921      	cbnz	r1, 800cd5e <_realloc_r+0x16>
 800cd54:	4611      	mov	r1, r2
 800cd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5a:	f7ff bb77 	b.w	800c44c <_malloc_r>
 800cd5e:	b92a      	cbnz	r2, 800cd6c <_realloc_r+0x24>
 800cd60:	f7ff fcbe 	bl	800c6e0 <_free_r>
 800cd64:	4625      	mov	r5, r4
 800cd66:	4628      	mov	r0, r5
 800cd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd6c:	f000 f851 	bl	800ce12 <_malloc_usable_size_r>
 800cd70:	4284      	cmp	r4, r0
 800cd72:	4607      	mov	r7, r0
 800cd74:	d802      	bhi.n	800cd7c <_realloc_r+0x34>
 800cd76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd7a:	d812      	bhi.n	800cda2 <_realloc_r+0x5a>
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	4640      	mov	r0, r8
 800cd80:	f7ff fb64 	bl	800c44c <_malloc_r>
 800cd84:	4605      	mov	r5, r0
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d0ed      	beq.n	800cd66 <_realloc_r+0x1e>
 800cd8a:	42bc      	cmp	r4, r7
 800cd8c:	4622      	mov	r2, r4
 800cd8e:	4631      	mov	r1, r6
 800cd90:	bf28      	it	cs
 800cd92:	463a      	movcs	r2, r7
 800cd94:	f000 f82f 	bl	800cdf6 <memcpy>
 800cd98:	4631      	mov	r1, r6
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	f7ff fca0 	bl	800c6e0 <_free_r>
 800cda0:	e7e1      	b.n	800cd66 <_realloc_r+0x1e>
 800cda2:	4635      	mov	r5, r6
 800cda4:	e7df      	b.n	800cd66 <_realloc_r+0x1e>

0800cda6 <memmove>:
 800cda6:	4288      	cmp	r0, r1
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	eb01 0402 	add.w	r4, r1, r2
 800cdae:	d902      	bls.n	800cdb6 <memmove+0x10>
 800cdb0:	4284      	cmp	r4, r0
 800cdb2:	4623      	mov	r3, r4
 800cdb4:	d807      	bhi.n	800cdc6 <memmove+0x20>
 800cdb6:	1e43      	subs	r3, r0, #1
 800cdb8:	42a1      	cmp	r1, r4
 800cdba:	d008      	beq.n	800cdce <memmove+0x28>
 800cdbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdc4:	e7f8      	b.n	800cdb8 <memmove+0x12>
 800cdc6:	4601      	mov	r1, r0
 800cdc8:	4402      	add	r2, r0
 800cdca:	428a      	cmp	r2, r1
 800cdcc:	d100      	bne.n	800cdd0 <memmove+0x2a>
 800cdce:	bd10      	pop	{r4, pc}
 800cdd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdd8:	e7f7      	b.n	800cdca <memmove+0x24>

0800cdda <memchr>:
 800cdda:	4603      	mov	r3, r0
 800cddc:	b510      	push	{r4, lr}
 800cdde:	b2c9      	uxtb	r1, r1
 800cde0:	4402      	add	r2, r0
 800cde2:	4293      	cmp	r3, r2
 800cde4:	4618      	mov	r0, r3
 800cde6:	d101      	bne.n	800cdec <memchr+0x12>
 800cde8:	2000      	movs	r0, #0
 800cdea:	e003      	b.n	800cdf4 <memchr+0x1a>
 800cdec:	7804      	ldrb	r4, [r0, #0]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	428c      	cmp	r4, r1
 800cdf2:	d1f6      	bne.n	800cde2 <memchr+0x8>
 800cdf4:	bd10      	pop	{r4, pc}

0800cdf6 <memcpy>:
 800cdf6:	440a      	add	r2, r1
 800cdf8:	4291      	cmp	r1, r2
 800cdfa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdfe:	d100      	bne.n	800ce02 <memcpy+0xc>
 800ce00:	4770      	bx	lr
 800ce02:	b510      	push	{r4, lr}
 800ce04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce08:	4291      	cmp	r1, r2
 800ce0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce0e:	d1f9      	bne.n	800ce04 <memcpy+0xe>
 800ce10:	bd10      	pop	{r4, pc}

0800ce12 <_malloc_usable_size_r>:
 800ce12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce16:	1f18      	subs	r0, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	bfbc      	itt	lt
 800ce1c:	580b      	ldrlt	r3, [r1, r0]
 800ce1e:	18c0      	addlt	r0, r0, r3
 800ce20:	4770      	bx	lr
	...

0800ce24 <_init>:
 800ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce26:	bf00      	nop
 800ce28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce2a:	bc08      	pop	{r3}
 800ce2c:	469e      	mov	lr, r3
 800ce2e:	4770      	bx	lr

0800ce30 <_fini>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	bf00      	nop
 800ce34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce36:	bc08      	pop	{r3}
 800ce38:	469e      	mov	lr, r3
 800ce3a:	4770      	bx	lr
